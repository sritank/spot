// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/trajectory.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2ftrajectory_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2ftrajectory_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "bosdyn/api/geometry.pb.h"
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2ftrajectory_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bosdyn_2fapi_2ftrajectory_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2ftrajectory_2eproto;
namespace bosdyn {
namespace api {
class SE2Trajectory;
class SE2TrajectoryDefaultTypeInternal;
extern SE2TrajectoryDefaultTypeInternal _SE2Trajectory_default_instance_;
class SE2TrajectoryPoint;
class SE2TrajectoryPointDefaultTypeInternal;
extern SE2TrajectoryPointDefaultTypeInternal _SE2TrajectoryPoint_default_instance_;
class SE3Trajectory;
class SE3TrajectoryDefaultTypeInternal;
extern SE3TrajectoryDefaultTypeInternal _SE3Trajectory_default_instance_;
class SE3TrajectoryPoint;
class SE3TrajectoryPointDefaultTypeInternal;
extern SE3TrajectoryPointDefaultTypeInternal _SE3TrajectoryPoint_default_instance_;
class Vec3Trajectory;
class Vec3TrajectoryDefaultTypeInternal;
extern Vec3TrajectoryDefaultTypeInternal _Vec3Trajectory_default_instance_;
class Vec3TrajectoryPoint;
class Vec3TrajectoryPointDefaultTypeInternal;
extern Vec3TrajectoryPointDefaultTypeInternal _Vec3TrajectoryPoint_default_instance_;
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> ::bosdyn::api::SE2Trajectory* Arena::CreateMaybeMessage<::bosdyn::api::SE2Trajectory>(Arena*);
template<> ::bosdyn::api::SE2TrajectoryPoint* Arena::CreateMaybeMessage<::bosdyn::api::SE2TrajectoryPoint>(Arena*);
template<> ::bosdyn::api::SE3Trajectory* Arena::CreateMaybeMessage<::bosdyn::api::SE3Trajectory>(Arena*);
template<> ::bosdyn::api::SE3TrajectoryPoint* Arena::CreateMaybeMessage<::bosdyn::api::SE3TrajectoryPoint>(Arena*);
template<> ::bosdyn::api::Vec3Trajectory* Arena::CreateMaybeMessage<::bosdyn::api::Vec3Trajectory>(Arena*);
template<> ::bosdyn::api::Vec3TrajectoryPoint* Arena::CreateMaybeMessage<::bosdyn::api::Vec3TrajectoryPoint>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bosdyn {
namespace api {

enum PositionalInterpolation : int {
  POS_INTERP_UNKNOWN = 0,
  POS_INTERP_LINEAR = 1,
  POS_INTERP_CUBIC = 2,
  PositionalInterpolation_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PositionalInterpolation_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PositionalInterpolation_IsValid(int value);
constexpr PositionalInterpolation PositionalInterpolation_MIN = POS_INTERP_UNKNOWN;
constexpr PositionalInterpolation PositionalInterpolation_MAX = POS_INTERP_CUBIC;
constexpr int PositionalInterpolation_ARRAYSIZE = PositionalInterpolation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PositionalInterpolation_descriptor();
template<typename T>
inline const std::string& PositionalInterpolation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PositionalInterpolation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PositionalInterpolation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PositionalInterpolation_descriptor(), enum_t_value);
}
inline bool PositionalInterpolation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PositionalInterpolation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PositionalInterpolation>(
    PositionalInterpolation_descriptor(), name, value);
}
enum AngularInterpolation : int {
  ANG_INTERP_UNKNOWN = 0,
  ANG_INTERP_LINEAR = 1,
  ANG_INTERP_CUBIC_EULER = 2,
  AngularInterpolation_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AngularInterpolation_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AngularInterpolation_IsValid(int value);
constexpr AngularInterpolation AngularInterpolation_MIN = ANG_INTERP_UNKNOWN;
constexpr AngularInterpolation AngularInterpolation_MAX = ANG_INTERP_CUBIC_EULER;
constexpr int AngularInterpolation_ARRAYSIZE = AngularInterpolation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AngularInterpolation_descriptor();
template<typename T>
inline const std::string& AngularInterpolation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AngularInterpolation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AngularInterpolation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AngularInterpolation_descriptor(), enum_t_value);
}
inline bool AngularInterpolation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AngularInterpolation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AngularInterpolation>(
    AngularInterpolation_descriptor(), name, value);
}
// ===================================================================

class SE2Trajectory PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.SE2Trajectory) */ {
 public:
  inline SE2Trajectory() : SE2Trajectory(nullptr) {}
  virtual ~SE2Trajectory();

  SE2Trajectory(const SE2Trajectory& from);
  SE2Trajectory(SE2Trajectory&& from) noexcept
    : SE2Trajectory() {
    *this = ::std::move(from);
  }

  inline SE2Trajectory& operator=(const SE2Trajectory& from) {
    CopyFrom(from);
    return *this;
  }
  inline SE2Trajectory& operator=(SE2Trajectory&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SE2Trajectory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SE2Trajectory* internal_default_instance() {
    return reinterpret_cast<const SE2Trajectory*>(
               &_SE2Trajectory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SE2Trajectory& a, SE2Trajectory& b) {
    a.Swap(&b);
  }
  inline void Swap(SE2Trajectory* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SE2Trajectory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SE2Trajectory* New() const final {
    return CreateMaybeMessage<SE2Trajectory>(nullptr);
  }

  SE2Trajectory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SE2Trajectory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SE2Trajectory& from);
  void MergeFrom(const SE2Trajectory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SE2Trajectory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.SE2Trajectory";
  }
  protected:
  explicit SE2Trajectory(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2ftrajectory_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2ftrajectory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
    kReferenceTimeFieldNumber = 3,
    kInterpolationFieldNumber = 4,
  };
  // repeated .bosdyn.api.SE2TrajectoryPoint points = 1;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::bosdyn::api::SE2TrajectoryPoint* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::SE2TrajectoryPoint >*
      mutable_points();
  private:
  const ::bosdyn::api::SE2TrajectoryPoint& _internal_points(int index) const;
  ::bosdyn::api::SE2TrajectoryPoint* _internal_add_points();
  public:
  const ::bosdyn::api::SE2TrajectoryPoint& points(int index) const;
  ::bosdyn::api::SE2TrajectoryPoint* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::SE2TrajectoryPoint >&
      points() const;

  // .google.protobuf.Timestamp reference_time = 3;
  bool has_reference_time() const;
  private:
  bool _internal_has_reference_time() const;
  public:
  void clear_reference_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& reference_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_reference_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_reference_time();
  void set_allocated_reference_time(PROTOBUF_NAMESPACE_ID::Timestamp* reference_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_reference_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_reference_time();
  public:
  void unsafe_arena_set_allocated_reference_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* reference_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_reference_time();

  // .bosdyn.api.PositionalInterpolation interpolation = 4;
  void clear_interpolation();
  ::bosdyn::api::PositionalInterpolation interpolation() const;
  void set_interpolation(::bosdyn::api::PositionalInterpolation value);
  private:
  ::bosdyn::api::PositionalInterpolation _internal_interpolation() const;
  void _internal_set_interpolation(::bosdyn::api::PositionalInterpolation value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.SE2Trajectory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::SE2TrajectoryPoint > points_;
  PROTOBUF_NAMESPACE_ID::Timestamp* reference_time_;
  int interpolation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2ftrajectory_2eproto;
};
// -------------------------------------------------------------------

class SE2TrajectoryPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.SE2TrajectoryPoint) */ {
 public:
  inline SE2TrajectoryPoint() : SE2TrajectoryPoint(nullptr) {}
  virtual ~SE2TrajectoryPoint();

  SE2TrajectoryPoint(const SE2TrajectoryPoint& from);
  SE2TrajectoryPoint(SE2TrajectoryPoint&& from) noexcept
    : SE2TrajectoryPoint() {
    *this = ::std::move(from);
  }

  inline SE2TrajectoryPoint& operator=(const SE2TrajectoryPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline SE2TrajectoryPoint& operator=(SE2TrajectoryPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SE2TrajectoryPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SE2TrajectoryPoint* internal_default_instance() {
    return reinterpret_cast<const SE2TrajectoryPoint*>(
               &_SE2TrajectoryPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SE2TrajectoryPoint& a, SE2TrajectoryPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(SE2TrajectoryPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SE2TrajectoryPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SE2TrajectoryPoint* New() const final {
    return CreateMaybeMessage<SE2TrajectoryPoint>(nullptr);
  }

  SE2TrajectoryPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SE2TrajectoryPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SE2TrajectoryPoint& from);
  void MergeFrom(const SE2TrajectoryPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SE2TrajectoryPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.SE2TrajectoryPoint";
  }
  protected:
  explicit SE2TrajectoryPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2ftrajectory_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2ftrajectory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseFieldNumber = 1,
    kTimeSinceReferenceFieldNumber = 3,
  };
  // .bosdyn.api.SE2Pose pose = 1;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::bosdyn::api::SE2Pose& pose() const;
  ::bosdyn::api::SE2Pose* release_pose();
  ::bosdyn::api::SE2Pose* mutable_pose();
  void set_allocated_pose(::bosdyn::api::SE2Pose* pose);
  private:
  const ::bosdyn::api::SE2Pose& _internal_pose() const;
  ::bosdyn::api::SE2Pose* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::bosdyn::api::SE2Pose* pose);
  ::bosdyn::api::SE2Pose* unsafe_arena_release_pose();

  // .google.protobuf.Duration time_since_reference = 3;
  bool has_time_since_reference() const;
  private:
  bool _internal_has_time_since_reference() const;
  public:
  void clear_time_since_reference();
  const PROTOBUF_NAMESPACE_ID::Duration& time_since_reference() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_time_since_reference();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_time_since_reference();
  void set_allocated_time_since_reference(PROTOBUF_NAMESPACE_ID::Duration* time_since_reference);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_time_since_reference() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_time_since_reference();
  public:
  void unsafe_arena_set_allocated_time_since_reference(
      PROTOBUF_NAMESPACE_ID::Duration* time_since_reference);
  PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_time_since_reference();

  // @@protoc_insertion_point(class_scope:bosdyn.api.SE2TrajectoryPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::SE2Pose* pose_;
  PROTOBUF_NAMESPACE_ID::Duration* time_since_reference_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2ftrajectory_2eproto;
};
// -------------------------------------------------------------------

class SE3Trajectory PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.SE3Trajectory) */ {
 public:
  inline SE3Trajectory() : SE3Trajectory(nullptr) {}
  virtual ~SE3Trajectory();

  SE3Trajectory(const SE3Trajectory& from);
  SE3Trajectory(SE3Trajectory&& from) noexcept
    : SE3Trajectory() {
    *this = ::std::move(from);
  }

  inline SE3Trajectory& operator=(const SE3Trajectory& from) {
    CopyFrom(from);
    return *this;
  }
  inline SE3Trajectory& operator=(SE3Trajectory&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SE3Trajectory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SE3Trajectory* internal_default_instance() {
    return reinterpret_cast<const SE3Trajectory*>(
               &_SE3Trajectory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SE3Trajectory& a, SE3Trajectory& b) {
    a.Swap(&b);
  }
  inline void Swap(SE3Trajectory* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SE3Trajectory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SE3Trajectory* New() const final {
    return CreateMaybeMessage<SE3Trajectory>(nullptr);
  }

  SE3Trajectory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SE3Trajectory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SE3Trajectory& from);
  void MergeFrom(const SE3Trajectory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SE3Trajectory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.SE3Trajectory";
  }
  protected:
  explicit SE3Trajectory(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2ftrajectory_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2ftrajectory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
    kReferenceTimeFieldNumber = 3,
    kPosInterpolationFieldNumber = 4,
    kAngInterpolationFieldNumber = 5,
  };
  // repeated .bosdyn.api.SE3TrajectoryPoint points = 1;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::bosdyn::api::SE3TrajectoryPoint* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::SE3TrajectoryPoint >*
      mutable_points();
  private:
  const ::bosdyn::api::SE3TrajectoryPoint& _internal_points(int index) const;
  ::bosdyn::api::SE3TrajectoryPoint* _internal_add_points();
  public:
  const ::bosdyn::api::SE3TrajectoryPoint& points(int index) const;
  ::bosdyn::api::SE3TrajectoryPoint* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::SE3TrajectoryPoint >&
      points() const;

  // .google.protobuf.Timestamp reference_time = 3;
  bool has_reference_time() const;
  private:
  bool _internal_has_reference_time() const;
  public:
  void clear_reference_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& reference_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_reference_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_reference_time();
  void set_allocated_reference_time(PROTOBUF_NAMESPACE_ID::Timestamp* reference_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_reference_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_reference_time();
  public:
  void unsafe_arena_set_allocated_reference_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* reference_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_reference_time();

  // .bosdyn.api.PositionalInterpolation pos_interpolation = 4;
  void clear_pos_interpolation();
  ::bosdyn::api::PositionalInterpolation pos_interpolation() const;
  void set_pos_interpolation(::bosdyn::api::PositionalInterpolation value);
  private:
  ::bosdyn::api::PositionalInterpolation _internal_pos_interpolation() const;
  void _internal_set_pos_interpolation(::bosdyn::api::PositionalInterpolation value);
  public:

  // .bosdyn.api.AngularInterpolation ang_interpolation = 5;
  void clear_ang_interpolation();
  ::bosdyn::api::AngularInterpolation ang_interpolation() const;
  void set_ang_interpolation(::bosdyn::api::AngularInterpolation value);
  private:
  ::bosdyn::api::AngularInterpolation _internal_ang_interpolation() const;
  void _internal_set_ang_interpolation(::bosdyn::api::AngularInterpolation value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.SE3Trajectory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::SE3TrajectoryPoint > points_;
  PROTOBUF_NAMESPACE_ID::Timestamp* reference_time_;
  int pos_interpolation_;
  int ang_interpolation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2ftrajectory_2eproto;
};
// -------------------------------------------------------------------

class SE3TrajectoryPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.SE3TrajectoryPoint) */ {
 public:
  inline SE3TrajectoryPoint() : SE3TrajectoryPoint(nullptr) {}
  virtual ~SE3TrajectoryPoint();

  SE3TrajectoryPoint(const SE3TrajectoryPoint& from);
  SE3TrajectoryPoint(SE3TrajectoryPoint&& from) noexcept
    : SE3TrajectoryPoint() {
    *this = ::std::move(from);
  }

  inline SE3TrajectoryPoint& operator=(const SE3TrajectoryPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline SE3TrajectoryPoint& operator=(SE3TrajectoryPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SE3TrajectoryPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SE3TrajectoryPoint* internal_default_instance() {
    return reinterpret_cast<const SE3TrajectoryPoint*>(
               &_SE3TrajectoryPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SE3TrajectoryPoint& a, SE3TrajectoryPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(SE3TrajectoryPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SE3TrajectoryPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SE3TrajectoryPoint* New() const final {
    return CreateMaybeMessage<SE3TrajectoryPoint>(nullptr);
  }

  SE3TrajectoryPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SE3TrajectoryPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SE3TrajectoryPoint& from);
  void MergeFrom(const SE3TrajectoryPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SE3TrajectoryPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.SE3TrajectoryPoint";
  }
  protected:
  explicit SE3TrajectoryPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2ftrajectory_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2ftrajectory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseFieldNumber = 1,
    kVelocityFieldNumber = 2,
    kTimeSinceReferenceFieldNumber = 3,
  };
  // .bosdyn.api.SE3Pose pose = 1;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::bosdyn::api::SE3Pose& pose() const;
  ::bosdyn::api::SE3Pose* release_pose();
  ::bosdyn::api::SE3Pose* mutable_pose();
  void set_allocated_pose(::bosdyn::api::SE3Pose* pose);
  private:
  const ::bosdyn::api::SE3Pose& _internal_pose() const;
  ::bosdyn::api::SE3Pose* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::bosdyn::api::SE3Pose* pose);
  ::bosdyn::api::SE3Pose* unsafe_arena_release_pose();

  // .bosdyn.api.SE3Velocity velocity = 2;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::bosdyn::api::SE3Velocity& velocity() const;
  ::bosdyn::api::SE3Velocity* release_velocity();
  ::bosdyn::api::SE3Velocity* mutable_velocity();
  void set_allocated_velocity(::bosdyn::api::SE3Velocity* velocity);
  private:
  const ::bosdyn::api::SE3Velocity& _internal_velocity() const;
  ::bosdyn::api::SE3Velocity* _internal_mutable_velocity();
  public:
  void unsafe_arena_set_allocated_velocity(
      ::bosdyn::api::SE3Velocity* velocity);
  ::bosdyn::api::SE3Velocity* unsafe_arena_release_velocity();

  // .google.protobuf.Duration time_since_reference = 3;
  bool has_time_since_reference() const;
  private:
  bool _internal_has_time_since_reference() const;
  public:
  void clear_time_since_reference();
  const PROTOBUF_NAMESPACE_ID::Duration& time_since_reference() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_time_since_reference();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_time_since_reference();
  void set_allocated_time_since_reference(PROTOBUF_NAMESPACE_ID::Duration* time_since_reference);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_time_since_reference() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_time_since_reference();
  public:
  void unsafe_arena_set_allocated_time_since_reference(
      PROTOBUF_NAMESPACE_ID::Duration* time_since_reference);
  PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_time_since_reference();

  // @@protoc_insertion_point(class_scope:bosdyn.api.SE3TrajectoryPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::SE3Pose* pose_;
  ::bosdyn::api::SE3Velocity* velocity_;
  PROTOBUF_NAMESPACE_ID::Duration* time_since_reference_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2ftrajectory_2eproto;
};
// -------------------------------------------------------------------

class Vec3Trajectory PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.Vec3Trajectory) */ {
 public:
  inline Vec3Trajectory() : Vec3Trajectory(nullptr) {}
  virtual ~Vec3Trajectory();

  Vec3Trajectory(const Vec3Trajectory& from);
  Vec3Trajectory(Vec3Trajectory&& from) noexcept
    : Vec3Trajectory() {
    *this = ::std::move(from);
  }

  inline Vec3Trajectory& operator=(const Vec3Trajectory& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vec3Trajectory& operator=(Vec3Trajectory&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vec3Trajectory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vec3Trajectory* internal_default_instance() {
    return reinterpret_cast<const Vec3Trajectory*>(
               &_Vec3Trajectory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Vec3Trajectory& a, Vec3Trajectory& b) {
    a.Swap(&b);
  }
  inline void Swap(Vec3Trajectory* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vec3Trajectory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vec3Trajectory* New() const final {
    return CreateMaybeMessage<Vec3Trajectory>(nullptr);
  }

  Vec3Trajectory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vec3Trajectory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vec3Trajectory& from);
  void MergeFrom(const Vec3Trajectory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vec3Trajectory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.Vec3Trajectory";
  }
  protected:
  explicit Vec3Trajectory(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2ftrajectory_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2ftrajectory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
    kReferenceTimeFieldNumber = 3,
    kStartingVelocityFieldNumber = 5,
    kEndingVelocityFieldNumber = 6,
    kPosInterpolationFieldNumber = 4,
  };
  // repeated .bosdyn.api.Vec3TrajectoryPoint points = 1;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::bosdyn::api::Vec3TrajectoryPoint* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::Vec3TrajectoryPoint >*
      mutable_points();
  private:
  const ::bosdyn::api::Vec3TrajectoryPoint& _internal_points(int index) const;
  ::bosdyn::api::Vec3TrajectoryPoint* _internal_add_points();
  public:
  const ::bosdyn::api::Vec3TrajectoryPoint& points(int index) const;
  ::bosdyn::api::Vec3TrajectoryPoint* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::Vec3TrajectoryPoint >&
      points() const;

  // .google.protobuf.Timestamp reference_time = 3;
  bool has_reference_time() const;
  private:
  bool _internal_has_reference_time() const;
  public:
  void clear_reference_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& reference_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_reference_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_reference_time();
  void set_allocated_reference_time(PROTOBUF_NAMESPACE_ID::Timestamp* reference_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_reference_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_reference_time();
  public:
  void unsafe_arena_set_allocated_reference_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* reference_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_reference_time();

  // .bosdyn.api.Vec3 starting_velocity = 5;
  bool has_starting_velocity() const;
  private:
  bool _internal_has_starting_velocity() const;
  public:
  void clear_starting_velocity();
  const ::bosdyn::api::Vec3& starting_velocity() const;
  ::bosdyn::api::Vec3* release_starting_velocity();
  ::bosdyn::api::Vec3* mutable_starting_velocity();
  void set_allocated_starting_velocity(::bosdyn::api::Vec3* starting_velocity);
  private:
  const ::bosdyn::api::Vec3& _internal_starting_velocity() const;
  ::bosdyn::api::Vec3* _internal_mutable_starting_velocity();
  public:
  void unsafe_arena_set_allocated_starting_velocity(
      ::bosdyn::api::Vec3* starting_velocity);
  ::bosdyn::api::Vec3* unsafe_arena_release_starting_velocity();

  // .bosdyn.api.Vec3 ending_velocity = 6;
  bool has_ending_velocity() const;
  private:
  bool _internal_has_ending_velocity() const;
  public:
  void clear_ending_velocity();
  const ::bosdyn::api::Vec3& ending_velocity() const;
  ::bosdyn::api::Vec3* release_ending_velocity();
  ::bosdyn::api::Vec3* mutable_ending_velocity();
  void set_allocated_ending_velocity(::bosdyn::api::Vec3* ending_velocity);
  private:
  const ::bosdyn::api::Vec3& _internal_ending_velocity() const;
  ::bosdyn::api::Vec3* _internal_mutable_ending_velocity();
  public:
  void unsafe_arena_set_allocated_ending_velocity(
      ::bosdyn::api::Vec3* ending_velocity);
  ::bosdyn::api::Vec3* unsafe_arena_release_ending_velocity();

  // .bosdyn.api.PositionalInterpolation pos_interpolation = 4;
  void clear_pos_interpolation();
  ::bosdyn::api::PositionalInterpolation pos_interpolation() const;
  void set_pos_interpolation(::bosdyn::api::PositionalInterpolation value);
  private:
  ::bosdyn::api::PositionalInterpolation _internal_pos_interpolation() const;
  void _internal_set_pos_interpolation(::bosdyn::api::PositionalInterpolation value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.Vec3Trajectory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::Vec3TrajectoryPoint > points_;
  PROTOBUF_NAMESPACE_ID::Timestamp* reference_time_;
  ::bosdyn::api::Vec3* starting_velocity_;
  ::bosdyn::api::Vec3* ending_velocity_;
  int pos_interpolation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2ftrajectory_2eproto;
};
// -------------------------------------------------------------------

class Vec3TrajectoryPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.Vec3TrajectoryPoint) */ {
 public:
  inline Vec3TrajectoryPoint() : Vec3TrajectoryPoint(nullptr) {}
  virtual ~Vec3TrajectoryPoint();

  Vec3TrajectoryPoint(const Vec3TrajectoryPoint& from);
  Vec3TrajectoryPoint(Vec3TrajectoryPoint&& from) noexcept
    : Vec3TrajectoryPoint() {
    *this = ::std::move(from);
  }

  inline Vec3TrajectoryPoint& operator=(const Vec3TrajectoryPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vec3TrajectoryPoint& operator=(Vec3TrajectoryPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vec3TrajectoryPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vec3TrajectoryPoint* internal_default_instance() {
    return reinterpret_cast<const Vec3TrajectoryPoint*>(
               &_Vec3TrajectoryPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Vec3TrajectoryPoint& a, Vec3TrajectoryPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(Vec3TrajectoryPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vec3TrajectoryPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vec3TrajectoryPoint* New() const final {
    return CreateMaybeMessage<Vec3TrajectoryPoint>(nullptr);
  }

  Vec3TrajectoryPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vec3TrajectoryPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vec3TrajectoryPoint& from);
  void MergeFrom(const Vec3TrajectoryPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vec3TrajectoryPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.Vec3TrajectoryPoint";
  }
  protected:
  explicit Vec3TrajectoryPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2ftrajectory_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2ftrajectory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointFieldNumber = 1,
    kTimeSinceReferenceFieldNumber = 3,
    kLinearSpeedFieldNumber = 4,
  };
  // .bosdyn.api.Vec3 point = 1;
  bool has_point() const;
  private:
  bool _internal_has_point() const;
  public:
  void clear_point();
  const ::bosdyn::api::Vec3& point() const;
  ::bosdyn::api::Vec3* release_point();
  ::bosdyn::api::Vec3* mutable_point();
  void set_allocated_point(::bosdyn::api::Vec3* point);
  private:
  const ::bosdyn::api::Vec3& _internal_point() const;
  ::bosdyn::api::Vec3* _internal_mutable_point();
  public:
  void unsafe_arena_set_allocated_point(
      ::bosdyn::api::Vec3* point);
  ::bosdyn::api::Vec3* unsafe_arena_release_point();

  // .google.protobuf.Duration time_since_reference = 3;
  bool has_time_since_reference() const;
  private:
  bool _internal_has_time_since_reference() const;
  public:
  void clear_time_since_reference();
  const PROTOBUF_NAMESPACE_ID::Duration& time_since_reference() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_time_since_reference();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_time_since_reference();
  void set_allocated_time_since_reference(PROTOBUF_NAMESPACE_ID::Duration* time_since_reference);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_time_since_reference() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_time_since_reference();
  public:
  void unsafe_arena_set_allocated_time_since_reference(
      PROTOBUF_NAMESPACE_ID::Duration* time_since_reference);
  PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_time_since_reference();

  // double linear_speed = 4;
  void clear_linear_speed();
  double linear_speed() const;
  void set_linear_speed(double value);
  private:
  double _internal_linear_speed() const;
  void _internal_set_linear_speed(double value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.Vec3TrajectoryPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::Vec3* point_;
  PROTOBUF_NAMESPACE_ID::Duration* time_since_reference_;
  double linear_speed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2ftrajectory_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SE2Trajectory

// repeated .bosdyn.api.SE2TrajectoryPoint points = 1;
inline int SE2Trajectory::_internal_points_size() const {
  return points_.size();
}
inline int SE2Trajectory::points_size() const {
  return _internal_points_size();
}
inline void SE2Trajectory::clear_points() {
  points_.Clear();
}
inline ::bosdyn::api::SE2TrajectoryPoint* SE2Trajectory::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.SE2Trajectory.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::SE2TrajectoryPoint >*
SE2Trajectory::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.SE2Trajectory.points)
  return &points_;
}
inline const ::bosdyn::api::SE2TrajectoryPoint& SE2Trajectory::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::bosdyn::api::SE2TrajectoryPoint& SE2Trajectory::points(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.SE2Trajectory.points)
  return _internal_points(index);
}
inline ::bosdyn::api::SE2TrajectoryPoint* SE2Trajectory::_internal_add_points() {
  return points_.Add();
}
inline ::bosdyn::api::SE2TrajectoryPoint* SE2Trajectory::add_points() {
  // @@protoc_insertion_point(field_add:bosdyn.api.SE2Trajectory.points)
  return _internal_add_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::SE2TrajectoryPoint >&
SE2Trajectory::points() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.SE2Trajectory.points)
  return points_;
}

// .google.protobuf.Timestamp reference_time = 3;
inline bool SE2Trajectory::_internal_has_reference_time() const {
  return this != internal_default_instance() && reference_time_ != nullptr;
}
inline bool SE2Trajectory::has_reference_time() const {
  return _internal_has_reference_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& SE2Trajectory::_internal_reference_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = reference_time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& SE2Trajectory::reference_time() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.SE2Trajectory.reference_time)
  return _internal_reference_time();
}
inline void SE2Trajectory::unsafe_arena_set_allocated_reference_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* reference_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reference_time_);
  }
  reference_time_ = reference_time;
  if (reference_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.SE2Trajectory.reference_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SE2Trajectory::release_reference_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = reference_time_;
  reference_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SE2Trajectory::unsafe_arena_release_reference_time() {
  // @@protoc_insertion_point(field_release:bosdyn.api.SE2Trajectory.reference_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = reference_time_;
  reference_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SE2Trajectory::_internal_mutable_reference_time() {
  
  if (reference_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    reference_time_ = p;
  }
  return reference_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SE2Trajectory::mutable_reference_time() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.SE2Trajectory.reference_time)
  return _internal_mutable_reference_time();
}
inline void SE2Trajectory::set_allocated_reference_time(PROTOBUF_NAMESPACE_ID::Timestamp* reference_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(reference_time_);
  }
  if (reference_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reference_time)->GetArena();
    if (message_arena != submessage_arena) {
      reference_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reference_time, submessage_arena);
    }
    
  } else {
    
  }
  reference_time_ = reference_time;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.SE2Trajectory.reference_time)
}

// .bosdyn.api.PositionalInterpolation interpolation = 4;
inline void SE2Trajectory::clear_interpolation() {
  interpolation_ = 0;
}
inline ::bosdyn::api::PositionalInterpolation SE2Trajectory::_internal_interpolation() const {
  return static_cast< ::bosdyn::api::PositionalInterpolation >(interpolation_);
}
inline ::bosdyn::api::PositionalInterpolation SE2Trajectory::interpolation() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.SE2Trajectory.interpolation)
  return _internal_interpolation();
}
inline void SE2Trajectory::_internal_set_interpolation(::bosdyn::api::PositionalInterpolation value) {
  
  interpolation_ = value;
}
inline void SE2Trajectory::set_interpolation(::bosdyn::api::PositionalInterpolation value) {
  _internal_set_interpolation(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.SE2Trajectory.interpolation)
}

// -------------------------------------------------------------------

// SE2TrajectoryPoint

// .bosdyn.api.SE2Pose pose = 1;
inline bool SE2TrajectoryPoint::_internal_has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline bool SE2TrajectoryPoint::has_pose() const {
  return _internal_has_pose();
}
inline const ::bosdyn::api::SE2Pose& SE2TrajectoryPoint::_internal_pose() const {
  const ::bosdyn::api::SE2Pose* p = pose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::SE2Pose*>(
      &::bosdyn::api::_SE2Pose_default_instance_);
}
inline const ::bosdyn::api::SE2Pose& SE2TrajectoryPoint::pose() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.SE2TrajectoryPoint.pose)
  return _internal_pose();
}
inline void SE2TrajectoryPoint::unsafe_arena_set_allocated_pose(
    ::bosdyn::api::SE2Pose* pose) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.SE2TrajectoryPoint.pose)
}
inline ::bosdyn::api::SE2Pose* SE2TrajectoryPoint::release_pose() {
  
  ::bosdyn::api::SE2Pose* temp = pose_;
  pose_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::SE2Pose* SE2TrajectoryPoint::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:bosdyn.api.SE2TrajectoryPoint.pose)
  
  ::bosdyn::api::SE2Pose* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::bosdyn::api::SE2Pose* SE2TrajectoryPoint::_internal_mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::SE2Pose>(GetArena());
    pose_ = p;
  }
  return pose_;
}
inline ::bosdyn::api::SE2Pose* SE2TrajectoryPoint::mutable_pose() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.SE2TrajectoryPoint.pose)
  return _internal_mutable_pose();
}
inline void SE2TrajectoryPoint::set_allocated_pose(::bosdyn::api::SE2Pose* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose)->GetArena();
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.SE2TrajectoryPoint.pose)
}

// .google.protobuf.Duration time_since_reference = 3;
inline bool SE2TrajectoryPoint::_internal_has_time_since_reference() const {
  return this != internal_default_instance() && time_since_reference_ != nullptr;
}
inline bool SE2TrajectoryPoint::has_time_since_reference() const {
  return _internal_has_time_since_reference();
}
inline const PROTOBUF_NAMESPACE_ID::Duration& SE2TrajectoryPoint::_internal_time_since_reference() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = time_since_reference_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration*>(
      &PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& SE2TrajectoryPoint::time_since_reference() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.SE2TrajectoryPoint.time_since_reference)
  return _internal_time_since_reference();
}
inline void SE2TrajectoryPoint::unsafe_arena_set_allocated_time_since_reference(
    PROTOBUF_NAMESPACE_ID::Duration* time_since_reference) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_since_reference_);
  }
  time_since_reference_ = time_since_reference;
  if (time_since_reference) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.SE2TrajectoryPoint.time_since_reference)
}
inline PROTOBUF_NAMESPACE_ID::Duration* SE2TrajectoryPoint::release_time_since_reference() {
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = time_since_reference_;
  time_since_reference_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* SE2TrajectoryPoint::unsafe_arena_release_time_since_reference() {
  // @@protoc_insertion_point(field_release:bosdyn.api.SE2TrajectoryPoint.time_since_reference)
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = time_since_reference_;
  time_since_reference_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* SE2TrajectoryPoint::_internal_mutable_time_since_reference() {
  
  if (time_since_reference_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArena());
    time_since_reference_ = p;
  }
  return time_since_reference_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* SE2TrajectoryPoint::mutable_time_since_reference() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.SE2TrajectoryPoint.time_since_reference)
  return _internal_mutable_time_since_reference();
}
inline void SE2TrajectoryPoint::set_allocated_time_since_reference(PROTOBUF_NAMESPACE_ID::Duration* time_since_reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_since_reference_);
  }
  if (time_since_reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_since_reference)->GetArena();
    if (message_arena != submessage_arena) {
      time_since_reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_since_reference, submessage_arena);
    }
    
  } else {
    
  }
  time_since_reference_ = time_since_reference;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.SE2TrajectoryPoint.time_since_reference)
}

// -------------------------------------------------------------------

// SE3Trajectory

// repeated .bosdyn.api.SE3TrajectoryPoint points = 1;
inline int SE3Trajectory::_internal_points_size() const {
  return points_.size();
}
inline int SE3Trajectory::points_size() const {
  return _internal_points_size();
}
inline void SE3Trajectory::clear_points() {
  points_.Clear();
}
inline ::bosdyn::api::SE3TrajectoryPoint* SE3Trajectory::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.SE3Trajectory.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::SE3TrajectoryPoint >*
SE3Trajectory::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.SE3Trajectory.points)
  return &points_;
}
inline const ::bosdyn::api::SE3TrajectoryPoint& SE3Trajectory::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::bosdyn::api::SE3TrajectoryPoint& SE3Trajectory::points(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.SE3Trajectory.points)
  return _internal_points(index);
}
inline ::bosdyn::api::SE3TrajectoryPoint* SE3Trajectory::_internal_add_points() {
  return points_.Add();
}
inline ::bosdyn::api::SE3TrajectoryPoint* SE3Trajectory::add_points() {
  // @@protoc_insertion_point(field_add:bosdyn.api.SE3Trajectory.points)
  return _internal_add_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::SE3TrajectoryPoint >&
SE3Trajectory::points() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.SE3Trajectory.points)
  return points_;
}

// .google.protobuf.Timestamp reference_time = 3;
inline bool SE3Trajectory::_internal_has_reference_time() const {
  return this != internal_default_instance() && reference_time_ != nullptr;
}
inline bool SE3Trajectory::has_reference_time() const {
  return _internal_has_reference_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& SE3Trajectory::_internal_reference_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = reference_time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& SE3Trajectory::reference_time() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.SE3Trajectory.reference_time)
  return _internal_reference_time();
}
inline void SE3Trajectory::unsafe_arena_set_allocated_reference_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* reference_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reference_time_);
  }
  reference_time_ = reference_time;
  if (reference_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.SE3Trajectory.reference_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SE3Trajectory::release_reference_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = reference_time_;
  reference_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SE3Trajectory::unsafe_arena_release_reference_time() {
  // @@protoc_insertion_point(field_release:bosdyn.api.SE3Trajectory.reference_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = reference_time_;
  reference_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SE3Trajectory::_internal_mutable_reference_time() {
  
  if (reference_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    reference_time_ = p;
  }
  return reference_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SE3Trajectory::mutable_reference_time() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.SE3Trajectory.reference_time)
  return _internal_mutable_reference_time();
}
inline void SE3Trajectory::set_allocated_reference_time(PROTOBUF_NAMESPACE_ID::Timestamp* reference_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(reference_time_);
  }
  if (reference_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reference_time)->GetArena();
    if (message_arena != submessage_arena) {
      reference_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reference_time, submessage_arena);
    }
    
  } else {
    
  }
  reference_time_ = reference_time;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.SE3Trajectory.reference_time)
}

// .bosdyn.api.PositionalInterpolation pos_interpolation = 4;
inline void SE3Trajectory::clear_pos_interpolation() {
  pos_interpolation_ = 0;
}
inline ::bosdyn::api::PositionalInterpolation SE3Trajectory::_internal_pos_interpolation() const {
  return static_cast< ::bosdyn::api::PositionalInterpolation >(pos_interpolation_);
}
inline ::bosdyn::api::PositionalInterpolation SE3Trajectory::pos_interpolation() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.SE3Trajectory.pos_interpolation)
  return _internal_pos_interpolation();
}
inline void SE3Trajectory::_internal_set_pos_interpolation(::bosdyn::api::PositionalInterpolation value) {
  
  pos_interpolation_ = value;
}
inline void SE3Trajectory::set_pos_interpolation(::bosdyn::api::PositionalInterpolation value) {
  _internal_set_pos_interpolation(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.SE3Trajectory.pos_interpolation)
}

// .bosdyn.api.AngularInterpolation ang_interpolation = 5;
inline void SE3Trajectory::clear_ang_interpolation() {
  ang_interpolation_ = 0;
}
inline ::bosdyn::api::AngularInterpolation SE3Trajectory::_internal_ang_interpolation() const {
  return static_cast< ::bosdyn::api::AngularInterpolation >(ang_interpolation_);
}
inline ::bosdyn::api::AngularInterpolation SE3Trajectory::ang_interpolation() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.SE3Trajectory.ang_interpolation)
  return _internal_ang_interpolation();
}
inline void SE3Trajectory::_internal_set_ang_interpolation(::bosdyn::api::AngularInterpolation value) {
  
  ang_interpolation_ = value;
}
inline void SE3Trajectory::set_ang_interpolation(::bosdyn::api::AngularInterpolation value) {
  _internal_set_ang_interpolation(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.SE3Trajectory.ang_interpolation)
}

// -------------------------------------------------------------------

// SE3TrajectoryPoint

// .bosdyn.api.SE3Pose pose = 1;
inline bool SE3TrajectoryPoint::_internal_has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline bool SE3TrajectoryPoint::has_pose() const {
  return _internal_has_pose();
}
inline const ::bosdyn::api::SE3Pose& SE3TrajectoryPoint::_internal_pose() const {
  const ::bosdyn::api::SE3Pose* p = pose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::SE3Pose*>(
      &::bosdyn::api::_SE3Pose_default_instance_);
}
inline const ::bosdyn::api::SE3Pose& SE3TrajectoryPoint::pose() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.SE3TrajectoryPoint.pose)
  return _internal_pose();
}
inline void SE3TrajectoryPoint::unsafe_arena_set_allocated_pose(
    ::bosdyn::api::SE3Pose* pose) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.SE3TrajectoryPoint.pose)
}
inline ::bosdyn::api::SE3Pose* SE3TrajectoryPoint::release_pose() {
  
  ::bosdyn::api::SE3Pose* temp = pose_;
  pose_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::SE3Pose* SE3TrajectoryPoint::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:bosdyn.api.SE3TrajectoryPoint.pose)
  
  ::bosdyn::api::SE3Pose* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::bosdyn::api::SE3Pose* SE3TrajectoryPoint::_internal_mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::SE3Pose>(GetArena());
    pose_ = p;
  }
  return pose_;
}
inline ::bosdyn::api::SE3Pose* SE3TrajectoryPoint::mutable_pose() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.SE3TrajectoryPoint.pose)
  return _internal_mutable_pose();
}
inline void SE3TrajectoryPoint::set_allocated_pose(::bosdyn::api::SE3Pose* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose)->GetArena();
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.SE3TrajectoryPoint.pose)
}

// .bosdyn.api.SE3Velocity velocity = 2;
inline bool SE3TrajectoryPoint::_internal_has_velocity() const {
  return this != internal_default_instance() && velocity_ != nullptr;
}
inline bool SE3TrajectoryPoint::has_velocity() const {
  return _internal_has_velocity();
}
inline const ::bosdyn::api::SE3Velocity& SE3TrajectoryPoint::_internal_velocity() const {
  const ::bosdyn::api::SE3Velocity* p = velocity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::SE3Velocity*>(
      &::bosdyn::api::_SE3Velocity_default_instance_);
}
inline const ::bosdyn::api::SE3Velocity& SE3TrajectoryPoint::velocity() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.SE3TrajectoryPoint.velocity)
  return _internal_velocity();
}
inline void SE3TrajectoryPoint::unsafe_arena_set_allocated_velocity(
    ::bosdyn::api::SE3Velocity* velocity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_);
  }
  velocity_ = velocity;
  if (velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.SE3TrajectoryPoint.velocity)
}
inline ::bosdyn::api::SE3Velocity* SE3TrajectoryPoint::release_velocity() {
  
  ::bosdyn::api::SE3Velocity* temp = velocity_;
  velocity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::SE3Velocity* SE3TrajectoryPoint::unsafe_arena_release_velocity() {
  // @@protoc_insertion_point(field_release:bosdyn.api.SE3TrajectoryPoint.velocity)
  
  ::bosdyn::api::SE3Velocity* temp = velocity_;
  velocity_ = nullptr;
  return temp;
}
inline ::bosdyn::api::SE3Velocity* SE3TrajectoryPoint::_internal_mutable_velocity() {
  
  if (velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::SE3Velocity>(GetArena());
    velocity_ = p;
  }
  return velocity_;
}
inline ::bosdyn::api::SE3Velocity* SE3TrajectoryPoint::mutable_velocity() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.SE3TrajectoryPoint.velocity)
  return _internal_mutable_velocity();
}
inline void SE3TrajectoryPoint::set_allocated_velocity(::bosdyn::api::SE3Velocity* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_);
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity)->GetArena();
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.SE3TrajectoryPoint.velocity)
}

// .google.protobuf.Duration time_since_reference = 3;
inline bool SE3TrajectoryPoint::_internal_has_time_since_reference() const {
  return this != internal_default_instance() && time_since_reference_ != nullptr;
}
inline bool SE3TrajectoryPoint::has_time_since_reference() const {
  return _internal_has_time_since_reference();
}
inline const PROTOBUF_NAMESPACE_ID::Duration& SE3TrajectoryPoint::_internal_time_since_reference() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = time_since_reference_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration*>(
      &PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& SE3TrajectoryPoint::time_since_reference() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.SE3TrajectoryPoint.time_since_reference)
  return _internal_time_since_reference();
}
inline void SE3TrajectoryPoint::unsafe_arena_set_allocated_time_since_reference(
    PROTOBUF_NAMESPACE_ID::Duration* time_since_reference) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_since_reference_);
  }
  time_since_reference_ = time_since_reference;
  if (time_since_reference) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.SE3TrajectoryPoint.time_since_reference)
}
inline PROTOBUF_NAMESPACE_ID::Duration* SE3TrajectoryPoint::release_time_since_reference() {
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = time_since_reference_;
  time_since_reference_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* SE3TrajectoryPoint::unsafe_arena_release_time_since_reference() {
  // @@protoc_insertion_point(field_release:bosdyn.api.SE3TrajectoryPoint.time_since_reference)
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = time_since_reference_;
  time_since_reference_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* SE3TrajectoryPoint::_internal_mutable_time_since_reference() {
  
  if (time_since_reference_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArena());
    time_since_reference_ = p;
  }
  return time_since_reference_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* SE3TrajectoryPoint::mutable_time_since_reference() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.SE3TrajectoryPoint.time_since_reference)
  return _internal_mutable_time_since_reference();
}
inline void SE3TrajectoryPoint::set_allocated_time_since_reference(PROTOBUF_NAMESPACE_ID::Duration* time_since_reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_since_reference_);
  }
  if (time_since_reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_since_reference)->GetArena();
    if (message_arena != submessage_arena) {
      time_since_reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_since_reference, submessage_arena);
    }
    
  } else {
    
  }
  time_since_reference_ = time_since_reference;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.SE3TrajectoryPoint.time_since_reference)
}

// -------------------------------------------------------------------

// Vec3Trajectory

// repeated .bosdyn.api.Vec3TrajectoryPoint points = 1;
inline int Vec3Trajectory::_internal_points_size() const {
  return points_.size();
}
inline int Vec3Trajectory::points_size() const {
  return _internal_points_size();
}
inline void Vec3Trajectory::clear_points() {
  points_.Clear();
}
inline ::bosdyn::api::Vec3TrajectoryPoint* Vec3Trajectory::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.Vec3Trajectory.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::Vec3TrajectoryPoint >*
Vec3Trajectory::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.Vec3Trajectory.points)
  return &points_;
}
inline const ::bosdyn::api::Vec3TrajectoryPoint& Vec3Trajectory::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::bosdyn::api::Vec3TrajectoryPoint& Vec3Trajectory::points(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.Vec3Trajectory.points)
  return _internal_points(index);
}
inline ::bosdyn::api::Vec3TrajectoryPoint* Vec3Trajectory::_internal_add_points() {
  return points_.Add();
}
inline ::bosdyn::api::Vec3TrajectoryPoint* Vec3Trajectory::add_points() {
  // @@protoc_insertion_point(field_add:bosdyn.api.Vec3Trajectory.points)
  return _internal_add_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::Vec3TrajectoryPoint >&
Vec3Trajectory::points() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.Vec3Trajectory.points)
  return points_;
}

// .google.protobuf.Timestamp reference_time = 3;
inline bool Vec3Trajectory::_internal_has_reference_time() const {
  return this != internal_default_instance() && reference_time_ != nullptr;
}
inline bool Vec3Trajectory::has_reference_time() const {
  return _internal_has_reference_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Vec3Trajectory::_internal_reference_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = reference_time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Vec3Trajectory::reference_time() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.Vec3Trajectory.reference_time)
  return _internal_reference_time();
}
inline void Vec3Trajectory::unsafe_arena_set_allocated_reference_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* reference_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reference_time_);
  }
  reference_time_ = reference_time;
  if (reference_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.Vec3Trajectory.reference_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Vec3Trajectory::release_reference_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = reference_time_;
  reference_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Vec3Trajectory::unsafe_arena_release_reference_time() {
  // @@protoc_insertion_point(field_release:bosdyn.api.Vec3Trajectory.reference_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = reference_time_;
  reference_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Vec3Trajectory::_internal_mutable_reference_time() {
  
  if (reference_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    reference_time_ = p;
  }
  return reference_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Vec3Trajectory::mutable_reference_time() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.Vec3Trajectory.reference_time)
  return _internal_mutable_reference_time();
}
inline void Vec3Trajectory::set_allocated_reference_time(PROTOBUF_NAMESPACE_ID::Timestamp* reference_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(reference_time_);
  }
  if (reference_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reference_time)->GetArena();
    if (message_arena != submessage_arena) {
      reference_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reference_time, submessage_arena);
    }
    
  } else {
    
  }
  reference_time_ = reference_time;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.Vec3Trajectory.reference_time)
}

// .bosdyn.api.PositionalInterpolation pos_interpolation = 4;
inline void Vec3Trajectory::clear_pos_interpolation() {
  pos_interpolation_ = 0;
}
inline ::bosdyn::api::PositionalInterpolation Vec3Trajectory::_internal_pos_interpolation() const {
  return static_cast< ::bosdyn::api::PositionalInterpolation >(pos_interpolation_);
}
inline ::bosdyn::api::PositionalInterpolation Vec3Trajectory::pos_interpolation() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.Vec3Trajectory.pos_interpolation)
  return _internal_pos_interpolation();
}
inline void Vec3Trajectory::_internal_set_pos_interpolation(::bosdyn::api::PositionalInterpolation value) {
  
  pos_interpolation_ = value;
}
inline void Vec3Trajectory::set_pos_interpolation(::bosdyn::api::PositionalInterpolation value) {
  _internal_set_pos_interpolation(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.Vec3Trajectory.pos_interpolation)
}

// .bosdyn.api.Vec3 starting_velocity = 5;
inline bool Vec3Trajectory::_internal_has_starting_velocity() const {
  return this != internal_default_instance() && starting_velocity_ != nullptr;
}
inline bool Vec3Trajectory::has_starting_velocity() const {
  return _internal_has_starting_velocity();
}
inline const ::bosdyn::api::Vec3& Vec3Trajectory::_internal_starting_velocity() const {
  const ::bosdyn::api::Vec3* p = starting_velocity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::Vec3*>(
      &::bosdyn::api::_Vec3_default_instance_);
}
inline const ::bosdyn::api::Vec3& Vec3Trajectory::starting_velocity() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.Vec3Trajectory.starting_velocity)
  return _internal_starting_velocity();
}
inline void Vec3Trajectory::unsafe_arena_set_allocated_starting_velocity(
    ::bosdyn::api::Vec3* starting_velocity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(starting_velocity_);
  }
  starting_velocity_ = starting_velocity;
  if (starting_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.Vec3Trajectory.starting_velocity)
}
inline ::bosdyn::api::Vec3* Vec3Trajectory::release_starting_velocity() {
  
  ::bosdyn::api::Vec3* temp = starting_velocity_;
  starting_velocity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::Vec3* Vec3Trajectory::unsafe_arena_release_starting_velocity() {
  // @@protoc_insertion_point(field_release:bosdyn.api.Vec3Trajectory.starting_velocity)
  
  ::bosdyn::api::Vec3* temp = starting_velocity_;
  starting_velocity_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Vec3* Vec3Trajectory::_internal_mutable_starting_velocity() {
  
  if (starting_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Vec3>(GetArena());
    starting_velocity_ = p;
  }
  return starting_velocity_;
}
inline ::bosdyn::api::Vec3* Vec3Trajectory::mutable_starting_velocity() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.Vec3Trajectory.starting_velocity)
  return _internal_mutable_starting_velocity();
}
inline void Vec3Trajectory::set_allocated_starting_velocity(::bosdyn::api::Vec3* starting_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(starting_velocity_);
  }
  if (starting_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(starting_velocity)->GetArena();
    if (message_arena != submessage_arena) {
      starting_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, starting_velocity, submessage_arena);
    }
    
  } else {
    
  }
  starting_velocity_ = starting_velocity;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.Vec3Trajectory.starting_velocity)
}

// .bosdyn.api.Vec3 ending_velocity = 6;
inline bool Vec3Trajectory::_internal_has_ending_velocity() const {
  return this != internal_default_instance() && ending_velocity_ != nullptr;
}
inline bool Vec3Trajectory::has_ending_velocity() const {
  return _internal_has_ending_velocity();
}
inline const ::bosdyn::api::Vec3& Vec3Trajectory::_internal_ending_velocity() const {
  const ::bosdyn::api::Vec3* p = ending_velocity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::Vec3*>(
      &::bosdyn::api::_Vec3_default_instance_);
}
inline const ::bosdyn::api::Vec3& Vec3Trajectory::ending_velocity() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.Vec3Trajectory.ending_velocity)
  return _internal_ending_velocity();
}
inline void Vec3Trajectory::unsafe_arena_set_allocated_ending_velocity(
    ::bosdyn::api::Vec3* ending_velocity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ending_velocity_);
  }
  ending_velocity_ = ending_velocity;
  if (ending_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.Vec3Trajectory.ending_velocity)
}
inline ::bosdyn::api::Vec3* Vec3Trajectory::release_ending_velocity() {
  
  ::bosdyn::api::Vec3* temp = ending_velocity_;
  ending_velocity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::Vec3* Vec3Trajectory::unsafe_arena_release_ending_velocity() {
  // @@protoc_insertion_point(field_release:bosdyn.api.Vec3Trajectory.ending_velocity)
  
  ::bosdyn::api::Vec3* temp = ending_velocity_;
  ending_velocity_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Vec3* Vec3Trajectory::_internal_mutable_ending_velocity() {
  
  if (ending_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Vec3>(GetArena());
    ending_velocity_ = p;
  }
  return ending_velocity_;
}
inline ::bosdyn::api::Vec3* Vec3Trajectory::mutable_ending_velocity() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.Vec3Trajectory.ending_velocity)
  return _internal_mutable_ending_velocity();
}
inline void Vec3Trajectory::set_allocated_ending_velocity(::bosdyn::api::Vec3* ending_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ending_velocity_);
  }
  if (ending_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ending_velocity)->GetArena();
    if (message_arena != submessage_arena) {
      ending_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ending_velocity, submessage_arena);
    }
    
  } else {
    
  }
  ending_velocity_ = ending_velocity;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.Vec3Trajectory.ending_velocity)
}

// -------------------------------------------------------------------

// Vec3TrajectoryPoint

// .bosdyn.api.Vec3 point = 1;
inline bool Vec3TrajectoryPoint::_internal_has_point() const {
  return this != internal_default_instance() && point_ != nullptr;
}
inline bool Vec3TrajectoryPoint::has_point() const {
  return _internal_has_point();
}
inline const ::bosdyn::api::Vec3& Vec3TrajectoryPoint::_internal_point() const {
  const ::bosdyn::api::Vec3* p = point_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::Vec3*>(
      &::bosdyn::api::_Vec3_default_instance_);
}
inline const ::bosdyn::api::Vec3& Vec3TrajectoryPoint::point() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.Vec3TrajectoryPoint.point)
  return _internal_point();
}
inline void Vec3TrajectoryPoint::unsafe_arena_set_allocated_point(
    ::bosdyn::api::Vec3* point) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(point_);
  }
  point_ = point;
  if (point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.Vec3TrajectoryPoint.point)
}
inline ::bosdyn::api::Vec3* Vec3TrajectoryPoint::release_point() {
  
  ::bosdyn::api::Vec3* temp = point_;
  point_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::Vec3* Vec3TrajectoryPoint::unsafe_arena_release_point() {
  // @@protoc_insertion_point(field_release:bosdyn.api.Vec3TrajectoryPoint.point)
  
  ::bosdyn::api::Vec3* temp = point_;
  point_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Vec3* Vec3TrajectoryPoint::_internal_mutable_point() {
  
  if (point_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Vec3>(GetArena());
    point_ = p;
  }
  return point_;
}
inline ::bosdyn::api::Vec3* Vec3TrajectoryPoint::mutable_point() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.Vec3TrajectoryPoint.point)
  return _internal_mutable_point();
}
inline void Vec3TrajectoryPoint::set_allocated_point(::bosdyn::api::Vec3* point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(point_);
  }
  if (point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(point)->GetArena();
    if (message_arena != submessage_arena) {
      point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, point, submessage_arena);
    }
    
  } else {
    
  }
  point_ = point;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.Vec3TrajectoryPoint.point)
}

// double linear_speed = 4;
inline void Vec3TrajectoryPoint::clear_linear_speed() {
  linear_speed_ = 0;
}
inline double Vec3TrajectoryPoint::_internal_linear_speed() const {
  return linear_speed_;
}
inline double Vec3TrajectoryPoint::linear_speed() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.Vec3TrajectoryPoint.linear_speed)
  return _internal_linear_speed();
}
inline void Vec3TrajectoryPoint::_internal_set_linear_speed(double value) {
  
  linear_speed_ = value;
}
inline void Vec3TrajectoryPoint::set_linear_speed(double value) {
  _internal_set_linear_speed(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.Vec3TrajectoryPoint.linear_speed)
}

// .google.protobuf.Duration time_since_reference = 3;
inline bool Vec3TrajectoryPoint::_internal_has_time_since_reference() const {
  return this != internal_default_instance() && time_since_reference_ != nullptr;
}
inline bool Vec3TrajectoryPoint::has_time_since_reference() const {
  return _internal_has_time_since_reference();
}
inline const PROTOBUF_NAMESPACE_ID::Duration& Vec3TrajectoryPoint::_internal_time_since_reference() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = time_since_reference_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration*>(
      &PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& Vec3TrajectoryPoint::time_since_reference() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.Vec3TrajectoryPoint.time_since_reference)
  return _internal_time_since_reference();
}
inline void Vec3TrajectoryPoint::unsafe_arena_set_allocated_time_since_reference(
    PROTOBUF_NAMESPACE_ID::Duration* time_since_reference) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_since_reference_);
  }
  time_since_reference_ = time_since_reference;
  if (time_since_reference) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.Vec3TrajectoryPoint.time_since_reference)
}
inline PROTOBUF_NAMESPACE_ID::Duration* Vec3TrajectoryPoint::release_time_since_reference() {
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = time_since_reference_;
  time_since_reference_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* Vec3TrajectoryPoint::unsafe_arena_release_time_since_reference() {
  // @@protoc_insertion_point(field_release:bosdyn.api.Vec3TrajectoryPoint.time_since_reference)
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = time_since_reference_;
  time_since_reference_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* Vec3TrajectoryPoint::_internal_mutable_time_since_reference() {
  
  if (time_since_reference_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArena());
    time_since_reference_ = p;
  }
  return time_since_reference_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* Vec3TrajectoryPoint::mutable_time_since_reference() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.Vec3TrajectoryPoint.time_since_reference)
  return _internal_mutable_time_since_reference();
}
inline void Vec3TrajectoryPoint::set_allocated_time_since_reference(PROTOBUF_NAMESPACE_ID::Duration* time_since_reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_since_reference_);
  }
  if (time_since_reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_since_reference)->GetArena();
    if (message_arena != submessage_arena) {
      time_since_reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_since_reference, submessage_arena);
    }
    
  } else {
    
  }
  time_since_reference_ = time_since_reference;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.Vec3TrajectoryPoint.time_since_reference)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace bosdyn

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bosdyn::api::PositionalInterpolation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::PositionalInterpolation>() {
  return ::bosdyn::api::PositionalInterpolation_descriptor();
}
template <> struct is_proto_enum< ::bosdyn::api::AngularInterpolation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::AngularInterpolation>() {
  return ::bosdyn::api::AngularInterpolation_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2ftrajectory_2eproto
