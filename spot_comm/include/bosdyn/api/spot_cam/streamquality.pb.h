// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/spot_cam/streamquality.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "bosdyn/api/header.pb.h"
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto;
namespace bosdyn {
namespace api {
namespace spot_cam {
class GetStreamParamsRequest;
class GetStreamParamsRequestDefaultTypeInternal;
extern GetStreamParamsRequestDefaultTypeInternal _GetStreamParamsRequest_default_instance_;
class GetStreamParamsResponse;
class GetStreamParamsResponseDefaultTypeInternal;
extern GetStreamParamsResponseDefaultTypeInternal _GetStreamParamsResponse_default_instance_;
class SetStreamParamsRequest;
class SetStreamParamsRequestDefaultTypeInternal;
extern SetStreamParamsRequestDefaultTypeInternal _SetStreamParamsRequest_default_instance_;
class SetStreamParamsResponse;
class SetStreamParamsResponseDefaultTypeInternal;
extern SetStreamParamsResponseDefaultTypeInternal _SetStreamParamsResponse_default_instance_;
class StreamParams;
class StreamParamsDefaultTypeInternal;
extern StreamParamsDefaultTypeInternal _StreamParams_default_instance_;
class StreamParams_AwbMode;
class StreamParams_AwbModeDefaultTypeInternal;
extern StreamParams_AwbModeDefaultTypeInternal _StreamParams_AwbMode_default_instance_;
}  // namespace spot_cam
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> ::bosdyn::api::spot_cam::GetStreamParamsRequest* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::GetStreamParamsRequest>(Arena*);
template<> ::bosdyn::api::spot_cam::GetStreamParamsResponse* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::GetStreamParamsResponse>(Arena*);
template<> ::bosdyn::api::spot_cam::SetStreamParamsRequest* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::SetStreamParamsRequest>(Arena*);
template<> ::bosdyn::api::spot_cam::SetStreamParamsResponse* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::SetStreamParamsResponse>(Arena*);
template<> ::bosdyn::api::spot_cam::StreamParams* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::StreamParams>(Arena*);
template<> ::bosdyn::api::spot_cam::StreamParams_AwbMode* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::StreamParams_AwbMode>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bosdyn {
namespace api {
namespace spot_cam {

enum StreamParams_AwbModeEnum : int {
  StreamParams_AwbModeEnum_OFF = 0,
  StreamParams_AwbModeEnum_AUTO = 1,
  StreamParams_AwbModeEnum_INCANDESCENT = 2,
  StreamParams_AwbModeEnum_FLUORESCENT = 3,
  StreamParams_AwbModeEnum_WARM_FLUORESCENT = 4,
  StreamParams_AwbModeEnum_DAYLIGHT = 5,
  StreamParams_AwbModeEnum_CLOUDY = 6,
  StreamParams_AwbModeEnum_TWILIGHT = 7,
  StreamParams_AwbModeEnum_SHADE = 8,
  StreamParams_AwbModeEnum_DARK = 9,
  StreamParams_AwbModeEnum_StreamParams_AwbModeEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  StreamParams_AwbModeEnum_StreamParams_AwbModeEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool StreamParams_AwbModeEnum_IsValid(int value);
constexpr StreamParams_AwbModeEnum StreamParams_AwbModeEnum_AwbModeEnum_MIN = StreamParams_AwbModeEnum_OFF;
constexpr StreamParams_AwbModeEnum StreamParams_AwbModeEnum_AwbModeEnum_MAX = StreamParams_AwbModeEnum_DARK;
constexpr int StreamParams_AwbModeEnum_AwbModeEnum_ARRAYSIZE = StreamParams_AwbModeEnum_AwbModeEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamParams_AwbModeEnum_descriptor();
template<typename T>
inline const std::string& StreamParams_AwbModeEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StreamParams_AwbModeEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StreamParams_AwbModeEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StreamParams_AwbModeEnum_descriptor(), enum_t_value);
}
inline bool StreamParams_AwbModeEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StreamParams_AwbModeEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StreamParams_AwbModeEnum>(
    StreamParams_AwbModeEnum_descriptor(), name, value);
}
// ===================================================================

class StreamParams_AwbMode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.StreamParams.AwbMode) */ {
 public:
  inline StreamParams_AwbMode() : StreamParams_AwbMode(nullptr) {}
  virtual ~StreamParams_AwbMode();

  StreamParams_AwbMode(const StreamParams_AwbMode& from);
  StreamParams_AwbMode(StreamParams_AwbMode&& from) noexcept
    : StreamParams_AwbMode() {
    *this = ::std::move(from);
  }

  inline StreamParams_AwbMode& operator=(const StreamParams_AwbMode& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamParams_AwbMode& operator=(StreamParams_AwbMode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamParams_AwbMode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamParams_AwbMode* internal_default_instance() {
    return reinterpret_cast<const StreamParams_AwbMode*>(
               &_StreamParams_AwbMode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StreamParams_AwbMode& a, StreamParams_AwbMode& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamParams_AwbMode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamParams_AwbMode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamParams_AwbMode* New() const final {
    return CreateMaybeMessage<StreamParams_AwbMode>(nullptr);
  }

  StreamParams_AwbMode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamParams_AwbMode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamParams_AwbMode& from);
  void MergeFrom(const StreamParams_AwbMode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamParams_AwbMode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.StreamParams.AwbMode";
  }
  protected:
  explicit StreamParams_AwbMode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAwbFieldNumber = 1,
  };
  // .bosdyn.api.spot_cam.StreamParams.AwbModeEnum awb = 1;
  void clear_awb();
  ::bosdyn::api::spot_cam::StreamParams_AwbModeEnum awb() const;
  void set_awb(::bosdyn::api::spot_cam::StreamParams_AwbModeEnum value);
  private:
  ::bosdyn::api::spot_cam::StreamParams_AwbModeEnum _internal_awb() const;
  void _internal_set_awb(::bosdyn::api::spot_cam::StreamParams_AwbModeEnum value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.StreamParams.AwbMode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int awb_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto;
};
// -------------------------------------------------------------------

class StreamParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.StreamParams) */ {
 public:
  inline StreamParams() : StreamParams(nullptr) {}
  virtual ~StreamParams();

  StreamParams(const StreamParams& from);
  StreamParams(StreamParams&& from) noexcept
    : StreamParams() {
    *this = ::std::move(from);
  }

  inline StreamParams& operator=(const StreamParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamParams& operator=(StreamParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamParams* internal_default_instance() {
    return reinterpret_cast<const StreamParams*>(
               &_StreamParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StreamParams& a, StreamParams& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamParams* New() const final {
    return CreateMaybeMessage<StreamParams>(nullptr);
  }

  StreamParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamParams& from);
  void MergeFrom(const StreamParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.StreamParams";
  }
  protected:
  explicit StreamParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef StreamParams_AwbMode AwbMode;

  typedef StreamParams_AwbModeEnum AwbModeEnum;
  static constexpr AwbModeEnum OFF =
    StreamParams_AwbModeEnum_OFF;
  static constexpr AwbModeEnum AUTO =
    StreamParams_AwbModeEnum_AUTO;
  static constexpr AwbModeEnum INCANDESCENT =
    StreamParams_AwbModeEnum_INCANDESCENT;
  static constexpr AwbModeEnum FLUORESCENT =
    StreamParams_AwbModeEnum_FLUORESCENT;
  static constexpr AwbModeEnum WARM_FLUORESCENT =
    StreamParams_AwbModeEnum_WARM_FLUORESCENT;
  static constexpr AwbModeEnum DAYLIGHT =
    StreamParams_AwbModeEnum_DAYLIGHT;
  static constexpr AwbModeEnum CLOUDY =
    StreamParams_AwbModeEnum_CLOUDY;
  static constexpr AwbModeEnum TWILIGHT =
    StreamParams_AwbModeEnum_TWILIGHT;
  static constexpr AwbModeEnum SHADE =
    StreamParams_AwbModeEnum_SHADE;
  static constexpr AwbModeEnum DARK =
    StreamParams_AwbModeEnum_DARK;
  static inline bool AwbModeEnum_IsValid(int value) {
    return StreamParams_AwbModeEnum_IsValid(value);
  }
  static constexpr AwbModeEnum AwbModeEnum_MIN =
    StreamParams_AwbModeEnum_AwbModeEnum_MIN;
  static constexpr AwbModeEnum AwbModeEnum_MAX =
    StreamParams_AwbModeEnum_AwbModeEnum_MAX;
  static constexpr int AwbModeEnum_ARRAYSIZE =
    StreamParams_AwbModeEnum_AwbModeEnum_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AwbModeEnum_descriptor() {
    return StreamParams_AwbModeEnum_descriptor();
  }
  template<typename T>
  static inline const std::string& AwbModeEnum_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AwbModeEnum>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AwbModeEnum_Name.");
    return StreamParams_AwbModeEnum_Name(enum_t_value);
  }
  static inline bool AwbModeEnum_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AwbModeEnum* value) {
    return StreamParams_AwbModeEnum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTargetbitrateFieldNumber = 1,
    kRefreshintervalFieldNumber = 2,
    kIdrintervalFieldNumber = 3,
    kAwbFieldNumber = 4,
  };
  // .google.protobuf.Int64Value targetbitrate = 1;
  bool has_targetbitrate() const;
  private:
  bool _internal_has_targetbitrate() const;
  public:
  void clear_targetbitrate();
  const PROTOBUF_NAMESPACE_ID::Int64Value& targetbitrate() const;
  PROTOBUF_NAMESPACE_ID::Int64Value* release_targetbitrate();
  PROTOBUF_NAMESPACE_ID::Int64Value* mutable_targetbitrate();
  void set_allocated_targetbitrate(PROTOBUF_NAMESPACE_ID::Int64Value* targetbitrate);
  private:
  const PROTOBUF_NAMESPACE_ID::Int64Value& _internal_targetbitrate() const;
  PROTOBUF_NAMESPACE_ID::Int64Value* _internal_mutable_targetbitrate();
  public:
  void unsafe_arena_set_allocated_targetbitrate(
      PROTOBUF_NAMESPACE_ID::Int64Value* targetbitrate);
  PROTOBUF_NAMESPACE_ID::Int64Value* unsafe_arena_release_targetbitrate();

  // .google.protobuf.Int64Value refreshinterval = 2;
  bool has_refreshinterval() const;
  private:
  bool _internal_has_refreshinterval() const;
  public:
  void clear_refreshinterval();
  const PROTOBUF_NAMESPACE_ID::Int64Value& refreshinterval() const;
  PROTOBUF_NAMESPACE_ID::Int64Value* release_refreshinterval();
  PROTOBUF_NAMESPACE_ID::Int64Value* mutable_refreshinterval();
  void set_allocated_refreshinterval(PROTOBUF_NAMESPACE_ID::Int64Value* refreshinterval);
  private:
  const PROTOBUF_NAMESPACE_ID::Int64Value& _internal_refreshinterval() const;
  PROTOBUF_NAMESPACE_ID::Int64Value* _internal_mutable_refreshinterval();
  public:
  void unsafe_arena_set_allocated_refreshinterval(
      PROTOBUF_NAMESPACE_ID::Int64Value* refreshinterval);
  PROTOBUF_NAMESPACE_ID::Int64Value* unsafe_arena_release_refreshinterval();

  // .google.protobuf.Int64Value idrinterval = 3;
  bool has_idrinterval() const;
  private:
  bool _internal_has_idrinterval() const;
  public:
  void clear_idrinterval();
  const PROTOBUF_NAMESPACE_ID::Int64Value& idrinterval() const;
  PROTOBUF_NAMESPACE_ID::Int64Value* release_idrinterval();
  PROTOBUF_NAMESPACE_ID::Int64Value* mutable_idrinterval();
  void set_allocated_idrinterval(PROTOBUF_NAMESPACE_ID::Int64Value* idrinterval);
  private:
  const PROTOBUF_NAMESPACE_ID::Int64Value& _internal_idrinterval() const;
  PROTOBUF_NAMESPACE_ID::Int64Value* _internal_mutable_idrinterval();
  public:
  void unsafe_arena_set_allocated_idrinterval(
      PROTOBUF_NAMESPACE_ID::Int64Value* idrinterval);
  PROTOBUF_NAMESPACE_ID::Int64Value* unsafe_arena_release_idrinterval();

  // .bosdyn.api.spot_cam.StreamParams.AwbMode awb = 4;
  bool has_awb() const;
  private:
  bool _internal_has_awb() const;
  public:
  void clear_awb();
  const ::bosdyn::api::spot_cam::StreamParams_AwbMode& awb() const;
  ::bosdyn::api::spot_cam::StreamParams_AwbMode* release_awb();
  ::bosdyn::api::spot_cam::StreamParams_AwbMode* mutable_awb();
  void set_allocated_awb(::bosdyn::api::spot_cam::StreamParams_AwbMode* awb);
  private:
  const ::bosdyn::api::spot_cam::StreamParams_AwbMode& _internal_awb() const;
  ::bosdyn::api::spot_cam::StreamParams_AwbMode* _internal_mutable_awb();
  public:
  void unsafe_arena_set_allocated_awb(
      ::bosdyn::api::spot_cam::StreamParams_AwbMode* awb);
  ::bosdyn::api::spot_cam::StreamParams_AwbMode* unsafe_arena_release_awb();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.StreamParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Int64Value* targetbitrate_;
  PROTOBUF_NAMESPACE_ID::Int64Value* refreshinterval_;
  PROTOBUF_NAMESPACE_ID::Int64Value* idrinterval_;
  ::bosdyn::api::spot_cam::StreamParams_AwbMode* awb_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto;
};
// -------------------------------------------------------------------

class GetStreamParamsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.GetStreamParamsRequest) */ {
 public:
  inline GetStreamParamsRequest() : GetStreamParamsRequest(nullptr) {}
  virtual ~GetStreamParamsRequest();

  GetStreamParamsRequest(const GetStreamParamsRequest& from);
  GetStreamParamsRequest(GetStreamParamsRequest&& from) noexcept
    : GetStreamParamsRequest() {
    *this = ::std::move(from);
  }

  inline GetStreamParamsRequest& operator=(const GetStreamParamsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStreamParamsRequest& operator=(GetStreamParamsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetStreamParamsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetStreamParamsRequest* internal_default_instance() {
    return reinterpret_cast<const GetStreamParamsRequest*>(
               &_GetStreamParamsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetStreamParamsRequest& a, GetStreamParamsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStreamParamsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStreamParamsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetStreamParamsRequest* New() const final {
    return CreateMaybeMessage<GetStreamParamsRequest>(nullptr);
  }

  GetStreamParamsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetStreamParamsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetStreamParamsRequest& from);
  void MergeFrom(const GetStreamParamsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStreamParamsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.GetStreamParamsRequest";
  }
  protected:
  explicit GetStreamParamsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.GetStreamParamsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::RequestHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto;
};
// -------------------------------------------------------------------

class GetStreamParamsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.GetStreamParamsResponse) */ {
 public:
  inline GetStreamParamsResponse() : GetStreamParamsResponse(nullptr) {}
  virtual ~GetStreamParamsResponse();

  GetStreamParamsResponse(const GetStreamParamsResponse& from);
  GetStreamParamsResponse(GetStreamParamsResponse&& from) noexcept
    : GetStreamParamsResponse() {
    *this = ::std::move(from);
  }

  inline GetStreamParamsResponse& operator=(const GetStreamParamsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStreamParamsResponse& operator=(GetStreamParamsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetStreamParamsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetStreamParamsResponse* internal_default_instance() {
    return reinterpret_cast<const GetStreamParamsResponse*>(
               &_GetStreamParamsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetStreamParamsResponse& a, GetStreamParamsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStreamParamsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStreamParamsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetStreamParamsResponse* New() const final {
    return CreateMaybeMessage<GetStreamParamsResponse>(nullptr);
  }

  GetStreamParamsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetStreamParamsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetStreamParamsResponse& from);
  void MergeFrom(const GetStreamParamsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStreamParamsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.GetStreamParamsResponse";
  }
  protected:
  explicit GetStreamParamsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kParamsFieldNumber = 2,
  };
  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // .bosdyn.api.spot_cam.StreamParams params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::bosdyn::api::spot_cam::StreamParams& params() const;
  ::bosdyn::api::spot_cam::StreamParams* release_params();
  ::bosdyn::api::spot_cam::StreamParams* mutable_params();
  void set_allocated_params(::bosdyn::api::spot_cam::StreamParams* params);
  private:
  const ::bosdyn::api::spot_cam::StreamParams& _internal_params() const;
  ::bosdyn::api::spot_cam::StreamParams* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::bosdyn::api::spot_cam::StreamParams* params);
  ::bosdyn::api::spot_cam::StreamParams* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.GetStreamParamsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::ResponseHeader* header_;
  ::bosdyn::api::spot_cam::StreamParams* params_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto;
};
// -------------------------------------------------------------------

class SetStreamParamsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.SetStreamParamsRequest) */ {
 public:
  inline SetStreamParamsRequest() : SetStreamParamsRequest(nullptr) {}
  virtual ~SetStreamParamsRequest();

  SetStreamParamsRequest(const SetStreamParamsRequest& from);
  SetStreamParamsRequest(SetStreamParamsRequest&& from) noexcept
    : SetStreamParamsRequest() {
    *this = ::std::move(from);
  }

  inline SetStreamParamsRequest& operator=(const SetStreamParamsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetStreamParamsRequest& operator=(SetStreamParamsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetStreamParamsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetStreamParamsRequest* internal_default_instance() {
    return reinterpret_cast<const SetStreamParamsRequest*>(
               &_SetStreamParamsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SetStreamParamsRequest& a, SetStreamParamsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetStreamParamsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetStreamParamsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetStreamParamsRequest* New() const final {
    return CreateMaybeMessage<SetStreamParamsRequest>(nullptr);
  }

  SetStreamParamsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetStreamParamsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetStreamParamsRequest& from);
  void MergeFrom(const SetStreamParamsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetStreamParamsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.SetStreamParamsRequest";
  }
  protected:
  explicit SetStreamParamsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kParamsFieldNumber = 2,
  };
  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // .bosdyn.api.spot_cam.StreamParams params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::bosdyn::api::spot_cam::StreamParams& params() const;
  ::bosdyn::api::spot_cam::StreamParams* release_params();
  ::bosdyn::api::spot_cam::StreamParams* mutable_params();
  void set_allocated_params(::bosdyn::api::spot_cam::StreamParams* params);
  private:
  const ::bosdyn::api::spot_cam::StreamParams& _internal_params() const;
  ::bosdyn::api::spot_cam::StreamParams* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::bosdyn::api::spot_cam::StreamParams* params);
  ::bosdyn::api::spot_cam::StreamParams* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.SetStreamParamsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::RequestHeader* header_;
  ::bosdyn::api::spot_cam::StreamParams* params_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto;
};
// -------------------------------------------------------------------

class SetStreamParamsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.SetStreamParamsResponse) */ {
 public:
  inline SetStreamParamsResponse() : SetStreamParamsResponse(nullptr) {}
  virtual ~SetStreamParamsResponse();

  SetStreamParamsResponse(const SetStreamParamsResponse& from);
  SetStreamParamsResponse(SetStreamParamsResponse&& from) noexcept
    : SetStreamParamsResponse() {
    *this = ::std::move(from);
  }

  inline SetStreamParamsResponse& operator=(const SetStreamParamsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetStreamParamsResponse& operator=(SetStreamParamsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetStreamParamsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetStreamParamsResponse* internal_default_instance() {
    return reinterpret_cast<const SetStreamParamsResponse*>(
               &_SetStreamParamsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SetStreamParamsResponse& a, SetStreamParamsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetStreamParamsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetStreamParamsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetStreamParamsResponse* New() const final {
    return CreateMaybeMessage<SetStreamParamsResponse>(nullptr);
  }

  SetStreamParamsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetStreamParamsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetStreamParamsResponse& from);
  void MergeFrom(const SetStreamParamsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetStreamParamsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.SetStreamParamsResponse";
  }
  protected:
  explicit SetStreamParamsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kParamsFieldNumber = 2,
  };
  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // .bosdyn.api.spot_cam.StreamParams params = 2;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::bosdyn::api::spot_cam::StreamParams& params() const;
  ::bosdyn::api::spot_cam::StreamParams* release_params();
  ::bosdyn::api::spot_cam::StreamParams* mutable_params();
  void set_allocated_params(::bosdyn::api::spot_cam::StreamParams* params);
  private:
  const ::bosdyn::api::spot_cam::StreamParams& _internal_params() const;
  ::bosdyn::api::spot_cam::StreamParams* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::bosdyn::api::spot_cam::StreamParams* params);
  ::bosdyn::api::spot_cam::StreamParams* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.SetStreamParamsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::ResponseHeader* header_;
  ::bosdyn::api::spot_cam::StreamParams* params_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StreamParams_AwbMode

// .bosdyn.api.spot_cam.StreamParams.AwbModeEnum awb = 1;
inline void StreamParams_AwbMode::clear_awb() {
  awb_ = 0;
}
inline ::bosdyn::api::spot_cam::StreamParams_AwbModeEnum StreamParams_AwbMode::_internal_awb() const {
  return static_cast< ::bosdyn::api::spot_cam::StreamParams_AwbModeEnum >(awb_);
}
inline ::bosdyn::api::spot_cam::StreamParams_AwbModeEnum StreamParams_AwbMode::awb() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.StreamParams.AwbMode.awb)
  return _internal_awb();
}
inline void StreamParams_AwbMode::_internal_set_awb(::bosdyn::api::spot_cam::StreamParams_AwbModeEnum value) {
  
  awb_ = value;
}
inline void StreamParams_AwbMode::set_awb(::bosdyn::api::spot_cam::StreamParams_AwbModeEnum value) {
  _internal_set_awb(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.spot_cam.StreamParams.AwbMode.awb)
}

// -------------------------------------------------------------------

// StreamParams

// .google.protobuf.Int64Value targetbitrate = 1;
inline bool StreamParams::_internal_has_targetbitrate() const {
  return this != internal_default_instance() && targetbitrate_ != nullptr;
}
inline bool StreamParams::has_targetbitrate() const {
  return _internal_has_targetbitrate();
}
inline const PROTOBUF_NAMESPACE_ID::Int64Value& StreamParams::_internal_targetbitrate() const {
  const PROTOBUF_NAMESPACE_ID::Int64Value* p = targetbitrate_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Int64Value*>(
      &PROTOBUF_NAMESPACE_ID::_Int64Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Int64Value& StreamParams::targetbitrate() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.StreamParams.targetbitrate)
  return _internal_targetbitrate();
}
inline void StreamParams::unsafe_arena_set_allocated_targetbitrate(
    PROTOBUF_NAMESPACE_ID::Int64Value* targetbitrate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(targetbitrate_);
  }
  targetbitrate_ = targetbitrate;
  if (targetbitrate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.StreamParams.targetbitrate)
}
inline PROTOBUF_NAMESPACE_ID::Int64Value* StreamParams::release_targetbitrate() {
  
  PROTOBUF_NAMESPACE_ID::Int64Value* temp = targetbitrate_;
  targetbitrate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int64Value* StreamParams::unsafe_arena_release_targetbitrate() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.StreamParams.targetbitrate)
  
  PROTOBUF_NAMESPACE_ID::Int64Value* temp = targetbitrate_;
  targetbitrate_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int64Value* StreamParams::_internal_mutable_targetbitrate() {
  
  if (targetbitrate_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Int64Value>(GetArena());
    targetbitrate_ = p;
  }
  return targetbitrate_;
}
inline PROTOBUF_NAMESPACE_ID::Int64Value* StreamParams::mutable_targetbitrate() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.StreamParams.targetbitrate)
  return _internal_mutable_targetbitrate();
}
inline void StreamParams::set_allocated_targetbitrate(PROTOBUF_NAMESPACE_ID::Int64Value* targetbitrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(targetbitrate_);
  }
  if (targetbitrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(targetbitrate)->GetArena();
    if (message_arena != submessage_arena) {
      targetbitrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, targetbitrate, submessage_arena);
    }
    
  } else {
    
  }
  targetbitrate_ = targetbitrate;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.StreamParams.targetbitrate)
}

// .google.protobuf.Int64Value refreshinterval = 2;
inline bool StreamParams::_internal_has_refreshinterval() const {
  return this != internal_default_instance() && refreshinterval_ != nullptr;
}
inline bool StreamParams::has_refreshinterval() const {
  return _internal_has_refreshinterval();
}
inline const PROTOBUF_NAMESPACE_ID::Int64Value& StreamParams::_internal_refreshinterval() const {
  const PROTOBUF_NAMESPACE_ID::Int64Value* p = refreshinterval_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Int64Value*>(
      &PROTOBUF_NAMESPACE_ID::_Int64Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Int64Value& StreamParams::refreshinterval() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.StreamParams.refreshinterval)
  return _internal_refreshinterval();
}
inline void StreamParams::unsafe_arena_set_allocated_refreshinterval(
    PROTOBUF_NAMESPACE_ID::Int64Value* refreshinterval) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(refreshinterval_);
  }
  refreshinterval_ = refreshinterval;
  if (refreshinterval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.StreamParams.refreshinterval)
}
inline PROTOBUF_NAMESPACE_ID::Int64Value* StreamParams::release_refreshinterval() {
  
  PROTOBUF_NAMESPACE_ID::Int64Value* temp = refreshinterval_;
  refreshinterval_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int64Value* StreamParams::unsafe_arena_release_refreshinterval() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.StreamParams.refreshinterval)
  
  PROTOBUF_NAMESPACE_ID::Int64Value* temp = refreshinterval_;
  refreshinterval_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int64Value* StreamParams::_internal_mutable_refreshinterval() {
  
  if (refreshinterval_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Int64Value>(GetArena());
    refreshinterval_ = p;
  }
  return refreshinterval_;
}
inline PROTOBUF_NAMESPACE_ID::Int64Value* StreamParams::mutable_refreshinterval() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.StreamParams.refreshinterval)
  return _internal_mutable_refreshinterval();
}
inline void StreamParams::set_allocated_refreshinterval(PROTOBUF_NAMESPACE_ID::Int64Value* refreshinterval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(refreshinterval_);
  }
  if (refreshinterval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(refreshinterval)->GetArena();
    if (message_arena != submessage_arena) {
      refreshinterval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, refreshinterval, submessage_arena);
    }
    
  } else {
    
  }
  refreshinterval_ = refreshinterval;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.StreamParams.refreshinterval)
}

// .google.protobuf.Int64Value idrinterval = 3;
inline bool StreamParams::_internal_has_idrinterval() const {
  return this != internal_default_instance() && idrinterval_ != nullptr;
}
inline bool StreamParams::has_idrinterval() const {
  return _internal_has_idrinterval();
}
inline const PROTOBUF_NAMESPACE_ID::Int64Value& StreamParams::_internal_idrinterval() const {
  const PROTOBUF_NAMESPACE_ID::Int64Value* p = idrinterval_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Int64Value*>(
      &PROTOBUF_NAMESPACE_ID::_Int64Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Int64Value& StreamParams::idrinterval() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.StreamParams.idrinterval)
  return _internal_idrinterval();
}
inline void StreamParams::unsafe_arena_set_allocated_idrinterval(
    PROTOBUF_NAMESPACE_ID::Int64Value* idrinterval) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(idrinterval_);
  }
  idrinterval_ = idrinterval;
  if (idrinterval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.StreamParams.idrinterval)
}
inline PROTOBUF_NAMESPACE_ID::Int64Value* StreamParams::release_idrinterval() {
  
  PROTOBUF_NAMESPACE_ID::Int64Value* temp = idrinterval_;
  idrinterval_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int64Value* StreamParams::unsafe_arena_release_idrinterval() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.StreamParams.idrinterval)
  
  PROTOBUF_NAMESPACE_ID::Int64Value* temp = idrinterval_;
  idrinterval_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Int64Value* StreamParams::_internal_mutable_idrinterval() {
  
  if (idrinterval_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Int64Value>(GetArena());
    idrinterval_ = p;
  }
  return idrinterval_;
}
inline PROTOBUF_NAMESPACE_ID::Int64Value* StreamParams::mutable_idrinterval() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.StreamParams.idrinterval)
  return _internal_mutable_idrinterval();
}
inline void StreamParams::set_allocated_idrinterval(PROTOBUF_NAMESPACE_ID::Int64Value* idrinterval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(idrinterval_);
  }
  if (idrinterval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(idrinterval)->GetArena();
    if (message_arena != submessage_arena) {
      idrinterval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, idrinterval, submessage_arena);
    }
    
  } else {
    
  }
  idrinterval_ = idrinterval;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.StreamParams.idrinterval)
}

// .bosdyn.api.spot_cam.StreamParams.AwbMode awb = 4;
inline bool StreamParams::_internal_has_awb() const {
  return this != internal_default_instance() && awb_ != nullptr;
}
inline bool StreamParams::has_awb() const {
  return _internal_has_awb();
}
inline void StreamParams::clear_awb() {
  if (GetArena() == nullptr && awb_ != nullptr) {
    delete awb_;
  }
  awb_ = nullptr;
}
inline const ::bosdyn::api::spot_cam::StreamParams_AwbMode& StreamParams::_internal_awb() const {
  const ::bosdyn::api::spot_cam::StreamParams_AwbMode* p = awb_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::spot_cam::StreamParams_AwbMode*>(
      &::bosdyn::api::spot_cam::_StreamParams_AwbMode_default_instance_);
}
inline const ::bosdyn::api::spot_cam::StreamParams_AwbMode& StreamParams::awb() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.StreamParams.awb)
  return _internal_awb();
}
inline void StreamParams::unsafe_arena_set_allocated_awb(
    ::bosdyn::api::spot_cam::StreamParams_AwbMode* awb) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(awb_);
  }
  awb_ = awb;
  if (awb) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.StreamParams.awb)
}
inline ::bosdyn::api::spot_cam::StreamParams_AwbMode* StreamParams::release_awb() {
  
  ::bosdyn::api::spot_cam::StreamParams_AwbMode* temp = awb_;
  awb_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::spot_cam::StreamParams_AwbMode* StreamParams::unsafe_arena_release_awb() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.StreamParams.awb)
  
  ::bosdyn::api::spot_cam::StreamParams_AwbMode* temp = awb_;
  awb_ = nullptr;
  return temp;
}
inline ::bosdyn::api::spot_cam::StreamParams_AwbMode* StreamParams::_internal_mutable_awb() {
  
  if (awb_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::spot_cam::StreamParams_AwbMode>(GetArena());
    awb_ = p;
  }
  return awb_;
}
inline ::bosdyn::api::spot_cam::StreamParams_AwbMode* StreamParams::mutable_awb() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.StreamParams.awb)
  return _internal_mutable_awb();
}
inline void StreamParams::set_allocated_awb(::bosdyn::api::spot_cam::StreamParams_AwbMode* awb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete awb_;
  }
  if (awb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(awb);
    if (message_arena != submessage_arena) {
      awb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, awb, submessage_arena);
    }
    
  } else {
    
  }
  awb_ = awb;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.StreamParams.awb)
}

// -------------------------------------------------------------------

// GetStreamParamsRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool GetStreamParamsRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool GetStreamParamsRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& GetStreamParamsRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::RequestHeader*>(
      &::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& GetStreamParamsRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.GetStreamParamsRequest.header)
  return _internal_header();
}
inline void GetStreamParamsRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.GetStreamParamsRequest.header)
}
inline ::bosdyn::api::RequestHeader* GetStreamParamsRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::RequestHeader* GetStreamParamsRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.GetStreamParamsRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* GetStreamParamsRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::RequestHeader* GetStreamParamsRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.GetStreamParamsRequest.header)
  return _internal_mutable_header();
}
inline void GetStreamParamsRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.GetStreamParamsRequest.header)
}

// -------------------------------------------------------------------

// GetStreamParamsResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool GetStreamParamsResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool GetStreamParamsResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& GetStreamParamsResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::ResponseHeader*>(
      &::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& GetStreamParamsResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.GetStreamParamsResponse.header)
  return _internal_header();
}
inline void GetStreamParamsResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.GetStreamParamsResponse.header)
}
inline ::bosdyn::api::ResponseHeader* GetStreamParamsResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::ResponseHeader* GetStreamParamsResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.GetStreamParamsResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* GetStreamParamsResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::ResponseHeader* GetStreamParamsResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.GetStreamParamsResponse.header)
  return _internal_mutable_header();
}
inline void GetStreamParamsResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.GetStreamParamsResponse.header)
}

// .bosdyn.api.spot_cam.StreamParams params = 2;
inline bool GetStreamParamsResponse::_internal_has_params() const {
  return this != internal_default_instance() && params_ != nullptr;
}
inline bool GetStreamParamsResponse::has_params() const {
  return _internal_has_params();
}
inline void GetStreamParamsResponse::clear_params() {
  if (GetArena() == nullptr && params_ != nullptr) {
    delete params_;
  }
  params_ = nullptr;
}
inline const ::bosdyn::api::spot_cam::StreamParams& GetStreamParamsResponse::_internal_params() const {
  const ::bosdyn::api::spot_cam::StreamParams* p = params_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::spot_cam::StreamParams*>(
      &::bosdyn::api::spot_cam::_StreamParams_default_instance_);
}
inline const ::bosdyn::api::spot_cam::StreamParams& GetStreamParamsResponse::params() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.GetStreamParamsResponse.params)
  return _internal_params();
}
inline void GetStreamParamsResponse::unsafe_arena_set_allocated_params(
    ::bosdyn::api::spot_cam::StreamParams* params) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(params_);
  }
  params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.GetStreamParamsResponse.params)
}
inline ::bosdyn::api::spot_cam::StreamParams* GetStreamParamsResponse::release_params() {
  
  ::bosdyn::api::spot_cam::StreamParams* temp = params_;
  params_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::spot_cam::StreamParams* GetStreamParamsResponse::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.GetStreamParamsResponse.params)
  
  ::bosdyn::api::spot_cam::StreamParams* temp = params_;
  params_ = nullptr;
  return temp;
}
inline ::bosdyn::api::spot_cam::StreamParams* GetStreamParamsResponse::_internal_mutable_params() {
  
  if (params_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::spot_cam::StreamParams>(GetArena());
    params_ = p;
  }
  return params_;
}
inline ::bosdyn::api::spot_cam::StreamParams* GetStreamParamsResponse::mutable_params() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.GetStreamParamsResponse.params)
  return _internal_mutable_params();
}
inline void GetStreamParamsResponse::set_allocated_params(::bosdyn::api::spot_cam::StreamParams* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  params_ = params;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.GetStreamParamsResponse.params)
}

// -------------------------------------------------------------------

// SetStreamParamsRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool SetStreamParamsRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool SetStreamParamsRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& SetStreamParamsRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::RequestHeader*>(
      &::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& SetStreamParamsRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.SetStreamParamsRequest.header)
  return _internal_header();
}
inline void SetStreamParamsRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.SetStreamParamsRequest.header)
}
inline ::bosdyn::api::RequestHeader* SetStreamParamsRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::RequestHeader* SetStreamParamsRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.SetStreamParamsRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* SetStreamParamsRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::RequestHeader* SetStreamParamsRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.SetStreamParamsRequest.header)
  return _internal_mutable_header();
}
inline void SetStreamParamsRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.SetStreamParamsRequest.header)
}

// .bosdyn.api.spot_cam.StreamParams params = 2;
inline bool SetStreamParamsRequest::_internal_has_params() const {
  return this != internal_default_instance() && params_ != nullptr;
}
inline bool SetStreamParamsRequest::has_params() const {
  return _internal_has_params();
}
inline void SetStreamParamsRequest::clear_params() {
  if (GetArena() == nullptr && params_ != nullptr) {
    delete params_;
  }
  params_ = nullptr;
}
inline const ::bosdyn::api::spot_cam::StreamParams& SetStreamParamsRequest::_internal_params() const {
  const ::bosdyn::api::spot_cam::StreamParams* p = params_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::spot_cam::StreamParams*>(
      &::bosdyn::api::spot_cam::_StreamParams_default_instance_);
}
inline const ::bosdyn::api::spot_cam::StreamParams& SetStreamParamsRequest::params() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.SetStreamParamsRequest.params)
  return _internal_params();
}
inline void SetStreamParamsRequest::unsafe_arena_set_allocated_params(
    ::bosdyn::api::spot_cam::StreamParams* params) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(params_);
  }
  params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.SetStreamParamsRequest.params)
}
inline ::bosdyn::api::spot_cam::StreamParams* SetStreamParamsRequest::release_params() {
  
  ::bosdyn::api::spot_cam::StreamParams* temp = params_;
  params_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::spot_cam::StreamParams* SetStreamParamsRequest::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.SetStreamParamsRequest.params)
  
  ::bosdyn::api::spot_cam::StreamParams* temp = params_;
  params_ = nullptr;
  return temp;
}
inline ::bosdyn::api::spot_cam::StreamParams* SetStreamParamsRequest::_internal_mutable_params() {
  
  if (params_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::spot_cam::StreamParams>(GetArena());
    params_ = p;
  }
  return params_;
}
inline ::bosdyn::api::spot_cam::StreamParams* SetStreamParamsRequest::mutable_params() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.SetStreamParamsRequest.params)
  return _internal_mutable_params();
}
inline void SetStreamParamsRequest::set_allocated_params(::bosdyn::api::spot_cam::StreamParams* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  params_ = params;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.SetStreamParamsRequest.params)
}

// -------------------------------------------------------------------

// SetStreamParamsResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool SetStreamParamsResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool SetStreamParamsResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& SetStreamParamsResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::ResponseHeader*>(
      &::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& SetStreamParamsResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.SetStreamParamsResponse.header)
  return _internal_header();
}
inline void SetStreamParamsResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.SetStreamParamsResponse.header)
}
inline ::bosdyn::api::ResponseHeader* SetStreamParamsResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::ResponseHeader* SetStreamParamsResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.SetStreamParamsResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* SetStreamParamsResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::ResponseHeader* SetStreamParamsResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.SetStreamParamsResponse.header)
  return _internal_mutable_header();
}
inline void SetStreamParamsResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.SetStreamParamsResponse.header)
}

// .bosdyn.api.spot_cam.StreamParams params = 2;
inline bool SetStreamParamsResponse::_internal_has_params() const {
  return this != internal_default_instance() && params_ != nullptr;
}
inline bool SetStreamParamsResponse::has_params() const {
  return _internal_has_params();
}
inline void SetStreamParamsResponse::clear_params() {
  if (GetArena() == nullptr && params_ != nullptr) {
    delete params_;
  }
  params_ = nullptr;
}
inline const ::bosdyn::api::spot_cam::StreamParams& SetStreamParamsResponse::_internal_params() const {
  const ::bosdyn::api::spot_cam::StreamParams* p = params_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::spot_cam::StreamParams*>(
      &::bosdyn::api::spot_cam::_StreamParams_default_instance_);
}
inline const ::bosdyn::api::spot_cam::StreamParams& SetStreamParamsResponse::params() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.SetStreamParamsResponse.params)
  return _internal_params();
}
inline void SetStreamParamsResponse::unsafe_arena_set_allocated_params(
    ::bosdyn::api::spot_cam::StreamParams* params) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(params_);
  }
  params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.SetStreamParamsResponse.params)
}
inline ::bosdyn::api::spot_cam::StreamParams* SetStreamParamsResponse::release_params() {
  
  ::bosdyn::api::spot_cam::StreamParams* temp = params_;
  params_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::spot_cam::StreamParams* SetStreamParamsResponse::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.SetStreamParamsResponse.params)
  
  ::bosdyn::api::spot_cam::StreamParams* temp = params_;
  params_ = nullptr;
  return temp;
}
inline ::bosdyn::api::spot_cam::StreamParams* SetStreamParamsResponse::_internal_mutable_params() {
  
  if (params_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::spot_cam::StreamParams>(GetArena());
    params_ = p;
  }
  return params_;
}
inline ::bosdyn::api::spot_cam::StreamParams* SetStreamParamsResponse::mutable_params() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.SetStreamParamsResponse.params)
  return _internal_mutable_params();
}
inline void SetStreamParamsResponse::set_allocated_params(::bosdyn::api::spot_cam::StreamParams* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete params_;
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(params);
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  params_ = params;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.SetStreamParamsResponse.params)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace spot_cam
}  // namespace api
}  // namespace bosdyn

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bosdyn::api::spot_cam::StreamParams_AwbModeEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::spot_cam::StreamParams_AwbModeEnum>() {
  return ::bosdyn::api::spot_cam::StreamParams_AwbModeEnum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto
