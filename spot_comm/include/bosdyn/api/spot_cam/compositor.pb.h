// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/spot_cam/compositor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "bosdyn/api/header.pb.h"
#include "bosdyn/api/spot_cam/camera.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto;
namespace bosdyn {
namespace api {
namespace spot_cam {
class GetScreenRequest;
class GetScreenRequestDefaultTypeInternal;
extern GetScreenRequestDefaultTypeInternal _GetScreenRequest_default_instance_;
class GetScreenResponse;
class GetScreenResponseDefaultTypeInternal;
extern GetScreenResponseDefaultTypeInternal _GetScreenResponse_default_instance_;
class GetVisibleCamerasRequest;
class GetVisibleCamerasRequestDefaultTypeInternal;
extern GetVisibleCamerasRequestDefaultTypeInternal _GetVisibleCamerasRequest_default_instance_;
class GetVisibleCamerasResponse;
class GetVisibleCamerasResponseDefaultTypeInternal;
extern GetVisibleCamerasResponseDefaultTypeInternal _GetVisibleCamerasResponse_default_instance_;
class GetVisibleCamerasResponse_Stream;
class GetVisibleCamerasResponse_StreamDefaultTypeInternal;
extern GetVisibleCamerasResponse_StreamDefaultTypeInternal _GetVisibleCamerasResponse_Stream_default_instance_;
class GetVisibleCamerasResponse_Stream_Window;
class GetVisibleCamerasResponse_Stream_WindowDefaultTypeInternal;
extern GetVisibleCamerasResponse_Stream_WindowDefaultTypeInternal _GetVisibleCamerasResponse_Stream_Window_default_instance_;
class ListScreensRequest;
class ListScreensRequestDefaultTypeInternal;
extern ListScreensRequestDefaultTypeInternal _ListScreensRequest_default_instance_;
class ListScreensResponse;
class ListScreensResponseDefaultTypeInternal;
extern ListScreensResponseDefaultTypeInternal _ListScreensResponse_default_instance_;
class ScreenDescription;
class ScreenDescriptionDefaultTypeInternal;
extern ScreenDescriptionDefaultTypeInternal _ScreenDescription_default_instance_;
class SetScreenRequest;
class SetScreenRequestDefaultTypeInternal;
extern SetScreenRequestDefaultTypeInternal _SetScreenRequest_default_instance_;
class SetScreenResponse;
class SetScreenResponseDefaultTypeInternal;
extern SetScreenResponseDefaultTypeInternal _SetScreenResponse_default_instance_;
}  // namespace spot_cam
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> ::bosdyn::api::spot_cam::GetScreenRequest* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::GetScreenRequest>(Arena*);
template<> ::bosdyn::api::spot_cam::GetScreenResponse* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::GetScreenResponse>(Arena*);
template<> ::bosdyn::api::spot_cam::GetVisibleCamerasRequest* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::GetVisibleCamerasRequest>(Arena*);
template<> ::bosdyn::api::spot_cam::GetVisibleCamerasResponse* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::GetVisibleCamerasResponse>(Arena*);
template<> ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream>(Arena*);
template<> ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window>(Arena*);
template<> ::bosdyn::api::spot_cam::ListScreensRequest* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::ListScreensRequest>(Arena*);
template<> ::bosdyn::api::spot_cam::ListScreensResponse* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::ListScreensResponse>(Arena*);
template<> ::bosdyn::api::spot_cam::ScreenDescription* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::ScreenDescription>(Arena*);
template<> ::bosdyn::api::spot_cam::SetScreenRequest* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::SetScreenRequest>(Arena*);
template<> ::bosdyn::api::spot_cam::SetScreenResponse* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::SetScreenResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bosdyn {
namespace api {
namespace spot_cam {

// ===================================================================

class ScreenDescription PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.ScreenDescription) */ {
 public:
  inline ScreenDescription() : ScreenDescription(nullptr) {}
  virtual ~ScreenDescription();

  ScreenDescription(const ScreenDescription& from);
  ScreenDescription(ScreenDescription&& from) noexcept
    : ScreenDescription() {
    *this = ::std::move(from);
  }

  inline ScreenDescription& operator=(const ScreenDescription& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScreenDescription& operator=(ScreenDescription&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScreenDescription& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScreenDescription* internal_default_instance() {
    return reinterpret_cast<const ScreenDescription*>(
               &_ScreenDescription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ScreenDescription& a, ScreenDescription& b) {
    a.Swap(&b);
  }
  inline void Swap(ScreenDescription* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScreenDescription* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScreenDescription* New() const final {
    return CreateMaybeMessage<ScreenDescription>(nullptr);
  }

  ScreenDescription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScreenDescription>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScreenDescription& from);
  void MergeFrom(const ScreenDescription& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScreenDescription* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.ScreenDescription";
  }
  protected:
  explicit ScreenDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.ScreenDescription)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto;
};
// -------------------------------------------------------------------

class GetScreenRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.GetScreenRequest) */ {
 public:
  inline GetScreenRequest() : GetScreenRequest(nullptr) {}
  virtual ~GetScreenRequest();

  GetScreenRequest(const GetScreenRequest& from);
  GetScreenRequest(GetScreenRequest&& from) noexcept
    : GetScreenRequest() {
    *this = ::std::move(from);
  }

  inline GetScreenRequest& operator=(const GetScreenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetScreenRequest& operator=(GetScreenRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetScreenRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetScreenRequest* internal_default_instance() {
    return reinterpret_cast<const GetScreenRequest*>(
               &_GetScreenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetScreenRequest& a, GetScreenRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetScreenRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetScreenRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetScreenRequest* New() const final {
    return CreateMaybeMessage<GetScreenRequest>(nullptr);
  }

  GetScreenRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetScreenRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetScreenRequest& from);
  void MergeFrom(const GetScreenRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetScreenRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.GetScreenRequest";
  }
  protected:
  explicit GetScreenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.GetScreenRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::RequestHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto;
};
// -------------------------------------------------------------------

class GetScreenResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.GetScreenResponse) */ {
 public:
  inline GetScreenResponse() : GetScreenResponse(nullptr) {}
  virtual ~GetScreenResponse();

  GetScreenResponse(const GetScreenResponse& from);
  GetScreenResponse(GetScreenResponse&& from) noexcept
    : GetScreenResponse() {
    *this = ::std::move(from);
  }

  inline GetScreenResponse& operator=(const GetScreenResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetScreenResponse& operator=(GetScreenResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetScreenResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetScreenResponse* internal_default_instance() {
    return reinterpret_cast<const GetScreenResponse*>(
               &_GetScreenResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetScreenResponse& a, GetScreenResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetScreenResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetScreenResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetScreenResponse* New() const final {
    return CreateMaybeMessage<GetScreenResponse>(nullptr);
  }

  GetScreenResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetScreenResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetScreenResponse& from);
  void MergeFrom(const GetScreenResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetScreenResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.GetScreenResponse";
  }
  protected:
  explicit GetScreenResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.GetScreenResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::bosdyn::api::ResponseHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto;
};
// -------------------------------------------------------------------

class GetVisibleCamerasRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.GetVisibleCamerasRequest) */ {
 public:
  inline GetVisibleCamerasRequest() : GetVisibleCamerasRequest(nullptr) {}
  virtual ~GetVisibleCamerasRequest();

  GetVisibleCamerasRequest(const GetVisibleCamerasRequest& from);
  GetVisibleCamerasRequest(GetVisibleCamerasRequest&& from) noexcept
    : GetVisibleCamerasRequest() {
    *this = ::std::move(from);
  }

  inline GetVisibleCamerasRequest& operator=(const GetVisibleCamerasRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVisibleCamerasRequest& operator=(GetVisibleCamerasRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetVisibleCamerasRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetVisibleCamerasRequest* internal_default_instance() {
    return reinterpret_cast<const GetVisibleCamerasRequest*>(
               &_GetVisibleCamerasRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetVisibleCamerasRequest& a, GetVisibleCamerasRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVisibleCamerasRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVisibleCamerasRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetVisibleCamerasRequest* New() const final {
    return CreateMaybeMessage<GetVisibleCamerasRequest>(nullptr);
  }

  GetVisibleCamerasRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetVisibleCamerasRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetVisibleCamerasRequest& from);
  void MergeFrom(const GetVisibleCamerasRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVisibleCamerasRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.GetVisibleCamerasRequest";
  }
  protected:
  explicit GetVisibleCamerasRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.GetVisibleCamerasRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::RequestHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto;
};
// -------------------------------------------------------------------

class GetVisibleCamerasResponse_Stream_Window PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.Window) */ {
 public:
  inline GetVisibleCamerasResponse_Stream_Window() : GetVisibleCamerasResponse_Stream_Window(nullptr) {}
  virtual ~GetVisibleCamerasResponse_Stream_Window();

  GetVisibleCamerasResponse_Stream_Window(const GetVisibleCamerasResponse_Stream_Window& from);
  GetVisibleCamerasResponse_Stream_Window(GetVisibleCamerasResponse_Stream_Window&& from) noexcept
    : GetVisibleCamerasResponse_Stream_Window() {
    *this = ::std::move(from);
  }

  inline GetVisibleCamerasResponse_Stream_Window& operator=(const GetVisibleCamerasResponse_Stream_Window& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVisibleCamerasResponse_Stream_Window& operator=(GetVisibleCamerasResponse_Stream_Window&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetVisibleCamerasResponse_Stream_Window& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetVisibleCamerasResponse_Stream_Window* internal_default_instance() {
    return reinterpret_cast<const GetVisibleCamerasResponse_Stream_Window*>(
               &_GetVisibleCamerasResponse_Stream_Window_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetVisibleCamerasResponse_Stream_Window& a, GetVisibleCamerasResponse_Stream_Window& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVisibleCamerasResponse_Stream_Window* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVisibleCamerasResponse_Stream_Window* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetVisibleCamerasResponse_Stream_Window* New() const final {
    return CreateMaybeMessage<GetVisibleCamerasResponse_Stream_Window>(nullptr);
  }

  GetVisibleCamerasResponse_Stream_Window* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetVisibleCamerasResponse_Stream_Window>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetVisibleCamerasResponse_Stream_Window& from);
  void MergeFrom(const GetVisibleCamerasResponse_Stream_Window& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVisibleCamerasResponse_Stream_Window* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.Window";
  }
  protected:
  explicit GetVisibleCamerasResponse_Stream_Window(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXoffsetFieldNumber = 1,
    kYoffsetFieldNumber = 2,
    kWidthFieldNumber = 3,
    kHeightFieldNumber = 4,
  };
  // int32 xoffset = 1;
  void clear_xoffset();
  ::PROTOBUF_NAMESPACE_ID::int32 xoffset() const;
  void set_xoffset(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xoffset() const;
  void _internal_set_xoffset(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 yoffset = 2;
  void clear_yoffset();
  ::PROTOBUF_NAMESPACE_ID::int32 yoffset() const;
  void set_yoffset(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_yoffset() const;
  void _internal_set_yoffset(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 width = 3;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 height = 4;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.Window)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 xoffset_;
  ::PROTOBUF_NAMESPACE_ID::int32 yoffset_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto;
};
// -------------------------------------------------------------------

class GetVisibleCamerasResponse_Stream PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream) */ {
 public:
  inline GetVisibleCamerasResponse_Stream() : GetVisibleCamerasResponse_Stream(nullptr) {}
  virtual ~GetVisibleCamerasResponse_Stream();

  GetVisibleCamerasResponse_Stream(const GetVisibleCamerasResponse_Stream& from);
  GetVisibleCamerasResponse_Stream(GetVisibleCamerasResponse_Stream&& from) noexcept
    : GetVisibleCamerasResponse_Stream() {
    *this = ::std::move(from);
  }

  inline GetVisibleCamerasResponse_Stream& operator=(const GetVisibleCamerasResponse_Stream& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVisibleCamerasResponse_Stream& operator=(GetVisibleCamerasResponse_Stream&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetVisibleCamerasResponse_Stream& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetVisibleCamerasResponse_Stream* internal_default_instance() {
    return reinterpret_cast<const GetVisibleCamerasResponse_Stream*>(
               &_GetVisibleCamerasResponse_Stream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetVisibleCamerasResponse_Stream& a, GetVisibleCamerasResponse_Stream& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVisibleCamerasResponse_Stream* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVisibleCamerasResponse_Stream* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetVisibleCamerasResponse_Stream* New() const final {
    return CreateMaybeMessage<GetVisibleCamerasResponse_Stream>(nullptr);
  }

  GetVisibleCamerasResponse_Stream* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetVisibleCamerasResponse_Stream>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetVisibleCamerasResponse_Stream& from);
  void MergeFrom(const GetVisibleCamerasResponse_Stream& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVisibleCamerasResponse_Stream* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream";
  }
  protected:
  explicit GetVisibleCamerasResponse_Stream(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetVisibleCamerasResponse_Stream_Window Window;

  // accessors -------------------------------------------------------

  enum : int {
    kWindowFieldNumber = 1,
    kCameraFieldNumber = 2,
  };
  // .bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.Window window = 1;
  bool has_window() const;
  private:
  bool _internal_has_window() const;
  public:
  void clear_window();
  const ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window& window() const;
  ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window* release_window();
  ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window* mutable_window();
  void set_allocated_window(::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window* window);
  private:
  const ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window& _internal_window() const;
  ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window* _internal_mutable_window();
  public:
  void unsafe_arena_set_allocated_window(
      ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window* window);
  ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window* unsafe_arena_release_window();

  // .bosdyn.api.spot_cam.Camera camera = 2;
  bool has_camera() const;
  private:
  bool _internal_has_camera() const;
  public:
  void clear_camera();
  const ::bosdyn::api::spot_cam::Camera& camera() const;
  ::bosdyn::api::spot_cam::Camera* release_camera();
  ::bosdyn::api::spot_cam::Camera* mutable_camera();
  void set_allocated_camera(::bosdyn::api::spot_cam::Camera* camera);
  private:
  const ::bosdyn::api::spot_cam::Camera& _internal_camera() const;
  ::bosdyn::api::spot_cam::Camera* _internal_mutable_camera();
  public:
  void unsafe_arena_set_allocated_camera(
      ::bosdyn::api::spot_cam::Camera* camera);
  ::bosdyn::api::spot_cam::Camera* unsafe_arena_release_camera();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window* window_;
  ::bosdyn::api::spot_cam::Camera* camera_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto;
};
// -------------------------------------------------------------------

class GetVisibleCamerasResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.GetVisibleCamerasResponse) */ {
 public:
  inline GetVisibleCamerasResponse() : GetVisibleCamerasResponse(nullptr) {}
  virtual ~GetVisibleCamerasResponse();

  GetVisibleCamerasResponse(const GetVisibleCamerasResponse& from);
  GetVisibleCamerasResponse(GetVisibleCamerasResponse&& from) noexcept
    : GetVisibleCamerasResponse() {
    *this = ::std::move(from);
  }

  inline GetVisibleCamerasResponse& operator=(const GetVisibleCamerasResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVisibleCamerasResponse& operator=(GetVisibleCamerasResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetVisibleCamerasResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetVisibleCamerasResponse* internal_default_instance() {
    return reinterpret_cast<const GetVisibleCamerasResponse*>(
               &_GetVisibleCamerasResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetVisibleCamerasResponse& a, GetVisibleCamerasResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVisibleCamerasResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVisibleCamerasResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetVisibleCamerasResponse* New() const final {
    return CreateMaybeMessage<GetVisibleCamerasResponse>(nullptr);
  }

  GetVisibleCamerasResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetVisibleCamerasResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetVisibleCamerasResponse& from);
  void MergeFrom(const GetVisibleCamerasResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVisibleCamerasResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.GetVisibleCamerasResponse";
  }
  protected:
  explicit GetVisibleCamerasResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetVisibleCamerasResponse_Stream Stream;

  // accessors -------------------------------------------------------

  enum : int {
    kStreamsFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream streams = 2;
  int streams_size() const;
  private:
  int _internal_streams_size() const;
  public:
  void clear_streams();
  ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream* mutable_streams(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream >*
      mutable_streams();
  private:
  const ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream& _internal_streams(int index) const;
  ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream* _internal_add_streams();
  public:
  const ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream& streams(int index) const;
  ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream* add_streams();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream >&
      streams() const;

  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.GetVisibleCamerasResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream > streams_;
  ::bosdyn::api::ResponseHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto;
};
// -------------------------------------------------------------------

class ListScreensRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.ListScreensRequest) */ {
 public:
  inline ListScreensRequest() : ListScreensRequest(nullptr) {}
  virtual ~ListScreensRequest();

  ListScreensRequest(const ListScreensRequest& from);
  ListScreensRequest(ListScreensRequest&& from) noexcept
    : ListScreensRequest() {
    *this = ::std::move(from);
  }

  inline ListScreensRequest& operator=(const ListScreensRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListScreensRequest& operator=(ListScreensRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListScreensRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListScreensRequest* internal_default_instance() {
    return reinterpret_cast<const ListScreensRequest*>(
               &_ListScreensRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ListScreensRequest& a, ListScreensRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListScreensRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListScreensRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListScreensRequest* New() const final {
    return CreateMaybeMessage<ListScreensRequest>(nullptr);
  }

  ListScreensRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListScreensRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListScreensRequest& from);
  void MergeFrom(const ListScreensRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListScreensRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.ListScreensRequest";
  }
  protected:
  explicit ListScreensRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.ListScreensRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::RequestHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto;
};
// -------------------------------------------------------------------

class ListScreensResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.ListScreensResponse) */ {
 public:
  inline ListScreensResponse() : ListScreensResponse(nullptr) {}
  virtual ~ListScreensResponse();

  ListScreensResponse(const ListScreensResponse& from);
  ListScreensResponse(ListScreensResponse&& from) noexcept
    : ListScreensResponse() {
    *this = ::std::move(from);
  }

  inline ListScreensResponse& operator=(const ListScreensResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListScreensResponse& operator=(ListScreensResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListScreensResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListScreensResponse* internal_default_instance() {
    return reinterpret_cast<const ListScreensResponse*>(
               &_ListScreensResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ListScreensResponse& a, ListScreensResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListScreensResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListScreensResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListScreensResponse* New() const final {
    return CreateMaybeMessage<ListScreensResponse>(nullptr);
  }

  ListScreensResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListScreensResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListScreensResponse& from);
  void MergeFrom(const ListScreensResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListScreensResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.ListScreensResponse";
  }
  protected:
  explicit ListScreensResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScreensFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .bosdyn.api.spot_cam.ScreenDescription screens = 2;
  int screens_size() const;
  private:
  int _internal_screens_size() const;
  public:
  void clear_screens();
  ::bosdyn::api::spot_cam::ScreenDescription* mutable_screens(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::spot_cam::ScreenDescription >*
      mutable_screens();
  private:
  const ::bosdyn::api::spot_cam::ScreenDescription& _internal_screens(int index) const;
  ::bosdyn::api::spot_cam::ScreenDescription* _internal_add_screens();
  public:
  const ::bosdyn::api::spot_cam::ScreenDescription& screens(int index) const;
  ::bosdyn::api::spot_cam::ScreenDescription* add_screens();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::spot_cam::ScreenDescription >&
      screens() const;

  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.ListScreensResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::spot_cam::ScreenDescription > screens_;
  ::bosdyn::api::ResponseHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto;
};
// -------------------------------------------------------------------

class SetScreenRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.SetScreenRequest) */ {
 public:
  inline SetScreenRequest() : SetScreenRequest(nullptr) {}
  virtual ~SetScreenRequest();

  SetScreenRequest(const SetScreenRequest& from);
  SetScreenRequest(SetScreenRequest&& from) noexcept
    : SetScreenRequest() {
    *this = ::std::move(from);
  }

  inline SetScreenRequest& operator=(const SetScreenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetScreenRequest& operator=(SetScreenRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetScreenRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetScreenRequest* internal_default_instance() {
    return reinterpret_cast<const SetScreenRequest*>(
               &_SetScreenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SetScreenRequest& a, SetScreenRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetScreenRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetScreenRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetScreenRequest* New() const final {
    return CreateMaybeMessage<SetScreenRequest>(nullptr);
  }

  SetScreenRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetScreenRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetScreenRequest& from);
  void MergeFrom(const SetScreenRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetScreenRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.SetScreenRequest";
  }
  protected:
  explicit SetScreenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.SetScreenRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::bosdyn::api::RequestHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto;
};
// -------------------------------------------------------------------

class SetScreenResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.SetScreenResponse) */ {
 public:
  inline SetScreenResponse() : SetScreenResponse(nullptr) {}
  virtual ~SetScreenResponse();

  SetScreenResponse(const SetScreenResponse& from);
  SetScreenResponse(SetScreenResponse&& from) noexcept
    : SetScreenResponse() {
    *this = ::std::move(from);
  }

  inline SetScreenResponse& operator=(const SetScreenResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetScreenResponse& operator=(SetScreenResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetScreenResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetScreenResponse* internal_default_instance() {
    return reinterpret_cast<const SetScreenResponse*>(
               &_SetScreenResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SetScreenResponse& a, SetScreenResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetScreenResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetScreenResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetScreenResponse* New() const final {
    return CreateMaybeMessage<SetScreenResponse>(nullptr);
  }

  SetScreenResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetScreenResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetScreenResponse& from);
  void MergeFrom(const SetScreenResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetScreenResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.SetScreenResponse";
  }
  protected:
  explicit SetScreenResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.SetScreenResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::bosdyn::api::ResponseHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ScreenDescription

// string name = 1;
inline void ScreenDescription::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ScreenDescription::name() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.ScreenDescription.name)
  return _internal_name();
}
inline void ScreenDescription::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.spot_cam.ScreenDescription.name)
}
inline std::string* ScreenDescription::mutable_name() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.ScreenDescription.name)
  return _internal_mutable_name();
}
inline const std::string& ScreenDescription::_internal_name() const {
  return name_.Get();
}
inline void ScreenDescription::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ScreenDescription::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.spot_cam.ScreenDescription.name)
}
inline void ScreenDescription::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.spot_cam.ScreenDescription.name)
}
inline void ScreenDescription::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.spot_cam.ScreenDescription.name)
}
inline std::string* ScreenDescription::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ScreenDescription::release_name() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.ScreenDescription.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ScreenDescription::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.ScreenDescription.name)
}

// -------------------------------------------------------------------

// GetScreenRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool GetScreenRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool GetScreenRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& GetScreenRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::RequestHeader*>(
      &::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& GetScreenRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.GetScreenRequest.header)
  return _internal_header();
}
inline void GetScreenRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.GetScreenRequest.header)
}
inline ::bosdyn::api::RequestHeader* GetScreenRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::RequestHeader* GetScreenRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.GetScreenRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* GetScreenRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::RequestHeader* GetScreenRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.GetScreenRequest.header)
  return _internal_mutable_header();
}
inline void GetScreenRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.GetScreenRequest.header)
}

// -------------------------------------------------------------------

// GetScreenResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool GetScreenResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool GetScreenResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& GetScreenResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::ResponseHeader*>(
      &::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& GetScreenResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.GetScreenResponse.header)
  return _internal_header();
}
inline void GetScreenResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.GetScreenResponse.header)
}
inline ::bosdyn::api::ResponseHeader* GetScreenResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::ResponseHeader* GetScreenResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.GetScreenResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* GetScreenResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::ResponseHeader* GetScreenResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.GetScreenResponse.header)
  return _internal_mutable_header();
}
inline void GetScreenResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.GetScreenResponse.header)
}

// string name = 2;
inline void GetScreenResponse::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetScreenResponse::name() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.GetScreenResponse.name)
  return _internal_name();
}
inline void GetScreenResponse::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.spot_cam.GetScreenResponse.name)
}
inline std::string* GetScreenResponse::mutable_name() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.GetScreenResponse.name)
  return _internal_mutable_name();
}
inline const std::string& GetScreenResponse::_internal_name() const {
  return name_.Get();
}
inline void GetScreenResponse::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetScreenResponse::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.spot_cam.GetScreenResponse.name)
}
inline void GetScreenResponse::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.spot_cam.GetScreenResponse.name)
}
inline void GetScreenResponse::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.spot_cam.GetScreenResponse.name)
}
inline std::string* GetScreenResponse::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetScreenResponse::release_name() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.GetScreenResponse.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetScreenResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.GetScreenResponse.name)
}

// -------------------------------------------------------------------

// GetVisibleCamerasRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool GetVisibleCamerasRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool GetVisibleCamerasRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& GetVisibleCamerasRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::RequestHeader*>(
      &::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& GetVisibleCamerasRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.GetVisibleCamerasRequest.header)
  return _internal_header();
}
inline void GetVisibleCamerasRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.GetVisibleCamerasRequest.header)
}
inline ::bosdyn::api::RequestHeader* GetVisibleCamerasRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::RequestHeader* GetVisibleCamerasRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.GetVisibleCamerasRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* GetVisibleCamerasRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::RequestHeader* GetVisibleCamerasRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.GetVisibleCamerasRequest.header)
  return _internal_mutable_header();
}
inline void GetVisibleCamerasRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.GetVisibleCamerasRequest.header)
}

// -------------------------------------------------------------------

// GetVisibleCamerasResponse_Stream_Window

// int32 xoffset = 1;
inline void GetVisibleCamerasResponse_Stream_Window::clear_xoffset() {
  xoffset_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetVisibleCamerasResponse_Stream_Window::_internal_xoffset() const {
  return xoffset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetVisibleCamerasResponse_Stream_Window::xoffset() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.Window.xoffset)
  return _internal_xoffset();
}
inline void GetVisibleCamerasResponse_Stream_Window::_internal_set_xoffset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xoffset_ = value;
}
inline void GetVisibleCamerasResponse_Stream_Window::set_xoffset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xoffset(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.Window.xoffset)
}

// int32 yoffset = 2;
inline void GetVisibleCamerasResponse_Stream_Window::clear_yoffset() {
  yoffset_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetVisibleCamerasResponse_Stream_Window::_internal_yoffset() const {
  return yoffset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetVisibleCamerasResponse_Stream_Window::yoffset() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.Window.yoffset)
  return _internal_yoffset();
}
inline void GetVisibleCamerasResponse_Stream_Window::_internal_set_yoffset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  yoffset_ = value;
}
inline void GetVisibleCamerasResponse_Stream_Window::set_yoffset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_yoffset(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.Window.yoffset)
}

// int32 width = 3;
inline void GetVisibleCamerasResponse_Stream_Window::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetVisibleCamerasResponse_Stream_Window::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetVisibleCamerasResponse_Stream_Window::width() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.Window.width)
  return _internal_width();
}
inline void GetVisibleCamerasResponse_Stream_Window::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
}
inline void GetVisibleCamerasResponse_Stream_Window::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.Window.width)
}

// int32 height = 4;
inline void GetVisibleCamerasResponse_Stream_Window::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetVisibleCamerasResponse_Stream_Window::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetVisibleCamerasResponse_Stream_Window::height() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.Window.height)
  return _internal_height();
}
inline void GetVisibleCamerasResponse_Stream_Window::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void GetVisibleCamerasResponse_Stream_Window::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.Window.height)
}

// -------------------------------------------------------------------

// GetVisibleCamerasResponse_Stream

// .bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.Window window = 1;
inline bool GetVisibleCamerasResponse_Stream::_internal_has_window() const {
  return this != internal_default_instance() && window_ != nullptr;
}
inline bool GetVisibleCamerasResponse_Stream::has_window() const {
  return _internal_has_window();
}
inline void GetVisibleCamerasResponse_Stream::clear_window() {
  if (GetArena() == nullptr && window_ != nullptr) {
    delete window_;
  }
  window_ = nullptr;
}
inline const ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window& GetVisibleCamerasResponse_Stream::_internal_window() const {
  const ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window* p = window_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window*>(
      &::bosdyn::api::spot_cam::_GetVisibleCamerasResponse_Stream_Window_default_instance_);
}
inline const ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window& GetVisibleCamerasResponse_Stream::window() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.window)
  return _internal_window();
}
inline void GetVisibleCamerasResponse_Stream::unsafe_arena_set_allocated_window(
    ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window* window) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(window_);
  }
  window_ = window;
  if (window) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.window)
}
inline ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window* GetVisibleCamerasResponse_Stream::release_window() {
  
  ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window* temp = window_;
  window_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window* GetVisibleCamerasResponse_Stream::unsafe_arena_release_window() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.window)
  
  ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window* temp = window_;
  window_ = nullptr;
  return temp;
}
inline ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window* GetVisibleCamerasResponse_Stream::_internal_mutable_window() {
  
  if (window_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window>(GetArena());
    window_ = p;
  }
  return window_;
}
inline ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window* GetVisibleCamerasResponse_Stream::mutable_window() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.window)
  return _internal_mutable_window();
}
inline void GetVisibleCamerasResponse_Stream::set_allocated_window(::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window* window) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete window_;
  }
  if (window) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(window);
    if (message_arena != submessage_arena) {
      window = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, window, submessage_arena);
    }
    
  } else {
    
  }
  window_ = window;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.window)
}

// .bosdyn.api.spot_cam.Camera camera = 2;
inline bool GetVisibleCamerasResponse_Stream::_internal_has_camera() const {
  return this != internal_default_instance() && camera_ != nullptr;
}
inline bool GetVisibleCamerasResponse_Stream::has_camera() const {
  return _internal_has_camera();
}
inline const ::bosdyn::api::spot_cam::Camera& GetVisibleCamerasResponse_Stream::_internal_camera() const {
  const ::bosdyn::api::spot_cam::Camera* p = camera_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::spot_cam::Camera*>(
      &::bosdyn::api::spot_cam::_Camera_default_instance_);
}
inline const ::bosdyn::api::spot_cam::Camera& GetVisibleCamerasResponse_Stream::camera() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.camera)
  return _internal_camera();
}
inline void GetVisibleCamerasResponse_Stream::unsafe_arena_set_allocated_camera(
    ::bosdyn::api::spot_cam::Camera* camera) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(camera_);
  }
  camera_ = camera;
  if (camera) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.camera)
}
inline ::bosdyn::api::spot_cam::Camera* GetVisibleCamerasResponse_Stream::release_camera() {
  
  ::bosdyn::api::spot_cam::Camera* temp = camera_;
  camera_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::spot_cam::Camera* GetVisibleCamerasResponse_Stream::unsafe_arena_release_camera() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.camera)
  
  ::bosdyn::api::spot_cam::Camera* temp = camera_;
  camera_ = nullptr;
  return temp;
}
inline ::bosdyn::api::spot_cam::Camera* GetVisibleCamerasResponse_Stream::_internal_mutable_camera() {
  
  if (camera_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::spot_cam::Camera>(GetArena());
    camera_ = p;
  }
  return camera_;
}
inline ::bosdyn::api::spot_cam::Camera* GetVisibleCamerasResponse_Stream::mutable_camera() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.camera)
  return _internal_mutable_camera();
}
inline void GetVisibleCamerasResponse_Stream::set_allocated_camera(::bosdyn::api::spot_cam::Camera* camera) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(camera_);
  }
  if (camera) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(camera)->GetArena();
    if (message_arena != submessage_arena) {
      camera = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera, submessage_arena);
    }
    
  } else {
    
  }
  camera_ = camera;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.camera)
}

// -------------------------------------------------------------------

// GetVisibleCamerasResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool GetVisibleCamerasResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool GetVisibleCamerasResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& GetVisibleCamerasResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::ResponseHeader*>(
      &::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& GetVisibleCamerasResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.GetVisibleCamerasResponse.header)
  return _internal_header();
}
inline void GetVisibleCamerasResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.GetVisibleCamerasResponse.header)
}
inline ::bosdyn::api::ResponseHeader* GetVisibleCamerasResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::ResponseHeader* GetVisibleCamerasResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.GetVisibleCamerasResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* GetVisibleCamerasResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::ResponseHeader* GetVisibleCamerasResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.GetVisibleCamerasResponse.header)
  return _internal_mutable_header();
}
inline void GetVisibleCamerasResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.GetVisibleCamerasResponse.header)
}

// repeated .bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream streams = 2;
inline int GetVisibleCamerasResponse::_internal_streams_size() const {
  return streams_.size();
}
inline int GetVisibleCamerasResponse::streams_size() const {
  return _internal_streams_size();
}
inline void GetVisibleCamerasResponse::clear_streams() {
  streams_.Clear();
}
inline ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream* GetVisibleCamerasResponse::mutable_streams(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.GetVisibleCamerasResponse.streams)
  return streams_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream >*
GetVisibleCamerasResponse::mutable_streams() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.spot_cam.GetVisibleCamerasResponse.streams)
  return &streams_;
}
inline const ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream& GetVisibleCamerasResponse::_internal_streams(int index) const {
  return streams_.Get(index);
}
inline const ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream& GetVisibleCamerasResponse::streams(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.GetVisibleCamerasResponse.streams)
  return _internal_streams(index);
}
inline ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream* GetVisibleCamerasResponse::_internal_add_streams() {
  return streams_.Add();
}
inline ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream* GetVisibleCamerasResponse::add_streams() {
  // @@protoc_insertion_point(field_add:bosdyn.api.spot_cam.GetVisibleCamerasResponse.streams)
  return _internal_add_streams();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream >&
GetVisibleCamerasResponse::streams() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.spot_cam.GetVisibleCamerasResponse.streams)
  return streams_;
}

// -------------------------------------------------------------------

// ListScreensRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool ListScreensRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool ListScreensRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& ListScreensRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::RequestHeader*>(
      &::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& ListScreensRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.ListScreensRequest.header)
  return _internal_header();
}
inline void ListScreensRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.ListScreensRequest.header)
}
inline ::bosdyn::api::RequestHeader* ListScreensRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::RequestHeader* ListScreensRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.ListScreensRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* ListScreensRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::RequestHeader* ListScreensRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.ListScreensRequest.header)
  return _internal_mutable_header();
}
inline void ListScreensRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.ListScreensRequest.header)
}

// -------------------------------------------------------------------

// ListScreensResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool ListScreensResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool ListScreensResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& ListScreensResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::ResponseHeader*>(
      &::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& ListScreensResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.ListScreensResponse.header)
  return _internal_header();
}
inline void ListScreensResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.ListScreensResponse.header)
}
inline ::bosdyn::api::ResponseHeader* ListScreensResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::ResponseHeader* ListScreensResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.ListScreensResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* ListScreensResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::ResponseHeader* ListScreensResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.ListScreensResponse.header)
  return _internal_mutable_header();
}
inline void ListScreensResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.ListScreensResponse.header)
}

// repeated .bosdyn.api.spot_cam.ScreenDescription screens = 2;
inline int ListScreensResponse::_internal_screens_size() const {
  return screens_.size();
}
inline int ListScreensResponse::screens_size() const {
  return _internal_screens_size();
}
inline void ListScreensResponse::clear_screens() {
  screens_.Clear();
}
inline ::bosdyn::api::spot_cam::ScreenDescription* ListScreensResponse::mutable_screens(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.ListScreensResponse.screens)
  return screens_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::spot_cam::ScreenDescription >*
ListScreensResponse::mutable_screens() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.spot_cam.ListScreensResponse.screens)
  return &screens_;
}
inline const ::bosdyn::api::spot_cam::ScreenDescription& ListScreensResponse::_internal_screens(int index) const {
  return screens_.Get(index);
}
inline const ::bosdyn::api::spot_cam::ScreenDescription& ListScreensResponse::screens(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.ListScreensResponse.screens)
  return _internal_screens(index);
}
inline ::bosdyn::api::spot_cam::ScreenDescription* ListScreensResponse::_internal_add_screens() {
  return screens_.Add();
}
inline ::bosdyn::api::spot_cam::ScreenDescription* ListScreensResponse::add_screens() {
  // @@protoc_insertion_point(field_add:bosdyn.api.spot_cam.ListScreensResponse.screens)
  return _internal_add_screens();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::spot_cam::ScreenDescription >&
ListScreensResponse::screens() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.spot_cam.ListScreensResponse.screens)
  return screens_;
}

// -------------------------------------------------------------------

// SetScreenRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool SetScreenRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool SetScreenRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& SetScreenRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::RequestHeader*>(
      &::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& SetScreenRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.SetScreenRequest.header)
  return _internal_header();
}
inline void SetScreenRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.SetScreenRequest.header)
}
inline ::bosdyn::api::RequestHeader* SetScreenRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::RequestHeader* SetScreenRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.SetScreenRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* SetScreenRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::RequestHeader* SetScreenRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.SetScreenRequest.header)
  return _internal_mutable_header();
}
inline void SetScreenRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.SetScreenRequest.header)
}

// string name = 2;
inline void SetScreenRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetScreenRequest::name() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.SetScreenRequest.name)
  return _internal_name();
}
inline void SetScreenRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.spot_cam.SetScreenRequest.name)
}
inline std::string* SetScreenRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.SetScreenRequest.name)
  return _internal_mutable_name();
}
inline const std::string& SetScreenRequest::_internal_name() const {
  return name_.Get();
}
inline void SetScreenRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetScreenRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.spot_cam.SetScreenRequest.name)
}
inline void SetScreenRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.spot_cam.SetScreenRequest.name)
}
inline void SetScreenRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.spot_cam.SetScreenRequest.name)
}
inline std::string* SetScreenRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetScreenRequest::release_name() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.SetScreenRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetScreenRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.SetScreenRequest.name)
}

// -------------------------------------------------------------------

// SetScreenResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool SetScreenResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool SetScreenResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& SetScreenResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::ResponseHeader*>(
      &::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& SetScreenResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.SetScreenResponse.header)
  return _internal_header();
}
inline void SetScreenResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.SetScreenResponse.header)
}
inline ::bosdyn::api::ResponseHeader* SetScreenResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::ResponseHeader* SetScreenResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.SetScreenResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* SetScreenResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::ResponseHeader* SetScreenResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.SetScreenResponse.header)
  return _internal_mutable_header();
}
inline void SetScreenResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.SetScreenResponse.header)
}

// string name = 2;
inline void SetScreenResponse::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetScreenResponse::name() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.SetScreenResponse.name)
  return _internal_name();
}
inline void SetScreenResponse::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.spot_cam.SetScreenResponse.name)
}
inline std::string* SetScreenResponse::mutable_name() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.SetScreenResponse.name)
  return _internal_mutable_name();
}
inline const std::string& SetScreenResponse::_internal_name() const {
  return name_.Get();
}
inline void SetScreenResponse::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetScreenResponse::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.spot_cam.SetScreenResponse.name)
}
inline void SetScreenResponse::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.spot_cam.SetScreenResponse.name)
}
inline void SetScreenResponse::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.spot_cam.SetScreenResponse.name)
}
inline std::string* SetScreenResponse::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetScreenResponse::release_name() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.SetScreenResponse.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetScreenResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.SetScreenResponse.name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace spot_cam
}  // namespace api
}  // namespace bosdyn

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto
