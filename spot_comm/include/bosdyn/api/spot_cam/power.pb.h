// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/spot_cam/power.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/wrappers.pb.h>
#include "bosdyn/api/header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto;
namespace bosdyn {
namespace api {
namespace spot_cam {
class GetPowerStatusRequest;
class GetPowerStatusRequestDefaultTypeInternal;
extern GetPowerStatusRequestDefaultTypeInternal _GetPowerStatusRequest_default_instance_;
class GetPowerStatusResponse;
class GetPowerStatusResponseDefaultTypeInternal;
extern GetPowerStatusResponseDefaultTypeInternal _GetPowerStatusResponse_default_instance_;
class PowerStatus;
class PowerStatusDefaultTypeInternal;
extern PowerStatusDefaultTypeInternal _PowerStatus_default_instance_;
class SetPowerStatusRequest;
class SetPowerStatusRequestDefaultTypeInternal;
extern SetPowerStatusRequestDefaultTypeInternal _SetPowerStatusRequest_default_instance_;
class SetPowerStatusResponse;
class SetPowerStatusResponseDefaultTypeInternal;
extern SetPowerStatusResponseDefaultTypeInternal _SetPowerStatusResponse_default_instance_;
}  // namespace spot_cam
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> ::bosdyn::api::spot_cam::GetPowerStatusRequest* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::GetPowerStatusRequest>(Arena*);
template<> ::bosdyn::api::spot_cam::GetPowerStatusResponse* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::GetPowerStatusResponse>(Arena*);
template<> ::bosdyn::api::spot_cam::PowerStatus* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::PowerStatus>(Arena*);
template<> ::bosdyn::api::spot_cam::SetPowerStatusRequest* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::SetPowerStatusRequest>(Arena*);
template<> ::bosdyn::api::spot_cam::SetPowerStatusResponse* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::SetPowerStatusResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bosdyn {
namespace api {
namespace spot_cam {

// ===================================================================

class PowerStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.PowerStatus) */ {
 public:
  inline PowerStatus() : PowerStatus(nullptr) {}
  virtual ~PowerStatus();

  PowerStatus(const PowerStatus& from);
  PowerStatus(PowerStatus&& from) noexcept
    : PowerStatus() {
    *this = ::std::move(from);
  }

  inline PowerStatus& operator=(const PowerStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline PowerStatus& operator=(PowerStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PowerStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PowerStatus* internal_default_instance() {
    return reinterpret_cast<const PowerStatus*>(
               &_PowerStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PowerStatus& a, PowerStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(PowerStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PowerStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PowerStatus* New() const final {
    return CreateMaybeMessage<PowerStatus>(nullptr);
  }

  PowerStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PowerStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PowerStatus& from);
  void MergeFrom(const PowerStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PowerStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.PowerStatus";
  }
  protected:
  explicit PowerStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPtzFieldNumber = 2,
    kAux1FieldNumber = 3,
    kAux2FieldNumber = 4,
  };
  // .google.protobuf.BoolValue ptz = 2;
  bool has_ptz() const;
  private:
  bool _internal_has_ptz() const;
  public:
  void clear_ptz();
  const PROTOBUF_NAMESPACE_ID::BoolValue& ptz() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_ptz();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_ptz();
  void set_allocated_ptz(PROTOBUF_NAMESPACE_ID::BoolValue* ptz);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_ptz() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_ptz();
  public:
  void unsafe_arena_set_allocated_ptz(
      PROTOBUF_NAMESPACE_ID::BoolValue* ptz);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_ptz();

  // .google.protobuf.BoolValue aux1 = 3;
  bool has_aux1() const;
  private:
  bool _internal_has_aux1() const;
  public:
  void clear_aux1();
  const PROTOBUF_NAMESPACE_ID::BoolValue& aux1() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_aux1();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_aux1();
  void set_allocated_aux1(PROTOBUF_NAMESPACE_ID::BoolValue* aux1);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_aux1() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_aux1();
  public:
  void unsafe_arena_set_allocated_aux1(
      PROTOBUF_NAMESPACE_ID::BoolValue* aux1);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_aux1();

  // .google.protobuf.BoolValue aux2 = 4;
  bool has_aux2() const;
  private:
  bool _internal_has_aux2() const;
  public:
  void clear_aux2();
  const PROTOBUF_NAMESPACE_ID::BoolValue& aux2() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_aux2();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_aux2();
  void set_allocated_aux2(PROTOBUF_NAMESPACE_ID::BoolValue* aux2);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_aux2() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_aux2();
  public:
  void unsafe_arena_set_allocated_aux2(
      PROTOBUF_NAMESPACE_ID::BoolValue* aux2);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_aux2();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.PowerStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::BoolValue* ptz_;
  PROTOBUF_NAMESPACE_ID::BoolValue* aux1_;
  PROTOBUF_NAMESPACE_ID::BoolValue* aux2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto;
};
// -------------------------------------------------------------------

class GetPowerStatusRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.GetPowerStatusRequest) */ {
 public:
  inline GetPowerStatusRequest() : GetPowerStatusRequest(nullptr) {}
  virtual ~GetPowerStatusRequest();

  GetPowerStatusRequest(const GetPowerStatusRequest& from);
  GetPowerStatusRequest(GetPowerStatusRequest&& from) noexcept
    : GetPowerStatusRequest() {
    *this = ::std::move(from);
  }

  inline GetPowerStatusRequest& operator=(const GetPowerStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPowerStatusRequest& operator=(GetPowerStatusRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPowerStatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPowerStatusRequest* internal_default_instance() {
    return reinterpret_cast<const GetPowerStatusRequest*>(
               &_GetPowerStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetPowerStatusRequest& a, GetPowerStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPowerStatusRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPowerStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPowerStatusRequest* New() const final {
    return CreateMaybeMessage<GetPowerStatusRequest>(nullptr);
  }

  GetPowerStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPowerStatusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPowerStatusRequest& from);
  void MergeFrom(const GetPowerStatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPowerStatusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.GetPowerStatusRequest";
  }
  protected:
  explicit GetPowerStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.GetPowerStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::RequestHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto;
};
// -------------------------------------------------------------------

class GetPowerStatusResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.GetPowerStatusResponse) */ {
 public:
  inline GetPowerStatusResponse() : GetPowerStatusResponse(nullptr) {}
  virtual ~GetPowerStatusResponse();

  GetPowerStatusResponse(const GetPowerStatusResponse& from);
  GetPowerStatusResponse(GetPowerStatusResponse&& from) noexcept
    : GetPowerStatusResponse() {
    *this = ::std::move(from);
  }

  inline GetPowerStatusResponse& operator=(const GetPowerStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPowerStatusResponse& operator=(GetPowerStatusResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPowerStatusResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPowerStatusResponse* internal_default_instance() {
    return reinterpret_cast<const GetPowerStatusResponse*>(
               &_GetPowerStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetPowerStatusResponse& a, GetPowerStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPowerStatusResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPowerStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPowerStatusResponse* New() const final {
    return CreateMaybeMessage<GetPowerStatusResponse>(nullptr);
  }

  GetPowerStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPowerStatusResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPowerStatusResponse& from);
  void MergeFrom(const GetPowerStatusResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPowerStatusResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.GetPowerStatusResponse";
  }
  protected:
  explicit GetPowerStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // .bosdyn.api.spot_cam.PowerStatus status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::bosdyn::api::spot_cam::PowerStatus& status() const;
  ::bosdyn::api::spot_cam::PowerStatus* release_status();
  ::bosdyn::api::spot_cam::PowerStatus* mutable_status();
  void set_allocated_status(::bosdyn::api::spot_cam::PowerStatus* status);
  private:
  const ::bosdyn::api::spot_cam::PowerStatus& _internal_status() const;
  ::bosdyn::api::spot_cam::PowerStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::bosdyn::api::spot_cam::PowerStatus* status);
  ::bosdyn::api::spot_cam::PowerStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.GetPowerStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::ResponseHeader* header_;
  ::bosdyn::api::spot_cam::PowerStatus* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto;
};
// -------------------------------------------------------------------

class SetPowerStatusRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.SetPowerStatusRequest) */ {
 public:
  inline SetPowerStatusRequest() : SetPowerStatusRequest(nullptr) {}
  virtual ~SetPowerStatusRequest();

  SetPowerStatusRequest(const SetPowerStatusRequest& from);
  SetPowerStatusRequest(SetPowerStatusRequest&& from) noexcept
    : SetPowerStatusRequest() {
    *this = ::std::move(from);
  }

  inline SetPowerStatusRequest& operator=(const SetPowerStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPowerStatusRequest& operator=(SetPowerStatusRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetPowerStatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetPowerStatusRequest* internal_default_instance() {
    return reinterpret_cast<const SetPowerStatusRequest*>(
               &_SetPowerStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SetPowerStatusRequest& a, SetPowerStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPowerStatusRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetPowerStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetPowerStatusRequest* New() const final {
    return CreateMaybeMessage<SetPowerStatusRequest>(nullptr);
  }

  SetPowerStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetPowerStatusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetPowerStatusRequest& from);
  void MergeFrom(const SetPowerStatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPowerStatusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.SetPowerStatusRequest";
  }
  protected:
  explicit SetPowerStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // .bosdyn.api.spot_cam.PowerStatus status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::bosdyn::api::spot_cam::PowerStatus& status() const;
  ::bosdyn::api::spot_cam::PowerStatus* release_status();
  ::bosdyn::api::spot_cam::PowerStatus* mutable_status();
  void set_allocated_status(::bosdyn::api::spot_cam::PowerStatus* status);
  private:
  const ::bosdyn::api::spot_cam::PowerStatus& _internal_status() const;
  ::bosdyn::api::spot_cam::PowerStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::bosdyn::api::spot_cam::PowerStatus* status);
  ::bosdyn::api::spot_cam::PowerStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.SetPowerStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::RequestHeader* header_;
  ::bosdyn::api::spot_cam::PowerStatus* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto;
};
// -------------------------------------------------------------------

class SetPowerStatusResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.SetPowerStatusResponse) */ {
 public:
  inline SetPowerStatusResponse() : SetPowerStatusResponse(nullptr) {}
  virtual ~SetPowerStatusResponse();

  SetPowerStatusResponse(const SetPowerStatusResponse& from);
  SetPowerStatusResponse(SetPowerStatusResponse&& from) noexcept
    : SetPowerStatusResponse() {
    *this = ::std::move(from);
  }

  inline SetPowerStatusResponse& operator=(const SetPowerStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPowerStatusResponse& operator=(SetPowerStatusResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetPowerStatusResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetPowerStatusResponse* internal_default_instance() {
    return reinterpret_cast<const SetPowerStatusResponse*>(
               &_SetPowerStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SetPowerStatusResponse& a, SetPowerStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPowerStatusResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetPowerStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetPowerStatusResponse* New() const final {
    return CreateMaybeMessage<SetPowerStatusResponse>(nullptr);
  }

  SetPowerStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetPowerStatusResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetPowerStatusResponse& from);
  void MergeFrom(const SetPowerStatusResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPowerStatusResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.SetPowerStatusResponse";
  }
  protected:
  explicit SetPowerStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // .bosdyn.api.spot_cam.PowerStatus status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::bosdyn::api::spot_cam::PowerStatus& status() const;
  ::bosdyn::api::spot_cam::PowerStatus* release_status();
  ::bosdyn::api::spot_cam::PowerStatus* mutable_status();
  void set_allocated_status(::bosdyn::api::spot_cam::PowerStatus* status);
  private:
  const ::bosdyn::api::spot_cam::PowerStatus& _internal_status() const;
  ::bosdyn::api::spot_cam::PowerStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::bosdyn::api::spot_cam::PowerStatus* status);
  ::bosdyn::api::spot_cam::PowerStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.SetPowerStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::ResponseHeader* header_;
  ::bosdyn::api::spot_cam::PowerStatus* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PowerStatus

// .google.protobuf.BoolValue ptz = 2;
inline bool PowerStatus::_internal_has_ptz() const {
  return this != internal_default_instance() && ptz_ != nullptr;
}
inline bool PowerStatus::has_ptz() const {
  return _internal_has_ptz();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& PowerStatus::_internal_ptz() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = ptz_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue*>(
      &PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& PowerStatus::ptz() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.PowerStatus.ptz)
  return _internal_ptz();
}
inline void PowerStatus::unsafe_arena_set_allocated_ptz(
    PROTOBUF_NAMESPACE_ID::BoolValue* ptz) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ptz_);
  }
  ptz_ = ptz;
  if (ptz) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.PowerStatus.ptz)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* PowerStatus::release_ptz() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = ptz_;
  ptz_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* PowerStatus::unsafe_arena_release_ptz() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.PowerStatus.ptz)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = ptz_;
  ptz_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* PowerStatus::_internal_mutable_ptz() {
  
  if (ptz_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    ptz_ = p;
  }
  return ptz_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* PowerStatus::mutable_ptz() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.PowerStatus.ptz)
  return _internal_mutable_ptz();
}
inline void PowerStatus::set_allocated_ptz(PROTOBUF_NAMESPACE_ID::BoolValue* ptz) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ptz_);
  }
  if (ptz) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ptz)->GetArena();
    if (message_arena != submessage_arena) {
      ptz = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ptz, submessage_arena);
    }
    
  } else {
    
  }
  ptz_ = ptz;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.PowerStatus.ptz)
}

// .google.protobuf.BoolValue aux1 = 3;
inline bool PowerStatus::_internal_has_aux1() const {
  return this != internal_default_instance() && aux1_ != nullptr;
}
inline bool PowerStatus::has_aux1() const {
  return _internal_has_aux1();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& PowerStatus::_internal_aux1() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = aux1_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue*>(
      &PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& PowerStatus::aux1() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.PowerStatus.aux1)
  return _internal_aux1();
}
inline void PowerStatus::unsafe_arena_set_allocated_aux1(
    PROTOBUF_NAMESPACE_ID::BoolValue* aux1) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(aux1_);
  }
  aux1_ = aux1;
  if (aux1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.PowerStatus.aux1)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* PowerStatus::release_aux1() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = aux1_;
  aux1_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* PowerStatus::unsafe_arena_release_aux1() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.PowerStatus.aux1)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = aux1_;
  aux1_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* PowerStatus::_internal_mutable_aux1() {
  
  if (aux1_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    aux1_ = p;
  }
  return aux1_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* PowerStatus::mutable_aux1() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.PowerStatus.aux1)
  return _internal_mutable_aux1();
}
inline void PowerStatus::set_allocated_aux1(PROTOBUF_NAMESPACE_ID::BoolValue* aux1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(aux1_);
  }
  if (aux1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(aux1)->GetArena();
    if (message_arena != submessage_arena) {
      aux1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aux1, submessage_arena);
    }
    
  } else {
    
  }
  aux1_ = aux1;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.PowerStatus.aux1)
}

// .google.protobuf.BoolValue aux2 = 4;
inline bool PowerStatus::_internal_has_aux2() const {
  return this != internal_default_instance() && aux2_ != nullptr;
}
inline bool PowerStatus::has_aux2() const {
  return _internal_has_aux2();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& PowerStatus::_internal_aux2() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = aux2_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue*>(
      &PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& PowerStatus::aux2() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.PowerStatus.aux2)
  return _internal_aux2();
}
inline void PowerStatus::unsafe_arena_set_allocated_aux2(
    PROTOBUF_NAMESPACE_ID::BoolValue* aux2) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(aux2_);
  }
  aux2_ = aux2;
  if (aux2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.PowerStatus.aux2)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* PowerStatus::release_aux2() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = aux2_;
  aux2_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* PowerStatus::unsafe_arena_release_aux2() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.PowerStatus.aux2)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = aux2_;
  aux2_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* PowerStatus::_internal_mutable_aux2() {
  
  if (aux2_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    aux2_ = p;
  }
  return aux2_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* PowerStatus::mutable_aux2() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.PowerStatus.aux2)
  return _internal_mutable_aux2();
}
inline void PowerStatus::set_allocated_aux2(PROTOBUF_NAMESPACE_ID::BoolValue* aux2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(aux2_);
  }
  if (aux2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(aux2)->GetArena();
    if (message_arena != submessage_arena) {
      aux2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aux2, submessage_arena);
    }
    
  } else {
    
  }
  aux2_ = aux2;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.PowerStatus.aux2)
}

// -------------------------------------------------------------------

// GetPowerStatusRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool GetPowerStatusRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool GetPowerStatusRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& GetPowerStatusRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::RequestHeader*>(
      &::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& GetPowerStatusRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.GetPowerStatusRequest.header)
  return _internal_header();
}
inline void GetPowerStatusRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.GetPowerStatusRequest.header)
}
inline ::bosdyn::api::RequestHeader* GetPowerStatusRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::RequestHeader* GetPowerStatusRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.GetPowerStatusRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* GetPowerStatusRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::RequestHeader* GetPowerStatusRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.GetPowerStatusRequest.header)
  return _internal_mutable_header();
}
inline void GetPowerStatusRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.GetPowerStatusRequest.header)
}

// -------------------------------------------------------------------

// GetPowerStatusResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool GetPowerStatusResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool GetPowerStatusResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& GetPowerStatusResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::ResponseHeader*>(
      &::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& GetPowerStatusResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.GetPowerStatusResponse.header)
  return _internal_header();
}
inline void GetPowerStatusResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.GetPowerStatusResponse.header)
}
inline ::bosdyn::api::ResponseHeader* GetPowerStatusResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::ResponseHeader* GetPowerStatusResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.GetPowerStatusResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* GetPowerStatusResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::ResponseHeader* GetPowerStatusResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.GetPowerStatusResponse.header)
  return _internal_mutable_header();
}
inline void GetPowerStatusResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.GetPowerStatusResponse.header)
}

// .bosdyn.api.spot_cam.PowerStatus status = 2;
inline bool GetPowerStatusResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool GetPowerStatusResponse::has_status() const {
  return _internal_has_status();
}
inline void GetPowerStatusResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::bosdyn::api::spot_cam::PowerStatus& GetPowerStatusResponse::_internal_status() const {
  const ::bosdyn::api::spot_cam::PowerStatus* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::spot_cam::PowerStatus*>(
      &::bosdyn::api::spot_cam::_PowerStatus_default_instance_);
}
inline const ::bosdyn::api::spot_cam::PowerStatus& GetPowerStatusResponse::status() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.GetPowerStatusResponse.status)
  return _internal_status();
}
inline void GetPowerStatusResponse::unsafe_arena_set_allocated_status(
    ::bosdyn::api::spot_cam::PowerStatus* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.GetPowerStatusResponse.status)
}
inline ::bosdyn::api::spot_cam::PowerStatus* GetPowerStatusResponse::release_status() {
  
  ::bosdyn::api::spot_cam::PowerStatus* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::spot_cam::PowerStatus* GetPowerStatusResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.GetPowerStatusResponse.status)
  
  ::bosdyn::api::spot_cam::PowerStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::bosdyn::api::spot_cam::PowerStatus* GetPowerStatusResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::spot_cam::PowerStatus>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::bosdyn::api::spot_cam::PowerStatus* GetPowerStatusResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.GetPowerStatusResponse.status)
  return _internal_mutable_status();
}
inline void GetPowerStatusResponse::set_allocated_status(::bosdyn::api::spot_cam::PowerStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.GetPowerStatusResponse.status)
}

// -------------------------------------------------------------------

// SetPowerStatusRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool SetPowerStatusRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool SetPowerStatusRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& SetPowerStatusRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::RequestHeader*>(
      &::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& SetPowerStatusRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.SetPowerStatusRequest.header)
  return _internal_header();
}
inline void SetPowerStatusRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.SetPowerStatusRequest.header)
}
inline ::bosdyn::api::RequestHeader* SetPowerStatusRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::RequestHeader* SetPowerStatusRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.SetPowerStatusRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* SetPowerStatusRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::RequestHeader* SetPowerStatusRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.SetPowerStatusRequest.header)
  return _internal_mutable_header();
}
inline void SetPowerStatusRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.SetPowerStatusRequest.header)
}

// .bosdyn.api.spot_cam.PowerStatus status = 2;
inline bool SetPowerStatusRequest::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SetPowerStatusRequest::has_status() const {
  return _internal_has_status();
}
inline void SetPowerStatusRequest::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::bosdyn::api::spot_cam::PowerStatus& SetPowerStatusRequest::_internal_status() const {
  const ::bosdyn::api::spot_cam::PowerStatus* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::spot_cam::PowerStatus*>(
      &::bosdyn::api::spot_cam::_PowerStatus_default_instance_);
}
inline const ::bosdyn::api::spot_cam::PowerStatus& SetPowerStatusRequest::status() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.SetPowerStatusRequest.status)
  return _internal_status();
}
inline void SetPowerStatusRequest::unsafe_arena_set_allocated_status(
    ::bosdyn::api::spot_cam::PowerStatus* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.SetPowerStatusRequest.status)
}
inline ::bosdyn::api::spot_cam::PowerStatus* SetPowerStatusRequest::release_status() {
  
  ::bosdyn::api::spot_cam::PowerStatus* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::spot_cam::PowerStatus* SetPowerStatusRequest::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.SetPowerStatusRequest.status)
  
  ::bosdyn::api::spot_cam::PowerStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::bosdyn::api::spot_cam::PowerStatus* SetPowerStatusRequest::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::spot_cam::PowerStatus>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::bosdyn::api::spot_cam::PowerStatus* SetPowerStatusRequest::mutable_status() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.SetPowerStatusRequest.status)
  return _internal_mutable_status();
}
inline void SetPowerStatusRequest::set_allocated_status(::bosdyn::api::spot_cam::PowerStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.SetPowerStatusRequest.status)
}

// -------------------------------------------------------------------

// SetPowerStatusResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool SetPowerStatusResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool SetPowerStatusResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& SetPowerStatusResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::ResponseHeader*>(
      &::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& SetPowerStatusResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.SetPowerStatusResponse.header)
  return _internal_header();
}
inline void SetPowerStatusResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.SetPowerStatusResponse.header)
}
inline ::bosdyn::api::ResponseHeader* SetPowerStatusResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::ResponseHeader* SetPowerStatusResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.SetPowerStatusResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* SetPowerStatusResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::ResponseHeader* SetPowerStatusResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.SetPowerStatusResponse.header)
  return _internal_mutable_header();
}
inline void SetPowerStatusResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.SetPowerStatusResponse.header)
}

// .bosdyn.api.spot_cam.PowerStatus status = 2;
inline bool SetPowerStatusResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool SetPowerStatusResponse::has_status() const {
  return _internal_has_status();
}
inline void SetPowerStatusResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::bosdyn::api::spot_cam::PowerStatus& SetPowerStatusResponse::_internal_status() const {
  const ::bosdyn::api::spot_cam::PowerStatus* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::spot_cam::PowerStatus*>(
      &::bosdyn::api::spot_cam::_PowerStatus_default_instance_);
}
inline const ::bosdyn::api::spot_cam::PowerStatus& SetPowerStatusResponse::status() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.SetPowerStatusResponse.status)
  return _internal_status();
}
inline void SetPowerStatusResponse::unsafe_arena_set_allocated_status(
    ::bosdyn::api::spot_cam::PowerStatus* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.SetPowerStatusResponse.status)
}
inline ::bosdyn::api::spot_cam::PowerStatus* SetPowerStatusResponse::release_status() {
  
  ::bosdyn::api::spot_cam::PowerStatus* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::spot_cam::PowerStatus* SetPowerStatusResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.SetPowerStatusResponse.status)
  
  ::bosdyn::api::spot_cam::PowerStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::bosdyn::api::spot_cam::PowerStatus* SetPowerStatusResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::spot_cam::PowerStatus>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::bosdyn::api::spot_cam::PowerStatus* SetPowerStatusResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.SetPowerStatusResponse.status)
  return _internal_mutable_status();
}
inline void SetPowerStatusResponse::set_allocated_status(::bosdyn::api::spot_cam::PowerStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.SetPowerStatusResponse.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace spot_cam
}  // namespace api
}  // namespace bosdyn

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto
