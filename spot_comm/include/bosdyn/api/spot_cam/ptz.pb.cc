// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/spot_cam/ptz.proto

#include "bosdyn/api/spot_cam/ptz.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PtzDescription_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PtzDescription_Limits_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PtzPosition_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PtzVelocity_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FloatValue_google_2fprotobuf_2fwrappers_2eproto;
namespace bosdyn {
namespace api {
namespace spot_cam {
class PtzDescription_LimitsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PtzDescription_Limits> _instance;
} _PtzDescription_Limits_default_instance_;
class PtzDescriptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PtzDescription> _instance;
} _PtzDescription_default_instance_;
class PtzPositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PtzPosition> _instance;
} _PtzPosition_default_instance_;
class PtzVelocityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PtzVelocity> _instance;
} _PtzVelocity_default_instance_;
class GetPtzPositionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPtzPositionRequest> _instance;
} _GetPtzPositionRequest_default_instance_;
class GetPtzPositionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPtzPositionResponse> _instance;
} _GetPtzPositionResponse_default_instance_;
class GetPtzVelocityRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPtzVelocityRequest> _instance;
} _GetPtzVelocityRequest_default_instance_;
class GetPtzVelocityResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPtzVelocityResponse> _instance;
} _GetPtzVelocityResponse_default_instance_;
class ListPtzRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListPtzRequest> _instance;
} _ListPtzRequest_default_instance_;
class ListPtzResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListPtzResponse> _instance;
} _ListPtzResponse_default_instance_;
class SetPtzPositionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetPtzPositionRequest> _instance;
} _SetPtzPositionRequest_default_instance_;
class SetPtzPositionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetPtzPositionResponse> _instance;
} _SetPtzPositionResponse_default_instance_;
class SetPtzVelocityRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetPtzVelocityRequest> _instance;
} _SetPtzVelocityRequest_default_instance_;
class SetPtzVelocityResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetPtzVelocityResponse> _instance;
} _SetPtzVelocityResponse_default_instance_;
}  // namespace spot_cam
}  // namespace api
}  // namespace bosdyn
static void InitDefaultsscc_info_GetPtzPositionRequest_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_GetPtzPositionRequest_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::GetPtzPositionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::GetPtzPositionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetPtzPositionRequest_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetPtzPositionRequest_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_PtzDescription_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto.base,}};

static void InitDefaultsscc_info_GetPtzPositionResponse_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_GetPtzPositionResponse_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::GetPtzPositionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::GetPtzPositionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetPtzPositionResponse_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetPtzPositionResponse_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_PtzPosition_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto.base,}};

static void InitDefaultsscc_info_GetPtzVelocityRequest_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_GetPtzVelocityRequest_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::GetPtzVelocityRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::GetPtzVelocityRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetPtzVelocityRequest_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetPtzVelocityRequest_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_PtzDescription_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto.base,}};

static void InitDefaultsscc_info_GetPtzVelocityResponse_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_GetPtzVelocityResponse_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::GetPtzVelocityResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::GetPtzVelocityResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetPtzVelocityResponse_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetPtzVelocityResponse_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_PtzVelocity_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto.base,}};

static void InitDefaultsscc_info_ListPtzRequest_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_ListPtzRequest_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::ListPtzRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::ListPtzRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListPtzRequest_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListPtzRequest_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_ListPtzResponse_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_ListPtzResponse_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::ListPtzResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::ListPtzResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ListPtzResponse_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ListPtzResponse_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_PtzDescription_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto.base,}};

static void InitDefaultsscc_info_PtzDescription_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_PtzDescription_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::PtzDescription();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::PtzDescription::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PtzDescription_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PtzDescription_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto}, {
      &scc_info_PtzDescription_Limits_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto.base,}};

static void InitDefaultsscc_info_PtzDescription_Limits_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_PtzDescription_Limits_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::PtzDescription_Limits();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::PtzDescription_Limits::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PtzDescription_Limits_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PtzDescription_Limits_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto}, {
      &scc_info_FloatValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_PtzPosition_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_PtzPosition_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::PtzPosition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::PtzPosition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PtzPosition_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PtzPosition_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto}, {
      &scc_info_PtzDescription_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto.base,
      &scc_info_FloatValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_PtzVelocity_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_PtzVelocity_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::PtzVelocity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::PtzVelocity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PtzVelocity_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PtzVelocity_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto}, {
      &scc_info_PtzDescription_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto.base,
      &scc_info_FloatValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_SetPtzPositionRequest_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_SetPtzPositionRequest_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::SetPtzPositionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::SetPtzPositionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SetPtzPositionRequest_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SetPtzPositionRequest_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_PtzPosition_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto.base,}};

static void InitDefaultsscc_info_SetPtzPositionResponse_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_SetPtzPositionResponse_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::SetPtzPositionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::SetPtzPositionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SetPtzPositionResponse_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SetPtzPositionResponse_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_PtzPosition_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto.base,}};

static void InitDefaultsscc_info_SetPtzVelocityRequest_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_SetPtzVelocityRequest_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::SetPtzVelocityRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::SetPtzVelocityRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SetPtzVelocityRequest_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SetPtzVelocityRequest_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_PtzVelocity_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto.base,}};

static void InitDefaultsscc_info_SetPtzVelocityResponse_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_SetPtzVelocityResponse_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::SetPtzVelocityResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::SetPtzVelocityResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SetPtzVelocityResponse_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SetPtzVelocityResponse_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_PtzVelocity_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto[14];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::PtzDescription_Limits, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::PtzDescription_Limits, min_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::PtzDescription_Limits, max_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::PtzDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::PtzDescription, name_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::PtzDescription, pan_limit_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::PtzDescription, tilt_limit_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::PtzDescription, zoom_limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::PtzPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::PtzPosition, ptz_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::PtzPosition, pan_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::PtzPosition, tilt_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::PtzPosition, zoom_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::PtzVelocity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::PtzVelocity, ptz_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::PtzVelocity, pan_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::PtzVelocity, tilt_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::PtzVelocity, zoom_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetPtzPositionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetPtzPositionRequest, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetPtzPositionRequest, ptz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetPtzPositionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetPtzPositionResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetPtzPositionResponse, position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetPtzVelocityRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetPtzVelocityRequest, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetPtzVelocityRequest, ptz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetPtzVelocityResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetPtzVelocityResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetPtzVelocityResponse, velocity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::ListPtzRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::ListPtzRequest, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::ListPtzResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::ListPtzResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::ListPtzResponse, ptzs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::SetPtzPositionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::SetPtzPositionRequest, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::SetPtzPositionRequest, position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::SetPtzPositionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::SetPtzPositionResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::SetPtzPositionResponse, position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::SetPtzVelocityRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::SetPtzVelocityRequest, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::SetPtzVelocityRequest, velocity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::SetPtzVelocityResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::SetPtzVelocityResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::SetPtzVelocityResponse, velocity_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::bosdyn::api::spot_cam::PtzDescription_Limits)},
  { 7, -1, sizeof(::bosdyn::api::spot_cam::PtzDescription)},
  { 16, -1, sizeof(::bosdyn::api::spot_cam::PtzPosition)},
  { 25, -1, sizeof(::bosdyn::api::spot_cam::PtzVelocity)},
  { 34, -1, sizeof(::bosdyn::api::spot_cam::GetPtzPositionRequest)},
  { 41, -1, sizeof(::bosdyn::api::spot_cam::GetPtzPositionResponse)},
  { 48, -1, sizeof(::bosdyn::api::spot_cam::GetPtzVelocityRequest)},
  { 55, -1, sizeof(::bosdyn::api::spot_cam::GetPtzVelocityResponse)},
  { 62, -1, sizeof(::bosdyn::api::spot_cam::ListPtzRequest)},
  { 68, -1, sizeof(::bosdyn::api::spot_cam::ListPtzResponse)},
  { 75, -1, sizeof(::bosdyn::api::spot_cam::SetPtzPositionRequest)},
  { 82, -1, sizeof(::bosdyn::api::spot_cam::SetPtzPositionResponse)},
  { 89, -1, sizeof(::bosdyn::api::spot_cam::SetPtzVelocityRequest)},
  { 96, -1, sizeof(::bosdyn::api::spot_cam::SetPtzVelocityResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_PtzDescription_Limits_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_PtzDescription_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_PtzPosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_PtzVelocity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_GetPtzPositionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_GetPtzPositionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_GetPtzVelocityRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_GetPtzVelocityResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_ListPtzRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_ListPtzResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_SetPtzPositionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_SetPtzPositionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_SetPtzVelocityRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_SetPtzVelocityResponse_default_instance_),
};

const char descriptor_table_protodef_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035bosdyn/api/spot_cam/ptz.proto\022\023bosdyn."
  "api.spot_cam\032\036google/protobuf/wrappers.p"
  "roto\032\027bosdyn/api/header.proto\"\273\002\n\016PtzDes"
  "cription\022\014\n\004name\030\001 \001(\t\022=\n\tpan_limit\030\002 \001("
  "\0132*.bosdyn.api.spot_cam.PtzDescription.L"
  "imits\022>\n\ntilt_limit\030\003 \001(\0132*.bosdyn.api.s"
  "pot_cam.PtzDescription.Limits\022>\n\nzoom_li"
  "mit\030\004 \001(\0132*.bosdyn.api.spot_cam.PtzDescr"
  "iption.Limits\032\\\n\006Limits\022(\n\003min\030\001 \001(\0132\033.g"
  "oogle.protobuf.FloatValue\022(\n\003max\030\002 \001(\0132\033"
  ".google.protobuf.FloatValue\"\277\001\n\013PtzPosit"
  "ion\0220\n\003ptz\030\002 \001(\0132#.bosdyn.api.spot_cam.P"
  "tzDescription\022(\n\003pan\030\003 \001(\0132\033.google.prot"
  "obuf.FloatValue\022)\n\004tilt\030\004 \001(\0132\033.google.p"
  "rotobuf.FloatValue\022)\n\004zoom\030\005 \001(\0132\033.googl"
  "e.protobuf.FloatValue\"\277\001\n\013PtzVelocity\0220\n"
  "\003ptz\030\002 \001(\0132#.bosdyn.api.spot_cam.PtzDesc"
  "ription\022(\n\003pan\030\003 \001(\0132\033.google.protobuf.F"
  "loatValue\022)\n\004tilt\030\004 \001(\0132\033.google.protobu"
  "f.FloatValue\022)\n\004zoom\030\005 \001(\0132\033.google.prot"
  "obuf.FloatValue\"t\n\025GetPtzPositionRequest"
  "\022)\n\006header\030\001 \001(\0132\031.bosdyn.api.RequestHea"
  "der\0220\n\003ptz\030\002 \001(\0132#.bosdyn.api.spot_cam.P"
  "tzDescription\"x\n\026GetPtzPositionResponse\022"
  "*\n\006header\030\001 \001(\0132\032.bosdyn.api.ResponseHea"
  "der\0222\n\010position\030\002 \001(\0132 .bosdyn.api.spot_"
  "cam.PtzPosition\"t\n\025GetPtzVelocityRequest"
  "\022)\n\006header\030\001 \001(\0132\031.bosdyn.api.RequestHea"
  "der\0220\n\003ptz\030\002 \001(\0132#.bosdyn.api.spot_cam.P"
  "tzDescription\"x\n\026GetPtzVelocityResponse\022"
  "*\n\006header\030\001 \001(\0132\032.bosdyn.api.ResponseHea"
  "der\0222\n\010velocity\030\002 \001(\0132 .bosdyn.api.spot_"
  "cam.PtzVelocity\";\n\016ListPtzRequest\022)\n\006hea"
  "der\030\001 \001(\0132\031.bosdyn.api.RequestHeader\"p\n\017"
  "ListPtzResponse\022*\n\006header\030\001 \001(\0132\032.bosdyn"
  ".api.ResponseHeader\0221\n\004ptzs\030\002 \003(\0132#.bosd"
  "yn.api.spot_cam.PtzDescription\"v\n\025SetPtz"
  "PositionRequest\022)\n\006header\030\001 \001(\0132\031.bosdyn"
  ".api.RequestHeader\0222\n\010position\030\002 \001(\0132 .b"
  "osdyn.api.spot_cam.PtzPosition\"x\n\026SetPtz"
  "PositionResponse\022*\n\006header\030\001 \001(\0132\032.bosdy"
  "n.api.ResponseHeader\0222\n\010position\030\002 \001(\0132 "
  ".bosdyn.api.spot_cam.PtzPosition\"v\n\025SetP"
  "tzVelocityRequest\022)\n\006header\030\001 \001(\0132\031.bosd"
  "yn.api.RequestHeader\0222\n\010velocity\030\002 \001(\0132 "
  ".bosdyn.api.spot_cam.PtzVelocity\"x\n\026SetP"
  "tzVelocityResponse\022*\n\006header\030\001 \001(\0132\032.bos"
  "dyn.api.ResponseHeader\0222\n\010velocity\030\002 \001(\013"
  "2 .bosdyn.api.spot_cam.PtzVelocityB\nB\010Pt"
  "zProtob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto_deps[2] = {
  &::descriptor_table_bosdyn_2fapi_2fheader_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto_sccs[14] = {
  &scc_info_GetPtzPositionRequest_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto.base,
  &scc_info_GetPtzPositionResponse_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto.base,
  &scc_info_GetPtzVelocityRequest_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto.base,
  &scc_info_GetPtzVelocityResponse_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto.base,
  &scc_info_ListPtzRequest_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto.base,
  &scc_info_ListPtzResponse_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto.base,
  &scc_info_PtzDescription_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto.base,
  &scc_info_PtzDescription_Limits_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto.base,
  &scc_info_PtzPosition_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto.base,
  &scc_info_PtzVelocity_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto.base,
  &scc_info_SetPtzPositionRequest_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto.base,
  &scc_info_SetPtzPositionResponse_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto.base,
  &scc_info_SetPtzVelocityRequest_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto.base,
  &scc_info_SetPtzVelocityResponse_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto = {
  false, false, descriptor_table_protodef_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto, "bosdyn/api/spot_cam/ptz.proto", 1974,
  &descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto_once, descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto_sccs, descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto_deps, 14, 2,
  schemas, file_default_instances, TableStruct_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto::offsets,
  file_level_metadata_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto, 14, file_level_enum_descriptors_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto, file_level_service_descriptors_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto)), true);
namespace bosdyn {
namespace api {
namespace spot_cam {

// ===================================================================

void PtzDescription_Limits::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_PtzDescription_Limits_default_instance_._instance.get_mutable()->min_ = const_cast< PROTOBUF_NAMESPACE_ID::FloatValue*>(
      PROTOBUF_NAMESPACE_ID::FloatValue::internal_default_instance());
  ::bosdyn::api::spot_cam::_PtzDescription_Limits_default_instance_._instance.get_mutable()->max_ = const_cast< PROTOBUF_NAMESPACE_ID::FloatValue*>(
      PROTOBUF_NAMESPACE_ID::FloatValue::internal_default_instance());
}
class PtzDescription_Limits::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::FloatValue& min(const PtzDescription_Limits* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& max(const PtzDescription_Limits* msg);
};

const PROTOBUF_NAMESPACE_ID::FloatValue&
PtzDescription_Limits::_Internal::min(const PtzDescription_Limits* msg) {
  return *msg->min_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
PtzDescription_Limits::_Internal::max(const PtzDescription_Limits* msg) {
  return *msg->max_;
}
void PtzDescription_Limits::clear_min() {
  if (GetArena() == nullptr && min_ != nullptr) {
    delete min_;
  }
  min_ = nullptr;
}
void PtzDescription_Limits::clear_max() {
  if (GetArena() == nullptr && max_ != nullptr) {
    delete max_;
  }
  max_ = nullptr;
}
PtzDescription_Limits::PtzDescription_Limits(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.PtzDescription.Limits)
}
PtzDescription_Limits::PtzDescription_Limits(const PtzDescription_Limits& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_min()) {
    min_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.min_);
  } else {
    min_ = nullptr;
  }
  if (from._internal_has_max()) {
    max_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.max_);
  } else {
    max_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.PtzDescription.Limits)
}

void PtzDescription_Limits::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PtzDescription_Limits_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto.base);
  ::memset(&min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_) -
      reinterpret_cast<char*>(&min_)) + sizeof(max_));
}

PtzDescription_Limits::~PtzDescription_Limits() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.PtzDescription.Limits)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PtzDescription_Limits::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete min_;
  if (this != internal_default_instance()) delete max_;
}

void PtzDescription_Limits::ArenaDtor(void* object) {
  PtzDescription_Limits* _this = reinterpret_cast< PtzDescription_Limits* >(object);
  (void)_this;
}
void PtzDescription_Limits::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PtzDescription_Limits::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PtzDescription_Limits& PtzDescription_Limits::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PtzDescription_Limits_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto.base);
  return *internal_default_instance();
}


void PtzDescription_Limits::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.PtzDescription.Limits)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && min_ != nullptr) {
    delete min_;
  }
  min_ = nullptr;
  if (GetArena() == nullptr && max_ != nullptr) {
    delete max_;
  }
  max_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PtzDescription_Limits::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.FloatValue min = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_min(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_max(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PtzDescription_Limits::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.PtzDescription.Limits)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.FloatValue min = 1;
  if (this->has_min()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::min(this), target, stream);
  }

  // .google.protobuf.FloatValue max = 2;
  if (this->has_max()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::max(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.PtzDescription.Limits)
  return target;
}

size_t PtzDescription_Limits::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.PtzDescription.Limits)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.FloatValue min = 1;
  if (this->has_min()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *min_);
  }

  // .google.protobuf.FloatValue max = 2;
  if (this->has_max()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *max_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PtzDescription_Limits::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.PtzDescription.Limits)
  GOOGLE_DCHECK_NE(&from, this);
  const PtzDescription_Limits* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PtzDescription_Limits>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.PtzDescription.Limits)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.PtzDescription.Limits)
    MergeFrom(*source);
  }
}

void PtzDescription_Limits::MergeFrom(const PtzDescription_Limits& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.PtzDescription.Limits)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_min()) {
    _internal_mutable_min()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_min());
  }
  if (from.has_max()) {
    _internal_mutable_max()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_max());
  }
}

void PtzDescription_Limits::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.PtzDescription.Limits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PtzDescription_Limits::CopyFrom(const PtzDescription_Limits& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.PtzDescription.Limits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PtzDescription_Limits::IsInitialized() const {
  return true;
}

void PtzDescription_Limits::InternalSwap(PtzDescription_Limits* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PtzDescription_Limits, max_)
      + sizeof(PtzDescription_Limits::max_)
      - PROTOBUF_FIELD_OFFSET(PtzDescription_Limits, min_)>(
          reinterpret_cast<char*>(&min_),
          reinterpret_cast<char*>(&other->min_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PtzDescription_Limits::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PtzDescription::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_PtzDescription_default_instance_._instance.get_mutable()->pan_limit_ = const_cast< ::bosdyn::api::spot_cam::PtzDescription_Limits*>(
      ::bosdyn::api::spot_cam::PtzDescription_Limits::internal_default_instance());
  ::bosdyn::api::spot_cam::_PtzDescription_default_instance_._instance.get_mutable()->tilt_limit_ = const_cast< ::bosdyn::api::spot_cam::PtzDescription_Limits*>(
      ::bosdyn::api::spot_cam::PtzDescription_Limits::internal_default_instance());
  ::bosdyn::api::spot_cam::_PtzDescription_default_instance_._instance.get_mutable()->zoom_limit_ = const_cast< ::bosdyn::api::spot_cam::PtzDescription_Limits*>(
      ::bosdyn::api::spot_cam::PtzDescription_Limits::internal_default_instance());
}
class PtzDescription::_Internal {
 public:
  static const ::bosdyn::api::spot_cam::PtzDescription_Limits& pan_limit(const PtzDescription* msg);
  static const ::bosdyn::api::spot_cam::PtzDescription_Limits& tilt_limit(const PtzDescription* msg);
  static const ::bosdyn::api::spot_cam::PtzDescription_Limits& zoom_limit(const PtzDescription* msg);
};

const ::bosdyn::api::spot_cam::PtzDescription_Limits&
PtzDescription::_Internal::pan_limit(const PtzDescription* msg) {
  return *msg->pan_limit_;
}
const ::bosdyn::api::spot_cam::PtzDescription_Limits&
PtzDescription::_Internal::tilt_limit(const PtzDescription* msg) {
  return *msg->tilt_limit_;
}
const ::bosdyn::api::spot_cam::PtzDescription_Limits&
PtzDescription::_Internal::zoom_limit(const PtzDescription* msg) {
  return *msg->zoom_limit_;
}
PtzDescription::PtzDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.PtzDescription)
}
PtzDescription::PtzDescription(const PtzDescription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_pan_limit()) {
    pan_limit_ = new ::bosdyn::api::spot_cam::PtzDescription_Limits(*from.pan_limit_);
  } else {
    pan_limit_ = nullptr;
  }
  if (from._internal_has_tilt_limit()) {
    tilt_limit_ = new ::bosdyn::api::spot_cam::PtzDescription_Limits(*from.tilt_limit_);
  } else {
    tilt_limit_ = nullptr;
  }
  if (from._internal_has_zoom_limit()) {
    zoom_limit_ = new ::bosdyn::api::spot_cam::PtzDescription_Limits(*from.zoom_limit_);
  } else {
    zoom_limit_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.PtzDescription)
}

void PtzDescription::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PtzDescription_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pan_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zoom_limit_) -
      reinterpret_cast<char*>(&pan_limit_)) + sizeof(zoom_limit_));
}

PtzDescription::~PtzDescription() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.PtzDescription)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PtzDescription::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pan_limit_;
  if (this != internal_default_instance()) delete tilt_limit_;
  if (this != internal_default_instance()) delete zoom_limit_;
}

void PtzDescription::ArenaDtor(void* object) {
  PtzDescription* _this = reinterpret_cast< PtzDescription* >(object);
  (void)_this;
}
void PtzDescription::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PtzDescription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PtzDescription& PtzDescription::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PtzDescription_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto.base);
  return *internal_default_instance();
}


void PtzDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.PtzDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && pan_limit_ != nullptr) {
    delete pan_limit_;
  }
  pan_limit_ = nullptr;
  if (GetArena() == nullptr && tilt_limit_ != nullptr) {
    delete tilt_limit_;
  }
  tilt_limit_ = nullptr;
  if (GetArena() == nullptr && zoom_limit_ != nullptr) {
    delete zoom_limit_;
  }
  zoom_limit_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PtzDescription::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.spot_cam.PtzDescription.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.spot_cam.PtzDescription.Limits pan_limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pan_limit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.spot_cam.PtzDescription.Limits tilt_limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tilt_limit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.spot_cam.PtzDescription.Limits zoom_limit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_zoom_limit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PtzDescription::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.PtzDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.spot_cam.PtzDescription.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .bosdyn.api.spot_cam.PtzDescription.Limits pan_limit = 2;
  if (this->has_pan_limit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pan_limit(this), target, stream);
  }

  // .bosdyn.api.spot_cam.PtzDescription.Limits tilt_limit = 3;
  if (this->has_tilt_limit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::tilt_limit(this), target, stream);
  }

  // .bosdyn.api.spot_cam.PtzDescription.Limits zoom_limit = 4;
  if (this->has_zoom_limit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::zoom_limit(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.PtzDescription)
  return target;
}

size_t PtzDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.PtzDescription)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .bosdyn.api.spot_cam.PtzDescription.Limits pan_limit = 2;
  if (this->has_pan_limit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pan_limit_);
  }

  // .bosdyn.api.spot_cam.PtzDescription.Limits tilt_limit = 3;
  if (this->has_tilt_limit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tilt_limit_);
  }

  // .bosdyn.api.spot_cam.PtzDescription.Limits zoom_limit = 4;
  if (this->has_zoom_limit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *zoom_limit_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PtzDescription::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.PtzDescription)
  GOOGLE_DCHECK_NE(&from, this);
  const PtzDescription* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PtzDescription>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.PtzDescription)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.PtzDescription)
    MergeFrom(*source);
  }
}

void PtzDescription::MergeFrom(const PtzDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.PtzDescription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_pan_limit()) {
    _internal_mutable_pan_limit()->::bosdyn::api::spot_cam::PtzDescription_Limits::MergeFrom(from._internal_pan_limit());
  }
  if (from.has_tilt_limit()) {
    _internal_mutable_tilt_limit()->::bosdyn::api::spot_cam::PtzDescription_Limits::MergeFrom(from._internal_tilt_limit());
  }
  if (from.has_zoom_limit()) {
    _internal_mutable_zoom_limit()->::bosdyn::api::spot_cam::PtzDescription_Limits::MergeFrom(from._internal_zoom_limit());
  }
}

void PtzDescription::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.PtzDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PtzDescription::CopyFrom(const PtzDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.PtzDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PtzDescription::IsInitialized() const {
  return true;
}

void PtzDescription::InternalSwap(PtzDescription* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PtzDescription, zoom_limit_)
      + sizeof(PtzDescription::zoom_limit_)
      - PROTOBUF_FIELD_OFFSET(PtzDescription, pan_limit_)>(
          reinterpret_cast<char*>(&pan_limit_),
          reinterpret_cast<char*>(&other->pan_limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PtzDescription::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PtzPosition::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_PtzPosition_default_instance_._instance.get_mutable()->ptz_ = const_cast< ::bosdyn::api::spot_cam::PtzDescription*>(
      ::bosdyn::api::spot_cam::PtzDescription::internal_default_instance());
  ::bosdyn::api::spot_cam::_PtzPosition_default_instance_._instance.get_mutable()->pan_ = const_cast< PROTOBUF_NAMESPACE_ID::FloatValue*>(
      PROTOBUF_NAMESPACE_ID::FloatValue::internal_default_instance());
  ::bosdyn::api::spot_cam::_PtzPosition_default_instance_._instance.get_mutable()->tilt_ = const_cast< PROTOBUF_NAMESPACE_ID::FloatValue*>(
      PROTOBUF_NAMESPACE_ID::FloatValue::internal_default_instance());
  ::bosdyn::api::spot_cam::_PtzPosition_default_instance_._instance.get_mutable()->zoom_ = const_cast< PROTOBUF_NAMESPACE_ID::FloatValue*>(
      PROTOBUF_NAMESPACE_ID::FloatValue::internal_default_instance());
}
class PtzPosition::_Internal {
 public:
  static const ::bosdyn::api::spot_cam::PtzDescription& ptz(const PtzPosition* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& pan(const PtzPosition* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& tilt(const PtzPosition* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& zoom(const PtzPosition* msg);
};

const ::bosdyn::api::spot_cam::PtzDescription&
PtzPosition::_Internal::ptz(const PtzPosition* msg) {
  return *msg->ptz_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
PtzPosition::_Internal::pan(const PtzPosition* msg) {
  return *msg->pan_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
PtzPosition::_Internal::tilt(const PtzPosition* msg) {
  return *msg->tilt_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
PtzPosition::_Internal::zoom(const PtzPosition* msg) {
  return *msg->zoom_;
}
void PtzPosition::clear_pan() {
  if (GetArena() == nullptr && pan_ != nullptr) {
    delete pan_;
  }
  pan_ = nullptr;
}
void PtzPosition::clear_tilt() {
  if (GetArena() == nullptr && tilt_ != nullptr) {
    delete tilt_;
  }
  tilt_ = nullptr;
}
void PtzPosition::clear_zoom() {
  if (GetArena() == nullptr && zoom_ != nullptr) {
    delete zoom_;
  }
  zoom_ = nullptr;
}
PtzPosition::PtzPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.PtzPosition)
}
PtzPosition::PtzPosition(const PtzPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ptz()) {
    ptz_ = new ::bosdyn::api::spot_cam::PtzDescription(*from.ptz_);
  } else {
    ptz_ = nullptr;
  }
  if (from._internal_has_pan()) {
    pan_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.pan_);
  } else {
    pan_ = nullptr;
  }
  if (from._internal_has_tilt()) {
    tilt_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.tilt_);
  } else {
    tilt_ = nullptr;
  }
  if (from._internal_has_zoom()) {
    zoom_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.zoom_);
  } else {
    zoom_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.PtzPosition)
}

void PtzPosition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PtzPosition_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto.base);
  ::memset(&ptz_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zoom_) -
      reinterpret_cast<char*>(&ptz_)) + sizeof(zoom_));
}

PtzPosition::~PtzPosition() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.PtzPosition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PtzPosition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ptz_;
  if (this != internal_default_instance()) delete pan_;
  if (this != internal_default_instance()) delete tilt_;
  if (this != internal_default_instance()) delete zoom_;
}

void PtzPosition::ArenaDtor(void* object) {
  PtzPosition* _this = reinterpret_cast< PtzPosition* >(object);
  (void)_this;
}
void PtzPosition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PtzPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PtzPosition& PtzPosition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PtzPosition_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto.base);
  return *internal_default_instance();
}


void PtzPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.PtzPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && ptz_ != nullptr) {
    delete ptz_;
  }
  ptz_ = nullptr;
  if (GetArena() == nullptr && pan_ != nullptr) {
    delete pan_;
  }
  pan_ = nullptr;
  if (GetArena() == nullptr && tilt_ != nullptr) {
    delete tilt_;
  }
  tilt_ = nullptr;
  if (GetArena() == nullptr && zoom_ != nullptr) {
    delete zoom_;
  }
  zoom_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PtzPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.spot_cam.PtzDescription ptz = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ptz(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue pan = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pan(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue tilt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tilt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue zoom = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_zoom(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PtzPosition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.PtzPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.spot_cam.PtzDescription ptz = 2;
  if (this->has_ptz()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ptz(this), target, stream);
  }

  // .google.protobuf.FloatValue pan = 3;
  if (this->has_pan()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pan(this), target, stream);
  }

  // .google.protobuf.FloatValue tilt = 4;
  if (this->has_tilt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::tilt(this), target, stream);
  }

  // .google.protobuf.FloatValue zoom = 5;
  if (this->has_zoom()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::zoom(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.PtzPosition)
  return target;
}

size_t PtzPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.PtzPosition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.spot_cam.PtzDescription ptz = 2;
  if (this->has_ptz()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ptz_);
  }

  // .google.protobuf.FloatValue pan = 3;
  if (this->has_pan()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pan_);
  }

  // .google.protobuf.FloatValue tilt = 4;
  if (this->has_tilt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tilt_);
  }

  // .google.protobuf.FloatValue zoom = 5;
  if (this->has_zoom()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *zoom_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PtzPosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.PtzPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const PtzPosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PtzPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.PtzPosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.PtzPosition)
    MergeFrom(*source);
  }
}

void PtzPosition::MergeFrom(const PtzPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.PtzPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ptz()) {
    _internal_mutable_ptz()->::bosdyn::api::spot_cam::PtzDescription::MergeFrom(from._internal_ptz());
  }
  if (from.has_pan()) {
    _internal_mutable_pan()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_pan());
  }
  if (from.has_tilt()) {
    _internal_mutable_tilt()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_tilt());
  }
  if (from.has_zoom()) {
    _internal_mutable_zoom()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_zoom());
  }
}

void PtzPosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.PtzPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PtzPosition::CopyFrom(const PtzPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.PtzPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PtzPosition::IsInitialized() const {
  return true;
}

void PtzPosition::InternalSwap(PtzPosition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PtzPosition, zoom_)
      + sizeof(PtzPosition::zoom_)
      - PROTOBUF_FIELD_OFFSET(PtzPosition, ptz_)>(
          reinterpret_cast<char*>(&ptz_),
          reinterpret_cast<char*>(&other->ptz_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PtzPosition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PtzVelocity::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_PtzVelocity_default_instance_._instance.get_mutable()->ptz_ = const_cast< ::bosdyn::api::spot_cam::PtzDescription*>(
      ::bosdyn::api::spot_cam::PtzDescription::internal_default_instance());
  ::bosdyn::api::spot_cam::_PtzVelocity_default_instance_._instance.get_mutable()->pan_ = const_cast< PROTOBUF_NAMESPACE_ID::FloatValue*>(
      PROTOBUF_NAMESPACE_ID::FloatValue::internal_default_instance());
  ::bosdyn::api::spot_cam::_PtzVelocity_default_instance_._instance.get_mutable()->tilt_ = const_cast< PROTOBUF_NAMESPACE_ID::FloatValue*>(
      PROTOBUF_NAMESPACE_ID::FloatValue::internal_default_instance());
  ::bosdyn::api::spot_cam::_PtzVelocity_default_instance_._instance.get_mutable()->zoom_ = const_cast< PROTOBUF_NAMESPACE_ID::FloatValue*>(
      PROTOBUF_NAMESPACE_ID::FloatValue::internal_default_instance());
}
class PtzVelocity::_Internal {
 public:
  static const ::bosdyn::api::spot_cam::PtzDescription& ptz(const PtzVelocity* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& pan(const PtzVelocity* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& tilt(const PtzVelocity* msg);
  static const PROTOBUF_NAMESPACE_ID::FloatValue& zoom(const PtzVelocity* msg);
};

const ::bosdyn::api::spot_cam::PtzDescription&
PtzVelocity::_Internal::ptz(const PtzVelocity* msg) {
  return *msg->ptz_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
PtzVelocity::_Internal::pan(const PtzVelocity* msg) {
  return *msg->pan_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
PtzVelocity::_Internal::tilt(const PtzVelocity* msg) {
  return *msg->tilt_;
}
const PROTOBUF_NAMESPACE_ID::FloatValue&
PtzVelocity::_Internal::zoom(const PtzVelocity* msg) {
  return *msg->zoom_;
}
void PtzVelocity::clear_pan() {
  if (GetArena() == nullptr && pan_ != nullptr) {
    delete pan_;
  }
  pan_ = nullptr;
}
void PtzVelocity::clear_tilt() {
  if (GetArena() == nullptr && tilt_ != nullptr) {
    delete tilt_;
  }
  tilt_ = nullptr;
}
void PtzVelocity::clear_zoom() {
  if (GetArena() == nullptr && zoom_ != nullptr) {
    delete zoom_;
  }
  zoom_ = nullptr;
}
PtzVelocity::PtzVelocity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.PtzVelocity)
}
PtzVelocity::PtzVelocity(const PtzVelocity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ptz()) {
    ptz_ = new ::bosdyn::api::spot_cam::PtzDescription(*from.ptz_);
  } else {
    ptz_ = nullptr;
  }
  if (from._internal_has_pan()) {
    pan_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.pan_);
  } else {
    pan_ = nullptr;
  }
  if (from._internal_has_tilt()) {
    tilt_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.tilt_);
  } else {
    tilt_ = nullptr;
  }
  if (from._internal_has_zoom()) {
    zoom_ = new PROTOBUF_NAMESPACE_ID::FloatValue(*from.zoom_);
  } else {
    zoom_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.PtzVelocity)
}

void PtzVelocity::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PtzVelocity_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto.base);
  ::memset(&ptz_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zoom_) -
      reinterpret_cast<char*>(&ptz_)) + sizeof(zoom_));
}

PtzVelocity::~PtzVelocity() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.PtzVelocity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PtzVelocity::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ptz_;
  if (this != internal_default_instance()) delete pan_;
  if (this != internal_default_instance()) delete tilt_;
  if (this != internal_default_instance()) delete zoom_;
}

void PtzVelocity::ArenaDtor(void* object) {
  PtzVelocity* _this = reinterpret_cast< PtzVelocity* >(object);
  (void)_this;
}
void PtzVelocity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PtzVelocity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PtzVelocity& PtzVelocity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PtzVelocity_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto.base);
  return *internal_default_instance();
}


void PtzVelocity::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.PtzVelocity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && ptz_ != nullptr) {
    delete ptz_;
  }
  ptz_ = nullptr;
  if (GetArena() == nullptr && pan_ != nullptr) {
    delete pan_;
  }
  pan_ = nullptr;
  if (GetArena() == nullptr && tilt_ != nullptr) {
    delete tilt_;
  }
  tilt_ = nullptr;
  if (GetArena() == nullptr && zoom_ != nullptr) {
    delete zoom_;
  }
  zoom_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PtzVelocity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.spot_cam.PtzDescription ptz = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ptz(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue pan = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pan(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue tilt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tilt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FloatValue zoom = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_zoom(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PtzVelocity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.PtzVelocity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.spot_cam.PtzDescription ptz = 2;
  if (this->has_ptz()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ptz(this), target, stream);
  }

  // .google.protobuf.FloatValue pan = 3;
  if (this->has_pan()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pan(this), target, stream);
  }

  // .google.protobuf.FloatValue tilt = 4;
  if (this->has_tilt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::tilt(this), target, stream);
  }

  // .google.protobuf.FloatValue zoom = 5;
  if (this->has_zoom()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::zoom(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.PtzVelocity)
  return target;
}

size_t PtzVelocity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.PtzVelocity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.spot_cam.PtzDescription ptz = 2;
  if (this->has_ptz()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ptz_);
  }

  // .google.protobuf.FloatValue pan = 3;
  if (this->has_pan()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pan_);
  }

  // .google.protobuf.FloatValue tilt = 4;
  if (this->has_tilt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tilt_);
  }

  // .google.protobuf.FloatValue zoom = 5;
  if (this->has_zoom()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *zoom_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PtzVelocity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.PtzVelocity)
  GOOGLE_DCHECK_NE(&from, this);
  const PtzVelocity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PtzVelocity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.PtzVelocity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.PtzVelocity)
    MergeFrom(*source);
  }
}

void PtzVelocity::MergeFrom(const PtzVelocity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.PtzVelocity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ptz()) {
    _internal_mutable_ptz()->::bosdyn::api::spot_cam::PtzDescription::MergeFrom(from._internal_ptz());
  }
  if (from.has_pan()) {
    _internal_mutable_pan()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_pan());
  }
  if (from.has_tilt()) {
    _internal_mutable_tilt()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_tilt());
  }
  if (from.has_zoom()) {
    _internal_mutable_zoom()->PROTOBUF_NAMESPACE_ID::FloatValue::MergeFrom(from._internal_zoom());
  }
}

void PtzVelocity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.PtzVelocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PtzVelocity::CopyFrom(const PtzVelocity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.PtzVelocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PtzVelocity::IsInitialized() const {
  return true;
}

void PtzVelocity::InternalSwap(PtzVelocity* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PtzVelocity, zoom_)
      + sizeof(PtzVelocity::zoom_)
      - PROTOBUF_FIELD_OFFSET(PtzVelocity, ptz_)>(
          reinterpret_cast<char*>(&ptz_),
          reinterpret_cast<char*>(&other->ptz_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PtzVelocity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetPtzPositionRequest::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_GetPtzPositionRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
  ::bosdyn::api::spot_cam::_GetPtzPositionRequest_default_instance_._instance.get_mutable()->ptz_ = const_cast< ::bosdyn::api::spot_cam::PtzDescription*>(
      ::bosdyn::api::spot_cam::PtzDescription::internal_default_instance());
}
class GetPtzPositionRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const GetPtzPositionRequest* msg);
  static const ::bosdyn::api::spot_cam::PtzDescription& ptz(const GetPtzPositionRequest* msg);
};

const ::bosdyn::api::RequestHeader&
GetPtzPositionRequest::_Internal::header(const GetPtzPositionRequest* msg) {
  return *msg->header_;
}
const ::bosdyn::api::spot_cam::PtzDescription&
GetPtzPositionRequest::_Internal::ptz(const GetPtzPositionRequest* msg) {
  return *msg->ptz_;
}
void GetPtzPositionRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
GetPtzPositionRequest::GetPtzPositionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.GetPtzPositionRequest)
}
GetPtzPositionRequest::GetPtzPositionRequest(const GetPtzPositionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_ptz()) {
    ptz_ = new ::bosdyn::api::spot_cam::PtzDescription(*from.ptz_);
  } else {
    ptz_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.GetPtzPositionRequest)
}

void GetPtzPositionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetPtzPositionRequest_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ptz_) -
      reinterpret_cast<char*>(&header_)) + sizeof(ptz_));
}

GetPtzPositionRequest::~GetPtzPositionRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.GetPtzPositionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetPtzPositionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete ptz_;
}

void GetPtzPositionRequest::ArenaDtor(void* object) {
  GetPtzPositionRequest* _this = reinterpret_cast< GetPtzPositionRequest* >(object);
  (void)_this;
}
void GetPtzPositionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPtzPositionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPtzPositionRequest& GetPtzPositionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPtzPositionRequest_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto.base);
  return *internal_default_instance();
}


void GetPtzPositionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.GetPtzPositionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && ptz_ != nullptr) {
    delete ptz_;
  }
  ptz_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPtzPositionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.spot_cam.PtzDescription ptz = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ptz(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPtzPositionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.GetPtzPositionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.spot_cam.PtzDescription ptz = 2;
  if (this->has_ptz()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ptz(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.GetPtzPositionRequest)
  return target;
}

size_t GetPtzPositionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.GetPtzPositionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.spot_cam.PtzDescription ptz = 2;
  if (this->has_ptz()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ptz_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPtzPositionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.GetPtzPositionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPtzPositionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPtzPositionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.GetPtzPositionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.GetPtzPositionRequest)
    MergeFrom(*source);
  }
}

void GetPtzPositionRequest::MergeFrom(const GetPtzPositionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.GetPtzPositionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
  if (from.has_ptz()) {
    _internal_mutable_ptz()->::bosdyn::api::spot_cam::PtzDescription::MergeFrom(from._internal_ptz());
  }
}

void GetPtzPositionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.GetPtzPositionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPtzPositionRequest::CopyFrom(const GetPtzPositionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.GetPtzPositionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPtzPositionRequest::IsInitialized() const {
  return true;
}

void GetPtzPositionRequest::InternalSwap(GetPtzPositionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetPtzPositionRequest, ptz_)
      + sizeof(GetPtzPositionRequest::ptz_)
      - PROTOBUF_FIELD_OFFSET(GetPtzPositionRequest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPtzPositionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetPtzPositionResponse::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_GetPtzPositionResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
  ::bosdyn::api::spot_cam::_GetPtzPositionResponse_default_instance_._instance.get_mutable()->position_ = const_cast< ::bosdyn::api::spot_cam::PtzPosition*>(
      ::bosdyn::api::spot_cam::PtzPosition::internal_default_instance());
}
class GetPtzPositionResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const GetPtzPositionResponse* msg);
  static const ::bosdyn::api::spot_cam::PtzPosition& position(const GetPtzPositionResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
GetPtzPositionResponse::_Internal::header(const GetPtzPositionResponse* msg) {
  return *msg->header_;
}
const ::bosdyn::api::spot_cam::PtzPosition&
GetPtzPositionResponse::_Internal::position(const GetPtzPositionResponse* msg) {
  return *msg->position_;
}
void GetPtzPositionResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
GetPtzPositionResponse::GetPtzPositionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.GetPtzPositionResponse)
}
GetPtzPositionResponse::GetPtzPositionResponse(const GetPtzPositionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_position()) {
    position_ = new ::bosdyn::api::spot_cam::PtzPosition(*from.position_);
  } else {
    position_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.GetPtzPositionResponse)
}

void GetPtzPositionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetPtzPositionResponse_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_) -
      reinterpret_cast<char*>(&header_)) + sizeof(position_));
}

GetPtzPositionResponse::~GetPtzPositionResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.GetPtzPositionResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetPtzPositionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete position_;
}

void GetPtzPositionResponse::ArenaDtor(void* object) {
  GetPtzPositionResponse* _this = reinterpret_cast< GetPtzPositionResponse* >(object);
  (void)_this;
}
void GetPtzPositionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPtzPositionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPtzPositionResponse& GetPtzPositionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPtzPositionResponse_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto.base);
  return *internal_default_instance();
}


void GetPtzPositionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.GetPtzPositionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPtzPositionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.spot_cam.PtzPosition position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPtzPositionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.GetPtzPositionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.spot_cam.PtzPosition position = 2;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.GetPtzPositionResponse)
  return target;
}

size_t GetPtzPositionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.GetPtzPositionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.spot_cam.PtzPosition position = 2;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPtzPositionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.GetPtzPositionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPtzPositionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPtzPositionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.GetPtzPositionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.GetPtzPositionResponse)
    MergeFrom(*source);
  }
}

void GetPtzPositionResponse::MergeFrom(const GetPtzPositionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.GetPtzPositionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.has_position()) {
    _internal_mutable_position()->::bosdyn::api::spot_cam::PtzPosition::MergeFrom(from._internal_position());
  }
}

void GetPtzPositionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.GetPtzPositionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPtzPositionResponse::CopyFrom(const GetPtzPositionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.GetPtzPositionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPtzPositionResponse::IsInitialized() const {
  return true;
}

void GetPtzPositionResponse::InternalSwap(GetPtzPositionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetPtzPositionResponse, position_)
      + sizeof(GetPtzPositionResponse::position_)
      - PROTOBUF_FIELD_OFFSET(GetPtzPositionResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPtzPositionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetPtzVelocityRequest::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_GetPtzVelocityRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
  ::bosdyn::api::spot_cam::_GetPtzVelocityRequest_default_instance_._instance.get_mutable()->ptz_ = const_cast< ::bosdyn::api::spot_cam::PtzDescription*>(
      ::bosdyn::api::spot_cam::PtzDescription::internal_default_instance());
}
class GetPtzVelocityRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const GetPtzVelocityRequest* msg);
  static const ::bosdyn::api::spot_cam::PtzDescription& ptz(const GetPtzVelocityRequest* msg);
};

const ::bosdyn::api::RequestHeader&
GetPtzVelocityRequest::_Internal::header(const GetPtzVelocityRequest* msg) {
  return *msg->header_;
}
const ::bosdyn::api::spot_cam::PtzDescription&
GetPtzVelocityRequest::_Internal::ptz(const GetPtzVelocityRequest* msg) {
  return *msg->ptz_;
}
void GetPtzVelocityRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
GetPtzVelocityRequest::GetPtzVelocityRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.GetPtzVelocityRequest)
}
GetPtzVelocityRequest::GetPtzVelocityRequest(const GetPtzVelocityRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_ptz()) {
    ptz_ = new ::bosdyn::api::spot_cam::PtzDescription(*from.ptz_);
  } else {
    ptz_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.GetPtzVelocityRequest)
}

void GetPtzVelocityRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetPtzVelocityRequest_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ptz_) -
      reinterpret_cast<char*>(&header_)) + sizeof(ptz_));
}

GetPtzVelocityRequest::~GetPtzVelocityRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.GetPtzVelocityRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetPtzVelocityRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete ptz_;
}

void GetPtzVelocityRequest::ArenaDtor(void* object) {
  GetPtzVelocityRequest* _this = reinterpret_cast< GetPtzVelocityRequest* >(object);
  (void)_this;
}
void GetPtzVelocityRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPtzVelocityRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPtzVelocityRequest& GetPtzVelocityRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPtzVelocityRequest_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto.base);
  return *internal_default_instance();
}


void GetPtzVelocityRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.GetPtzVelocityRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && ptz_ != nullptr) {
    delete ptz_;
  }
  ptz_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPtzVelocityRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.spot_cam.PtzDescription ptz = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ptz(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPtzVelocityRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.GetPtzVelocityRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.spot_cam.PtzDescription ptz = 2;
  if (this->has_ptz()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ptz(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.GetPtzVelocityRequest)
  return target;
}

size_t GetPtzVelocityRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.GetPtzVelocityRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.spot_cam.PtzDescription ptz = 2;
  if (this->has_ptz()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ptz_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPtzVelocityRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.GetPtzVelocityRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPtzVelocityRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPtzVelocityRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.GetPtzVelocityRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.GetPtzVelocityRequest)
    MergeFrom(*source);
  }
}

void GetPtzVelocityRequest::MergeFrom(const GetPtzVelocityRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.GetPtzVelocityRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
  if (from.has_ptz()) {
    _internal_mutable_ptz()->::bosdyn::api::spot_cam::PtzDescription::MergeFrom(from._internal_ptz());
  }
}

void GetPtzVelocityRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.GetPtzVelocityRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPtzVelocityRequest::CopyFrom(const GetPtzVelocityRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.GetPtzVelocityRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPtzVelocityRequest::IsInitialized() const {
  return true;
}

void GetPtzVelocityRequest::InternalSwap(GetPtzVelocityRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetPtzVelocityRequest, ptz_)
      + sizeof(GetPtzVelocityRequest::ptz_)
      - PROTOBUF_FIELD_OFFSET(GetPtzVelocityRequest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPtzVelocityRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetPtzVelocityResponse::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_GetPtzVelocityResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
  ::bosdyn::api::spot_cam::_GetPtzVelocityResponse_default_instance_._instance.get_mutable()->velocity_ = const_cast< ::bosdyn::api::spot_cam::PtzVelocity*>(
      ::bosdyn::api::spot_cam::PtzVelocity::internal_default_instance());
}
class GetPtzVelocityResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const GetPtzVelocityResponse* msg);
  static const ::bosdyn::api::spot_cam::PtzVelocity& velocity(const GetPtzVelocityResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
GetPtzVelocityResponse::_Internal::header(const GetPtzVelocityResponse* msg) {
  return *msg->header_;
}
const ::bosdyn::api::spot_cam::PtzVelocity&
GetPtzVelocityResponse::_Internal::velocity(const GetPtzVelocityResponse* msg) {
  return *msg->velocity_;
}
void GetPtzVelocityResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
GetPtzVelocityResponse::GetPtzVelocityResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.GetPtzVelocityResponse)
}
GetPtzVelocityResponse::GetPtzVelocityResponse(const GetPtzVelocityResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_velocity()) {
    velocity_ = new ::bosdyn::api::spot_cam::PtzVelocity(*from.velocity_);
  } else {
    velocity_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.GetPtzVelocityResponse)
}

void GetPtzVelocityResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetPtzVelocityResponse_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&velocity_) -
      reinterpret_cast<char*>(&header_)) + sizeof(velocity_));
}

GetPtzVelocityResponse::~GetPtzVelocityResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.GetPtzVelocityResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetPtzVelocityResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete velocity_;
}

void GetPtzVelocityResponse::ArenaDtor(void* object) {
  GetPtzVelocityResponse* _this = reinterpret_cast< GetPtzVelocityResponse* >(object);
  (void)_this;
}
void GetPtzVelocityResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPtzVelocityResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPtzVelocityResponse& GetPtzVelocityResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPtzVelocityResponse_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto.base);
  return *internal_default_instance();
}


void GetPtzVelocityResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.GetPtzVelocityResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPtzVelocityResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.spot_cam.PtzVelocity velocity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPtzVelocityResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.GetPtzVelocityResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.spot_cam.PtzVelocity velocity = 2;
  if (this->has_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::velocity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.GetPtzVelocityResponse)
  return target;
}

size_t GetPtzVelocityResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.GetPtzVelocityResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.spot_cam.PtzVelocity velocity = 2;
  if (this->has_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *velocity_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPtzVelocityResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.GetPtzVelocityResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPtzVelocityResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPtzVelocityResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.GetPtzVelocityResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.GetPtzVelocityResponse)
    MergeFrom(*source);
  }
}

void GetPtzVelocityResponse::MergeFrom(const GetPtzVelocityResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.GetPtzVelocityResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.has_velocity()) {
    _internal_mutable_velocity()->::bosdyn::api::spot_cam::PtzVelocity::MergeFrom(from._internal_velocity());
  }
}

void GetPtzVelocityResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.GetPtzVelocityResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPtzVelocityResponse::CopyFrom(const GetPtzVelocityResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.GetPtzVelocityResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPtzVelocityResponse::IsInitialized() const {
  return true;
}

void GetPtzVelocityResponse::InternalSwap(GetPtzVelocityResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetPtzVelocityResponse, velocity_)
      + sizeof(GetPtzVelocityResponse::velocity_)
      - PROTOBUF_FIELD_OFFSET(GetPtzVelocityResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPtzVelocityResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListPtzRequest::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_ListPtzRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
}
class ListPtzRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const ListPtzRequest* msg);
};

const ::bosdyn::api::RequestHeader&
ListPtzRequest::_Internal::header(const ListPtzRequest* msg) {
  return *msg->header_;
}
void ListPtzRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
ListPtzRequest::ListPtzRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.ListPtzRequest)
}
ListPtzRequest::ListPtzRequest(const ListPtzRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.ListPtzRequest)
}

void ListPtzRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListPtzRequest_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto.base);
  header_ = nullptr;
}

ListPtzRequest::~ListPtzRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.ListPtzRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListPtzRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void ListPtzRequest::ArenaDtor(void* object) {
  ListPtzRequest* _this = reinterpret_cast< ListPtzRequest* >(object);
  (void)_this;
}
void ListPtzRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListPtzRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListPtzRequest& ListPtzRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListPtzRequest_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto.base);
  return *internal_default_instance();
}


void ListPtzRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.ListPtzRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListPtzRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListPtzRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.ListPtzRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.ListPtzRequest)
  return target;
}

size_t ListPtzRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.ListPtzRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListPtzRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.ListPtzRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListPtzRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListPtzRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.ListPtzRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.ListPtzRequest)
    MergeFrom(*source);
  }
}

void ListPtzRequest::MergeFrom(const ListPtzRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.ListPtzRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
}

void ListPtzRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.ListPtzRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListPtzRequest::CopyFrom(const ListPtzRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.ListPtzRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPtzRequest::IsInitialized() const {
  return true;
}

void ListPtzRequest::InternalSwap(ListPtzRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPtzRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListPtzResponse::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_ListPtzResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
}
class ListPtzResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const ListPtzResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
ListPtzResponse::_Internal::header(const ListPtzResponse* msg) {
  return *msg->header_;
}
void ListPtzResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
ListPtzResponse::ListPtzResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ptzs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.ListPtzResponse)
}
ListPtzResponse::ListPtzResponse(const ListPtzResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ptzs_(from.ptzs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.ListPtzResponse)
}

void ListPtzResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListPtzResponse_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto.base);
  header_ = nullptr;
}

ListPtzResponse::~ListPtzResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.ListPtzResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListPtzResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void ListPtzResponse::ArenaDtor(void* object) {
  ListPtzResponse* _this = reinterpret_cast< ListPtzResponse* >(object);
  (void)_this;
}
void ListPtzResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListPtzResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListPtzResponse& ListPtzResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListPtzResponse_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto.base);
  return *internal_default_instance();
}


void ListPtzResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.ListPtzResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ptzs_.Clear();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListPtzResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bosdyn.api.spot_cam.PtzDescription ptzs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ptzs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListPtzResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.ListPtzResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .bosdyn.api.spot_cam.PtzDescription ptzs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ptzs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_ptzs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.ListPtzResponse)
  return target;
}

size_t ListPtzResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.ListPtzResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bosdyn.api.spot_cam.PtzDescription ptzs = 2;
  total_size += 1UL * this->_internal_ptzs_size();
  for (const auto& msg : this->ptzs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListPtzResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.ListPtzResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListPtzResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListPtzResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.ListPtzResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.ListPtzResponse)
    MergeFrom(*source);
  }
}

void ListPtzResponse::MergeFrom(const ListPtzResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.ListPtzResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ptzs_.MergeFrom(from.ptzs_);
  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
}

void ListPtzResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.ListPtzResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListPtzResponse::CopyFrom(const ListPtzResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.ListPtzResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPtzResponse::IsInitialized() const {
  return true;
}

void ListPtzResponse::InternalSwap(ListPtzResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ptzs_.InternalSwap(&other->ptzs_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPtzResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetPtzPositionRequest::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_SetPtzPositionRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
  ::bosdyn::api::spot_cam::_SetPtzPositionRequest_default_instance_._instance.get_mutable()->position_ = const_cast< ::bosdyn::api::spot_cam::PtzPosition*>(
      ::bosdyn::api::spot_cam::PtzPosition::internal_default_instance());
}
class SetPtzPositionRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const SetPtzPositionRequest* msg);
  static const ::bosdyn::api::spot_cam::PtzPosition& position(const SetPtzPositionRequest* msg);
};

const ::bosdyn::api::RequestHeader&
SetPtzPositionRequest::_Internal::header(const SetPtzPositionRequest* msg) {
  return *msg->header_;
}
const ::bosdyn::api::spot_cam::PtzPosition&
SetPtzPositionRequest::_Internal::position(const SetPtzPositionRequest* msg) {
  return *msg->position_;
}
void SetPtzPositionRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
SetPtzPositionRequest::SetPtzPositionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.SetPtzPositionRequest)
}
SetPtzPositionRequest::SetPtzPositionRequest(const SetPtzPositionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_position()) {
    position_ = new ::bosdyn::api::spot_cam::PtzPosition(*from.position_);
  } else {
    position_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.SetPtzPositionRequest)
}

void SetPtzPositionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetPtzPositionRequest_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_) -
      reinterpret_cast<char*>(&header_)) + sizeof(position_));
}

SetPtzPositionRequest::~SetPtzPositionRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.SetPtzPositionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetPtzPositionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete position_;
}

void SetPtzPositionRequest::ArenaDtor(void* object) {
  SetPtzPositionRequest* _this = reinterpret_cast< SetPtzPositionRequest* >(object);
  (void)_this;
}
void SetPtzPositionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetPtzPositionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetPtzPositionRequest& SetPtzPositionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetPtzPositionRequest_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto.base);
  return *internal_default_instance();
}


void SetPtzPositionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.SetPtzPositionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetPtzPositionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.spot_cam.PtzPosition position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetPtzPositionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.SetPtzPositionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.spot_cam.PtzPosition position = 2;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.SetPtzPositionRequest)
  return target;
}

size_t SetPtzPositionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.SetPtzPositionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.spot_cam.PtzPosition position = 2;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetPtzPositionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.SetPtzPositionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetPtzPositionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetPtzPositionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.SetPtzPositionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.SetPtzPositionRequest)
    MergeFrom(*source);
  }
}

void SetPtzPositionRequest::MergeFrom(const SetPtzPositionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.SetPtzPositionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
  if (from.has_position()) {
    _internal_mutable_position()->::bosdyn::api::spot_cam::PtzPosition::MergeFrom(from._internal_position());
  }
}

void SetPtzPositionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.SetPtzPositionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPtzPositionRequest::CopyFrom(const SetPtzPositionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.SetPtzPositionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPtzPositionRequest::IsInitialized() const {
  return true;
}

void SetPtzPositionRequest::InternalSwap(SetPtzPositionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetPtzPositionRequest, position_)
      + sizeof(SetPtzPositionRequest::position_)
      - PROTOBUF_FIELD_OFFSET(SetPtzPositionRequest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetPtzPositionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetPtzPositionResponse::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_SetPtzPositionResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
  ::bosdyn::api::spot_cam::_SetPtzPositionResponse_default_instance_._instance.get_mutable()->position_ = const_cast< ::bosdyn::api::spot_cam::PtzPosition*>(
      ::bosdyn::api::spot_cam::PtzPosition::internal_default_instance());
}
class SetPtzPositionResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const SetPtzPositionResponse* msg);
  static const ::bosdyn::api::spot_cam::PtzPosition& position(const SetPtzPositionResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
SetPtzPositionResponse::_Internal::header(const SetPtzPositionResponse* msg) {
  return *msg->header_;
}
const ::bosdyn::api::spot_cam::PtzPosition&
SetPtzPositionResponse::_Internal::position(const SetPtzPositionResponse* msg) {
  return *msg->position_;
}
void SetPtzPositionResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
SetPtzPositionResponse::SetPtzPositionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.SetPtzPositionResponse)
}
SetPtzPositionResponse::SetPtzPositionResponse(const SetPtzPositionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_position()) {
    position_ = new ::bosdyn::api::spot_cam::PtzPosition(*from.position_);
  } else {
    position_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.SetPtzPositionResponse)
}

void SetPtzPositionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetPtzPositionResponse_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_) -
      reinterpret_cast<char*>(&header_)) + sizeof(position_));
}

SetPtzPositionResponse::~SetPtzPositionResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.SetPtzPositionResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetPtzPositionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete position_;
}

void SetPtzPositionResponse::ArenaDtor(void* object) {
  SetPtzPositionResponse* _this = reinterpret_cast< SetPtzPositionResponse* >(object);
  (void)_this;
}
void SetPtzPositionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetPtzPositionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetPtzPositionResponse& SetPtzPositionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetPtzPositionResponse_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto.base);
  return *internal_default_instance();
}


void SetPtzPositionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.SetPtzPositionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetPtzPositionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.spot_cam.PtzPosition position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetPtzPositionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.SetPtzPositionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.spot_cam.PtzPosition position = 2;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.SetPtzPositionResponse)
  return target;
}

size_t SetPtzPositionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.SetPtzPositionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.spot_cam.PtzPosition position = 2;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetPtzPositionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.SetPtzPositionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetPtzPositionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetPtzPositionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.SetPtzPositionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.SetPtzPositionResponse)
    MergeFrom(*source);
  }
}

void SetPtzPositionResponse::MergeFrom(const SetPtzPositionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.SetPtzPositionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.has_position()) {
    _internal_mutable_position()->::bosdyn::api::spot_cam::PtzPosition::MergeFrom(from._internal_position());
  }
}

void SetPtzPositionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.SetPtzPositionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPtzPositionResponse::CopyFrom(const SetPtzPositionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.SetPtzPositionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPtzPositionResponse::IsInitialized() const {
  return true;
}

void SetPtzPositionResponse::InternalSwap(SetPtzPositionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetPtzPositionResponse, position_)
      + sizeof(SetPtzPositionResponse::position_)
      - PROTOBUF_FIELD_OFFSET(SetPtzPositionResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetPtzPositionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetPtzVelocityRequest::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_SetPtzVelocityRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
  ::bosdyn::api::spot_cam::_SetPtzVelocityRequest_default_instance_._instance.get_mutable()->velocity_ = const_cast< ::bosdyn::api::spot_cam::PtzVelocity*>(
      ::bosdyn::api::spot_cam::PtzVelocity::internal_default_instance());
}
class SetPtzVelocityRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const SetPtzVelocityRequest* msg);
  static const ::bosdyn::api::spot_cam::PtzVelocity& velocity(const SetPtzVelocityRequest* msg);
};

const ::bosdyn::api::RequestHeader&
SetPtzVelocityRequest::_Internal::header(const SetPtzVelocityRequest* msg) {
  return *msg->header_;
}
const ::bosdyn::api::spot_cam::PtzVelocity&
SetPtzVelocityRequest::_Internal::velocity(const SetPtzVelocityRequest* msg) {
  return *msg->velocity_;
}
void SetPtzVelocityRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
SetPtzVelocityRequest::SetPtzVelocityRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.SetPtzVelocityRequest)
}
SetPtzVelocityRequest::SetPtzVelocityRequest(const SetPtzVelocityRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_velocity()) {
    velocity_ = new ::bosdyn::api::spot_cam::PtzVelocity(*from.velocity_);
  } else {
    velocity_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.SetPtzVelocityRequest)
}

void SetPtzVelocityRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetPtzVelocityRequest_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&velocity_) -
      reinterpret_cast<char*>(&header_)) + sizeof(velocity_));
}

SetPtzVelocityRequest::~SetPtzVelocityRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.SetPtzVelocityRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetPtzVelocityRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete velocity_;
}

void SetPtzVelocityRequest::ArenaDtor(void* object) {
  SetPtzVelocityRequest* _this = reinterpret_cast< SetPtzVelocityRequest* >(object);
  (void)_this;
}
void SetPtzVelocityRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetPtzVelocityRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetPtzVelocityRequest& SetPtzVelocityRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetPtzVelocityRequest_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto.base);
  return *internal_default_instance();
}


void SetPtzVelocityRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.SetPtzVelocityRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetPtzVelocityRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.spot_cam.PtzVelocity velocity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetPtzVelocityRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.SetPtzVelocityRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.spot_cam.PtzVelocity velocity = 2;
  if (this->has_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::velocity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.SetPtzVelocityRequest)
  return target;
}

size_t SetPtzVelocityRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.SetPtzVelocityRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.spot_cam.PtzVelocity velocity = 2;
  if (this->has_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *velocity_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetPtzVelocityRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.SetPtzVelocityRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetPtzVelocityRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetPtzVelocityRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.SetPtzVelocityRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.SetPtzVelocityRequest)
    MergeFrom(*source);
  }
}

void SetPtzVelocityRequest::MergeFrom(const SetPtzVelocityRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.SetPtzVelocityRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
  if (from.has_velocity()) {
    _internal_mutable_velocity()->::bosdyn::api::spot_cam::PtzVelocity::MergeFrom(from._internal_velocity());
  }
}

void SetPtzVelocityRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.SetPtzVelocityRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPtzVelocityRequest::CopyFrom(const SetPtzVelocityRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.SetPtzVelocityRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPtzVelocityRequest::IsInitialized() const {
  return true;
}

void SetPtzVelocityRequest::InternalSwap(SetPtzVelocityRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetPtzVelocityRequest, velocity_)
      + sizeof(SetPtzVelocityRequest::velocity_)
      - PROTOBUF_FIELD_OFFSET(SetPtzVelocityRequest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetPtzVelocityRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetPtzVelocityResponse::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_SetPtzVelocityResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
  ::bosdyn::api::spot_cam::_SetPtzVelocityResponse_default_instance_._instance.get_mutable()->velocity_ = const_cast< ::bosdyn::api::spot_cam::PtzVelocity*>(
      ::bosdyn::api::spot_cam::PtzVelocity::internal_default_instance());
}
class SetPtzVelocityResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const SetPtzVelocityResponse* msg);
  static const ::bosdyn::api::spot_cam::PtzVelocity& velocity(const SetPtzVelocityResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
SetPtzVelocityResponse::_Internal::header(const SetPtzVelocityResponse* msg) {
  return *msg->header_;
}
const ::bosdyn::api::spot_cam::PtzVelocity&
SetPtzVelocityResponse::_Internal::velocity(const SetPtzVelocityResponse* msg) {
  return *msg->velocity_;
}
void SetPtzVelocityResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
SetPtzVelocityResponse::SetPtzVelocityResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.SetPtzVelocityResponse)
}
SetPtzVelocityResponse::SetPtzVelocityResponse(const SetPtzVelocityResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_velocity()) {
    velocity_ = new ::bosdyn::api::spot_cam::PtzVelocity(*from.velocity_);
  } else {
    velocity_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.SetPtzVelocityResponse)
}

void SetPtzVelocityResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetPtzVelocityResponse_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&velocity_) -
      reinterpret_cast<char*>(&header_)) + sizeof(velocity_));
}

SetPtzVelocityResponse::~SetPtzVelocityResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.SetPtzVelocityResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetPtzVelocityResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete velocity_;
}

void SetPtzVelocityResponse::ArenaDtor(void* object) {
  SetPtzVelocityResponse* _this = reinterpret_cast< SetPtzVelocityResponse* >(object);
  (void)_this;
}
void SetPtzVelocityResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetPtzVelocityResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetPtzVelocityResponse& SetPtzVelocityResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetPtzVelocityResponse_bosdyn_2fapi_2fspot_5fcam_2fptz_2eproto.base);
  return *internal_default_instance();
}


void SetPtzVelocityResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.SetPtzVelocityResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetPtzVelocityResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.spot_cam.PtzVelocity velocity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetPtzVelocityResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.SetPtzVelocityResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.spot_cam.PtzVelocity velocity = 2;
  if (this->has_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::velocity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.SetPtzVelocityResponse)
  return target;
}

size_t SetPtzVelocityResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.SetPtzVelocityResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.spot_cam.PtzVelocity velocity = 2;
  if (this->has_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *velocity_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetPtzVelocityResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.SetPtzVelocityResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetPtzVelocityResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetPtzVelocityResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.SetPtzVelocityResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.SetPtzVelocityResponse)
    MergeFrom(*source);
  }
}

void SetPtzVelocityResponse::MergeFrom(const SetPtzVelocityResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.SetPtzVelocityResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.has_velocity()) {
    _internal_mutable_velocity()->::bosdyn::api::spot_cam::PtzVelocity::MergeFrom(from._internal_velocity());
  }
}

void SetPtzVelocityResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.SetPtzVelocityResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPtzVelocityResponse::CopyFrom(const SetPtzVelocityResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.SetPtzVelocityResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPtzVelocityResponse::IsInitialized() const {
  return true;
}

void SetPtzVelocityResponse::InternalSwap(SetPtzVelocityResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetPtzVelocityResponse, velocity_)
      + sizeof(SetPtzVelocityResponse::velocity_)
      - PROTOBUF_FIELD_OFFSET(SetPtzVelocityResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetPtzVelocityResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace spot_cam
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::PtzDescription_Limits* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::PtzDescription_Limits >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::PtzDescription_Limits >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::PtzDescription* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::PtzDescription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::PtzDescription >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::PtzPosition* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::PtzPosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::PtzPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::PtzVelocity* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::PtzVelocity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::PtzVelocity >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::GetPtzPositionRequest* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::GetPtzPositionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::GetPtzPositionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::GetPtzPositionResponse* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::GetPtzPositionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::GetPtzPositionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::GetPtzVelocityRequest* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::GetPtzVelocityRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::GetPtzVelocityRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::GetPtzVelocityResponse* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::GetPtzVelocityResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::GetPtzVelocityResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::ListPtzRequest* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::ListPtzRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::ListPtzRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::ListPtzResponse* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::ListPtzResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::ListPtzResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::SetPtzPositionRequest* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::SetPtzPositionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::SetPtzPositionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::SetPtzPositionResponse* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::SetPtzPositionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::SetPtzPositionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::SetPtzVelocityRequest* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::SetPtzVelocityRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::SetPtzVelocityRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::SetPtzVelocityResponse* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::SetPtzVelocityResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::SetPtzVelocityResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
