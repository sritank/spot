// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/spot_cam/audio.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fspot_5fcam_2faudio_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fspot_5fcam_2faudio_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "bosdyn/api/header.pb.h"
#include "bosdyn/api/data_chunk.pb.h"
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fspot_5fcam_2faudio_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bosdyn_2fapi_2fspot_5fcam_2faudio_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fspot_5fcam_2faudio_2eproto;
namespace bosdyn {
namespace api {
namespace spot_cam {
class DeleteSoundRequest;
class DeleteSoundRequestDefaultTypeInternal;
extern DeleteSoundRequestDefaultTypeInternal _DeleteSoundRequest_default_instance_;
class DeleteSoundResponse;
class DeleteSoundResponseDefaultTypeInternal;
extern DeleteSoundResponseDefaultTypeInternal _DeleteSoundResponse_default_instance_;
class GetVolumeRequest;
class GetVolumeRequestDefaultTypeInternal;
extern GetVolumeRequestDefaultTypeInternal _GetVolumeRequest_default_instance_;
class GetVolumeResponse;
class GetVolumeResponseDefaultTypeInternal;
extern GetVolumeResponseDefaultTypeInternal _GetVolumeResponse_default_instance_;
class ListSoundsRequest;
class ListSoundsRequestDefaultTypeInternal;
extern ListSoundsRequestDefaultTypeInternal _ListSoundsRequest_default_instance_;
class ListSoundsResponse;
class ListSoundsResponseDefaultTypeInternal;
extern ListSoundsResponseDefaultTypeInternal _ListSoundsResponse_default_instance_;
class LoadSoundRequest;
class LoadSoundRequestDefaultTypeInternal;
extern LoadSoundRequestDefaultTypeInternal _LoadSoundRequest_default_instance_;
class LoadSoundResponse;
class LoadSoundResponseDefaultTypeInternal;
extern LoadSoundResponseDefaultTypeInternal _LoadSoundResponse_default_instance_;
class PlaySoundRequest;
class PlaySoundRequestDefaultTypeInternal;
extern PlaySoundRequestDefaultTypeInternal _PlaySoundRequest_default_instance_;
class PlaySoundResponse;
class PlaySoundResponseDefaultTypeInternal;
extern PlaySoundResponseDefaultTypeInternal _PlaySoundResponse_default_instance_;
class SetVolumeRequest;
class SetVolumeRequestDefaultTypeInternal;
extern SetVolumeRequestDefaultTypeInternal _SetVolumeRequest_default_instance_;
class SetVolumeResponse;
class SetVolumeResponseDefaultTypeInternal;
extern SetVolumeResponseDefaultTypeInternal _SetVolumeResponse_default_instance_;
class Sound;
class SoundDefaultTypeInternal;
extern SoundDefaultTypeInternal _Sound_default_instance_;
}  // namespace spot_cam
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> ::bosdyn::api::spot_cam::DeleteSoundRequest* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::DeleteSoundRequest>(Arena*);
template<> ::bosdyn::api::spot_cam::DeleteSoundResponse* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::DeleteSoundResponse>(Arena*);
template<> ::bosdyn::api::spot_cam::GetVolumeRequest* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::GetVolumeRequest>(Arena*);
template<> ::bosdyn::api::spot_cam::GetVolumeResponse* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::GetVolumeResponse>(Arena*);
template<> ::bosdyn::api::spot_cam::ListSoundsRequest* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::ListSoundsRequest>(Arena*);
template<> ::bosdyn::api::spot_cam::ListSoundsResponse* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::ListSoundsResponse>(Arena*);
template<> ::bosdyn::api::spot_cam::LoadSoundRequest* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::LoadSoundRequest>(Arena*);
template<> ::bosdyn::api::spot_cam::LoadSoundResponse* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::LoadSoundResponse>(Arena*);
template<> ::bosdyn::api::spot_cam::PlaySoundRequest* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::PlaySoundRequest>(Arena*);
template<> ::bosdyn::api::spot_cam::PlaySoundResponse* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::PlaySoundResponse>(Arena*);
template<> ::bosdyn::api::spot_cam::SetVolumeRequest* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::SetVolumeRequest>(Arena*);
template<> ::bosdyn::api::spot_cam::SetVolumeResponse* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::SetVolumeResponse>(Arena*);
template<> ::bosdyn::api::spot_cam::Sound* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::Sound>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bosdyn {
namespace api {
namespace spot_cam {

// ===================================================================

class Sound PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.Sound) */ {
 public:
  inline Sound() : Sound(nullptr) {}
  virtual ~Sound();

  Sound(const Sound& from);
  Sound(Sound&& from) noexcept
    : Sound() {
    *this = ::std::move(from);
  }

  inline Sound& operator=(const Sound& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sound& operator=(Sound&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Sound& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Sound* internal_default_instance() {
    return reinterpret_cast<const Sound*>(
               &_Sound_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Sound& a, Sound& b) {
    a.Swap(&b);
  }
  inline void Swap(Sound* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sound* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Sound* New() const final {
    return CreateMaybeMessage<Sound>(nullptr);
  }

  Sound* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Sound>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Sound& from);
  void MergeFrom(const Sound& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sound* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.Sound";
  }
  protected:
  explicit Sound(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2faudio_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2faudio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.Sound)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2faudio_2eproto;
};
// -------------------------------------------------------------------

class ListSoundsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.ListSoundsRequest) */ {
 public:
  inline ListSoundsRequest() : ListSoundsRequest(nullptr) {}
  virtual ~ListSoundsRequest();

  ListSoundsRequest(const ListSoundsRequest& from);
  ListSoundsRequest(ListSoundsRequest&& from) noexcept
    : ListSoundsRequest() {
    *this = ::std::move(from);
  }

  inline ListSoundsRequest& operator=(const ListSoundsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSoundsRequest& operator=(ListSoundsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListSoundsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListSoundsRequest* internal_default_instance() {
    return reinterpret_cast<const ListSoundsRequest*>(
               &_ListSoundsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ListSoundsRequest& a, ListSoundsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSoundsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSoundsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListSoundsRequest* New() const final {
    return CreateMaybeMessage<ListSoundsRequest>(nullptr);
  }

  ListSoundsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListSoundsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListSoundsRequest& from);
  void MergeFrom(const ListSoundsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSoundsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.ListSoundsRequest";
  }
  protected:
  explicit ListSoundsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2faudio_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2faudio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.ListSoundsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::RequestHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2faudio_2eproto;
};
// -------------------------------------------------------------------

class ListSoundsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.ListSoundsResponse) */ {
 public:
  inline ListSoundsResponse() : ListSoundsResponse(nullptr) {}
  virtual ~ListSoundsResponse();

  ListSoundsResponse(const ListSoundsResponse& from);
  ListSoundsResponse(ListSoundsResponse&& from) noexcept
    : ListSoundsResponse() {
    *this = ::std::move(from);
  }

  inline ListSoundsResponse& operator=(const ListSoundsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSoundsResponse& operator=(ListSoundsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListSoundsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListSoundsResponse* internal_default_instance() {
    return reinterpret_cast<const ListSoundsResponse*>(
               &_ListSoundsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ListSoundsResponse& a, ListSoundsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSoundsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSoundsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListSoundsResponse* New() const final {
    return CreateMaybeMessage<ListSoundsResponse>(nullptr);
  }

  ListSoundsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListSoundsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListSoundsResponse& from);
  void MergeFrom(const ListSoundsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSoundsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.ListSoundsResponse";
  }
  protected:
  explicit ListSoundsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2faudio_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2faudio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSoundsFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .bosdyn.api.spot_cam.Sound sounds = 2;
  int sounds_size() const;
  private:
  int _internal_sounds_size() const;
  public:
  void clear_sounds();
  ::bosdyn::api::spot_cam::Sound* mutable_sounds(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::spot_cam::Sound >*
      mutable_sounds();
  private:
  const ::bosdyn::api::spot_cam::Sound& _internal_sounds(int index) const;
  ::bosdyn::api::spot_cam::Sound* _internal_add_sounds();
  public:
  const ::bosdyn::api::spot_cam::Sound& sounds(int index) const;
  ::bosdyn::api::spot_cam::Sound* add_sounds();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::spot_cam::Sound >&
      sounds() const;

  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.ListSoundsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::spot_cam::Sound > sounds_;
  ::bosdyn::api::ResponseHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2faudio_2eproto;
};
// -------------------------------------------------------------------

class SetVolumeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.SetVolumeRequest) */ {
 public:
  inline SetVolumeRequest() : SetVolumeRequest(nullptr) {}
  virtual ~SetVolumeRequest();

  SetVolumeRequest(const SetVolumeRequest& from);
  SetVolumeRequest(SetVolumeRequest&& from) noexcept
    : SetVolumeRequest() {
    *this = ::std::move(from);
  }

  inline SetVolumeRequest& operator=(const SetVolumeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetVolumeRequest& operator=(SetVolumeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetVolumeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetVolumeRequest* internal_default_instance() {
    return reinterpret_cast<const SetVolumeRequest*>(
               &_SetVolumeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SetVolumeRequest& a, SetVolumeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetVolumeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetVolumeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetVolumeRequest* New() const final {
    return CreateMaybeMessage<SetVolumeRequest>(nullptr);
  }

  SetVolumeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetVolumeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetVolumeRequest& from);
  void MergeFrom(const SetVolumeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetVolumeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.SetVolumeRequest";
  }
  protected:
  explicit SetVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2faudio_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2faudio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kVolumeFieldNumber = 2,
  };
  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // float volume = 2;
  void clear_volume();
  float volume() const;
  void set_volume(float value);
  private:
  float _internal_volume() const;
  void _internal_set_volume(float value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.SetVolumeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::RequestHeader* header_;
  float volume_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2faudio_2eproto;
};
// -------------------------------------------------------------------

class SetVolumeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.SetVolumeResponse) */ {
 public:
  inline SetVolumeResponse() : SetVolumeResponse(nullptr) {}
  virtual ~SetVolumeResponse();

  SetVolumeResponse(const SetVolumeResponse& from);
  SetVolumeResponse(SetVolumeResponse&& from) noexcept
    : SetVolumeResponse() {
    *this = ::std::move(from);
  }

  inline SetVolumeResponse& operator=(const SetVolumeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetVolumeResponse& operator=(SetVolumeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetVolumeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetVolumeResponse* internal_default_instance() {
    return reinterpret_cast<const SetVolumeResponse*>(
               &_SetVolumeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SetVolumeResponse& a, SetVolumeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetVolumeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetVolumeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetVolumeResponse* New() const final {
    return CreateMaybeMessage<SetVolumeResponse>(nullptr);
  }

  SetVolumeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetVolumeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetVolumeResponse& from);
  void MergeFrom(const SetVolumeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetVolumeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.SetVolumeResponse";
  }
  protected:
  explicit SetVolumeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2faudio_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2faudio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.SetVolumeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::ResponseHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2faudio_2eproto;
};
// -------------------------------------------------------------------

class GetVolumeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.GetVolumeRequest) */ {
 public:
  inline GetVolumeRequest() : GetVolumeRequest(nullptr) {}
  virtual ~GetVolumeRequest();

  GetVolumeRequest(const GetVolumeRequest& from);
  GetVolumeRequest(GetVolumeRequest&& from) noexcept
    : GetVolumeRequest() {
    *this = ::std::move(from);
  }

  inline GetVolumeRequest& operator=(const GetVolumeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVolumeRequest& operator=(GetVolumeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetVolumeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetVolumeRequest* internal_default_instance() {
    return reinterpret_cast<const GetVolumeRequest*>(
               &_GetVolumeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetVolumeRequest& a, GetVolumeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVolumeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVolumeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetVolumeRequest* New() const final {
    return CreateMaybeMessage<GetVolumeRequest>(nullptr);
  }

  GetVolumeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetVolumeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetVolumeRequest& from);
  void MergeFrom(const GetVolumeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVolumeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.GetVolumeRequest";
  }
  protected:
  explicit GetVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2faudio_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2faudio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.GetVolumeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::RequestHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2faudio_2eproto;
};
// -------------------------------------------------------------------

class GetVolumeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.GetVolumeResponse) */ {
 public:
  inline GetVolumeResponse() : GetVolumeResponse(nullptr) {}
  virtual ~GetVolumeResponse();

  GetVolumeResponse(const GetVolumeResponse& from);
  GetVolumeResponse(GetVolumeResponse&& from) noexcept
    : GetVolumeResponse() {
    *this = ::std::move(from);
  }

  inline GetVolumeResponse& operator=(const GetVolumeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVolumeResponse& operator=(GetVolumeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetVolumeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetVolumeResponse* internal_default_instance() {
    return reinterpret_cast<const GetVolumeResponse*>(
               &_GetVolumeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetVolumeResponse& a, GetVolumeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVolumeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVolumeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetVolumeResponse* New() const final {
    return CreateMaybeMessage<GetVolumeResponse>(nullptr);
  }

  GetVolumeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetVolumeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetVolumeResponse& from);
  void MergeFrom(const GetVolumeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVolumeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.GetVolumeResponse";
  }
  protected:
  explicit GetVolumeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2faudio_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2faudio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kVolumeFieldNumber = 2,
  };
  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // float volume = 2;
  void clear_volume();
  float volume() const;
  void set_volume(float value);
  private:
  float _internal_volume() const;
  void _internal_set_volume(float value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.GetVolumeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::ResponseHeader* header_;
  float volume_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2faudio_2eproto;
};
// -------------------------------------------------------------------

class PlaySoundRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.PlaySoundRequest) */ {
 public:
  inline PlaySoundRequest() : PlaySoundRequest(nullptr) {}
  virtual ~PlaySoundRequest();

  PlaySoundRequest(const PlaySoundRequest& from);
  PlaySoundRequest(PlaySoundRequest&& from) noexcept
    : PlaySoundRequest() {
    *this = ::std::move(from);
  }

  inline PlaySoundRequest& operator=(const PlaySoundRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaySoundRequest& operator=(PlaySoundRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlaySoundRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlaySoundRequest* internal_default_instance() {
    return reinterpret_cast<const PlaySoundRequest*>(
               &_PlaySoundRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PlaySoundRequest& a, PlaySoundRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PlaySoundRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlaySoundRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlaySoundRequest* New() const final {
    return CreateMaybeMessage<PlaySoundRequest>(nullptr);
  }

  PlaySoundRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlaySoundRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlaySoundRequest& from);
  void MergeFrom(const PlaySoundRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaySoundRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.PlaySoundRequest";
  }
  protected:
  explicit PlaySoundRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2faudio_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2faudio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kSoundFieldNumber = 2,
    kGainFieldNumber = 3,
  };
  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // .bosdyn.api.spot_cam.Sound sound = 2;
  bool has_sound() const;
  private:
  bool _internal_has_sound() const;
  public:
  void clear_sound();
  const ::bosdyn::api::spot_cam::Sound& sound() const;
  ::bosdyn::api::spot_cam::Sound* release_sound();
  ::bosdyn::api::spot_cam::Sound* mutable_sound();
  void set_allocated_sound(::bosdyn::api::spot_cam::Sound* sound);
  private:
  const ::bosdyn::api::spot_cam::Sound& _internal_sound() const;
  ::bosdyn::api::spot_cam::Sound* _internal_mutable_sound();
  public:
  void unsafe_arena_set_allocated_sound(
      ::bosdyn::api::spot_cam::Sound* sound);
  ::bosdyn::api::spot_cam::Sound* unsafe_arena_release_sound();

  // .google.protobuf.FloatValue gain = 3;
  bool has_gain() const;
  private:
  bool _internal_has_gain() const;
  public:
  void clear_gain();
  const PROTOBUF_NAMESPACE_ID::FloatValue& gain() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* release_gain();
  PROTOBUF_NAMESPACE_ID::FloatValue* mutable_gain();
  void set_allocated_gain(PROTOBUF_NAMESPACE_ID::FloatValue* gain);
  private:
  const PROTOBUF_NAMESPACE_ID::FloatValue& _internal_gain() const;
  PROTOBUF_NAMESPACE_ID::FloatValue* _internal_mutable_gain();
  public:
  void unsafe_arena_set_allocated_gain(
      PROTOBUF_NAMESPACE_ID::FloatValue* gain);
  PROTOBUF_NAMESPACE_ID::FloatValue* unsafe_arena_release_gain();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.PlaySoundRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::RequestHeader* header_;
  ::bosdyn::api::spot_cam::Sound* sound_;
  PROTOBUF_NAMESPACE_ID::FloatValue* gain_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2faudio_2eproto;
};
// -------------------------------------------------------------------

class PlaySoundResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.PlaySoundResponse) */ {
 public:
  inline PlaySoundResponse() : PlaySoundResponse(nullptr) {}
  virtual ~PlaySoundResponse();

  PlaySoundResponse(const PlaySoundResponse& from);
  PlaySoundResponse(PlaySoundResponse&& from) noexcept
    : PlaySoundResponse() {
    *this = ::std::move(from);
  }

  inline PlaySoundResponse& operator=(const PlaySoundResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaySoundResponse& operator=(PlaySoundResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlaySoundResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlaySoundResponse* internal_default_instance() {
    return reinterpret_cast<const PlaySoundResponse*>(
               &_PlaySoundResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PlaySoundResponse& a, PlaySoundResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PlaySoundResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlaySoundResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlaySoundResponse* New() const final {
    return CreateMaybeMessage<PlaySoundResponse>(nullptr);
  }

  PlaySoundResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlaySoundResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlaySoundResponse& from);
  void MergeFrom(const PlaySoundResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaySoundResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.PlaySoundResponse";
  }
  protected:
  explicit PlaySoundResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2faudio_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2faudio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.PlaySoundResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::ResponseHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2faudio_2eproto;
};
// -------------------------------------------------------------------

class DeleteSoundRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.DeleteSoundRequest) */ {
 public:
  inline DeleteSoundRequest() : DeleteSoundRequest(nullptr) {}
  virtual ~DeleteSoundRequest();

  DeleteSoundRequest(const DeleteSoundRequest& from);
  DeleteSoundRequest(DeleteSoundRequest&& from) noexcept
    : DeleteSoundRequest() {
    *this = ::std::move(from);
  }

  inline DeleteSoundRequest& operator=(const DeleteSoundRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteSoundRequest& operator=(DeleteSoundRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteSoundRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteSoundRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteSoundRequest*>(
               &_DeleteSoundRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DeleteSoundRequest& a, DeleteSoundRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteSoundRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteSoundRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteSoundRequest* New() const final {
    return CreateMaybeMessage<DeleteSoundRequest>(nullptr);
  }

  DeleteSoundRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteSoundRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteSoundRequest& from);
  void MergeFrom(const DeleteSoundRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteSoundRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.DeleteSoundRequest";
  }
  protected:
  explicit DeleteSoundRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2faudio_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2faudio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kSoundFieldNumber = 2,
  };
  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // .bosdyn.api.spot_cam.Sound sound = 2;
  bool has_sound() const;
  private:
  bool _internal_has_sound() const;
  public:
  void clear_sound();
  const ::bosdyn::api::spot_cam::Sound& sound() const;
  ::bosdyn::api::spot_cam::Sound* release_sound();
  ::bosdyn::api::spot_cam::Sound* mutable_sound();
  void set_allocated_sound(::bosdyn::api::spot_cam::Sound* sound);
  private:
  const ::bosdyn::api::spot_cam::Sound& _internal_sound() const;
  ::bosdyn::api::spot_cam::Sound* _internal_mutable_sound();
  public:
  void unsafe_arena_set_allocated_sound(
      ::bosdyn::api::spot_cam::Sound* sound);
  ::bosdyn::api::spot_cam::Sound* unsafe_arena_release_sound();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.DeleteSoundRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::RequestHeader* header_;
  ::bosdyn::api::spot_cam::Sound* sound_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2faudio_2eproto;
};
// -------------------------------------------------------------------

class DeleteSoundResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.DeleteSoundResponse) */ {
 public:
  inline DeleteSoundResponse() : DeleteSoundResponse(nullptr) {}
  virtual ~DeleteSoundResponse();

  DeleteSoundResponse(const DeleteSoundResponse& from);
  DeleteSoundResponse(DeleteSoundResponse&& from) noexcept
    : DeleteSoundResponse() {
    *this = ::std::move(from);
  }

  inline DeleteSoundResponse& operator=(const DeleteSoundResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteSoundResponse& operator=(DeleteSoundResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteSoundResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteSoundResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteSoundResponse*>(
               &_DeleteSoundResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DeleteSoundResponse& a, DeleteSoundResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteSoundResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteSoundResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteSoundResponse* New() const final {
    return CreateMaybeMessage<DeleteSoundResponse>(nullptr);
  }

  DeleteSoundResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteSoundResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteSoundResponse& from);
  void MergeFrom(const DeleteSoundResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteSoundResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.DeleteSoundResponse";
  }
  protected:
  explicit DeleteSoundResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2faudio_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2faudio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.DeleteSoundResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::ResponseHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2faudio_2eproto;
};
// -------------------------------------------------------------------

class LoadSoundRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.LoadSoundRequest) */ {
 public:
  inline LoadSoundRequest() : LoadSoundRequest(nullptr) {}
  virtual ~LoadSoundRequest();

  LoadSoundRequest(const LoadSoundRequest& from);
  LoadSoundRequest(LoadSoundRequest&& from) noexcept
    : LoadSoundRequest() {
    *this = ::std::move(from);
  }

  inline LoadSoundRequest& operator=(const LoadSoundRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadSoundRequest& operator=(LoadSoundRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadSoundRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadSoundRequest* internal_default_instance() {
    return reinterpret_cast<const LoadSoundRequest*>(
               &_LoadSoundRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(LoadSoundRequest& a, LoadSoundRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadSoundRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadSoundRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadSoundRequest* New() const final {
    return CreateMaybeMessage<LoadSoundRequest>(nullptr);
  }

  LoadSoundRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadSoundRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadSoundRequest& from);
  void MergeFrom(const LoadSoundRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadSoundRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.LoadSoundRequest";
  }
  protected:
  explicit LoadSoundRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2faudio_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2faudio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kSoundFieldNumber = 2,
    kDataFieldNumber = 3,
  };
  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // .bosdyn.api.spot_cam.Sound sound = 2;
  bool has_sound() const;
  private:
  bool _internal_has_sound() const;
  public:
  void clear_sound();
  const ::bosdyn::api::spot_cam::Sound& sound() const;
  ::bosdyn::api::spot_cam::Sound* release_sound();
  ::bosdyn::api::spot_cam::Sound* mutable_sound();
  void set_allocated_sound(::bosdyn::api::spot_cam::Sound* sound);
  private:
  const ::bosdyn::api::spot_cam::Sound& _internal_sound() const;
  ::bosdyn::api::spot_cam::Sound* _internal_mutable_sound();
  public:
  void unsafe_arena_set_allocated_sound(
      ::bosdyn::api::spot_cam::Sound* sound);
  ::bosdyn::api::spot_cam::Sound* unsafe_arena_release_sound();

  // .bosdyn.api.DataChunk data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::bosdyn::api::DataChunk& data() const;
  ::bosdyn::api::DataChunk* release_data();
  ::bosdyn::api::DataChunk* mutable_data();
  void set_allocated_data(::bosdyn::api::DataChunk* data);
  private:
  const ::bosdyn::api::DataChunk& _internal_data() const;
  ::bosdyn::api::DataChunk* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::bosdyn::api::DataChunk* data);
  ::bosdyn::api::DataChunk* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.LoadSoundRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::RequestHeader* header_;
  ::bosdyn::api::spot_cam::Sound* sound_;
  ::bosdyn::api::DataChunk* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2faudio_2eproto;
};
// -------------------------------------------------------------------

class LoadSoundResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.LoadSoundResponse) */ {
 public:
  inline LoadSoundResponse() : LoadSoundResponse(nullptr) {}
  virtual ~LoadSoundResponse();

  LoadSoundResponse(const LoadSoundResponse& from);
  LoadSoundResponse(LoadSoundResponse&& from) noexcept
    : LoadSoundResponse() {
    *this = ::std::move(from);
  }

  inline LoadSoundResponse& operator=(const LoadSoundResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadSoundResponse& operator=(LoadSoundResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadSoundResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadSoundResponse* internal_default_instance() {
    return reinterpret_cast<const LoadSoundResponse*>(
               &_LoadSoundResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(LoadSoundResponse& a, LoadSoundResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadSoundResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadSoundResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadSoundResponse* New() const final {
    return CreateMaybeMessage<LoadSoundResponse>(nullptr);
  }

  LoadSoundResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadSoundResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadSoundResponse& from);
  void MergeFrom(const LoadSoundResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadSoundResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.LoadSoundResponse";
  }
  protected:
  explicit LoadSoundResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2faudio_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2faudio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.LoadSoundResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::ResponseHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2faudio_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Sound

// string name = 1;
inline void Sound::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Sound::name() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.Sound.name)
  return _internal_name();
}
inline void Sound::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.spot_cam.Sound.name)
}
inline std::string* Sound::mutable_name() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.Sound.name)
  return _internal_mutable_name();
}
inline const std::string& Sound::_internal_name() const {
  return name_.Get();
}
inline void Sound::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Sound::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.spot_cam.Sound.name)
}
inline void Sound::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.spot_cam.Sound.name)
}
inline void Sound::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.spot_cam.Sound.name)
}
inline std::string* Sound::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Sound::release_name() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.Sound.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Sound::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.Sound.name)
}

// -------------------------------------------------------------------

// ListSoundsRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool ListSoundsRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool ListSoundsRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& ListSoundsRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::RequestHeader*>(
      &::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& ListSoundsRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.ListSoundsRequest.header)
  return _internal_header();
}
inline void ListSoundsRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.ListSoundsRequest.header)
}
inline ::bosdyn::api::RequestHeader* ListSoundsRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::RequestHeader* ListSoundsRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.ListSoundsRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* ListSoundsRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::RequestHeader* ListSoundsRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.ListSoundsRequest.header)
  return _internal_mutable_header();
}
inline void ListSoundsRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.ListSoundsRequest.header)
}

// -------------------------------------------------------------------

// ListSoundsResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool ListSoundsResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool ListSoundsResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& ListSoundsResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::ResponseHeader*>(
      &::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& ListSoundsResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.ListSoundsResponse.header)
  return _internal_header();
}
inline void ListSoundsResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.ListSoundsResponse.header)
}
inline ::bosdyn::api::ResponseHeader* ListSoundsResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::ResponseHeader* ListSoundsResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.ListSoundsResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* ListSoundsResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::ResponseHeader* ListSoundsResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.ListSoundsResponse.header)
  return _internal_mutable_header();
}
inline void ListSoundsResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.ListSoundsResponse.header)
}

// repeated .bosdyn.api.spot_cam.Sound sounds = 2;
inline int ListSoundsResponse::_internal_sounds_size() const {
  return sounds_.size();
}
inline int ListSoundsResponse::sounds_size() const {
  return _internal_sounds_size();
}
inline void ListSoundsResponse::clear_sounds() {
  sounds_.Clear();
}
inline ::bosdyn::api::spot_cam::Sound* ListSoundsResponse::mutable_sounds(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.ListSoundsResponse.sounds)
  return sounds_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::spot_cam::Sound >*
ListSoundsResponse::mutable_sounds() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.spot_cam.ListSoundsResponse.sounds)
  return &sounds_;
}
inline const ::bosdyn::api::spot_cam::Sound& ListSoundsResponse::_internal_sounds(int index) const {
  return sounds_.Get(index);
}
inline const ::bosdyn::api::spot_cam::Sound& ListSoundsResponse::sounds(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.ListSoundsResponse.sounds)
  return _internal_sounds(index);
}
inline ::bosdyn::api::spot_cam::Sound* ListSoundsResponse::_internal_add_sounds() {
  return sounds_.Add();
}
inline ::bosdyn::api::spot_cam::Sound* ListSoundsResponse::add_sounds() {
  // @@protoc_insertion_point(field_add:bosdyn.api.spot_cam.ListSoundsResponse.sounds)
  return _internal_add_sounds();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::spot_cam::Sound >&
ListSoundsResponse::sounds() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.spot_cam.ListSoundsResponse.sounds)
  return sounds_;
}

// -------------------------------------------------------------------

// SetVolumeRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool SetVolumeRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool SetVolumeRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& SetVolumeRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::RequestHeader*>(
      &::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& SetVolumeRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.SetVolumeRequest.header)
  return _internal_header();
}
inline void SetVolumeRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.SetVolumeRequest.header)
}
inline ::bosdyn::api::RequestHeader* SetVolumeRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::RequestHeader* SetVolumeRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.SetVolumeRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* SetVolumeRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::RequestHeader* SetVolumeRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.SetVolumeRequest.header)
  return _internal_mutable_header();
}
inline void SetVolumeRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.SetVolumeRequest.header)
}

// float volume = 2;
inline void SetVolumeRequest::clear_volume() {
  volume_ = 0;
}
inline float SetVolumeRequest::_internal_volume() const {
  return volume_;
}
inline float SetVolumeRequest::volume() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.SetVolumeRequest.volume)
  return _internal_volume();
}
inline void SetVolumeRequest::_internal_set_volume(float value) {
  
  volume_ = value;
}
inline void SetVolumeRequest::set_volume(float value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.spot_cam.SetVolumeRequest.volume)
}

// -------------------------------------------------------------------

// SetVolumeResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool SetVolumeResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool SetVolumeResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& SetVolumeResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::ResponseHeader*>(
      &::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& SetVolumeResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.SetVolumeResponse.header)
  return _internal_header();
}
inline void SetVolumeResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.SetVolumeResponse.header)
}
inline ::bosdyn::api::ResponseHeader* SetVolumeResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::ResponseHeader* SetVolumeResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.SetVolumeResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* SetVolumeResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::ResponseHeader* SetVolumeResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.SetVolumeResponse.header)
  return _internal_mutable_header();
}
inline void SetVolumeResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.SetVolumeResponse.header)
}

// -------------------------------------------------------------------

// GetVolumeRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool GetVolumeRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool GetVolumeRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& GetVolumeRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::RequestHeader*>(
      &::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& GetVolumeRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.GetVolumeRequest.header)
  return _internal_header();
}
inline void GetVolumeRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.GetVolumeRequest.header)
}
inline ::bosdyn::api::RequestHeader* GetVolumeRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::RequestHeader* GetVolumeRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.GetVolumeRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* GetVolumeRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::RequestHeader* GetVolumeRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.GetVolumeRequest.header)
  return _internal_mutable_header();
}
inline void GetVolumeRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.GetVolumeRequest.header)
}

// -------------------------------------------------------------------

// GetVolumeResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool GetVolumeResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool GetVolumeResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& GetVolumeResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::ResponseHeader*>(
      &::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& GetVolumeResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.GetVolumeResponse.header)
  return _internal_header();
}
inline void GetVolumeResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.GetVolumeResponse.header)
}
inline ::bosdyn::api::ResponseHeader* GetVolumeResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::ResponseHeader* GetVolumeResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.GetVolumeResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* GetVolumeResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::ResponseHeader* GetVolumeResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.GetVolumeResponse.header)
  return _internal_mutable_header();
}
inline void GetVolumeResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.GetVolumeResponse.header)
}

// float volume = 2;
inline void GetVolumeResponse::clear_volume() {
  volume_ = 0;
}
inline float GetVolumeResponse::_internal_volume() const {
  return volume_;
}
inline float GetVolumeResponse::volume() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.GetVolumeResponse.volume)
  return _internal_volume();
}
inline void GetVolumeResponse::_internal_set_volume(float value) {
  
  volume_ = value;
}
inline void GetVolumeResponse::set_volume(float value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.spot_cam.GetVolumeResponse.volume)
}

// -------------------------------------------------------------------

// PlaySoundRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool PlaySoundRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool PlaySoundRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& PlaySoundRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::RequestHeader*>(
      &::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& PlaySoundRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.PlaySoundRequest.header)
  return _internal_header();
}
inline void PlaySoundRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.PlaySoundRequest.header)
}
inline ::bosdyn::api::RequestHeader* PlaySoundRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::RequestHeader* PlaySoundRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.PlaySoundRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* PlaySoundRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::RequestHeader* PlaySoundRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.PlaySoundRequest.header)
  return _internal_mutable_header();
}
inline void PlaySoundRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.PlaySoundRequest.header)
}

// .bosdyn.api.spot_cam.Sound sound = 2;
inline bool PlaySoundRequest::_internal_has_sound() const {
  return this != internal_default_instance() && sound_ != nullptr;
}
inline bool PlaySoundRequest::has_sound() const {
  return _internal_has_sound();
}
inline void PlaySoundRequest::clear_sound() {
  if (GetArena() == nullptr && sound_ != nullptr) {
    delete sound_;
  }
  sound_ = nullptr;
}
inline const ::bosdyn::api::spot_cam::Sound& PlaySoundRequest::_internal_sound() const {
  const ::bosdyn::api::spot_cam::Sound* p = sound_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::spot_cam::Sound*>(
      &::bosdyn::api::spot_cam::_Sound_default_instance_);
}
inline const ::bosdyn::api::spot_cam::Sound& PlaySoundRequest::sound() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.PlaySoundRequest.sound)
  return _internal_sound();
}
inline void PlaySoundRequest::unsafe_arena_set_allocated_sound(
    ::bosdyn::api::spot_cam::Sound* sound) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sound_);
  }
  sound_ = sound;
  if (sound) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.PlaySoundRequest.sound)
}
inline ::bosdyn::api::spot_cam::Sound* PlaySoundRequest::release_sound() {
  
  ::bosdyn::api::spot_cam::Sound* temp = sound_;
  sound_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::spot_cam::Sound* PlaySoundRequest::unsafe_arena_release_sound() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.PlaySoundRequest.sound)
  
  ::bosdyn::api::spot_cam::Sound* temp = sound_;
  sound_ = nullptr;
  return temp;
}
inline ::bosdyn::api::spot_cam::Sound* PlaySoundRequest::_internal_mutable_sound() {
  
  if (sound_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::spot_cam::Sound>(GetArena());
    sound_ = p;
  }
  return sound_;
}
inline ::bosdyn::api::spot_cam::Sound* PlaySoundRequest::mutable_sound() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.PlaySoundRequest.sound)
  return _internal_mutable_sound();
}
inline void PlaySoundRequest::set_allocated_sound(::bosdyn::api::spot_cam::Sound* sound) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sound_;
  }
  if (sound) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sound);
    if (message_arena != submessage_arena) {
      sound = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sound, submessage_arena);
    }
    
  } else {
    
  }
  sound_ = sound;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.PlaySoundRequest.sound)
}

// .google.protobuf.FloatValue gain = 3;
inline bool PlaySoundRequest::_internal_has_gain() const {
  return this != internal_default_instance() && gain_ != nullptr;
}
inline bool PlaySoundRequest::has_gain() const {
  return _internal_has_gain();
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& PlaySoundRequest::_internal_gain() const {
  const PROTOBUF_NAMESPACE_ID::FloatValue* p = gain_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FloatValue*>(
      &PROTOBUF_NAMESPACE_ID::_FloatValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FloatValue& PlaySoundRequest::gain() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.PlaySoundRequest.gain)
  return _internal_gain();
}
inline void PlaySoundRequest::unsafe_arena_set_allocated_gain(
    PROTOBUF_NAMESPACE_ID::FloatValue* gain) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gain_);
  }
  gain_ = gain;
  if (gain) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.PlaySoundRequest.gain)
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* PlaySoundRequest::release_gain() {
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = gain_;
  gain_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* PlaySoundRequest::unsafe_arena_release_gain() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.PlaySoundRequest.gain)
  
  PROTOBUF_NAMESPACE_ID::FloatValue* temp = gain_;
  gain_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* PlaySoundRequest::_internal_mutable_gain() {
  
  if (gain_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FloatValue>(GetArena());
    gain_ = p;
  }
  return gain_;
}
inline PROTOBUF_NAMESPACE_ID::FloatValue* PlaySoundRequest::mutable_gain() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.PlaySoundRequest.gain)
  return _internal_mutable_gain();
}
inline void PlaySoundRequest::set_allocated_gain(PROTOBUF_NAMESPACE_ID::FloatValue* gain) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gain_);
  }
  if (gain) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gain)->GetArena();
    if (message_arena != submessage_arena) {
      gain = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gain, submessage_arena);
    }
    
  } else {
    
  }
  gain_ = gain;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.PlaySoundRequest.gain)
}

// -------------------------------------------------------------------

// PlaySoundResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool PlaySoundResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool PlaySoundResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& PlaySoundResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::ResponseHeader*>(
      &::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& PlaySoundResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.PlaySoundResponse.header)
  return _internal_header();
}
inline void PlaySoundResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.PlaySoundResponse.header)
}
inline ::bosdyn::api::ResponseHeader* PlaySoundResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::ResponseHeader* PlaySoundResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.PlaySoundResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* PlaySoundResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::ResponseHeader* PlaySoundResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.PlaySoundResponse.header)
  return _internal_mutable_header();
}
inline void PlaySoundResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.PlaySoundResponse.header)
}

// -------------------------------------------------------------------

// DeleteSoundRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool DeleteSoundRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool DeleteSoundRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& DeleteSoundRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::RequestHeader*>(
      &::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& DeleteSoundRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.DeleteSoundRequest.header)
  return _internal_header();
}
inline void DeleteSoundRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.DeleteSoundRequest.header)
}
inline ::bosdyn::api::RequestHeader* DeleteSoundRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::RequestHeader* DeleteSoundRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.DeleteSoundRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* DeleteSoundRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::RequestHeader* DeleteSoundRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.DeleteSoundRequest.header)
  return _internal_mutable_header();
}
inline void DeleteSoundRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.DeleteSoundRequest.header)
}

// .bosdyn.api.spot_cam.Sound sound = 2;
inline bool DeleteSoundRequest::_internal_has_sound() const {
  return this != internal_default_instance() && sound_ != nullptr;
}
inline bool DeleteSoundRequest::has_sound() const {
  return _internal_has_sound();
}
inline void DeleteSoundRequest::clear_sound() {
  if (GetArena() == nullptr && sound_ != nullptr) {
    delete sound_;
  }
  sound_ = nullptr;
}
inline const ::bosdyn::api::spot_cam::Sound& DeleteSoundRequest::_internal_sound() const {
  const ::bosdyn::api::spot_cam::Sound* p = sound_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::spot_cam::Sound*>(
      &::bosdyn::api::spot_cam::_Sound_default_instance_);
}
inline const ::bosdyn::api::spot_cam::Sound& DeleteSoundRequest::sound() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.DeleteSoundRequest.sound)
  return _internal_sound();
}
inline void DeleteSoundRequest::unsafe_arena_set_allocated_sound(
    ::bosdyn::api::spot_cam::Sound* sound) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sound_);
  }
  sound_ = sound;
  if (sound) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.DeleteSoundRequest.sound)
}
inline ::bosdyn::api::spot_cam::Sound* DeleteSoundRequest::release_sound() {
  
  ::bosdyn::api::spot_cam::Sound* temp = sound_;
  sound_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::spot_cam::Sound* DeleteSoundRequest::unsafe_arena_release_sound() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.DeleteSoundRequest.sound)
  
  ::bosdyn::api::spot_cam::Sound* temp = sound_;
  sound_ = nullptr;
  return temp;
}
inline ::bosdyn::api::spot_cam::Sound* DeleteSoundRequest::_internal_mutable_sound() {
  
  if (sound_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::spot_cam::Sound>(GetArena());
    sound_ = p;
  }
  return sound_;
}
inline ::bosdyn::api::spot_cam::Sound* DeleteSoundRequest::mutable_sound() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.DeleteSoundRequest.sound)
  return _internal_mutable_sound();
}
inline void DeleteSoundRequest::set_allocated_sound(::bosdyn::api::spot_cam::Sound* sound) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sound_;
  }
  if (sound) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sound);
    if (message_arena != submessage_arena) {
      sound = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sound, submessage_arena);
    }
    
  } else {
    
  }
  sound_ = sound;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.DeleteSoundRequest.sound)
}

// -------------------------------------------------------------------

// DeleteSoundResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool DeleteSoundResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool DeleteSoundResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& DeleteSoundResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::ResponseHeader*>(
      &::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& DeleteSoundResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.DeleteSoundResponse.header)
  return _internal_header();
}
inline void DeleteSoundResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.DeleteSoundResponse.header)
}
inline ::bosdyn::api::ResponseHeader* DeleteSoundResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::ResponseHeader* DeleteSoundResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.DeleteSoundResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* DeleteSoundResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::ResponseHeader* DeleteSoundResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.DeleteSoundResponse.header)
  return _internal_mutable_header();
}
inline void DeleteSoundResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.DeleteSoundResponse.header)
}

// -------------------------------------------------------------------

// LoadSoundRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool LoadSoundRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool LoadSoundRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& LoadSoundRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::RequestHeader*>(
      &::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& LoadSoundRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.LoadSoundRequest.header)
  return _internal_header();
}
inline void LoadSoundRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.LoadSoundRequest.header)
}
inline ::bosdyn::api::RequestHeader* LoadSoundRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::RequestHeader* LoadSoundRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.LoadSoundRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* LoadSoundRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::RequestHeader* LoadSoundRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.LoadSoundRequest.header)
  return _internal_mutable_header();
}
inline void LoadSoundRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.LoadSoundRequest.header)
}

// .bosdyn.api.spot_cam.Sound sound = 2;
inline bool LoadSoundRequest::_internal_has_sound() const {
  return this != internal_default_instance() && sound_ != nullptr;
}
inline bool LoadSoundRequest::has_sound() const {
  return _internal_has_sound();
}
inline void LoadSoundRequest::clear_sound() {
  if (GetArena() == nullptr && sound_ != nullptr) {
    delete sound_;
  }
  sound_ = nullptr;
}
inline const ::bosdyn::api::spot_cam::Sound& LoadSoundRequest::_internal_sound() const {
  const ::bosdyn::api::spot_cam::Sound* p = sound_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::spot_cam::Sound*>(
      &::bosdyn::api::spot_cam::_Sound_default_instance_);
}
inline const ::bosdyn::api::spot_cam::Sound& LoadSoundRequest::sound() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.LoadSoundRequest.sound)
  return _internal_sound();
}
inline void LoadSoundRequest::unsafe_arena_set_allocated_sound(
    ::bosdyn::api::spot_cam::Sound* sound) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sound_);
  }
  sound_ = sound;
  if (sound) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.LoadSoundRequest.sound)
}
inline ::bosdyn::api::spot_cam::Sound* LoadSoundRequest::release_sound() {
  
  ::bosdyn::api::spot_cam::Sound* temp = sound_;
  sound_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::spot_cam::Sound* LoadSoundRequest::unsafe_arena_release_sound() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.LoadSoundRequest.sound)
  
  ::bosdyn::api::spot_cam::Sound* temp = sound_;
  sound_ = nullptr;
  return temp;
}
inline ::bosdyn::api::spot_cam::Sound* LoadSoundRequest::_internal_mutable_sound() {
  
  if (sound_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::spot_cam::Sound>(GetArena());
    sound_ = p;
  }
  return sound_;
}
inline ::bosdyn::api::spot_cam::Sound* LoadSoundRequest::mutable_sound() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.LoadSoundRequest.sound)
  return _internal_mutable_sound();
}
inline void LoadSoundRequest::set_allocated_sound(::bosdyn::api::spot_cam::Sound* sound) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sound_;
  }
  if (sound) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sound);
    if (message_arena != submessage_arena) {
      sound = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sound, submessage_arena);
    }
    
  } else {
    
  }
  sound_ = sound;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.LoadSoundRequest.sound)
}

// .bosdyn.api.DataChunk data = 3;
inline bool LoadSoundRequest::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool LoadSoundRequest::has_data() const {
  return _internal_has_data();
}
inline const ::bosdyn::api::DataChunk& LoadSoundRequest::_internal_data() const {
  const ::bosdyn::api::DataChunk* p = data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::DataChunk*>(
      &::bosdyn::api::_DataChunk_default_instance_);
}
inline const ::bosdyn::api::DataChunk& LoadSoundRequest::data() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.LoadSoundRequest.data)
  return _internal_data();
}
inline void LoadSoundRequest::unsafe_arena_set_allocated_data(
    ::bosdyn::api::DataChunk* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.LoadSoundRequest.data)
}
inline ::bosdyn::api::DataChunk* LoadSoundRequest::release_data() {
  
  ::bosdyn::api::DataChunk* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::DataChunk* LoadSoundRequest::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.LoadSoundRequest.data)
  
  ::bosdyn::api::DataChunk* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::bosdyn::api::DataChunk* LoadSoundRequest::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::DataChunk>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::bosdyn::api::DataChunk* LoadSoundRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.LoadSoundRequest.data)
  return _internal_mutable_data();
}
inline void LoadSoundRequest::set_allocated_data(::bosdyn::api::DataChunk* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data)->GetArena();
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.LoadSoundRequest.data)
}

// -------------------------------------------------------------------

// LoadSoundResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool LoadSoundResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool LoadSoundResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& LoadSoundResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::ResponseHeader*>(
      &::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& LoadSoundResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.LoadSoundResponse.header)
  return _internal_header();
}
inline void LoadSoundResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.LoadSoundResponse.header)
}
inline ::bosdyn::api::ResponseHeader* LoadSoundResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::ResponseHeader* LoadSoundResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.LoadSoundResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* LoadSoundResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::ResponseHeader* LoadSoundResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.LoadSoundResponse.header)
  return _internal_mutable_header();
}
inline void LoadSoundResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.LoadSoundResponse.header)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace spot_cam
}  // namespace api
}  // namespace bosdyn

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fspot_5fcam_2faudio_2eproto
