// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/spot_cam/LED.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "bosdyn/api/header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto;
namespace bosdyn {
namespace api {
namespace spot_cam {
class GetLEDBrightnessRequest;
class GetLEDBrightnessRequestDefaultTypeInternal;
extern GetLEDBrightnessRequestDefaultTypeInternal _GetLEDBrightnessRequest_default_instance_;
class GetLEDBrightnessResponse;
class GetLEDBrightnessResponseDefaultTypeInternal;
extern GetLEDBrightnessResponseDefaultTypeInternal _GetLEDBrightnessResponse_default_instance_;
class SetLEDBrightnessRequest;
class SetLEDBrightnessRequestDefaultTypeInternal;
extern SetLEDBrightnessRequestDefaultTypeInternal _SetLEDBrightnessRequest_default_instance_;
class SetLEDBrightnessRequest_BrightnessesEntry_DoNotUse;
class SetLEDBrightnessRequest_BrightnessesEntry_DoNotUseDefaultTypeInternal;
extern SetLEDBrightnessRequest_BrightnessesEntry_DoNotUseDefaultTypeInternal _SetLEDBrightnessRequest_BrightnessesEntry_DoNotUse_default_instance_;
class SetLEDBrightnessResponse;
class SetLEDBrightnessResponseDefaultTypeInternal;
extern SetLEDBrightnessResponseDefaultTypeInternal _SetLEDBrightnessResponse_default_instance_;
}  // namespace spot_cam
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> ::bosdyn::api::spot_cam::GetLEDBrightnessRequest* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::GetLEDBrightnessRequest>(Arena*);
template<> ::bosdyn::api::spot_cam::GetLEDBrightnessResponse* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::GetLEDBrightnessResponse>(Arena*);
template<> ::bosdyn::api::spot_cam::SetLEDBrightnessRequest* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::SetLEDBrightnessRequest>(Arena*);
template<> ::bosdyn::api::spot_cam::SetLEDBrightnessRequest_BrightnessesEntry_DoNotUse* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::SetLEDBrightnessRequest_BrightnessesEntry_DoNotUse>(Arena*);
template<> ::bosdyn::api::spot_cam::SetLEDBrightnessResponse* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::SetLEDBrightnessResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bosdyn {
namespace api {
namespace spot_cam {

// ===================================================================

class GetLEDBrightnessRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.GetLEDBrightnessRequest) */ {
 public:
  inline GetLEDBrightnessRequest() : GetLEDBrightnessRequest(nullptr) {}
  virtual ~GetLEDBrightnessRequest();

  GetLEDBrightnessRequest(const GetLEDBrightnessRequest& from);
  GetLEDBrightnessRequest(GetLEDBrightnessRequest&& from) noexcept
    : GetLEDBrightnessRequest() {
    *this = ::std::move(from);
  }

  inline GetLEDBrightnessRequest& operator=(const GetLEDBrightnessRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLEDBrightnessRequest& operator=(GetLEDBrightnessRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLEDBrightnessRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLEDBrightnessRequest* internal_default_instance() {
    return reinterpret_cast<const GetLEDBrightnessRequest*>(
               &_GetLEDBrightnessRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetLEDBrightnessRequest& a, GetLEDBrightnessRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLEDBrightnessRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLEDBrightnessRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLEDBrightnessRequest* New() const final {
    return CreateMaybeMessage<GetLEDBrightnessRequest>(nullptr);
  }

  GetLEDBrightnessRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLEDBrightnessRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLEDBrightnessRequest& from);
  void MergeFrom(const GetLEDBrightnessRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLEDBrightnessRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.GetLEDBrightnessRequest";
  }
  protected:
  explicit GetLEDBrightnessRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.GetLEDBrightnessRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::RequestHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto;
};
// -------------------------------------------------------------------

class GetLEDBrightnessResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.GetLEDBrightnessResponse) */ {
 public:
  inline GetLEDBrightnessResponse() : GetLEDBrightnessResponse(nullptr) {}
  virtual ~GetLEDBrightnessResponse();

  GetLEDBrightnessResponse(const GetLEDBrightnessResponse& from);
  GetLEDBrightnessResponse(GetLEDBrightnessResponse&& from) noexcept
    : GetLEDBrightnessResponse() {
    *this = ::std::move(from);
  }

  inline GetLEDBrightnessResponse& operator=(const GetLEDBrightnessResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLEDBrightnessResponse& operator=(GetLEDBrightnessResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLEDBrightnessResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLEDBrightnessResponse* internal_default_instance() {
    return reinterpret_cast<const GetLEDBrightnessResponse*>(
               &_GetLEDBrightnessResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetLEDBrightnessResponse& a, GetLEDBrightnessResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLEDBrightnessResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLEDBrightnessResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLEDBrightnessResponse* New() const final {
    return CreateMaybeMessage<GetLEDBrightnessResponse>(nullptr);
  }

  GetLEDBrightnessResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLEDBrightnessResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLEDBrightnessResponse& from);
  void MergeFrom(const GetLEDBrightnessResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLEDBrightnessResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.GetLEDBrightnessResponse";
  }
  protected:
  explicit GetLEDBrightnessResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrightnessesFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated float brightnesses = 2;
  int brightnesses_size() const;
  private:
  int _internal_brightnesses_size() const;
  public:
  void clear_brightnesses();
  private:
  float _internal_brightnesses(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_brightnesses() const;
  void _internal_add_brightnesses(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_brightnesses();
  public:
  float brightnesses(int index) const;
  void set_brightnesses(int index, float value);
  void add_brightnesses(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      brightnesses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_brightnesses();

  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.GetLEDBrightnessResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > brightnesses_;
  mutable std::atomic<int> _brightnesses_cached_byte_size_;
  ::bosdyn::api::ResponseHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto;
};
// -------------------------------------------------------------------

class SetLEDBrightnessRequest_BrightnessesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SetLEDBrightnessRequest_BrightnessesEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, float,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SetLEDBrightnessRequest_BrightnessesEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, float,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT,
    0 > SuperType;
  SetLEDBrightnessRequest_BrightnessesEntry_DoNotUse();
  explicit SetLEDBrightnessRequest_BrightnessesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SetLEDBrightnessRequest_BrightnessesEntry_DoNotUse& other);
  static const SetLEDBrightnessRequest_BrightnessesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SetLEDBrightnessRequest_BrightnessesEntry_DoNotUse*>(&_SetLEDBrightnessRequest_BrightnessesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto.file_level_metadata[2];
  }

  public:
};

// -------------------------------------------------------------------

class SetLEDBrightnessRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.SetLEDBrightnessRequest) */ {
 public:
  inline SetLEDBrightnessRequest() : SetLEDBrightnessRequest(nullptr) {}
  virtual ~SetLEDBrightnessRequest();

  SetLEDBrightnessRequest(const SetLEDBrightnessRequest& from);
  SetLEDBrightnessRequest(SetLEDBrightnessRequest&& from) noexcept
    : SetLEDBrightnessRequest() {
    *this = ::std::move(from);
  }

  inline SetLEDBrightnessRequest& operator=(const SetLEDBrightnessRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetLEDBrightnessRequest& operator=(SetLEDBrightnessRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetLEDBrightnessRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetLEDBrightnessRequest* internal_default_instance() {
    return reinterpret_cast<const SetLEDBrightnessRequest*>(
               &_SetLEDBrightnessRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SetLEDBrightnessRequest& a, SetLEDBrightnessRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetLEDBrightnessRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetLEDBrightnessRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetLEDBrightnessRequest* New() const final {
    return CreateMaybeMessage<SetLEDBrightnessRequest>(nullptr);
  }

  SetLEDBrightnessRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetLEDBrightnessRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetLEDBrightnessRequest& from);
  void MergeFrom(const SetLEDBrightnessRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetLEDBrightnessRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.SetLEDBrightnessRequest";
  }
  protected:
  explicit SetLEDBrightnessRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kBrightnessesFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // map<int32, float> brightnesses = 2;
  int brightnesses_size() const;
  private:
  int _internal_brightnesses_size() const;
  public:
  void clear_brightnesses();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >&
      _internal_brightnesses() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >*
      _internal_mutable_brightnesses();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >&
      brightnesses() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >*
      mutable_brightnesses();

  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.SetLEDBrightnessRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SetLEDBrightnessRequest_BrightnessesEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, float,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT,
      0 > brightnesses_;
  ::bosdyn::api::RequestHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto;
};
// -------------------------------------------------------------------

class SetLEDBrightnessResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.SetLEDBrightnessResponse) */ {
 public:
  inline SetLEDBrightnessResponse() : SetLEDBrightnessResponse(nullptr) {}
  virtual ~SetLEDBrightnessResponse();

  SetLEDBrightnessResponse(const SetLEDBrightnessResponse& from);
  SetLEDBrightnessResponse(SetLEDBrightnessResponse&& from) noexcept
    : SetLEDBrightnessResponse() {
    *this = ::std::move(from);
  }

  inline SetLEDBrightnessResponse& operator=(const SetLEDBrightnessResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetLEDBrightnessResponse& operator=(SetLEDBrightnessResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetLEDBrightnessResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetLEDBrightnessResponse* internal_default_instance() {
    return reinterpret_cast<const SetLEDBrightnessResponse*>(
               &_SetLEDBrightnessResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SetLEDBrightnessResponse& a, SetLEDBrightnessResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetLEDBrightnessResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetLEDBrightnessResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetLEDBrightnessResponse* New() const final {
    return CreateMaybeMessage<SetLEDBrightnessResponse>(nullptr);
  }

  SetLEDBrightnessResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetLEDBrightnessResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetLEDBrightnessResponse& from);
  void MergeFrom(const SetLEDBrightnessResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetLEDBrightnessResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.SetLEDBrightnessResponse";
  }
  protected:
  explicit SetLEDBrightnessResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.SetLEDBrightnessResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::ResponseHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetLEDBrightnessRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool GetLEDBrightnessRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool GetLEDBrightnessRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& GetLEDBrightnessRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::RequestHeader*>(
      &::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& GetLEDBrightnessRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.GetLEDBrightnessRequest.header)
  return _internal_header();
}
inline void GetLEDBrightnessRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.GetLEDBrightnessRequest.header)
}
inline ::bosdyn::api::RequestHeader* GetLEDBrightnessRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::RequestHeader* GetLEDBrightnessRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.GetLEDBrightnessRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* GetLEDBrightnessRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::RequestHeader* GetLEDBrightnessRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.GetLEDBrightnessRequest.header)
  return _internal_mutable_header();
}
inline void GetLEDBrightnessRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.GetLEDBrightnessRequest.header)
}

// -------------------------------------------------------------------

// GetLEDBrightnessResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool GetLEDBrightnessResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool GetLEDBrightnessResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& GetLEDBrightnessResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::ResponseHeader*>(
      &::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& GetLEDBrightnessResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.GetLEDBrightnessResponse.header)
  return _internal_header();
}
inline void GetLEDBrightnessResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.GetLEDBrightnessResponse.header)
}
inline ::bosdyn::api::ResponseHeader* GetLEDBrightnessResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::ResponseHeader* GetLEDBrightnessResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.GetLEDBrightnessResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* GetLEDBrightnessResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::ResponseHeader* GetLEDBrightnessResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.GetLEDBrightnessResponse.header)
  return _internal_mutable_header();
}
inline void GetLEDBrightnessResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.GetLEDBrightnessResponse.header)
}

// repeated float brightnesses = 2;
inline int GetLEDBrightnessResponse::_internal_brightnesses_size() const {
  return brightnesses_.size();
}
inline int GetLEDBrightnessResponse::brightnesses_size() const {
  return _internal_brightnesses_size();
}
inline void GetLEDBrightnessResponse::clear_brightnesses() {
  brightnesses_.Clear();
}
inline float GetLEDBrightnessResponse::_internal_brightnesses(int index) const {
  return brightnesses_.Get(index);
}
inline float GetLEDBrightnessResponse::brightnesses(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.GetLEDBrightnessResponse.brightnesses)
  return _internal_brightnesses(index);
}
inline void GetLEDBrightnessResponse::set_brightnesses(int index, float value) {
  brightnesses_.Set(index, value);
  // @@protoc_insertion_point(field_set:bosdyn.api.spot_cam.GetLEDBrightnessResponse.brightnesses)
}
inline void GetLEDBrightnessResponse::_internal_add_brightnesses(float value) {
  brightnesses_.Add(value);
}
inline void GetLEDBrightnessResponse::add_brightnesses(float value) {
  _internal_add_brightnesses(value);
  // @@protoc_insertion_point(field_add:bosdyn.api.spot_cam.GetLEDBrightnessResponse.brightnesses)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetLEDBrightnessResponse::_internal_brightnesses() const {
  return brightnesses_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GetLEDBrightnessResponse::brightnesses() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.spot_cam.GetLEDBrightnessResponse.brightnesses)
  return _internal_brightnesses();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetLEDBrightnessResponse::_internal_mutable_brightnesses() {
  return &brightnesses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GetLEDBrightnessResponse::mutable_brightnesses() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.spot_cam.GetLEDBrightnessResponse.brightnesses)
  return _internal_mutable_brightnesses();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SetLEDBrightnessRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool SetLEDBrightnessRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool SetLEDBrightnessRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& SetLEDBrightnessRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::RequestHeader*>(
      &::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& SetLEDBrightnessRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.SetLEDBrightnessRequest.header)
  return _internal_header();
}
inline void SetLEDBrightnessRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.SetLEDBrightnessRequest.header)
}
inline ::bosdyn::api::RequestHeader* SetLEDBrightnessRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::RequestHeader* SetLEDBrightnessRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.SetLEDBrightnessRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* SetLEDBrightnessRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::RequestHeader* SetLEDBrightnessRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.SetLEDBrightnessRequest.header)
  return _internal_mutable_header();
}
inline void SetLEDBrightnessRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.SetLEDBrightnessRequest.header)
}

// map<int32, float> brightnesses = 2;
inline int SetLEDBrightnessRequest::_internal_brightnesses_size() const {
  return brightnesses_.size();
}
inline int SetLEDBrightnessRequest::brightnesses_size() const {
  return _internal_brightnesses_size();
}
inline void SetLEDBrightnessRequest::clear_brightnesses() {
  brightnesses_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >&
SetLEDBrightnessRequest::_internal_brightnesses() const {
  return brightnesses_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >&
SetLEDBrightnessRequest::brightnesses() const {
  // @@protoc_insertion_point(field_map:bosdyn.api.spot_cam.SetLEDBrightnessRequest.brightnesses)
  return _internal_brightnesses();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >*
SetLEDBrightnessRequest::_internal_mutable_brightnesses() {
  return brightnesses_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >*
SetLEDBrightnessRequest::mutable_brightnesses() {
  // @@protoc_insertion_point(field_mutable_map:bosdyn.api.spot_cam.SetLEDBrightnessRequest.brightnesses)
  return _internal_mutable_brightnesses();
}

// -------------------------------------------------------------------

// SetLEDBrightnessResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool SetLEDBrightnessResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool SetLEDBrightnessResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& SetLEDBrightnessResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::ResponseHeader*>(
      &::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& SetLEDBrightnessResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.SetLEDBrightnessResponse.header)
  return _internal_header();
}
inline void SetLEDBrightnessResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.SetLEDBrightnessResponse.header)
}
inline ::bosdyn::api::ResponseHeader* SetLEDBrightnessResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::ResponseHeader* SetLEDBrightnessResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.SetLEDBrightnessResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* SetLEDBrightnessResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::ResponseHeader* SetLEDBrightnessResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.SetLEDBrightnessResponse.header)
  return _internal_mutable_header();
}
inline void SetLEDBrightnessResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.SetLEDBrightnessResponse.header)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace spot_cam
}  // namespace api
}  // namespace bosdyn

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto
