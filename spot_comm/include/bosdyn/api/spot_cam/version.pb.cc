// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/spot_cam/version.proto

#include "bosdyn/api/spot_cam/version.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2frobot_5fid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SoftwareVersion_bosdyn_2fapi_2frobot_5fid_2eproto;
namespace bosdyn {
namespace api {
namespace spot_cam {
class GetSoftwareVersionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetSoftwareVersionRequest> _instance;
} _GetSoftwareVersionRequest_default_instance_;
class GetSoftwareVersionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetSoftwareVersionResponse> _instance;
} _GetSoftwareVersionResponse_default_instance_;
}  // namespace spot_cam
}  // namespace api
}  // namespace bosdyn
static void InitDefaultsscc_info_GetSoftwareVersionRequest_bosdyn_2fapi_2fspot_5fcam_2fversion_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_GetSoftwareVersionRequest_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::GetSoftwareVersionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::GetSoftwareVersionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetSoftwareVersionRequest_bosdyn_2fapi_2fspot_5fcam_2fversion_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetSoftwareVersionRequest_bosdyn_2fapi_2fspot_5fcam_2fversion_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_GetSoftwareVersionResponse_bosdyn_2fapi_2fspot_5fcam_2fversion_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_GetSoftwareVersionResponse_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::GetSoftwareVersionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::GetSoftwareVersionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetSoftwareVersionResponse_bosdyn_2fapi_2fspot_5fcam_2fversion_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetSoftwareVersionResponse_bosdyn_2fapi_2fspot_5fcam_2fversion_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_SoftwareVersion_bosdyn_2fapi_2frobot_5fid_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bosdyn_2fapi_2fspot_5fcam_2fversion_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_bosdyn_2fapi_2fspot_5fcam_2fversion_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bosdyn_2fapi_2fspot_5fcam_2fversion_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bosdyn_2fapi_2fspot_5fcam_2fversion_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetSoftwareVersionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetSoftwareVersionRequest, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetSoftwareVersionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetSoftwareVersionResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetSoftwareVersionResponse, version_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::bosdyn::api::spot_cam::GetSoftwareVersionRequest)},
  { 6, -1, sizeof(::bosdyn::api::spot_cam::GetSoftwareVersionResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_GetSoftwareVersionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_GetSoftwareVersionResponse_default_instance_),
};

const char descriptor_table_protodef_bosdyn_2fapi_2fspot_5fcam_2fversion_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!bosdyn/api/spot_cam/version.proto\022\023bos"
  "dyn.api.spot_cam\032\027bosdyn/api/header.prot"
  "o\032\031bosdyn/api/robot_id.proto\"F\n\031GetSoftw"
  "areVersionRequest\022)\n\006header\030\001 \001(\0132\031.bosd"
  "yn.api.RequestHeader\"v\n\032GetSoftwareVersi"
  "onResponse\022*\n\006header\030\001 \001(\0132\032.bosdyn.api."
  "ResponseHeader\022,\n\007version\030\002 \001(\0132\033.bosdyn"
  ".api.SoftwareVersionB\016B\014VersionProtob\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fversion_2eproto_deps[2] = {
  &::descriptor_table_bosdyn_2fapi_2fheader_2eproto,
  &::descriptor_table_bosdyn_2fapi_2frobot_5fid_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fversion_2eproto_sccs[2] = {
  &scc_info_GetSoftwareVersionRequest_bosdyn_2fapi_2fspot_5fcam_2fversion_2eproto.base,
  &scc_info_GetSoftwareVersionResponse_bosdyn_2fapi_2fspot_5fcam_2fversion_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fversion_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fversion_2eproto = {
  false, false, descriptor_table_protodef_bosdyn_2fapi_2fspot_5fcam_2fversion_2eproto, "bosdyn/api/spot_cam/version.proto", 324,
  &descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fversion_2eproto_once, descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fversion_2eproto_sccs, descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fversion_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_bosdyn_2fapi_2fspot_5fcam_2fversion_2eproto::offsets,
  file_level_metadata_bosdyn_2fapi_2fspot_5fcam_2fversion_2eproto, 2, file_level_enum_descriptors_bosdyn_2fapi_2fspot_5fcam_2fversion_2eproto, file_level_service_descriptors_bosdyn_2fapi_2fspot_5fcam_2fversion_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bosdyn_2fapi_2fspot_5fcam_2fversion_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fversion_2eproto)), true);
namespace bosdyn {
namespace api {
namespace spot_cam {

// ===================================================================

void GetSoftwareVersionRequest::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_GetSoftwareVersionRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
}
class GetSoftwareVersionRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const GetSoftwareVersionRequest* msg);
};

const ::bosdyn::api::RequestHeader&
GetSoftwareVersionRequest::_Internal::header(const GetSoftwareVersionRequest* msg) {
  return *msg->header_;
}
void GetSoftwareVersionRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
GetSoftwareVersionRequest::GetSoftwareVersionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.GetSoftwareVersionRequest)
}
GetSoftwareVersionRequest::GetSoftwareVersionRequest(const GetSoftwareVersionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.GetSoftwareVersionRequest)
}

void GetSoftwareVersionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetSoftwareVersionRequest_bosdyn_2fapi_2fspot_5fcam_2fversion_2eproto.base);
  header_ = nullptr;
}

GetSoftwareVersionRequest::~GetSoftwareVersionRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.GetSoftwareVersionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetSoftwareVersionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void GetSoftwareVersionRequest::ArenaDtor(void* object) {
  GetSoftwareVersionRequest* _this = reinterpret_cast< GetSoftwareVersionRequest* >(object);
  (void)_this;
}
void GetSoftwareVersionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetSoftwareVersionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetSoftwareVersionRequest& GetSoftwareVersionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetSoftwareVersionRequest_bosdyn_2fapi_2fspot_5fcam_2fversion_2eproto.base);
  return *internal_default_instance();
}


void GetSoftwareVersionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.GetSoftwareVersionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSoftwareVersionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSoftwareVersionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.GetSoftwareVersionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.GetSoftwareVersionRequest)
  return target;
}

size_t GetSoftwareVersionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.GetSoftwareVersionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSoftwareVersionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.GetSoftwareVersionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSoftwareVersionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetSoftwareVersionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.GetSoftwareVersionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.GetSoftwareVersionRequest)
    MergeFrom(*source);
  }
}

void GetSoftwareVersionRequest::MergeFrom(const GetSoftwareVersionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.GetSoftwareVersionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
}

void GetSoftwareVersionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.GetSoftwareVersionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSoftwareVersionRequest::CopyFrom(const GetSoftwareVersionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.GetSoftwareVersionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSoftwareVersionRequest::IsInitialized() const {
  return true;
}

void GetSoftwareVersionRequest::InternalSwap(GetSoftwareVersionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSoftwareVersionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetSoftwareVersionResponse::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_GetSoftwareVersionResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
  ::bosdyn::api::spot_cam::_GetSoftwareVersionResponse_default_instance_._instance.get_mutable()->version_ = const_cast< ::bosdyn::api::SoftwareVersion*>(
      ::bosdyn::api::SoftwareVersion::internal_default_instance());
}
class GetSoftwareVersionResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const GetSoftwareVersionResponse* msg);
  static const ::bosdyn::api::SoftwareVersion& version(const GetSoftwareVersionResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
GetSoftwareVersionResponse::_Internal::header(const GetSoftwareVersionResponse* msg) {
  return *msg->header_;
}
const ::bosdyn::api::SoftwareVersion&
GetSoftwareVersionResponse::_Internal::version(const GetSoftwareVersionResponse* msg) {
  return *msg->version_;
}
void GetSoftwareVersionResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void GetSoftwareVersionResponse::clear_version() {
  if (GetArena() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
}
GetSoftwareVersionResponse::GetSoftwareVersionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.GetSoftwareVersionResponse)
}
GetSoftwareVersionResponse::GetSoftwareVersionResponse(const GetSoftwareVersionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_version()) {
    version_ = new ::bosdyn::api::SoftwareVersion(*from.version_);
  } else {
    version_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.GetSoftwareVersionResponse)
}

void GetSoftwareVersionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetSoftwareVersionResponse_bosdyn_2fapi_2fspot_5fcam_2fversion_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&header_)) + sizeof(version_));
}

GetSoftwareVersionResponse::~GetSoftwareVersionResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.GetSoftwareVersionResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetSoftwareVersionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete version_;
}

void GetSoftwareVersionResponse::ArenaDtor(void* object) {
  GetSoftwareVersionResponse* _this = reinterpret_cast< GetSoftwareVersionResponse* >(object);
  (void)_this;
}
void GetSoftwareVersionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetSoftwareVersionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetSoftwareVersionResponse& GetSoftwareVersionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetSoftwareVersionResponse_bosdyn_2fapi_2fspot_5fcam_2fversion_2eproto.base);
  return *internal_default_instance();
}


void GetSoftwareVersionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.GetSoftwareVersionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSoftwareVersionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.SoftwareVersion version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_version(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSoftwareVersionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.GetSoftwareVersionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.SoftwareVersion version = 2;
  if (this->has_version()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::version(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.GetSoftwareVersionResponse)
  return target;
}

size_t GetSoftwareVersionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.GetSoftwareVersionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.SoftwareVersion version = 2;
  if (this->has_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *version_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSoftwareVersionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.GetSoftwareVersionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSoftwareVersionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetSoftwareVersionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.GetSoftwareVersionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.GetSoftwareVersionResponse)
    MergeFrom(*source);
  }
}

void GetSoftwareVersionResponse::MergeFrom(const GetSoftwareVersionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.GetSoftwareVersionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.has_version()) {
    _internal_mutable_version()->::bosdyn::api::SoftwareVersion::MergeFrom(from._internal_version());
  }
}

void GetSoftwareVersionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.GetSoftwareVersionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSoftwareVersionResponse::CopyFrom(const GetSoftwareVersionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.GetSoftwareVersionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSoftwareVersionResponse::IsInitialized() const {
  return true;
}

void GetSoftwareVersionResponse::InternalSwap(GetSoftwareVersionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetSoftwareVersionResponse, version_)
      + sizeof(GetSoftwareVersionResponse::version_)
      - PROTOBUF_FIELD_OFFSET(GetSoftwareVersionResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSoftwareVersionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace spot_cam
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::GetSoftwareVersionRequest* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::GetSoftwareVersionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::GetSoftwareVersionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::GetSoftwareVersionResponse* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::GetSoftwareVersionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::GetSoftwareVersionResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
