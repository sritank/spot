// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/spot_cam/health.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fspot_5fcam_2fhealth_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fspot_5fcam_2fhealth_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "bosdyn/api/header.pb.h"
#include "bosdyn/api/robot_state.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fspot_5fcam_2fhealth_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bosdyn_2fapi_2fspot_5fcam_2fhealth_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fhealth_2eproto;
namespace bosdyn {
namespace api {
namespace spot_cam {
class ClearBITEventsRequest;
class ClearBITEventsRequestDefaultTypeInternal;
extern ClearBITEventsRequestDefaultTypeInternal _ClearBITEventsRequest_default_instance_;
class ClearBITEventsResponse;
class ClearBITEventsResponseDefaultTypeInternal;
extern ClearBITEventsResponseDefaultTypeInternal _ClearBITEventsResponse_default_instance_;
class GetBITStatusRequest;
class GetBITStatusRequestDefaultTypeInternal;
extern GetBITStatusRequestDefaultTypeInternal _GetBITStatusRequest_default_instance_;
class GetBITStatusResponse;
class GetBITStatusResponseDefaultTypeInternal;
extern GetBITStatusResponseDefaultTypeInternal _GetBITStatusResponse_default_instance_;
class GetBITStatusResponse_Degradation;
class GetBITStatusResponse_DegradationDefaultTypeInternal;
extern GetBITStatusResponse_DegradationDefaultTypeInternal _GetBITStatusResponse_Degradation_default_instance_;
class GetTemperatureRequest;
class GetTemperatureRequestDefaultTypeInternal;
extern GetTemperatureRequestDefaultTypeInternal _GetTemperatureRequest_default_instance_;
class GetTemperatureResponse;
class GetTemperatureResponseDefaultTypeInternal;
extern GetTemperatureResponseDefaultTypeInternal _GetTemperatureResponse_default_instance_;
class Temperature;
class TemperatureDefaultTypeInternal;
extern TemperatureDefaultTypeInternal _Temperature_default_instance_;
}  // namespace spot_cam
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> ::bosdyn::api::spot_cam::ClearBITEventsRequest* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::ClearBITEventsRequest>(Arena*);
template<> ::bosdyn::api::spot_cam::ClearBITEventsResponse* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::ClearBITEventsResponse>(Arena*);
template<> ::bosdyn::api::spot_cam::GetBITStatusRequest* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::GetBITStatusRequest>(Arena*);
template<> ::bosdyn::api::spot_cam::GetBITStatusResponse* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::GetBITStatusResponse>(Arena*);
template<> ::bosdyn::api::spot_cam::GetBITStatusResponse_Degradation* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::GetBITStatusResponse_Degradation>(Arena*);
template<> ::bosdyn::api::spot_cam::GetTemperatureRequest* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::GetTemperatureRequest>(Arena*);
template<> ::bosdyn::api::spot_cam::GetTemperatureResponse* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::GetTemperatureResponse>(Arena*);
template<> ::bosdyn::api::spot_cam::Temperature* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::Temperature>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bosdyn {
namespace api {
namespace spot_cam {

enum GetBITStatusResponse_Degradation_DegradationType : int {
  GetBITStatusResponse_Degradation_DegradationType_STORAGE = 0,
  GetBITStatusResponse_Degradation_DegradationType_PTZ = 1,
  GetBITStatusResponse_Degradation_DegradationType_LED = 2,
  GetBITStatusResponse_Degradation_DegradationType_GetBITStatusResponse_Degradation_DegradationType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GetBITStatusResponse_Degradation_DegradationType_GetBITStatusResponse_Degradation_DegradationType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GetBITStatusResponse_Degradation_DegradationType_IsValid(int value);
constexpr GetBITStatusResponse_Degradation_DegradationType GetBITStatusResponse_Degradation_DegradationType_DegradationType_MIN = GetBITStatusResponse_Degradation_DegradationType_STORAGE;
constexpr GetBITStatusResponse_Degradation_DegradationType GetBITStatusResponse_Degradation_DegradationType_DegradationType_MAX = GetBITStatusResponse_Degradation_DegradationType_LED;
constexpr int GetBITStatusResponse_Degradation_DegradationType_DegradationType_ARRAYSIZE = GetBITStatusResponse_Degradation_DegradationType_DegradationType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetBITStatusResponse_Degradation_DegradationType_descriptor();
template<typename T>
inline const std::string& GetBITStatusResponse_Degradation_DegradationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GetBITStatusResponse_Degradation_DegradationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GetBITStatusResponse_Degradation_DegradationType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GetBITStatusResponse_Degradation_DegradationType_descriptor(), enum_t_value);
}
inline bool GetBITStatusResponse_Degradation_DegradationType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GetBITStatusResponse_Degradation_DegradationType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GetBITStatusResponse_Degradation_DegradationType>(
    GetBITStatusResponse_Degradation_DegradationType_descriptor(), name, value);
}
// ===================================================================

class Temperature PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.Temperature) */ {
 public:
  inline Temperature() : Temperature(nullptr) {}
  virtual ~Temperature();

  Temperature(const Temperature& from);
  Temperature(Temperature&& from) noexcept
    : Temperature() {
    *this = ::std::move(from);
  }

  inline Temperature& operator=(const Temperature& from) {
    CopyFrom(from);
    return *this;
  }
  inline Temperature& operator=(Temperature&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Temperature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Temperature* internal_default_instance() {
    return reinterpret_cast<const Temperature*>(
               &_Temperature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Temperature& a, Temperature& b) {
    a.Swap(&b);
  }
  inline void Swap(Temperature* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Temperature* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Temperature* New() const final {
    return CreateMaybeMessage<Temperature>(nullptr);
  }

  Temperature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Temperature>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Temperature& from);
  void MergeFrom(const Temperature& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Temperature* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.Temperature";
  }
  protected:
  explicit Temperature(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fhealth_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fhealth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelNameFieldNumber = 1,
    kTemperatureFieldNumber = 2,
  };
  // string channel_name = 1;
  void clear_channel_name();
  const std::string& channel_name() const;
  void set_channel_name(const std::string& value);
  void set_channel_name(std::string&& value);
  void set_channel_name(const char* value);
  void set_channel_name(const char* value, size_t size);
  std::string* mutable_channel_name();
  std::string* release_channel_name();
  void set_allocated_channel_name(std::string* channel_name);
  private:
  const std::string& _internal_channel_name() const;
  void _internal_set_channel_name(const std::string& value);
  std::string* _internal_mutable_channel_name();
  public:

  // int64 temperature = 2;
  void clear_temperature();
  ::PROTOBUF_NAMESPACE_ID::int64 temperature() const;
  void set_temperature(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_temperature() const;
  void _internal_set_temperature(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.Temperature)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_name_;
  ::PROTOBUF_NAMESPACE_ID::int64 temperature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fhealth_2eproto;
};
// -------------------------------------------------------------------

class ClearBITEventsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.ClearBITEventsRequest) */ {
 public:
  inline ClearBITEventsRequest() : ClearBITEventsRequest(nullptr) {}
  virtual ~ClearBITEventsRequest();

  ClearBITEventsRequest(const ClearBITEventsRequest& from);
  ClearBITEventsRequest(ClearBITEventsRequest&& from) noexcept
    : ClearBITEventsRequest() {
    *this = ::std::move(from);
  }

  inline ClearBITEventsRequest& operator=(const ClearBITEventsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearBITEventsRequest& operator=(ClearBITEventsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClearBITEventsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClearBITEventsRequest* internal_default_instance() {
    return reinterpret_cast<const ClearBITEventsRequest*>(
               &_ClearBITEventsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ClearBITEventsRequest& a, ClearBITEventsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearBITEventsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClearBITEventsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClearBITEventsRequest* New() const final {
    return CreateMaybeMessage<ClearBITEventsRequest>(nullptr);
  }

  ClearBITEventsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClearBITEventsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClearBITEventsRequest& from);
  void MergeFrom(const ClearBITEventsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClearBITEventsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.ClearBITEventsRequest";
  }
  protected:
  explicit ClearBITEventsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fhealth_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fhealth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.ClearBITEventsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::RequestHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fhealth_2eproto;
};
// -------------------------------------------------------------------

class ClearBITEventsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.ClearBITEventsResponse) */ {
 public:
  inline ClearBITEventsResponse() : ClearBITEventsResponse(nullptr) {}
  virtual ~ClearBITEventsResponse();

  ClearBITEventsResponse(const ClearBITEventsResponse& from);
  ClearBITEventsResponse(ClearBITEventsResponse&& from) noexcept
    : ClearBITEventsResponse() {
    *this = ::std::move(from);
  }

  inline ClearBITEventsResponse& operator=(const ClearBITEventsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearBITEventsResponse& operator=(ClearBITEventsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClearBITEventsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClearBITEventsResponse* internal_default_instance() {
    return reinterpret_cast<const ClearBITEventsResponse*>(
               &_ClearBITEventsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ClearBITEventsResponse& a, ClearBITEventsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearBITEventsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClearBITEventsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClearBITEventsResponse* New() const final {
    return CreateMaybeMessage<ClearBITEventsResponse>(nullptr);
  }

  ClearBITEventsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClearBITEventsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClearBITEventsResponse& from);
  void MergeFrom(const ClearBITEventsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClearBITEventsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.ClearBITEventsResponse";
  }
  protected:
  explicit ClearBITEventsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fhealth_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fhealth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.ClearBITEventsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::ResponseHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fhealth_2eproto;
};
// -------------------------------------------------------------------

class GetBITStatusRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.GetBITStatusRequest) */ {
 public:
  inline GetBITStatusRequest() : GetBITStatusRequest(nullptr) {}
  virtual ~GetBITStatusRequest();

  GetBITStatusRequest(const GetBITStatusRequest& from);
  GetBITStatusRequest(GetBITStatusRequest&& from) noexcept
    : GetBITStatusRequest() {
    *this = ::std::move(from);
  }

  inline GetBITStatusRequest& operator=(const GetBITStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBITStatusRequest& operator=(GetBITStatusRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBITStatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBITStatusRequest* internal_default_instance() {
    return reinterpret_cast<const GetBITStatusRequest*>(
               &_GetBITStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetBITStatusRequest& a, GetBITStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBITStatusRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBITStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBITStatusRequest* New() const final {
    return CreateMaybeMessage<GetBITStatusRequest>(nullptr);
  }

  GetBITStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBITStatusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBITStatusRequest& from);
  void MergeFrom(const GetBITStatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBITStatusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.GetBITStatusRequest";
  }
  protected:
  explicit GetBITStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fhealth_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fhealth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.GetBITStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::RequestHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fhealth_2eproto;
};
// -------------------------------------------------------------------

class GetBITStatusResponse_Degradation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.GetBITStatusResponse.Degradation) */ {
 public:
  inline GetBITStatusResponse_Degradation() : GetBITStatusResponse_Degradation(nullptr) {}
  virtual ~GetBITStatusResponse_Degradation();

  GetBITStatusResponse_Degradation(const GetBITStatusResponse_Degradation& from);
  GetBITStatusResponse_Degradation(GetBITStatusResponse_Degradation&& from) noexcept
    : GetBITStatusResponse_Degradation() {
    *this = ::std::move(from);
  }

  inline GetBITStatusResponse_Degradation& operator=(const GetBITStatusResponse_Degradation& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBITStatusResponse_Degradation& operator=(GetBITStatusResponse_Degradation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBITStatusResponse_Degradation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBITStatusResponse_Degradation* internal_default_instance() {
    return reinterpret_cast<const GetBITStatusResponse_Degradation*>(
               &_GetBITStatusResponse_Degradation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetBITStatusResponse_Degradation& a, GetBITStatusResponse_Degradation& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBITStatusResponse_Degradation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBITStatusResponse_Degradation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBITStatusResponse_Degradation* New() const final {
    return CreateMaybeMessage<GetBITStatusResponse_Degradation>(nullptr);
  }

  GetBITStatusResponse_Degradation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBITStatusResponse_Degradation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBITStatusResponse_Degradation& from);
  void MergeFrom(const GetBITStatusResponse_Degradation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBITStatusResponse_Degradation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.GetBITStatusResponse.Degradation";
  }
  protected:
  explicit GetBITStatusResponse_Degradation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fhealth_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fhealth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetBITStatusResponse_Degradation_DegradationType DegradationType;
  static constexpr DegradationType STORAGE =
    GetBITStatusResponse_Degradation_DegradationType_STORAGE;
  static constexpr DegradationType PTZ =
    GetBITStatusResponse_Degradation_DegradationType_PTZ;
  static constexpr DegradationType LED =
    GetBITStatusResponse_Degradation_DegradationType_LED;
  static inline bool DegradationType_IsValid(int value) {
    return GetBITStatusResponse_Degradation_DegradationType_IsValid(value);
  }
  static constexpr DegradationType DegradationType_MIN =
    GetBITStatusResponse_Degradation_DegradationType_DegradationType_MIN;
  static constexpr DegradationType DegradationType_MAX =
    GetBITStatusResponse_Degradation_DegradationType_DegradationType_MAX;
  static constexpr int DegradationType_ARRAYSIZE =
    GetBITStatusResponse_Degradation_DegradationType_DegradationType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DegradationType_descriptor() {
    return GetBITStatusResponse_Degradation_DegradationType_descriptor();
  }
  template<typename T>
  static inline const std::string& DegradationType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DegradationType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DegradationType_Name.");
    return GetBITStatusResponse_Degradation_DegradationType_Name(enum_t_value);
  }
  static inline bool DegradationType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DegradationType* value) {
    return GetBITStatusResponse_Degradation_DegradationType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .bosdyn.api.spot_cam.GetBITStatusResponse.Degradation.DegradationType type = 1;
  void clear_type();
  ::bosdyn::api::spot_cam::GetBITStatusResponse_Degradation_DegradationType type() const;
  void set_type(::bosdyn::api::spot_cam::GetBITStatusResponse_Degradation_DegradationType value);
  private:
  ::bosdyn::api::spot_cam::GetBITStatusResponse_Degradation_DegradationType _internal_type() const;
  void _internal_set_type(::bosdyn::api::spot_cam::GetBITStatusResponse_Degradation_DegradationType value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.GetBITStatusResponse.Degradation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fhealth_2eproto;
};
// -------------------------------------------------------------------

class GetBITStatusResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.GetBITStatusResponse) */ {
 public:
  inline GetBITStatusResponse() : GetBITStatusResponse(nullptr) {}
  virtual ~GetBITStatusResponse();

  GetBITStatusResponse(const GetBITStatusResponse& from);
  GetBITStatusResponse(GetBITStatusResponse&& from) noexcept
    : GetBITStatusResponse() {
    *this = ::std::move(from);
  }

  inline GetBITStatusResponse& operator=(const GetBITStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBITStatusResponse& operator=(GetBITStatusResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBITStatusResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBITStatusResponse* internal_default_instance() {
    return reinterpret_cast<const GetBITStatusResponse*>(
               &_GetBITStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetBITStatusResponse& a, GetBITStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBITStatusResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBITStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBITStatusResponse* New() const final {
    return CreateMaybeMessage<GetBITStatusResponse>(nullptr);
  }

  GetBITStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBITStatusResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBITStatusResponse& from);
  void MergeFrom(const GetBITStatusResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBITStatusResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.GetBITStatusResponse";
  }
  protected:
  explicit GetBITStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fhealth_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fhealth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetBITStatusResponse_Degradation Degradation;

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 2,
    kDegradationsFieldNumber = 3,
    kHeaderFieldNumber = 1,
  };
  // repeated .bosdyn.api.SystemFault events = 2;
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  ::bosdyn::api::SystemFault* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::SystemFault >*
      mutable_events();
  private:
  const ::bosdyn::api::SystemFault& _internal_events(int index) const;
  ::bosdyn::api::SystemFault* _internal_add_events();
  public:
  const ::bosdyn::api::SystemFault& events(int index) const;
  ::bosdyn::api::SystemFault* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::SystemFault >&
      events() const;

  // repeated .bosdyn.api.spot_cam.GetBITStatusResponse.Degradation degradations = 3;
  int degradations_size() const;
  private:
  int _internal_degradations_size() const;
  public:
  void clear_degradations();
  ::bosdyn::api::spot_cam::GetBITStatusResponse_Degradation* mutable_degradations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::spot_cam::GetBITStatusResponse_Degradation >*
      mutable_degradations();
  private:
  const ::bosdyn::api::spot_cam::GetBITStatusResponse_Degradation& _internal_degradations(int index) const;
  ::bosdyn::api::spot_cam::GetBITStatusResponse_Degradation* _internal_add_degradations();
  public:
  const ::bosdyn::api::spot_cam::GetBITStatusResponse_Degradation& degradations(int index) const;
  ::bosdyn::api::spot_cam::GetBITStatusResponse_Degradation* add_degradations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::spot_cam::GetBITStatusResponse_Degradation >&
      degradations() const;

  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.GetBITStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::SystemFault > events_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::spot_cam::GetBITStatusResponse_Degradation > degradations_;
  ::bosdyn::api::ResponseHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fhealth_2eproto;
};
// -------------------------------------------------------------------

class GetTemperatureRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.GetTemperatureRequest) */ {
 public:
  inline GetTemperatureRequest() : GetTemperatureRequest(nullptr) {}
  virtual ~GetTemperatureRequest();

  GetTemperatureRequest(const GetTemperatureRequest& from);
  GetTemperatureRequest(GetTemperatureRequest&& from) noexcept
    : GetTemperatureRequest() {
    *this = ::std::move(from);
  }

  inline GetTemperatureRequest& operator=(const GetTemperatureRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTemperatureRequest& operator=(GetTemperatureRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTemperatureRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTemperatureRequest* internal_default_instance() {
    return reinterpret_cast<const GetTemperatureRequest*>(
               &_GetTemperatureRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetTemperatureRequest& a, GetTemperatureRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTemperatureRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTemperatureRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTemperatureRequest* New() const final {
    return CreateMaybeMessage<GetTemperatureRequest>(nullptr);
  }

  GetTemperatureRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTemperatureRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTemperatureRequest& from);
  void MergeFrom(const GetTemperatureRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTemperatureRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.GetTemperatureRequest";
  }
  protected:
  explicit GetTemperatureRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fhealth_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fhealth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.GetTemperatureRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::RequestHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fhealth_2eproto;
};
// -------------------------------------------------------------------

class GetTemperatureResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.GetTemperatureResponse) */ {
 public:
  inline GetTemperatureResponse() : GetTemperatureResponse(nullptr) {}
  virtual ~GetTemperatureResponse();

  GetTemperatureResponse(const GetTemperatureResponse& from);
  GetTemperatureResponse(GetTemperatureResponse&& from) noexcept
    : GetTemperatureResponse() {
    *this = ::std::move(from);
  }

  inline GetTemperatureResponse& operator=(const GetTemperatureResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTemperatureResponse& operator=(GetTemperatureResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTemperatureResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTemperatureResponse* internal_default_instance() {
    return reinterpret_cast<const GetTemperatureResponse*>(
               &_GetTemperatureResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetTemperatureResponse& a, GetTemperatureResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTemperatureResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTemperatureResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTemperatureResponse* New() const final {
    return CreateMaybeMessage<GetTemperatureResponse>(nullptr);
  }

  GetTemperatureResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTemperatureResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTemperatureResponse& from);
  void MergeFrom(const GetTemperatureResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTemperatureResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.GetTemperatureResponse";
  }
  protected:
  explicit GetTemperatureResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fhealth_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fhealth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTempsFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .bosdyn.api.spot_cam.Temperature temps = 2;
  int temps_size() const;
  private:
  int _internal_temps_size() const;
  public:
  void clear_temps();
  ::bosdyn::api::spot_cam::Temperature* mutable_temps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::spot_cam::Temperature >*
      mutable_temps();
  private:
  const ::bosdyn::api::spot_cam::Temperature& _internal_temps(int index) const;
  ::bosdyn::api::spot_cam::Temperature* _internal_add_temps();
  public:
  const ::bosdyn::api::spot_cam::Temperature& temps(int index) const;
  ::bosdyn::api::spot_cam::Temperature* add_temps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::spot_cam::Temperature >&
      temps() const;

  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.GetTemperatureResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::spot_cam::Temperature > temps_;
  ::bosdyn::api::ResponseHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fhealth_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Temperature

// string channel_name = 1;
inline void Temperature::clear_channel_name() {
  channel_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Temperature::channel_name() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.Temperature.channel_name)
  return _internal_channel_name();
}
inline void Temperature::set_channel_name(const std::string& value) {
  _internal_set_channel_name(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.spot_cam.Temperature.channel_name)
}
inline std::string* Temperature::mutable_channel_name() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.Temperature.channel_name)
  return _internal_mutable_channel_name();
}
inline const std::string& Temperature::_internal_channel_name() const {
  return channel_name_.Get();
}
inline void Temperature::_internal_set_channel_name(const std::string& value) {
  
  channel_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Temperature::set_channel_name(std::string&& value) {
  
  channel_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.spot_cam.Temperature.channel_name)
}
inline void Temperature::set_channel_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channel_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.spot_cam.Temperature.channel_name)
}
inline void Temperature::set_channel_name(const char* value,
    size_t size) {
  
  channel_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.spot_cam.Temperature.channel_name)
}
inline std::string* Temperature::_internal_mutable_channel_name() {
  
  return channel_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Temperature::release_channel_name() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.Temperature.channel_name)
  return channel_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Temperature::set_allocated_channel_name(std::string* channel_name) {
  if (channel_name != nullptr) {
    
  } else {
    
  }
  channel_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.Temperature.channel_name)
}

// int64 temperature = 2;
inline void Temperature::clear_temperature() {
  temperature_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Temperature::_internal_temperature() const {
  return temperature_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Temperature::temperature() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.Temperature.temperature)
  return _internal_temperature();
}
inline void Temperature::_internal_set_temperature(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  temperature_ = value;
}
inline void Temperature::set_temperature(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.spot_cam.Temperature.temperature)
}

// -------------------------------------------------------------------

// ClearBITEventsRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool ClearBITEventsRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool ClearBITEventsRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& ClearBITEventsRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::RequestHeader*>(
      &::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& ClearBITEventsRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.ClearBITEventsRequest.header)
  return _internal_header();
}
inline void ClearBITEventsRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.ClearBITEventsRequest.header)
}
inline ::bosdyn::api::RequestHeader* ClearBITEventsRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::RequestHeader* ClearBITEventsRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.ClearBITEventsRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* ClearBITEventsRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::RequestHeader* ClearBITEventsRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.ClearBITEventsRequest.header)
  return _internal_mutable_header();
}
inline void ClearBITEventsRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.ClearBITEventsRequest.header)
}

// -------------------------------------------------------------------

// ClearBITEventsResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool ClearBITEventsResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool ClearBITEventsResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& ClearBITEventsResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::ResponseHeader*>(
      &::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& ClearBITEventsResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.ClearBITEventsResponse.header)
  return _internal_header();
}
inline void ClearBITEventsResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.ClearBITEventsResponse.header)
}
inline ::bosdyn::api::ResponseHeader* ClearBITEventsResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::ResponseHeader* ClearBITEventsResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.ClearBITEventsResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* ClearBITEventsResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::ResponseHeader* ClearBITEventsResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.ClearBITEventsResponse.header)
  return _internal_mutable_header();
}
inline void ClearBITEventsResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.ClearBITEventsResponse.header)
}

// -------------------------------------------------------------------

// GetBITStatusRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool GetBITStatusRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool GetBITStatusRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& GetBITStatusRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::RequestHeader*>(
      &::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& GetBITStatusRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.GetBITStatusRequest.header)
  return _internal_header();
}
inline void GetBITStatusRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.GetBITStatusRequest.header)
}
inline ::bosdyn::api::RequestHeader* GetBITStatusRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::RequestHeader* GetBITStatusRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.GetBITStatusRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* GetBITStatusRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::RequestHeader* GetBITStatusRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.GetBITStatusRequest.header)
  return _internal_mutable_header();
}
inline void GetBITStatusRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.GetBITStatusRequest.header)
}

// -------------------------------------------------------------------

// GetBITStatusResponse_Degradation

// .bosdyn.api.spot_cam.GetBITStatusResponse.Degradation.DegradationType type = 1;
inline void GetBITStatusResponse_Degradation::clear_type() {
  type_ = 0;
}
inline ::bosdyn::api::spot_cam::GetBITStatusResponse_Degradation_DegradationType GetBITStatusResponse_Degradation::_internal_type() const {
  return static_cast< ::bosdyn::api::spot_cam::GetBITStatusResponse_Degradation_DegradationType >(type_);
}
inline ::bosdyn::api::spot_cam::GetBITStatusResponse_Degradation_DegradationType GetBITStatusResponse_Degradation::type() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.GetBITStatusResponse.Degradation.type)
  return _internal_type();
}
inline void GetBITStatusResponse_Degradation::_internal_set_type(::bosdyn::api::spot_cam::GetBITStatusResponse_Degradation_DegradationType value) {
  
  type_ = value;
}
inline void GetBITStatusResponse_Degradation::set_type(::bosdyn::api::spot_cam::GetBITStatusResponse_Degradation_DegradationType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.spot_cam.GetBITStatusResponse.Degradation.type)
}

// string description = 2;
inline void GetBITStatusResponse_Degradation::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetBITStatusResponse_Degradation::description() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.GetBITStatusResponse.Degradation.description)
  return _internal_description();
}
inline void GetBITStatusResponse_Degradation::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.spot_cam.GetBITStatusResponse.Degradation.description)
}
inline std::string* GetBITStatusResponse_Degradation::mutable_description() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.GetBITStatusResponse.Degradation.description)
  return _internal_mutable_description();
}
inline const std::string& GetBITStatusResponse_Degradation::_internal_description() const {
  return description_.Get();
}
inline void GetBITStatusResponse_Degradation::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetBITStatusResponse_Degradation::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.spot_cam.GetBITStatusResponse.Degradation.description)
}
inline void GetBITStatusResponse_Degradation::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.spot_cam.GetBITStatusResponse.Degradation.description)
}
inline void GetBITStatusResponse_Degradation::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.spot_cam.GetBITStatusResponse.Degradation.description)
}
inline std::string* GetBITStatusResponse_Degradation::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetBITStatusResponse_Degradation::release_description() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.GetBITStatusResponse.Degradation.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetBITStatusResponse_Degradation::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.GetBITStatusResponse.Degradation.description)
}

// -------------------------------------------------------------------

// GetBITStatusResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool GetBITStatusResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool GetBITStatusResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& GetBITStatusResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::ResponseHeader*>(
      &::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& GetBITStatusResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.GetBITStatusResponse.header)
  return _internal_header();
}
inline void GetBITStatusResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.GetBITStatusResponse.header)
}
inline ::bosdyn::api::ResponseHeader* GetBITStatusResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::ResponseHeader* GetBITStatusResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.GetBITStatusResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* GetBITStatusResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::ResponseHeader* GetBITStatusResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.GetBITStatusResponse.header)
  return _internal_mutable_header();
}
inline void GetBITStatusResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.GetBITStatusResponse.header)
}

// repeated .bosdyn.api.SystemFault events = 2;
inline int GetBITStatusResponse::_internal_events_size() const {
  return events_.size();
}
inline int GetBITStatusResponse::events_size() const {
  return _internal_events_size();
}
inline ::bosdyn::api::SystemFault* GetBITStatusResponse::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.GetBITStatusResponse.events)
  return events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::SystemFault >*
GetBITStatusResponse::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.spot_cam.GetBITStatusResponse.events)
  return &events_;
}
inline const ::bosdyn::api::SystemFault& GetBITStatusResponse::_internal_events(int index) const {
  return events_.Get(index);
}
inline const ::bosdyn::api::SystemFault& GetBITStatusResponse::events(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.GetBITStatusResponse.events)
  return _internal_events(index);
}
inline ::bosdyn::api::SystemFault* GetBITStatusResponse::_internal_add_events() {
  return events_.Add();
}
inline ::bosdyn::api::SystemFault* GetBITStatusResponse::add_events() {
  // @@protoc_insertion_point(field_add:bosdyn.api.spot_cam.GetBITStatusResponse.events)
  return _internal_add_events();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::SystemFault >&
GetBITStatusResponse::events() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.spot_cam.GetBITStatusResponse.events)
  return events_;
}

// repeated .bosdyn.api.spot_cam.GetBITStatusResponse.Degradation degradations = 3;
inline int GetBITStatusResponse::_internal_degradations_size() const {
  return degradations_.size();
}
inline int GetBITStatusResponse::degradations_size() const {
  return _internal_degradations_size();
}
inline void GetBITStatusResponse::clear_degradations() {
  degradations_.Clear();
}
inline ::bosdyn::api::spot_cam::GetBITStatusResponse_Degradation* GetBITStatusResponse::mutable_degradations(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.GetBITStatusResponse.degradations)
  return degradations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::spot_cam::GetBITStatusResponse_Degradation >*
GetBITStatusResponse::mutable_degradations() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.spot_cam.GetBITStatusResponse.degradations)
  return &degradations_;
}
inline const ::bosdyn::api::spot_cam::GetBITStatusResponse_Degradation& GetBITStatusResponse::_internal_degradations(int index) const {
  return degradations_.Get(index);
}
inline const ::bosdyn::api::spot_cam::GetBITStatusResponse_Degradation& GetBITStatusResponse::degradations(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.GetBITStatusResponse.degradations)
  return _internal_degradations(index);
}
inline ::bosdyn::api::spot_cam::GetBITStatusResponse_Degradation* GetBITStatusResponse::_internal_add_degradations() {
  return degradations_.Add();
}
inline ::bosdyn::api::spot_cam::GetBITStatusResponse_Degradation* GetBITStatusResponse::add_degradations() {
  // @@protoc_insertion_point(field_add:bosdyn.api.spot_cam.GetBITStatusResponse.degradations)
  return _internal_add_degradations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::spot_cam::GetBITStatusResponse_Degradation >&
GetBITStatusResponse::degradations() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.spot_cam.GetBITStatusResponse.degradations)
  return degradations_;
}

// -------------------------------------------------------------------

// GetTemperatureRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool GetTemperatureRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool GetTemperatureRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& GetTemperatureRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::RequestHeader*>(
      &::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& GetTemperatureRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.GetTemperatureRequest.header)
  return _internal_header();
}
inline void GetTemperatureRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.GetTemperatureRequest.header)
}
inline ::bosdyn::api::RequestHeader* GetTemperatureRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::RequestHeader* GetTemperatureRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.GetTemperatureRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* GetTemperatureRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::RequestHeader* GetTemperatureRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.GetTemperatureRequest.header)
  return _internal_mutable_header();
}
inline void GetTemperatureRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.GetTemperatureRequest.header)
}

// -------------------------------------------------------------------

// GetTemperatureResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool GetTemperatureResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool GetTemperatureResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& GetTemperatureResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::ResponseHeader*>(
      &::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& GetTemperatureResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.GetTemperatureResponse.header)
  return _internal_header();
}
inline void GetTemperatureResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.GetTemperatureResponse.header)
}
inline ::bosdyn::api::ResponseHeader* GetTemperatureResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::ResponseHeader* GetTemperatureResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.GetTemperatureResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* GetTemperatureResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::ResponseHeader* GetTemperatureResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.GetTemperatureResponse.header)
  return _internal_mutable_header();
}
inline void GetTemperatureResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.GetTemperatureResponse.header)
}

// repeated .bosdyn.api.spot_cam.Temperature temps = 2;
inline int GetTemperatureResponse::_internal_temps_size() const {
  return temps_.size();
}
inline int GetTemperatureResponse::temps_size() const {
  return _internal_temps_size();
}
inline void GetTemperatureResponse::clear_temps() {
  temps_.Clear();
}
inline ::bosdyn::api::spot_cam::Temperature* GetTemperatureResponse::mutable_temps(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.GetTemperatureResponse.temps)
  return temps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::spot_cam::Temperature >*
GetTemperatureResponse::mutable_temps() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.spot_cam.GetTemperatureResponse.temps)
  return &temps_;
}
inline const ::bosdyn::api::spot_cam::Temperature& GetTemperatureResponse::_internal_temps(int index) const {
  return temps_.Get(index);
}
inline const ::bosdyn::api::spot_cam::Temperature& GetTemperatureResponse::temps(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.GetTemperatureResponse.temps)
  return _internal_temps(index);
}
inline ::bosdyn::api::spot_cam::Temperature* GetTemperatureResponse::_internal_add_temps() {
  return temps_.Add();
}
inline ::bosdyn::api::spot_cam::Temperature* GetTemperatureResponse::add_temps() {
  // @@protoc_insertion_point(field_add:bosdyn.api.spot_cam.GetTemperatureResponse.temps)
  return _internal_add_temps();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::spot_cam::Temperature >&
GetTemperatureResponse::temps() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.spot_cam.GetTemperatureResponse.temps)
  return temps_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace spot_cam
}  // namespace api
}  // namespace bosdyn

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bosdyn::api::spot_cam::GetBITStatusResponse_Degradation_DegradationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::spot_cam::GetBITStatusResponse_Degradation_DegradationType>() {
  return ::bosdyn::api::spot_cam::GetBITStatusResponse_Degradation_DegradationType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fspot_5fcam_2fhealth_2eproto
