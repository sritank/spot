// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bosdyn/api/spot_cam/service.proto

#include "bosdyn/api/spot_cam/service.pb.h"
#include "bosdyn/api/spot_cam/service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace bosdyn {
namespace api {
namespace spot_cam {

static const char* CompositorService_method_names[] = {
  "/bosdyn.api.spot_cam.CompositorService/SetScreen",
  "/bosdyn.api.spot_cam.CompositorService/GetScreen",
  "/bosdyn.api.spot_cam.CompositorService/ListScreens",
  "/bosdyn.api.spot_cam.CompositorService/GetVisibleCameras",
};

std::unique_ptr< CompositorService::Stub> CompositorService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CompositorService::Stub> stub(new CompositorService::Stub(channel));
  return stub;
}

CompositorService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SetScreen_(CompositorService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetScreen_(CompositorService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListScreens_(CompositorService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetVisibleCameras_(CompositorService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CompositorService::Stub::SetScreen(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::SetScreenRequest& request, ::bosdyn::api::spot_cam::SetScreenResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetScreen_, context, request, response);
}

void CompositorService::Stub::experimental_async::SetScreen(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::SetScreenRequest* request, ::bosdyn::api::spot_cam::SetScreenResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetScreen_, context, request, response, std::move(f));
}

void CompositorService::Stub::experimental_async::SetScreen(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::SetScreenResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetScreen_, context, request, response, std::move(f));
}

void CompositorService::Stub::experimental_async::SetScreen(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::SetScreenRequest* request, ::bosdyn::api::spot_cam::SetScreenResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetScreen_, context, request, response, reactor);
}

void CompositorService::Stub::experimental_async::SetScreen(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::SetScreenResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetScreen_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::SetScreenResponse>* CompositorService::Stub::AsyncSetScreenRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::SetScreenRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::SetScreenResponse>::Create(channel_.get(), cq, rpcmethod_SetScreen_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::SetScreenResponse>* CompositorService::Stub::PrepareAsyncSetScreenRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::SetScreenRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::SetScreenResponse>::Create(channel_.get(), cq, rpcmethod_SetScreen_, context, request, false);
}

::grpc::Status CompositorService::Stub::GetScreen(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetScreenRequest& request, ::bosdyn::api::spot_cam::GetScreenResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetScreen_, context, request, response);
}

void CompositorService::Stub::experimental_async::GetScreen(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetScreenRequest* request, ::bosdyn::api::spot_cam::GetScreenResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetScreen_, context, request, response, std::move(f));
}

void CompositorService::Stub::experimental_async::GetScreen(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::GetScreenResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetScreen_, context, request, response, std::move(f));
}

void CompositorService::Stub::experimental_async::GetScreen(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetScreenRequest* request, ::bosdyn::api::spot_cam::GetScreenResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetScreen_, context, request, response, reactor);
}

void CompositorService::Stub::experimental_async::GetScreen(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::GetScreenResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetScreen_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::GetScreenResponse>* CompositorService::Stub::AsyncGetScreenRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetScreenRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::GetScreenResponse>::Create(channel_.get(), cq, rpcmethod_GetScreen_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::GetScreenResponse>* CompositorService::Stub::PrepareAsyncGetScreenRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetScreenRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::GetScreenResponse>::Create(channel_.get(), cq, rpcmethod_GetScreen_, context, request, false);
}

::grpc::Status CompositorService::Stub::ListScreens(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::ListScreensRequest& request, ::bosdyn::api::spot_cam::ListScreensResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListScreens_, context, request, response);
}

void CompositorService::Stub::experimental_async::ListScreens(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::ListScreensRequest* request, ::bosdyn::api::spot_cam::ListScreensResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListScreens_, context, request, response, std::move(f));
}

void CompositorService::Stub::experimental_async::ListScreens(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::ListScreensResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListScreens_, context, request, response, std::move(f));
}

void CompositorService::Stub::experimental_async::ListScreens(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::ListScreensRequest* request, ::bosdyn::api::spot_cam::ListScreensResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListScreens_, context, request, response, reactor);
}

void CompositorService::Stub::experimental_async::ListScreens(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::ListScreensResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListScreens_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::ListScreensResponse>* CompositorService::Stub::AsyncListScreensRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::ListScreensRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::ListScreensResponse>::Create(channel_.get(), cq, rpcmethod_ListScreens_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::ListScreensResponse>* CompositorService::Stub::PrepareAsyncListScreensRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::ListScreensRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::ListScreensResponse>::Create(channel_.get(), cq, rpcmethod_ListScreens_, context, request, false);
}

::grpc::Status CompositorService::Stub::GetVisibleCameras(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetVisibleCamerasRequest& request, ::bosdyn::api::spot_cam::GetVisibleCamerasResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetVisibleCameras_, context, request, response);
}

void CompositorService::Stub::experimental_async::GetVisibleCameras(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetVisibleCamerasRequest* request, ::bosdyn::api::spot_cam::GetVisibleCamerasResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetVisibleCameras_, context, request, response, std::move(f));
}

void CompositorService::Stub::experimental_async::GetVisibleCameras(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::GetVisibleCamerasResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetVisibleCameras_, context, request, response, std::move(f));
}

void CompositorService::Stub::experimental_async::GetVisibleCameras(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetVisibleCamerasRequest* request, ::bosdyn::api::spot_cam::GetVisibleCamerasResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetVisibleCameras_, context, request, response, reactor);
}

void CompositorService::Stub::experimental_async::GetVisibleCameras(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::GetVisibleCamerasResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetVisibleCameras_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::GetVisibleCamerasResponse>* CompositorService::Stub::AsyncGetVisibleCamerasRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetVisibleCamerasRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::GetVisibleCamerasResponse>::Create(channel_.get(), cq, rpcmethod_GetVisibleCameras_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::GetVisibleCamerasResponse>* CompositorService::Stub::PrepareAsyncGetVisibleCamerasRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetVisibleCamerasRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::GetVisibleCamerasResponse>::Create(channel_.get(), cq, rpcmethod_GetVisibleCameras_, context, request, false);
}

CompositorService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CompositorService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CompositorService::Service, ::bosdyn::api::spot_cam::SetScreenRequest, ::bosdyn::api::spot_cam::SetScreenResponse>(
          [](CompositorService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::spot_cam::SetScreenRequest* req,
             ::bosdyn::api::spot_cam::SetScreenResponse* resp) {
               return service->SetScreen(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CompositorService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CompositorService::Service, ::bosdyn::api::spot_cam::GetScreenRequest, ::bosdyn::api::spot_cam::GetScreenResponse>(
          [](CompositorService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::spot_cam::GetScreenRequest* req,
             ::bosdyn::api::spot_cam::GetScreenResponse* resp) {
               return service->GetScreen(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CompositorService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CompositorService::Service, ::bosdyn::api::spot_cam::ListScreensRequest, ::bosdyn::api::spot_cam::ListScreensResponse>(
          [](CompositorService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::spot_cam::ListScreensRequest* req,
             ::bosdyn::api::spot_cam::ListScreensResponse* resp) {
               return service->ListScreens(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CompositorService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CompositorService::Service, ::bosdyn::api::spot_cam::GetVisibleCamerasRequest, ::bosdyn::api::spot_cam::GetVisibleCamerasResponse>(
          [](CompositorService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::spot_cam::GetVisibleCamerasRequest* req,
             ::bosdyn::api::spot_cam::GetVisibleCamerasResponse* resp) {
               return service->GetVisibleCameras(ctx, req, resp);
             }, this)));
}

CompositorService::Service::~Service() {
}

::grpc::Status CompositorService::Service::SetScreen(::grpc::ServerContext* context, const ::bosdyn::api::spot_cam::SetScreenRequest* request, ::bosdyn::api::spot_cam::SetScreenResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CompositorService::Service::GetScreen(::grpc::ServerContext* context, const ::bosdyn::api::spot_cam::GetScreenRequest* request, ::bosdyn::api::spot_cam::GetScreenResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CompositorService::Service::ListScreens(::grpc::ServerContext* context, const ::bosdyn::api::spot_cam::ListScreensRequest* request, ::bosdyn::api::spot_cam::ListScreensResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CompositorService::Service::GetVisibleCameras(::grpc::ServerContext* context, const ::bosdyn::api::spot_cam::GetVisibleCamerasRequest* request, ::bosdyn::api::spot_cam::GetVisibleCamerasResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* StreamQualityService_method_names[] = {
  "/bosdyn.api.spot_cam.StreamQualityService/SetStreamParams",
  "/bosdyn.api.spot_cam.StreamQualityService/GetStreamParams",
};

std::unique_ptr< StreamQualityService::Stub> StreamQualityService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< StreamQualityService::Stub> stub(new StreamQualityService::Stub(channel));
  return stub;
}

StreamQualityService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SetStreamParams_(StreamQualityService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetStreamParams_(StreamQualityService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status StreamQualityService::Stub::SetStreamParams(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::SetStreamParamsRequest& request, ::bosdyn::api::spot_cam::SetStreamParamsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetStreamParams_, context, request, response);
}

void StreamQualityService::Stub::experimental_async::SetStreamParams(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::SetStreamParamsRequest* request, ::bosdyn::api::spot_cam::SetStreamParamsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetStreamParams_, context, request, response, std::move(f));
}

void StreamQualityService::Stub::experimental_async::SetStreamParams(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::SetStreamParamsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetStreamParams_, context, request, response, std::move(f));
}

void StreamQualityService::Stub::experimental_async::SetStreamParams(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::SetStreamParamsRequest* request, ::bosdyn::api::spot_cam::SetStreamParamsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetStreamParams_, context, request, response, reactor);
}

void StreamQualityService::Stub::experimental_async::SetStreamParams(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::SetStreamParamsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetStreamParams_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::SetStreamParamsResponse>* StreamQualityService::Stub::AsyncSetStreamParamsRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::SetStreamParamsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::SetStreamParamsResponse>::Create(channel_.get(), cq, rpcmethod_SetStreamParams_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::SetStreamParamsResponse>* StreamQualityService::Stub::PrepareAsyncSetStreamParamsRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::SetStreamParamsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::SetStreamParamsResponse>::Create(channel_.get(), cq, rpcmethod_SetStreamParams_, context, request, false);
}

::grpc::Status StreamQualityService::Stub::GetStreamParams(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetStreamParamsRequest& request, ::bosdyn::api::spot_cam::GetStreamParamsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetStreamParams_, context, request, response);
}

void StreamQualityService::Stub::experimental_async::GetStreamParams(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetStreamParamsRequest* request, ::bosdyn::api::spot_cam::GetStreamParamsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetStreamParams_, context, request, response, std::move(f));
}

void StreamQualityService::Stub::experimental_async::GetStreamParams(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::GetStreamParamsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetStreamParams_, context, request, response, std::move(f));
}

void StreamQualityService::Stub::experimental_async::GetStreamParams(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetStreamParamsRequest* request, ::bosdyn::api::spot_cam::GetStreamParamsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetStreamParams_, context, request, response, reactor);
}

void StreamQualityService::Stub::experimental_async::GetStreamParams(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::GetStreamParamsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetStreamParams_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::GetStreamParamsResponse>* StreamQualityService::Stub::AsyncGetStreamParamsRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetStreamParamsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::GetStreamParamsResponse>::Create(channel_.get(), cq, rpcmethod_GetStreamParams_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::GetStreamParamsResponse>* StreamQualityService::Stub::PrepareAsyncGetStreamParamsRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetStreamParamsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::GetStreamParamsResponse>::Create(channel_.get(), cq, rpcmethod_GetStreamParams_, context, request, false);
}

StreamQualityService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StreamQualityService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StreamQualityService::Service, ::bosdyn::api::spot_cam::SetStreamParamsRequest, ::bosdyn::api::spot_cam::SetStreamParamsResponse>(
          [](StreamQualityService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::spot_cam::SetStreamParamsRequest* req,
             ::bosdyn::api::spot_cam::SetStreamParamsResponse* resp) {
               return service->SetStreamParams(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StreamQualityService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StreamQualityService::Service, ::bosdyn::api::spot_cam::GetStreamParamsRequest, ::bosdyn::api::spot_cam::GetStreamParamsResponse>(
          [](StreamQualityService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::spot_cam::GetStreamParamsRequest* req,
             ::bosdyn::api::spot_cam::GetStreamParamsResponse* resp) {
               return service->GetStreamParams(ctx, req, resp);
             }, this)));
}

StreamQualityService::Service::~Service() {
}

::grpc::Status StreamQualityService::Service::SetStreamParams(::grpc::ServerContext* context, const ::bosdyn::api::spot_cam::SetStreamParamsRequest* request, ::bosdyn::api::spot_cam::SetStreamParamsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StreamQualityService::Service::GetStreamParams(::grpc::ServerContext* context, const ::bosdyn::api::spot_cam::GetStreamParamsRequest* request, ::bosdyn::api::spot_cam::GetStreamParamsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* PowerService_method_names[] = {
  "/bosdyn.api.spot_cam.PowerService/SetPowerStatus",
  "/bosdyn.api.spot_cam.PowerService/GetPowerStatus",
};

std::unique_ptr< PowerService::Stub> PowerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PowerService::Stub> stub(new PowerService::Stub(channel));
  return stub;
}

PowerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SetPowerStatus_(PowerService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPowerStatus_(PowerService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PowerService::Stub::SetPowerStatus(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::SetPowerStatusRequest& request, ::bosdyn::api::spot_cam::SetPowerStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetPowerStatus_, context, request, response);
}

void PowerService::Stub::experimental_async::SetPowerStatus(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::SetPowerStatusRequest* request, ::bosdyn::api::spot_cam::SetPowerStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetPowerStatus_, context, request, response, std::move(f));
}

void PowerService::Stub::experimental_async::SetPowerStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::SetPowerStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetPowerStatus_, context, request, response, std::move(f));
}

void PowerService::Stub::experimental_async::SetPowerStatus(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::SetPowerStatusRequest* request, ::bosdyn::api::spot_cam::SetPowerStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetPowerStatus_, context, request, response, reactor);
}

void PowerService::Stub::experimental_async::SetPowerStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::SetPowerStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetPowerStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::SetPowerStatusResponse>* PowerService::Stub::AsyncSetPowerStatusRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::SetPowerStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::SetPowerStatusResponse>::Create(channel_.get(), cq, rpcmethod_SetPowerStatus_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::SetPowerStatusResponse>* PowerService::Stub::PrepareAsyncSetPowerStatusRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::SetPowerStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::SetPowerStatusResponse>::Create(channel_.get(), cq, rpcmethod_SetPowerStatus_, context, request, false);
}

::grpc::Status PowerService::Stub::GetPowerStatus(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetPowerStatusRequest& request, ::bosdyn::api::spot_cam::GetPowerStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetPowerStatus_, context, request, response);
}

void PowerService::Stub::experimental_async::GetPowerStatus(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetPowerStatusRequest* request, ::bosdyn::api::spot_cam::GetPowerStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPowerStatus_, context, request, response, std::move(f));
}

void PowerService::Stub::experimental_async::GetPowerStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::GetPowerStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPowerStatus_, context, request, response, std::move(f));
}

void PowerService::Stub::experimental_async::GetPowerStatus(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetPowerStatusRequest* request, ::bosdyn::api::spot_cam::GetPowerStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPowerStatus_, context, request, response, reactor);
}

void PowerService::Stub::experimental_async::GetPowerStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::GetPowerStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPowerStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::GetPowerStatusResponse>* PowerService::Stub::AsyncGetPowerStatusRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetPowerStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::GetPowerStatusResponse>::Create(channel_.get(), cq, rpcmethod_GetPowerStatus_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::GetPowerStatusResponse>* PowerService::Stub::PrepareAsyncGetPowerStatusRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetPowerStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::GetPowerStatusResponse>::Create(channel_.get(), cq, rpcmethod_GetPowerStatus_, context, request, false);
}

PowerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PowerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PowerService::Service, ::bosdyn::api::spot_cam::SetPowerStatusRequest, ::bosdyn::api::spot_cam::SetPowerStatusResponse>(
          [](PowerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::spot_cam::SetPowerStatusRequest* req,
             ::bosdyn::api::spot_cam::SetPowerStatusResponse* resp) {
               return service->SetPowerStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PowerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PowerService::Service, ::bosdyn::api::spot_cam::GetPowerStatusRequest, ::bosdyn::api::spot_cam::GetPowerStatusResponse>(
          [](PowerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::spot_cam::GetPowerStatusRequest* req,
             ::bosdyn::api::spot_cam::GetPowerStatusResponse* resp) {
               return service->GetPowerStatus(ctx, req, resp);
             }, this)));
}

PowerService::Service::~Service() {
}

::grpc::Status PowerService::Service::SetPowerStatus(::grpc::ServerContext* context, const ::bosdyn::api::spot_cam::SetPowerStatusRequest* request, ::bosdyn::api::spot_cam::SetPowerStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PowerService::Service::GetPowerStatus(::grpc::ServerContext* context, const ::bosdyn::api::spot_cam::GetPowerStatusRequest* request, ::bosdyn::api::spot_cam::GetPowerStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* LightingService_method_names[] = {
  "/bosdyn.api.spot_cam.LightingService/SetLEDBrightness",
  "/bosdyn.api.spot_cam.LightingService/GetLEDBrightness",
};

std::unique_ptr< LightingService::Stub> LightingService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< LightingService::Stub> stub(new LightingService::Stub(channel));
  return stub;
}

LightingService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SetLEDBrightness_(LightingService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLEDBrightness_(LightingService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status LightingService::Stub::SetLEDBrightness(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::SetLEDBrightnessRequest& request, ::bosdyn::api::spot_cam::SetLEDBrightnessResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetLEDBrightness_, context, request, response);
}

void LightingService::Stub::experimental_async::SetLEDBrightness(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::SetLEDBrightnessRequest* request, ::bosdyn::api::spot_cam::SetLEDBrightnessResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetLEDBrightness_, context, request, response, std::move(f));
}

void LightingService::Stub::experimental_async::SetLEDBrightness(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::SetLEDBrightnessResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetLEDBrightness_, context, request, response, std::move(f));
}

void LightingService::Stub::experimental_async::SetLEDBrightness(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::SetLEDBrightnessRequest* request, ::bosdyn::api::spot_cam::SetLEDBrightnessResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetLEDBrightness_, context, request, response, reactor);
}

void LightingService::Stub::experimental_async::SetLEDBrightness(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::SetLEDBrightnessResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetLEDBrightness_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::SetLEDBrightnessResponse>* LightingService::Stub::AsyncSetLEDBrightnessRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::SetLEDBrightnessRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::SetLEDBrightnessResponse>::Create(channel_.get(), cq, rpcmethod_SetLEDBrightness_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::SetLEDBrightnessResponse>* LightingService::Stub::PrepareAsyncSetLEDBrightnessRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::SetLEDBrightnessRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::SetLEDBrightnessResponse>::Create(channel_.get(), cq, rpcmethod_SetLEDBrightness_, context, request, false);
}

::grpc::Status LightingService::Stub::GetLEDBrightness(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetLEDBrightnessRequest& request, ::bosdyn::api::spot_cam::GetLEDBrightnessResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetLEDBrightness_, context, request, response);
}

void LightingService::Stub::experimental_async::GetLEDBrightness(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetLEDBrightnessRequest* request, ::bosdyn::api::spot_cam::GetLEDBrightnessResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetLEDBrightness_, context, request, response, std::move(f));
}

void LightingService::Stub::experimental_async::GetLEDBrightness(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::GetLEDBrightnessResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetLEDBrightness_, context, request, response, std::move(f));
}

void LightingService::Stub::experimental_async::GetLEDBrightness(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetLEDBrightnessRequest* request, ::bosdyn::api::spot_cam::GetLEDBrightnessResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetLEDBrightness_, context, request, response, reactor);
}

void LightingService::Stub::experimental_async::GetLEDBrightness(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::GetLEDBrightnessResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetLEDBrightness_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::GetLEDBrightnessResponse>* LightingService::Stub::AsyncGetLEDBrightnessRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetLEDBrightnessRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::GetLEDBrightnessResponse>::Create(channel_.get(), cq, rpcmethod_GetLEDBrightness_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::GetLEDBrightnessResponse>* LightingService::Stub::PrepareAsyncGetLEDBrightnessRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetLEDBrightnessRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::GetLEDBrightnessResponse>::Create(channel_.get(), cq, rpcmethod_GetLEDBrightness_, context, request, false);
}

LightingService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LightingService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LightingService::Service, ::bosdyn::api::spot_cam::SetLEDBrightnessRequest, ::bosdyn::api::spot_cam::SetLEDBrightnessResponse>(
          [](LightingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::spot_cam::SetLEDBrightnessRequest* req,
             ::bosdyn::api::spot_cam::SetLEDBrightnessResponse* resp) {
               return service->SetLEDBrightness(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LightingService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LightingService::Service, ::bosdyn::api::spot_cam::GetLEDBrightnessRequest, ::bosdyn::api::spot_cam::GetLEDBrightnessResponse>(
          [](LightingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::spot_cam::GetLEDBrightnessRequest* req,
             ::bosdyn::api::spot_cam::GetLEDBrightnessResponse* resp) {
               return service->GetLEDBrightness(ctx, req, resp);
             }, this)));
}

LightingService::Service::~Service() {
}

::grpc::Status LightingService::Service::SetLEDBrightness(::grpc::ServerContext* context, const ::bosdyn::api::spot_cam::SetLEDBrightnessRequest* request, ::bosdyn::api::spot_cam::SetLEDBrightnessResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LightingService::Service::GetLEDBrightness(::grpc::ServerContext* context, const ::bosdyn::api::spot_cam::GetLEDBrightnessRequest* request, ::bosdyn::api::spot_cam::GetLEDBrightnessResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* MediaLogService_method_names[] = {
  "/bosdyn.api.spot_cam.MediaLogService/Store",
  "/bosdyn.api.spot_cam.MediaLogService/GetStatus",
  "/bosdyn.api.spot_cam.MediaLogService/Tag",
  "/bosdyn.api.spot_cam.MediaLogService/EnableDebug",
  "/bosdyn.api.spot_cam.MediaLogService/ListCameras",
  "/bosdyn.api.spot_cam.MediaLogService/RetrieveRawData",
  "/bosdyn.api.spot_cam.MediaLogService/Retrieve",
  "/bosdyn.api.spot_cam.MediaLogService/Delete",
  "/bosdyn.api.spot_cam.MediaLogService/ListLogpoints",
  "/bosdyn.api.spot_cam.MediaLogService/SetPassphrase",
};

std::unique_ptr< MediaLogService::Stub> MediaLogService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MediaLogService::Stub> stub(new MediaLogService::Stub(channel));
  return stub;
}

MediaLogService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Store_(MediaLogService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetStatus_(MediaLogService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Tag_(MediaLogService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EnableDebug_(MediaLogService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListCameras_(MediaLogService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RetrieveRawData_(MediaLogService_method_names[5], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Retrieve_(MediaLogService_method_names[6], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Delete_(MediaLogService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListLogpoints_(MediaLogService_method_names[8], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SetPassphrase_(MediaLogService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MediaLogService::Stub::Store(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::StoreRequest& request, ::bosdyn::api::spot_cam::StoreResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Store_, context, request, response);
}

void MediaLogService::Stub::experimental_async::Store(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::StoreRequest* request, ::bosdyn::api::spot_cam::StoreResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Store_, context, request, response, std::move(f));
}

void MediaLogService::Stub::experimental_async::Store(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::StoreResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Store_, context, request, response, std::move(f));
}

void MediaLogService::Stub::experimental_async::Store(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::StoreRequest* request, ::bosdyn::api::spot_cam::StoreResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Store_, context, request, response, reactor);
}

void MediaLogService::Stub::experimental_async::Store(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::StoreResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Store_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::StoreResponse>* MediaLogService::Stub::AsyncStoreRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::StoreRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::StoreResponse>::Create(channel_.get(), cq, rpcmethod_Store_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::StoreResponse>* MediaLogService::Stub::PrepareAsyncStoreRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::StoreRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::StoreResponse>::Create(channel_.get(), cq, rpcmethod_Store_, context, request, false);
}

::grpc::Status MediaLogService::Stub::GetStatus(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetStatusRequest& request, ::bosdyn::api::spot_cam::GetStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetStatus_, context, request, response);
}

void MediaLogService::Stub::experimental_async::GetStatus(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetStatusRequest* request, ::bosdyn::api::spot_cam::GetStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetStatus_, context, request, response, std::move(f));
}

void MediaLogService::Stub::experimental_async::GetStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::GetStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetStatus_, context, request, response, std::move(f));
}

void MediaLogService::Stub::experimental_async::GetStatus(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetStatusRequest* request, ::bosdyn::api::spot_cam::GetStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetStatus_, context, request, response, reactor);
}

void MediaLogService::Stub::experimental_async::GetStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::GetStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::GetStatusResponse>* MediaLogService::Stub::AsyncGetStatusRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::GetStatusResponse>::Create(channel_.get(), cq, rpcmethod_GetStatus_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::GetStatusResponse>* MediaLogService::Stub::PrepareAsyncGetStatusRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::GetStatusResponse>::Create(channel_.get(), cq, rpcmethod_GetStatus_, context, request, false);
}

::grpc::Status MediaLogService::Stub::Tag(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::TagRequest& request, ::bosdyn::api::spot_cam::TagResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Tag_, context, request, response);
}

void MediaLogService::Stub::experimental_async::Tag(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::TagRequest* request, ::bosdyn::api::spot_cam::TagResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Tag_, context, request, response, std::move(f));
}

void MediaLogService::Stub::experimental_async::Tag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::TagResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Tag_, context, request, response, std::move(f));
}

void MediaLogService::Stub::experimental_async::Tag(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::TagRequest* request, ::bosdyn::api::spot_cam::TagResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Tag_, context, request, response, reactor);
}

void MediaLogService::Stub::experimental_async::Tag(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::TagResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Tag_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::TagResponse>* MediaLogService::Stub::AsyncTagRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::TagRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::TagResponse>::Create(channel_.get(), cq, rpcmethod_Tag_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::TagResponse>* MediaLogService::Stub::PrepareAsyncTagRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::TagRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::TagResponse>::Create(channel_.get(), cq, rpcmethod_Tag_, context, request, false);
}

::grpc::Status MediaLogService::Stub::EnableDebug(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::DebugRequest& request, ::bosdyn::api::spot_cam::DebugResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_EnableDebug_, context, request, response);
}

void MediaLogService::Stub::experimental_async::EnableDebug(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::DebugRequest* request, ::bosdyn::api::spot_cam::DebugResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_EnableDebug_, context, request, response, std::move(f));
}

void MediaLogService::Stub::experimental_async::EnableDebug(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::DebugResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_EnableDebug_, context, request, response, std::move(f));
}

void MediaLogService::Stub::experimental_async::EnableDebug(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::DebugRequest* request, ::bosdyn::api::spot_cam::DebugResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_EnableDebug_, context, request, response, reactor);
}

void MediaLogService::Stub::experimental_async::EnableDebug(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::DebugResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_EnableDebug_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::DebugResponse>* MediaLogService::Stub::AsyncEnableDebugRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::DebugRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::DebugResponse>::Create(channel_.get(), cq, rpcmethod_EnableDebug_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::DebugResponse>* MediaLogService::Stub::PrepareAsyncEnableDebugRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::DebugRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::DebugResponse>::Create(channel_.get(), cq, rpcmethod_EnableDebug_, context, request, false);
}

::grpc::Status MediaLogService::Stub::ListCameras(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::ListCamerasRequest& request, ::bosdyn::api::spot_cam::ListCamerasResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListCameras_, context, request, response);
}

void MediaLogService::Stub::experimental_async::ListCameras(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::ListCamerasRequest* request, ::bosdyn::api::spot_cam::ListCamerasResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListCameras_, context, request, response, std::move(f));
}

void MediaLogService::Stub::experimental_async::ListCameras(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::ListCamerasResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListCameras_, context, request, response, std::move(f));
}

void MediaLogService::Stub::experimental_async::ListCameras(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::ListCamerasRequest* request, ::bosdyn::api::spot_cam::ListCamerasResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListCameras_, context, request, response, reactor);
}

void MediaLogService::Stub::experimental_async::ListCameras(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::ListCamerasResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListCameras_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::ListCamerasResponse>* MediaLogService::Stub::AsyncListCamerasRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::ListCamerasRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::ListCamerasResponse>::Create(channel_.get(), cq, rpcmethod_ListCameras_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::ListCamerasResponse>* MediaLogService::Stub::PrepareAsyncListCamerasRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::ListCamerasRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::ListCamerasResponse>::Create(channel_.get(), cq, rpcmethod_ListCameras_, context, request, false);
}

::grpc::ClientReader< ::bosdyn::api::spot_cam::RetrieveRawDataResponse>* MediaLogService::Stub::RetrieveRawDataRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::RetrieveRawDataRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::bosdyn::api::spot_cam::RetrieveRawDataResponse>::Create(channel_.get(), rpcmethod_RetrieveRawData_, context, request);
}

void MediaLogService::Stub::experimental_async::RetrieveRawData(::grpc::ClientContext* context, ::bosdyn::api::spot_cam::RetrieveRawDataRequest* request, ::grpc::experimental::ClientReadReactor< ::bosdyn::api::spot_cam::RetrieveRawDataResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::bosdyn::api::spot_cam::RetrieveRawDataResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_RetrieveRawData_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::bosdyn::api::spot_cam::RetrieveRawDataResponse>* MediaLogService::Stub::AsyncRetrieveRawDataRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::RetrieveRawDataRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::bosdyn::api::spot_cam::RetrieveRawDataResponse>::Create(channel_.get(), cq, rpcmethod_RetrieveRawData_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::bosdyn::api::spot_cam::RetrieveRawDataResponse>* MediaLogService::Stub::PrepareAsyncRetrieveRawDataRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::RetrieveRawDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::bosdyn::api::spot_cam::RetrieveRawDataResponse>::Create(channel_.get(), cq, rpcmethod_RetrieveRawData_, context, request, false, nullptr);
}

::grpc::ClientReader< ::bosdyn::api::spot_cam::RetrieveResponse>* MediaLogService::Stub::RetrieveRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::RetrieveRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::bosdyn::api::spot_cam::RetrieveResponse>::Create(channel_.get(), rpcmethod_Retrieve_, context, request);
}

void MediaLogService::Stub::experimental_async::Retrieve(::grpc::ClientContext* context, ::bosdyn::api::spot_cam::RetrieveRequest* request, ::grpc::experimental::ClientReadReactor< ::bosdyn::api::spot_cam::RetrieveResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::bosdyn::api::spot_cam::RetrieveResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_Retrieve_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::bosdyn::api::spot_cam::RetrieveResponse>* MediaLogService::Stub::AsyncRetrieveRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::RetrieveRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::bosdyn::api::spot_cam::RetrieveResponse>::Create(channel_.get(), cq, rpcmethod_Retrieve_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::bosdyn::api::spot_cam::RetrieveResponse>* MediaLogService::Stub::PrepareAsyncRetrieveRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::RetrieveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::bosdyn::api::spot_cam::RetrieveResponse>::Create(channel_.get(), cq, rpcmethod_Retrieve_, context, request, false, nullptr);
}

::grpc::Status MediaLogService::Stub::Delete(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::DeleteRequest& request, ::bosdyn::api::spot_cam::DeleteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Delete_, context, request, response);
}

void MediaLogService::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::DeleteRequest* request, ::bosdyn::api::spot_cam::DeleteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, std::move(f));
}

void MediaLogService::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::DeleteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, std::move(f));
}

void MediaLogService::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::DeleteRequest* request, ::bosdyn::api::spot_cam::DeleteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, reactor);
}

void MediaLogService::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::DeleteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::DeleteResponse>* MediaLogService::Stub::AsyncDeleteRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::DeleteResponse>::Create(channel_.get(), cq, rpcmethod_Delete_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::DeleteResponse>* MediaLogService::Stub::PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::DeleteResponse>::Create(channel_.get(), cq, rpcmethod_Delete_, context, request, false);
}

::grpc::ClientReader< ::bosdyn::api::spot_cam::ListLogpointsResponse>* MediaLogService::Stub::ListLogpointsRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::ListLogpointsRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::bosdyn::api::spot_cam::ListLogpointsResponse>::Create(channel_.get(), rpcmethod_ListLogpoints_, context, request);
}

void MediaLogService::Stub::experimental_async::ListLogpoints(::grpc::ClientContext* context, ::bosdyn::api::spot_cam::ListLogpointsRequest* request, ::grpc::experimental::ClientReadReactor< ::bosdyn::api::spot_cam::ListLogpointsResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::bosdyn::api::spot_cam::ListLogpointsResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_ListLogpoints_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::bosdyn::api::spot_cam::ListLogpointsResponse>* MediaLogService::Stub::AsyncListLogpointsRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::ListLogpointsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::bosdyn::api::spot_cam::ListLogpointsResponse>::Create(channel_.get(), cq, rpcmethod_ListLogpoints_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::bosdyn::api::spot_cam::ListLogpointsResponse>* MediaLogService::Stub::PrepareAsyncListLogpointsRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::ListLogpointsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::bosdyn::api::spot_cam::ListLogpointsResponse>::Create(channel_.get(), cq, rpcmethod_ListLogpoints_, context, request, false, nullptr);
}

::grpc::Status MediaLogService::Stub::SetPassphrase(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::SetPassphraseRequest& request, ::bosdyn::api::spot_cam::SetPassphraseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetPassphrase_, context, request, response);
}

void MediaLogService::Stub::experimental_async::SetPassphrase(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::SetPassphraseRequest* request, ::bosdyn::api::spot_cam::SetPassphraseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetPassphrase_, context, request, response, std::move(f));
}

void MediaLogService::Stub::experimental_async::SetPassphrase(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::SetPassphraseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetPassphrase_, context, request, response, std::move(f));
}

void MediaLogService::Stub::experimental_async::SetPassphrase(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::SetPassphraseRequest* request, ::bosdyn::api::spot_cam::SetPassphraseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetPassphrase_, context, request, response, reactor);
}

void MediaLogService::Stub::experimental_async::SetPassphrase(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::SetPassphraseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetPassphrase_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::SetPassphraseResponse>* MediaLogService::Stub::AsyncSetPassphraseRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::SetPassphraseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::SetPassphraseResponse>::Create(channel_.get(), cq, rpcmethod_SetPassphrase_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::SetPassphraseResponse>* MediaLogService::Stub::PrepareAsyncSetPassphraseRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::SetPassphraseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::SetPassphraseResponse>::Create(channel_.get(), cq, rpcmethod_SetPassphrase_, context, request, false);
}

MediaLogService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MediaLogService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MediaLogService::Service, ::bosdyn::api::spot_cam::StoreRequest, ::bosdyn::api::spot_cam::StoreResponse>(
          [](MediaLogService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::spot_cam::StoreRequest* req,
             ::bosdyn::api::spot_cam::StoreResponse* resp) {
               return service->Store(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MediaLogService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MediaLogService::Service, ::bosdyn::api::spot_cam::GetStatusRequest, ::bosdyn::api::spot_cam::GetStatusResponse>(
          [](MediaLogService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::spot_cam::GetStatusRequest* req,
             ::bosdyn::api::spot_cam::GetStatusResponse* resp) {
               return service->GetStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MediaLogService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MediaLogService::Service, ::bosdyn::api::spot_cam::TagRequest, ::bosdyn::api::spot_cam::TagResponse>(
          [](MediaLogService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::spot_cam::TagRequest* req,
             ::bosdyn::api::spot_cam::TagResponse* resp) {
               return service->Tag(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MediaLogService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MediaLogService::Service, ::bosdyn::api::spot_cam::DebugRequest, ::bosdyn::api::spot_cam::DebugResponse>(
          [](MediaLogService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::spot_cam::DebugRequest* req,
             ::bosdyn::api::spot_cam::DebugResponse* resp) {
               return service->EnableDebug(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MediaLogService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MediaLogService::Service, ::bosdyn::api::spot_cam::ListCamerasRequest, ::bosdyn::api::spot_cam::ListCamerasResponse>(
          [](MediaLogService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::spot_cam::ListCamerasRequest* req,
             ::bosdyn::api::spot_cam::ListCamerasResponse* resp) {
               return service->ListCameras(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MediaLogService_method_names[5],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< MediaLogService::Service, ::bosdyn::api::spot_cam::RetrieveRawDataRequest, ::bosdyn::api::spot_cam::RetrieveRawDataResponse>(
          [](MediaLogService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::spot_cam::RetrieveRawDataRequest* req,
             ::grpc::ServerWriter<::bosdyn::api::spot_cam::RetrieveRawDataResponse>* writer) {
               return service->RetrieveRawData(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MediaLogService_method_names[6],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< MediaLogService::Service, ::bosdyn::api::spot_cam::RetrieveRequest, ::bosdyn::api::spot_cam::RetrieveResponse>(
          [](MediaLogService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::spot_cam::RetrieveRequest* req,
             ::grpc::ServerWriter<::bosdyn::api::spot_cam::RetrieveResponse>* writer) {
               return service->Retrieve(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MediaLogService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MediaLogService::Service, ::bosdyn::api::spot_cam::DeleteRequest, ::bosdyn::api::spot_cam::DeleteResponse>(
          [](MediaLogService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::spot_cam::DeleteRequest* req,
             ::bosdyn::api::spot_cam::DeleteResponse* resp) {
               return service->Delete(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MediaLogService_method_names[8],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< MediaLogService::Service, ::bosdyn::api::spot_cam::ListLogpointsRequest, ::bosdyn::api::spot_cam::ListLogpointsResponse>(
          [](MediaLogService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::spot_cam::ListLogpointsRequest* req,
             ::grpc::ServerWriter<::bosdyn::api::spot_cam::ListLogpointsResponse>* writer) {
               return service->ListLogpoints(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MediaLogService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MediaLogService::Service, ::bosdyn::api::spot_cam::SetPassphraseRequest, ::bosdyn::api::spot_cam::SetPassphraseResponse>(
          [](MediaLogService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::spot_cam::SetPassphraseRequest* req,
             ::bosdyn::api::spot_cam::SetPassphraseResponse* resp) {
               return service->SetPassphrase(ctx, req, resp);
             }, this)));
}

MediaLogService::Service::~Service() {
}

::grpc::Status MediaLogService::Service::Store(::grpc::ServerContext* context, const ::bosdyn::api::spot_cam::StoreRequest* request, ::bosdyn::api::spot_cam::StoreResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MediaLogService::Service::GetStatus(::grpc::ServerContext* context, const ::bosdyn::api::spot_cam::GetStatusRequest* request, ::bosdyn::api::spot_cam::GetStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MediaLogService::Service::Tag(::grpc::ServerContext* context, const ::bosdyn::api::spot_cam::TagRequest* request, ::bosdyn::api::spot_cam::TagResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MediaLogService::Service::EnableDebug(::grpc::ServerContext* context, const ::bosdyn::api::spot_cam::DebugRequest* request, ::bosdyn::api::spot_cam::DebugResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MediaLogService::Service::ListCameras(::grpc::ServerContext* context, const ::bosdyn::api::spot_cam::ListCamerasRequest* request, ::bosdyn::api::spot_cam::ListCamerasResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MediaLogService::Service::RetrieveRawData(::grpc::ServerContext* context, const ::bosdyn::api::spot_cam::RetrieveRawDataRequest* request, ::grpc::ServerWriter< ::bosdyn::api::spot_cam::RetrieveRawDataResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MediaLogService::Service::Retrieve(::grpc::ServerContext* context, const ::bosdyn::api::spot_cam::RetrieveRequest* request, ::grpc::ServerWriter< ::bosdyn::api::spot_cam::RetrieveResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MediaLogService::Service::Delete(::grpc::ServerContext* context, const ::bosdyn::api::spot_cam::DeleteRequest* request, ::bosdyn::api::spot_cam::DeleteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MediaLogService::Service::ListLogpoints(::grpc::ServerContext* context, const ::bosdyn::api::spot_cam::ListLogpointsRequest* request, ::grpc::ServerWriter< ::bosdyn::api::spot_cam::ListLogpointsResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MediaLogService::Service::SetPassphrase(::grpc::ServerContext* context, const ::bosdyn::api::spot_cam::SetPassphraseRequest* request, ::bosdyn::api::spot_cam::SetPassphraseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* PtzService_method_names[] = {
  "/bosdyn.api.spot_cam.PtzService/SetPtzPosition",
  "/bosdyn.api.spot_cam.PtzService/GetPtzPosition",
  "/bosdyn.api.spot_cam.PtzService/SetPtzVelocity",
  "/bosdyn.api.spot_cam.PtzService/GetPtzVelocity",
  "/bosdyn.api.spot_cam.PtzService/ListPtz",
};

std::unique_ptr< PtzService::Stub> PtzService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PtzService::Stub> stub(new PtzService::Stub(channel));
  return stub;
}

PtzService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SetPtzPosition_(PtzService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPtzPosition_(PtzService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetPtzVelocity_(PtzService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPtzVelocity_(PtzService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListPtz_(PtzService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PtzService::Stub::SetPtzPosition(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::SetPtzPositionRequest& request, ::bosdyn::api::spot_cam::SetPtzPositionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetPtzPosition_, context, request, response);
}

void PtzService::Stub::experimental_async::SetPtzPosition(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::SetPtzPositionRequest* request, ::bosdyn::api::spot_cam::SetPtzPositionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetPtzPosition_, context, request, response, std::move(f));
}

void PtzService::Stub::experimental_async::SetPtzPosition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::SetPtzPositionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetPtzPosition_, context, request, response, std::move(f));
}

void PtzService::Stub::experimental_async::SetPtzPosition(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::SetPtzPositionRequest* request, ::bosdyn::api::spot_cam::SetPtzPositionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetPtzPosition_, context, request, response, reactor);
}

void PtzService::Stub::experimental_async::SetPtzPosition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::SetPtzPositionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetPtzPosition_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::SetPtzPositionResponse>* PtzService::Stub::AsyncSetPtzPositionRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::SetPtzPositionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::SetPtzPositionResponse>::Create(channel_.get(), cq, rpcmethod_SetPtzPosition_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::SetPtzPositionResponse>* PtzService::Stub::PrepareAsyncSetPtzPositionRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::SetPtzPositionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::SetPtzPositionResponse>::Create(channel_.get(), cq, rpcmethod_SetPtzPosition_, context, request, false);
}

::grpc::Status PtzService::Stub::GetPtzPosition(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetPtzPositionRequest& request, ::bosdyn::api::spot_cam::GetPtzPositionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetPtzPosition_, context, request, response);
}

void PtzService::Stub::experimental_async::GetPtzPosition(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetPtzPositionRequest* request, ::bosdyn::api::spot_cam::GetPtzPositionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPtzPosition_, context, request, response, std::move(f));
}

void PtzService::Stub::experimental_async::GetPtzPosition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::GetPtzPositionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPtzPosition_, context, request, response, std::move(f));
}

void PtzService::Stub::experimental_async::GetPtzPosition(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetPtzPositionRequest* request, ::bosdyn::api::spot_cam::GetPtzPositionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPtzPosition_, context, request, response, reactor);
}

void PtzService::Stub::experimental_async::GetPtzPosition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::GetPtzPositionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPtzPosition_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::GetPtzPositionResponse>* PtzService::Stub::AsyncGetPtzPositionRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetPtzPositionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::GetPtzPositionResponse>::Create(channel_.get(), cq, rpcmethod_GetPtzPosition_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::GetPtzPositionResponse>* PtzService::Stub::PrepareAsyncGetPtzPositionRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetPtzPositionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::GetPtzPositionResponse>::Create(channel_.get(), cq, rpcmethod_GetPtzPosition_, context, request, false);
}

::grpc::Status PtzService::Stub::SetPtzVelocity(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::SetPtzVelocityRequest& request, ::bosdyn::api::spot_cam::SetPtzVelocityResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetPtzVelocity_, context, request, response);
}

void PtzService::Stub::experimental_async::SetPtzVelocity(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::SetPtzVelocityRequest* request, ::bosdyn::api::spot_cam::SetPtzVelocityResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetPtzVelocity_, context, request, response, std::move(f));
}

void PtzService::Stub::experimental_async::SetPtzVelocity(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::SetPtzVelocityResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetPtzVelocity_, context, request, response, std::move(f));
}

void PtzService::Stub::experimental_async::SetPtzVelocity(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::SetPtzVelocityRequest* request, ::bosdyn::api::spot_cam::SetPtzVelocityResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetPtzVelocity_, context, request, response, reactor);
}

void PtzService::Stub::experimental_async::SetPtzVelocity(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::SetPtzVelocityResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetPtzVelocity_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::SetPtzVelocityResponse>* PtzService::Stub::AsyncSetPtzVelocityRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::SetPtzVelocityRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::SetPtzVelocityResponse>::Create(channel_.get(), cq, rpcmethod_SetPtzVelocity_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::SetPtzVelocityResponse>* PtzService::Stub::PrepareAsyncSetPtzVelocityRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::SetPtzVelocityRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::SetPtzVelocityResponse>::Create(channel_.get(), cq, rpcmethod_SetPtzVelocity_, context, request, false);
}

::grpc::Status PtzService::Stub::GetPtzVelocity(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetPtzVelocityRequest& request, ::bosdyn::api::spot_cam::GetPtzVelocityResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetPtzVelocity_, context, request, response);
}

void PtzService::Stub::experimental_async::GetPtzVelocity(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetPtzVelocityRequest* request, ::bosdyn::api::spot_cam::GetPtzVelocityResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPtzVelocity_, context, request, response, std::move(f));
}

void PtzService::Stub::experimental_async::GetPtzVelocity(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::GetPtzVelocityResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPtzVelocity_, context, request, response, std::move(f));
}

void PtzService::Stub::experimental_async::GetPtzVelocity(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetPtzVelocityRequest* request, ::bosdyn::api::spot_cam::GetPtzVelocityResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPtzVelocity_, context, request, response, reactor);
}

void PtzService::Stub::experimental_async::GetPtzVelocity(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::GetPtzVelocityResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPtzVelocity_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::GetPtzVelocityResponse>* PtzService::Stub::AsyncGetPtzVelocityRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetPtzVelocityRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::GetPtzVelocityResponse>::Create(channel_.get(), cq, rpcmethod_GetPtzVelocity_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::GetPtzVelocityResponse>* PtzService::Stub::PrepareAsyncGetPtzVelocityRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetPtzVelocityRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::GetPtzVelocityResponse>::Create(channel_.get(), cq, rpcmethod_GetPtzVelocity_, context, request, false);
}

::grpc::Status PtzService::Stub::ListPtz(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::ListPtzRequest& request, ::bosdyn::api::spot_cam::ListPtzResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListPtz_, context, request, response);
}

void PtzService::Stub::experimental_async::ListPtz(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::ListPtzRequest* request, ::bosdyn::api::spot_cam::ListPtzResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListPtz_, context, request, response, std::move(f));
}

void PtzService::Stub::experimental_async::ListPtz(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::ListPtzResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListPtz_, context, request, response, std::move(f));
}

void PtzService::Stub::experimental_async::ListPtz(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::ListPtzRequest* request, ::bosdyn::api::spot_cam::ListPtzResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListPtz_, context, request, response, reactor);
}

void PtzService::Stub::experimental_async::ListPtz(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::ListPtzResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListPtz_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::ListPtzResponse>* PtzService::Stub::AsyncListPtzRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::ListPtzRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::ListPtzResponse>::Create(channel_.get(), cq, rpcmethod_ListPtz_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::ListPtzResponse>* PtzService::Stub::PrepareAsyncListPtzRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::ListPtzRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::ListPtzResponse>::Create(channel_.get(), cq, rpcmethod_ListPtz_, context, request, false);
}

PtzService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PtzService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PtzService::Service, ::bosdyn::api::spot_cam::SetPtzPositionRequest, ::bosdyn::api::spot_cam::SetPtzPositionResponse>(
          [](PtzService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::spot_cam::SetPtzPositionRequest* req,
             ::bosdyn::api::spot_cam::SetPtzPositionResponse* resp) {
               return service->SetPtzPosition(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PtzService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PtzService::Service, ::bosdyn::api::spot_cam::GetPtzPositionRequest, ::bosdyn::api::spot_cam::GetPtzPositionResponse>(
          [](PtzService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::spot_cam::GetPtzPositionRequest* req,
             ::bosdyn::api::spot_cam::GetPtzPositionResponse* resp) {
               return service->GetPtzPosition(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PtzService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PtzService::Service, ::bosdyn::api::spot_cam::SetPtzVelocityRequest, ::bosdyn::api::spot_cam::SetPtzVelocityResponse>(
          [](PtzService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::spot_cam::SetPtzVelocityRequest* req,
             ::bosdyn::api::spot_cam::SetPtzVelocityResponse* resp) {
               return service->SetPtzVelocity(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PtzService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PtzService::Service, ::bosdyn::api::spot_cam::GetPtzVelocityRequest, ::bosdyn::api::spot_cam::GetPtzVelocityResponse>(
          [](PtzService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::spot_cam::GetPtzVelocityRequest* req,
             ::bosdyn::api::spot_cam::GetPtzVelocityResponse* resp) {
               return service->GetPtzVelocity(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PtzService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PtzService::Service, ::bosdyn::api::spot_cam::ListPtzRequest, ::bosdyn::api::spot_cam::ListPtzResponse>(
          [](PtzService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::spot_cam::ListPtzRequest* req,
             ::bosdyn::api::spot_cam::ListPtzResponse* resp) {
               return service->ListPtz(ctx, req, resp);
             }, this)));
}

PtzService::Service::~Service() {
}

::grpc::Status PtzService::Service::SetPtzPosition(::grpc::ServerContext* context, const ::bosdyn::api::spot_cam::SetPtzPositionRequest* request, ::bosdyn::api::spot_cam::SetPtzPositionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PtzService::Service::GetPtzPosition(::grpc::ServerContext* context, const ::bosdyn::api::spot_cam::GetPtzPositionRequest* request, ::bosdyn::api::spot_cam::GetPtzPositionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PtzService::Service::SetPtzVelocity(::grpc::ServerContext* context, const ::bosdyn::api::spot_cam::SetPtzVelocityRequest* request, ::bosdyn::api::spot_cam::SetPtzVelocityResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PtzService::Service::GetPtzVelocity(::grpc::ServerContext* context, const ::bosdyn::api::spot_cam::GetPtzVelocityRequest* request, ::bosdyn::api::spot_cam::GetPtzVelocityResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PtzService::Service::ListPtz(::grpc::ServerContext* context, const ::bosdyn::api::spot_cam::ListPtzRequest* request, ::bosdyn::api::spot_cam::ListPtzResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* AudioService_method_names[] = {
  "/bosdyn.api.spot_cam.AudioService/PlaySound",
  "/bosdyn.api.spot_cam.AudioService/LoadSound",
  "/bosdyn.api.spot_cam.AudioService/DeleteSound",
  "/bosdyn.api.spot_cam.AudioService/ListSounds",
  "/bosdyn.api.spot_cam.AudioService/SetVolume",
  "/bosdyn.api.spot_cam.AudioService/GetVolume",
};

std::unique_ptr< AudioService::Stub> AudioService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AudioService::Stub> stub(new AudioService::Stub(channel));
  return stub;
}

AudioService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_PlaySound_(AudioService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LoadSound_(AudioService_method_names[1], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_DeleteSound_(AudioService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListSounds_(AudioService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetVolume_(AudioService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetVolume_(AudioService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status AudioService::Stub::PlaySound(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::PlaySoundRequest& request, ::bosdyn::api::spot_cam::PlaySoundResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PlaySound_, context, request, response);
}

void AudioService::Stub::experimental_async::PlaySound(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::PlaySoundRequest* request, ::bosdyn::api::spot_cam::PlaySoundResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PlaySound_, context, request, response, std::move(f));
}

void AudioService::Stub::experimental_async::PlaySound(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::PlaySoundResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PlaySound_, context, request, response, std::move(f));
}

void AudioService::Stub::experimental_async::PlaySound(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::PlaySoundRequest* request, ::bosdyn::api::spot_cam::PlaySoundResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PlaySound_, context, request, response, reactor);
}

void AudioService::Stub::experimental_async::PlaySound(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::PlaySoundResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PlaySound_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::PlaySoundResponse>* AudioService::Stub::AsyncPlaySoundRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::PlaySoundRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::PlaySoundResponse>::Create(channel_.get(), cq, rpcmethod_PlaySound_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::PlaySoundResponse>* AudioService::Stub::PrepareAsyncPlaySoundRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::PlaySoundRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::PlaySoundResponse>::Create(channel_.get(), cq, rpcmethod_PlaySound_, context, request, false);
}

::grpc::ClientWriter< ::bosdyn::api::spot_cam::LoadSoundRequest>* AudioService::Stub::LoadSoundRaw(::grpc::ClientContext* context, ::bosdyn::api::spot_cam::LoadSoundResponse* response) {
  return ::grpc::internal::ClientWriterFactory< ::bosdyn::api::spot_cam::LoadSoundRequest>::Create(channel_.get(), rpcmethod_LoadSound_, context, response);
}

void AudioService::Stub::experimental_async::LoadSound(::grpc::ClientContext* context, ::bosdyn::api::spot_cam::LoadSoundResponse* response, ::grpc::experimental::ClientWriteReactor< ::bosdyn::api::spot_cam::LoadSoundRequest>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::bosdyn::api::spot_cam::LoadSoundRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_LoadSound_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::bosdyn::api::spot_cam::LoadSoundRequest>* AudioService::Stub::AsyncLoadSoundRaw(::grpc::ClientContext* context, ::bosdyn::api::spot_cam::LoadSoundResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::bosdyn::api::spot_cam::LoadSoundRequest>::Create(channel_.get(), cq, rpcmethod_LoadSound_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::bosdyn::api::spot_cam::LoadSoundRequest>* AudioService::Stub::PrepareAsyncLoadSoundRaw(::grpc::ClientContext* context, ::bosdyn::api::spot_cam::LoadSoundResponse* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::bosdyn::api::spot_cam::LoadSoundRequest>::Create(channel_.get(), cq, rpcmethod_LoadSound_, context, response, false, nullptr);
}

::grpc::Status AudioService::Stub::DeleteSound(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::DeleteSoundRequest& request, ::bosdyn::api::spot_cam::DeleteSoundResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteSound_, context, request, response);
}

void AudioService::Stub::experimental_async::DeleteSound(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::DeleteSoundRequest* request, ::bosdyn::api::spot_cam::DeleteSoundResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteSound_, context, request, response, std::move(f));
}

void AudioService::Stub::experimental_async::DeleteSound(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::DeleteSoundResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteSound_, context, request, response, std::move(f));
}

void AudioService::Stub::experimental_async::DeleteSound(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::DeleteSoundRequest* request, ::bosdyn::api::spot_cam::DeleteSoundResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteSound_, context, request, response, reactor);
}

void AudioService::Stub::experimental_async::DeleteSound(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::DeleteSoundResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteSound_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::DeleteSoundResponse>* AudioService::Stub::AsyncDeleteSoundRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::DeleteSoundRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::DeleteSoundResponse>::Create(channel_.get(), cq, rpcmethod_DeleteSound_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::DeleteSoundResponse>* AudioService::Stub::PrepareAsyncDeleteSoundRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::DeleteSoundRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::DeleteSoundResponse>::Create(channel_.get(), cq, rpcmethod_DeleteSound_, context, request, false);
}

::grpc::Status AudioService::Stub::ListSounds(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::ListSoundsRequest& request, ::bosdyn::api::spot_cam::ListSoundsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListSounds_, context, request, response);
}

void AudioService::Stub::experimental_async::ListSounds(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::ListSoundsRequest* request, ::bosdyn::api::spot_cam::ListSoundsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListSounds_, context, request, response, std::move(f));
}

void AudioService::Stub::experimental_async::ListSounds(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::ListSoundsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListSounds_, context, request, response, std::move(f));
}

void AudioService::Stub::experimental_async::ListSounds(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::ListSoundsRequest* request, ::bosdyn::api::spot_cam::ListSoundsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListSounds_, context, request, response, reactor);
}

void AudioService::Stub::experimental_async::ListSounds(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::ListSoundsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListSounds_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::ListSoundsResponse>* AudioService::Stub::AsyncListSoundsRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::ListSoundsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::ListSoundsResponse>::Create(channel_.get(), cq, rpcmethod_ListSounds_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::ListSoundsResponse>* AudioService::Stub::PrepareAsyncListSoundsRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::ListSoundsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::ListSoundsResponse>::Create(channel_.get(), cq, rpcmethod_ListSounds_, context, request, false);
}

::grpc::Status AudioService::Stub::SetVolume(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::SetVolumeRequest& request, ::bosdyn::api::spot_cam::SetVolumeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetVolume_, context, request, response);
}

void AudioService::Stub::experimental_async::SetVolume(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::SetVolumeRequest* request, ::bosdyn::api::spot_cam::SetVolumeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetVolume_, context, request, response, std::move(f));
}

void AudioService::Stub::experimental_async::SetVolume(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::SetVolumeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetVolume_, context, request, response, std::move(f));
}

void AudioService::Stub::experimental_async::SetVolume(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::SetVolumeRequest* request, ::bosdyn::api::spot_cam::SetVolumeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetVolume_, context, request, response, reactor);
}

void AudioService::Stub::experimental_async::SetVolume(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::SetVolumeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetVolume_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::SetVolumeResponse>* AudioService::Stub::AsyncSetVolumeRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::SetVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::SetVolumeResponse>::Create(channel_.get(), cq, rpcmethod_SetVolume_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::SetVolumeResponse>* AudioService::Stub::PrepareAsyncSetVolumeRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::SetVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::SetVolumeResponse>::Create(channel_.get(), cq, rpcmethod_SetVolume_, context, request, false);
}

::grpc::Status AudioService::Stub::GetVolume(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetVolumeRequest& request, ::bosdyn::api::spot_cam::GetVolumeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetVolume_, context, request, response);
}

void AudioService::Stub::experimental_async::GetVolume(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetVolumeRequest* request, ::bosdyn::api::spot_cam::GetVolumeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetVolume_, context, request, response, std::move(f));
}

void AudioService::Stub::experimental_async::GetVolume(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::GetVolumeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetVolume_, context, request, response, std::move(f));
}

void AudioService::Stub::experimental_async::GetVolume(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetVolumeRequest* request, ::bosdyn::api::spot_cam::GetVolumeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetVolume_, context, request, response, reactor);
}

void AudioService::Stub::experimental_async::GetVolume(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::GetVolumeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetVolume_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::GetVolumeResponse>* AudioService::Stub::AsyncGetVolumeRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::GetVolumeResponse>::Create(channel_.get(), cq, rpcmethod_GetVolume_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::GetVolumeResponse>* AudioService::Stub::PrepareAsyncGetVolumeRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetVolumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::GetVolumeResponse>::Create(channel_.get(), cq, rpcmethod_GetVolume_, context, request, false);
}

AudioService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AudioService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AudioService::Service, ::bosdyn::api::spot_cam::PlaySoundRequest, ::bosdyn::api::spot_cam::PlaySoundResponse>(
          [](AudioService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::spot_cam::PlaySoundRequest* req,
             ::bosdyn::api::spot_cam::PlaySoundResponse* resp) {
               return service->PlaySound(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AudioService_method_names[1],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< AudioService::Service, ::bosdyn::api::spot_cam::LoadSoundRequest, ::bosdyn::api::spot_cam::LoadSoundResponse>(
          [](AudioService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::bosdyn::api::spot_cam::LoadSoundRequest>* reader,
             ::bosdyn::api::spot_cam::LoadSoundResponse* resp) {
               return service->LoadSound(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AudioService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AudioService::Service, ::bosdyn::api::spot_cam::DeleteSoundRequest, ::bosdyn::api::spot_cam::DeleteSoundResponse>(
          [](AudioService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::spot_cam::DeleteSoundRequest* req,
             ::bosdyn::api::spot_cam::DeleteSoundResponse* resp) {
               return service->DeleteSound(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AudioService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AudioService::Service, ::bosdyn::api::spot_cam::ListSoundsRequest, ::bosdyn::api::spot_cam::ListSoundsResponse>(
          [](AudioService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::spot_cam::ListSoundsRequest* req,
             ::bosdyn::api::spot_cam::ListSoundsResponse* resp) {
               return service->ListSounds(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AudioService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AudioService::Service, ::bosdyn::api::spot_cam::SetVolumeRequest, ::bosdyn::api::spot_cam::SetVolumeResponse>(
          [](AudioService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::spot_cam::SetVolumeRequest* req,
             ::bosdyn::api::spot_cam::SetVolumeResponse* resp) {
               return service->SetVolume(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AudioService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AudioService::Service, ::bosdyn::api::spot_cam::GetVolumeRequest, ::bosdyn::api::spot_cam::GetVolumeResponse>(
          [](AudioService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::spot_cam::GetVolumeRequest* req,
             ::bosdyn::api::spot_cam::GetVolumeResponse* resp) {
               return service->GetVolume(ctx, req, resp);
             }, this)));
}

AudioService::Service::~Service() {
}

::grpc::Status AudioService::Service::PlaySound(::grpc::ServerContext* context, const ::bosdyn::api::spot_cam::PlaySoundRequest* request, ::bosdyn::api::spot_cam::PlaySoundResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AudioService::Service::LoadSound(::grpc::ServerContext* context, ::grpc::ServerReader< ::bosdyn::api::spot_cam::LoadSoundRequest>* reader, ::bosdyn::api::spot_cam::LoadSoundResponse* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AudioService::Service::DeleteSound(::grpc::ServerContext* context, const ::bosdyn::api::spot_cam::DeleteSoundRequest* request, ::bosdyn::api::spot_cam::DeleteSoundResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AudioService::Service::ListSounds(::grpc::ServerContext* context, const ::bosdyn::api::spot_cam::ListSoundsRequest* request, ::bosdyn::api::spot_cam::ListSoundsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AudioService::Service::SetVolume(::grpc::ServerContext* context, const ::bosdyn::api::spot_cam::SetVolumeRequest* request, ::bosdyn::api::spot_cam::SetVolumeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AudioService::Service::GetVolume(::grpc::ServerContext* context, const ::bosdyn::api::spot_cam::GetVolumeRequest* request, ::bosdyn::api::spot_cam::GetVolumeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* HealthService_method_names[] = {
  "/bosdyn.api.spot_cam.HealthService/GetTemperature",
  "/bosdyn.api.spot_cam.HealthService/GetBITStatus",
  "/bosdyn.api.spot_cam.HealthService/ClearBITEvents",
};

std::unique_ptr< HealthService::Stub> HealthService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< HealthService::Stub> stub(new HealthService::Stub(channel));
  return stub;
}

HealthService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetTemperature_(HealthService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBITStatus_(HealthService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ClearBITEvents_(HealthService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status HealthService::Stub::GetTemperature(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetTemperatureRequest& request, ::bosdyn::api::spot_cam::GetTemperatureResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTemperature_, context, request, response);
}

void HealthService::Stub::experimental_async::GetTemperature(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetTemperatureRequest* request, ::bosdyn::api::spot_cam::GetTemperatureResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTemperature_, context, request, response, std::move(f));
}

void HealthService::Stub::experimental_async::GetTemperature(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::GetTemperatureResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTemperature_, context, request, response, std::move(f));
}

void HealthService::Stub::experimental_async::GetTemperature(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetTemperatureRequest* request, ::bosdyn::api::spot_cam::GetTemperatureResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTemperature_, context, request, response, reactor);
}

void HealthService::Stub::experimental_async::GetTemperature(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::GetTemperatureResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTemperature_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::GetTemperatureResponse>* HealthService::Stub::AsyncGetTemperatureRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetTemperatureRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::GetTemperatureResponse>::Create(channel_.get(), cq, rpcmethod_GetTemperature_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::GetTemperatureResponse>* HealthService::Stub::PrepareAsyncGetTemperatureRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetTemperatureRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::GetTemperatureResponse>::Create(channel_.get(), cq, rpcmethod_GetTemperature_, context, request, false);
}

::grpc::Status HealthService::Stub::GetBITStatus(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetBITStatusRequest& request, ::bosdyn::api::spot_cam::GetBITStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetBITStatus_, context, request, response);
}

void HealthService::Stub::experimental_async::GetBITStatus(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetBITStatusRequest* request, ::bosdyn::api::spot_cam::GetBITStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetBITStatus_, context, request, response, std::move(f));
}

void HealthService::Stub::experimental_async::GetBITStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::GetBITStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetBITStatus_, context, request, response, std::move(f));
}

void HealthService::Stub::experimental_async::GetBITStatus(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetBITStatusRequest* request, ::bosdyn::api::spot_cam::GetBITStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetBITStatus_, context, request, response, reactor);
}

void HealthService::Stub::experimental_async::GetBITStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::GetBITStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetBITStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::GetBITStatusResponse>* HealthService::Stub::AsyncGetBITStatusRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetBITStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::GetBITStatusResponse>::Create(channel_.get(), cq, rpcmethod_GetBITStatus_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::GetBITStatusResponse>* HealthService::Stub::PrepareAsyncGetBITStatusRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetBITStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::GetBITStatusResponse>::Create(channel_.get(), cq, rpcmethod_GetBITStatus_, context, request, false);
}

::grpc::Status HealthService::Stub::ClearBITEvents(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::ClearBITEventsRequest& request, ::bosdyn::api::spot_cam::ClearBITEventsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ClearBITEvents_, context, request, response);
}

void HealthService::Stub::experimental_async::ClearBITEvents(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::ClearBITEventsRequest* request, ::bosdyn::api::spot_cam::ClearBITEventsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ClearBITEvents_, context, request, response, std::move(f));
}

void HealthService::Stub::experimental_async::ClearBITEvents(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::ClearBITEventsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ClearBITEvents_, context, request, response, std::move(f));
}

void HealthService::Stub::experimental_async::ClearBITEvents(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::ClearBITEventsRequest* request, ::bosdyn::api::spot_cam::ClearBITEventsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ClearBITEvents_, context, request, response, reactor);
}

void HealthService::Stub::experimental_async::ClearBITEvents(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::ClearBITEventsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ClearBITEvents_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::ClearBITEventsResponse>* HealthService::Stub::AsyncClearBITEventsRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::ClearBITEventsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::ClearBITEventsResponse>::Create(channel_.get(), cq, rpcmethod_ClearBITEvents_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::ClearBITEventsResponse>* HealthService::Stub::PrepareAsyncClearBITEventsRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::ClearBITEventsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::ClearBITEventsResponse>::Create(channel_.get(), cq, rpcmethod_ClearBITEvents_, context, request, false);
}

HealthService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HealthService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HealthService::Service, ::bosdyn::api::spot_cam::GetTemperatureRequest, ::bosdyn::api::spot_cam::GetTemperatureResponse>(
          [](HealthService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::spot_cam::GetTemperatureRequest* req,
             ::bosdyn::api::spot_cam::GetTemperatureResponse* resp) {
               return service->GetTemperature(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HealthService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HealthService::Service, ::bosdyn::api::spot_cam::GetBITStatusRequest, ::bosdyn::api::spot_cam::GetBITStatusResponse>(
          [](HealthService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::spot_cam::GetBITStatusRequest* req,
             ::bosdyn::api::spot_cam::GetBITStatusResponse* resp) {
               return service->GetBITStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      HealthService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< HealthService::Service, ::bosdyn::api::spot_cam::ClearBITEventsRequest, ::bosdyn::api::spot_cam::ClearBITEventsResponse>(
          [](HealthService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::spot_cam::ClearBITEventsRequest* req,
             ::bosdyn::api::spot_cam::ClearBITEventsResponse* resp) {
               return service->ClearBITEvents(ctx, req, resp);
             }, this)));
}

HealthService::Service::~Service() {
}

::grpc::Status HealthService::Service::GetTemperature(::grpc::ServerContext* context, const ::bosdyn::api::spot_cam::GetTemperatureRequest* request, ::bosdyn::api::spot_cam::GetTemperatureResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HealthService::Service::GetBITStatus(::grpc::ServerContext* context, const ::bosdyn::api::spot_cam::GetBITStatusRequest* request, ::bosdyn::api::spot_cam::GetBITStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status HealthService::Service::ClearBITEvents(::grpc::ServerContext* context, const ::bosdyn::api::spot_cam::ClearBITEventsRequest* request, ::bosdyn::api::spot_cam::ClearBITEventsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* NetworkService_method_names[] = {
  "/bosdyn.api.spot_cam.NetworkService/SetICEConfiguration",
  "/bosdyn.api.spot_cam.NetworkService/GetICEConfiguration",
};

std::unique_ptr< NetworkService::Stub> NetworkService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< NetworkService::Stub> stub(new NetworkService::Stub(channel));
  return stub;
}

NetworkService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SetICEConfiguration_(NetworkService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetICEConfiguration_(NetworkService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status NetworkService::Stub::SetICEConfiguration(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::SetICEConfigurationRequest& request, ::bosdyn::api::spot_cam::SetICEConfigurationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetICEConfiguration_, context, request, response);
}

void NetworkService::Stub::experimental_async::SetICEConfiguration(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::SetICEConfigurationRequest* request, ::bosdyn::api::spot_cam::SetICEConfigurationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetICEConfiguration_, context, request, response, std::move(f));
}

void NetworkService::Stub::experimental_async::SetICEConfiguration(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::SetICEConfigurationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetICEConfiguration_, context, request, response, std::move(f));
}

void NetworkService::Stub::experimental_async::SetICEConfiguration(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::SetICEConfigurationRequest* request, ::bosdyn::api::spot_cam::SetICEConfigurationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetICEConfiguration_, context, request, response, reactor);
}

void NetworkService::Stub::experimental_async::SetICEConfiguration(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::SetICEConfigurationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetICEConfiguration_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::SetICEConfigurationResponse>* NetworkService::Stub::AsyncSetICEConfigurationRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::SetICEConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::SetICEConfigurationResponse>::Create(channel_.get(), cq, rpcmethod_SetICEConfiguration_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::SetICEConfigurationResponse>* NetworkService::Stub::PrepareAsyncSetICEConfigurationRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::SetICEConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::SetICEConfigurationResponse>::Create(channel_.get(), cq, rpcmethod_SetICEConfiguration_, context, request, false);
}

::grpc::Status NetworkService::Stub::GetICEConfiguration(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetICEConfigurationRequest& request, ::bosdyn::api::spot_cam::GetICEConfigurationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetICEConfiguration_, context, request, response);
}

void NetworkService::Stub::experimental_async::GetICEConfiguration(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetICEConfigurationRequest* request, ::bosdyn::api::spot_cam::GetICEConfigurationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetICEConfiguration_, context, request, response, std::move(f));
}

void NetworkService::Stub::experimental_async::GetICEConfiguration(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::GetICEConfigurationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetICEConfiguration_, context, request, response, std::move(f));
}

void NetworkService::Stub::experimental_async::GetICEConfiguration(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetICEConfigurationRequest* request, ::bosdyn::api::spot_cam::GetICEConfigurationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetICEConfiguration_, context, request, response, reactor);
}

void NetworkService::Stub::experimental_async::GetICEConfiguration(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::GetICEConfigurationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetICEConfiguration_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::GetICEConfigurationResponse>* NetworkService::Stub::AsyncGetICEConfigurationRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetICEConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::GetICEConfigurationResponse>::Create(channel_.get(), cq, rpcmethod_GetICEConfiguration_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::GetICEConfigurationResponse>* NetworkService::Stub::PrepareAsyncGetICEConfigurationRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetICEConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::GetICEConfigurationResponse>::Create(channel_.get(), cq, rpcmethod_GetICEConfiguration_, context, request, false);
}

NetworkService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NetworkService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NetworkService::Service, ::bosdyn::api::spot_cam::SetICEConfigurationRequest, ::bosdyn::api::spot_cam::SetICEConfigurationResponse>(
          [](NetworkService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::spot_cam::SetICEConfigurationRequest* req,
             ::bosdyn::api::spot_cam::SetICEConfigurationResponse* resp) {
               return service->SetICEConfiguration(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NetworkService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NetworkService::Service, ::bosdyn::api::spot_cam::GetICEConfigurationRequest, ::bosdyn::api::spot_cam::GetICEConfigurationResponse>(
          [](NetworkService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::spot_cam::GetICEConfigurationRequest* req,
             ::bosdyn::api::spot_cam::GetICEConfigurationResponse* resp) {
               return service->GetICEConfiguration(ctx, req, resp);
             }, this)));
}

NetworkService::Service::~Service() {
}

::grpc::Status NetworkService::Service::SetICEConfiguration(::grpc::ServerContext* context, const ::bosdyn::api::spot_cam::SetICEConfigurationRequest* request, ::bosdyn::api::spot_cam::SetICEConfigurationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NetworkService::Service::GetICEConfiguration(::grpc::ServerContext* context, const ::bosdyn::api::spot_cam::GetICEConfigurationRequest* request, ::bosdyn::api::spot_cam::GetICEConfigurationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* VersionService_method_names[] = {
  "/bosdyn.api.spot_cam.VersionService/GetSoftwareVersion",
};

std::unique_ptr< VersionService::Stub> VersionService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< VersionService::Stub> stub(new VersionService::Stub(channel));
  return stub;
}

VersionService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetSoftwareVersion_(VersionService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status VersionService::Stub::GetSoftwareVersion(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetSoftwareVersionRequest& request, ::bosdyn::api::spot_cam::GetSoftwareVersionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetSoftwareVersion_, context, request, response);
}

void VersionService::Stub::experimental_async::GetSoftwareVersion(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetSoftwareVersionRequest* request, ::bosdyn::api::spot_cam::GetSoftwareVersionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetSoftwareVersion_, context, request, response, std::move(f));
}

void VersionService::Stub::experimental_async::GetSoftwareVersion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::GetSoftwareVersionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetSoftwareVersion_, context, request, response, std::move(f));
}

void VersionService::Stub::experimental_async::GetSoftwareVersion(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetSoftwareVersionRequest* request, ::bosdyn::api::spot_cam::GetSoftwareVersionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetSoftwareVersion_, context, request, response, reactor);
}

void VersionService::Stub::experimental_async::GetSoftwareVersion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::spot_cam::GetSoftwareVersionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetSoftwareVersion_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::GetSoftwareVersionResponse>* VersionService::Stub::AsyncGetSoftwareVersionRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetSoftwareVersionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::GetSoftwareVersionResponse>::Create(channel_.get(), cq, rpcmethod_GetSoftwareVersion_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::spot_cam::GetSoftwareVersionResponse>* VersionService::Stub::PrepareAsyncGetSoftwareVersionRaw(::grpc::ClientContext* context, const ::bosdyn::api::spot_cam::GetSoftwareVersionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::spot_cam::GetSoftwareVersionResponse>::Create(channel_.get(), cq, rpcmethod_GetSoftwareVersion_, context, request, false);
}

VersionService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VersionService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< VersionService::Service, ::bosdyn::api::spot_cam::GetSoftwareVersionRequest, ::bosdyn::api::spot_cam::GetSoftwareVersionResponse>(
          [](VersionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::spot_cam::GetSoftwareVersionRequest* req,
             ::bosdyn::api::spot_cam::GetSoftwareVersionResponse* resp) {
               return service->GetSoftwareVersion(ctx, req, resp);
             }, this)));
}

VersionService::Service::~Service() {
}

::grpc::Status VersionService::Service::GetSoftwareVersion(::grpc::ServerContext* context, const ::bosdyn::api::spot_cam::GetSoftwareVersionRequest* request, ::bosdyn::api::spot_cam::GetSoftwareVersionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace bosdyn
}  // namespace api
}  // namespace spot_cam

