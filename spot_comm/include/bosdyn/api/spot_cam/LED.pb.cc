// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/spot_cam/LED.proto

#include "bosdyn/api/spot_cam/LED.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetLEDBrightnessRequest_BrightnessesEntry_DoNotUse_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto;
namespace bosdyn {
namespace api {
namespace spot_cam {
class GetLEDBrightnessRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLEDBrightnessRequest> _instance;
} _GetLEDBrightnessRequest_default_instance_;
class GetLEDBrightnessResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLEDBrightnessResponse> _instance;
} _GetLEDBrightnessResponse_default_instance_;
class SetLEDBrightnessRequest_BrightnessesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetLEDBrightnessRequest_BrightnessesEntry_DoNotUse> _instance;
} _SetLEDBrightnessRequest_BrightnessesEntry_DoNotUse_default_instance_;
class SetLEDBrightnessRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetLEDBrightnessRequest> _instance;
} _SetLEDBrightnessRequest_default_instance_;
class SetLEDBrightnessResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetLEDBrightnessResponse> _instance;
} _SetLEDBrightnessResponse_default_instance_;
}  // namespace spot_cam
}  // namespace api
}  // namespace bosdyn
static void InitDefaultsscc_info_GetLEDBrightnessRequest_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_GetLEDBrightnessRequest_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::GetLEDBrightnessRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::GetLEDBrightnessRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetLEDBrightnessRequest_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetLEDBrightnessRequest_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_GetLEDBrightnessResponse_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_GetLEDBrightnessResponse_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::GetLEDBrightnessResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::GetLEDBrightnessResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetLEDBrightnessResponse_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetLEDBrightnessResponse_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_SetLEDBrightnessRequest_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_SetLEDBrightnessRequest_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::SetLEDBrightnessRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::SetLEDBrightnessRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SetLEDBrightnessRequest_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SetLEDBrightnessRequest_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_SetLEDBrightnessRequest_BrightnessesEntry_DoNotUse_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto.base,}};

static void InitDefaultsscc_info_SetLEDBrightnessRequest_BrightnessesEntry_DoNotUse_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_SetLEDBrightnessRequest_BrightnessesEntry_DoNotUse_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::SetLEDBrightnessRequest_BrightnessesEntry_DoNotUse();
  }
  ::bosdyn::api::spot_cam::SetLEDBrightnessRequest_BrightnessesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetLEDBrightnessRequest_BrightnessesEntry_DoNotUse_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetLEDBrightnessRequest_BrightnessesEntry_DoNotUse_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto}, {}};

static void InitDefaultsscc_info_SetLEDBrightnessResponse_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_SetLEDBrightnessResponse_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::SetLEDBrightnessResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::SetLEDBrightnessResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetLEDBrightnessResponse_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetLEDBrightnessResponse_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetLEDBrightnessRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetLEDBrightnessRequest, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetLEDBrightnessResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetLEDBrightnessResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetLEDBrightnessResponse, brightnesses_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::SetLEDBrightnessRequest_BrightnessesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::SetLEDBrightnessRequest_BrightnessesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::SetLEDBrightnessRequest_BrightnessesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::SetLEDBrightnessRequest_BrightnessesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::SetLEDBrightnessRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::SetLEDBrightnessRequest, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::SetLEDBrightnessRequest, brightnesses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::SetLEDBrightnessResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::SetLEDBrightnessResponse, header_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::bosdyn::api::spot_cam::GetLEDBrightnessRequest)},
  { 6, -1, sizeof(::bosdyn::api::spot_cam::GetLEDBrightnessResponse)},
  { 13, 20, sizeof(::bosdyn::api::spot_cam::SetLEDBrightnessRequest_BrightnessesEntry_DoNotUse)},
  { 22, -1, sizeof(::bosdyn::api::spot_cam::SetLEDBrightnessRequest)},
  { 29, -1, sizeof(::bosdyn::api::spot_cam::SetLEDBrightnessResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_GetLEDBrightnessRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_GetLEDBrightnessResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_SetLEDBrightnessRequest_BrightnessesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_SetLEDBrightnessRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_SetLEDBrightnessResponse_default_instance_),
};

const char descriptor_table_protodef_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035bosdyn/api/spot_cam/LED.proto\022\023bosdyn."
  "api.spot_cam\032\027bosdyn/api/header.proto\"D\n"
  "\027GetLEDBrightnessRequest\022)\n\006header\030\001 \001(\013"
  "2\031.bosdyn.api.RequestHeader\"\\\n\030GetLEDBri"
  "ghtnessResponse\022*\n\006header\030\001 \001(\0132\032.bosdyn"
  ".api.ResponseHeader\022\024\n\014brightnesses\030\002 \003("
  "\002\"\317\001\n\027SetLEDBrightnessRequest\022)\n\006header\030"
  "\001 \001(\0132\031.bosdyn.api.RequestHeader\022T\n\014brig"
  "htnesses\030\002 \003(\0132>.bosdyn.api.spot_cam.Set"
  "LEDBrightnessRequest.BrightnessesEntry\0323"
  "\n\021BrightnessesEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005valu"
  "e\030\002 \001(\002:\0028\001\"F\n\030SetLEDBrightnessResponse\022"
  "*\n\006header\030\001 \001(\0132\032.bosdyn.api.ResponseHea"
  "derB\017B\rLightingProtob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto_deps[1] = {
  &::descriptor_table_bosdyn_2fapi_2fheader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto_sccs[5] = {
  &scc_info_GetLEDBrightnessRequest_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto.base,
  &scc_info_GetLEDBrightnessResponse_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto.base,
  &scc_info_SetLEDBrightnessRequest_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto.base,
  &scc_info_SetLEDBrightnessRequest_BrightnessesEntry_DoNotUse_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto.base,
  &scc_info_SetLEDBrightnessResponse_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto = {
  false, false, descriptor_table_protodef_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto, "bosdyn/api/spot_cam/LED.proto", 548,
  &descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto_once, descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto_sccs, descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto_deps, 5, 1,
  schemas, file_default_instances, TableStruct_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto::offsets,
  file_level_metadata_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto, 5, file_level_enum_descriptors_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto, file_level_service_descriptors_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto)), true);
namespace bosdyn {
namespace api {
namespace spot_cam {

// ===================================================================

void GetLEDBrightnessRequest::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_GetLEDBrightnessRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
}
class GetLEDBrightnessRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const GetLEDBrightnessRequest* msg);
};

const ::bosdyn::api::RequestHeader&
GetLEDBrightnessRequest::_Internal::header(const GetLEDBrightnessRequest* msg) {
  return *msg->header_;
}
void GetLEDBrightnessRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
GetLEDBrightnessRequest::GetLEDBrightnessRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.GetLEDBrightnessRequest)
}
GetLEDBrightnessRequest::GetLEDBrightnessRequest(const GetLEDBrightnessRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.GetLEDBrightnessRequest)
}

void GetLEDBrightnessRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetLEDBrightnessRequest_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto.base);
  header_ = nullptr;
}

GetLEDBrightnessRequest::~GetLEDBrightnessRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.GetLEDBrightnessRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetLEDBrightnessRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void GetLEDBrightnessRequest::ArenaDtor(void* object) {
  GetLEDBrightnessRequest* _this = reinterpret_cast< GetLEDBrightnessRequest* >(object);
  (void)_this;
}
void GetLEDBrightnessRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLEDBrightnessRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLEDBrightnessRequest& GetLEDBrightnessRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLEDBrightnessRequest_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto.base);
  return *internal_default_instance();
}


void GetLEDBrightnessRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.GetLEDBrightnessRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLEDBrightnessRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLEDBrightnessRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.GetLEDBrightnessRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.GetLEDBrightnessRequest)
  return target;
}

size_t GetLEDBrightnessRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.GetLEDBrightnessRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLEDBrightnessRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.GetLEDBrightnessRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLEDBrightnessRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLEDBrightnessRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.GetLEDBrightnessRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.GetLEDBrightnessRequest)
    MergeFrom(*source);
  }
}

void GetLEDBrightnessRequest::MergeFrom(const GetLEDBrightnessRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.GetLEDBrightnessRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
}

void GetLEDBrightnessRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.GetLEDBrightnessRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLEDBrightnessRequest::CopyFrom(const GetLEDBrightnessRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.GetLEDBrightnessRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLEDBrightnessRequest::IsInitialized() const {
  return true;
}

void GetLEDBrightnessRequest::InternalSwap(GetLEDBrightnessRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLEDBrightnessRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetLEDBrightnessResponse::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_GetLEDBrightnessResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
}
class GetLEDBrightnessResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const GetLEDBrightnessResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
GetLEDBrightnessResponse::_Internal::header(const GetLEDBrightnessResponse* msg) {
  return *msg->header_;
}
void GetLEDBrightnessResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
GetLEDBrightnessResponse::GetLEDBrightnessResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  brightnesses_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.GetLEDBrightnessResponse)
}
GetLEDBrightnessResponse::GetLEDBrightnessResponse(const GetLEDBrightnessResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      brightnesses_(from.brightnesses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.GetLEDBrightnessResponse)
}

void GetLEDBrightnessResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetLEDBrightnessResponse_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto.base);
  header_ = nullptr;
}

GetLEDBrightnessResponse::~GetLEDBrightnessResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.GetLEDBrightnessResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetLEDBrightnessResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void GetLEDBrightnessResponse::ArenaDtor(void* object) {
  GetLEDBrightnessResponse* _this = reinterpret_cast< GetLEDBrightnessResponse* >(object);
  (void)_this;
}
void GetLEDBrightnessResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLEDBrightnessResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLEDBrightnessResponse& GetLEDBrightnessResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLEDBrightnessResponse_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto.base);
  return *internal_default_instance();
}


void GetLEDBrightnessResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.GetLEDBrightnessResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  brightnesses_.Clear();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLEDBrightnessResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float brightnesses = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_brightnesses(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_brightnesses(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLEDBrightnessResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.GetLEDBrightnessResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated float brightnesses = 2;
  if (this->_internal_brightnesses_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_brightnesses(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.GetLEDBrightnessResponse)
  return target;
}

size_t GetLEDBrightnessResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.GetLEDBrightnessResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float brightnesses = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_brightnesses_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _brightnesses_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLEDBrightnessResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.GetLEDBrightnessResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLEDBrightnessResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLEDBrightnessResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.GetLEDBrightnessResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.GetLEDBrightnessResponse)
    MergeFrom(*source);
  }
}

void GetLEDBrightnessResponse::MergeFrom(const GetLEDBrightnessResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.GetLEDBrightnessResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  brightnesses_.MergeFrom(from.brightnesses_);
  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
}

void GetLEDBrightnessResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.GetLEDBrightnessResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLEDBrightnessResponse::CopyFrom(const GetLEDBrightnessResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.GetLEDBrightnessResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLEDBrightnessResponse::IsInitialized() const {
  return true;
}

void GetLEDBrightnessResponse::InternalSwap(GetLEDBrightnessResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  brightnesses_.InternalSwap(&other->brightnesses_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLEDBrightnessResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

SetLEDBrightnessRequest_BrightnessesEntry_DoNotUse::SetLEDBrightnessRequest_BrightnessesEntry_DoNotUse() {}
SetLEDBrightnessRequest_BrightnessesEntry_DoNotUse::SetLEDBrightnessRequest_BrightnessesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SetLEDBrightnessRequest_BrightnessesEntry_DoNotUse::MergeFrom(const SetLEDBrightnessRequest_BrightnessesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SetLEDBrightnessRequest_BrightnessesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void SetLEDBrightnessRequest_BrightnessesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void SetLEDBrightnessRequest::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_SetLEDBrightnessRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
}
class SetLEDBrightnessRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const SetLEDBrightnessRequest* msg);
};

const ::bosdyn::api::RequestHeader&
SetLEDBrightnessRequest::_Internal::header(const SetLEDBrightnessRequest* msg) {
  return *msg->header_;
}
void SetLEDBrightnessRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
SetLEDBrightnessRequest::SetLEDBrightnessRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  brightnesses_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.SetLEDBrightnessRequest)
}
SetLEDBrightnessRequest::SetLEDBrightnessRequest(const SetLEDBrightnessRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  brightnesses_.MergeFrom(from.brightnesses_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.SetLEDBrightnessRequest)
}

void SetLEDBrightnessRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetLEDBrightnessRequest_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto.base);
  header_ = nullptr;
}

SetLEDBrightnessRequest::~SetLEDBrightnessRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.SetLEDBrightnessRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetLEDBrightnessRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void SetLEDBrightnessRequest::ArenaDtor(void* object) {
  SetLEDBrightnessRequest* _this = reinterpret_cast< SetLEDBrightnessRequest* >(object);
  (void)_this;
}
void SetLEDBrightnessRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetLEDBrightnessRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetLEDBrightnessRequest& SetLEDBrightnessRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetLEDBrightnessRequest_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto.base);
  return *internal_default_instance();
}


void SetLEDBrightnessRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.SetLEDBrightnessRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  brightnesses_.Clear();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetLEDBrightnessRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int32, float> brightnesses = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&brightnesses_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetLEDBrightnessRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.SetLEDBrightnessRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // map<int32, float> brightnesses = 2;
  if (!this->_internal_brightnesses().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_brightnesses().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_brightnesses().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >::const_iterator
          it = this->_internal_brightnesses().begin();
          it != this->_internal_brightnesses().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SetLEDBrightnessRequest_BrightnessesEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >::const_iterator
          it = this->_internal_brightnesses().begin();
          it != this->_internal_brightnesses().end(); ++it) {
        target = SetLEDBrightnessRequest_BrightnessesEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.SetLEDBrightnessRequest)
  return target;
}

size_t SetLEDBrightnessRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.SetLEDBrightnessRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, float> brightnesses = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_brightnesses_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, float >::const_iterator
      it = this->_internal_brightnesses().begin();
      it != this->_internal_brightnesses().end(); ++it) {
    total_size += SetLEDBrightnessRequest_BrightnessesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetLEDBrightnessRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.SetLEDBrightnessRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetLEDBrightnessRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetLEDBrightnessRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.SetLEDBrightnessRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.SetLEDBrightnessRequest)
    MergeFrom(*source);
  }
}

void SetLEDBrightnessRequest::MergeFrom(const SetLEDBrightnessRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.SetLEDBrightnessRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  brightnesses_.MergeFrom(from.brightnesses_);
  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
}

void SetLEDBrightnessRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.SetLEDBrightnessRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetLEDBrightnessRequest::CopyFrom(const SetLEDBrightnessRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.SetLEDBrightnessRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetLEDBrightnessRequest::IsInitialized() const {
  return true;
}

void SetLEDBrightnessRequest::InternalSwap(SetLEDBrightnessRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  brightnesses_.Swap(&other->brightnesses_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetLEDBrightnessRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetLEDBrightnessResponse::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_SetLEDBrightnessResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
}
class SetLEDBrightnessResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const SetLEDBrightnessResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
SetLEDBrightnessResponse::_Internal::header(const SetLEDBrightnessResponse* msg) {
  return *msg->header_;
}
void SetLEDBrightnessResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
SetLEDBrightnessResponse::SetLEDBrightnessResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.SetLEDBrightnessResponse)
}
SetLEDBrightnessResponse::SetLEDBrightnessResponse(const SetLEDBrightnessResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.SetLEDBrightnessResponse)
}

void SetLEDBrightnessResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetLEDBrightnessResponse_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto.base);
  header_ = nullptr;
}

SetLEDBrightnessResponse::~SetLEDBrightnessResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.SetLEDBrightnessResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetLEDBrightnessResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void SetLEDBrightnessResponse::ArenaDtor(void* object) {
  SetLEDBrightnessResponse* _this = reinterpret_cast< SetLEDBrightnessResponse* >(object);
  (void)_this;
}
void SetLEDBrightnessResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetLEDBrightnessResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetLEDBrightnessResponse& SetLEDBrightnessResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetLEDBrightnessResponse_bosdyn_2fapi_2fspot_5fcam_2fLED_2eproto.base);
  return *internal_default_instance();
}


void SetLEDBrightnessResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.SetLEDBrightnessResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetLEDBrightnessResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetLEDBrightnessResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.SetLEDBrightnessResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.SetLEDBrightnessResponse)
  return target;
}

size_t SetLEDBrightnessResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.SetLEDBrightnessResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetLEDBrightnessResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.SetLEDBrightnessResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetLEDBrightnessResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetLEDBrightnessResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.SetLEDBrightnessResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.SetLEDBrightnessResponse)
    MergeFrom(*source);
  }
}

void SetLEDBrightnessResponse::MergeFrom(const SetLEDBrightnessResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.SetLEDBrightnessResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
}

void SetLEDBrightnessResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.SetLEDBrightnessResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetLEDBrightnessResponse::CopyFrom(const SetLEDBrightnessResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.SetLEDBrightnessResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetLEDBrightnessResponse::IsInitialized() const {
  return true;
}

void SetLEDBrightnessResponse::InternalSwap(SetLEDBrightnessResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetLEDBrightnessResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace spot_cam
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::GetLEDBrightnessRequest* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::GetLEDBrightnessRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::GetLEDBrightnessRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::GetLEDBrightnessResponse* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::GetLEDBrightnessResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::GetLEDBrightnessResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::SetLEDBrightnessRequest_BrightnessesEntry_DoNotUse* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::SetLEDBrightnessRequest_BrightnessesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::SetLEDBrightnessRequest_BrightnessesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::SetLEDBrightnessRequest* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::SetLEDBrightnessRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::SetLEDBrightnessRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::SetLEDBrightnessResponse* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::SetLEDBrightnessResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::SetLEDBrightnessResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
