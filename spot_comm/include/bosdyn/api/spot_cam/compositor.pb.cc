// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/spot_cam/compositor.proto

#include "bosdyn/api/spot_cam/compositor.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Camera_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetVisibleCamerasResponse_Stream_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetVisibleCamerasResponse_Stream_Window_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScreenDescription_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto;
namespace bosdyn {
namespace api {
namespace spot_cam {
class ScreenDescriptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScreenDescription> _instance;
} _ScreenDescription_default_instance_;
class GetScreenRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetScreenRequest> _instance;
} _GetScreenRequest_default_instance_;
class GetScreenResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetScreenResponse> _instance;
} _GetScreenResponse_default_instance_;
class GetVisibleCamerasRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetVisibleCamerasRequest> _instance;
} _GetVisibleCamerasRequest_default_instance_;
class GetVisibleCamerasResponse_Stream_WindowDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetVisibleCamerasResponse_Stream_Window> _instance;
} _GetVisibleCamerasResponse_Stream_Window_default_instance_;
class GetVisibleCamerasResponse_StreamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetVisibleCamerasResponse_Stream> _instance;
} _GetVisibleCamerasResponse_Stream_default_instance_;
class GetVisibleCamerasResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetVisibleCamerasResponse> _instance;
} _GetVisibleCamerasResponse_default_instance_;
class ListScreensRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListScreensRequest> _instance;
} _ListScreensRequest_default_instance_;
class ListScreensResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListScreensResponse> _instance;
} _ListScreensResponse_default_instance_;
class SetScreenRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetScreenRequest> _instance;
} _SetScreenRequest_default_instance_;
class SetScreenResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetScreenResponse> _instance;
} _SetScreenResponse_default_instance_;
}  // namespace spot_cam
}  // namespace api
}  // namespace bosdyn
static void InitDefaultsscc_info_GetScreenRequest_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_GetScreenRequest_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::GetScreenRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::GetScreenRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetScreenRequest_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetScreenRequest_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_GetScreenResponse_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_GetScreenResponse_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::GetScreenResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::GetScreenResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetScreenResponse_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetScreenResponse_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_GetVisibleCamerasRequest_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_GetVisibleCamerasRequest_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::GetVisibleCamerasRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::GetVisibleCamerasRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetVisibleCamerasRequest_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetVisibleCamerasRequest_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_GetVisibleCamerasResponse_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_GetVisibleCamerasResponse_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::GetVisibleCamerasResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::GetVisibleCamerasResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetVisibleCamerasResponse_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetVisibleCamerasResponse_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_GetVisibleCamerasResponse_Stream_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto.base,}};

static void InitDefaultsscc_info_GetVisibleCamerasResponse_Stream_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_GetVisibleCamerasResponse_Stream_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetVisibleCamerasResponse_Stream_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetVisibleCamerasResponse_Stream_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto}, {
      &scc_info_GetVisibleCamerasResponse_Stream_Window_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto.base,
      &scc_info_Camera_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto.base,}};

static void InitDefaultsscc_info_GetVisibleCamerasResponse_Stream_Window_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_GetVisibleCamerasResponse_Stream_Window_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetVisibleCamerasResponse_Stream_Window_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetVisibleCamerasResponse_Stream_Window_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto}, {}};

static void InitDefaultsscc_info_ListScreensRequest_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_ListScreensRequest_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::ListScreensRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::ListScreensRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListScreensRequest_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListScreensRequest_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_ListScreensResponse_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_ListScreensResponse_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::ListScreensResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::ListScreensResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ListScreensResponse_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ListScreensResponse_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_ScreenDescription_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto.base,}};

static void InitDefaultsscc_info_ScreenDescription_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_ScreenDescription_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::ScreenDescription();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::ScreenDescription::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScreenDescription_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ScreenDescription_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto}, {}};

static void InitDefaultsscc_info_SetScreenRequest_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_SetScreenRequest_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::SetScreenRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::SetScreenRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetScreenRequest_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetScreenRequest_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_SetScreenResponse_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_SetScreenResponse_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::SetScreenResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::SetScreenResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetScreenResponse_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetScreenResponse_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::ScreenDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::ScreenDescription, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetScreenRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetScreenRequest, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetScreenResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetScreenResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetScreenResponse, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetVisibleCamerasRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetVisibleCamerasRequest, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window, xoffset_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window, yoffset_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window, width_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream, window_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream, camera_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetVisibleCamerasResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetVisibleCamerasResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetVisibleCamerasResponse, streams_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::ListScreensRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::ListScreensRequest, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::ListScreensResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::ListScreensResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::ListScreensResponse, screens_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::SetScreenRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::SetScreenRequest, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::SetScreenRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::SetScreenResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::SetScreenResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::SetScreenResponse, name_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::bosdyn::api::spot_cam::ScreenDescription)},
  { 6, -1, sizeof(::bosdyn::api::spot_cam::GetScreenRequest)},
  { 12, -1, sizeof(::bosdyn::api::spot_cam::GetScreenResponse)},
  { 19, -1, sizeof(::bosdyn::api::spot_cam::GetVisibleCamerasRequest)},
  { 25, -1, sizeof(::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window)},
  { 34, -1, sizeof(::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream)},
  { 41, -1, sizeof(::bosdyn::api::spot_cam::GetVisibleCamerasResponse)},
  { 48, -1, sizeof(::bosdyn::api::spot_cam::ListScreensRequest)},
  { 54, -1, sizeof(::bosdyn::api::spot_cam::ListScreensResponse)},
  { 61, -1, sizeof(::bosdyn::api::spot_cam::SetScreenRequest)},
  { 68, -1, sizeof(::bosdyn::api::spot_cam::SetScreenResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_ScreenDescription_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_GetScreenRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_GetScreenResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_GetVisibleCamerasRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_GetVisibleCamerasResponse_Stream_Window_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_GetVisibleCamerasResponse_Stream_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_GetVisibleCamerasResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_ListScreensRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_ListScreensResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_SetScreenRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_SetScreenResponse_default_instance_),
};

const char descriptor_table_protodef_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$bosdyn/api/spot_cam/compositor.proto\022\023"
  "bosdyn.api.spot_cam\032\027bosdyn/api/header.p"
  "roto\032 bosdyn/api/spot_cam/camera.proto\"!"
  "\n\021ScreenDescription\022\014\n\004name\030\001 \001(\t\"=\n\020Get"
  "ScreenRequest\022)\n\006header\030\001 \001(\0132\031.bosdyn.a"
  "pi.RequestHeader\"M\n\021GetScreenResponse\022*\n"
  "\006header\030\001 \001(\0132\032.bosdyn.api.ResponseHeade"
  "r\022\014\n\004name\030\002 \001(\t\"E\n\030GetVisibleCamerasRequ"
  "est\022)\n\006header\030\001 \001(\0132\031.bosdyn.api.Request"
  "Header\"\340\002\n\031GetVisibleCamerasResponse\022*\n\006"
  "header\030\001 \001(\0132\032.bosdyn.api.ResponseHeader"
  "\022F\n\007streams\030\002 \003(\01325.bosdyn.api.spot_cam."
  "GetVisibleCamerasResponse.Stream\032\316\001\n\006Str"
  "eam\022L\n\006window\030\001 \001(\0132<.bosdyn.api.spot_ca"
  "m.GetVisibleCamerasResponse.Stream.Windo"
  "w\022+\n\006camera\030\002 \001(\0132\033.bosdyn.api.spot_cam."
  "Camera\032I\n\006Window\022\017\n\007xoffset\030\001 \001(\005\022\017\n\007yof"
  "fset\030\002 \001(\005\022\r\n\005width\030\003 \001(\005\022\016\n\006height\030\004 \001("
  "\005\"\?\n\022ListScreensRequest\022)\n\006header\030\001 \001(\0132"
  "\031.bosdyn.api.RequestHeader\"z\n\023ListScreen"
  "sResponse\022*\n\006header\030\001 \001(\0132\032.bosdyn.api.R"
  "esponseHeader\0227\n\007screens\030\002 \003(\0132&.bosdyn."
  "api.spot_cam.ScreenDescription\"K\n\020SetScr"
  "eenRequest\022)\n\006header\030\001 \001(\0132\031.bosdyn.api."
  "RequestHeader\022\014\n\004name\030\002 \001(\t\"M\n\021SetScreen"
  "Response\022*\n\006header\030\001 \001(\0132\032.bosdyn.api.Re"
  "sponseHeader\022\014\n\004name\030\002 \001(\tB\021B\017Compositor"
  "Protob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto_deps[2] = {
  &::descriptor_table_bosdyn_2fapi_2fheader_2eproto,
  &::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto_sccs[11] = {
  &scc_info_GetScreenRequest_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto.base,
  &scc_info_GetScreenResponse_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto.base,
  &scc_info_GetVisibleCamerasRequest_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto.base,
  &scc_info_GetVisibleCamerasResponse_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto.base,
  &scc_info_GetVisibleCamerasResponse_Stream_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto.base,
  &scc_info_GetVisibleCamerasResponse_Stream_Window_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto.base,
  &scc_info_ListScreensRequest_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto.base,
  &scc_info_ListScreensResponse_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto.base,
  &scc_info_ScreenDescription_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto.base,
  &scc_info_SetScreenRequest_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto.base,
  &scc_info_SetScreenResponse_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto = {
  false, false, descriptor_table_protodef_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto, "bosdyn/api/spot_cam/compositor.proto", 1093,
  &descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto_once, descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto_sccs, descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto_deps, 11, 2,
  schemas, file_default_instances, TableStruct_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto::offsets,
  file_level_metadata_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto, 11, file_level_enum_descriptors_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto, file_level_service_descriptors_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto)), true);
namespace bosdyn {
namespace api {
namespace spot_cam {

// ===================================================================

void ScreenDescription::InitAsDefaultInstance() {
}
class ScreenDescription::_Internal {
 public:
};

ScreenDescription::ScreenDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.ScreenDescription)
}
ScreenDescription::ScreenDescription(const ScreenDescription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.ScreenDescription)
}

void ScreenDescription::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScreenDescription_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ScreenDescription::~ScreenDescription() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.ScreenDescription)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScreenDescription::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ScreenDescription::ArenaDtor(void* object) {
  ScreenDescription* _this = reinterpret_cast< ScreenDescription* >(object);
  (void)_this;
}
void ScreenDescription::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScreenDescription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScreenDescription& ScreenDescription::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScreenDescription_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto.base);
  return *internal_default_instance();
}


void ScreenDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.ScreenDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScreenDescription::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.spot_cam.ScreenDescription.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScreenDescription::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.ScreenDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.spot_cam.ScreenDescription.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.ScreenDescription)
  return target;
}

size_t ScreenDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.ScreenDescription)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScreenDescription::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.ScreenDescription)
  GOOGLE_DCHECK_NE(&from, this);
  const ScreenDescription* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScreenDescription>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.ScreenDescription)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.ScreenDescription)
    MergeFrom(*source);
  }
}

void ScreenDescription::MergeFrom(const ScreenDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.ScreenDescription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void ScreenDescription::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.ScreenDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScreenDescription::CopyFrom(const ScreenDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.ScreenDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScreenDescription::IsInitialized() const {
  return true;
}

void ScreenDescription::InternalSwap(ScreenDescription* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ScreenDescription::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetScreenRequest::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_GetScreenRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
}
class GetScreenRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const GetScreenRequest* msg);
};

const ::bosdyn::api::RequestHeader&
GetScreenRequest::_Internal::header(const GetScreenRequest* msg) {
  return *msg->header_;
}
void GetScreenRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
GetScreenRequest::GetScreenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.GetScreenRequest)
}
GetScreenRequest::GetScreenRequest(const GetScreenRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.GetScreenRequest)
}

void GetScreenRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetScreenRequest_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto.base);
  header_ = nullptr;
}

GetScreenRequest::~GetScreenRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.GetScreenRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetScreenRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void GetScreenRequest::ArenaDtor(void* object) {
  GetScreenRequest* _this = reinterpret_cast< GetScreenRequest* >(object);
  (void)_this;
}
void GetScreenRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetScreenRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetScreenRequest& GetScreenRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetScreenRequest_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto.base);
  return *internal_default_instance();
}


void GetScreenRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.GetScreenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetScreenRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetScreenRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.GetScreenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.GetScreenRequest)
  return target;
}

size_t GetScreenRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.GetScreenRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetScreenRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.GetScreenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetScreenRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetScreenRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.GetScreenRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.GetScreenRequest)
    MergeFrom(*source);
  }
}

void GetScreenRequest::MergeFrom(const GetScreenRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.GetScreenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
}

void GetScreenRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.GetScreenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetScreenRequest::CopyFrom(const GetScreenRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.GetScreenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetScreenRequest::IsInitialized() const {
  return true;
}

void GetScreenRequest::InternalSwap(GetScreenRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetScreenRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetScreenResponse::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_GetScreenResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
}
class GetScreenResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const GetScreenResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
GetScreenResponse::_Internal::header(const GetScreenResponse* msg) {
  return *msg->header_;
}
void GetScreenResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
GetScreenResponse::GetScreenResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.GetScreenResponse)
}
GetScreenResponse::GetScreenResponse(const GetScreenResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.GetScreenResponse)
}

void GetScreenResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetScreenResponse_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  header_ = nullptr;
}

GetScreenResponse::~GetScreenResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.GetScreenResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetScreenResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void GetScreenResponse::ArenaDtor(void* object) {
  GetScreenResponse* _this = reinterpret_cast< GetScreenResponse* >(object);
  (void)_this;
}
void GetScreenResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetScreenResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetScreenResponse& GetScreenResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetScreenResponse_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto.base);
  return *internal_default_instance();
}


void GetScreenResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.GetScreenResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetScreenResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.spot_cam.GetScreenResponse.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetScreenResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.GetScreenResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.spot_cam.GetScreenResponse.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.GetScreenResponse)
  return target;
}

size_t GetScreenResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.GetScreenResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetScreenResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.GetScreenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetScreenResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetScreenResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.GetScreenResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.GetScreenResponse)
    MergeFrom(*source);
  }
}

void GetScreenResponse::MergeFrom(const GetScreenResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.GetScreenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
}

void GetScreenResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.GetScreenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetScreenResponse::CopyFrom(const GetScreenResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.GetScreenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetScreenResponse::IsInitialized() const {
  return true;
}

void GetScreenResponse::InternalSwap(GetScreenResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetScreenResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetVisibleCamerasRequest::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_GetVisibleCamerasRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
}
class GetVisibleCamerasRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const GetVisibleCamerasRequest* msg);
};

const ::bosdyn::api::RequestHeader&
GetVisibleCamerasRequest::_Internal::header(const GetVisibleCamerasRequest* msg) {
  return *msg->header_;
}
void GetVisibleCamerasRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
GetVisibleCamerasRequest::GetVisibleCamerasRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.GetVisibleCamerasRequest)
}
GetVisibleCamerasRequest::GetVisibleCamerasRequest(const GetVisibleCamerasRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.GetVisibleCamerasRequest)
}

void GetVisibleCamerasRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetVisibleCamerasRequest_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto.base);
  header_ = nullptr;
}

GetVisibleCamerasRequest::~GetVisibleCamerasRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.GetVisibleCamerasRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetVisibleCamerasRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void GetVisibleCamerasRequest::ArenaDtor(void* object) {
  GetVisibleCamerasRequest* _this = reinterpret_cast< GetVisibleCamerasRequest* >(object);
  (void)_this;
}
void GetVisibleCamerasRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetVisibleCamerasRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetVisibleCamerasRequest& GetVisibleCamerasRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetVisibleCamerasRequest_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto.base);
  return *internal_default_instance();
}


void GetVisibleCamerasRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.GetVisibleCamerasRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetVisibleCamerasRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetVisibleCamerasRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.GetVisibleCamerasRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.GetVisibleCamerasRequest)
  return target;
}

size_t GetVisibleCamerasRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.GetVisibleCamerasRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetVisibleCamerasRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.GetVisibleCamerasRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetVisibleCamerasRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetVisibleCamerasRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.GetVisibleCamerasRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.GetVisibleCamerasRequest)
    MergeFrom(*source);
  }
}

void GetVisibleCamerasRequest::MergeFrom(const GetVisibleCamerasRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.GetVisibleCamerasRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
}

void GetVisibleCamerasRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.GetVisibleCamerasRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetVisibleCamerasRequest::CopyFrom(const GetVisibleCamerasRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.GetVisibleCamerasRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetVisibleCamerasRequest::IsInitialized() const {
  return true;
}

void GetVisibleCamerasRequest::InternalSwap(GetVisibleCamerasRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetVisibleCamerasRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetVisibleCamerasResponse_Stream_Window::InitAsDefaultInstance() {
}
class GetVisibleCamerasResponse_Stream_Window::_Internal {
 public:
};

GetVisibleCamerasResponse_Stream_Window::GetVisibleCamerasResponse_Stream_Window(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.Window)
}
GetVisibleCamerasResponse_Stream_Window::GetVisibleCamerasResponse_Stream_Window(const GetVisibleCamerasResponse_Stream_Window& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&xoffset_, &from.xoffset_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&xoffset_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.Window)
}

void GetVisibleCamerasResponse_Stream_Window::SharedCtor() {
  ::memset(&xoffset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&xoffset_)) + sizeof(height_));
}

GetVisibleCamerasResponse_Stream_Window::~GetVisibleCamerasResponse_Stream_Window() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.Window)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetVisibleCamerasResponse_Stream_Window::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetVisibleCamerasResponse_Stream_Window::ArenaDtor(void* object) {
  GetVisibleCamerasResponse_Stream_Window* _this = reinterpret_cast< GetVisibleCamerasResponse_Stream_Window* >(object);
  (void)_this;
}
void GetVisibleCamerasResponse_Stream_Window::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetVisibleCamerasResponse_Stream_Window::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetVisibleCamerasResponse_Stream_Window& GetVisibleCamerasResponse_Stream_Window::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetVisibleCamerasResponse_Stream_Window_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto.base);
  return *internal_default_instance();
}


void GetVisibleCamerasResponse_Stream_Window::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.Window)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&xoffset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&xoffset_)) + sizeof(height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetVisibleCamerasResponse_Stream_Window::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 xoffset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          xoffset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 yoffset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          yoffset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetVisibleCamerasResponse_Stream_Window::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.Window)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 xoffset = 1;
  if (this->xoffset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_xoffset(), target);
  }

  // int32 yoffset = 2;
  if (this->yoffset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_yoffset(), target);
  }

  // int32 width = 3;
  if (this->width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_width(), target);
  }

  // int32 height = 4;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.Window)
  return target;
}

size_t GetVisibleCamerasResponse_Stream_Window::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.Window)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 xoffset = 1;
  if (this->xoffset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_xoffset());
  }

  // int32 yoffset = 2;
  if (this->yoffset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_yoffset());
  }

  // int32 width = 3;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());
  }

  // int32 height = 4;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetVisibleCamerasResponse_Stream_Window::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.Window)
  GOOGLE_DCHECK_NE(&from, this);
  const GetVisibleCamerasResponse_Stream_Window* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetVisibleCamerasResponse_Stream_Window>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.Window)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.Window)
    MergeFrom(*source);
  }
}

void GetVisibleCamerasResponse_Stream_Window::MergeFrom(const GetVisibleCamerasResponse_Stream_Window& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.Window)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.xoffset() != 0) {
    _internal_set_xoffset(from._internal_xoffset());
  }
  if (from.yoffset() != 0) {
    _internal_set_yoffset(from._internal_yoffset());
  }
  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
}

void GetVisibleCamerasResponse_Stream_Window::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.Window)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetVisibleCamerasResponse_Stream_Window::CopyFrom(const GetVisibleCamerasResponse_Stream_Window& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.Window)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetVisibleCamerasResponse_Stream_Window::IsInitialized() const {
  return true;
}

void GetVisibleCamerasResponse_Stream_Window::InternalSwap(GetVisibleCamerasResponse_Stream_Window* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetVisibleCamerasResponse_Stream_Window, height_)
      + sizeof(GetVisibleCamerasResponse_Stream_Window::height_)
      - PROTOBUF_FIELD_OFFSET(GetVisibleCamerasResponse_Stream_Window, xoffset_)>(
          reinterpret_cast<char*>(&xoffset_),
          reinterpret_cast<char*>(&other->xoffset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetVisibleCamerasResponse_Stream_Window::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetVisibleCamerasResponse_Stream::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_GetVisibleCamerasResponse_Stream_default_instance_._instance.get_mutable()->window_ = const_cast< ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window*>(
      ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window::internal_default_instance());
  ::bosdyn::api::spot_cam::_GetVisibleCamerasResponse_Stream_default_instance_._instance.get_mutable()->camera_ = const_cast< ::bosdyn::api::spot_cam::Camera*>(
      ::bosdyn::api::spot_cam::Camera::internal_default_instance());
}
class GetVisibleCamerasResponse_Stream::_Internal {
 public:
  static const ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window& window(const GetVisibleCamerasResponse_Stream* msg);
  static const ::bosdyn::api::spot_cam::Camera& camera(const GetVisibleCamerasResponse_Stream* msg);
};

const ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window&
GetVisibleCamerasResponse_Stream::_Internal::window(const GetVisibleCamerasResponse_Stream* msg) {
  return *msg->window_;
}
const ::bosdyn::api::spot_cam::Camera&
GetVisibleCamerasResponse_Stream::_Internal::camera(const GetVisibleCamerasResponse_Stream* msg) {
  return *msg->camera_;
}
void GetVisibleCamerasResponse_Stream::clear_camera() {
  if (GetArena() == nullptr && camera_ != nullptr) {
    delete camera_;
  }
  camera_ = nullptr;
}
GetVisibleCamerasResponse_Stream::GetVisibleCamerasResponse_Stream(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream)
}
GetVisibleCamerasResponse_Stream::GetVisibleCamerasResponse_Stream(const GetVisibleCamerasResponse_Stream& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_window()) {
    window_ = new ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window(*from.window_);
  } else {
    window_ = nullptr;
  }
  if (from._internal_has_camera()) {
    camera_ = new ::bosdyn::api::spot_cam::Camera(*from.camera_);
  } else {
    camera_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream)
}

void GetVisibleCamerasResponse_Stream::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetVisibleCamerasResponse_Stream_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto.base);
  ::memset(&window_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&camera_) -
      reinterpret_cast<char*>(&window_)) + sizeof(camera_));
}

GetVisibleCamerasResponse_Stream::~GetVisibleCamerasResponse_Stream() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetVisibleCamerasResponse_Stream::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete window_;
  if (this != internal_default_instance()) delete camera_;
}

void GetVisibleCamerasResponse_Stream::ArenaDtor(void* object) {
  GetVisibleCamerasResponse_Stream* _this = reinterpret_cast< GetVisibleCamerasResponse_Stream* >(object);
  (void)_this;
}
void GetVisibleCamerasResponse_Stream::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetVisibleCamerasResponse_Stream::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetVisibleCamerasResponse_Stream& GetVisibleCamerasResponse_Stream::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetVisibleCamerasResponse_Stream_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto.base);
  return *internal_default_instance();
}


void GetVisibleCamerasResponse_Stream::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && window_ != nullptr) {
    delete window_;
  }
  window_ = nullptr;
  if (GetArena() == nullptr && camera_ != nullptr) {
    delete camera_;
  }
  camera_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetVisibleCamerasResponse_Stream::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.Window window = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_window(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.spot_cam.Camera camera = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_camera(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetVisibleCamerasResponse_Stream::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.Window window = 1;
  if (this->has_window()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::window(this), target, stream);
  }

  // .bosdyn.api.spot_cam.Camera camera = 2;
  if (this->has_camera()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::camera(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream)
  return target;
}

size_t GetVisibleCamerasResponse_Stream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.Window window = 1;
  if (this->has_window()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *window_);
  }

  // .bosdyn.api.spot_cam.Camera camera = 2;
  if (this->has_camera()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *camera_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetVisibleCamerasResponse_Stream::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream)
  GOOGLE_DCHECK_NE(&from, this);
  const GetVisibleCamerasResponse_Stream* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetVisibleCamerasResponse_Stream>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream)
    MergeFrom(*source);
  }
}

void GetVisibleCamerasResponse_Stream::MergeFrom(const GetVisibleCamerasResponse_Stream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_window()) {
    _internal_mutable_window()->::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window::MergeFrom(from._internal_window());
  }
  if (from.has_camera()) {
    _internal_mutable_camera()->::bosdyn::api::spot_cam::Camera::MergeFrom(from._internal_camera());
  }
}

void GetVisibleCamerasResponse_Stream::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetVisibleCamerasResponse_Stream::CopyFrom(const GetVisibleCamerasResponse_Stream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetVisibleCamerasResponse_Stream::IsInitialized() const {
  return true;
}

void GetVisibleCamerasResponse_Stream::InternalSwap(GetVisibleCamerasResponse_Stream* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetVisibleCamerasResponse_Stream, camera_)
      + sizeof(GetVisibleCamerasResponse_Stream::camera_)
      - PROTOBUF_FIELD_OFFSET(GetVisibleCamerasResponse_Stream, window_)>(
          reinterpret_cast<char*>(&window_),
          reinterpret_cast<char*>(&other->window_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetVisibleCamerasResponse_Stream::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetVisibleCamerasResponse::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_GetVisibleCamerasResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
}
class GetVisibleCamerasResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const GetVisibleCamerasResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
GetVisibleCamerasResponse::_Internal::header(const GetVisibleCamerasResponse* msg) {
  return *msg->header_;
}
void GetVisibleCamerasResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
GetVisibleCamerasResponse::GetVisibleCamerasResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  streams_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.GetVisibleCamerasResponse)
}
GetVisibleCamerasResponse::GetVisibleCamerasResponse(const GetVisibleCamerasResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      streams_(from.streams_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.GetVisibleCamerasResponse)
}

void GetVisibleCamerasResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetVisibleCamerasResponse_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto.base);
  header_ = nullptr;
}

GetVisibleCamerasResponse::~GetVisibleCamerasResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.GetVisibleCamerasResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetVisibleCamerasResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void GetVisibleCamerasResponse::ArenaDtor(void* object) {
  GetVisibleCamerasResponse* _this = reinterpret_cast< GetVisibleCamerasResponse* >(object);
  (void)_this;
}
void GetVisibleCamerasResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetVisibleCamerasResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetVisibleCamerasResponse& GetVisibleCamerasResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetVisibleCamerasResponse_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto.base);
  return *internal_default_instance();
}


void GetVisibleCamerasResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.GetVisibleCamerasResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  streams_.Clear();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetVisibleCamerasResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream streams = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_streams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetVisibleCamerasResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.GetVisibleCamerasResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream streams = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_streams_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_streams(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.GetVisibleCamerasResponse)
  return target;
}

size_t GetVisibleCamerasResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.GetVisibleCamerasResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream streams = 2;
  total_size += 1UL * this->_internal_streams_size();
  for (const auto& msg : this->streams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetVisibleCamerasResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.GetVisibleCamerasResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetVisibleCamerasResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetVisibleCamerasResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.GetVisibleCamerasResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.GetVisibleCamerasResponse)
    MergeFrom(*source);
  }
}

void GetVisibleCamerasResponse::MergeFrom(const GetVisibleCamerasResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.GetVisibleCamerasResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  streams_.MergeFrom(from.streams_);
  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
}

void GetVisibleCamerasResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.GetVisibleCamerasResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetVisibleCamerasResponse::CopyFrom(const GetVisibleCamerasResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.GetVisibleCamerasResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetVisibleCamerasResponse::IsInitialized() const {
  return true;
}

void GetVisibleCamerasResponse::InternalSwap(GetVisibleCamerasResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  streams_.InternalSwap(&other->streams_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetVisibleCamerasResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListScreensRequest::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_ListScreensRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
}
class ListScreensRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const ListScreensRequest* msg);
};

const ::bosdyn::api::RequestHeader&
ListScreensRequest::_Internal::header(const ListScreensRequest* msg) {
  return *msg->header_;
}
void ListScreensRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
ListScreensRequest::ListScreensRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.ListScreensRequest)
}
ListScreensRequest::ListScreensRequest(const ListScreensRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.ListScreensRequest)
}

void ListScreensRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListScreensRequest_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto.base);
  header_ = nullptr;
}

ListScreensRequest::~ListScreensRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.ListScreensRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListScreensRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void ListScreensRequest::ArenaDtor(void* object) {
  ListScreensRequest* _this = reinterpret_cast< ListScreensRequest* >(object);
  (void)_this;
}
void ListScreensRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListScreensRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListScreensRequest& ListScreensRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListScreensRequest_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto.base);
  return *internal_default_instance();
}


void ListScreensRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.ListScreensRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListScreensRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListScreensRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.ListScreensRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.ListScreensRequest)
  return target;
}

size_t ListScreensRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.ListScreensRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListScreensRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.ListScreensRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListScreensRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListScreensRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.ListScreensRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.ListScreensRequest)
    MergeFrom(*source);
  }
}

void ListScreensRequest::MergeFrom(const ListScreensRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.ListScreensRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
}

void ListScreensRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.ListScreensRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListScreensRequest::CopyFrom(const ListScreensRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.ListScreensRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListScreensRequest::IsInitialized() const {
  return true;
}

void ListScreensRequest::InternalSwap(ListScreensRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListScreensRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListScreensResponse::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_ListScreensResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
}
class ListScreensResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const ListScreensResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
ListScreensResponse::_Internal::header(const ListScreensResponse* msg) {
  return *msg->header_;
}
void ListScreensResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
ListScreensResponse::ListScreensResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  screens_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.ListScreensResponse)
}
ListScreensResponse::ListScreensResponse(const ListScreensResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      screens_(from.screens_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.ListScreensResponse)
}

void ListScreensResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListScreensResponse_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto.base);
  header_ = nullptr;
}

ListScreensResponse::~ListScreensResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.ListScreensResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListScreensResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void ListScreensResponse::ArenaDtor(void* object) {
  ListScreensResponse* _this = reinterpret_cast< ListScreensResponse* >(object);
  (void)_this;
}
void ListScreensResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListScreensResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListScreensResponse& ListScreensResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListScreensResponse_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto.base);
  return *internal_default_instance();
}


void ListScreensResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.ListScreensResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  screens_.Clear();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListScreensResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bosdyn.api.spot_cam.ScreenDescription screens = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_screens(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListScreensResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.ListScreensResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .bosdyn.api.spot_cam.ScreenDescription screens = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_screens_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_screens(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.ListScreensResponse)
  return target;
}

size_t ListScreensResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.ListScreensResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bosdyn.api.spot_cam.ScreenDescription screens = 2;
  total_size += 1UL * this->_internal_screens_size();
  for (const auto& msg : this->screens_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListScreensResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.ListScreensResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListScreensResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListScreensResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.ListScreensResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.ListScreensResponse)
    MergeFrom(*source);
  }
}

void ListScreensResponse::MergeFrom(const ListScreensResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.ListScreensResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  screens_.MergeFrom(from.screens_);
  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
}

void ListScreensResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.ListScreensResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListScreensResponse::CopyFrom(const ListScreensResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.ListScreensResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListScreensResponse::IsInitialized() const {
  return true;
}

void ListScreensResponse::InternalSwap(ListScreensResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  screens_.InternalSwap(&other->screens_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListScreensResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetScreenRequest::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_SetScreenRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
}
class SetScreenRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const SetScreenRequest* msg);
};

const ::bosdyn::api::RequestHeader&
SetScreenRequest::_Internal::header(const SetScreenRequest* msg) {
  return *msg->header_;
}
void SetScreenRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
SetScreenRequest::SetScreenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.SetScreenRequest)
}
SetScreenRequest::SetScreenRequest(const SetScreenRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.SetScreenRequest)
}

void SetScreenRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetScreenRequest_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  header_ = nullptr;
}

SetScreenRequest::~SetScreenRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.SetScreenRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetScreenRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void SetScreenRequest::ArenaDtor(void* object) {
  SetScreenRequest* _this = reinterpret_cast< SetScreenRequest* >(object);
  (void)_this;
}
void SetScreenRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetScreenRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetScreenRequest& SetScreenRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetScreenRequest_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto.base);
  return *internal_default_instance();
}


void SetScreenRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.SetScreenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetScreenRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.spot_cam.SetScreenRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetScreenRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.SetScreenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.spot_cam.SetScreenRequest.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.SetScreenRequest)
  return target;
}

size_t SetScreenRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.SetScreenRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetScreenRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.SetScreenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetScreenRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetScreenRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.SetScreenRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.SetScreenRequest)
    MergeFrom(*source);
  }
}

void SetScreenRequest::MergeFrom(const SetScreenRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.SetScreenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
}

void SetScreenRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.SetScreenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetScreenRequest::CopyFrom(const SetScreenRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.SetScreenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetScreenRequest::IsInitialized() const {
  return true;
}

void SetScreenRequest::InternalSwap(SetScreenRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetScreenRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetScreenResponse::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_SetScreenResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
}
class SetScreenResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const SetScreenResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
SetScreenResponse::_Internal::header(const SetScreenResponse* msg) {
  return *msg->header_;
}
void SetScreenResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
SetScreenResponse::SetScreenResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.SetScreenResponse)
}
SetScreenResponse::SetScreenResponse(const SetScreenResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.SetScreenResponse)
}

void SetScreenResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetScreenResponse_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  header_ = nullptr;
}

SetScreenResponse::~SetScreenResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.SetScreenResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetScreenResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void SetScreenResponse::ArenaDtor(void* object) {
  SetScreenResponse* _this = reinterpret_cast< SetScreenResponse* >(object);
  (void)_this;
}
void SetScreenResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetScreenResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetScreenResponse& SetScreenResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetScreenResponse_bosdyn_2fapi_2fspot_5fcam_2fcompositor_2eproto.base);
  return *internal_default_instance();
}


void SetScreenResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.SetScreenResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetScreenResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.spot_cam.SetScreenResponse.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetScreenResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.SetScreenResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.spot_cam.SetScreenResponse.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.SetScreenResponse)
  return target;
}

size_t SetScreenResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.SetScreenResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetScreenResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.SetScreenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetScreenResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetScreenResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.SetScreenResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.SetScreenResponse)
    MergeFrom(*source);
  }
}

void SetScreenResponse::MergeFrom(const SetScreenResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.SetScreenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
}

void SetScreenResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.SetScreenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetScreenResponse::CopyFrom(const SetScreenResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.SetScreenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetScreenResponse::IsInitialized() const {
  return true;
}

void SetScreenResponse::InternalSwap(SetScreenResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetScreenResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace spot_cam
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::ScreenDescription* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::ScreenDescription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::ScreenDescription >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::GetScreenRequest* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::GetScreenRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::GetScreenRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::GetScreenResponse* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::GetScreenResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::GetScreenResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::GetVisibleCamerasRequest* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::GetVisibleCamerasRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::GetVisibleCamerasRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream_Window >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::GetVisibleCamerasResponse_Stream >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::GetVisibleCamerasResponse* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::GetVisibleCamerasResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::GetVisibleCamerasResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::ListScreensRequest* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::ListScreensRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::ListScreensRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::ListScreensResponse* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::ListScreensResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::ListScreensResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::SetScreenRequest* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::SetScreenRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::SetScreenRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::SetScreenResponse* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::SetScreenResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::SetScreenResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
