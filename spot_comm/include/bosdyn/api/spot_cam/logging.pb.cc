// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/spot_cam/logging.proto

#include "bosdyn/api/spot_cam/logging.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fdata_5fchunk_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DataChunk_bosdyn_2fapi_2fdata_5fchunk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SE3Pose_bosdyn_2fapi_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Camera_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Camera_PinholeIntrinsics_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Logpoint_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Logpoint_Calibration_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Logpoint_ImageParams_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace bosdyn {
namespace api {
namespace spot_cam {
class Logpoint_ImageParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Logpoint_ImageParams> _instance;
} _Logpoint_ImageParams_default_instance_;
class Logpoint_CalibrationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Logpoint_Calibration> _instance;
} _Logpoint_Calibration_default_instance_;
class LogpointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Logpoint> _instance;
} _Logpoint_default_instance_;
class DeleteRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteRequest> _instance;
} _DeleteRequest_default_instance_;
class DeleteResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteResponse> _instance;
} _DeleteResponse_default_instance_;
class GetStatusRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetStatusRequest> _instance;
} _GetStatusRequest_default_instance_;
class GetStatusResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetStatusResponse> _instance;
} _GetStatusResponse_default_instance_;
class RetrieveRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RetrieveRequest> _instance;
} _RetrieveRequest_default_instance_;
class RetrieveResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RetrieveResponse> _instance;
} _RetrieveResponse_default_instance_;
class RetrieveRawDataRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RetrieveRawDataRequest> _instance;
} _RetrieveRawDataRequest_default_instance_;
class RetrieveRawDataResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RetrieveRawDataResponse> _instance;
} _RetrieveRawDataResponse_default_instance_;
class StoreRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StoreRequest> _instance;
} _StoreRequest_default_instance_;
class StoreResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StoreResponse> _instance;
} _StoreResponse_default_instance_;
class TagRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TagRequest> _instance;
} _TagRequest_default_instance_;
class TagResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TagResponse> _instance;
} _TagResponse_default_instance_;
class ListCamerasRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListCamerasRequest> _instance;
} _ListCamerasRequest_default_instance_;
class ListCamerasResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListCamerasResponse> _instance;
} _ListCamerasResponse_default_instance_;
class ListLogpointsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListLogpointsRequest> _instance;
} _ListLogpointsRequest_default_instance_;
class ListLogpointsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListLogpointsResponse> _instance;
} _ListLogpointsResponse_default_instance_;
class SetPassphraseRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetPassphraseRequest> _instance;
} _SetPassphraseRequest_default_instance_;
class SetPassphraseResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetPassphraseResponse> _instance;
} _SetPassphraseResponse_default_instance_;
class DebugRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DebugRequest> _instance;
} _DebugRequest_default_instance_;
class DebugResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DebugResponse> _instance;
} _DebugResponse_default_instance_;
}  // namespace spot_cam
}  // namespace api
}  // namespace bosdyn
static void InitDefaultsscc_info_DebugRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_DebugRequest_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::DebugRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::DebugRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DebugRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DebugRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_DebugResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_DebugResponse_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::DebugResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::DebugResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DebugResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DebugResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_DeleteRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_DeleteRequest_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::DeleteRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::DeleteRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DeleteRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DeleteRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_Logpoint_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base,}};

static void InitDefaultsscc_info_DeleteResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_DeleteResponse_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::DeleteResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::DeleteResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeleteResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DeleteResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_GetStatusRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_GetStatusRequest_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::GetStatusRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::GetStatusRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetStatusRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetStatusRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_Logpoint_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base,}};

static void InitDefaultsscc_info_GetStatusResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_GetStatusResponse_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::GetStatusResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::GetStatusResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetStatusResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetStatusResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_Logpoint_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base,}};

static void InitDefaultsscc_info_ListCamerasRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_ListCamerasRequest_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::ListCamerasRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::ListCamerasRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListCamerasRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListCamerasRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_ListCamerasResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_ListCamerasResponse_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::ListCamerasResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::ListCamerasResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ListCamerasResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ListCamerasResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_Camera_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto.base,}};

static void InitDefaultsscc_info_ListLogpointsRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_ListLogpointsRequest_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::ListLogpointsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::ListLogpointsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListLogpointsRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListLogpointsRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_ListLogpointsResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_ListLogpointsResponse_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::ListLogpointsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::ListLogpointsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ListLogpointsResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ListLogpointsResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_Logpoint_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base,}};

static void InitDefaultsscc_info_Logpoint_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_Logpoint_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::Logpoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::Logpoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Logpoint_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Logpoint_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_Logpoint_ImageParams_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base,
      &scc_info_Logpoint_Calibration_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base,}};

static void InitDefaultsscc_info_Logpoint_Calibration_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_Logpoint_Calibration_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::Logpoint_Calibration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::Logpoint_Calibration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Logpoint_Calibration_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Logpoint_Calibration_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto}, {
      &scc_info_SE3Pose_bosdyn_2fapi_2fgeometry_2eproto.base,
      &scc_info_Camera_PinholeIntrinsics_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto.base,}};

static void InitDefaultsscc_info_Logpoint_ImageParams_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_Logpoint_ImageParams_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::Logpoint_ImageParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::Logpoint_ImageParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Logpoint_ImageParams_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Logpoint_ImageParams_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto}, {}};

static void InitDefaultsscc_info_RetrieveRawDataRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_RetrieveRawDataRequest_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::RetrieveRawDataRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::RetrieveRawDataRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RetrieveRawDataRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RetrieveRawDataRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_Logpoint_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base,}};

static void InitDefaultsscc_info_RetrieveRawDataResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_RetrieveRawDataResponse_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::RetrieveRawDataResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::RetrieveRawDataResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RetrieveRawDataResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_RetrieveRawDataResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_Logpoint_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base,
      &scc_info_DataChunk_bosdyn_2fapi_2fdata_5fchunk_2eproto.base,}};

static void InitDefaultsscc_info_RetrieveRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_RetrieveRequest_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::RetrieveRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::RetrieveRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RetrieveRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RetrieveRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_Logpoint_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base,}};

static void InitDefaultsscc_info_RetrieveResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_RetrieveResponse_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::RetrieveResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::RetrieveResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RetrieveResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_RetrieveResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_Logpoint_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base,
      &scc_info_DataChunk_bosdyn_2fapi_2fdata_5fchunk_2eproto.base,}};

static void InitDefaultsscc_info_SetPassphraseRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_SetPassphraseRequest_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::SetPassphraseRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::SetPassphraseRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetPassphraseRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetPassphraseRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_SetPassphraseResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_SetPassphraseResponse_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::SetPassphraseResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::SetPassphraseResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetPassphraseResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetPassphraseResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_StoreRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_StoreRequest_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::StoreRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::StoreRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StoreRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_StoreRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_Camera_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto.base,}};

static void InitDefaultsscc_info_StoreResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_StoreResponse_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::StoreResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::StoreResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StoreResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_StoreResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_Logpoint_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base,}};

static void InitDefaultsscc_info_TagRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_TagRequest_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::TagRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::TagRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TagRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TagRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_Logpoint_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base,}};

static void InitDefaultsscc_info_TagResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_TagResponse_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::TagResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::TagResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TagResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TagResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto[23];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::Logpoint_ImageParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::Logpoint_ImageParams, width_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::Logpoint_ImageParams, height_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::Logpoint_ImageParams, format_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::Logpoint_Calibration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::Logpoint_Calibration, xoffset_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::Logpoint_Calibration, yoffset_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::Logpoint_Calibration, width_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::Logpoint_Calibration, height_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::Logpoint_Calibration, base_frame_name_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::Logpoint_Calibration, base_tfrom_sensor_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::Logpoint_Calibration, intrinsics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::Logpoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::Logpoint, name_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::Logpoint, type_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::Logpoint, status_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::Logpoint, tag_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::Logpoint, timestamp_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::Logpoint, image_params_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::Logpoint, calibration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::DeleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::DeleteRequest, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::DeleteRequest, point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::DeleteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::DeleteResponse, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetStatusRequest, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetStatusRequest, point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetStatusResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetStatusResponse, point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::RetrieveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::RetrieveRequest, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::RetrieveRequest, point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::RetrieveResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::RetrieveResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::RetrieveResponse, logpoint_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::RetrieveResponse, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::RetrieveRawDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::RetrieveRawDataRequest, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::RetrieveRawDataRequest, point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::RetrieveRawDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::RetrieveRawDataResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::RetrieveRawDataResponse, logpoint_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::RetrieveRawDataResponse, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::StoreRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::StoreRequest, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::StoreRequest, camera_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::StoreRequest, type_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::StoreRequest, tag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::StoreResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::StoreResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::StoreResponse, point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::TagRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::TagRequest, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::TagRequest, point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::TagResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::TagResponse, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::ListCamerasRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::ListCamerasRequest, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::ListCamerasResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::ListCamerasResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::ListCamerasResponse, cameras_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::ListLogpointsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::ListLogpointsRequest, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::ListLogpointsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::ListLogpointsResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::ListLogpointsResponse, logpoints_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::SetPassphraseRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::SetPassphraseRequest, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::SetPassphraseRequest, passphrase_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::SetPassphraseResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::SetPassphraseResponse, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::DebugRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::DebugRequest, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::DebugRequest, enable_temperature_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::DebugRequest, enable_humidity_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::DebugRequest, enable_bit_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::DebugRequest, enable_shock_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::DebugRequest, enable_system_stat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::DebugResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::DebugResponse, header_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::bosdyn::api::spot_cam::Logpoint_ImageParams)},
  { 8, -1, sizeof(::bosdyn::api::spot_cam::Logpoint_Calibration)},
  { 20, -1, sizeof(::bosdyn::api::spot_cam::Logpoint)},
  { 32, -1, sizeof(::bosdyn::api::spot_cam::DeleteRequest)},
  { 39, -1, sizeof(::bosdyn::api::spot_cam::DeleteResponse)},
  { 45, -1, sizeof(::bosdyn::api::spot_cam::GetStatusRequest)},
  { 52, -1, sizeof(::bosdyn::api::spot_cam::GetStatusResponse)},
  { 59, -1, sizeof(::bosdyn::api::spot_cam::RetrieveRequest)},
  { 66, -1, sizeof(::bosdyn::api::spot_cam::RetrieveResponse)},
  { 74, -1, sizeof(::bosdyn::api::spot_cam::RetrieveRawDataRequest)},
  { 81, -1, sizeof(::bosdyn::api::spot_cam::RetrieveRawDataResponse)},
  { 89, -1, sizeof(::bosdyn::api::spot_cam::StoreRequest)},
  { 98, -1, sizeof(::bosdyn::api::spot_cam::StoreResponse)},
  { 105, -1, sizeof(::bosdyn::api::spot_cam::TagRequest)},
  { 112, -1, sizeof(::bosdyn::api::spot_cam::TagResponse)},
  { 118, -1, sizeof(::bosdyn::api::spot_cam::ListCamerasRequest)},
  { 124, -1, sizeof(::bosdyn::api::spot_cam::ListCamerasResponse)},
  { 131, -1, sizeof(::bosdyn::api::spot_cam::ListLogpointsRequest)},
  { 137, -1, sizeof(::bosdyn::api::spot_cam::ListLogpointsResponse)},
  { 144, -1, sizeof(::bosdyn::api::spot_cam::SetPassphraseRequest)},
  { 151, -1, sizeof(::bosdyn::api::spot_cam::SetPassphraseResponse)},
  { 157, -1, sizeof(::bosdyn::api::spot_cam::DebugRequest)},
  { 168, -1, sizeof(::bosdyn::api::spot_cam::DebugResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_Logpoint_ImageParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_Logpoint_Calibration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_Logpoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_DeleteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_DeleteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_GetStatusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_GetStatusResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_RetrieveRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_RetrieveResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_RetrieveRawDataRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_RetrieveRawDataResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_StoreRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_StoreResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_TagRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_TagResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_ListCamerasRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_ListCamerasResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_ListLogpointsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_ListLogpointsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_SetPassphraseRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_SetPassphraseResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_DebugRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_DebugResponse_default_instance_),
};

const char descriptor_table_protodef_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!bosdyn/api/spot_cam/logging.proto\022\023bos"
  "dyn.api.spot_cam\032 bosdyn/api/spot_cam/ca"
  "mera.proto\032\027bosdyn/api/header.proto\032\033bos"
  "dyn/api/data_chunk.proto\032\026bosdyn/api/ima"
  "ge.proto\032\031bosdyn/api/geometry.proto\032\037goo"
  "gle/protobuf/timestamp.proto\"\347\005\n\010Logpoin"
  "t\022\014\n\004name\030\001 \001(\t\0226\n\004type\030\002 \001(\0162(.bosdyn.a"
  "pi.spot_cam.Logpoint.RecordType\0227\n\006statu"
  "s\030\003 \001(\0162\'.bosdyn.api.spot_cam.Logpoint.L"
  "ogStatus\022\013\n\003tag\030\004 \001(\t\022-\n\ttimestamp\030\005 \001(\013"
  "2\032.google.protobuf.Timestamp\022\?\n\014image_pa"
  "rams\030\006 \001(\0132).bosdyn.api.spot_cam.Logpoin"
  "t.ImageParams\022>\n\013calibration\030\007 \003(\0132).bos"
  "dyn.api.spot_cam.Logpoint.Calibration\032[\n"
  "\013ImageParams\022\r\n\005width\030\001 \001(\005\022\016\n\006height\030\002 "
  "\001(\005\022-\n\006format\030\003 \001(\0162\035.bosdyn.api.Image.P"
  "ixelFormat\032\332\001\n\013Calibration\022\017\n\007xoffset\030\001 "
  "\001(\005\022\017\n\007yoffset\030\002 \001(\005\022\r\n\005width\030\003 \001(\005\022\016\n\006h"
  "eight\030\004 \001(\005\022\027\n\017base_frame_name\030\007 \001(\t\022.\n\021"
  "base_tfrom_sensor\030\005 \001(\0132\023.bosdyn.api.SE3"
  "Pose\022A\n\nintrinsics\030\006 \001(\0132-.bosdyn.api.sp"
  "ot_cam.Camera.PinholeIntrinsics\"\034\n\nRecor"
  "dType\022\016\n\nSTILLIMAGE\020\000\"G\n\tLogStatus\022\n\n\006FA"
  "ILED\020\000\022\n\n\006QUEUED\020\001\022\014\n\010COMPLETE\020\002\022\024\n\007UNKN"
  "OWN\020\377\377\377\377\377\377\377\377\377\001\"h\n\rDeleteRequest\022)\n\006heade"
  "r\030\001 \001(\0132\031.bosdyn.api.RequestHeader\022,\n\005po"
  "int\030\002 \001(\0132\035.bosdyn.api.spot_cam.Logpoint"
  "\"<\n\016DeleteResponse\022*\n\006header\030\001 \001(\0132\032.bos"
  "dyn.api.ResponseHeader\"k\n\020GetStatusReque"
  "st\022)\n\006header\030\001 \001(\0132\031.bosdyn.api.RequestH"
  "eader\022,\n\005point\030\002 \001(\0132\035.bosdyn.api.spot_c"
  "am.Logpoint\"m\n\021GetStatusResponse\022*\n\006head"
  "er\030\001 \001(\0132\032.bosdyn.api.ResponseHeader\022,\n\005"
  "point\030\002 \001(\0132\035.bosdyn.api.spot_cam.Logpoi"
  "nt\"j\n\017RetrieveRequest\022)\n\006header\030\001 \001(\0132\031."
  "bosdyn.api.RequestHeader\022,\n\005point\030\002 \001(\0132"
  "\035.bosdyn.api.spot_cam.Logpoint\"\224\001\n\020Retri"
  "eveResponse\022*\n\006header\030\001 \001(\0132\032.bosdyn.api"
  ".ResponseHeader\022/\n\010logpoint\030\002 \001(\0132\035.bosd"
  "yn.api.spot_cam.Logpoint\022#\n\004data\030\003 \001(\0132\025"
  ".bosdyn.api.DataChunk\"q\n\026RetrieveRawData"
  "Request\022)\n\006header\030\001 \001(\0132\031.bosdyn.api.Req"
  "uestHeader\022,\n\005point\030\002 \001(\0132\035.bosdyn.api.s"
  "pot_cam.Logpoint\"\233\001\n\027RetrieveRawDataResp"
  "onse\022*\n\006header\030\001 \001(\0132\032.bosdyn.api.Respon"
  "seHeader\022/\n\010logpoint\030\002 \001(\0132\035.bosdyn.api."
  "spot_cam.Logpoint\022#\n\004data\030\003 \001(\0132\025.bosdyn"
  ".api.DataChunk\"\253\001\n\014StoreRequest\022)\n\006heade"
  "r\030\001 \001(\0132\031.bosdyn.api.RequestHeader\022+\n\006ca"
  "mera\030\002 \001(\0132\033.bosdyn.api.spot_cam.Camera\022"
  "6\n\004type\030\003 \001(\0162(.bosdyn.api.spot_cam.Logp"
  "oint.RecordType\022\013\n\003tag\030\004 \001(\t\"i\n\rStoreRes"
  "ponse\022*\n\006header\030\001 \001(\0132\032.bosdyn.api.Respo"
  "nseHeader\022,\n\005point\030\002 \001(\0132\035.bosdyn.api.sp"
  "ot_cam.Logpoint\"e\n\nTagRequest\022)\n\006header\030"
  "\001 \001(\0132\031.bosdyn.api.RequestHeader\022,\n\005poin"
  "t\030\002 \001(\0132\035.bosdyn.api.spot_cam.Logpoint\"9"
  "\n\013TagResponse\022*\n\006header\030\001 \001(\0132\032.bosdyn.a"
  "pi.ResponseHeader\"\?\n\022ListCamerasRequest\022"
  ")\n\006header\030\001 \001(\0132\031.bosdyn.api.RequestHead"
  "er\"o\n\023ListCamerasResponse\022*\n\006header\030\001 \001("
  "\0132\032.bosdyn.api.ResponseHeader\022,\n\007cameras"
  "\030\002 \003(\0132\033.bosdyn.api.spot_cam.Camera\"A\n\024L"
  "istLogpointsRequest\022)\n\006header\030\001 \001(\0132\031.bo"
  "sdyn.api.RequestHeader\"u\n\025ListLogpointsR"
  "esponse\022*\n\006header\030\001 \001(\0132\032.bosdyn.api.Res"
  "ponseHeader\0220\n\tlogpoints\030\002 \003(\0132\035.bosdyn."
  "api.spot_cam.Logpoint\"U\n\024SetPassphraseRe"
  "quest\022)\n\006header\030\001 \001(\0132\031.bosdyn.api.Reque"
  "stHeader\022\022\n\npassphrase\030\002 \001(\t\"C\n\025SetPassp"
  "hraseResponse\022*\n\006header\030\001 \001(\0132\032.bosdyn.a"
  "pi.ResponseHeader\"\264\001\n\014DebugRequest\022)\n\006he"
  "ader\030\001 \001(\0132\031.bosdyn.api.RequestHeader\022\032\n"
  "\022enable_temperature\030\002 \001(\010\022\027\n\017enable_humi"
  "dity\030\003 \001(\010\022\022\n\nenable_BIT\030\004 \001(\010\022\024\n\014enable"
  "_shock\030\005 \001(\010\022\032\n\022enable_system_stat\030\006 \001(\010"
  "\";\n\rDebugResponse\022*\n\006header\030\001 \001(\0132\032.bosd"
  "yn.api.ResponseHeaderB\016B\014LoggingProtob\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto_deps[6] = {
  &::descriptor_table_bosdyn_2fapi_2fdata_5fchunk_2eproto,
  &::descriptor_table_bosdyn_2fapi_2fgeometry_2eproto,
  &::descriptor_table_bosdyn_2fapi_2fheader_2eproto,
  &::descriptor_table_bosdyn_2fapi_2fimage_2eproto,
  &::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto_sccs[23] = {
  &scc_info_DebugRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base,
  &scc_info_DebugResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base,
  &scc_info_DeleteRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base,
  &scc_info_DeleteResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base,
  &scc_info_GetStatusRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base,
  &scc_info_GetStatusResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base,
  &scc_info_ListCamerasRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base,
  &scc_info_ListCamerasResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base,
  &scc_info_ListLogpointsRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base,
  &scc_info_ListLogpointsResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base,
  &scc_info_Logpoint_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base,
  &scc_info_Logpoint_Calibration_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base,
  &scc_info_Logpoint_ImageParams_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base,
  &scc_info_RetrieveRawDataRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base,
  &scc_info_RetrieveRawDataResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base,
  &scc_info_RetrieveRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base,
  &scc_info_RetrieveResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base,
  &scc_info_SetPassphraseRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base,
  &scc_info_SetPassphraseResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base,
  &scc_info_StoreRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base,
  &scc_info_StoreResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base,
  &scc_info_TagRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base,
  &scc_info_TagResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto = {
  false, false, descriptor_table_protodef_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto, "bosdyn/api/spot_cam/logging.proto", 3125,
  &descriptor_table_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto_once, descriptor_table_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto_sccs, descriptor_table_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto_deps, 23, 6,
  schemas, file_default_instances, TableStruct_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto::offsets,
  file_level_metadata_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto, 23, file_level_enum_descriptors_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto, file_level_service_descriptors_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto)), true);
namespace bosdyn {
namespace api {
namespace spot_cam {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Logpoint_RecordType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto[0];
}
bool Logpoint_RecordType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Logpoint_RecordType Logpoint::STILLIMAGE;
constexpr Logpoint_RecordType Logpoint::RecordType_MIN;
constexpr Logpoint_RecordType Logpoint::RecordType_MAX;
constexpr int Logpoint::RecordType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Logpoint_LogStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto[1];
}
bool Logpoint_LogStatus_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Logpoint_LogStatus Logpoint::FAILED;
constexpr Logpoint_LogStatus Logpoint::QUEUED;
constexpr Logpoint_LogStatus Logpoint::COMPLETE;
constexpr Logpoint_LogStatus Logpoint::UNKNOWN;
constexpr Logpoint_LogStatus Logpoint::LogStatus_MIN;
constexpr Logpoint_LogStatus Logpoint::LogStatus_MAX;
constexpr int Logpoint::LogStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Logpoint_ImageParams::InitAsDefaultInstance() {
}
class Logpoint_ImageParams::_Internal {
 public:
};

Logpoint_ImageParams::Logpoint_ImageParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.Logpoint.ImageParams)
}
Logpoint_ImageParams::Logpoint_ImageParams(const Logpoint_ImageParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&format_) -
    reinterpret_cast<char*>(&width_)) + sizeof(format_));
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.Logpoint.ImageParams)
}

void Logpoint_ImageParams::SharedCtor() {
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&format_) -
      reinterpret_cast<char*>(&width_)) + sizeof(format_));
}

Logpoint_ImageParams::~Logpoint_ImageParams() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.Logpoint.ImageParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Logpoint_ImageParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Logpoint_ImageParams::ArenaDtor(void* object) {
  Logpoint_ImageParams* _this = reinterpret_cast< Logpoint_ImageParams* >(object);
  (void)_this;
}
void Logpoint_ImageParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Logpoint_ImageParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Logpoint_ImageParams& Logpoint_ImageParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Logpoint_ImageParams_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base);
  return *internal_default_instance();
}


void Logpoint_ImageParams::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.Logpoint.ImageParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&format_) -
      reinterpret_cast<char*>(&width_)) + sizeof(format_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Logpoint_ImageParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.Image.PixelFormat format = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_format(static_cast<::bosdyn::api::Image_PixelFormat>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Logpoint_ImageParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.Logpoint.ImageParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 width = 1;
  if (this->width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_width(), target);
  }

  // int32 height = 2;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  // .bosdyn.api.Image.PixelFormat format = 3;
  if (this->format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_format(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.Logpoint.ImageParams)
  return target;
}

size_t Logpoint_ImageParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.Logpoint.ImageParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 width = 1;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());
  }

  // int32 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());
  }

  // .bosdyn.api.Image.PixelFormat format = 3;
  if (this->format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_format());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Logpoint_ImageParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.Logpoint.ImageParams)
  GOOGLE_DCHECK_NE(&from, this);
  const Logpoint_ImageParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Logpoint_ImageParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.Logpoint.ImageParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.Logpoint.ImageParams)
    MergeFrom(*source);
  }
}

void Logpoint_ImageParams::MergeFrom(const Logpoint_ImageParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.Logpoint.ImageParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from.format() != 0) {
    _internal_set_format(from._internal_format());
  }
}

void Logpoint_ImageParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.Logpoint.ImageParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Logpoint_ImageParams::CopyFrom(const Logpoint_ImageParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.Logpoint.ImageParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Logpoint_ImageParams::IsInitialized() const {
  return true;
}

void Logpoint_ImageParams::InternalSwap(Logpoint_ImageParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Logpoint_ImageParams, format_)
      + sizeof(Logpoint_ImageParams::format_)
      - PROTOBUF_FIELD_OFFSET(Logpoint_ImageParams, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Logpoint_ImageParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Logpoint_Calibration::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_Logpoint_Calibration_default_instance_._instance.get_mutable()->base_tfrom_sensor_ = const_cast< ::bosdyn::api::SE3Pose*>(
      ::bosdyn::api::SE3Pose::internal_default_instance());
  ::bosdyn::api::spot_cam::_Logpoint_Calibration_default_instance_._instance.get_mutable()->intrinsics_ = const_cast< ::bosdyn::api::spot_cam::Camera_PinholeIntrinsics*>(
      ::bosdyn::api::spot_cam::Camera_PinholeIntrinsics::internal_default_instance());
}
class Logpoint_Calibration::_Internal {
 public:
  static const ::bosdyn::api::SE3Pose& base_tfrom_sensor(const Logpoint_Calibration* msg);
  static const ::bosdyn::api::spot_cam::Camera_PinholeIntrinsics& intrinsics(const Logpoint_Calibration* msg);
};

const ::bosdyn::api::SE3Pose&
Logpoint_Calibration::_Internal::base_tfrom_sensor(const Logpoint_Calibration* msg) {
  return *msg->base_tfrom_sensor_;
}
const ::bosdyn::api::spot_cam::Camera_PinholeIntrinsics&
Logpoint_Calibration::_Internal::intrinsics(const Logpoint_Calibration* msg) {
  return *msg->intrinsics_;
}
void Logpoint_Calibration::clear_base_tfrom_sensor() {
  if (GetArena() == nullptr && base_tfrom_sensor_ != nullptr) {
    delete base_tfrom_sensor_;
  }
  base_tfrom_sensor_ = nullptr;
}
void Logpoint_Calibration::clear_intrinsics() {
  if (GetArena() == nullptr && intrinsics_ != nullptr) {
    delete intrinsics_;
  }
  intrinsics_ = nullptr;
}
Logpoint_Calibration::Logpoint_Calibration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.Logpoint.Calibration)
}
Logpoint_Calibration::Logpoint_Calibration(const Logpoint_Calibration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  base_frame_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_base_frame_name().empty()) {
    base_frame_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_base_frame_name(),
      GetArena());
  }
  if (from._internal_has_base_tfrom_sensor()) {
    base_tfrom_sensor_ = new ::bosdyn::api::SE3Pose(*from.base_tfrom_sensor_);
  } else {
    base_tfrom_sensor_ = nullptr;
  }
  if (from._internal_has_intrinsics()) {
    intrinsics_ = new ::bosdyn::api::spot_cam::Camera_PinholeIntrinsics(*from.intrinsics_);
  } else {
    intrinsics_ = nullptr;
  }
  ::memcpy(&xoffset_, &from.xoffset_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&xoffset_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.Logpoint.Calibration)
}

void Logpoint_Calibration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Logpoint_Calibration_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base);
  base_frame_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&base_tfrom_sensor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&base_tfrom_sensor_)) + sizeof(height_));
}

Logpoint_Calibration::~Logpoint_Calibration() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.Logpoint.Calibration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Logpoint_Calibration::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  base_frame_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_tfrom_sensor_;
  if (this != internal_default_instance()) delete intrinsics_;
}

void Logpoint_Calibration::ArenaDtor(void* object) {
  Logpoint_Calibration* _this = reinterpret_cast< Logpoint_Calibration* >(object);
  (void)_this;
}
void Logpoint_Calibration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Logpoint_Calibration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Logpoint_Calibration& Logpoint_Calibration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Logpoint_Calibration_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base);
  return *internal_default_instance();
}


void Logpoint_Calibration::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.Logpoint.Calibration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  base_frame_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && base_tfrom_sensor_ != nullptr) {
    delete base_tfrom_sensor_;
  }
  base_tfrom_sensor_ = nullptr;
  if (GetArena() == nullptr && intrinsics_ != nullptr) {
    delete intrinsics_;
  }
  intrinsics_ = nullptr;
  ::memset(&xoffset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&xoffset_)) + sizeof(height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Logpoint_Calibration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 xoffset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          xoffset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 yoffset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          yoffset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.SE3Pose base_tfrom_sensor = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_tfrom_sensor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.spot_cam.Camera.PinholeIntrinsics intrinsics = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_intrinsics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string base_frame_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_base_frame_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.spot_cam.Logpoint.Calibration.base_frame_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Logpoint_Calibration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.Logpoint.Calibration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 xoffset = 1;
  if (this->xoffset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_xoffset(), target);
  }

  // int32 yoffset = 2;
  if (this->yoffset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_yoffset(), target);
  }

  // int32 width = 3;
  if (this->width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_width(), target);
  }

  // int32 height = 4;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_height(), target);
  }

  // .bosdyn.api.SE3Pose base_tfrom_sensor = 5;
  if (this->has_base_tfrom_sensor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::base_tfrom_sensor(this), target, stream);
  }

  // .bosdyn.api.spot_cam.Camera.PinholeIntrinsics intrinsics = 6;
  if (this->has_intrinsics()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::intrinsics(this), target, stream);
  }

  // string base_frame_name = 7;
  if (this->base_frame_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_base_frame_name().data(), static_cast<int>(this->_internal_base_frame_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.spot_cam.Logpoint.Calibration.base_frame_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_base_frame_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.Logpoint.Calibration)
  return target;
}

size_t Logpoint_Calibration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.Logpoint.Calibration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string base_frame_name = 7;
  if (this->base_frame_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_base_frame_name());
  }

  // .bosdyn.api.SE3Pose base_tfrom_sensor = 5;
  if (this->has_base_tfrom_sensor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_tfrom_sensor_);
  }

  // .bosdyn.api.spot_cam.Camera.PinholeIntrinsics intrinsics = 6;
  if (this->has_intrinsics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *intrinsics_);
  }

  // int32 xoffset = 1;
  if (this->xoffset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_xoffset());
  }

  // int32 yoffset = 2;
  if (this->yoffset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_yoffset());
  }

  // int32 width = 3;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());
  }

  // int32 height = 4;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Logpoint_Calibration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.Logpoint.Calibration)
  GOOGLE_DCHECK_NE(&from, this);
  const Logpoint_Calibration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Logpoint_Calibration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.Logpoint.Calibration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.Logpoint.Calibration)
    MergeFrom(*source);
  }
}

void Logpoint_Calibration::MergeFrom(const Logpoint_Calibration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.Logpoint.Calibration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.base_frame_name().size() > 0) {
    _internal_set_base_frame_name(from._internal_base_frame_name());
  }
  if (from.has_base_tfrom_sensor()) {
    _internal_mutable_base_tfrom_sensor()->::bosdyn::api::SE3Pose::MergeFrom(from._internal_base_tfrom_sensor());
  }
  if (from.has_intrinsics()) {
    _internal_mutable_intrinsics()->::bosdyn::api::spot_cam::Camera_PinholeIntrinsics::MergeFrom(from._internal_intrinsics());
  }
  if (from.xoffset() != 0) {
    _internal_set_xoffset(from._internal_xoffset());
  }
  if (from.yoffset() != 0) {
    _internal_set_yoffset(from._internal_yoffset());
  }
  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
}

void Logpoint_Calibration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.Logpoint.Calibration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Logpoint_Calibration::CopyFrom(const Logpoint_Calibration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.Logpoint.Calibration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Logpoint_Calibration::IsInitialized() const {
  return true;
}

void Logpoint_Calibration::InternalSwap(Logpoint_Calibration* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  base_frame_name_.Swap(&other->base_frame_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Logpoint_Calibration, height_)
      + sizeof(Logpoint_Calibration::height_)
      - PROTOBUF_FIELD_OFFSET(Logpoint_Calibration, base_tfrom_sensor_)>(
          reinterpret_cast<char*>(&base_tfrom_sensor_),
          reinterpret_cast<char*>(&other->base_tfrom_sensor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Logpoint_Calibration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Logpoint::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_Logpoint_default_instance_._instance.get_mutable()->timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::bosdyn::api::spot_cam::_Logpoint_default_instance_._instance.get_mutable()->image_params_ = const_cast< ::bosdyn::api::spot_cam::Logpoint_ImageParams*>(
      ::bosdyn::api::spot_cam::Logpoint_ImageParams::internal_default_instance());
}
class Logpoint::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const Logpoint* msg);
  static const ::bosdyn::api::spot_cam::Logpoint_ImageParams& image_params(const Logpoint* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
Logpoint::_Internal::timestamp(const Logpoint* msg) {
  return *msg->timestamp_;
}
const ::bosdyn::api::spot_cam::Logpoint_ImageParams&
Logpoint::_Internal::image_params(const Logpoint* msg) {
  return *msg->image_params_;
}
void Logpoint::clear_timestamp() {
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
Logpoint::Logpoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  calibration_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.Logpoint)
}
Logpoint::Logpoint(const Logpoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      calibration_(from.calibration_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tag().empty()) {
    tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tag(),
      GetArena());
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  if (from._internal_has_image_params()) {
    image_params_ = new ::bosdyn::api::spot_cam::Logpoint_ImageParams(*from.image_params_);
  } else {
    image_params_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&type_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.Logpoint)
}

void Logpoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Logpoint_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(status_));
}

Logpoint::~Logpoint() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.Logpoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Logpoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timestamp_;
  if (this != internal_default_instance()) delete image_params_;
}

void Logpoint::ArenaDtor(void* object) {
  Logpoint* _this = reinterpret_cast< Logpoint* >(object);
  (void)_this;
}
void Logpoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Logpoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Logpoint& Logpoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Logpoint_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base);
  return *internal_default_instance();
}


void Logpoint::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.Logpoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  calibration_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  if (GetArena() == nullptr && image_params_ != nullptr) {
    delete image_params_;
  }
  image_params_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&type_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Logpoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.spot_cam.Logpoint.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.spot_cam.Logpoint.RecordType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::bosdyn::api::spot_cam::Logpoint_RecordType>(val));
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.spot_cam.Logpoint.LogStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::bosdyn::api::spot_cam::Logpoint_LogStatus>(val));
        } else goto handle_unusual;
        continue;
      // string tag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.spot_cam.Logpoint.tag"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.spot_cam.Logpoint.ImageParams image_params = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_image_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bosdyn.api.spot_cam.Logpoint.Calibration calibration = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_calibration(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Logpoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.Logpoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.spot_cam.Logpoint.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .bosdyn.api.spot_cam.Logpoint.RecordType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // .bosdyn.api.spot_cam.Logpoint.LogStatus status = 3;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_status(), target);
  }

  // string tag = 4;
  if (this->tag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.spot_cam.Logpoint.tag");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_tag(), target);
  }

  // .google.protobuf.Timestamp timestamp = 5;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::timestamp(this), target, stream);
  }

  // .bosdyn.api.spot_cam.Logpoint.ImageParams image_params = 6;
  if (this->has_image_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::image_params(this), target, stream);
  }

  // repeated .bosdyn.api.spot_cam.Logpoint.Calibration calibration = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_calibration_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_calibration(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.Logpoint)
  return target;
}

size_t Logpoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.Logpoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bosdyn.api.spot_cam.Logpoint.Calibration calibration = 7;
  total_size += 1UL * this->_internal_calibration_size();
  for (const auto& msg : this->calibration_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string tag = 4;
  if (this->tag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  // .google.protobuf.Timestamp timestamp = 5;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .bosdyn.api.spot_cam.Logpoint.ImageParams image_params = 6;
  if (this->has_image_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *image_params_);
  }

  // .bosdyn.api.spot_cam.Logpoint.RecordType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .bosdyn.api.spot_cam.Logpoint.LogStatus status = 3;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Logpoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.Logpoint)
  GOOGLE_DCHECK_NE(&from, this);
  const Logpoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Logpoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.Logpoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.Logpoint)
    MergeFrom(*source);
  }
}

void Logpoint::MergeFrom(const Logpoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.Logpoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  calibration_.MergeFrom(from.calibration_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.tag().size() > 0) {
    _internal_set_tag(from._internal_tag());
  }
  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from.has_image_params()) {
    _internal_mutable_image_params()->::bosdyn::api::spot_cam::Logpoint_ImageParams::MergeFrom(from._internal_image_params());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void Logpoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.Logpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Logpoint::CopyFrom(const Logpoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.Logpoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Logpoint::IsInitialized() const {
  return true;
}

void Logpoint::InternalSwap(Logpoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  calibration_.InternalSwap(&other->calibration_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Logpoint, status_)
      + sizeof(Logpoint::status_)
      - PROTOBUF_FIELD_OFFSET(Logpoint, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Logpoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteRequest::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_DeleteRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
  ::bosdyn::api::spot_cam::_DeleteRequest_default_instance_._instance.get_mutable()->point_ = const_cast< ::bosdyn::api::spot_cam::Logpoint*>(
      ::bosdyn::api::spot_cam::Logpoint::internal_default_instance());
}
class DeleteRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const DeleteRequest* msg);
  static const ::bosdyn::api::spot_cam::Logpoint& point(const DeleteRequest* msg);
};

const ::bosdyn::api::RequestHeader&
DeleteRequest::_Internal::header(const DeleteRequest* msg) {
  return *msg->header_;
}
const ::bosdyn::api::spot_cam::Logpoint&
DeleteRequest::_Internal::point(const DeleteRequest* msg) {
  return *msg->point_;
}
void DeleteRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
DeleteRequest::DeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.DeleteRequest)
}
DeleteRequest::DeleteRequest(const DeleteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_point()) {
    point_ = new ::bosdyn::api::spot_cam::Logpoint(*from.point_);
  } else {
    point_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.DeleteRequest)
}

void DeleteRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&point_) -
      reinterpret_cast<char*>(&header_)) + sizeof(point_));
}

DeleteRequest::~DeleteRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.DeleteRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete point_;
}

void DeleteRequest::ArenaDtor(void* object) {
  DeleteRequest* _this = reinterpret_cast< DeleteRequest* >(object);
  (void)_this;
}
void DeleteRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteRequest& DeleteRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base);
  return *internal_default_instance();
}


void DeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.DeleteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && point_ != nullptr) {
    delete point_;
  }
  point_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.spot_cam.Logpoint point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.DeleteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.spot_cam.Logpoint point = 2;
  if (this->has_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::point(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.DeleteRequest)
  return target;
}

size_t DeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.DeleteRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.spot_cam.Logpoint point = 2;
  if (this->has_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *point_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.DeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.DeleteRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.DeleteRequest)
    MergeFrom(*source);
  }
}

void DeleteRequest::MergeFrom(const DeleteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.DeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
  if (from.has_point()) {
    _internal_mutable_point()->::bosdyn::api::spot_cam::Logpoint::MergeFrom(from._internal_point());
  }
}

void DeleteRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.DeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteRequest::CopyFrom(const DeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.DeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRequest::IsInitialized() const {
  return true;
}

void DeleteRequest::InternalSwap(DeleteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteRequest, point_)
      + sizeof(DeleteRequest::point_)
      - PROTOBUF_FIELD_OFFSET(DeleteRequest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteResponse::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_DeleteResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
}
class DeleteResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const DeleteResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
DeleteResponse::_Internal::header(const DeleteResponse* msg) {
  return *msg->header_;
}
void DeleteResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
DeleteResponse::DeleteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.DeleteResponse)
}
DeleteResponse::DeleteResponse(const DeleteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.DeleteResponse)
}

void DeleteResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base);
  header_ = nullptr;
}

DeleteResponse::~DeleteResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.DeleteResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void DeleteResponse::ArenaDtor(void* object) {
  DeleteResponse* _this = reinterpret_cast< DeleteResponse* >(object);
  (void)_this;
}
void DeleteResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteResponse& DeleteResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base);
  return *internal_default_instance();
}


void DeleteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.DeleteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.DeleteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.DeleteResponse)
  return target;
}

size_t DeleteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.DeleteResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.DeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.DeleteResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.DeleteResponse)
    MergeFrom(*source);
  }
}

void DeleteResponse::MergeFrom(const DeleteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.DeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
}

void DeleteResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.DeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteResponse::CopyFrom(const DeleteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.DeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteResponse::IsInitialized() const {
  return true;
}

void DeleteResponse::InternalSwap(DeleteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetStatusRequest::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_GetStatusRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
  ::bosdyn::api::spot_cam::_GetStatusRequest_default_instance_._instance.get_mutable()->point_ = const_cast< ::bosdyn::api::spot_cam::Logpoint*>(
      ::bosdyn::api::spot_cam::Logpoint::internal_default_instance());
}
class GetStatusRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const GetStatusRequest* msg);
  static const ::bosdyn::api::spot_cam::Logpoint& point(const GetStatusRequest* msg);
};

const ::bosdyn::api::RequestHeader&
GetStatusRequest::_Internal::header(const GetStatusRequest* msg) {
  return *msg->header_;
}
const ::bosdyn::api::spot_cam::Logpoint&
GetStatusRequest::_Internal::point(const GetStatusRequest* msg) {
  return *msg->point_;
}
void GetStatusRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
GetStatusRequest::GetStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.GetStatusRequest)
}
GetStatusRequest::GetStatusRequest(const GetStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_point()) {
    point_ = new ::bosdyn::api::spot_cam::Logpoint(*from.point_);
  } else {
    point_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.GetStatusRequest)
}

void GetStatusRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetStatusRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&point_) -
      reinterpret_cast<char*>(&header_)) + sizeof(point_));
}

GetStatusRequest::~GetStatusRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.GetStatusRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetStatusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete point_;
}

void GetStatusRequest::ArenaDtor(void* object) {
  GetStatusRequest* _this = reinterpret_cast< GetStatusRequest* >(object);
  (void)_this;
}
void GetStatusRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetStatusRequest& GetStatusRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetStatusRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base);
  return *internal_default_instance();
}


void GetStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.GetStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && point_ != nullptr) {
    delete point_;
  }
  point_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetStatusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.spot_cam.Logpoint point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetStatusRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.GetStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.spot_cam.Logpoint point = 2;
  if (this->has_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::point(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.GetStatusRequest)
  return target;
}

size_t GetStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.GetStatusRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.spot_cam.Logpoint point = 2;
  if (this->has_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *point_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetStatusRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.GetStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStatusRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetStatusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.GetStatusRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.GetStatusRequest)
    MergeFrom(*source);
  }
}

void GetStatusRequest::MergeFrom(const GetStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.GetStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
  if (from.has_point()) {
    _internal_mutable_point()->::bosdyn::api::spot_cam::Logpoint::MergeFrom(from._internal_point());
  }
}

void GetStatusRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.GetStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStatusRequest::CopyFrom(const GetStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.GetStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStatusRequest::IsInitialized() const {
  return true;
}

void GetStatusRequest::InternalSwap(GetStatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetStatusRequest, point_)
      + sizeof(GetStatusRequest::point_)
      - PROTOBUF_FIELD_OFFSET(GetStatusRequest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStatusRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetStatusResponse::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_GetStatusResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
  ::bosdyn::api::spot_cam::_GetStatusResponse_default_instance_._instance.get_mutable()->point_ = const_cast< ::bosdyn::api::spot_cam::Logpoint*>(
      ::bosdyn::api::spot_cam::Logpoint::internal_default_instance());
}
class GetStatusResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const GetStatusResponse* msg);
  static const ::bosdyn::api::spot_cam::Logpoint& point(const GetStatusResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
GetStatusResponse::_Internal::header(const GetStatusResponse* msg) {
  return *msg->header_;
}
const ::bosdyn::api::spot_cam::Logpoint&
GetStatusResponse::_Internal::point(const GetStatusResponse* msg) {
  return *msg->point_;
}
void GetStatusResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
GetStatusResponse::GetStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.GetStatusResponse)
}
GetStatusResponse::GetStatusResponse(const GetStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_point()) {
    point_ = new ::bosdyn::api::spot_cam::Logpoint(*from.point_);
  } else {
    point_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.GetStatusResponse)
}

void GetStatusResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetStatusResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&point_) -
      reinterpret_cast<char*>(&header_)) + sizeof(point_));
}

GetStatusResponse::~GetStatusResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.GetStatusResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete point_;
}

void GetStatusResponse::ArenaDtor(void* object) {
  GetStatusResponse* _this = reinterpret_cast< GetStatusResponse* >(object);
  (void)_this;
}
void GetStatusResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetStatusResponse& GetStatusResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetStatusResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base);
  return *internal_default_instance();
}


void GetStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.GetStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && point_ != nullptr) {
    delete point_;
  }
  point_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetStatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.spot_cam.Logpoint point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetStatusResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.GetStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.spot_cam.Logpoint point = 2;
  if (this->has_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::point(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.GetStatusResponse)
  return target;
}

size_t GetStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.GetStatusResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.spot_cam.Logpoint point = 2;
  if (this->has_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *point_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetStatusResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.GetStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStatusResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetStatusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.GetStatusResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.GetStatusResponse)
    MergeFrom(*source);
  }
}

void GetStatusResponse::MergeFrom(const GetStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.GetStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.has_point()) {
    _internal_mutable_point()->::bosdyn::api::spot_cam::Logpoint::MergeFrom(from._internal_point());
  }
}

void GetStatusResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.GetStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStatusResponse::CopyFrom(const GetStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.GetStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStatusResponse::IsInitialized() const {
  return true;
}

void GetStatusResponse::InternalSwap(GetStatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetStatusResponse, point_)
      + sizeof(GetStatusResponse::point_)
      - PROTOBUF_FIELD_OFFSET(GetStatusResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStatusResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RetrieveRequest::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_RetrieveRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
  ::bosdyn::api::spot_cam::_RetrieveRequest_default_instance_._instance.get_mutable()->point_ = const_cast< ::bosdyn::api::spot_cam::Logpoint*>(
      ::bosdyn::api::spot_cam::Logpoint::internal_default_instance());
}
class RetrieveRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const RetrieveRequest* msg);
  static const ::bosdyn::api::spot_cam::Logpoint& point(const RetrieveRequest* msg);
};

const ::bosdyn::api::RequestHeader&
RetrieveRequest::_Internal::header(const RetrieveRequest* msg) {
  return *msg->header_;
}
const ::bosdyn::api::spot_cam::Logpoint&
RetrieveRequest::_Internal::point(const RetrieveRequest* msg) {
  return *msg->point_;
}
void RetrieveRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
RetrieveRequest::RetrieveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.RetrieveRequest)
}
RetrieveRequest::RetrieveRequest(const RetrieveRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_point()) {
    point_ = new ::bosdyn::api::spot_cam::Logpoint(*from.point_);
  } else {
    point_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.RetrieveRequest)
}

void RetrieveRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RetrieveRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&point_) -
      reinterpret_cast<char*>(&header_)) + sizeof(point_));
}

RetrieveRequest::~RetrieveRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.RetrieveRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RetrieveRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete point_;
}

void RetrieveRequest::ArenaDtor(void* object) {
  RetrieveRequest* _this = reinterpret_cast< RetrieveRequest* >(object);
  (void)_this;
}
void RetrieveRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RetrieveRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RetrieveRequest& RetrieveRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RetrieveRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base);
  return *internal_default_instance();
}


void RetrieveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.RetrieveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && point_ != nullptr) {
    delete point_;
  }
  point_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RetrieveRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.spot_cam.Logpoint point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RetrieveRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.RetrieveRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.spot_cam.Logpoint point = 2;
  if (this->has_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::point(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.RetrieveRequest)
  return target;
}

size_t RetrieveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.RetrieveRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.spot_cam.Logpoint point = 2;
  if (this->has_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *point_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RetrieveRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.RetrieveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RetrieveRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RetrieveRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.RetrieveRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.RetrieveRequest)
    MergeFrom(*source);
  }
}

void RetrieveRequest::MergeFrom(const RetrieveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.RetrieveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
  if (from.has_point()) {
    _internal_mutable_point()->::bosdyn::api::spot_cam::Logpoint::MergeFrom(from._internal_point());
  }
}

void RetrieveRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.RetrieveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetrieveRequest::CopyFrom(const RetrieveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.RetrieveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetrieveRequest::IsInitialized() const {
  return true;
}

void RetrieveRequest::InternalSwap(RetrieveRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RetrieveRequest, point_)
      + sizeof(RetrieveRequest::point_)
      - PROTOBUF_FIELD_OFFSET(RetrieveRequest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RetrieveRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RetrieveResponse::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_RetrieveResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
  ::bosdyn::api::spot_cam::_RetrieveResponse_default_instance_._instance.get_mutable()->logpoint_ = const_cast< ::bosdyn::api::spot_cam::Logpoint*>(
      ::bosdyn::api::spot_cam::Logpoint::internal_default_instance());
  ::bosdyn::api::spot_cam::_RetrieveResponse_default_instance_._instance.get_mutable()->data_ = const_cast< ::bosdyn::api::DataChunk*>(
      ::bosdyn::api::DataChunk::internal_default_instance());
}
class RetrieveResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const RetrieveResponse* msg);
  static const ::bosdyn::api::spot_cam::Logpoint& logpoint(const RetrieveResponse* msg);
  static const ::bosdyn::api::DataChunk& data(const RetrieveResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
RetrieveResponse::_Internal::header(const RetrieveResponse* msg) {
  return *msg->header_;
}
const ::bosdyn::api::spot_cam::Logpoint&
RetrieveResponse::_Internal::logpoint(const RetrieveResponse* msg) {
  return *msg->logpoint_;
}
const ::bosdyn::api::DataChunk&
RetrieveResponse::_Internal::data(const RetrieveResponse* msg) {
  return *msg->data_;
}
void RetrieveResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void RetrieveResponse::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
RetrieveResponse::RetrieveResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.RetrieveResponse)
}
RetrieveResponse::RetrieveResponse(const RetrieveResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_logpoint()) {
    logpoint_ = new ::bosdyn::api::spot_cam::Logpoint(*from.logpoint_);
  } else {
    logpoint_ = nullptr;
  }
  if (from._internal_has_data()) {
    data_ = new ::bosdyn::api::DataChunk(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.RetrieveResponse)
}

void RetrieveResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RetrieveResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_) -
      reinterpret_cast<char*>(&header_)) + sizeof(data_));
}

RetrieveResponse::~RetrieveResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.RetrieveResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RetrieveResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete logpoint_;
  if (this != internal_default_instance()) delete data_;
}

void RetrieveResponse::ArenaDtor(void* object) {
  RetrieveResponse* _this = reinterpret_cast< RetrieveResponse* >(object);
  (void)_this;
}
void RetrieveResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RetrieveResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RetrieveResponse& RetrieveResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RetrieveResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base);
  return *internal_default_instance();
}


void RetrieveResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.RetrieveResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && logpoint_ != nullptr) {
    delete logpoint_;
  }
  logpoint_ = nullptr;
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RetrieveResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.spot_cam.Logpoint logpoint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_logpoint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.DataChunk data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RetrieveResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.RetrieveResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.spot_cam.Logpoint logpoint = 2;
  if (this->has_logpoint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::logpoint(this), target, stream);
  }

  // .bosdyn.api.DataChunk data = 3;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.RetrieveResponse)
  return target;
}

size_t RetrieveResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.RetrieveResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.spot_cam.Logpoint logpoint = 2;
  if (this->has_logpoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *logpoint_);
  }

  // .bosdyn.api.DataChunk data = 3;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RetrieveResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.RetrieveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RetrieveResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RetrieveResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.RetrieveResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.RetrieveResponse)
    MergeFrom(*source);
  }
}

void RetrieveResponse::MergeFrom(const RetrieveResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.RetrieveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.has_logpoint()) {
    _internal_mutable_logpoint()->::bosdyn::api::spot_cam::Logpoint::MergeFrom(from._internal_logpoint());
  }
  if (from.has_data()) {
    _internal_mutable_data()->::bosdyn::api::DataChunk::MergeFrom(from._internal_data());
  }
}

void RetrieveResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.RetrieveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetrieveResponse::CopyFrom(const RetrieveResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.RetrieveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetrieveResponse::IsInitialized() const {
  return true;
}

void RetrieveResponse::InternalSwap(RetrieveResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RetrieveResponse, data_)
      + sizeof(RetrieveResponse::data_)
      - PROTOBUF_FIELD_OFFSET(RetrieveResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RetrieveResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RetrieveRawDataRequest::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_RetrieveRawDataRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
  ::bosdyn::api::spot_cam::_RetrieveRawDataRequest_default_instance_._instance.get_mutable()->point_ = const_cast< ::bosdyn::api::spot_cam::Logpoint*>(
      ::bosdyn::api::spot_cam::Logpoint::internal_default_instance());
}
class RetrieveRawDataRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const RetrieveRawDataRequest* msg);
  static const ::bosdyn::api::spot_cam::Logpoint& point(const RetrieveRawDataRequest* msg);
};

const ::bosdyn::api::RequestHeader&
RetrieveRawDataRequest::_Internal::header(const RetrieveRawDataRequest* msg) {
  return *msg->header_;
}
const ::bosdyn::api::spot_cam::Logpoint&
RetrieveRawDataRequest::_Internal::point(const RetrieveRawDataRequest* msg) {
  return *msg->point_;
}
void RetrieveRawDataRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
RetrieveRawDataRequest::RetrieveRawDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.RetrieveRawDataRequest)
}
RetrieveRawDataRequest::RetrieveRawDataRequest(const RetrieveRawDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_point()) {
    point_ = new ::bosdyn::api::spot_cam::Logpoint(*from.point_);
  } else {
    point_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.RetrieveRawDataRequest)
}

void RetrieveRawDataRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RetrieveRawDataRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&point_) -
      reinterpret_cast<char*>(&header_)) + sizeof(point_));
}

RetrieveRawDataRequest::~RetrieveRawDataRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.RetrieveRawDataRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RetrieveRawDataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete point_;
}

void RetrieveRawDataRequest::ArenaDtor(void* object) {
  RetrieveRawDataRequest* _this = reinterpret_cast< RetrieveRawDataRequest* >(object);
  (void)_this;
}
void RetrieveRawDataRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RetrieveRawDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RetrieveRawDataRequest& RetrieveRawDataRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RetrieveRawDataRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base);
  return *internal_default_instance();
}


void RetrieveRawDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.RetrieveRawDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && point_ != nullptr) {
    delete point_;
  }
  point_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RetrieveRawDataRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.spot_cam.Logpoint point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RetrieveRawDataRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.RetrieveRawDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.spot_cam.Logpoint point = 2;
  if (this->has_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::point(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.RetrieveRawDataRequest)
  return target;
}

size_t RetrieveRawDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.RetrieveRawDataRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.spot_cam.Logpoint point = 2;
  if (this->has_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *point_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RetrieveRawDataRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.RetrieveRawDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RetrieveRawDataRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RetrieveRawDataRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.RetrieveRawDataRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.RetrieveRawDataRequest)
    MergeFrom(*source);
  }
}

void RetrieveRawDataRequest::MergeFrom(const RetrieveRawDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.RetrieveRawDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
  if (from.has_point()) {
    _internal_mutable_point()->::bosdyn::api::spot_cam::Logpoint::MergeFrom(from._internal_point());
  }
}

void RetrieveRawDataRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.RetrieveRawDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetrieveRawDataRequest::CopyFrom(const RetrieveRawDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.RetrieveRawDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetrieveRawDataRequest::IsInitialized() const {
  return true;
}

void RetrieveRawDataRequest::InternalSwap(RetrieveRawDataRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RetrieveRawDataRequest, point_)
      + sizeof(RetrieveRawDataRequest::point_)
      - PROTOBUF_FIELD_OFFSET(RetrieveRawDataRequest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RetrieveRawDataRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RetrieveRawDataResponse::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_RetrieveRawDataResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
  ::bosdyn::api::spot_cam::_RetrieveRawDataResponse_default_instance_._instance.get_mutable()->logpoint_ = const_cast< ::bosdyn::api::spot_cam::Logpoint*>(
      ::bosdyn::api::spot_cam::Logpoint::internal_default_instance());
  ::bosdyn::api::spot_cam::_RetrieveRawDataResponse_default_instance_._instance.get_mutable()->data_ = const_cast< ::bosdyn::api::DataChunk*>(
      ::bosdyn::api::DataChunk::internal_default_instance());
}
class RetrieveRawDataResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const RetrieveRawDataResponse* msg);
  static const ::bosdyn::api::spot_cam::Logpoint& logpoint(const RetrieveRawDataResponse* msg);
  static const ::bosdyn::api::DataChunk& data(const RetrieveRawDataResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
RetrieveRawDataResponse::_Internal::header(const RetrieveRawDataResponse* msg) {
  return *msg->header_;
}
const ::bosdyn::api::spot_cam::Logpoint&
RetrieveRawDataResponse::_Internal::logpoint(const RetrieveRawDataResponse* msg) {
  return *msg->logpoint_;
}
const ::bosdyn::api::DataChunk&
RetrieveRawDataResponse::_Internal::data(const RetrieveRawDataResponse* msg) {
  return *msg->data_;
}
void RetrieveRawDataResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void RetrieveRawDataResponse::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
RetrieveRawDataResponse::RetrieveRawDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.RetrieveRawDataResponse)
}
RetrieveRawDataResponse::RetrieveRawDataResponse(const RetrieveRawDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_logpoint()) {
    logpoint_ = new ::bosdyn::api::spot_cam::Logpoint(*from.logpoint_);
  } else {
    logpoint_ = nullptr;
  }
  if (from._internal_has_data()) {
    data_ = new ::bosdyn::api::DataChunk(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.RetrieveRawDataResponse)
}

void RetrieveRawDataResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RetrieveRawDataResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_) -
      reinterpret_cast<char*>(&header_)) + sizeof(data_));
}

RetrieveRawDataResponse::~RetrieveRawDataResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.RetrieveRawDataResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RetrieveRawDataResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete logpoint_;
  if (this != internal_default_instance()) delete data_;
}

void RetrieveRawDataResponse::ArenaDtor(void* object) {
  RetrieveRawDataResponse* _this = reinterpret_cast< RetrieveRawDataResponse* >(object);
  (void)_this;
}
void RetrieveRawDataResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RetrieveRawDataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RetrieveRawDataResponse& RetrieveRawDataResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RetrieveRawDataResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base);
  return *internal_default_instance();
}


void RetrieveRawDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.RetrieveRawDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && logpoint_ != nullptr) {
    delete logpoint_;
  }
  logpoint_ = nullptr;
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RetrieveRawDataResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.spot_cam.Logpoint logpoint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_logpoint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.DataChunk data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RetrieveRawDataResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.RetrieveRawDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.spot_cam.Logpoint logpoint = 2;
  if (this->has_logpoint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::logpoint(this), target, stream);
  }

  // .bosdyn.api.DataChunk data = 3;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.RetrieveRawDataResponse)
  return target;
}

size_t RetrieveRawDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.RetrieveRawDataResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.spot_cam.Logpoint logpoint = 2;
  if (this->has_logpoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *logpoint_);
  }

  // .bosdyn.api.DataChunk data = 3;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RetrieveRawDataResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.RetrieveRawDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RetrieveRawDataResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RetrieveRawDataResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.RetrieveRawDataResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.RetrieveRawDataResponse)
    MergeFrom(*source);
  }
}

void RetrieveRawDataResponse::MergeFrom(const RetrieveRawDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.RetrieveRawDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.has_logpoint()) {
    _internal_mutable_logpoint()->::bosdyn::api::spot_cam::Logpoint::MergeFrom(from._internal_logpoint());
  }
  if (from.has_data()) {
    _internal_mutable_data()->::bosdyn::api::DataChunk::MergeFrom(from._internal_data());
  }
}

void RetrieveRawDataResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.RetrieveRawDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetrieveRawDataResponse::CopyFrom(const RetrieveRawDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.RetrieveRawDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetrieveRawDataResponse::IsInitialized() const {
  return true;
}

void RetrieveRawDataResponse::InternalSwap(RetrieveRawDataResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RetrieveRawDataResponse, data_)
      + sizeof(RetrieveRawDataResponse::data_)
      - PROTOBUF_FIELD_OFFSET(RetrieveRawDataResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RetrieveRawDataResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StoreRequest::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_StoreRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
  ::bosdyn::api::spot_cam::_StoreRequest_default_instance_._instance.get_mutable()->camera_ = const_cast< ::bosdyn::api::spot_cam::Camera*>(
      ::bosdyn::api::spot_cam::Camera::internal_default_instance());
}
class StoreRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const StoreRequest* msg);
  static const ::bosdyn::api::spot_cam::Camera& camera(const StoreRequest* msg);
};

const ::bosdyn::api::RequestHeader&
StoreRequest::_Internal::header(const StoreRequest* msg) {
  return *msg->header_;
}
const ::bosdyn::api::spot_cam::Camera&
StoreRequest::_Internal::camera(const StoreRequest* msg) {
  return *msg->camera_;
}
void StoreRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void StoreRequest::clear_camera() {
  if (GetArena() == nullptr && camera_ != nullptr) {
    delete camera_;
  }
  camera_ = nullptr;
}
StoreRequest::StoreRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.StoreRequest)
}
StoreRequest::StoreRequest(const StoreRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tag().empty()) {
    tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tag(),
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_camera()) {
    camera_ = new ::bosdyn::api::spot_cam::Camera(*from.camera_);
  } else {
    camera_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.StoreRequest)
}

void StoreRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StoreRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&header_)) + sizeof(type_));
}

StoreRequest::~StoreRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.StoreRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StoreRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete camera_;
}

void StoreRequest::ArenaDtor(void* object) {
  StoreRequest* _this = reinterpret_cast< StoreRequest* >(object);
  (void)_this;
}
void StoreRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StoreRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StoreRequest& StoreRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StoreRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base);
  return *internal_default_instance();
}


void StoreRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.StoreRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && camera_ != nullptr) {
    delete camera_;
  }
  camera_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StoreRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.spot_cam.Camera camera = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_camera(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.spot_cam.Logpoint.RecordType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::bosdyn::api::spot_cam::Logpoint_RecordType>(val));
        } else goto handle_unusual;
        continue;
      // string tag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.spot_cam.StoreRequest.tag"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StoreRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.StoreRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.spot_cam.Camera camera = 2;
  if (this->has_camera()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::camera(this), target, stream);
  }

  // .bosdyn.api.spot_cam.Logpoint.RecordType type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // string tag = 4;
  if (this->tag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.spot_cam.StoreRequest.tag");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_tag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.StoreRequest)
  return target;
}

size_t StoreRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.StoreRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tag = 4;
  if (this->tag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.spot_cam.Camera camera = 2;
  if (this->has_camera()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *camera_);
  }

  // .bosdyn.api.spot_cam.Logpoint.RecordType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StoreRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.StoreRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StoreRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StoreRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.StoreRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.StoreRequest)
    MergeFrom(*source);
  }
}

void StoreRequest::MergeFrom(const StoreRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.StoreRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tag().size() > 0) {
    _internal_set_tag(from._internal_tag());
  }
  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
  if (from.has_camera()) {
    _internal_mutable_camera()->::bosdyn::api::spot_cam::Camera::MergeFrom(from._internal_camera());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void StoreRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.StoreRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreRequest::CopyFrom(const StoreRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.StoreRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreRequest::IsInitialized() const {
  return true;
}

void StoreRequest::InternalSwap(StoreRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StoreRequest, type_)
      + sizeof(StoreRequest::type_)
      - PROTOBUF_FIELD_OFFSET(StoreRequest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StoreRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StoreResponse::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_StoreResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
  ::bosdyn::api::spot_cam::_StoreResponse_default_instance_._instance.get_mutable()->point_ = const_cast< ::bosdyn::api::spot_cam::Logpoint*>(
      ::bosdyn::api::spot_cam::Logpoint::internal_default_instance());
}
class StoreResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const StoreResponse* msg);
  static const ::bosdyn::api::spot_cam::Logpoint& point(const StoreResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
StoreResponse::_Internal::header(const StoreResponse* msg) {
  return *msg->header_;
}
const ::bosdyn::api::spot_cam::Logpoint&
StoreResponse::_Internal::point(const StoreResponse* msg) {
  return *msg->point_;
}
void StoreResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
StoreResponse::StoreResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.StoreResponse)
}
StoreResponse::StoreResponse(const StoreResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_point()) {
    point_ = new ::bosdyn::api::spot_cam::Logpoint(*from.point_);
  } else {
    point_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.StoreResponse)
}

void StoreResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StoreResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&point_) -
      reinterpret_cast<char*>(&header_)) + sizeof(point_));
}

StoreResponse::~StoreResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.StoreResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StoreResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete point_;
}

void StoreResponse::ArenaDtor(void* object) {
  StoreResponse* _this = reinterpret_cast< StoreResponse* >(object);
  (void)_this;
}
void StoreResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StoreResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StoreResponse& StoreResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StoreResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base);
  return *internal_default_instance();
}


void StoreResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.StoreResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && point_ != nullptr) {
    delete point_;
  }
  point_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StoreResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.spot_cam.Logpoint point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StoreResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.StoreResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.spot_cam.Logpoint point = 2;
  if (this->has_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::point(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.StoreResponse)
  return target;
}

size_t StoreResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.StoreResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.spot_cam.Logpoint point = 2;
  if (this->has_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *point_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StoreResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.StoreResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StoreResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StoreResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.StoreResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.StoreResponse)
    MergeFrom(*source);
  }
}

void StoreResponse::MergeFrom(const StoreResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.StoreResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.has_point()) {
    _internal_mutable_point()->::bosdyn::api::spot_cam::Logpoint::MergeFrom(from._internal_point());
  }
}

void StoreResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.StoreResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreResponse::CopyFrom(const StoreResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.StoreResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreResponse::IsInitialized() const {
  return true;
}

void StoreResponse::InternalSwap(StoreResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StoreResponse, point_)
      + sizeof(StoreResponse::point_)
      - PROTOBUF_FIELD_OFFSET(StoreResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StoreResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TagRequest::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_TagRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
  ::bosdyn::api::spot_cam::_TagRequest_default_instance_._instance.get_mutable()->point_ = const_cast< ::bosdyn::api::spot_cam::Logpoint*>(
      ::bosdyn::api::spot_cam::Logpoint::internal_default_instance());
}
class TagRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const TagRequest* msg);
  static const ::bosdyn::api::spot_cam::Logpoint& point(const TagRequest* msg);
};

const ::bosdyn::api::RequestHeader&
TagRequest::_Internal::header(const TagRequest* msg) {
  return *msg->header_;
}
const ::bosdyn::api::spot_cam::Logpoint&
TagRequest::_Internal::point(const TagRequest* msg) {
  return *msg->point_;
}
void TagRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
TagRequest::TagRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.TagRequest)
}
TagRequest::TagRequest(const TagRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_point()) {
    point_ = new ::bosdyn::api::spot_cam::Logpoint(*from.point_);
  } else {
    point_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.TagRequest)
}

void TagRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TagRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&point_) -
      reinterpret_cast<char*>(&header_)) + sizeof(point_));
}

TagRequest::~TagRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.TagRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TagRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete point_;
}

void TagRequest::ArenaDtor(void* object) {
  TagRequest* _this = reinterpret_cast< TagRequest* >(object);
  (void)_this;
}
void TagRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TagRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TagRequest& TagRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TagRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base);
  return *internal_default_instance();
}


void TagRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.TagRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && point_ != nullptr) {
    delete point_;
  }
  point_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TagRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.spot_cam.Logpoint point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TagRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.TagRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.spot_cam.Logpoint point = 2;
  if (this->has_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::point(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.TagRequest)
  return target;
}

size_t TagRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.TagRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.spot_cam.Logpoint point = 2;
  if (this->has_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *point_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TagRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.TagRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TagRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TagRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.TagRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.TagRequest)
    MergeFrom(*source);
  }
}

void TagRequest::MergeFrom(const TagRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.TagRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
  if (from.has_point()) {
    _internal_mutable_point()->::bosdyn::api::spot_cam::Logpoint::MergeFrom(from._internal_point());
  }
}

void TagRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.TagRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TagRequest::CopyFrom(const TagRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.TagRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagRequest::IsInitialized() const {
  return true;
}

void TagRequest::InternalSwap(TagRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TagRequest, point_)
      + sizeof(TagRequest::point_)
      - PROTOBUF_FIELD_OFFSET(TagRequest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TagRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TagResponse::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_TagResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
}
class TagResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const TagResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
TagResponse::_Internal::header(const TagResponse* msg) {
  return *msg->header_;
}
void TagResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
TagResponse::TagResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.TagResponse)
}
TagResponse::TagResponse(const TagResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.TagResponse)
}

void TagResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TagResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base);
  header_ = nullptr;
}

TagResponse::~TagResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.TagResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TagResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void TagResponse::ArenaDtor(void* object) {
  TagResponse* _this = reinterpret_cast< TagResponse* >(object);
  (void)_this;
}
void TagResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TagResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TagResponse& TagResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TagResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base);
  return *internal_default_instance();
}


void TagResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.TagResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TagResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TagResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.TagResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.TagResponse)
  return target;
}

size_t TagResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.TagResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TagResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.TagResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TagResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TagResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.TagResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.TagResponse)
    MergeFrom(*source);
  }
}

void TagResponse::MergeFrom(const TagResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.TagResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
}

void TagResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.TagResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TagResponse::CopyFrom(const TagResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.TagResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagResponse::IsInitialized() const {
  return true;
}

void TagResponse::InternalSwap(TagResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TagResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListCamerasRequest::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_ListCamerasRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
}
class ListCamerasRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const ListCamerasRequest* msg);
};

const ::bosdyn::api::RequestHeader&
ListCamerasRequest::_Internal::header(const ListCamerasRequest* msg) {
  return *msg->header_;
}
void ListCamerasRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
ListCamerasRequest::ListCamerasRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.ListCamerasRequest)
}
ListCamerasRequest::ListCamerasRequest(const ListCamerasRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.ListCamerasRequest)
}

void ListCamerasRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListCamerasRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base);
  header_ = nullptr;
}

ListCamerasRequest::~ListCamerasRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.ListCamerasRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListCamerasRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void ListCamerasRequest::ArenaDtor(void* object) {
  ListCamerasRequest* _this = reinterpret_cast< ListCamerasRequest* >(object);
  (void)_this;
}
void ListCamerasRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListCamerasRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListCamerasRequest& ListCamerasRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListCamerasRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base);
  return *internal_default_instance();
}


void ListCamerasRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.ListCamerasRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListCamerasRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListCamerasRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.ListCamerasRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.ListCamerasRequest)
  return target;
}

size_t ListCamerasRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.ListCamerasRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListCamerasRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.ListCamerasRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListCamerasRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListCamerasRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.ListCamerasRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.ListCamerasRequest)
    MergeFrom(*source);
  }
}

void ListCamerasRequest::MergeFrom(const ListCamerasRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.ListCamerasRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
}

void ListCamerasRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.ListCamerasRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListCamerasRequest::CopyFrom(const ListCamerasRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.ListCamerasRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCamerasRequest::IsInitialized() const {
  return true;
}

void ListCamerasRequest::InternalSwap(ListCamerasRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListCamerasRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListCamerasResponse::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_ListCamerasResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
}
class ListCamerasResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const ListCamerasResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
ListCamerasResponse::_Internal::header(const ListCamerasResponse* msg) {
  return *msg->header_;
}
void ListCamerasResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void ListCamerasResponse::clear_cameras() {
  cameras_.Clear();
}
ListCamerasResponse::ListCamerasResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cameras_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.ListCamerasResponse)
}
ListCamerasResponse::ListCamerasResponse(const ListCamerasResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cameras_(from.cameras_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.ListCamerasResponse)
}

void ListCamerasResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListCamerasResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base);
  header_ = nullptr;
}

ListCamerasResponse::~ListCamerasResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.ListCamerasResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListCamerasResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void ListCamerasResponse::ArenaDtor(void* object) {
  ListCamerasResponse* _this = reinterpret_cast< ListCamerasResponse* >(object);
  (void)_this;
}
void ListCamerasResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListCamerasResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListCamerasResponse& ListCamerasResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListCamerasResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base);
  return *internal_default_instance();
}


void ListCamerasResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.ListCamerasResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cameras_.Clear();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListCamerasResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bosdyn.api.spot_cam.Camera cameras = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cameras(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListCamerasResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.ListCamerasResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .bosdyn.api.spot_cam.Camera cameras = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cameras_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_cameras(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.ListCamerasResponse)
  return target;
}

size_t ListCamerasResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.ListCamerasResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bosdyn.api.spot_cam.Camera cameras = 2;
  total_size += 1UL * this->_internal_cameras_size();
  for (const auto& msg : this->cameras_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListCamerasResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.ListCamerasResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListCamerasResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListCamerasResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.ListCamerasResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.ListCamerasResponse)
    MergeFrom(*source);
  }
}

void ListCamerasResponse::MergeFrom(const ListCamerasResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.ListCamerasResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cameras_.MergeFrom(from.cameras_);
  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
}

void ListCamerasResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.ListCamerasResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListCamerasResponse::CopyFrom(const ListCamerasResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.ListCamerasResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCamerasResponse::IsInitialized() const {
  return true;
}

void ListCamerasResponse::InternalSwap(ListCamerasResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cameras_.InternalSwap(&other->cameras_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListCamerasResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListLogpointsRequest::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_ListLogpointsRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
}
class ListLogpointsRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const ListLogpointsRequest* msg);
};

const ::bosdyn::api::RequestHeader&
ListLogpointsRequest::_Internal::header(const ListLogpointsRequest* msg) {
  return *msg->header_;
}
void ListLogpointsRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
ListLogpointsRequest::ListLogpointsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.ListLogpointsRequest)
}
ListLogpointsRequest::ListLogpointsRequest(const ListLogpointsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.ListLogpointsRequest)
}

void ListLogpointsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListLogpointsRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base);
  header_ = nullptr;
}

ListLogpointsRequest::~ListLogpointsRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.ListLogpointsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListLogpointsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void ListLogpointsRequest::ArenaDtor(void* object) {
  ListLogpointsRequest* _this = reinterpret_cast< ListLogpointsRequest* >(object);
  (void)_this;
}
void ListLogpointsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListLogpointsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListLogpointsRequest& ListLogpointsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListLogpointsRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base);
  return *internal_default_instance();
}


void ListLogpointsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.ListLogpointsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListLogpointsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListLogpointsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.ListLogpointsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.ListLogpointsRequest)
  return target;
}

size_t ListLogpointsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.ListLogpointsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListLogpointsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.ListLogpointsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListLogpointsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListLogpointsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.ListLogpointsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.ListLogpointsRequest)
    MergeFrom(*source);
  }
}

void ListLogpointsRequest::MergeFrom(const ListLogpointsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.ListLogpointsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
}

void ListLogpointsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.ListLogpointsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListLogpointsRequest::CopyFrom(const ListLogpointsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.ListLogpointsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListLogpointsRequest::IsInitialized() const {
  return true;
}

void ListLogpointsRequest::InternalSwap(ListLogpointsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListLogpointsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListLogpointsResponse::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_ListLogpointsResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
}
class ListLogpointsResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const ListLogpointsResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
ListLogpointsResponse::_Internal::header(const ListLogpointsResponse* msg) {
  return *msg->header_;
}
void ListLogpointsResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
ListLogpointsResponse::ListLogpointsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  logpoints_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.ListLogpointsResponse)
}
ListLogpointsResponse::ListLogpointsResponse(const ListLogpointsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      logpoints_(from.logpoints_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.ListLogpointsResponse)
}

void ListLogpointsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListLogpointsResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base);
  header_ = nullptr;
}

ListLogpointsResponse::~ListLogpointsResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.ListLogpointsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListLogpointsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void ListLogpointsResponse::ArenaDtor(void* object) {
  ListLogpointsResponse* _this = reinterpret_cast< ListLogpointsResponse* >(object);
  (void)_this;
}
void ListLogpointsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListLogpointsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListLogpointsResponse& ListLogpointsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListLogpointsResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base);
  return *internal_default_instance();
}


void ListLogpointsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.ListLogpointsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  logpoints_.Clear();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListLogpointsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bosdyn.api.spot_cam.Logpoint logpoints = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_logpoints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListLogpointsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.ListLogpointsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .bosdyn.api.spot_cam.Logpoint logpoints = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_logpoints_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_logpoints(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.ListLogpointsResponse)
  return target;
}

size_t ListLogpointsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.ListLogpointsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bosdyn.api.spot_cam.Logpoint logpoints = 2;
  total_size += 1UL * this->_internal_logpoints_size();
  for (const auto& msg : this->logpoints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListLogpointsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.ListLogpointsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListLogpointsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListLogpointsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.ListLogpointsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.ListLogpointsResponse)
    MergeFrom(*source);
  }
}

void ListLogpointsResponse::MergeFrom(const ListLogpointsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.ListLogpointsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  logpoints_.MergeFrom(from.logpoints_);
  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
}

void ListLogpointsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.ListLogpointsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListLogpointsResponse::CopyFrom(const ListLogpointsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.ListLogpointsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListLogpointsResponse::IsInitialized() const {
  return true;
}

void ListLogpointsResponse::InternalSwap(ListLogpointsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  logpoints_.InternalSwap(&other->logpoints_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListLogpointsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetPassphraseRequest::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_SetPassphraseRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
}
class SetPassphraseRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const SetPassphraseRequest* msg);
};

const ::bosdyn::api::RequestHeader&
SetPassphraseRequest::_Internal::header(const SetPassphraseRequest* msg) {
  return *msg->header_;
}
void SetPassphraseRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
SetPassphraseRequest::SetPassphraseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.SetPassphraseRequest)
}
SetPassphraseRequest::SetPassphraseRequest(const SetPassphraseRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  passphrase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_passphrase().empty()) {
    passphrase_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_passphrase(),
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.SetPassphraseRequest)
}

void SetPassphraseRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetPassphraseRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base);
  passphrase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  header_ = nullptr;
}

SetPassphraseRequest::~SetPassphraseRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.SetPassphraseRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetPassphraseRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  passphrase_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void SetPassphraseRequest::ArenaDtor(void* object) {
  SetPassphraseRequest* _this = reinterpret_cast< SetPassphraseRequest* >(object);
  (void)_this;
}
void SetPassphraseRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetPassphraseRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetPassphraseRequest& SetPassphraseRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetPassphraseRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base);
  return *internal_default_instance();
}


void SetPassphraseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.SetPassphraseRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  passphrase_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetPassphraseRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string passphrase = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_passphrase();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.spot_cam.SetPassphraseRequest.passphrase"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetPassphraseRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.SetPassphraseRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // string passphrase = 2;
  if (this->passphrase().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_passphrase().data(), static_cast<int>(this->_internal_passphrase().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.spot_cam.SetPassphraseRequest.passphrase");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_passphrase(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.SetPassphraseRequest)
  return target;
}

size_t SetPassphraseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.SetPassphraseRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string passphrase = 2;
  if (this->passphrase().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_passphrase());
  }

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetPassphraseRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.SetPassphraseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetPassphraseRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetPassphraseRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.SetPassphraseRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.SetPassphraseRequest)
    MergeFrom(*source);
  }
}

void SetPassphraseRequest::MergeFrom(const SetPassphraseRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.SetPassphraseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.passphrase().size() > 0) {
    _internal_set_passphrase(from._internal_passphrase());
  }
  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
}

void SetPassphraseRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.SetPassphraseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPassphraseRequest::CopyFrom(const SetPassphraseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.SetPassphraseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPassphraseRequest::IsInitialized() const {
  return true;
}

void SetPassphraseRequest::InternalSwap(SetPassphraseRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  passphrase_.Swap(&other->passphrase_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetPassphraseRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetPassphraseResponse::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_SetPassphraseResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
}
class SetPassphraseResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const SetPassphraseResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
SetPassphraseResponse::_Internal::header(const SetPassphraseResponse* msg) {
  return *msg->header_;
}
void SetPassphraseResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
SetPassphraseResponse::SetPassphraseResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.SetPassphraseResponse)
}
SetPassphraseResponse::SetPassphraseResponse(const SetPassphraseResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.SetPassphraseResponse)
}

void SetPassphraseResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetPassphraseResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base);
  header_ = nullptr;
}

SetPassphraseResponse::~SetPassphraseResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.SetPassphraseResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetPassphraseResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void SetPassphraseResponse::ArenaDtor(void* object) {
  SetPassphraseResponse* _this = reinterpret_cast< SetPassphraseResponse* >(object);
  (void)_this;
}
void SetPassphraseResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetPassphraseResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetPassphraseResponse& SetPassphraseResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetPassphraseResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base);
  return *internal_default_instance();
}


void SetPassphraseResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.SetPassphraseResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetPassphraseResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetPassphraseResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.SetPassphraseResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.SetPassphraseResponse)
  return target;
}

size_t SetPassphraseResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.SetPassphraseResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetPassphraseResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.SetPassphraseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetPassphraseResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetPassphraseResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.SetPassphraseResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.SetPassphraseResponse)
    MergeFrom(*source);
  }
}

void SetPassphraseResponse::MergeFrom(const SetPassphraseResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.SetPassphraseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
}

void SetPassphraseResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.SetPassphraseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPassphraseResponse::CopyFrom(const SetPassphraseResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.SetPassphraseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPassphraseResponse::IsInitialized() const {
  return true;
}

void SetPassphraseResponse::InternalSwap(SetPassphraseResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetPassphraseResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DebugRequest::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_DebugRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
}
class DebugRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const DebugRequest* msg);
};

const ::bosdyn::api::RequestHeader&
DebugRequest::_Internal::header(const DebugRequest* msg) {
  return *msg->header_;
}
void DebugRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
DebugRequest::DebugRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.DebugRequest)
}
DebugRequest::DebugRequest(const DebugRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&enable_temperature_, &from.enable_temperature_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_system_stat_) -
    reinterpret_cast<char*>(&enable_temperature_)) + sizeof(enable_system_stat_));
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.DebugRequest)
}

void DebugRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DebugRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_system_stat_) -
      reinterpret_cast<char*>(&header_)) + sizeof(enable_system_stat_));
}

DebugRequest::~DebugRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.DebugRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DebugRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void DebugRequest::ArenaDtor(void* object) {
  DebugRequest* _this = reinterpret_cast< DebugRequest* >(object);
  (void)_this;
}
void DebugRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DebugRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DebugRequest& DebugRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DebugRequest_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base);
  return *internal_default_instance();
}


void DebugRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.DebugRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  ::memset(&enable_temperature_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_system_stat_) -
      reinterpret_cast<char*>(&enable_temperature_)) + sizeof(enable_system_stat_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DebugRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable_temperature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          enable_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable_humidity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          enable_humidity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable_BIT = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          enable_bit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable_shock = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          enable_shock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable_system_stat = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          enable_system_stat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DebugRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.DebugRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // bool enable_temperature = 2;
  if (this->enable_temperature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enable_temperature(), target);
  }

  // bool enable_humidity = 3;
  if (this->enable_humidity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_enable_humidity(), target);
  }

  // bool enable_BIT = 4;
  if (this->enable_bit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_enable_bit(), target);
  }

  // bool enable_shock = 5;
  if (this->enable_shock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_enable_shock(), target);
  }

  // bool enable_system_stat = 6;
  if (this->enable_system_stat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_enable_system_stat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.DebugRequest)
  return target;
}

size_t DebugRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.DebugRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // bool enable_temperature = 2;
  if (this->enable_temperature() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_humidity = 3;
  if (this->enable_humidity() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_BIT = 4;
  if (this->enable_bit() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_shock = 5;
  if (this->enable_shock() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_system_stat = 6;
  if (this->enable_system_stat() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DebugRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.DebugRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DebugRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DebugRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.DebugRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.DebugRequest)
    MergeFrom(*source);
  }
}

void DebugRequest::MergeFrom(const DebugRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.DebugRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
  if (from.enable_temperature() != 0) {
    _internal_set_enable_temperature(from._internal_enable_temperature());
  }
  if (from.enable_humidity() != 0) {
    _internal_set_enable_humidity(from._internal_enable_humidity());
  }
  if (from.enable_bit() != 0) {
    _internal_set_enable_bit(from._internal_enable_bit());
  }
  if (from.enable_shock() != 0) {
    _internal_set_enable_shock(from._internal_enable_shock());
  }
  if (from.enable_system_stat() != 0) {
    _internal_set_enable_system_stat(from._internal_enable_system_stat());
  }
}

void DebugRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.DebugRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugRequest::CopyFrom(const DebugRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.DebugRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugRequest::IsInitialized() const {
  return true;
}

void DebugRequest::InternalSwap(DebugRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DebugRequest, enable_system_stat_)
      + sizeof(DebugRequest::enable_system_stat_)
      - PROTOBUF_FIELD_OFFSET(DebugRequest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DebugRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DebugResponse::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_DebugResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
}
class DebugResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const DebugResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
DebugResponse::_Internal::header(const DebugResponse* msg) {
  return *msg->header_;
}
void DebugResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
DebugResponse::DebugResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.DebugResponse)
}
DebugResponse::DebugResponse(const DebugResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.DebugResponse)
}

void DebugResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DebugResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base);
  header_ = nullptr;
}

DebugResponse::~DebugResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.DebugResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DebugResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void DebugResponse::ArenaDtor(void* object) {
  DebugResponse* _this = reinterpret_cast< DebugResponse* >(object);
  (void)_this;
}
void DebugResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DebugResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DebugResponse& DebugResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DebugResponse_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto.base);
  return *internal_default_instance();
}


void DebugResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.DebugResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DebugResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DebugResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.DebugResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.DebugResponse)
  return target;
}

size_t DebugResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.DebugResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DebugResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.DebugResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DebugResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DebugResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.DebugResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.DebugResponse)
    MergeFrom(*source);
  }
}

void DebugResponse::MergeFrom(const DebugResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.DebugResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
}

void DebugResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.DebugResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugResponse::CopyFrom(const DebugResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.DebugResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugResponse::IsInitialized() const {
  return true;
}

void DebugResponse::InternalSwap(DebugResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DebugResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace spot_cam
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::Logpoint_ImageParams* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::Logpoint_ImageParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::Logpoint_ImageParams >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::Logpoint_Calibration* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::Logpoint_Calibration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::Logpoint_Calibration >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::Logpoint* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::Logpoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::Logpoint >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::DeleteRequest* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::DeleteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::DeleteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::DeleteResponse* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::DeleteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::DeleteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::GetStatusRequest* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::GetStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::GetStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::GetStatusResponse* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::GetStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::GetStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::RetrieveRequest* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::RetrieveRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::RetrieveRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::RetrieveResponse* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::RetrieveResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::RetrieveResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::RetrieveRawDataRequest* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::RetrieveRawDataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::RetrieveRawDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::RetrieveRawDataResponse* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::RetrieveRawDataResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::RetrieveRawDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::StoreRequest* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::StoreRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::StoreRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::StoreResponse* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::StoreResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::StoreResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::TagRequest* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::TagRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::TagRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::TagResponse* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::TagResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::TagResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::ListCamerasRequest* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::ListCamerasRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::ListCamerasRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::ListCamerasResponse* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::ListCamerasResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::ListCamerasResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::ListLogpointsRequest* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::ListLogpointsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::ListLogpointsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::ListLogpointsResponse* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::ListLogpointsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::ListLogpointsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::SetPassphraseRequest* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::SetPassphraseRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::SetPassphraseRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::SetPassphraseResponse* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::SetPassphraseResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::SetPassphraseResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::DebugRequest* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::DebugRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::DebugRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::DebugResponse* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::DebugResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::DebugResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
