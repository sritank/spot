// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/spot_cam/camera.proto

#include "bosdyn/api/spot_cam/camera.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SE3Pose_bosdyn_2fapi_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec2_bosdyn_2fapi_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Camera_PinholeIntrinsics_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Camera_SphericalLimits_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto;
namespace bosdyn {
namespace api {
namespace spot_cam {
class Camera_PinholeIntrinsicsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Camera_PinholeIntrinsics> _instance;
} _Camera_PinholeIntrinsics_default_instance_;
class Camera_SphericalLimitsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Camera_SphericalLimits> _instance;
} _Camera_SphericalLimits_default_instance_;
class CameraDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Camera> _instance;
  const ::bosdyn::api::spot_cam::Camera_PinholeIntrinsics* pinhole_;
  const ::bosdyn::api::spot_cam::Camera_SphericalLimits* spherical_;
} _Camera_default_instance_;
}  // namespace spot_cam
}  // namespace api
}  // namespace bosdyn
static void InitDefaultsscc_info_Camera_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_Camera_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::Camera();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::Camera::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Camera_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Camera_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto}, {
      &scc_info_Vec2_bosdyn_2fapi_2fgeometry_2eproto.base,
      &scc_info_SE3Pose_bosdyn_2fapi_2fgeometry_2eproto.base,
      &scc_info_Camera_PinholeIntrinsics_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto.base,
      &scc_info_Camera_SphericalLimits_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto.base,}};

static void InitDefaultsscc_info_Camera_PinholeIntrinsics_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_Camera_PinholeIntrinsics_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::Camera_PinholeIntrinsics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::Camera_PinholeIntrinsics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Camera_PinholeIntrinsics_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Camera_PinholeIntrinsics_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto}, {
      &scc_info_Vec2_bosdyn_2fapi_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_Camera_SphericalLimits_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_Camera_SphericalLimits_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::Camera_SphericalLimits();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::Camera_SphericalLimits::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Camera_SphericalLimits_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Camera_SphericalLimits_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto}, {
      &scc_info_Vec2_bosdyn_2fapi_2fgeometry_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::Camera_PinholeIntrinsics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::Camera_PinholeIntrinsics, focal_length_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::Camera_PinholeIntrinsics, center_point_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::Camera_PinholeIntrinsics, k1_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::Camera_PinholeIntrinsics, k2_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::Camera_PinholeIntrinsics, k3_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::Camera_PinholeIntrinsics, k4_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::Camera_SphericalLimits, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::Camera_SphericalLimits, min_angle_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::Camera_SphericalLimits, max_angle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::Camera, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::Camera, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::Camera, name_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::Camera, resolution_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::Camera, base_frame_name_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::Camera, base_tfrom_sensor_),
  offsetof(::bosdyn::api::spot_cam::CameraDefaultTypeInternal, pinhole_),
  offsetof(::bosdyn::api::spot_cam::CameraDefaultTypeInternal, spherical_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::Camera, intrinsics_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::bosdyn::api::spot_cam::Camera_PinholeIntrinsics)},
  { 11, -1, sizeof(::bosdyn::api::spot_cam::Camera_SphericalLimits)},
  { 18, -1, sizeof(::bosdyn::api::spot_cam::Camera)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_Camera_PinholeIntrinsics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_Camera_SphericalLimits_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_Camera_default_instance_),
};

const char descriptor_table_protodef_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n bosdyn/api/spot_cam/camera.proto\022\023bosd"
  "yn.api.spot_cam\032\031bosdyn/api/geometry.pro"
  "to\"\212\004\n\006Camera\022\014\n\004name\030\001 \001(\t\022$\n\nresolutio"
  "n\030\002 \001(\0132\020.bosdyn.api.Vec2\022\027\n\017base_frame_"
  "name\030\003 \001(\t\022.\n\021base_tfrom_sensor\030\004 \001(\0132\023."
  "bosdyn.api.SE3Pose\022@\n\007pinhole\030\005 \001(\0132-.bo"
  "sdyn.api.spot_cam.Camera.PinholeIntrinsi"
  "csH\000\022@\n\tspherical\030\006 \001(\0132+.bosdyn.api.spo"
  "t_cam.Camera.SphericalLimitsH\000\032\223\001\n\021Pinho"
  "leIntrinsics\022&\n\014focal_length\030\001 \001(\0132\020.bos"
  "dyn.api.Vec2\022&\n\014center_point\030\002 \001(\0132\020.bos"
  "dyn.api.Vec2\022\n\n\002k1\030\003 \001(\002\022\n\n\002k2\030\004 \001(\002\022\n\n\002"
  "k3\030\005 \001(\002\022\n\n\002k4\030\006 \001(\002\032[\n\017SphericalLimits\022"
  "#\n\tmin_angle\030\001 \001(\0132\020.bosdyn.api.Vec2\022#\n\t"
  "max_angle\030\002 \001(\0132\020.bosdyn.api.Vec2B\014\n\nint"
  "rinsicsB\rB\013CameraProtob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto_deps[1] = {
  &::descriptor_table_bosdyn_2fapi_2fgeometry_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto_sccs[3] = {
  &scc_info_Camera_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto.base,
  &scc_info_Camera_PinholeIntrinsics_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto.base,
  &scc_info_Camera_SphericalLimits_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto = {
  false, false, descriptor_table_protodef_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto, "bosdyn/api/spot_cam/camera.proto", 630,
  &descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto_once, descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto_sccs, descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto::offsets,
  file_level_metadata_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto, 3, file_level_enum_descriptors_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto, file_level_service_descriptors_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto)), true);
namespace bosdyn {
namespace api {
namespace spot_cam {

// ===================================================================

void Camera_PinholeIntrinsics::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_Camera_PinholeIntrinsics_default_instance_._instance.get_mutable()->focal_length_ = const_cast< ::bosdyn::api::Vec2*>(
      ::bosdyn::api::Vec2::internal_default_instance());
  ::bosdyn::api::spot_cam::_Camera_PinholeIntrinsics_default_instance_._instance.get_mutable()->center_point_ = const_cast< ::bosdyn::api::Vec2*>(
      ::bosdyn::api::Vec2::internal_default_instance());
}
class Camera_PinholeIntrinsics::_Internal {
 public:
  static const ::bosdyn::api::Vec2& focal_length(const Camera_PinholeIntrinsics* msg);
  static const ::bosdyn::api::Vec2& center_point(const Camera_PinholeIntrinsics* msg);
};

const ::bosdyn::api::Vec2&
Camera_PinholeIntrinsics::_Internal::focal_length(const Camera_PinholeIntrinsics* msg) {
  return *msg->focal_length_;
}
const ::bosdyn::api::Vec2&
Camera_PinholeIntrinsics::_Internal::center_point(const Camera_PinholeIntrinsics* msg) {
  return *msg->center_point_;
}
void Camera_PinholeIntrinsics::clear_focal_length() {
  if (GetArena() == nullptr && focal_length_ != nullptr) {
    delete focal_length_;
  }
  focal_length_ = nullptr;
}
void Camera_PinholeIntrinsics::clear_center_point() {
  if (GetArena() == nullptr && center_point_ != nullptr) {
    delete center_point_;
  }
  center_point_ = nullptr;
}
Camera_PinholeIntrinsics::Camera_PinholeIntrinsics(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.Camera.PinholeIntrinsics)
}
Camera_PinholeIntrinsics::Camera_PinholeIntrinsics(const Camera_PinholeIntrinsics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_focal_length()) {
    focal_length_ = new ::bosdyn::api::Vec2(*from.focal_length_);
  } else {
    focal_length_ = nullptr;
  }
  if (from._internal_has_center_point()) {
    center_point_ = new ::bosdyn::api::Vec2(*from.center_point_);
  } else {
    center_point_ = nullptr;
  }
  ::memcpy(&k1_, &from.k1_,
    static_cast<size_t>(reinterpret_cast<char*>(&k4_) -
    reinterpret_cast<char*>(&k1_)) + sizeof(k4_));
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.Camera.PinholeIntrinsics)
}

void Camera_PinholeIntrinsics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Camera_PinholeIntrinsics_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto.base);
  ::memset(&focal_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&k4_) -
      reinterpret_cast<char*>(&focal_length_)) + sizeof(k4_));
}

Camera_PinholeIntrinsics::~Camera_PinholeIntrinsics() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.Camera.PinholeIntrinsics)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Camera_PinholeIntrinsics::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete focal_length_;
  if (this != internal_default_instance()) delete center_point_;
}

void Camera_PinholeIntrinsics::ArenaDtor(void* object) {
  Camera_PinholeIntrinsics* _this = reinterpret_cast< Camera_PinholeIntrinsics* >(object);
  (void)_this;
}
void Camera_PinholeIntrinsics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Camera_PinholeIntrinsics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Camera_PinholeIntrinsics& Camera_PinholeIntrinsics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Camera_PinholeIntrinsics_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto.base);
  return *internal_default_instance();
}


void Camera_PinholeIntrinsics::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.Camera.PinholeIntrinsics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && focal_length_ != nullptr) {
    delete focal_length_;
  }
  focal_length_ = nullptr;
  if (GetArena() == nullptr && center_point_ != nullptr) {
    delete center_point_;
  }
  center_point_ = nullptr;
  ::memset(&k1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&k4_) -
      reinterpret_cast<char*>(&k1_)) + sizeof(k4_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Camera_PinholeIntrinsics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.Vec2 focal_length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_focal_length(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.Vec2 center_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_center_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float k1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          k1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float k2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          k2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float k3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          k3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float k4 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          k4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Camera_PinholeIntrinsics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.Camera.PinholeIntrinsics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.Vec2 focal_length = 1;
  if (this->has_focal_length()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::focal_length(this), target, stream);
  }

  // .bosdyn.api.Vec2 center_point = 2;
  if (this->has_center_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::center_point(this), target, stream);
  }

  // float k1 = 3;
  if (!(this->k1() <= 0 && this->k1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_k1(), target);
  }

  // float k2 = 4;
  if (!(this->k2() <= 0 && this->k2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_k2(), target);
  }

  // float k3 = 5;
  if (!(this->k3() <= 0 && this->k3() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_k3(), target);
  }

  // float k4 = 6;
  if (!(this->k4() <= 0 && this->k4() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_k4(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.Camera.PinholeIntrinsics)
  return target;
}

size_t Camera_PinholeIntrinsics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.Camera.PinholeIntrinsics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.Vec2 focal_length = 1;
  if (this->has_focal_length()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *focal_length_);
  }

  // .bosdyn.api.Vec2 center_point = 2;
  if (this->has_center_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *center_point_);
  }

  // float k1 = 3;
  if (!(this->k1() <= 0 && this->k1() >= 0)) {
    total_size += 1 + 4;
  }

  // float k2 = 4;
  if (!(this->k2() <= 0 && this->k2() >= 0)) {
    total_size += 1 + 4;
  }

  // float k3 = 5;
  if (!(this->k3() <= 0 && this->k3() >= 0)) {
    total_size += 1 + 4;
  }

  // float k4 = 6;
  if (!(this->k4() <= 0 && this->k4() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Camera_PinholeIntrinsics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.Camera.PinholeIntrinsics)
  GOOGLE_DCHECK_NE(&from, this);
  const Camera_PinholeIntrinsics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Camera_PinholeIntrinsics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.Camera.PinholeIntrinsics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.Camera.PinholeIntrinsics)
    MergeFrom(*source);
  }
}

void Camera_PinholeIntrinsics::MergeFrom(const Camera_PinholeIntrinsics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.Camera.PinholeIntrinsics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_focal_length()) {
    _internal_mutable_focal_length()->::bosdyn::api::Vec2::MergeFrom(from._internal_focal_length());
  }
  if (from.has_center_point()) {
    _internal_mutable_center_point()->::bosdyn::api::Vec2::MergeFrom(from._internal_center_point());
  }
  if (!(from.k1() <= 0 && from.k1() >= 0)) {
    _internal_set_k1(from._internal_k1());
  }
  if (!(from.k2() <= 0 && from.k2() >= 0)) {
    _internal_set_k2(from._internal_k2());
  }
  if (!(from.k3() <= 0 && from.k3() >= 0)) {
    _internal_set_k3(from._internal_k3());
  }
  if (!(from.k4() <= 0 && from.k4() >= 0)) {
    _internal_set_k4(from._internal_k4());
  }
}

void Camera_PinholeIntrinsics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.Camera.PinholeIntrinsics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Camera_PinholeIntrinsics::CopyFrom(const Camera_PinholeIntrinsics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.Camera.PinholeIntrinsics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Camera_PinholeIntrinsics::IsInitialized() const {
  return true;
}

void Camera_PinholeIntrinsics::InternalSwap(Camera_PinholeIntrinsics* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Camera_PinholeIntrinsics, k4_)
      + sizeof(Camera_PinholeIntrinsics::k4_)
      - PROTOBUF_FIELD_OFFSET(Camera_PinholeIntrinsics, focal_length_)>(
          reinterpret_cast<char*>(&focal_length_),
          reinterpret_cast<char*>(&other->focal_length_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Camera_PinholeIntrinsics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Camera_SphericalLimits::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_Camera_SphericalLimits_default_instance_._instance.get_mutable()->min_angle_ = const_cast< ::bosdyn::api::Vec2*>(
      ::bosdyn::api::Vec2::internal_default_instance());
  ::bosdyn::api::spot_cam::_Camera_SphericalLimits_default_instance_._instance.get_mutable()->max_angle_ = const_cast< ::bosdyn::api::Vec2*>(
      ::bosdyn::api::Vec2::internal_default_instance());
}
class Camera_SphericalLimits::_Internal {
 public:
  static const ::bosdyn::api::Vec2& min_angle(const Camera_SphericalLimits* msg);
  static const ::bosdyn::api::Vec2& max_angle(const Camera_SphericalLimits* msg);
};

const ::bosdyn::api::Vec2&
Camera_SphericalLimits::_Internal::min_angle(const Camera_SphericalLimits* msg) {
  return *msg->min_angle_;
}
const ::bosdyn::api::Vec2&
Camera_SphericalLimits::_Internal::max_angle(const Camera_SphericalLimits* msg) {
  return *msg->max_angle_;
}
void Camera_SphericalLimits::clear_min_angle() {
  if (GetArena() == nullptr && min_angle_ != nullptr) {
    delete min_angle_;
  }
  min_angle_ = nullptr;
}
void Camera_SphericalLimits::clear_max_angle() {
  if (GetArena() == nullptr && max_angle_ != nullptr) {
    delete max_angle_;
  }
  max_angle_ = nullptr;
}
Camera_SphericalLimits::Camera_SphericalLimits(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.Camera.SphericalLimits)
}
Camera_SphericalLimits::Camera_SphericalLimits(const Camera_SphericalLimits& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_min_angle()) {
    min_angle_ = new ::bosdyn::api::Vec2(*from.min_angle_);
  } else {
    min_angle_ = nullptr;
  }
  if (from._internal_has_max_angle()) {
    max_angle_ = new ::bosdyn::api::Vec2(*from.max_angle_);
  } else {
    max_angle_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.Camera.SphericalLimits)
}

void Camera_SphericalLimits::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Camera_SphericalLimits_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto.base);
  ::memset(&min_angle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_angle_) -
      reinterpret_cast<char*>(&min_angle_)) + sizeof(max_angle_));
}

Camera_SphericalLimits::~Camera_SphericalLimits() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.Camera.SphericalLimits)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Camera_SphericalLimits::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete min_angle_;
  if (this != internal_default_instance()) delete max_angle_;
}

void Camera_SphericalLimits::ArenaDtor(void* object) {
  Camera_SphericalLimits* _this = reinterpret_cast< Camera_SphericalLimits* >(object);
  (void)_this;
}
void Camera_SphericalLimits::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Camera_SphericalLimits::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Camera_SphericalLimits& Camera_SphericalLimits::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Camera_SphericalLimits_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto.base);
  return *internal_default_instance();
}


void Camera_SphericalLimits::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.Camera.SphericalLimits)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && min_angle_ != nullptr) {
    delete min_angle_;
  }
  min_angle_ = nullptr;
  if (GetArena() == nullptr && max_angle_ != nullptr) {
    delete max_angle_;
  }
  max_angle_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Camera_SphericalLimits::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.Vec2 min_angle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_min_angle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.Vec2 max_angle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_max_angle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Camera_SphericalLimits::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.Camera.SphericalLimits)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.Vec2 min_angle = 1;
  if (this->has_min_angle()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::min_angle(this), target, stream);
  }

  // .bosdyn.api.Vec2 max_angle = 2;
  if (this->has_max_angle()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::max_angle(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.Camera.SphericalLimits)
  return target;
}

size_t Camera_SphericalLimits::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.Camera.SphericalLimits)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.Vec2 min_angle = 1;
  if (this->has_min_angle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *min_angle_);
  }

  // .bosdyn.api.Vec2 max_angle = 2;
  if (this->has_max_angle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *max_angle_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Camera_SphericalLimits::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.Camera.SphericalLimits)
  GOOGLE_DCHECK_NE(&from, this);
  const Camera_SphericalLimits* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Camera_SphericalLimits>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.Camera.SphericalLimits)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.Camera.SphericalLimits)
    MergeFrom(*source);
  }
}

void Camera_SphericalLimits::MergeFrom(const Camera_SphericalLimits& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.Camera.SphericalLimits)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_min_angle()) {
    _internal_mutable_min_angle()->::bosdyn::api::Vec2::MergeFrom(from._internal_min_angle());
  }
  if (from.has_max_angle()) {
    _internal_mutable_max_angle()->::bosdyn::api::Vec2::MergeFrom(from._internal_max_angle());
  }
}

void Camera_SphericalLimits::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.Camera.SphericalLimits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Camera_SphericalLimits::CopyFrom(const Camera_SphericalLimits& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.Camera.SphericalLimits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Camera_SphericalLimits::IsInitialized() const {
  return true;
}

void Camera_SphericalLimits::InternalSwap(Camera_SphericalLimits* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Camera_SphericalLimits, max_angle_)
      + sizeof(Camera_SphericalLimits::max_angle_)
      - PROTOBUF_FIELD_OFFSET(Camera_SphericalLimits, min_angle_)>(
          reinterpret_cast<char*>(&min_angle_),
          reinterpret_cast<char*>(&other->min_angle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Camera_SphericalLimits::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Camera::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_Camera_default_instance_._instance.get_mutable()->resolution_ = const_cast< ::bosdyn::api::Vec2*>(
      ::bosdyn::api::Vec2::internal_default_instance());
  ::bosdyn::api::spot_cam::_Camera_default_instance_._instance.get_mutable()->base_tfrom_sensor_ = const_cast< ::bosdyn::api::SE3Pose*>(
      ::bosdyn::api::SE3Pose::internal_default_instance());
  ::bosdyn::api::spot_cam::_Camera_default_instance_.pinhole_ = const_cast< ::bosdyn::api::spot_cam::Camera_PinholeIntrinsics*>(
      ::bosdyn::api::spot_cam::Camera_PinholeIntrinsics::internal_default_instance());
  ::bosdyn::api::spot_cam::_Camera_default_instance_.spherical_ = const_cast< ::bosdyn::api::spot_cam::Camera_SphericalLimits*>(
      ::bosdyn::api::spot_cam::Camera_SphericalLimits::internal_default_instance());
}
class Camera::_Internal {
 public:
  static const ::bosdyn::api::Vec2& resolution(const Camera* msg);
  static const ::bosdyn::api::SE3Pose& base_tfrom_sensor(const Camera* msg);
  static const ::bosdyn::api::spot_cam::Camera_PinholeIntrinsics& pinhole(const Camera* msg);
  static const ::bosdyn::api::spot_cam::Camera_SphericalLimits& spherical(const Camera* msg);
};

const ::bosdyn::api::Vec2&
Camera::_Internal::resolution(const Camera* msg) {
  return *msg->resolution_;
}
const ::bosdyn::api::SE3Pose&
Camera::_Internal::base_tfrom_sensor(const Camera* msg) {
  return *msg->base_tfrom_sensor_;
}
const ::bosdyn::api::spot_cam::Camera_PinholeIntrinsics&
Camera::_Internal::pinhole(const Camera* msg) {
  return *msg->intrinsics_.pinhole_;
}
const ::bosdyn::api::spot_cam::Camera_SphericalLimits&
Camera::_Internal::spherical(const Camera* msg) {
  return *msg->intrinsics_.spherical_;
}
void Camera::clear_resolution() {
  if (GetArena() == nullptr && resolution_ != nullptr) {
    delete resolution_;
  }
  resolution_ = nullptr;
}
void Camera::clear_base_tfrom_sensor() {
  if (GetArena() == nullptr && base_tfrom_sensor_ != nullptr) {
    delete base_tfrom_sensor_;
  }
  base_tfrom_sensor_ = nullptr;
}
void Camera::set_allocated_pinhole(::bosdyn::api::spot_cam::Camera_PinholeIntrinsics* pinhole) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_intrinsics();
  if (pinhole) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pinhole);
    if (message_arena != submessage_arena) {
      pinhole = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pinhole, submessage_arena);
    }
    set_has_pinhole();
    intrinsics_.pinhole_ = pinhole;
  }
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.Camera.pinhole)
}
void Camera::set_allocated_spherical(::bosdyn::api::spot_cam::Camera_SphericalLimits* spherical) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_intrinsics();
  if (spherical) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(spherical);
    if (message_arena != submessage_arena) {
      spherical = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spherical, submessage_arena);
    }
    set_has_spherical();
    intrinsics_.spherical_ = spherical;
  }
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.Camera.spherical)
}
Camera::Camera(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.Camera)
}
Camera::Camera(const Camera& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  base_frame_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_base_frame_name().empty()) {
    base_frame_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_base_frame_name(),
      GetArena());
  }
  if (from._internal_has_resolution()) {
    resolution_ = new ::bosdyn::api::Vec2(*from.resolution_);
  } else {
    resolution_ = nullptr;
  }
  if (from._internal_has_base_tfrom_sensor()) {
    base_tfrom_sensor_ = new ::bosdyn::api::SE3Pose(*from.base_tfrom_sensor_);
  } else {
    base_tfrom_sensor_ = nullptr;
  }
  clear_has_intrinsics();
  switch (from.intrinsics_case()) {
    case kPinhole: {
      _internal_mutable_pinhole()->::bosdyn::api::spot_cam::Camera_PinholeIntrinsics::MergeFrom(from._internal_pinhole());
      break;
    }
    case kSpherical: {
      _internal_mutable_spherical()->::bosdyn::api::spot_cam::Camera_SphericalLimits::MergeFrom(from._internal_spherical());
      break;
    }
    case INTRINSICS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.Camera)
}

void Camera::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Camera_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_frame_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&resolution_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&base_tfrom_sensor_) -
      reinterpret_cast<char*>(&resolution_)) + sizeof(base_tfrom_sensor_));
  clear_has_intrinsics();
}

Camera::~Camera() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.Camera)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Camera::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_frame_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete resolution_;
  if (this != internal_default_instance()) delete base_tfrom_sensor_;
  if (has_intrinsics()) {
    clear_intrinsics();
  }
}

void Camera::ArenaDtor(void* object) {
  Camera* _this = reinterpret_cast< Camera* >(object);
  (void)_this;
}
void Camera::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Camera::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Camera& Camera::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Camera_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto.base);
  return *internal_default_instance();
}


void Camera::clear_intrinsics() {
// @@protoc_insertion_point(one_of_clear_start:bosdyn.api.spot_cam.Camera)
  switch (intrinsics_case()) {
    case kPinhole: {
      if (GetArena() == nullptr) {
        delete intrinsics_.pinhole_;
      }
      break;
    }
    case kSpherical: {
      if (GetArena() == nullptr) {
        delete intrinsics_.spherical_;
      }
      break;
    }
    case INTRINSICS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = INTRINSICS_NOT_SET;
}


void Camera::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.Camera)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  base_frame_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && resolution_ != nullptr) {
    delete resolution_;
  }
  resolution_ = nullptr;
  if (GetArena() == nullptr && base_tfrom_sensor_ != nullptr) {
    delete base_tfrom_sensor_;
  }
  base_tfrom_sensor_ = nullptr;
  clear_intrinsics();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Camera::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.spot_cam.Camera.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.Vec2 resolution = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_resolution(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string base_frame_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_base_frame_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.spot_cam.Camera.base_frame_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.SE3Pose base_tfrom_sensor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_tfrom_sensor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.spot_cam.Camera.PinholeIntrinsics pinhole = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_pinhole(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.spot_cam.Camera.SphericalLimits spherical = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_spherical(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Camera::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.Camera)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.spot_cam.Camera.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .bosdyn.api.Vec2 resolution = 2;
  if (this->has_resolution()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::resolution(this), target, stream);
  }

  // string base_frame_name = 3;
  if (this->base_frame_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_base_frame_name().data(), static_cast<int>(this->_internal_base_frame_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.spot_cam.Camera.base_frame_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_base_frame_name(), target);
  }

  // .bosdyn.api.SE3Pose base_tfrom_sensor = 4;
  if (this->has_base_tfrom_sensor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::base_tfrom_sensor(this), target, stream);
  }

  // .bosdyn.api.spot_cam.Camera.PinholeIntrinsics pinhole = 5;
  if (_internal_has_pinhole()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::pinhole(this), target, stream);
  }

  // .bosdyn.api.spot_cam.Camera.SphericalLimits spherical = 6;
  if (_internal_has_spherical()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::spherical(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.Camera)
  return target;
}

size_t Camera::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.Camera)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string base_frame_name = 3;
  if (this->base_frame_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_base_frame_name());
  }

  // .bosdyn.api.Vec2 resolution = 2;
  if (this->has_resolution()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *resolution_);
  }

  // .bosdyn.api.SE3Pose base_tfrom_sensor = 4;
  if (this->has_base_tfrom_sensor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_tfrom_sensor_);
  }

  switch (intrinsics_case()) {
    // .bosdyn.api.spot_cam.Camera.PinholeIntrinsics pinhole = 5;
    case kPinhole: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *intrinsics_.pinhole_);
      break;
    }
    // .bosdyn.api.spot_cam.Camera.SphericalLimits spherical = 6;
    case kSpherical: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *intrinsics_.spherical_);
      break;
    }
    case INTRINSICS_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Camera::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.Camera)
  GOOGLE_DCHECK_NE(&from, this);
  const Camera* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Camera>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.Camera)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.Camera)
    MergeFrom(*source);
  }
}

void Camera::MergeFrom(const Camera& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.Camera)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.base_frame_name().size() > 0) {
    _internal_set_base_frame_name(from._internal_base_frame_name());
  }
  if (from.has_resolution()) {
    _internal_mutable_resolution()->::bosdyn::api::Vec2::MergeFrom(from._internal_resolution());
  }
  if (from.has_base_tfrom_sensor()) {
    _internal_mutable_base_tfrom_sensor()->::bosdyn::api::SE3Pose::MergeFrom(from._internal_base_tfrom_sensor());
  }
  switch (from.intrinsics_case()) {
    case kPinhole: {
      _internal_mutable_pinhole()->::bosdyn::api::spot_cam::Camera_PinholeIntrinsics::MergeFrom(from._internal_pinhole());
      break;
    }
    case kSpherical: {
      _internal_mutable_spherical()->::bosdyn::api::spot_cam::Camera_SphericalLimits::MergeFrom(from._internal_spherical());
      break;
    }
    case INTRINSICS_NOT_SET: {
      break;
    }
  }
}

void Camera::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.Camera)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Camera::CopyFrom(const Camera& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.Camera)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Camera::IsInitialized() const {
  return true;
}

void Camera::InternalSwap(Camera* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  base_frame_name_.Swap(&other->base_frame_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Camera, base_tfrom_sensor_)
      + sizeof(Camera::base_tfrom_sensor_)
      - PROTOBUF_FIELD_OFFSET(Camera, resolution_)>(
          reinterpret_cast<char*>(&resolution_),
          reinterpret_cast<char*>(&other->resolution_));
  swap(intrinsics_, other->intrinsics_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Camera::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace spot_cam
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::Camera_PinholeIntrinsics* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::Camera_PinholeIntrinsics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::Camera_PinholeIntrinsics >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::Camera_SphericalLimits* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::Camera_SphericalLimits >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::Camera_SphericalLimits >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::Camera* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::Camera >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::Camera >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
