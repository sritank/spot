// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/spot_cam/streamquality.proto

#include "bosdyn/api/spot_cam/streamquality.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StreamParams_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamParams_AwbMode_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Int64Value_google_2fprotobuf_2fwrappers_2eproto;
namespace bosdyn {
namespace api {
namespace spot_cam {
class StreamParams_AwbModeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamParams_AwbMode> _instance;
} _StreamParams_AwbMode_default_instance_;
class StreamParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamParams> _instance;
} _StreamParams_default_instance_;
class GetStreamParamsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetStreamParamsRequest> _instance;
} _GetStreamParamsRequest_default_instance_;
class GetStreamParamsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetStreamParamsResponse> _instance;
} _GetStreamParamsResponse_default_instance_;
class SetStreamParamsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetStreamParamsRequest> _instance;
} _SetStreamParamsRequest_default_instance_;
class SetStreamParamsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetStreamParamsResponse> _instance;
} _SetStreamParamsResponse_default_instance_;
}  // namespace spot_cam
}  // namespace api
}  // namespace bosdyn
static void InitDefaultsscc_info_GetStreamParamsRequest_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_GetStreamParamsRequest_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::GetStreamParamsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::GetStreamParamsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetStreamParamsRequest_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetStreamParamsRequest_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_GetStreamParamsResponse_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_GetStreamParamsResponse_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::GetStreamParamsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::GetStreamParamsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetStreamParamsResponse_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetStreamParamsResponse_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_StreamParams_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto.base,}};

static void InitDefaultsscc_info_SetStreamParamsRequest_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_SetStreamParamsRequest_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::SetStreamParamsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::SetStreamParamsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SetStreamParamsRequest_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SetStreamParamsRequest_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_StreamParams_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto.base,}};

static void InitDefaultsscc_info_SetStreamParamsResponse_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_SetStreamParamsResponse_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::SetStreamParamsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::SetStreamParamsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SetStreamParamsResponse_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SetStreamParamsResponse_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_StreamParams_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto.base,}};

static void InitDefaultsscc_info_StreamParams_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_StreamParams_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::StreamParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::StreamParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StreamParams_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_StreamParams_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto}, {
      &scc_info_Int64Value_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_StreamParams_AwbMode_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto.base,}};

static void InitDefaultsscc_info_StreamParams_AwbMode_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_StreamParams_AwbMode_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::StreamParams_AwbMode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::StreamParams_AwbMode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamParams_AwbMode_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StreamParams_AwbMode_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::StreamParams_AwbMode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::StreamParams_AwbMode, awb_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::StreamParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::StreamParams, targetbitrate_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::StreamParams, refreshinterval_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::StreamParams, idrinterval_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::StreamParams, awb_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetStreamParamsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetStreamParamsRequest, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetStreamParamsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetStreamParamsResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetStreamParamsResponse, params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::SetStreamParamsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::SetStreamParamsRequest, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::SetStreamParamsRequest, params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::SetStreamParamsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::SetStreamParamsResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::SetStreamParamsResponse, params_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::bosdyn::api::spot_cam::StreamParams_AwbMode)},
  { 6, -1, sizeof(::bosdyn::api::spot_cam::StreamParams)},
  { 15, -1, sizeof(::bosdyn::api::spot_cam::GetStreamParamsRequest)},
  { 21, -1, sizeof(::bosdyn::api::spot_cam::GetStreamParamsResponse)},
  { 28, -1, sizeof(::bosdyn::api::spot_cam::SetStreamParamsRequest)},
  { 35, -1, sizeof(::bosdyn::api::spot_cam::SetStreamParamsResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_StreamParams_AwbMode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_StreamParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_GetStreamParamsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_GetStreamParamsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_SetStreamParamsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_SetStreamParamsResponse_default_instance_),
};

const char descriptor_table_protodef_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'bosdyn/api/spot_cam/streamquality.prot"
  "o\022\023bosdyn.api.spot_cam\032\027bosdyn/api/heade"
  "r.proto\032\036google/protobuf/wrappers.proto\""
  "\302\003\n\014StreamParams\0222\n\rtargetbitrate\030\001 \001(\0132"
  "\033.google.protobuf.Int64Value\0224\n\017refreshi"
  "nterval\030\002 \001(\0132\033.google.protobuf.Int64Val"
  "ue\0220\n\013idrinterval\030\003 \001(\0132\033.google.protobu"
  "f.Int64Value\0226\n\003awb\030\004 \001(\0132).bosdyn.api.s"
  "pot_cam.StreamParams.AwbMode\032E\n\007AwbMode\022"
  ":\n\003awb\030\001 \001(\0162-.bosdyn.api.spot_cam.Strea"
  "mParams.AwbModeEnum\"\226\001\n\013AwbModeEnum\022\007\n\003O"
  "FF\020\000\022\010\n\004AUTO\020\001\022\020\n\014INCANDESCENT\020\002\022\017\n\013FLUO"
  "RESCENT\020\003\022\024\n\020WARM_FLUORESCENT\020\004\022\014\n\010DAYLI"
  "GHT\020\005\022\n\n\006CLOUDY\020\006\022\014\n\010TWILIGHT\020\007\022\t\n\005SHADE"
  "\020\010\022\010\n\004DARK\020\t\"C\n\026GetStreamParamsRequest\022)"
  "\n\006header\030\001 \001(\0132\031.bosdyn.api.RequestHeade"
  "r\"x\n\027GetStreamParamsResponse\022*\n\006header\030\001"
  " \001(\0132\032.bosdyn.api.ResponseHeader\0221\n\006para"
  "ms\030\002 \001(\0132!.bosdyn.api.spot_cam.StreamPar"
  "ams\"v\n\026SetStreamParamsRequest\022)\n\006header\030"
  "\001 \001(\0132\031.bosdyn.api.RequestHeader\0221\n\006para"
  "ms\030\002 \001(\0132!.bosdyn.api.spot_cam.StreamPar"
  "ams\"x\n\027SetStreamParamsResponse\022*\n\006header"
  "\030\001 \001(\0132\032.bosdyn.api.ResponseHeader\0221\n\006pa"
  "rams\030\002 \001(\0132!.bosdyn.api.spot_cam.StreamP"
  "aramsB\024B\022StreamQualityProtob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto_deps[2] = {
  &::descriptor_table_bosdyn_2fapi_2fheader_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto_sccs[6] = {
  &scc_info_GetStreamParamsRequest_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto.base,
  &scc_info_GetStreamParamsResponse_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto.base,
  &scc_info_SetStreamParamsRequest_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto.base,
  &scc_info_SetStreamParamsResponse_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto.base,
  &scc_info_StreamParams_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto.base,
  &scc_info_StreamParams_AwbMode_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto = {
  false, false, descriptor_table_protodef_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto, "bosdyn/api/spot_cam/streamquality.proto", 1035,
  &descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto_once, descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto_sccs, descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto_deps, 6, 2,
  schemas, file_default_instances, TableStruct_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto::offsets,
  file_level_metadata_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto, 6, file_level_enum_descriptors_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto, file_level_service_descriptors_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto)), true);
namespace bosdyn {
namespace api {
namespace spot_cam {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamParams_AwbModeEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto[0];
}
bool StreamParams_AwbModeEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr StreamParams_AwbModeEnum StreamParams::OFF;
constexpr StreamParams_AwbModeEnum StreamParams::AUTO;
constexpr StreamParams_AwbModeEnum StreamParams::INCANDESCENT;
constexpr StreamParams_AwbModeEnum StreamParams::FLUORESCENT;
constexpr StreamParams_AwbModeEnum StreamParams::WARM_FLUORESCENT;
constexpr StreamParams_AwbModeEnum StreamParams::DAYLIGHT;
constexpr StreamParams_AwbModeEnum StreamParams::CLOUDY;
constexpr StreamParams_AwbModeEnum StreamParams::TWILIGHT;
constexpr StreamParams_AwbModeEnum StreamParams::SHADE;
constexpr StreamParams_AwbModeEnum StreamParams::DARK;
constexpr StreamParams_AwbModeEnum StreamParams::AwbModeEnum_MIN;
constexpr StreamParams_AwbModeEnum StreamParams::AwbModeEnum_MAX;
constexpr int StreamParams::AwbModeEnum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void StreamParams_AwbMode::InitAsDefaultInstance() {
}
class StreamParams_AwbMode::_Internal {
 public:
};

StreamParams_AwbMode::StreamParams_AwbMode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.StreamParams.AwbMode)
}
StreamParams_AwbMode::StreamParams_AwbMode(const StreamParams_AwbMode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  awb_ = from.awb_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.StreamParams.AwbMode)
}

void StreamParams_AwbMode::SharedCtor() {
  awb_ = 0;
}

StreamParams_AwbMode::~StreamParams_AwbMode() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.StreamParams.AwbMode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StreamParams_AwbMode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StreamParams_AwbMode::ArenaDtor(void* object) {
  StreamParams_AwbMode* _this = reinterpret_cast< StreamParams_AwbMode* >(object);
  (void)_this;
}
void StreamParams_AwbMode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamParams_AwbMode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamParams_AwbMode& StreamParams_AwbMode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamParams_AwbMode_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto.base);
  return *internal_default_instance();
}


void StreamParams_AwbMode::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.StreamParams.AwbMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  awb_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamParams_AwbMode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.spot_cam.StreamParams.AwbModeEnum awb = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_awb(static_cast<::bosdyn::api::spot_cam::StreamParams_AwbModeEnum>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamParams_AwbMode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.StreamParams.AwbMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.spot_cam.StreamParams.AwbModeEnum awb = 1;
  if (this->awb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_awb(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.StreamParams.AwbMode)
  return target;
}

size_t StreamParams_AwbMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.StreamParams.AwbMode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.spot_cam.StreamParams.AwbModeEnum awb = 1;
  if (this->awb() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_awb());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamParams_AwbMode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.StreamParams.AwbMode)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamParams_AwbMode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamParams_AwbMode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.StreamParams.AwbMode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.StreamParams.AwbMode)
    MergeFrom(*source);
  }
}

void StreamParams_AwbMode::MergeFrom(const StreamParams_AwbMode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.StreamParams.AwbMode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.awb() != 0) {
    _internal_set_awb(from._internal_awb());
  }
}

void StreamParams_AwbMode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.StreamParams.AwbMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamParams_AwbMode::CopyFrom(const StreamParams_AwbMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.StreamParams.AwbMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamParams_AwbMode::IsInitialized() const {
  return true;
}

void StreamParams_AwbMode::InternalSwap(StreamParams_AwbMode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(awb_, other->awb_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamParams_AwbMode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamParams::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_StreamParams_default_instance_._instance.get_mutable()->targetbitrate_ = const_cast< PROTOBUF_NAMESPACE_ID::Int64Value*>(
      PROTOBUF_NAMESPACE_ID::Int64Value::internal_default_instance());
  ::bosdyn::api::spot_cam::_StreamParams_default_instance_._instance.get_mutable()->refreshinterval_ = const_cast< PROTOBUF_NAMESPACE_ID::Int64Value*>(
      PROTOBUF_NAMESPACE_ID::Int64Value::internal_default_instance());
  ::bosdyn::api::spot_cam::_StreamParams_default_instance_._instance.get_mutable()->idrinterval_ = const_cast< PROTOBUF_NAMESPACE_ID::Int64Value*>(
      PROTOBUF_NAMESPACE_ID::Int64Value::internal_default_instance());
  ::bosdyn::api::spot_cam::_StreamParams_default_instance_._instance.get_mutable()->awb_ = const_cast< ::bosdyn::api::spot_cam::StreamParams_AwbMode*>(
      ::bosdyn::api::spot_cam::StreamParams_AwbMode::internal_default_instance());
}
class StreamParams::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Int64Value& targetbitrate(const StreamParams* msg);
  static const PROTOBUF_NAMESPACE_ID::Int64Value& refreshinterval(const StreamParams* msg);
  static const PROTOBUF_NAMESPACE_ID::Int64Value& idrinterval(const StreamParams* msg);
  static const ::bosdyn::api::spot_cam::StreamParams_AwbMode& awb(const StreamParams* msg);
};

const PROTOBUF_NAMESPACE_ID::Int64Value&
StreamParams::_Internal::targetbitrate(const StreamParams* msg) {
  return *msg->targetbitrate_;
}
const PROTOBUF_NAMESPACE_ID::Int64Value&
StreamParams::_Internal::refreshinterval(const StreamParams* msg) {
  return *msg->refreshinterval_;
}
const PROTOBUF_NAMESPACE_ID::Int64Value&
StreamParams::_Internal::idrinterval(const StreamParams* msg) {
  return *msg->idrinterval_;
}
const ::bosdyn::api::spot_cam::StreamParams_AwbMode&
StreamParams::_Internal::awb(const StreamParams* msg) {
  return *msg->awb_;
}
void StreamParams::clear_targetbitrate() {
  if (GetArena() == nullptr && targetbitrate_ != nullptr) {
    delete targetbitrate_;
  }
  targetbitrate_ = nullptr;
}
void StreamParams::clear_refreshinterval() {
  if (GetArena() == nullptr && refreshinterval_ != nullptr) {
    delete refreshinterval_;
  }
  refreshinterval_ = nullptr;
}
void StreamParams::clear_idrinterval() {
  if (GetArena() == nullptr && idrinterval_ != nullptr) {
    delete idrinterval_;
  }
  idrinterval_ = nullptr;
}
StreamParams::StreamParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.StreamParams)
}
StreamParams::StreamParams(const StreamParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_targetbitrate()) {
    targetbitrate_ = new PROTOBUF_NAMESPACE_ID::Int64Value(*from.targetbitrate_);
  } else {
    targetbitrate_ = nullptr;
  }
  if (from._internal_has_refreshinterval()) {
    refreshinterval_ = new PROTOBUF_NAMESPACE_ID::Int64Value(*from.refreshinterval_);
  } else {
    refreshinterval_ = nullptr;
  }
  if (from._internal_has_idrinterval()) {
    idrinterval_ = new PROTOBUF_NAMESPACE_ID::Int64Value(*from.idrinterval_);
  } else {
    idrinterval_ = nullptr;
  }
  if (from._internal_has_awb()) {
    awb_ = new ::bosdyn::api::spot_cam::StreamParams_AwbMode(*from.awb_);
  } else {
    awb_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.StreamParams)
}

void StreamParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreamParams_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto.base);
  ::memset(&targetbitrate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&awb_) -
      reinterpret_cast<char*>(&targetbitrate_)) + sizeof(awb_));
}

StreamParams::~StreamParams() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.StreamParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StreamParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete targetbitrate_;
  if (this != internal_default_instance()) delete refreshinterval_;
  if (this != internal_default_instance()) delete idrinterval_;
  if (this != internal_default_instance()) delete awb_;
}

void StreamParams::ArenaDtor(void* object) {
  StreamParams* _this = reinterpret_cast< StreamParams* >(object);
  (void)_this;
}
void StreamParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamParams& StreamParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamParams_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto.base);
  return *internal_default_instance();
}


void StreamParams::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.StreamParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && targetbitrate_ != nullptr) {
    delete targetbitrate_;
  }
  targetbitrate_ = nullptr;
  if (GetArena() == nullptr && refreshinterval_ != nullptr) {
    delete refreshinterval_;
  }
  refreshinterval_ = nullptr;
  if (GetArena() == nullptr && idrinterval_ != nullptr) {
    delete idrinterval_;
  }
  idrinterval_ = nullptr;
  if (GetArena() == nullptr && awb_ != nullptr) {
    delete awb_;
  }
  awb_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Int64Value targetbitrate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_targetbitrate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Int64Value refreshinterval = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_refreshinterval(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Int64Value idrinterval = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_idrinterval(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.spot_cam.StreamParams.AwbMode awb = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_awb(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.StreamParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Int64Value targetbitrate = 1;
  if (this->has_targetbitrate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::targetbitrate(this), target, stream);
  }

  // .google.protobuf.Int64Value refreshinterval = 2;
  if (this->has_refreshinterval()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::refreshinterval(this), target, stream);
  }

  // .google.protobuf.Int64Value idrinterval = 3;
  if (this->has_idrinterval()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::idrinterval(this), target, stream);
  }

  // .bosdyn.api.spot_cam.StreamParams.AwbMode awb = 4;
  if (this->has_awb()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::awb(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.StreamParams)
  return target;
}

size_t StreamParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.StreamParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Int64Value targetbitrate = 1;
  if (this->has_targetbitrate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *targetbitrate_);
  }

  // .google.protobuf.Int64Value refreshinterval = 2;
  if (this->has_refreshinterval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *refreshinterval_);
  }

  // .google.protobuf.Int64Value idrinterval = 3;
  if (this->has_idrinterval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *idrinterval_);
  }

  // .bosdyn.api.spot_cam.StreamParams.AwbMode awb = 4;
  if (this->has_awb()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *awb_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.StreamParams)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.StreamParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.StreamParams)
    MergeFrom(*source);
  }
}

void StreamParams::MergeFrom(const StreamParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.StreamParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_targetbitrate()) {
    _internal_mutable_targetbitrate()->PROTOBUF_NAMESPACE_ID::Int64Value::MergeFrom(from._internal_targetbitrate());
  }
  if (from.has_refreshinterval()) {
    _internal_mutable_refreshinterval()->PROTOBUF_NAMESPACE_ID::Int64Value::MergeFrom(from._internal_refreshinterval());
  }
  if (from.has_idrinterval()) {
    _internal_mutable_idrinterval()->PROTOBUF_NAMESPACE_ID::Int64Value::MergeFrom(from._internal_idrinterval());
  }
  if (from.has_awb()) {
    _internal_mutable_awb()->::bosdyn::api::spot_cam::StreamParams_AwbMode::MergeFrom(from._internal_awb());
  }
}

void StreamParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.StreamParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamParams::CopyFrom(const StreamParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.StreamParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamParams::IsInitialized() const {
  return true;
}

void StreamParams::InternalSwap(StreamParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamParams, awb_)
      + sizeof(StreamParams::awb_)
      - PROTOBUF_FIELD_OFFSET(StreamParams, targetbitrate_)>(
          reinterpret_cast<char*>(&targetbitrate_),
          reinterpret_cast<char*>(&other->targetbitrate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetStreamParamsRequest::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_GetStreamParamsRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
}
class GetStreamParamsRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const GetStreamParamsRequest* msg);
};

const ::bosdyn::api::RequestHeader&
GetStreamParamsRequest::_Internal::header(const GetStreamParamsRequest* msg) {
  return *msg->header_;
}
void GetStreamParamsRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
GetStreamParamsRequest::GetStreamParamsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.GetStreamParamsRequest)
}
GetStreamParamsRequest::GetStreamParamsRequest(const GetStreamParamsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.GetStreamParamsRequest)
}

void GetStreamParamsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetStreamParamsRequest_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto.base);
  header_ = nullptr;
}

GetStreamParamsRequest::~GetStreamParamsRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.GetStreamParamsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetStreamParamsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void GetStreamParamsRequest::ArenaDtor(void* object) {
  GetStreamParamsRequest* _this = reinterpret_cast< GetStreamParamsRequest* >(object);
  (void)_this;
}
void GetStreamParamsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetStreamParamsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetStreamParamsRequest& GetStreamParamsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetStreamParamsRequest_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto.base);
  return *internal_default_instance();
}


void GetStreamParamsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.GetStreamParamsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetStreamParamsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetStreamParamsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.GetStreamParamsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.GetStreamParamsRequest)
  return target;
}

size_t GetStreamParamsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.GetStreamParamsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetStreamParamsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.GetStreamParamsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStreamParamsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetStreamParamsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.GetStreamParamsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.GetStreamParamsRequest)
    MergeFrom(*source);
  }
}

void GetStreamParamsRequest::MergeFrom(const GetStreamParamsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.GetStreamParamsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
}

void GetStreamParamsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.GetStreamParamsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStreamParamsRequest::CopyFrom(const GetStreamParamsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.GetStreamParamsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStreamParamsRequest::IsInitialized() const {
  return true;
}

void GetStreamParamsRequest::InternalSwap(GetStreamParamsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStreamParamsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetStreamParamsResponse::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_GetStreamParamsResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
  ::bosdyn::api::spot_cam::_GetStreamParamsResponse_default_instance_._instance.get_mutable()->params_ = const_cast< ::bosdyn::api::spot_cam::StreamParams*>(
      ::bosdyn::api::spot_cam::StreamParams::internal_default_instance());
}
class GetStreamParamsResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const GetStreamParamsResponse* msg);
  static const ::bosdyn::api::spot_cam::StreamParams& params(const GetStreamParamsResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
GetStreamParamsResponse::_Internal::header(const GetStreamParamsResponse* msg) {
  return *msg->header_;
}
const ::bosdyn::api::spot_cam::StreamParams&
GetStreamParamsResponse::_Internal::params(const GetStreamParamsResponse* msg) {
  return *msg->params_;
}
void GetStreamParamsResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
GetStreamParamsResponse::GetStreamParamsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.GetStreamParamsResponse)
}
GetStreamParamsResponse::GetStreamParamsResponse(const GetStreamParamsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_params()) {
    params_ = new ::bosdyn::api::spot_cam::StreamParams(*from.params_);
  } else {
    params_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.GetStreamParamsResponse)
}

void GetStreamParamsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetStreamParamsResponse_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&params_) -
      reinterpret_cast<char*>(&header_)) + sizeof(params_));
}

GetStreamParamsResponse::~GetStreamParamsResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.GetStreamParamsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetStreamParamsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete params_;
}

void GetStreamParamsResponse::ArenaDtor(void* object) {
  GetStreamParamsResponse* _this = reinterpret_cast< GetStreamParamsResponse* >(object);
  (void)_this;
}
void GetStreamParamsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetStreamParamsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetStreamParamsResponse& GetStreamParamsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetStreamParamsResponse_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto.base);
  return *internal_default_instance();
}


void GetStreamParamsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.GetStreamParamsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && params_ != nullptr) {
    delete params_;
  }
  params_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetStreamParamsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.spot_cam.StreamParams params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetStreamParamsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.GetStreamParamsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.spot_cam.StreamParams params = 2;
  if (this->has_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::params(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.GetStreamParamsResponse)
  return target;
}

size_t GetStreamParamsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.GetStreamParamsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.spot_cam.StreamParams params = 2;
  if (this->has_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *params_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetStreamParamsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.GetStreamParamsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStreamParamsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetStreamParamsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.GetStreamParamsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.GetStreamParamsResponse)
    MergeFrom(*source);
  }
}

void GetStreamParamsResponse::MergeFrom(const GetStreamParamsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.GetStreamParamsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.has_params()) {
    _internal_mutable_params()->::bosdyn::api::spot_cam::StreamParams::MergeFrom(from._internal_params());
  }
}

void GetStreamParamsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.GetStreamParamsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStreamParamsResponse::CopyFrom(const GetStreamParamsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.GetStreamParamsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStreamParamsResponse::IsInitialized() const {
  return true;
}

void GetStreamParamsResponse::InternalSwap(GetStreamParamsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetStreamParamsResponse, params_)
      + sizeof(GetStreamParamsResponse::params_)
      - PROTOBUF_FIELD_OFFSET(GetStreamParamsResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStreamParamsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetStreamParamsRequest::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_SetStreamParamsRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
  ::bosdyn::api::spot_cam::_SetStreamParamsRequest_default_instance_._instance.get_mutable()->params_ = const_cast< ::bosdyn::api::spot_cam::StreamParams*>(
      ::bosdyn::api::spot_cam::StreamParams::internal_default_instance());
}
class SetStreamParamsRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const SetStreamParamsRequest* msg);
  static const ::bosdyn::api::spot_cam::StreamParams& params(const SetStreamParamsRequest* msg);
};

const ::bosdyn::api::RequestHeader&
SetStreamParamsRequest::_Internal::header(const SetStreamParamsRequest* msg) {
  return *msg->header_;
}
const ::bosdyn::api::spot_cam::StreamParams&
SetStreamParamsRequest::_Internal::params(const SetStreamParamsRequest* msg) {
  return *msg->params_;
}
void SetStreamParamsRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
SetStreamParamsRequest::SetStreamParamsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.SetStreamParamsRequest)
}
SetStreamParamsRequest::SetStreamParamsRequest(const SetStreamParamsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_params()) {
    params_ = new ::bosdyn::api::spot_cam::StreamParams(*from.params_);
  } else {
    params_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.SetStreamParamsRequest)
}

void SetStreamParamsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetStreamParamsRequest_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&params_) -
      reinterpret_cast<char*>(&header_)) + sizeof(params_));
}

SetStreamParamsRequest::~SetStreamParamsRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.SetStreamParamsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetStreamParamsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete params_;
}

void SetStreamParamsRequest::ArenaDtor(void* object) {
  SetStreamParamsRequest* _this = reinterpret_cast< SetStreamParamsRequest* >(object);
  (void)_this;
}
void SetStreamParamsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetStreamParamsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetStreamParamsRequest& SetStreamParamsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetStreamParamsRequest_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto.base);
  return *internal_default_instance();
}


void SetStreamParamsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.SetStreamParamsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && params_ != nullptr) {
    delete params_;
  }
  params_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetStreamParamsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.spot_cam.StreamParams params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetStreamParamsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.SetStreamParamsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.spot_cam.StreamParams params = 2;
  if (this->has_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::params(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.SetStreamParamsRequest)
  return target;
}

size_t SetStreamParamsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.SetStreamParamsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.spot_cam.StreamParams params = 2;
  if (this->has_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *params_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetStreamParamsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.SetStreamParamsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetStreamParamsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetStreamParamsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.SetStreamParamsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.SetStreamParamsRequest)
    MergeFrom(*source);
  }
}

void SetStreamParamsRequest::MergeFrom(const SetStreamParamsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.SetStreamParamsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
  if (from.has_params()) {
    _internal_mutable_params()->::bosdyn::api::spot_cam::StreamParams::MergeFrom(from._internal_params());
  }
}

void SetStreamParamsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.SetStreamParamsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetStreamParamsRequest::CopyFrom(const SetStreamParamsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.SetStreamParamsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetStreamParamsRequest::IsInitialized() const {
  return true;
}

void SetStreamParamsRequest::InternalSwap(SetStreamParamsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetStreamParamsRequest, params_)
      + sizeof(SetStreamParamsRequest::params_)
      - PROTOBUF_FIELD_OFFSET(SetStreamParamsRequest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetStreamParamsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetStreamParamsResponse::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_SetStreamParamsResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
  ::bosdyn::api::spot_cam::_SetStreamParamsResponse_default_instance_._instance.get_mutable()->params_ = const_cast< ::bosdyn::api::spot_cam::StreamParams*>(
      ::bosdyn::api::spot_cam::StreamParams::internal_default_instance());
}
class SetStreamParamsResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const SetStreamParamsResponse* msg);
  static const ::bosdyn::api::spot_cam::StreamParams& params(const SetStreamParamsResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
SetStreamParamsResponse::_Internal::header(const SetStreamParamsResponse* msg) {
  return *msg->header_;
}
const ::bosdyn::api::spot_cam::StreamParams&
SetStreamParamsResponse::_Internal::params(const SetStreamParamsResponse* msg) {
  return *msg->params_;
}
void SetStreamParamsResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
SetStreamParamsResponse::SetStreamParamsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.SetStreamParamsResponse)
}
SetStreamParamsResponse::SetStreamParamsResponse(const SetStreamParamsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_params()) {
    params_ = new ::bosdyn::api::spot_cam::StreamParams(*from.params_);
  } else {
    params_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.SetStreamParamsResponse)
}

void SetStreamParamsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetStreamParamsResponse_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&params_) -
      reinterpret_cast<char*>(&header_)) + sizeof(params_));
}

SetStreamParamsResponse::~SetStreamParamsResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.SetStreamParamsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetStreamParamsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete params_;
}

void SetStreamParamsResponse::ArenaDtor(void* object) {
  SetStreamParamsResponse* _this = reinterpret_cast< SetStreamParamsResponse* >(object);
  (void)_this;
}
void SetStreamParamsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetStreamParamsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetStreamParamsResponse& SetStreamParamsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetStreamParamsResponse_bosdyn_2fapi_2fspot_5fcam_2fstreamquality_2eproto.base);
  return *internal_default_instance();
}


void SetStreamParamsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.SetStreamParamsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && params_ != nullptr) {
    delete params_;
  }
  params_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetStreamParamsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.spot_cam.StreamParams params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetStreamParamsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.SetStreamParamsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.spot_cam.StreamParams params = 2;
  if (this->has_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::params(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.SetStreamParamsResponse)
  return target;
}

size_t SetStreamParamsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.SetStreamParamsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.spot_cam.StreamParams params = 2;
  if (this->has_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *params_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetStreamParamsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.SetStreamParamsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetStreamParamsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetStreamParamsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.SetStreamParamsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.SetStreamParamsResponse)
    MergeFrom(*source);
  }
}

void SetStreamParamsResponse::MergeFrom(const SetStreamParamsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.SetStreamParamsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.has_params()) {
    _internal_mutable_params()->::bosdyn::api::spot_cam::StreamParams::MergeFrom(from._internal_params());
  }
}

void SetStreamParamsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.SetStreamParamsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetStreamParamsResponse::CopyFrom(const SetStreamParamsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.SetStreamParamsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetStreamParamsResponse::IsInitialized() const {
  return true;
}

void SetStreamParamsResponse::InternalSwap(SetStreamParamsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetStreamParamsResponse, params_)
      + sizeof(SetStreamParamsResponse::params_)
      - PROTOBUF_FIELD_OFFSET(SetStreamParamsResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetStreamParamsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace spot_cam
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::StreamParams_AwbMode* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::StreamParams_AwbMode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::StreamParams_AwbMode >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::StreamParams* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::StreamParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::StreamParams >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::GetStreamParamsRequest* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::GetStreamParamsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::GetStreamParamsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::GetStreamParamsResponse* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::GetStreamParamsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::GetStreamParamsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::SetStreamParamsRequest* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::SetStreamParamsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::SetStreamParamsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::SetStreamParamsResponse* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::SetStreamParamsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::SetStreamParamsResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
