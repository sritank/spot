// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/spot_cam/network.proto

#include "bosdyn/api/spot_cam/network.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ICEServer_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NetworkTuple_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UInt32Value_google_2fprotobuf_2fwrappers_2eproto;
namespace bosdyn {
namespace api {
namespace spot_cam {
class NetworkTupleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetworkTuple> _instance;
} _NetworkTuple_default_instance_;
class GetNetworkSettingsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetNetworkSettingsRequest> _instance;
} _GetNetworkSettingsRequest_default_instance_;
class GetNetworkSettingsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetNetworkSettingsResponse> _instance;
} _GetNetworkSettingsResponse_default_instance_;
class GetSSLCertRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetSSLCertRequest> _instance;
} _GetSSLCertRequest_default_instance_;
class GetSSLCertResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetSSLCertResponse> _instance;
} _GetSSLCertResponse_default_instance_;
class ICEServerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ICEServer> _instance;
} _ICEServer_default_instance_;
class GetICEConfigurationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetICEConfigurationRequest> _instance;
} _GetICEConfigurationRequest_default_instance_;
class GetICEConfigurationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetICEConfigurationResponse> _instance;
} _GetICEConfigurationResponse_default_instance_;
class SetICEConfigurationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetICEConfigurationRequest> _instance;
} _SetICEConfigurationRequest_default_instance_;
class SetICEConfigurationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetICEConfigurationResponse> _instance;
} _SetICEConfigurationResponse_default_instance_;
}  // namespace spot_cam
}  // namespace api
}  // namespace bosdyn
static void InitDefaultsscc_info_GetICEConfigurationRequest_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_GetICEConfigurationRequest_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::GetICEConfigurationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::GetICEConfigurationRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetICEConfigurationRequest_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetICEConfigurationRequest_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_GetICEConfigurationResponse_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_GetICEConfigurationResponse_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::GetICEConfigurationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::GetICEConfigurationResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetICEConfigurationResponse_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetICEConfigurationResponse_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_ICEServer_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto.base,}};

static void InitDefaultsscc_info_GetNetworkSettingsRequest_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_GetNetworkSettingsRequest_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::GetNetworkSettingsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::GetNetworkSettingsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetNetworkSettingsRequest_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetNetworkSettingsRequest_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_GetNetworkSettingsResponse_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_GetNetworkSettingsResponse_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::GetNetworkSettingsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::GetNetworkSettingsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetNetworkSettingsResponse_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetNetworkSettingsResponse_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_NetworkTuple_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto.base,}};

static void InitDefaultsscc_info_GetSSLCertRequest_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_GetSSLCertRequest_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::GetSSLCertRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::GetSSLCertRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetSSLCertRequest_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetSSLCertRequest_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_GetSSLCertResponse_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_GetSSLCertResponse_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::GetSSLCertResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::GetSSLCertResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetSSLCertResponse_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetSSLCertResponse_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_ICEServer_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_ICEServer_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::ICEServer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::ICEServer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ICEServer_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ICEServer_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto}, {}};

static void InitDefaultsscc_info_NetworkTuple_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_NetworkTuple_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::NetworkTuple();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::NetworkTuple::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NetworkTuple_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NetworkTuple_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto}, {
      &scc_info_UInt32Value_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_SetICEConfigurationRequest_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_SetICEConfigurationRequest_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::SetICEConfigurationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::SetICEConfigurationRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SetICEConfigurationRequest_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SetICEConfigurationRequest_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_ICEServer_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto.base,}};

static void InitDefaultsscc_info_SetICEConfigurationResponse_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_SetICEConfigurationResponse_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::SetICEConfigurationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::SetICEConfigurationResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetICEConfigurationResponse_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetICEConfigurationResponse_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::NetworkTuple, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::NetworkTuple, address_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::NetworkTuple, netmask_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::NetworkTuple, gateway_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::NetworkTuple, mtu_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetNetworkSettingsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetNetworkSettingsRequest, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetNetworkSettingsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetNetworkSettingsResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetNetworkSettingsResponse, settings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetSSLCertRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetSSLCertRequest, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetSSLCertResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetSSLCertResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetSSLCertResponse, certificate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::ICEServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::ICEServer, type_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::ICEServer, address_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::ICEServer, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetICEConfigurationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetICEConfigurationRequest, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetICEConfigurationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetICEConfigurationResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetICEConfigurationResponse, servers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::SetICEConfigurationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::SetICEConfigurationRequest, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::SetICEConfigurationRequest, servers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::SetICEConfigurationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::SetICEConfigurationResponse, header_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::bosdyn::api::spot_cam::NetworkTuple)},
  { 9, -1, sizeof(::bosdyn::api::spot_cam::GetNetworkSettingsRequest)},
  { 15, -1, sizeof(::bosdyn::api::spot_cam::GetNetworkSettingsResponse)},
  { 22, -1, sizeof(::bosdyn::api::spot_cam::GetSSLCertRequest)},
  { 28, -1, sizeof(::bosdyn::api::spot_cam::GetSSLCertResponse)},
  { 35, -1, sizeof(::bosdyn::api::spot_cam::ICEServer)},
  { 43, -1, sizeof(::bosdyn::api::spot_cam::GetICEConfigurationRequest)},
  { 49, -1, sizeof(::bosdyn::api::spot_cam::GetICEConfigurationResponse)},
  { 56, -1, sizeof(::bosdyn::api::spot_cam::SetICEConfigurationRequest)},
  { 63, -1, sizeof(::bosdyn::api::spot_cam::SetICEConfigurationResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_NetworkTuple_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_GetNetworkSettingsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_GetNetworkSettingsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_GetSSLCertRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_GetSSLCertResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_ICEServer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_GetICEConfigurationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_GetICEConfigurationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_SetICEConfigurationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_SetICEConfigurationResponse_default_instance_),
};

const char descriptor_table_protodef_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!bosdyn/api/spot_cam/network.proto\022\023bos"
  "dyn.api.spot_cam\032\027bosdyn/api/header.prot"
  "o\032\036google/protobuf/wrappers.proto\"\306\001\n\014Ne"
  "tworkTuple\022-\n\007address\030\002 \001(\0132\034.google.pro"
  "tobuf.UInt32Value\022-\n\007netmask\030\003 \001(\0132\034.goo"
  "gle.protobuf.UInt32Value\022-\n\007gateway\030\004 \001("
  "\0132\034.google.protobuf.UInt32Value\022)\n\003mtu\030\005"
  " \001(\0132\034.google.protobuf.UInt32Value\"F\n\031Ge"
  "tNetworkSettingsRequest\022)\n\006header\030\001 \001(\0132"
  "\031.bosdyn.api.RequestHeader\"}\n\032GetNetwork"
  "SettingsResponse\022*\n\006header\030\001 \001(\0132\032.bosdy"
  "n.api.ResponseHeader\0223\n\010settings\030\002 \001(\0132!"
  ".bosdyn.api.spot_cam.NetworkTuple\">\n\021Get"
  "SSLCertRequest\022)\n\006header\030\001 \001(\0132\031.bosdyn."
  "api.RequestHeader\"U\n\022GetSSLCertResponse\022"
  "*\n\006header\030\001 \001(\0132\032.bosdyn.api.ResponseHea"
  "der\022\023\n\013certificate\030\002 \001(\t\"\222\001\n\tICEServer\0227"
  "\n\004type\030\001 \001(\0162).bosdyn.api.spot_cam.ICESe"
  "rver.servertype\022\017\n\007address\030\002 \001(\t\022\014\n\004port"
  "\030\003 \001(\r\"-\n\nservertype\022\013\n\007UNKNOWN\020\000\022\010\n\004STU"
  "N\020\001\022\010\n\004TURN\020\002\"G\n\032GetICEConfigurationRequ"
  "est\022)\n\006header\030\001 \001(\0132\031.bosdyn.api.Request"
  "Header\"z\n\033GetICEConfigurationResponse\022*\n"
  "\006header\030\001 \001(\0132\032.bosdyn.api.ResponseHeade"
  "r\022/\n\007servers\030\002 \003(\0132\036.bosdyn.api.spot_cam"
  ".ICEServer\"x\n\032SetICEConfigurationRequest"
  "\022)\n\006header\030\001 \001(\0132\031.bosdyn.api.RequestHea"
  "der\022/\n\007servers\030\002 \003(\0132\036.bosdyn.api.spot_c"
  "am.ICEServer\"I\n\033SetICEConfigurationRespo"
  "nse\022*\n\006header\030\001 \001(\0132\032.bosdyn.api.Respons"
  "eHeaderB\016B\014NetworkProtob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto_deps[2] = {
  &::descriptor_table_bosdyn_2fapi_2fheader_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto_sccs[10] = {
  &scc_info_GetICEConfigurationRequest_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto.base,
  &scc_info_GetICEConfigurationResponse_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto.base,
  &scc_info_GetNetworkSettingsRequest_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto.base,
  &scc_info_GetNetworkSettingsResponse_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto.base,
  &scc_info_GetSSLCertRequest_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto.base,
  &scc_info_GetSSLCertResponse_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto.base,
  &scc_info_ICEServer_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto.base,
  &scc_info_NetworkTuple_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto.base,
  &scc_info_SetICEConfigurationRequest_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto.base,
  &scc_info_SetICEConfigurationResponse_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto = {
  false, false, descriptor_table_protodef_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto, "bosdyn/api/spot_cam/network.proto", 1231,
  &descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto_once, descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto_sccs, descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto_deps, 10, 2,
  schemas, file_default_instances, TableStruct_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto::offsets,
  file_level_metadata_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto, 10, file_level_enum_descriptors_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto, file_level_service_descriptors_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto)), true);
namespace bosdyn {
namespace api {
namespace spot_cam {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ICEServer_servertype_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto[0];
}
bool ICEServer_servertype_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ICEServer_servertype ICEServer::UNKNOWN;
constexpr ICEServer_servertype ICEServer::STUN;
constexpr ICEServer_servertype ICEServer::TURN;
constexpr ICEServer_servertype ICEServer::servertype_MIN;
constexpr ICEServer_servertype ICEServer::servertype_MAX;
constexpr int ICEServer::servertype_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void NetworkTuple::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_NetworkTuple_default_instance_._instance.get_mutable()->address_ = const_cast< PROTOBUF_NAMESPACE_ID::UInt32Value*>(
      PROTOBUF_NAMESPACE_ID::UInt32Value::internal_default_instance());
  ::bosdyn::api::spot_cam::_NetworkTuple_default_instance_._instance.get_mutable()->netmask_ = const_cast< PROTOBUF_NAMESPACE_ID::UInt32Value*>(
      PROTOBUF_NAMESPACE_ID::UInt32Value::internal_default_instance());
  ::bosdyn::api::spot_cam::_NetworkTuple_default_instance_._instance.get_mutable()->gateway_ = const_cast< PROTOBUF_NAMESPACE_ID::UInt32Value*>(
      PROTOBUF_NAMESPACE_ID::UInt32Value::internal_default_instance());
  ::bosdyn::api::spot_cam::_NetworkTuple_default_instance_._instance.get_mutable()->mtu_ = const_cast< PROTOBUF_NAMESPACE_ID::UInt32Value*>(
      PROTOBUF_NAMESPACE_ID::UInt32Value::internal_default_instance());
}
class NetworkTuple::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::UInt32Value& address(const NetworkTuple* msg);
  static const PROTOBUF_NAMESPACE_ID::UInt32Value& netmask(const NetworkTuple* msg);
  static const PROTOBUF_NAMESPACE_ID::UInt32Value& gateway(const NetworkTuple* msg);
  static const PROTOBUF_NAMESPACE_ID::UInt32Value& mtu(const NetworkTuple* msg);
};

const PROTOBUF_NAMESPACE_ID::UInt32Value&
NetworkTuple::_Internal::address(const NetworkTuple* msg) {
  return *msg->address_;
}
const PROTOBUF_NAMESPACE_ID::UInt32Value&
NetworkTuple::_Internal::netmask(const NetworkTuple* msg) {
  return *msg->netmask_;
}
const PROTOBUF_NAMESPACE_ID::UInt32Value&
NetworkTuple::_Internal::gateway(const NetworkTuple* msg) {
  return *msg->gateway_;
}
const PROTOBUF_NAMESPACE_ID::UInt32Value&
NetworkTuple::_Internal::mtu(const NetworkTuple* msg) {
  return *msg->mtu_;
}
void NetworkTuple::clear_address() {
  if (GetArena() == nullptr && address_ != nullptr) {
    delete address_;
  }
  address_ = nullptr;
}
void NetworkTuple::clear_netmask() {
  if (GetArena() == nullptr && netmask_ != nullptr) {
    delete netmask_;
  }
  netmask_ = nullptr;
}
void NetworkTuple::clear_gateway() {
  if (GetArena() == nullptr && gateway_ != nullptr) {
    delete gateway_;
  }
  gateway_ = nullptr;
}
void NetworkTuple::clear_mtu() {
  if (GetArena() == nullptr && mtu_ != nullptr) {
    delete mtu_;
  }
  mtu_ = nullptr;
}
NetworkTuple::NetworkTuple(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.NetworkTuple)
}
NetworkTuple::NetworkTuple(const NetworkTuple& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_address()) {
    address_ = new PROTOBUF_NAMESPACE_ID::UInt32Value(*from.address_);
  } else {
    address_ = nullptr;
  }
  if (from._internal_has_netmask()) {
    netmask_ = new PROTOBUF_NAMESPACE_ID::UInt32Value(*from.netmask_);
  } else {
    netmask_ = nullptr;
  }
  if (from._internal_has_gateway()) {
    gateway_ = new PROTOBUF_NAMESPACE_ID::UInt32Value(*from.gateway_);
  } else {
    gateway_ = nullptr;
  }
  if (from._internal_has_mtu()) {
    mtu_ = new PROTOBUF_NAMESPACE_ID::UInt32Value(*from.mtu_);
  } else {
    mtu_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.NetworkTuple)
}

void NetworkTuple::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetworkTuple_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto.base);
  ::memset(&address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mtu_) -
      reinterpret_cast<char*>(&address_)) + sizeof(mtu_));
}

NetworkTuple::~NetworkTuple() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.NetworkTuple)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NetworkTuple::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete address_;
  if (this != internal_default_instance()) delete netmask_;
  if (this != internal_default_instance()) delete gateway_;
  if (this != internal_default_instance()) delete mtu_;
}

void NetworkTuple::ArenaDtor(void* object) {
  NetworkTuple* _this = reinterpret_cast< NetworkTuple* >(object);
  (void)_this;
}
void NetworkTuple::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetworkTuple::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkTuple& NetworkTuple::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetworkTuple_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto.base);
  return *internal_default_instance();
}


void NetworkTuple::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.NetworkTuple)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && address_ != nullptr) {
    delete address_;
  }
  address_ = nullptr;
  if (GetArena() == nullptr && netmask_ != nullptr) {
    delete netmask_;
  }
  netmask_ = nullptr;
  if (GetArena() == nullptr && gateway_ != nullptr) {
    delete gateway_;
  }
  gateway_ = nullptr;
  if (GetArena() == nullptr && mtu_ != nullptr) {
    delete mtu_;
  }
  mtu_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetworkTuple::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.UInt32Value address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_address(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value netmask = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_netmask(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value gateway = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_gateway(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.UInt32Value mtu = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_mtu(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetworkTuple::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.NetworkTuple)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.UInt32Value address = 2;
  if (this->has_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::address(this), target, stream);
  }

  // .google.protobuf.UInt32Value netmask = 3;
  if (this->has_netmask()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::netmask(this), target, stream);
  }

  // .google.protobuf.UInt32Value gateway = 4;
  if (this->has_gateway()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::gateway(this), target, stream);
  }

  // .google.protobuf.UInt32Value mtu = 5;
  if (this->has_mtu()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::mtu(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.NetworkTuple)
  return target;
}

size_t NetworkTuple::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.NetworkTuple)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.UInt32Value address = 2;
  if (this->has_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *address_);
  }

  // .google.protobuf.UInt32Value netmask = 3;
  if (this->has_netmask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *netmask_);
  }

  // .google.protobuf.UInt32Value gateway = 4;
  if (this->has_gateway()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gateway_);
  }

  // .google.protobuf.UInt32Value mtu = 5;
  if (this->has_mtu()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mtu_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkTuple::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.NetworkTuple)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkTuple* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetworkTuple>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.NetworkTuple)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.NetworkTuple)
    MergeFrom(*source);
  }
}

void NetworkTuple::MergeFrom(const NetworkTuple& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.NetworkTuple)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_address()) {
    _internal_mutable_address()->PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_address());
  }
  if (from.has_netmask()) {
    _internal_mutable_netmask()->PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_netmask());
  }
  if (from.has_gateway()) {
    _internal_mutable_gateway()->PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_gateway());
  }
  if (from.has_mtu()) {
    _internal_mutable_mtu()->PROTOBUF_NAMESPACE_ID::UInt32Value::MergeFrom(from._internal_mtu());
  }
}

void NetworkTuple::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.NetworkTuple)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkTuple::CopyFrom(const NetworkTuple& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.NetworkTuple)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkTuple::IsInitialized() const {
  return true;
}

void NetworkTuple::InternalSwap(NetworkTuple* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetworkTuple, mtu_)
      + sizeof(NetworkTuple::mtu_)
      - PROTOBUF_FIELD_OFFSET(NetworkTuple, address_)>(
          reinterpret_cast<char*>(&address_),
          reinterpret_cast<char*>(&other->address_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkTuple::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetNetworkSettingsRequest::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_GetNetworkSettingsRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
}
class GetNetworkSettingsRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const GetNetworkSettingsRequest* msg);
};

const ::bosdyn::api::RequestHeader&
GetNetworkSettingsRequest::_Internal::header(const GetNetworkSettingsRequest* msg) {
  return *msg->header_;
}
void GetNetworkSettingsRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
GetNetworkSettingsRequest::GetNetworkSettingsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.GetNetworkSettingsRequest)
}
GetNetworkSettingsRequest::GetNetworkSettingsRequest(const GetNetworkSettingsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.GetNetworkSettingsRequest)
}

void GetNetworkSettingsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetNetworkSettingsRequest_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto.base);
  header_ = nullptr;
}

GetNetworkSettingsRequest::~GetNetworkSettingsRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.GetNetworkSettingsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetNetworkSettingsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void GetNetworkSettingsRequest::ArenaDtor(void* object) {
  GetNetworkSettingsRequest* _this = reinterpret_cast< GetNetworkSettingsRequest* >(object);
  (void)_this;
}
void GetNetworkSettingsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetNetworkSettingsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetNetworkSettingsRequest& GetNetworkSettingsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetNetworkSettingsRequest_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto.base);
  return *internal_default_instance();
}


void GetNetworkSettingsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.GetNetworkSettingsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetNetworkSettingsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetNetworkSettingsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.GetNetworkSettingsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.GetNetworkSettingsRequest)
  return target;
}

size_t GetNetworkSettingsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.GetNetworkSettingsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetNetworkSettingsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.GetNetworkSettingsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNetworkSettingsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetNetworkSettingsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.GetNetworkSettingsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.GetNetworkSettingsRequest)
    MergeFrom(*source);
  }
}

void GetNetworkSettingsRequest::MergeFrom(const GetNetworkSettingsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.GetNetworkSettingsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
}

void GetNetworkSettingsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.GetNetworkSettingsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNetworkSettingsRequest::CopyFrom(const GetNetworkSettingsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.GetNetworkSettingsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNetworkSettingsRequest::IsInitialized() const {
  return true;
}

void GetNetworkSettingsRequest::InternalSwap(GetNetworkSettingsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNetworkSettingsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetNetworkSettingsResponse::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_GetNetworkSettingsResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
  ::bosdyn::api::spot_cam::_GetNetworkSettingsResponse_default_instance_._instance.get_mutable()->settings_ = const_cast< ::bosdyn::api::spot_cam::NetworkTuple*>(
      ::bosdyn::api::spot_cam::NetworkTuple::internal_default_instance());
}
class GetNetworkSettingsResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const GetNetworkSettingsResponse* msg);
  static const ::bosdyn::api::spot_cam::NetworkTuple& settings(const GetNetworkSettingsResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
GetNetworkSettingsResponse::_Internal::header(const GetNetworkSettingsResponse* msg) {
  return *msg->header_;
}
const ::bosdyn::api::spot_cam::NetworkTuple&
GetNetworkSettingsResponse::_Internal::settings(const GetNetworkSettingsResponse* msg) {
  return *msg->settings_;
}
void GetNetworkSettingsResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
GetNetworkSettingsResponse::GetNetworkSettingsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.GetNetworkSettingsResponse)
}
GetNetworkSettingsResponse::GetNetworkSettingsResponse(const GetNetworkSettingsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_settings()) {
    settings_ = new ::bosdyn::api::spot_cam::NetworkTuple(*from.settings_);
  } else {
    settings_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.GetNetworkSettingsResponse)
}

void GetNetworkSettingsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetNetworkSettingsResponse_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&settings_) -
      reinterpret_cast<char*>(&header_)) + sizeof(settings_));
}

GetNetworkSettingsResponse::~GetNetworkSettingsResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.GetNetworkSettingsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetNetworkSettingsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete settings_;
}

void GetNetworkSettingsResponse::ArenaDtor(void* object) {
  GetNetworkSettingsResponse* _this = reinterpret_cast< GetNetworkSettingsResponse* >(object);
  (void)_this;
}
void GetNetworkSettingsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetNetworkSettingsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetNetworkSettingsResponse& GetNetworkSettingsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetNetworkSettingsResponse_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto.base);
  return *internal_default_instance();
}


void GetNetworkSettingsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.GetNetworkSettingsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetNetworkSettingsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.spot_cam.NetworkTuple settings = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetNetworkSettingsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.GetNetworkSettingsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.spot_cam.NetworkTuple settings = 2;
  if (this->has_settings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::settings(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.GetNetworkSettingsResponse)
  return target;
}

size_t GetNetworkSettingsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.GetNetworkSettingsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.spot_cam.NetworkTuple settings = 2;
  if (this->has_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *settings_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetNetworkSettingsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.GetNetworkSettingsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNetworkSettingsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetNetworkSettingsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.GetNetworkSettingsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.GetNetworkSettingsResponse)
    MergeFrom(*source);
  }
}

void GetNetworkSettingsResponse::MergeFrom(const GetNetworkSettingsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.GetNetworkSettingsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.has_settings()) {
    _internal_mutable_settings()->::bosdyn::api::spot_cam::NetworkTuple::MergeFrom(from._internal_settings());
  }
}

void GetNetworkSettingsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.GetNetworkSettingsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNetworkSettingsResponse::CopyFrom(const GetNetworkSettingsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.GetNetworkSettingsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNetworkSettingsResponse::IsInitialized() const {
  return true;
}

void GetNetworkSettingsResponse::InternalSwap(GetNetworkSettingsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetNetworkSettingsResponse, settings_)
      + sizeof(GetNetworkSettingsResponse::settings_)
      - PROTOBUF_FIELD_OFFSET(GetNetworkSettingsResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNetworkSettingsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetSSLCertRequest::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_GetSSLCertRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
}
class GetSSLCertRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const GetSSLCertRequest* msg);
};

const ::bosdyn::api::RequestHeader&
GetSSLCertRequest::_Internal::header(const GetSSLCertRequest* msg) {
  return *msg->header_;
}
void GetSSLCertRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
GetSSLCertRequest::GetSSLCertRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.GetSSLCertRequest)
}
GetSSLCertRequest::GetSSLCertRequest(const GetSSLCertRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.GetSSLCertRequest)
}

void GetSSLCertRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetSSLCertRequest_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto.base);
  header_ = nullptr;
}

GetSSLCertRequest::~GetSSLCertRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.GetSSLCertRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetSSLCertRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void GetSSLCertRequest::ArenaDtor(void* object) {
  GetSSLCertRequest* _this = reinterpret_cast< GetSSLCertRequest* >(object);
  (void)_this;
}
void GetSSLCertRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetSSLCertRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetSSLCertRequest& GetSSLCertRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetSSLCertRequest_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto.base);
  return *internal_default_instance();
}


void GetSSLCertRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.GetSSLCertRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSSLCertRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSSLCertRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.GetSSLCertRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.GetSSLCertRequest)
  return target;
}

size_t GetSSLCertRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.GetSSLCertRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSSLCertRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.GetSSLCertRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSSLCertRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetSSLCertRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.GetSSLCertRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.GetSSLCertRequest)
    MergeFrom(*source);
  }
}

void GetSSLCertRequest::MergeFrom(const GetSSLCertRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.GetSSLCertRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
}

void GetSSLCertRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.GetSSLCertRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSSLCertRequest::CopyFrom(const GetSSLCertRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.GetSSLCertRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSSLCertRequest::IsInitialized() const {
  return true;
}

void GetSSLCertRequest::InternalSwap(GetSSLCertRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSSLCertRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetSSLCertResponse::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_GetSSLCertResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
}
class GetSSLCertResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const GetSSLCertResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
GetSSLCertResponse::_Internal::header(const GetSSLCertResponse* msg) {
  return *msg->header_;
}
void GetSSLCertResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
GetSSLCertResponse::GetSSLCertResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.GetSSLCertResponse)
}
GetSSLCertResponse::GetSSLCertResponse(const GetSSLCertResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  certificate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_certificate().empty()) {
    certificate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_certificate(),
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.GetSSLCertResponse)
}

void GetSSLCertResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetSSLCertResponse_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto.base);
  certificate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  header_ = nullptr;
}

GetSSLCertResponse::~GetSSLCertResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.GetSSLCertResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetSSLCertResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  certificate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void GetSSLCertResponse::ArenaDtor(void* object) {
  GetSSLCertResponse* _this = reinterpret_cast< GetSSLCertResponse* >(object);
  (void)_this;
}
void GetSSLCertResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetSSLCertResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetSSLCertResponse& GetSSLCertResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetSSLCertResponse_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto.base);
  return *internal_default_instance();
}


void GetSSLCertResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.GetSSLCertResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  certificate_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSSLCertResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string certificate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_certificate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.spot_cam.GetSSLCertResponse.certificate"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSSLCertResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.GetSSLCertResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // string certificate = 2;
  if (this->certificate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_certificate().data(), static_cast<int>(this->_internal_certificate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.spot_cam.GetSSLCertResponse.certificate");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_certificate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.GetSSLCertResponse)
  return target;
}

size_t GetSSLCertResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.GetSSLCertResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string certificate = 2;
  if (this->certificate().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_certificate());
  }

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSSLCertResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.GetSSLCertResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSSLCertResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetSSLCertResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.GetSSLCertResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.GetSSLCertResponse)
    MergeFrom(*source);
  }
}

void GetSSLCertResponse::MergeFrom(const GetSSLCertResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.GetSSLCertResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.certificate().size() > 0) {
    _internal_set_certificate(from._internal_certificate());
  }
  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
}

void GetSSLCertResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.GetSSLCertResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSSLCertResponse::CopyFrom(const GetSSLCertResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.GetSSLCertResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSSLCertResponse::IsInitialized() const {
  return true;
}

void GetSSLCertResponse::InternalSwap(GetSSLCertResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  certificate_.Swap(&other->certificate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSSLCertResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ICEServer::InitAsDefaultInstance() {
}
class ICEServer::_Internal {
 public:
};

ICEServer::ICEServer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.ICEServer)
}
ICEServer::ICEServer(const ICEServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_address(),
      GetArena());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&type_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.ICEServer)
}

void ICEServer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ICEServer_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&type_)) + sizeof(port_));
}

ICEServer::~ICEServer() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.ICEServer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ICEServer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ICEServer::ArenaDtor(void* object) {
  ICEServer* _this = reinterpret_cast< ICEServer* >(object);
  (void)_this;
}
void ICEServer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ICEServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ICEServer& ICEServer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ICEServer_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto.base);
  return *internal_default_instance();
}


void ICEServer::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.ICEServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&type_)) + sizeof(port_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ICEServer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.spot_cam.ICEServer.servertype type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::bosdyn::api::spot_cam::ICEServer_servertype>(val));
        } else goto handle_unusual;
        continue;
      // string address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.spot_cam.ICEServer.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ICEServer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.ICEServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.spot_cam.ICEServer.servertype type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string address = 2;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.spot_cam.ICEServer.address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_address(), target);
  }

  // uint32 port = 3;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.ICEServer)
  return target;
}

size_t ICEServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.ICEServer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 2;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // .bosdyn.api.spot_cam.ICEServer.servertype type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 port = 3;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ICEServer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.ICEServer)
  GOOGLE_DCHECK_NE(&from, this);
  const ICEServer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ICEServer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.ICEServer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.ICEServer)
    MergeFrom(*source);
  }
}

void ICEServer::MergeFrom(const ICEServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.ICEServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {
    _internal_set_address(from._internal_address());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
}

void ICEServer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.ICEServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ICEServer::CopyFrom(const ICEServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.ICEServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ICEServer::IsInitialized() const {
  return true;
}

void ICEServer::InternalSwap(ICEServer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ICEServer, port_)
      + sizeof(ICEServer::port_)
      - PROTOBUF_FIELD_OFFSET(ICEServer, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ICEServer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetICEConfigurationRequest::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_GetICEConfigurationRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
}
class GetICEConfigurationRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const GetICEConfigurationRequest* msg);
};

const ::bosdyn::api::RequestHeader&
GetICEConfigurationRequest::_Internal::header(const GetICEConfigurationRequest* msg) {
  return *msg->header_;
}
void GetICEConfigurationRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
GetICEConfigurationRequest::GetICEConfigurationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.GetICEConfigurationRequest)
}
GetICEConfigurationRequest::GetICEConfigurationRequest(const GetICEConfigurationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.GetICEConfigurationRequest)
}

void GetICEConfigurationRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetICEConfigurationRequest_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto.base);
  header_ = nullptr;
}

GetICEConfigurationRequest::~GetICEConfigurationRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.GetICEConfigurationRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetICEConfigurationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void GetICEConfigurationRequest::ArenaDtor(void* object) {
  GetICEConfigurationRequest* _this = reinterpret_cast< GetICEConfigurationRequest* >(object);
  (void)_this;
}
void GetICEConfigurationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetICEConfigurationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetICEConfigurationRequest& GetICEConfigurationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetICEConfigurationRequest_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto.base);
  return *internal_default_instance();
}


void GetICEConfigurationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.GetICEConfigurationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetICEConfigurationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetICEConfigurationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.GetICEConfigurationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.GetICEConfigurationRequest)
  return target;
}

size_t GetICEConfigurationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.GetICEConfigurationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetICEConfigurationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.GetICEConfigurationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetICEConfigurationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetICEConfigurationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.GetICEConfigurationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.GetICEConfigurationRequest)
    MergeFrom(*source);
  }
}

void GetICEConfigurationRequest::MergeFrom(const GetICEConfigurationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.GetICEConfigurationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
}

void GetICEConfigurationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.GetICEConfigurationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetICEConfigurationRequest::CopyFrom(const GetICEConfigurationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.GetICEConfigurationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetICEConfigurationRequest::IsInitialized() const {
  return true;
}

void GetICEConfigurationRequest::InternalSwap(GetICEConfigurationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetICEConfigurationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetICEConfigurationResponse::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_GetICEConfigurationResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
}
class GetICEConfigurationResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const GetICEConfigurationResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
GetICEConfigurationResponse::_Internal::header(const GetICEConfigurationResponse* msg) {
  return *msg->header_;
}
void GetICEConfigurationResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
GetICEConfigurationResponse::GetICEConfigurationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  servers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.GetICEConfigurationResponse)
}
GetICEConfigurationResponse::GetICEConfigurationResponse(const GetICEConfigurationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      servers_(from.servers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.GetICEConfigurationResponse)
}

void GetICEConfigurationResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetICEConfigurationResponse_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto.base);
  header_ = nullptr;
}

GetICEConfigurationResponse::~GetICEConfigurationResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.GetICEConfigurationResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetICEConfigurationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void GetICEConfigurationResponse::ArenaDtor(void* object) {
  GetICEConfigurationResponse* _this = reinterpret_cast< GetICEConfigurationResponse* >(object);
  (void)_this;
}
void GetICEConfigurationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetICEConfigurationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetICEConfigurationResponse& GetICEConfigurationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetICEConfigurationResponse_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto.base);
  return *internal_default_instance();
}


void GetICEConfigurationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.GetICEConfigurationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  servers_.Clear();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetICEConfigurationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bosdyn.api.spot_cam.ICEServer servers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_servers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetICEConfigurationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.GetICEConfigurationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .bosdyn.api.spot_cam.ICEServer servers = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_servers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_servers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.GetICEConfigurationResponse)
  return target;
}

size_t GetICEConfigurationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.GetICEConfigurationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bosdyn.api.spot_cam.ICEServer servers = 2;
  total_size += 1UL * this->_internal_servers_size();
  for (const auto& msg : this->servers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetICEConfigurationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.GetICEConfigurationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetICEConfigurationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetICEConfigurationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.GetICEConfigurationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.GetICEConfigurationResponse)
    MergeFrom(*source);
  }
}

void GetICEConfigurationResponse::MergeFrom(const GetICEConfigurationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.GetICEConfigurationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  servers_.MergeFrom(from.servers_);
  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
}

void GetICEConfigurationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.GetICEConfigurationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetICEConfigurationResponse::CopyFrom(const GetICEConfigurationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.GetICEConfigurationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetICEConfigurationResponse::IsInitialized() const {
  return true;
}

void GetICEConfigurationResponse::InternalSwap(GetICEConfigurationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  servers_.InternalSwap(&other->servers_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetICEConfigurationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetICEConfigurationRequest::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_SetICEConfigurationRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
}
class SetICEConfigurationRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const SetICEConfigurationRequest* msg);
};

const ::bosdyn::api::RequestHeader&
SetICEConfigurationRequest::_Internal::header(const SetICEConfigurationRequest* msg) {
  return *msg->header_;
}
void SetICEConfigurationRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
SetICEConfigurationRequest::SetICEConfigurationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  servers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.SetICEConfigurationRequest)
}
SetICEConfigurationRequest::SetICEConfigurationRequest(const SetICEConfigurationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      servers_(from.servers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.SetICEConfigurationRequest)
}

void SetICEConfigurationRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetICEConfigurationRequest_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto.base);
  header_ = nullptr;
}

SetICEConfigurationRequest::~SetICEConfigurationRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.SetICEConfigurationRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetICEConfigurationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void SetICEConfigurationRequest::ArenaDtor(void* object) {
  SetICEConfigurationRequest* _this = reinterpret_cast< SetICEConfigurationRequest* >(object);
  (void)_this;
}
void SetICEConfigurationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetICEConfigurationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetICEConfigurationRequest& SetICEConfigurationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetICEConfigurationRequest_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto.base);
  return *internal_default_instance();
}


void SetICEConfigurationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.SetICEConfigurationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  servers_.Clear();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetICEConfigurationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bosdyn.api.spot_cam.ICEServer servers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_servers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetICEConfigurationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.SetICEConfigurationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .bosdyn.api.spot_cam.ICEServer servers = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_servers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_servers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.SetICEConfigurationRequest)
  return target;
}

size_t SetICEConfigurationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.SetICEConfigurationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bosdyn.api.spot_cam.ICEServer servers = 2;
  total_size += 1UL * this->_internal_servers_size();
  for (const auto& msg : this->servers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetICEConfigurationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.SetICEConfigurationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetICEConfigurationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetICEConfigurationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.SetICEConfigurationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.SetICEConfigurationRequest)
    MergeFrom(*source);
  }
}

void SetICEConfigurationRequest::MergeFrom(const SetICEConfigurationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.SetICEConfigurationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  servers_.MergeFrom(from.servers_);
  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
}

void SetICEConfigurationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.SetICEConfigurationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetICEConfigurationRequest::CopyFrom(const SetICEConfigurationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.SetICEConfigurationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetICEConfigurationRequest::IsInitialized() const {
  return true;
}

void SetICEConfigurationRequest::InternalSwap(SetICEConfigurationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  servers_.InternalSwap(&other->servers_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetICEConfigurationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetICEConfigurationResponse::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_SetICEConfigurationResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
}
class SetICEConfigurationResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const SetICEConfigurationResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
SetICEConfigurationResponse::_Internal::header(const SetICEConfigurationResponse* msg) {
  return *msg->header_;
}
void SetICEConfigurationResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
SetICEConfigurationResponse::SetICEConfigurationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.SetICEConfigurationResponse)
}
SetICEConfigurationResponse::SetICEConfigurationResponse(const SetICEConfigurationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.SetICEConfigurationResponse)
}

void SetICEConfigurationResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetICEConfigurationResponse_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto.base);
  header_ = nullptr;
}

SetICEConfigurationResponse::~SetICEConfigurationResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.SetICEConfigurationResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetICEConfigurationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void SetICEConfigurationResponse::ArenaDtor(void* object) {
  SetICEConfigurationResponse* _this = reinterpret_cast< SetICEConfigurationResponse* >(object);
  (void)_this;
}
void SetICEConfigurationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetICEConfigurationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetICEConfigurationResponse& SetICEConfigurationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetICEConfigurationResponse_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto.base);
  return *internal_default_instance();
}


void SetICEConfigurationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.SetICEConfigurationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetICEConfigurationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetICEConfigurationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.SetICEConfigurationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.SetICEConfigurationResponse)
  return target;
}

size_t SetICEConfigurationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.SetICEConfigurationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetICEConfigurationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.SetICEConfigurationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetICEConfigurationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetICEConfigurationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.SetICEConfigurationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.SetICEConfigurationResponse)
    MergeFrom(*source);
  }
}

void SetICEConfigurationResponse::MergeFrom(const SetICEConfigurationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.SetICEConfigurationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
}

void SetICEConfigurationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.SetICEConfigurationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetICEConfigurationResponse::CopyFrom(const SetICEConfigurationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.SetICEConfigurationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetICEConfigurationResponse::IsInitialized() const {
  return true;
}

void SetICEConfigurationResponse::InternalSwap(SetICEConfigurationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetICEConfigurationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace spot_cam
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::NetworkTuple* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::NetworkTuple >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::NetworkTuple >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::GetNetworkSettingsRequest* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::GetNetworkSettingsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::GetNetworkSettingsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::GetNetworkSettingsResponse* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::GetNetworkSettingsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::GetNetworkSettingsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::GetSSLCertRequest* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::GetSSLCertRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::GetSSLCertRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::GetSSLCertResponse* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::GetSSLCertResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::GetSSLCertResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::ICEServer* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::ICEServer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::ICEServer >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::GetICEConfigurationRequest* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::GetICEConfigurationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::GetICEConfigurationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::GetICEConfigurationResponse* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::GetICEConfigurationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::GetICEConfigurationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::SetICEConfigurationRequest* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::SetICEConfigurationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::SetICEConfigurationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::SetICEConfigurationResponse* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::SetICEConfigurationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::SetICEConfigurationResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
