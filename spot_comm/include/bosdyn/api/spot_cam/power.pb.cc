// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/spot_cam/power.proto

#include "bosdyn/api/spot_cam/power.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PowerStatus_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto;
namespace bosdyn {
namespace api {
namespace spot_cam {
class PowerStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PowerStatus> _instance;
} _PowerStatus_default_instance_;
class GetPowerStatusRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPowerStatusRequest> _instance;
} _GetPowerStatusRequest_default_instance_;
class GetPowerStatusResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPowerStatusResponse> _instance;
} _GetPowerStatusResponse_default_instance_;
class SetPowerStatusRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetPowerStatusRequest> _instance;
} _SetPowerStatusRequest_default_instance_;
class SetPowerStatusResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetPowerStatusResponse> _instance;
} _SetPowerStatusResponse_default_instance_;
}  // namespace spot_cam
}  // namespace api
}  // namespace bosdyn
static void InitDefaultsscc_info_GetPowerStatusRequest_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_GetPowerStatusRequest_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::GetPowerStatusRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::GetPowerStatusRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetPowerStatusRequest_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetPowerStatusRequest_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_GetPowerStatusResponse_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_GetPowerStatusResponse_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::GetPowerStatusResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::GetPowerStatusResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetPowerStatusResponse_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetPowerStatusResponse_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_PowerStatus_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto.base,}};

static void InitDefaultsscc_info_PowerStatus_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_PowerStatus_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::PowerStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::PowerStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PowerStatus_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PowerStatus_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto}, {
      &scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_SetPowerStatusRequest_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_SetPowerStatusRequest_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::SetPowerStatusRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::SetPowerStatusRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SetPowerStatusRequest_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SetPowerStatusRequest_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_PowerStatus_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto.base,}};

static void InitDefaultsscc_info_SetPowerStatusResponse_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot_cam::_SetPowerStatusResponse_default_instance_;
    new (ptr) ::bosdyn::api::spot_cam::SetPowerStatusResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot_cam::SetPowerStatusResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SetPowerStatusResponse_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SetPowerStatusResponse_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_PowerStatus_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::PowerStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::PowerStatus, ptz_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::PowerStatus, aux1_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::PowerStatus, aux2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetPowerStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetPowerStatusRequest, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetPowerStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetPowerStatusResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::GetPowerStatusResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::SetPowerStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::SetPowerStatusRequest, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::SetPowerStatusRequest, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::SetPowerStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::SetPowerStatusResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot_cam::SetPowerStatusResponse, status_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::bosdyn::api::spot_cam::PowerStatus)},
  { 8, -1, sizeof(::bosdyn::api::spot_cam::GetPowerStatusRequest)},
  { 14, -1, sizeof(::bosdyn::api::spot_cam::GetPowerStatusResponse)},
  { 21, -1, sizeof(::bosdyn::api::spot_cam::SetPowerStatusRequest)},
  { 28, -1, sizeof(::bosdyn::api::spot_cam::SetPowerStatusResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_PowerStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_GetPowerStatusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_GetPowerStatusResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_SetPowerStatusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot_cam::_SetPowerStatusResponse_default_instance_),
};

const char descriptor_table_protodef_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037bosdyn/api/spot_cam/power.proto\022\023bosdy"
  "n.api.spot_cam\032\036google/protobuf/wrappers"
  ".proto\032\027bosdyn/api/header.proto\"\212\001\n\013Powe"
  "rStatus\022\'\n\003ptz\030\002 \001(\0132\032.google.protobuf.B"
  "oolValue\022(\n\004aux1\030\003 \001(\0132\032.google.protobuf"
  ".BoolValue\022(\n\004aux2\030\004 \001(\0132\032.google.protob"
  "uf.BoolValue\"B\n\025GetPowerStatusRequest\022)\n"
  "\006header\030\001 \001(\0132\031.bosdyn.api.RequestHeader"
  "\"v\n\026GetPowerStatusResponse\022*\n\006header\030\001 \001"
  "(\0132\032.bosdyn.api.ResponseHeader\0220\n\006status"
  "\030\002 \001(\0132 .bosdyn.api.spot_cam.PowerStatus"
  "\"t\n\025SetPowerStatusRequest\022)\n\006header\030\001 \001("
  "\0132\031.bosdyn.api.RequestHeader\0220\n\006status\030\002"
  " \001(\0132 .bosdyn.api.spot_cam.PowerStatus\"v"
  "\n\026SetPowerStatusResponse\022*\n\006header\030\001 \001(\013"
  "2\032.bosdyn.api.ResponseHeader\0220\n\006status\030\002"
  " \001(\0132 .bosdyn.api.spot_cam.PowerStatusB\014"
  "B\nPowerProtob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto_deps[2] = {
  &::descriptor_table_bosdyn_2fapi_2fheader_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto_sccs[5] = {
  &scc_info_GetPowerStatusRequest_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto.base,
  &scc_info_GetPowerStatusResponse_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto.base,
  &scc_info_PowerStatus_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto.base,
  &scc_info_SetPowerStatusRequest_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto.base,
  &scc_info_SetPowerStatusResponse_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto = {
  false, false, descriptor_table_protodef_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto, "bosdyn/api/spot_cam/power.proto", 700,
  &descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto_once, descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto_sccs, descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto_deps, 5, 2,
  schemas, file_default_instances, TableStruct_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto::offsets,
  file_level_metadata_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto, 5, file_level_enum_descriptors_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto, file_level_service_descriptors_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto)), true);
namespace bosdyn {
namespace api {
namespace spot_cam {

// ===================================================================

void PowerStatus::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_PowerStatus_default_instance_._instance.get_mutable()->ptz_ = const_cast< PROTOBUF_NAMESPACE_ID::BoolValue*>(
      PROTOBUF_NAMESPACE_ID::BoolValue::internal_default_instance());
  ::bosdyn::api::spot_cam::_PowerStatus_default_instance_._instance.get_mutable()->aux1_ = const_cast< PROTOBUF_NAMESPACE_ID::BoolValue*>(
      PROTOBUF_NAMESPACE_ID::BoolValue::internal_default_instance());
  ::bosdyn::api::spot_cam::_PowerStatus_default_instance_._instance.get_mutable()->aux2_ = const_cast< PROTOBUF_NAMESPACE_ID::BoolValue*>(
      PROTOBUF_NAMESPACE_ID::BoolValue::internal_default_instance());
}
class PowerStatus::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::BoolValue& ptz(const PowerStatus* msg);
  static const PROTOBUF_NAMESPACE_ID::BoolValue& aux1(const PowerStatus* msg);
  static const PROTOBUF_NAMESPACE_ID::BoolValue& aux2(const PowerStatus* msg);
};

const PROTOBUF_NAMESPACE_ID::BoolValue&
PowerStatus::_Internal::ptz(const PowerStatus* msg) {
  return *msg->ptz_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
PowerStatus::_Internal::aux1(const PowerStatus* msg) {
  return *msg->aux1_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
PowerStatus::_Internal::aux2(const PowerStatus* msg) {
  return *msg->aux2_;
}
void PowerStatus::clear_ptz() {
  if (GetArena() == nullptr && ptz_ != nullptr) {
    delete ptz_;
  }
  ptz_ = nullptr;
}
void PowerStatus::clear_aux1() {
  if (GetArena() == nullptr && aux1_ != nullptr) {
    delete aux1_;
  }
  aux1_ = nullptr;
}
void PowerStatus::clear_aux2() {
  if (GetArena() == nullptr && aux2_ != nullptr) {
    delete aux2_;
  }
  aux2_ = nullptr;
}
PowerStatus::PowerStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.PowerStatus)
}
PowerStatus::PowerStatus(const PowerStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ptz()) {
    ptz_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.ptz_);
  } else {
    ptz_ = nullptr;
  }
  if (from._internal_has_aux1()) {
    aux1_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.aux1_);
  } else {
    aux1_ = nullptr;
  }
  if (from._internal_has_aux2()) {
    aux2_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.aux2_);
  } else {
    aux2_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.PowerStatus)
}

void PowerStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PowerStatus_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto.base);
  ::memset(&ptz_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&aux2_) -
      reinterpret_cast<char*>(&ptz_)) + sizeof(aux2_));
}

PowerStatus::~PowerStatus() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.PowerStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PowerStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ptz_;
  if (this != internal_default_instance()) delete aux1_;
  if (this != internal_default_instance()) delete aux2_;
}

void PowerStatus::ArenaDtor(void* object) {
  PowerStatus* _this = reinterpret_cast< PowerStatus* >(object);
  (void)_this;
}
void PowerStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PowerStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PowerStatus& PowerStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PowerStatus_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto.base);
  return *internal_default_instance();
}


void PowerStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.PowerStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && ptz_ != nullptr) {
    delete ptz_;
  }
  ptz_ = nullptr;
  if (GetArena() == nullptr && aux1_ != nullptr) {
    delete aux1_;
  }
  aux1_ = nullptr;
  if (GetArena() == nullptr && aux2_ != nullptr) {
    delete aux2_;
  }
  aux2_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PowerStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.BoolValue ptz = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ptz(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue aux1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_aux1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue aux2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_aux2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PowerStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.PowerStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.BoolValue ptz = 2;
  if (this->has_ptz()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ptz(this), target, stream);
  }

  // .google.protobuf.BoolValue aux1 = 3;
  if (this->has_aux1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::aux1(this), target, stream);
  }

  // .google.protobuf.BoolValue aux2 = 4;
  if (this->has_aux2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::aux2(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.PowerStatus)
  return target;
}

size_t PowerStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.PowerStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.BoolValue ptz = 2;
  if (this->has_ptz()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ptz_);
  }

  // .google.protobuf.BoolValue aux1 = 3;
  if (this->has_aux1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *aux1_);
  }

  // .google.protobuf.BoolValue aux2 = 4;
  if (this->has_aux2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *aux2_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PowerStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.PowerStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const PowerStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PowerStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.PowerStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.PowerStatus)
    MergeFrom(*source);
  }
}

void PowerStatus::MergeFrom(const PowerStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.PowerStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ptz()) {
    _internal_mutable_ptz()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_ptz());
  }
  if (from.has_aux1()) {
    _internal_mutable_aux1()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_aux1());
  }
  if (from.has_aux2()) {
    _internal_mutable_aux2()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_aux2());
  }
}

void PowerStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.PowerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PowerStatus::CopyFrom(const PowerStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.PowerStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerStatus::IsInitialized() const {
  return true;
}

void PowerStatus::InternalSwap(PowerStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PowerStatus, aux2_)
      + sizeof(PowerStatus::aux2_)
      - PROTOBUF_FIELD_OFFSET(PowerStatus, ptz_)>(
          reinterpret_cast<char*>(&ptz_),
          reinterpret_cast<char*>(&other->ptz_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PowerStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetPowerStatusRequest::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_GetPowerStatusRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
}
class GetPowerStatusRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const GetPowerStatusRequest* msg);
};

const ::bosdyn::api::RequestHeader&
GetPowerStatusRequest::_Internal::header(const GetPowerStatusRequest* msg) {
  return *msg->header_;
}
void GetPowerStatusRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
GetPowerStatusRequest::GetPowerStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.GetPowerStatusRequest)
}
GetPowerStatusRequest::GetPowerStatusRequest(const GetPowerStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.GetPowerStatusRequest)
}

void GetPowerStatusRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetPowerStatusRequest_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto.base);
  header_ = nullptr;
}

GetPowerStatusRequest::~GetPowerStatusRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.GetPowerStatusRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetPowerStatusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void GetPowerStatusRequest::ArenaDtor(void* object) {
  GetPowerStatusRequest* _this = reinterpret_cast< GetPowerStatusRequest* >(object);
  (void)_this;
}
void GetPowerStatusRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPowerStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPowerStatusRequest& GetPowerStatusRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPowerStatusRequest_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto.base);
  return *internal_default_instance();
}


void GetPowerStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.GetPowerStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPowerStatusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPowerStatusRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.GetPowerStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.GetPowerStatusRequest)
  return target;
}

size_t GetPowerStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.GetPowerStatusRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPowerStatusRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.GetPowerStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPowerStatusRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPowerStatusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.GetPowerStatusRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.GetPowerStatusRequest)
    MergeFrom(*source);
  }
}

void GetPowerStatusRequest::MergeFrom(const GetPowerStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.GetPowerStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
}

void GetPowerStatusRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.GetPowerStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPowerStatusRequest::CopyFrom(const GetPowerStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.GetPowerStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPowerStatusRequest::IsInitialized() const {
  return true;
}

void GetPowerStatusRequest::InternalSwap(GetPowerStatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPowerStatusRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetPowerStatusResponse::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_GetPowerStatusResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
  ::bosdyn::api::spot_cam::_GetPowerStatusResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::bosdyn::api::spot_cam::PowerStatus*>(
      ::bosdyn::api::spot_cam::PowerStatus::internal_default_instance());
}
class GetPowerStatusResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const GetPowerStatusResponse* msg);
  static const ::bosdyn::api::spot_cam::PowerStatus& status(const GetPowerStatusResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
GetPowerStatusResponse::_Internal::header(const GetPowerStatusResponse* msg) {
  return *msg->header_;
}
const ::bosdyn::api::spot_cam::PowerStatus&
GetPowerStatusResponse::_Internal::status(const GetPowerStatusResponse* msg) {
  return *msg->status_;
}
void GetPowerStatusResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
GetPowerStatusResponse::GetPowerStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.GetPowerStatusResponse)
}
GetPowerStatusResponse::GetPowerStatusResponse(const GetPowerStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::bosdyn::api::spot_cam::PowerStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.GetPowerStatusResponse)
}

void GetPowerStatusResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetPowerStatusResponse_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&header_)) + sizeof(status_));
}

GetPowerStatusResponse::~GetPowerStatusResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.GetPowerStatusResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetPowerStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete status_;
}

void GetPowerStatusResponse::ArenaDtor(void* object) {
  GetPowerStatusResponse* _this = reinterpret_cast< GetPowerStatusResponse* >(object);
  (void)_this;
}
void GetPowerStatusResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPowerStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPowerStatusResponse& GetPowerStatusResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPowerStatusResponse_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto.base);
  return *internal_default_instance();
}


void GetPowerStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.GetPowerStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPowerStatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.spot_cam.PowerStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPowerStatusResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.GetPowerStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.spot_cam.PowerStatus status = 2;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.GetPowerStatusResponse)
  return target;
}

size_t GetPowerStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.GetPowerStatusResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.spot_cam.PowerStatus status = 2;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPowerStatusResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.GetPowerStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPowerStatusResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPowerStatusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.GetPowerStatusResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.GetPowerStatusResponse)
    MergeFrom(*source);
  }
}

void GetPowerStatusResponse::MergeFrom(const GetPowerStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.GetPowerStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::bosdyn::api::spot_cam::PowerStatus::MergeFrom(from._internal_status());
  }
}

void GetPowerStatusResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.GetPowerStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPowerStatusResponse::CopyFrom(const GetPowerStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.GetPowerStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPowerStatusResponse::IsInitialized() const {
  return true;
}

void GetPowerStatusResponse::InternalSwap(GetPowerStatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetPowerStatusResponse, status_)
      + sizeof(GetPowerStatusResponse::status_)
      - PROTOBUF_FIELD_OFFSET(GetPowerStatusResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPowerStatusResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetPowerStatusRequest::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_SetPowerStatusRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
  ::bosdyn::api::spot_cam::_SetPowerStatusRequest_default_instance_._instance.get_mutable()->status_ = const_cast< ::bosdyn::api::spot_cam::PowerStatus*>(
      ::bosdyn::api::spot_cam::PowerStatus::internal_default_instance());
}
class SetPowerStatusRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const SetPowerStatusRequest* msg);
  static const ::bosdyn::api::spot_cam::PowerStatus& status(const SetPowerStatusRequest* msg);
};

const ::bosdyn::api::RequestHeader&
SetPowerStatusRequest::_Internal::header(const SetPowerStatusRequest* msg) {
  return *msg->header_;
}
const ::bosdyn::api::spot_cam::PowerStatus&
SetPowerStatusRequest::_Internal::status(const SetPowerStatusRequest* msg) {
  return *msg->status_;
}
void SetPowerStatusRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
SetPowerStatusRequest::SetPowerStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.SetPowerStatusRequest)
}
SetPowerStatusRequest::SetPowerStatusRequest(const SetPowerStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::bosdyn::api::spot_cam::PowerStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.SetPowerStatusRequest)
}

void SetPowerStatusRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetPowerStatusRequest_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&header_)) + sizeof(status_));
}

SetPowerStatusRequest::~SetPowerStatusRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.SetPowerStatusRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetPowerStatusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete status_;
}

void SetPowerStatusRequest::ArenaDtor(void* object) {
  SetPowerStatusRequest* _this = reinterpret_cast< SetPowerStatusRequest* >(object);
  (void)_this;
}
void SetPowerStatusRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetPowerStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetPowerStatusRequest& SetPowerStatusRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetPowerStatusRequest_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto.base);
  return *internal_default_instance();
}


void SetPowerStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.SetPowerStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetPowerStatusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.spot_cam.PowerStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetPowerStatusRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.SetPowerStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.spot_cam.PowerStatus status = 2;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.SetPowerStatusRequest)
  return target;
}

size_t SetPowerStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.SetPowerStatusRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.spot_cam.PowerStatus status = 2;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetPowerStatusRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.SetPowerStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetPowerStatusRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetPowerStatusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.SetPowerStatusRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.SetPowerStatusRequest)
    MergeFrom(*source);
  }
}

void SetPowerStatusRequest::MergeFrom(const SetPowerStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.SetPowerStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::bosdyn::api::spot_cam::PowerStatus::MergeFrom(from._internal_status());
  }
}

void SetPowerStatusRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.SetPowerStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPowerStatusRequest::CopyFrom(const SetPowerStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.SetPowerStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPowerStatusRequest::IsInitialized() const {
  return true;
}

void SetPowerStatusRequest::InternalSwap(SetPowerStatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetPowerStatusRequest, status_)
      + sizeof(SetPowerStatusRequest::status_)
      - PROTOBUF_FIELD_OFFSET(SetPowerStatusRequest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetPowerStatusRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetPowerStatusResponse::InitAsDefaultInstance() {
  ::bosdyn::api::spot_cam::_SetPowerStatusResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
  ::bosdyn::api::spot_cam::_SetPowerStatusResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::bosdyn::api::spot_cam::PowerStatus*>(
      ::bosdyn::api::spot_cam::PowerStatus::internal_default_instance());
}
class SetPowerStatusResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const SetPowerStatusResponse* msg);
  static const ::bosdyn::api::spot_cam::PowerStatus& status(const SetPowerStatusResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
SetPowerStatusResponse::_Internal::header(const SetPowerStatusResponse* msg) {
  return *msg->header_;
}
const ::bosdyn::api::spot_cam::PowerStatus&
SetPowerStatusResponse::_Internal::status(const SetPowerStatusResponse* msg) {
  return *msg->status_;
}
void SetPowerStatusResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
SetPowerStatusResponse::SetPowerStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot_cam.SetPowerStatusResponse)
}
SetPowerStatusResponse::SetPowerStatusResponse(const SetPowerStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::bosdyn::api::spot_cam::PowerStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot_cam.SetPowerStatusResponse)
}

void SetPowerStatusResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetPowerStatusResponse_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&header_)) + sizeof(status_));
}

SetPowerStatusResponse::~SetPowerStatusResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot_cam.SetPowerStatusResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetPowerStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete status_;
}

void SetPowerStatusResponse::ArenaDtor(void* object) {
  SetPowerStatusResponse* _this = reinterpret_cast< SetPowerStatusResponse* >(object);
  (void)_this;
}
void SetPowerStatusResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetPowerStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetPowerStatusResponse& SetPowerStatusResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetPowerStatusResponse_bosdyn_2fapi_2fspot_5fcam_2fpower_2eproto.base);
  return *internal_default_instance();
}


void SetPowerStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot_cam.SetPowerStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetPowerStatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.spot_cam.PowerStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetPowerStatusResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot_cam.SetPowerStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.spot_cam.PowerStatus status = 2;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot_cam.SetPowerStatusResponse)
  return target;
}

size_t SetPowerStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot_cam.SetPowerStatusResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.spot_cam.PowerStatus status = 2;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetPowerStatusResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot_cam.SetPowerStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetPowerStatusResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetPowerStatusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot_cam.SetPowerStatusResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot_cam.SetPowerStatusResponse)
    MergeFrom(*source);
  }
}

void SetPowerStatusResponse::MergeFrom(const SetPowerStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot_cam.SetPowerStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::bosdyn::api::spot_cam::PowerStatus::MergeFrom(from._internal_status());
  }
}

void SetPowerStatusResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot_cam.SetPowerStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPowerStatusResponse::CopyFrom(const SetPowerStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot_cam.SetPowerStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPowerStatusResponse::IsInitialized() const {
  return true;
}

void SetPowerStatusResponse::InternalSwap(SetPowerStatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetPowerStatusResponse, status_)
      + sizeof(SetPowerStatusResponse::status_)
      - PROTOBUF_FIELD_OFFSET(SetPowerStatusResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetPowerStatusResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace spot_cam
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::PowerStatus* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::PowerStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::PowerStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::GetPowerStatusRequest* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::GetPowerStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::GetPowerStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::GetPowerStatusResponse* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::GetPowerStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::GetPowerStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::SetPowerStatusRequest* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::SetPowerStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::SetPowerStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot_cam::SetPowerStatusResponse* Arena::CreateMaybeMessage< ::bosdyn::api::spot_cam::SetPowerStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot_cam::SetPowerStatusResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
