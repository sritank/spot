// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/spot_cam/network.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "bosdyn/api/header.pb.h"
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto;
namespace bosdyn {
namespace api {
namespace spot_cam {
class GetICEConfigurationRequest;
class GetICEConfigurationRequestDefaultTypeInternal;
extern GetICEConfigurationRequestDefaultTypeInternal _GetICEConfigurationRequest_default_instance_;
class GetICEConfigurationResponse;
class GetICEConfigurationResponseDefaultTypeInternal;
extern GetICEConfigurationResponseDefaultTypeInternal _GetICEConfigurationResponse_default_instance_;
class GetNetworkSettingsRequest;
class GetNetworkSettingsRequestDefaultTypeInternal;
extern GetNetworkSettingsRequestDefaultTypeInternal _GetNetworkSettingsRequest_default_instance_;
class GetNetworkSettingsResponse;
class GetNetworkSettingsResponseDefaultTypeInternal;
extern GetNetworkSettingsResponseDefaultTypeInternal _GetNetworkSettingsResponse_default_instance_;
class GetSSLCertRequest;
class GetSSLCertRequestDefaultTypeInternal;
extern GetSSLCertRequestDefaultTypeInternal _GetSSLCertRequest_default_instance_;
class GetSSLCertResponse;
class GetSSLCertResponseDefaultTypeInternal;
extern GetSSLCertResponseDefaultTypeInternal _GetSSLCertResponse_default_instance_;
class ICEServer;
class ICEServerDefaultTypeInternal;
extern ICEServerDefaultTypeInternal _ICEServer_default_instance_;
class NetworkTuple;
class NetworkTupleDefaultTypeInternal;
extern NetworkTupleDefaultTypeInternal _NetworkTuple_default_instance_;
class SetICEConfigurationRequest;
class SetICEConfigurationRequestDefaultTypeInternal;
extern SetICEConfigurationRequestDefaultTypeInternal _SetICEConfigurationRequest_default_instance_;
class SetICEConfigurationResponse;
class SetICEConfigurationResponseDefaultTypeInternal;
extern SetICEConfigurationResponseDefaultTypeInternal _SetICEConfigurationResponse_default_instance_;
}  // namespace spot_cam
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> ::bosdyn::api::spot_cam::GetICEConfigurationRequest* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::GetICEConfigurationRequest>(Arena*);
template<> ::bosdyn::api::spot_cam::GetICEConfigurationResponse* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::GetICEConfigurationResponse>(Arena*);
template<> ::bosdyn::api::spot_cam::GetNetworkSettingsRequest* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::GetNetworkSettingsRequest>(Arena*);
template<> ::bosdyn::api::spot_cam::GetNetworkSettingsResponse* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::GetNetworkSettingsResponse>(Arena*);
template<> ::bosdyn::api::spot_cam::GetSSLCertRequest* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::GetSSLCertRequest>(Arena*);
template<> ::bosdyn::api::spot_cam::GetSSLCertResponse* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::GetSSLCertResponse>(Arena*);
template<> ::bosdyn::api::spot_cam::ICEServer* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::ICEServer>(Arena*);
template<> ::bosdyn::api::spot_cam::NetworkTuple* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::NetworkTuple>(Arena*);
template<> ::bosdyn::api::spot_cam::SetICEConfigurationRequest* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::SetICEConfigurationRequest>(Arena*);
template<> ::bosdyn::api::spot_cam::SetICEConfigurationResponse* Arena::CreateMaybeMessage<::bosdyn::api::spot_cam::SetICEConfigurationResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bosdyn {
namespace api {
namespace spot_cam {

enum ICEServer_servertype : int {
  ICEServer_servertype_UNKNOWN = 0,
  ICEServer_servertype_STUN = 1,
  ICEServer_servertype_TURN = 2,
  ICEServer_servertype_ICEServer_servertype_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ICEServer_servertype_ICEServer_servertype_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ICEServer_servertype_IsValid(int value);
constexpr ICEServer_servertype ICEServer_servertype_servertype_MIN = ICEServer_servertype_UNKNOWN;
constexpr ICEServer_servertype ICEServer_servertype_servertype_MAX = ICEServer_servertype_TURN;
constexpr int ICEServer_servertype_servertype_ARRAYSIZE = ICEServer_servertype_servertype_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ICEServer_servertype_descriptor();
template<typename T>
inline const std::string& ICEServer_servertype_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ICEServer_servertype>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ICEServer_servertype_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ICEServer_servertype_descriptor(), enum_t_value);
}
inline bool ICEServer_servertype_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ICEServer_servertype* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ICEServer_servertype>(
    ICEServer_servertype_descriptor(), name, value);
}
// ===================================================================

class NetworkTuple PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.NetworkTuple) */ {
 public:
  inline NetworkTuple() : NetworkTuple(nullptr) {}
  virtual ~NetworkTuple();

  NetworkTuple(const NetworkTuple& from);
  NetworkTuple(NetworkTuple&& from) noexcept
    : NetworkTuple() {
    *this = ::std::move(from);
  }

  inline NetworkTuple& operator=(const NetworkTuple& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkTuple& operator=(NetworkTuple&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetworkTuple& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkTuple* internal_default_instance() {
    return reinterpret_cast<const NetworkTuple*>(
               &_NetworkTuple_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NetworkTuple& a, NetworkTuple& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkTuple* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkTuple* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkTuple* New() const final {
    return CreateMaybeMessage<NetworkTuple>(nullptr);
  }

  NetworkTuple* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkTuple>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetworkTuple& from);
  void MergeFrom(const NetworkTuple& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkTuple* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.NetworkTuple";
  }
  protected:
  explicit NetworkTuple(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 2,
    kNetmaskFieldNumber = 3,
    kGatewayFieldNumber = 4,
    kMtuFieldNumber = 5,
  };
  // .google.protobuf.UInt32Value address = 2;
  bool has_address() const;
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  const PROTOBUF_NAMESPACE_ID::UInt32Value& address() const;
  PROTOBUF_NAMESPACE_ID::UInt32Value* release_address();
  PROTOBUF_NAMESPACE_ID::UInt32Value* mutable_address();
  void set_allocated_address(PROTOBUF_NAMESPACE_ID::UInt32Value* address);
  private:
  const PROTOBUF_NAMESPACE_ID::UInt32Value& _internal_address() const;
  PROTOBUF_NAMESPACE_ID::UInt32Value* _internal_mutable_address();
  public:
  void unsafe_arena_set_allocated_address(
      PROTOBUF_NAMESPACE_ID::UInt32Value* address);
  PROTOBUF_NAMESPACE_ID::UInt32Value* unsafe_arena_release_address();

  // .google.protobuf.UInt32Value netmask = 3;
  bool has_netmask() const;
  private:
  bool _internal_has_netmask() const;
  public:
  void clear_netmask();
  const PROTOBUF_NAMESPACE_ID::UInt32Value& netmask() const;
  PROTOBUF_NAMESPACE_ID::UInt32Value* release_netmask();
  PROTOBUF_NAMESPACE_ID::UInt32Value* mutable_netmask();
  void set_allocated_netmask(PROTOBUF_NAMESPACE_ID::UInt32Value* netmask);
  private:
  const PROTOBUF_NAMESPACE_ID::UInt32Value& _internal_netmask() const;
  PROTOBUF_NAMESPACE_ID::UInt32Value* _internal_mutable_netmask();
  public:
  void unsafe_arena_set_allocated_netmask(
      PROTOBUF_NAMESPACE_ID::UInt32Value* netmask);
  PROTOBUF_NAMESPACE_ID::UInt32Value* unsafe_arena_release_netmask();

  // .google.protobuf.UInt32Value gateway = 4;
  bool has_gateway() const;
  private:
  bool _internal_has_gateway() const;
  public:
  void clear_gateway();
  const PROTOBUF_NAMESPACE_ID::UInt32Value& gateway() const;
  PROTOBUF_NAMESPACE_ID::UInt32Value* release_gateway();
  PROTOBUF_NAMESPACE_ID::UInt32Value* mutable_gateway();
  void set_allocated_gateway(PROTOBUF_NAMESPACE_ID::UInt32Value* gateway);
  private:
  const PROTOBUF_NAMESPACE_ID::UInt32Value& _internal_gateway() const;
  PROTOBUF_NAMESPACE_ID::UInt32Value* _internal_mutable_gateway();
  public:
  void unsafe_arena_set_allocated_gateway(
      PROTOBUF_NAMESPACE_ID::UInt32Value* gateway);
  PROTOBUF_NAMESPACE_ID::UInt32Value* unsafe_arena_release_gateway();

  // .google.protobuf.UInt32Value mtu = 5;
  bool has_mtu() const;
  private:
  bool _internal_has_mtu() const;
  public:
  void clear_mtu();
  const PROTOBUF_NAMESPACE_ID::UInt32Value& mtu() const;
  PROTOBUF_NAMESPACE_ID::UInt32Value* release_mtu();
  PROTOBUF_NAMESPACE_ID::UInt32Value* mutable_mtu();
  void set_allocated_mtu(PROTOBUF_NAMESPACE_ID::UInt32Value* mtu);
  private:
  const PROTOBUF_NAMESPACE_ID::UInt32Value& _internal_mtu() const;
  PROTOBUF_NAMESPACE_ID::UInt32Value* _internal_mutable_mtu();
  public:
  void unsafe_arena_set_allocated_mtu(
      PROTOBUF_NAMESPACE_ID::UInt32Value* mtu);
  PROTOBUF_NAMESPACE_ID::UInt32Value* unsafe_arena_release_mtu();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.NetworkTuple)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::UInt32Value* address_;
  PROTOBUF_NAMESPACE_ID::UInt32Value* netmask_;
  PROTOBUF_NAMESPACE_ID::UInt32Value* gateway_;
  PROTOBUF_NAMESPACE_ID::UInt32Value* mtu_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto;
};
// -------------------------------------------------------------------

class GetNetworkSettingsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.GetNetworkSettingsRequest) */ {
 public:
  inline GetNetworkSettingsRequest() : GetNetworkSettingsRequest(nullptr) {}
  virtual ~GetNetworkSettingsRequest();

  GetNetworkSettingsRequest(const GetNetworkSettingsRequest& from);
  GetNetworkSettingsRequest(GetNetworkSettingsRequest&& from) noexcept
    : GetNetworkSettingsRequest() {
    *this = ::std::move(from);
  }

  inline GetNetworkSettingsRequest& operator=(const GetNetworkSettingsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNetworkSettingsRequest& operator=(GetNetworkSettingsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetNetworkSettingsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetNetworkSettingsRequest* internal_default_instance() {
    return reinterpret_cast<const GetNetworkSettingsRequest*>(
               &_GetNetworkSettingsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetNetworkSettingsRequest& a, GetNetworkSettingsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNetworkSettingsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNetworkSettingsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetNetworkSettingsRequest* New() const final {
    return CreateMaybeMessage<GetNetworkSettingsRequest>(nullptr);
  }

  GetNetworkSettingsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetNetworkSettingsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetNetworkSettingsRequest& from);
  void MergeFrom(const GetNetworkSettingsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNetworkSettingsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.GetNetworkSettingsRequest";
  }
  protected:
  explicit GetNetworkSettingsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.GetNetworkSettingsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::RequestHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto;
};
// -------------------------------------------------------------------

class GetNetworkSettingsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.GetNetworkSettingsResponse) */ {
 public:
  inline GetNetworkSettingsResponse() : GetNetworkSettingsResponse(nullptr) {}
  virtual ~GetNetworkSettingsResponse();

  GetNetworkSettingsResponse(const GetNetworkSettingsResponse& from);
  GetNetworkSettingsResponse(GetNetworkSettingsResponse&& from) noexcept
    : GetNetworkSettingsResponse() {
    *this = ::std::move(from);
  }

  inline GetNetworkSettingsResponse& operator=(const GetNetworkSettingsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNetworkSettingsResponse& operator=(GetNetworkSettingsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetNetworkSettingsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetNetworkSettingsResponse* internal_default_instance() {
    return reinterpret_cast<const GetNetworkSettingsResponse*>(
               &_GetNetworkSettingsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetNetworkSettingsResponse& a, GetNetworkSettingsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNetworkSettingsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNetworkSettingsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetNetworkSettingsResponse* New() const final {
    return CreateMaybeMessage<GetNetworkSettingsResponse>(nullptr);
  }

  GetNetworkSettingsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetNetworkSettingsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetNetworkSettingsResponse& from);
  void MergeFrom(const GetNetworkSettingsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNetworkSettingsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.GetNetworkSettingsResponse";
  }
  protected:
  explicit GetNetworkSettingsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kSettingsFieldNumber = 2,
  };
  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // .bosdyn.api.spot_cam.NetworkTuple settings = 2;
  bool has_settings() const;
  private:
  bool _internal_has_settings() const;
  public:
  void clear_settings();
  const ::bosdyn::api::spot_cam::NetworkTuple& settings() const;
  ::bosdyn::api::spot_cam::NetworkTuple* release_settings();
  ::bosdyn::api::spot_cam::NetworkTuple* mutable_settings();
  void set_allocated_settings(::bosdyn::api::spot_cam::NetworkTuple* settings);
  private:
  const ::bosdyn::api::spot_cam::NetworkTuple& _internal_settings() const;
  ::bosdyn::api::spot_cam::NetworkTuple* _internal_mutable_settings();
  public:
  void unsafe_arena_set_allocated_settings(
      ::bosdyn::api::spot_cam::NetworkTuple* settings);
  ::bosdyn::api::spot_cam::NetworkTuple* unsafe_arena_release_settings();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.GetNetworkSettingsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::ResponseHeader* header_;
  ::bosdyn::api::spot_cam::NetworkTuple* settings_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto;
};
// -------------------------------------------------------------------

class GetSSLCertRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.GetSSLCertRequest) */ {
 public:
  inline GetSSLCertRequest() : GetSSLCertRequest(nullptr) {}
  virtual ~GetSSLCertRequest();

  GetSSLCertRequest(const GetSSLCertRequest& from);
  GetSSLCertRequest(GetSSLCertRequest&& from) noexcept
    : GetSSLCertRequest() {
    *this = ::std::move(from);
  }

  inline GetSSLCertRequest& operator=(const GetSSLCertRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSSLCertRequest& operator=(GetSSLCertRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSSLCertRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSSLCertRequest* internal_default_instance() {
    return reinterpret_cast<const GetSSLCertRequest*>(
               &_GetSSLCertRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetSSLCertRequest& a, GetSSLCertRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSSLCertRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSSLCertRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSSLCertRequest* New() const final {
    return CreateMaybeMessage<GetSSLCertRequest>(nullptr);
  }

  GetSSLCertRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSSLCertRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSSLCertRequest& from);
  void MergeFrom(const GetSSLCertRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSSLCertRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.GetSSLCertRequest";
  }
  protected:
  explicit GetSSLCertRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.GetSSLCertRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::RequestHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto;
};
// -------------------------------------------------------------------

class GetSSLCertResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.GetSSLCertResponse) */ {
 public:
  inline GetSSLCertResponse() : GetSSLCertResponse(nullptr) {}
  virtual ~GetSSLCertResponse();

  GetSSLCertResponse(const GetSSLCertResponse& from);
  GetSSLCertResponse(GetSSLCertResponse&& from) noexcept
    : GetSSLCertResponse() {
    *this = ::std::move(from);
  }

  inline GetSSLCertResponse& operator=(const GetSSLCertResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSSLCertResponse& operator=(GetSSLCertResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSSLCertResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSSLCertResponse* internal_default_instance() {
    return reinterpret_cast<const GetSSLCertResponse*>(
               &_GetSSLCertResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetSSLCertResponse& a, GetSSLCertResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSSLCertResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSSLCertResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSSLCertResponse* New() const final {
    return CreateMaybeMessage<GetSSLCertResponse>(nullptr);
  }

  GetSSLCertResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSSLCertResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSSLCertResponse& from);
  void MergeFrom(const GetSSLCertResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSSLCertResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.GetSSLCertResponse";
  }
  protected:
  explicit GetSSLCertResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCertificateFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // string certificate = 2;
  void clear_certificate();
  const std::string& certificate() const;
  void set_certificate(const std::string& value);
  void set_certificate(std::string&& value);
  void set_certificate(const char* value);
  void set_certificate(const char* value, size_t size);
  std::string* mutable_certificate();
  std::string* release_certificate();
  void set_allocated_certificate(std::string* certificate);
  private:
  const std::string& _internal_certificate() const;
  void _internal_set_certificate(const std::string& value);
  std::string* _internal_mutable_certificate();
  public:

  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.GetSSLCertResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr certificate_;
  ::bosdyn::api::ResponseHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto;
};
// -------------------------------------------------------------------

class ICEServer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.ICEServer) */ {
 public:
  inline ICEServer() : ICEServer(nullptr) {}
  virtual ~ICEServer();

  ICEServer(const ICEServer& from);
  ICEServer(ICEServer&& from) noexcept
    : ICEServer() {
    *this = ::std::move(from);
  }

  inline ICEServer& operator=(const ICEServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ICEServer& operator=(ICEServer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ICEServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ICEServer* internal_default_instance() {
    return reinterpret_cast<const ICEServer*>(
               &_ICEServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ICEServer& a, ICEServer& b) {
    a.Swap(&b);
  }
  inline void Swap(ICEServer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ICEServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ICEServer* New() const final {
    return CreateMaybeMessage<ICEServer>(nullptr);
  }

  ICEServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ICEServer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ICEServer& from);
  void MergeFrom(const ICEServer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ICEServer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.ICEServer";
  }
  protected:
  explicit ICEServer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ICEServer_servertype servertype;
  static constexpr servertype UNKNOWN =
    ICEServer_servertype_UNKNOWN;
  static constexpr servertype STUN =
    ICEServer_servertype_STUN;
  static constexpr servertype TURN =
    ICEServer_servertype_TURN;
  static inline bool servertype_IsValid(int value) {
    return ICEServer_servertype_IsValid(value);
  }
  static constexpr servertype servertype_MIN =
    ICEServer_servertype_servertype_MIN;
  static constexpr servertype servertype_MAX =
    ICEServer_servertype_servertype_MAX;
  static constexpr int servertype_ARRAYSIZE =
    ICEServer_servertype_servertype_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  servertype_descriptor() {
    return ICEServer_servertype_descriptor();
  }
  template<typename T>
  static inline const std::string& servertype_Name(T enum_t_value) {
    static_assert(::std::is_same<T, servertype>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function servertype_Name.");
    return ICEServer_servertype_Name(enum_t_value);
  }
  static inline bool servertype_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      servertype* value) {
    return ICEServer_servertype_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 2,
    kTypeFieldNumber = 1,
    kPortFieldNumber = 3,
  };
  // string address = 2;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // .bosdyn.api.spot_cam.ICEServer.servertype type = 1;
  void clear_type();
  ::bosdyn::api::spot_cam::ICEServer_servertype type() const;
  void set_type(::bosdyn::api::spot_cam::ICEServer_servertype value);
  private:
  ::bosdyn::api::spot_cam::ICEServer_servertype _internal_type() const;
  void _internal_set_type(::bosdyn::api::spot_cam::ICEServer_servertype value);
  public:

  // uint32 port = 3;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.ICEServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto;
};
// -------------------------------------------------------------------

class GetICEConfigurationRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.GetICEConfigurationRequest) */ {
 public:
  inline GetICEConfigurationRequest() : GetICEConfigurationRequest(nullptr) {}
  virtual ~GetICEConfigurationRequest();

  GetICEConfigurationRequest(const GetICEConfigurationRequest& from);
  GetICEConfigurationRequest(GetICEConfigurationRequest&& from) noexcept
    : GetICEConfigurationRequest() {
    *this = ::std::move(from);
  }

  inline GetICEConfigurationRequest& operator=(const GetICEConfigurationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetICEConfigurationRequest& operator=(GetICEConfigurationRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetICEConfigurationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetICEConfigurationRequest* internal_default_instance() {
    return reinterpret_cast<const GetICEConfigurationRequest*>(
               &_GetICEConfigurationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetICEConfigurationRequest& a, GetICEConfigurationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetICEConfigurationRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetICEConfigurationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetICEConfigurationRequest* New() const final {
    return CreateMaybeMessage<GetICEConfigurationRequest>(nullptr);
  }

  GetICEConfigurationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetICEConfigurationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetICEConfigurationRequest& from);
  void MergeFrom(const GetICEConfigurationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetICEConfigurationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.GetICEConfigurationRequest";
  }
  protected:
  explicit GetICEConfigurationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.GetICEConfigurationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::RequestHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto;
};
// -------------------------------------------------------------------

class GetICEConfigurationResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.GetICEConfigurationResponse) */ {
 public:
  inline GetICEConfigurationResponse() : GetICEConfigurationResponse(nullptr) {}
  virtual ~GetICEConfigurationResponse();

  GetICEConfigurationResponse(const GetICEConfigurationResponse& from);
  GetICEConfigurationResponse(GetICEConfigurationResponse&& from) noexcept
    : GetICEConfigurationResponse() {
    *this = ::std::move(from);
  }

  inline GetICEConfigurationResponse& operator=(const GetICEConfigurationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetICEConfigurationResponse& operator=(GetICEConfigurationResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetICEConfigurationResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetICEConfigurationResponse* internal_default_instance() {
    return reinterpret_cast<const GetICEConfigurationResponse*>(
               &_GetICEConfigurationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetICEConfigurationResponse& a, GetICEConfigurationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetICEConfigurationResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetICEConfigurationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetICEConfigurationResponse* New() const final {
    return CreateMaybeMessage<GetICEConfigurationResponse>(nullptr);
  }

  GetICEConfigurationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetICEConfigurationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetICEConfigurationResponse& from);
  void MergeFrom(const GetICEConfigurationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetICEConfigurationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.GetICEConfigurationResponse";
  }
  protected:
  explicit GetICEConfigurationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServersFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .bosdyn.api.spot_cam.ICEServer servers = 2;
  int servers_size() const;
  private:
  int _internal_servers_size() const;
  public:
  void clear_servers();
  ::bosdyn::api::spot_cam::ICEServer* mutable_servers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::spot_cam::ICEServer >*
      mutable_servers();
  private:
  const ::bosdyn::api::spot_cam::ICEServer& _internal_servers(int index) const;
  ::bosdyn::api::spot_cam::ICEServer* _internal_add_servers();
  public:
  const ::bosdyn::api::spot_cam::ICEServer& servers(int index) const;
  ::bosdyn::api::spot_cam::ICEServer* add_servers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::spot_cam::ICEServer >&
      servers() const;

  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.GetICEConfigurationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::spot_cam::ICEServer > servers_;
  ::bosdyn::api::ResponseHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto;
};
// -------------------------------------------------------------------

class SetICEConfigurationRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.SetICEConfigurationRequest) */ {
 public:
  inline SetICEConfigurationRequest() : SetICEConfigurationRequest(nullptr) {}
  virtual ~SetICEConfigurationRequest();

  SetICEConfigurationRequest(const SetICEConfigurationRequest& from);
  SetICEConfigurationRequest(SetICEConfigurationRequest&& from) noexcept
    : SetICEConfigurationRequest() {
    *this = ::std::move(from);
  }

  inline SetICEConfigurationRequest& operator=(const SetICEConfigurationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetICEConfigurationRequest& operator=(SetICEConfigurationRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetICEConfigurationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetICEConfigurationRequest* internal_default_instance() {
    return reinterpret_cast<const SetICEConfigurationRequest*>(
               &_SetICEConfigurationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SetICEConfigurationRequest& a, SetICEConfigurationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetICEConfigurationRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetICEConfigurationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetICEConfigurationRequest* New() const final {
    return CreateMaybeMessage<SetICEConfigurationRequest>(nullptr);
  }

  SetICEConfigurationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetICEConfigurationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetICEConfigurationRequest& from);
  void MergeFrom(const SetICEConfigurationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetICEConfigurationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.SetICEConfigurationRequest";
  }
  protected:
  explicit SetICEConfigurationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServersFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .bosdyn.api.spot_cam.ICEServer servers = 2;
  int servers_size() const;
  private:
  int _internal_servers_size() const;
  public:
  void clear_servers();
  ::bosdyn::api::spot_cam::ICEServer* mutable_servers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::spot_cam::ICEServer >*
      mutable_servers();
  private:
  const ::bosdyn::api::spot_cam::ICEServer& _internal_servers(int index) const;
  ::bosdyn::api::spot_cam::ICEServer* _internal_add_servers();
  public:
  const ::bosdyn::api::spot_cam::ICEServer& servers(int index) const;
  ::bosdyn::api::spot_cam::ICEServer* add_servers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::spot_cam::ICEServer >&
      servers() const;

  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.SetICEConfigurationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::spot_cam::ICEServer > servers_;
  ::bosdyn::api::RequestHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto;
};
// -------------------------------------------------------------------

class SetICEConfigurationResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.spot_cam.SetICEConfigurationResponse) */ {
 public:
  inline SetICEConfigurationResponse() : SetICEConfigurationResponse(nullptr) {}
  virtual ~SetICEConfigurationResponse();

  SetICEConfigurationResponse(const SetICEConfigurationResponse& from);
  SetICEConfigurationResponse(SetICEConfigurationResponse&& from) noexcept
    : SetICEConfigurationResponse() {
    *this = ::std::move(from);
  }

  inline SetICEConfigurationResponse& operator=(const SetICEConfigurationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetICEConfigurationResponse& operator=(SetICEConfigurationResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetICEConfigurationResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetICEConfigurationResponse* internal_default_instance() {
    return reinterpret_cast<const SetICEConfigurationResponse*>(
               &_SetICEConfigurationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SetICEConfigurationResponse& a, SetICEConfigurationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetICEConfigurationResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetICEConfigurationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetICEConfigurationResponse* New() const final {
    return CreateMaybeMessage<SetICEConfigurationResponse>(nullptr);
  }

  SetICEConfigurationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetICEConfigurationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetICEConfigurationResponse& from);
  void MergeFrom(const SetICEConfigurationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetICEConfigurationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.spot_cam.SetICEConfigurationResponse";
  }
  protected:
  explicit SetICEConfigurationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.spot_cam.SetICEConfigurationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::ResponseHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NetworkTuple

// .google.protobuf.UInt32Value address = 2;
inline bool NetworkTuple::_internal_has_address() const {
  return this != internal_default_instance() && address_ != nullptr;
}
inline bool NetworkTuple::has_address() const {
  return _internal_has_address();
}
inline const PROTOBUF_NAMESPACE_ID::UInt32Value& NetworkTuple::_internal_address() const {
  const PROTOBUF_NAMESPACE_ID::UInt32Value* p = address_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::UInt32Value*>(
      &PROTOBUF_NAMESPACE_ID::_UInt32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::UInt32Value& NetworkTuple::address() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.NetworkTuple.address)
  return _internal_address();
}
inline void NetworkTuple::unsafe_arena_set_allocated_address(
    PROTOBUF_NAMESPACE_ID::UInt32Value* address) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_);
  }
  address_ = address;
  if (address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.NetworkTuple.address)
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* NetworkTuple::release_address() {
  
  PROTOBUF_NAMESPACE_ID::UInt32Value* temp = address_;
  address_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* NetworkTuple::unsafe_arena_release_address() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.NetworkTuple.address)
  
  PROTOBUF_NAMESPACE_ID::UInt32Value* temp = address_;
  address_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* NetworkTuple::_internal_mutable_address() {
  
  if (address_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::UInt32Value>(GetArena());
    address_ = p;
  }
  return address_;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* NetworkTuple::mutable_address() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.NetworkTuple.address)
  return _internal_mutable_address();
}
inline void NetworkTuple::set_allocated_address(PROTOBUF_NAMESPACE_ID::UInt32Value* address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_);
  }
  if (address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address)->GetArena();
    if (message_arena != submessage_arena) {
      address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, address, submessage_arena);
    }
    
  } else {
    
  }
  address_ = address;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.NetworkTuple.address)
}

// .google.protobuf.UInt32Value netmask = 3;
inline bool NetworkTuple::_internal_has_netmask() const {
  return this != internal_default_instance() && netmask_ != nullptr;
}
inline bool NetworkTuple::has_netmask() const {
  return _internal_has_netmask();
}
inline const PROTOBUF_NAMESPACE_ID::UInt32Value& NetworkTuple::_internal_netmask() const {
  const PROTOBUF_NAMESPACE_ID::UInt32Value* p = netmask_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::UInt32Value*>(
      &PROTOBUF_NAMESPACE_ID::_UInt32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::UInt32Value& NetworkTuple::netmask() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.NetworkTuple.netmask)
  return _internal_netmask();
}
inline void NetworkTuple::unsafe_arena_set_allocated_netmask(
    PROTOBUF_NAMESPACE_ID::UInt32Value* netmask) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(netmask_);
  }
  netmask_ = netmask;
  if (netmask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.NetworkTuple.netmask)
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* NetworkTuple::release_netmask() {
  
  PROTOBUF_NAMESPACE_ID::UInt32Value* temp = netmask_;
  netmask_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* NetworkTuple::unsafe_arena_release_netmask() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.NetworkTuple.netmask)
  
  PROTOBUF_NAMESPACE_ID::UInt32Value* temp = netmask_;
  netmask_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* NetworkTuple::_internal_mutable_netmask() {
  
  if (netmask_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::UInt32Value>(GetArena());
    netmask_ = p;
  }
  return netmask_;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* NetworkTuple::mutable_netmask() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.NetworkTuple.netmask)
  return _internal_mutable_netmask();
}
inline void NetworkTuple::set_allocated_netmask(PROTOBUF_NAMESPACE_ID::UInt32Value* netmask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(netmask_);
  }
  if (netmask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(netmask)->GetArena();
    if (message_arena != submessage_arena) {
      netmask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, netmask, submessage_arena);
    }
    
  } else {
    
  }
  netmask_ = netmask;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.NetworkTuple.netmask)
}

// .google.protobuf.UInt32Value gateway = 4;
inline bool NetworkTuple::_internal_has_gateway() const {
  return this != internal_default_instance() && gateway_ != nullptr;
}
inline bool NetworkTuple::has_gateway() const {
  return _internal_has_gateway();
}
inline const PROTOBUF_NAMESPACE_ID::UInt32Value& NetworkTuple::_internal_gateway() const {
  const PROTOBUF_NAMESPACE_ID::UInt32Value* p = gateway_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::UInt32Value*>(
      &PROTOBUF_NAMESPACE_ID::_UInt32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::UInt32Value& NetworkTuple::gateway() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.NetworkTuple.gateway)
  return _internal_gateway();
}
inline void NetworkTuple::unsafe_arena_set_allocated_gateway(
    PROTOBUF_NAMESPACE_ID::UInt32Value* gateway) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gateway_);
  }
  gateway_ = gateway;
  if (gateway) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.NetworkTuple.gateway)
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* NetworkTuple::release_gateway() {
  
  PROTOBUF_NAMESPACE_ID::UInt32Value* temp = gateway_;
  gateway_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* NetworkTuple::unsafe_arena_release_gateway() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.NetworkTuple.gateway)
  
  PROTOBUF_NAMESPACE_ID::UInt32Value* temp = gateway_;
  gateway_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* NetworkTuple::_internal_mutable_gateway() {
  
  if (gateway_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::UInt32Value>(GetArena());
    gateway_ = p;
  }
  return gateway_;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* NetworkTuple::mutable_gateway() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.NetworkTuple.gateway)
  return _internal_mutable_gateway();
}
inline void NetworkTuple::set_allocated_gateway(PROTOBUF_NAMESPACE_ID::UInt32Value* gateway) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gateway_);
  }
  if (gateway) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gateway)->GetArena();
    if (message_arena != submessage_arena) {
      gateway = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gateway, submessage_arena);
    }
    
  } else {
    
  }
  gateway_ = gateway;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.NetworkTuple.gateway)
}

// .google.protobuf.UInt32Value mtu = 5;
inline bool NetworkTuple::_internal_has_mtu() const {
  return this != internal_default_instance() && mtu_ != nullptr;
}
inline bool NetworkTuple::has_mtu() const {
  return _internal_has_mtu();
}
inline const PROTOBUF_NAMESPACE_ID::UInt32Value& NetworkTuple::_internal_mtu() const {
  const PROTOBUF_NAMESPACE_ID::UInt32Value* p = mtu_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::UInt32Value*>(
      &PROTOBUF_NAMESPACE_ID::_UInt32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::UInt32Value& NetworkTuple::mtu() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.NetworkTuple.mtu)
  return _internal_mtu();
}
inline void NetworkTuple::unsafe_arena_set_allocated_mtu(
    PROTOBUF_NAMESPACE_ID::UInt32Value* mtu) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mtu_);
  }
  mtu_ = mtu;
  if (mtu) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.NetworkTuple.mtu)
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* NetworkTuple::release_mtu() {
  
  PROTOBUF_NAMESPACE_ID::UInt32Value* temp = mtu_;
  mtu_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* NetworkTuple::unsafe_arena_release_mtu() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.NetworkTuple.mtu)
  
  PROTOBUF_NAMESPACE_ID::UInt32Value* temp = mtu_;
  mtu_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* NetworkTuple::_internal_mutable_mtu() {
  
  if (mtu_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::UInt32Value>(GetArena());
    mtu_ = p;
  }
  return mtu_;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* NetworkTuple::mutable_mtu() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.NetworkTuple.mtu)
  return _internal_mutable_mtu();
}
inline void NetworkTuple::set_allocated_mtu(PROTOBUF_NAMESPACE_ID::UInt32Value* mtu) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mtu_);
  }
  if (mtu) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mtu)->GetArena();
    if (message_arena != submessage_arena) {
      mtu = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mtu, submessage_arena);
    }
    
  } else {
    
  }
  mtu_ = mtu;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.NetworkTuple.mtu)
}

// -------------------------------------------------------------------

// GetNetworkSettingsRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool GetNetworkSettingsRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool GetNetworkSettingsRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& GetNetworkSettingsRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::RequestHeader*>(
      &::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& GetNetworkSettingsRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.GetNetworkSettingsRequest.header)
  return _internal_header();
}
inline void GetNetworkSettingsRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.GetNetworkSettingsRequest.header)
}
inline ::bosdyn::api::RequestHeader* GetNetworkSettingsRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::RequestHeader* GetNetworkSettingsRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.GetNetworkSettingsRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* GetNetworkSettingsRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::RequestHeader* GetNetworkSettingsRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.GetNetworkSettingsRequest.header)
  return _internal_mutable_header();
}
inline void GetNetworkSettingsRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.GetNetworkSettingsRequest.header)
}

// -------------------------------------------------------------------

// GetNetworkSettingsResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool GetNetworkSettingsResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool GetNetworkSettingsResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& GetNetworkSettingsResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::ResponseHeader*>(
      &::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& GetNetworkSettingsResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.GetNetworkSettingsResponse.header)
  return _internal_header();
}
inline void GetNetworkSettingsResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.GetNetworkSettingsResponse.header)
}
inline ::bosdyn::api::ResponseHeader* GetNetworkSettingsResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::ResponseHeader* GetNetworkSettingsResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.GetNetworkSettingsResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* GetNetworkSettingsResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::ResponseHeader* GetNetworkSettingsResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.GetNetworkSettingsResponse.header)
  return _internal_mutable_header();
}
inline void GetNetworkSettingsResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.GetNetworkSettingsResponse.header)
}

// .bosdyn.api.spot_cam.NetworkTuple settings = 2;
inline bool GetNetworkSettingsResponse::_internal_has_settings() const {
  return this != internal_default_instance() && settings_ != nullptr;
}
inline bool GetNetworkSettingsResponse::has_settings() const {
  return _internal_has_settings();
}
inline void GetNetworkSettingsResponse::clear_settings() {
  if (GetArena() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
}
inline const ::bosdyn::api::spot_cam::NetworkTuple& GetNetworkSettingsResponse::_internal_settings() const {
  const ::bosdyn::api::spot_cam::NetworkTuple* p = settings_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::spot_cam::NetworkTuple*>(
      &::bosdyn::api::spot_cam::_NetworkTuple_default_instance_);
}
inline const ::bosdyn::api::spot_cam::NetworkTuple& GetNetworkSettingsResponse::settings() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.GetNetworkSettingsResponse.settings)
  return _internal_settings();
}
inline void GetNetworkSettingsResponse::unsafe_arena_set_allocated_settings(
    ::bosdyn::api::spot_cam::NetworkTuple* settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(settings_);
  }
  settings_ = settings;
  if (settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.GetNetworkSettingsResponse.settings)
}
inline ::bosdyn::api::spot_cam::NetworkTuple* GetNetworkSettingsResponse::release_settings() {
  
  ::bosdyn::api::spot_cam::NetworkTuple* temp = settings_;
  settings_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::spot_cam::NetworkTuple* GetNetworkSettingsResponse::unsafe_arena_release_settings() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.GetNetworkSettingsResponse.settings)
  
  ::bosdyn::api::spot_cam::NetworkTuple* temp = settings_;
  settings_ = nullptr;
  return temp;
}
inline ::bosdyn::api::spot_cam::NetworkTuple* GetNetworkSettingsResponse::_internal_mutable_settings() {
  
  if (settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::spot_cam::NetworkTuple>(GetArena());
    settings_ = p;
  }
  return settings_;
}
inline ::bosdyn::api::spot_cam::NetworkTuple* GetNetworkSettingsResponse::mutable_settings() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.GetNetworkSettingsResponse.settings)
  return _internal_mutable_settings();
}
inline void GetNetworkSettingsResponse::set_allocated_settings(::bosdyn::api::spot_cam::NetworkTuple* settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete settings_;
  }
  if (settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(settings);
    if (message_arena != submessage_arena) {
      settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    
  } else {
    
  }
  settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.GetNetworkSettingsResponse.settings)
}

// -------------------------------------------------------------------

// GetSSLCertRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool GetSSLCertRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool GetSSLCertRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& GetSSLCertRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::RequestHeader*>(
      &::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& GetSSLCertRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.GetSSLCertRequest.header)
  return _internal_header();
}
inline void GetSSLCertRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.GetSSLCertRequest.header)
}
inline ::bosdyn::api::RequestHeader* GetSSLCertRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::RequestHeader* GetSSLCertRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.GetSSLCertRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* GetSSLCertRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::RequestHeader* GetSSLCertRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.GetSSLCertRequest.header)
  return _internal_mutable_header();
}
inline void GetSSLCertRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.GetSSLCertRequest.header)
}

// -------------------------------------------------------------------

// GetSSLCertResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool GetSSLCertResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool GetSSLCertResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& GetSSLCertResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::ResponseHeader*>(
      &::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& GetSSLCertResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.GetSSLCertResponse.header)
  return _internal_header();
}
inline void GetSSLCertResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.GetSSLCertResponse.header)
}
inline ::bosdyn::api::ResponseHeader* GetSSLCertResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::ResponseHeader* GetSSLCertResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.GetSSLCertResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* GetSSLCertResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::ResponseHeader* GetSSLCertResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.GetSSLCertResponse.header)
  return _internal_mutable_header();
}
inline void GetSSLCertResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.GetSSLCertResponse.header)
}

// string certificate = 2;
inline void GetSSLCertResponse::clear_certificate() {
  certificate_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetSSLCertResponse::certificate() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.GetSSLCertResponse.certificate)
  return _internal_certificate();
}
inline void GetSSLCertResponse::set_certificate(const std::string& value) {
  _internal_set_certificate(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.spot_cam.GetSSLCertResponse.certificate)
}
inline std::string* GetSSLCertResponse::mutable_certificate() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.GetSSLCertResponse.certificate)
  return _internal_mutable_certificate();
}
inline const std::string& GetSSLCertResponse::_internal_certificate() const {
  return certificate_.Get();
}
inline void GetSSLCertResponse::_internal_set_certificate(const std::string& value) {
  
  certificate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetSSLCertResponse::set_certificate(std::string&& value) {
  
  certificate_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.spot_cam.GetSSLCertResponse.certificate)
}
inline void GetSSLCertResponse::set_certificate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  certificate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.spot_cam.GetSSLCertResponse.certificate)
}
inline void GetSSLCertResponse::set_certificate(const char* value,
    size_t size) {
  
  certificate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.spot_cam.GetSSLCertResponse.certificate)
}
inline std::string* GetSSLCertResponse::_internal_mutable_certificate() {
  
  return certificate_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetSSLCertResponse::release_certificate() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.GetSSLCertResponse.certificate)
  return certificate_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSSLCertResponse::set_allocated_certificate(std::string* certificate) {
  if (certificate != nullptr) {
    
  } else {
    
  }
  certificate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), certificate,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.GetSSLCertResponse.certificate)
}

// -------------------------------------------------------------------

// ICEServer

// .bosdyn.api.spot_cam.ICEServer.servertype type = 1;
inline void ICEServer::clear_type() {
  type_ = 0;
}
inline ::bosdyn::api::spot_cam::ICEServer_servertype ICEServer::_internal_type() const {
  return static_cast< ::bosdyn::api::spot_cam::ICEServer_servertype >(type_);
}
inline ::bosdyn::api::spot_cam::ICEServer_servertype ICEServer::type() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.ICEServer.type)
  return _internal_type();
}
inline void ICEServer::_internal_set_type(::bosdyn::api::spot_cam::ICEServer_servertype value) {
  
  type_ = value;
}
inline void ICEServer::set_type(::bosdyn::api::spot_cam::ICEServer_servertype value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.spot_cam.ICEServer.type)
}

// string address = 2;
inline void ICEServer::clear_address() {
  address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ICEServer::address() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.ICEServer.address)
  return _internal_address();
}
inline void ICEServer::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.spot_cam.ICEServer.address)
}
inline std::string* ICEServer::mutable_address() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.ICEServer.address)
  return _internal_mutable_address();
}
inline const std::string& ICEServer::_internal_address() const {
  return address_.Get();
}
inline void ICEServer::_internal_set_address(const std::string& value) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ICEServer::set_address(std::string&& value) {
  
  address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.spot_cam.ICEServer.address)
}
inline void ICEServer::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.spot_cam.ICEServer.address)
}
inline void ICEServer::set_address(const char* value,
    size_t size) {
  
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.spot_cam.ICEServer.address)
}
inline std::string* ICEServer::_internal_mutable_address() {
  
  return address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ICEServer::release_address() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.ICEServer.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ICEServer::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.ICEServer.address)
}

// uint32 port = 3;
inline void ICEServer::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ICEServer::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ICEServer::port() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.ICEServer.port)
  return _internal_port();
}
inline void ICEServer::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void ICEServer::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.spot_cam.ICEServer.port)
}

// -------------------------------------------------------------------

// GetICEConfigurationRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool GetICEConfigurationRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool GetICEConfigurationRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& GetICEConfigurationRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::RequestHeader*>(
      &::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& GetICEConfigurationRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.GetICEConfigurationRequest.header)
  return _internal_header();
}
inline void GetICEConfigurationRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.GetICEConfigurationRequest.header)
}
inline ::bosdyn::api::RequestHeader* GetICEConfigurationRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::RequestHeader* GetICEConfigurationRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.GetICEConfigurationRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* GetICEConfigurationRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::RequestHeader* GetICEConfigurationRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.GetICEConfigurationRequest.header)
  return _internal_mutable_header();
}
inline void GetICEConfigurationRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.GetICEConfigurationRequest.header)
}

// -------------------------------------------------------------------

// GetICEConfigurationResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool GetICEConfigurationResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool GetICEConfigurationResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& GetICEConfigurationResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::ResponseHeader*>(
      &::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& GetICEConfigurationResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.GetICEConfigurationResponse.header)
  return _internal_header();
}
inline void GetICEConfigurationResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.GetICEConfigurationResponse.header)
}
inline ::bosdyn::api::ResponseHeader* GetICEConfigurationResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::ResponseHeader* GetICEConfigurationResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.GetICEConfigurationResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* GetICEConfigurationResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::ResponseHeader* GetICEConfigurationResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.GetICEConfigurationResponse.header)
  return _internal_mutable_header();
}
inline void GetICEConfigurationResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.GetICEConfigurationResponse.header)
}

// repeated .bosdyn.api.spot_cam.ICEServer servers = 2;
inline int GetICEConfigurationResponse::_internal_servers_size() const {
  return servers_.size();
}
inline int GetICEConfigurationResponse::servers_size() const {
  return _internal_servers_size();
}
inline void GetICEConfigurationResponse::clear_servers() {
  servers_.Clear();
}
inline ::bosdyn::api::spot_cam::ICEServer* GetICEConfigurationResponse::mutable_servers(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.GetICEConfigurationResponse.servers)
  return servers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::spot_cam::ICEServer >*
GetICEConfigurationResponse::mutable_servers() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.spot_cam.GetICEConfigurationResponse.servers)
  return &servers_;
}
inline const ::bosdyn::api::spot_cam::ICEServer& GetICEConfigurationResponse::_internal_servers(int index) const {
  return servers_.Get(index);
}
inline const ::bosdyn::api::spot_cam::ICEServer& GetICEConfigurationResponse::servers(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.GetICEConfigurationResponse.servers)
  return _internal_servers(index);
}
inline ::bosdyn::api::spot_cam::ICEServer* GetICEConfigurationResponse::_internal_add_servers() {
  return servers_.Add();
}
inline ::bosdyn::api::spot_cam::ICEServer* GetICEConfigurationResponse::add_servers() {
  // @@protoc_insertion_point(field_add:bosdyn.api.spot_cam.GetICEConfigurationResponse.servers)
  return _internal_add_servers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::spot_cam::ICEServer >&
GetICEConfigurationResponse::servers() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.spot_cam.GetICEConfigurationResponse.servers)
  return servers_;
}

// -------------------------------------------------------------------

// SetICEConfigurationRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool SetICEConfigurationRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool SetICEConfigurationRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& SetICEConfigurationRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::RequestHeader*>(
      &::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& SetICEConfigurationRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.SetICEConfigurationRequest.header)
  return _internal_header();
}
inline void SetICEConfigurationRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.SetICEConfigurationRequest.header)
}
inline ::bosdyn::api::RequestHeader* SetICEConfigurationRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::RequestHeader* SetICEConfigurationRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.SetICEConfigurationRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* SetICEConfigurationRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::RequestHeader* SetICEConfigurationRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.SetICEConfigurationRequest.header)
  return _internal_mutable_header();
}
inline void SetICEConfigurationRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.SetICEConfigurationRequest.header)
}

// repeated .bosdyn.api.spot_cam.ICEServer servers = 2;
inline int SetICEConfigurationRequest::_internal_servers_size() const {
  return servers_.size();
}
inline int SetICEConfigurationRequest::servers_size() const {
  return _internal_servers_size();
}
inline void SetICEConfigurationRequest::clear_servers() {
  servers_.Clear();
}
inline ::bosdyn::api::spot_cam::ICEServer* SetICEConfigurationRequest::mutable_servers(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.SetICEConfigurationRequest.servers)
  return servers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::spot_cam::ICEServer >*
SetICEConfigurationRequest::mutable_servers() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.spot_cam.SetICEConfigurationRequest.servers)
  return &servers_;
}
inline const ::bosdyn::api::spot_cam::ICEServer& SetICEConfigurationRequest::_internal_servers(int index) const {
  return servers_.Get(index);
}
inline const ::bosdyn::api::spot_cam::ICEServer& SetICEConfigurationRequest::servers(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.SetICEConfigurationRequest.servers)
  return _internal_servers(index);
}
inline ::bosdyn::api::spot_cam::ICEServer* SetICEConfigurationRequest::_internal_add_servers() {
  return servers_.Add();
}
inline ::bosdyn::api::spot_cam::ICEServer* SetICEConfigurationRequest::add_servers() {
  // @@protoc_insertion_point(field_add:bosdyn.api.spot_cam.SetICEConfigurationRequest.servers)
  return _internal_add_servers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::spot_cam::ICEServer >&
SetICEConfigurationRequest::servers() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.spot_cam.SetICEConfigurationRequest.servers)
  return servers_;
}

// -------------------------------------------------------------------

// SetICEConfigurationResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool SetICEConfigurationResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool SetICEConfigurationResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& SetICEConfigurationResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::ResponseHeader*>(
      &::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& SetICEConfigurationResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.spot_cam.SetICEConfigurationResponse.header)
  return _internal_header();
}
inline void SetICEConfigurationResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.spot_cam.SetICEConfigurationResponse.header)
}
inline ::bosdyn::api::ResponseHeader* SetICEConfigurationResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::ResponseHeader* SetICEConfigurationResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.spot_cam.SetICEConfigurationResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* SetICEConfigurationResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::ResponseHeader* SetICEConfigurationResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.spot_cam.SetICEConfigurationResponse.header)
  return _internal_mutable_header();
}
inline void SetICEConfigurationResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.spot_cam.SetICEConfigurationResponse.header)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace spot_cam
}  // namespace api
}  // namespace bosdyn

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bosdyn::api::spot_cam::ICEServer_servertype> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::spot_cam::ICEServer_servertype>() {
  return ::bosdyn::api::spot_cam::ICEServer_servertype_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fspot_5fcam_2fnetwork_2eproto
