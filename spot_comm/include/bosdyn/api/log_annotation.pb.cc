// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/log_annotation.proto

#include "bosdyn/api/log_annotation.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2flog_5fannotation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LogAnnotationLogBlob_bosdyn_2fapi_2flog_5fannotation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2flog_5fannotation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LogAnnotationOperatorMessage_bosdyn_2fapi_2flog_5fannotation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2flog_5fannotation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LogAnnotationTextMessage_bosdyn_2fapi_2flog_5fannotation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2flog_5fannotation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_LogAnnotations_bosdyn_2fapi_2flog_5fannotation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace bosdyn {
namespace api {
class AddLogAnnotationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddLogAnnotationRequest> _instance;
} _AddLogAnnotationRequest_default_instance_;
class LogAnnotationsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogAnnotations> _instance;
} _LogAnnotations_default_instance_;
class LogAnnotationTextMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogAnnotationTextMessage> _instance;
} _LogAnnotationTextMessage_default_instance_;
class LogAnnotationOperatorMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogAnnotationOperatorMessage> _instance;
} _LogAnnotationOperatorMessage_default_instance_;
class LogAnnotationLogBlobDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogAnnotationLogBlob> _instance;
} _LogAnnotationLogBlob_default_instance_;
class AddLogAnnotationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddLogAnnotationResponse> _instance;
} _AddLogAnnotationResponse_default_instance_;
}  // namespace api
}  // namespace bosdyn
static void InitDefaultsscc_info_AddLogAnnotationRequest_bosdyn_2fapi_2flog_5fannotation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_AddLogAnnotationRequest_default_instance_;
    new (ptr) ::bosdyn::api::AddLogAnnotationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::AddLogAnnotationRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AddLogAnnotationRequest_bosdyn_2fapi_2flog_5fannotation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AddLogAnnotationRequest_bosdyn_2fapi_2flog_5fannotation_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_LogAnnotations_bosdyn_2fapi_2flog_5fannotation_2eproto.base,}};

static void InitDefaultsscc_info_AddLogAnnotationResponse_bosdyn_2fapi_2flog_5fannotation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_AddLogAnnotationResponse_default_instance_;
    new (ptr) ::bosdyn::api::AddLogAnnotationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::AddLogAnnotationResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AddLogAnnotationResponse_bosdyn_2fapi_2flog_5fannotation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AddLogAnnotationResponse_bosdyn_2fapi_2flog_5fannotation_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_LogAnnotationLogBlob_bosdyn_2fapi_2flog_5fannotation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_LogAnnotationLogBlob_default_instance_;
    new (ptr) ::bosdyn::api::LogAnnotationLogBlob();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::LogAnnotationLogBlob::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LogAnnotationLogBlob_bosdyn_2fapi_2flog_5fannotation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LogAnnotationLogBlob_bosdyn_2fapi_2flog_5fannotation_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_LogAnnotationOperatorMessage_bosdyn_2fapi_2flog_5fannotation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_LogAnnotationOperatorMessage_default_instance_;
    new (ptr) ::bosdyn::api::LogAnnotationOperatorMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::LogAnnotationOperatorMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LogAnnotationOperatorMessage_bosdyn_2fapi_2flog_5fannotation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LogAnnotationOperatorMessage_bosdyn_2fapi_2flog_5fannotation_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_LogAnnotationTextMessage_bosdyn_2fapi_2flog_5fannotation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_LogAnnotationTextMessage_default_instance_;
    new (ptr) ::bosdyn::api::LogAnnotationTextMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::LogAnnotationTextMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LogAnnotationTextMessage_bosdyn_2fapi_2flog_5fannotation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LogAnnotationTextMessage_bosdyn_2fapi_2flog_5fannotation_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_LogAnnotations_bosdyn_2fapi_2flog_5fannotation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_LogAnnotations_default_instance_;
    new (ptr) ::bosdyn::api::LogAnnotations();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::LogAnnotations::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_LogAnnotations_bosdyn_2fapi_2flog_5fannotation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_LogAnnotations_bosdyn_2fapi_2flog_5fannotation_2eproto}, {
      &scc_info_LogAnnotationTextMessage_bosdyn_2fapi_2flog_5fannotation_2eproto.base,
      &scc_info_LogAnnotationOperatorMessage_bosdyn_2fapi_2flog_5fannotation_2eproto.base,
      &scc_info_LogAnnotationLogBlob_bosdyn_2fapi_2flog_5fannotation_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bosdyn_2fapi_2flog_5fannotation_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_bosdyn_2fapi_2flog_5fannotation_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bosdyn_2fapi_2flog_5fannotation_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bosdyn_2fapi_2flog_5fannotation_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::AddLogAnnotationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::AddLogAnnotationRequest, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::AddLogAnnotationRequest, annotations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::LogAnnotations, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::LogAnnotations, text_messages_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::LogAnnotations, operator_messages_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::LogAnnotations, blob_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::LogAnnotationTextMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::LogAnnotationTextMessage, message_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::LogAnnotationTextMessage, timestamp_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::LogAnnotationTextMessage, service_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::LogAnnotationTextMessage, level_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::LogAnnotationTextMessage, tag_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::LogAnnotationTextMessage, filename_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::LogAnnotationTextMessage, line_number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::LogAnnotationOperatorMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::LogAnnotationOperatorMessage, message_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::LogAnnotationOperatorMessage, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::LogAnnotationLogBlob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::LogAnnotationLogBlob, timestamp_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::LogAnnotationLogBlob, channel_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::LogAnnotationLogBlob, type_id_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::LogAnnotationLogBlob, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::AddLogAnnotationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::AddLogAnnotationResponse, header_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::bosdyn::api::AddLogAnnotationRequest)},
  { 7, -1, sizeof(::bosdyn::api::LogAnnotations)},
  { 15, -1, sizeof(::bosdyn::api::LogAnnotationTextMessage)},
  { 27, -1, sizeof(::bosdyn::api::LogAnnotationOperatorMessage)},
  { 34, -1, sizeof(::bosdyn::api::LogAnnotationLogBlob)},
  { 43, -1, sizeof(::bosdyn::api::AddLogAnnotationResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_AddLogAnnotationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_LogAnnotations_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_LogAnnotationTextMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_LogAnnotationOperatorMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_LogAnnotationLogBlob_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_AddLogAnnotationResponse_default_instance_),
};

const char descriptor_table_protodef_bosdyn_2fapi_2flog_5fannotation_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037bosdyn/api/log_annotation.proto\022\nbosdy"
  "n.api\032\027bosdyn/api/header.proto\032\037google/p"
  "rotobuf/timestamp.proto\"u\n\027AddLogAnnotat"
  "ionRequest\022)\n\006header\030\001 \001(\0132\031.bosdyn.api."
  "RequestHeader\022/\n\013annotations\030\002 \001(\0132\032.bos"
  "dyn.api.LogAnnotations\"\307\001\n\016LogAnnotation"
  "s\022;\n\rtext_messages\030\001 \003(\0132$.bosdyn.api.Lo"
  "gAnnotationTextMessage\022C\n\021operator_messa"
  "ges\030\002 \003(\0132(.bosdyn.api.LogAnnotationOper"
  "atorMessage\0223\n\tblob_data\030\003 \003(\0132 .bosdyn."
  "api.LogAnnotationLogBlob\"\270\002\n\030LogAnnotati"
  "onTextMessage\022\017\n\007message\030\001 \001(\t\022-\n\ttimest"
  "amp\030\002 \001(\0132\032.google.protobuf.Timestamp\022\017\n"
  "\007service\030\003 \001(\t\0229\n\005level\030\004 \001(\0162*.bosdyn.a"
  "pi.LogAnnotationTextMessage.Level\022\013\n\003tag"
  "\030\005 \001(\t\022\020\n\010filename\030\006 \001(\t\022\023\n\013line_number\030"
  "\007 \001(\005\"\\\n\005Level\022\021\n\rLEVEL_UNKNOWN\020\000\022\017\n\013LEV"
  "EL_DEBUG\020\001\022\016\n\nLEVEL_INFO\020\002\022\016\n\nLEVEL_WARN"
  "\020\003\022\017\n\013LEVEL_ERROR\020\004\"^\n\034LogAnnotationOper"
  "atorMessage\022\017\n\007message\030\001 \001(\t\022-\n\ttimestam"
  "p\030\002 \001(\0132\032.google.protobuf.Timestamp\"u\n\024L"
  "ogAnnotationLogBlob\022-\n\ttimestamp\030\001 \001(\0132\032"
  ".google.protobuf.Timestamp\022\017\n\007channel\030\002 "
  "\001(\t\022\017\n\007type_id\030\003 \001(\t\022\014\n\004data\030\004 \001(\014\"L\n\030Ad"
  "dLogAnnotationResponse\022*\n\006header\030\001 \001(\0132\032"
  ".bosdyn.api.ResponseHeaderJ\004\010\002\020\003B\024B\022LogA"
  "nnotationProtob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bosdyn_2fapi_2flog_5fannotation_2eproto_deps[2] = {
  &::descriptor_table_bosdyn_2fapi_2fheader_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bosdyn_2fapi_2flog_5fannotation_2eproto_sccs[6] = {
  &scc_info_AddLogAnnotationRequest_bosdyn_2fapi_2flog_5fannotation_2eproto.base,
  &scc_info_AddLogAnnotationResponse_bosdyn_2fapi_2flog_5fannotation_2eproto.base,
  &scc_info_LogAnnotationLogBlob_bosdyn_2fapi_2flog_5fannotation_2eproto.base,
  &scc_info_LogAnnotationOperatorMessage_bosdyn_2fapi_2flog_5fannotation_2eproto.base,
  &scc_info_LogAnnotationTextMessage_bosdyn_2fapi_2flog_5fannotation_2eproto.base,
  &scc_info_LogAnnotations_bosdyn_2fapi_2flog_5fannotation_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bosdyn_2fapi_2flog_5fannotation_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2flog_5fannotation_2eproto = {
  false, false, descriptor_table_protodef_bosdyn_2fapi_2flog_5fannotation_2eproto, "bosdyn/api/log_annotation.proto", 1062,
  &descriptor_table_bosdyn_2fapi_2flog_5fannotation_2eproto_once, descriptor_table_bosdyn_2fapi_2flog_5fannotation_2eproto_sccs, descriptor_table_bosdyn_2fapi_2flog_5fannotation_2eproto_deps, 6, 2,
  schemas, file_default_instances, TableStruct_bosdyn_2fapi_2flog_5fannotation_2eproto::offsets,
  file_level_metadata_bosdyn_2fapi_2flog_5fannotation_2eproto, 6, file_level_enum_descriptors_bosdyn_2fapi_2flog_5fannotation_2eproto, file_level_service_descriptors_bosdyn_2fapi_2flog_5fannotation_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bosdyn_2fapi_2flog_5fannotation_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bosdyn_2fapi_2flog_5fannotation_2eproto)), true);
namespace bosdyn {
namespace api {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogAnnotationTextMessage_Level_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2flog_5fannotation_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2flog_5fannotation_2eproto[0];
}
bool LogAnnotationTextMessage_Level_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LogAnnotationTextMessage_Level LogAnnotationTextMessage::LEVEL_UNKNOWN;
constexpr LogAnnotationTextMessage_Level LogAnnotationTextMessage::LEVEL_DEBUG;
constexpr LogAnnotationTextMessage_Level LogAnnotationTextMessage::LEVEL_INFO;
constexpr LogAnnotationTextMessage_Level LogAnnotationTextMessage::LEVEL_WARN;
constexpr LogAnnotationTextMessage_Level LogAnnotationTextMessage::LEVEL_ERROR;
constexpr LogAnnotationTextMessage_Level LogAnnotationTextMessage::Level_MIN;
constexpr LogAnnotationTextMessage_Level LogAnnotationTextMessage::Level_MAX;
constexpr int LogAnnotationTextMessage::Level_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void AddLogAnnotationRequest::InitAsDefaultInstance() {
  ::bosdyn::api::_AddLogAnnotationRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
  ::bosdyn::api::_AddLogAnnotationRequest_default_instance_._instance.get_mutable()->annotations_ = const_cast< ::bosdyn::api::LogAnnotations*>(
      ::bosdyn::api::LogAnnotations::internal_default_instance());
}
class AddLogAnnotationRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const AddLogAnnotationRequest* msg);
  static const ::bosdyn::api::LogAnnotations& annotations(const AddLogAnnotationRequest* msg);
};

const ::bosdyn::api::RequestHeader&
AddLogAnnotationRequest::_Internal::header(const AddLogAnnotationRequest* msg) {
  return *msg->header_;
}
const ::bosdyn::api::LogAnnotations&
AddLogAnnotationRequest::_Internal::annotations(const AddLogAnnotationRequest* msg) {
  return *msg->annotations_;
}
void AddLogAnnotationRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
AddLogAnnotationRequest::AddLogAnnotationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.AddLogAnnotationRequest)
}
AddLogAnnotationRequest::AddLogAnnotationRequest(const AddLogAnnotationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_annotations()) {
    annotations_ = new ::bosdyn::api::LogAnnotations(*from.annotations_);
  } else {
    annotations_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.AddLogAnnotationRequest)
}

void AddLogAnnotationRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddLogAnnotationRequest_bosdyn_2fapi_2flog_5fannotation_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&annotations_) -
      reinterpret_cast<char*>(&header_)) + sizeof(annotations_));
}

AddLogAnnotationRequest::~AddLogAnnotationRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.AddLogAnnotationRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddLogAnnotationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete annotations_;
}

void AddLogAnnotationRequest::ArenaDtor(void* object) {
  AddLogAnnotationRequest* _this = reinterpret_cast< AddLogAnnotationRequest* >(object);
  (void)_this;
}
void AddLogAnnotationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddLogAnnotationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddLogAnnotationRequest& AddLogAnnotationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddLogAnnotationRequest_bosdyn_2fapi_2flog_5fannotation_2eproto.base);
  return *internal_default_instance();
}


void AddLogAnnotationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.AddLogAnnotationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && annotations_ != nullptr) {
    delete annotations_;
  }
  annotations_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddLogAnnotationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.LogAnnotations annotations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_annotations(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddLogAnnotationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.AddLogAnnotationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.LogAnnotations annotations = 2;
  if (this->has_annotations()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::annotations(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.AddLogAnnotationRequest)
  return target;
}

size_t AddLogAnnotationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.AddLogAnnotationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.LogAnnotations annotations = 2;
  if (this->has_annotations()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *annotations_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddLogAnnotationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.AddLogAnnotationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddLogAnnotationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddLogAnnotationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.AddLogAnnotationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.AddLogAnnotationRequest)
    MergeFrom(*source);
  }
}

void AddLogAnnotationRequest::MergeFrom(const AddLogAnnotationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.AddLogAnnotationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
  if (from.has_annotations()) {
    _internal_mutable_annotations()->::bosdyn::api::LogAnnotations::MergeFrom(from._internal_annotations());
  }
}

void AddLogAnnotationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.AddLogAnnotationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddLogAnnotationRequest::CopyFrom(const AddLogAnnotationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.AddLogAnnotationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddLogAnnotationRequest::IsInitialized() const {
  return true;
}

void AddLogAnnotationRequest::InternalSwap(AddLogAnnotationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddLogAnnotationRequest, annotations_)
      + sizeof(AddLogAnnotationRequest::annotations_)
      - PROTOBUF_FIELD_OFFSET(AddLogAnnotationRequest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddLogAnnotationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogAnnotations::InitAsDefaultInstance() {
}
class LogAnnotations::_Internal {
 public:
};

LogAnnotations::LogAnnotations(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  text_messages_(arena),
  operator_messages_(arena),
  blob_data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.LogAnnotations)
}
LogAnnotations::LogAnnotations(const LogAnnotations& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      text_messages_(from.text_messages_),
      operator_messages_(from.operator_messages_),
      blob_data_(from.blob_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.LogAnnotations)
}

void LogAnnotations::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogAnnotations_bosdyn_2fapi_2flog_5fannotation_2eproto.base);
}

LogAnnotations::~LogAnnotations() {
  // @@protoc_insertion_point(destructor:bosdyn.api.LogAnnotations)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogAnnotations::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LogAnnotations::ArenaDtor(void* object) {
  LogAnnotations* _this = reinterpret_cast< LogAnnotations* >(object);
  (void)_this;
}
void LogAnnotations::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogAnnotations::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogAnnotations& LogAnnotations::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogAnnotations_bosdyn_2fapi_2flog_5fannotation_2eproto.base);
  return *internal_default_instance();
}


void LogAnnotations::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.LogAnnotations)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_messages_.Clear();
  operator_messages_.Clear();
  blob_data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogAnnotations::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bosdyn.api.LogAnnotationTextMessage text_messages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_text_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .bosdyn.api.LogAnnotationOperatorMessage operator_messages = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_operator_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .bosdyn.api.LogAnnotationLogBlob blob_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blob_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogAnnotations::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.LogAnnotations)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bosdyn.api.LogAnnotationTextMessage text_messages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_text_messages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_text_messages(i), target, stream);
  }

  // repeated .bosdyn.api.LogAnnotationOperatorMessage operator_messages = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_operator_messages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_operator_messages(i), target, stream);
  }

  // repeated .bosdyn.api.LogAnnotationLogBlob blob_data = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_blob_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_blob_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.LogAnnotations)
  return target;
}

size_t LogAnnotations::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.LogAnnotations)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bosdyn.api.LogAnnotationTextMessage text_messages = 1;
  total_size += 1UL * this->_internal_text_messages_size();
  for (const auto& msg : this->text_messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .bosdyn.api.LogAnnotationOperatorMessage operator_messages = 2;
  total_size += 1UL * this->_internal_operator_messages_size();
  for (const auto& msg : this->operator_messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .bosdyn.api.LogAnnotationLogBlob blob_data = 3;
  total_size += 1UL * this->_internal_blob_data_size();
  for (const auto& msg : this->blob_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogAnnotations::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.LogAnnotations)
  GOOGLE_DCHECK_NE(&from, this);
  const LogAnnotations* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogAnnotations>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.LogAnnotations)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.LogAnnotations)
    MergeFrom(*source);
  }
}

void LogAnnotations::MergeFrom(const LogAnnotations& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.LogAnnotations)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  text_messages_.MergeFrom(from.text_messages_);
  operator_messages_.MergeFrom(from.operator_messages_);
  blob_data_.MergeFrom(from.blob_data_);
}

void LogAnnotations::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.LogAnnotations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogAnnotations::CopyFrom(const LogAnnotations& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.LogAnnotations)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogAnnotations::IsInitialized() const {
  return true;
}

void LogAnnotations::InternalSwap(LogAnnotations* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  text_messages_.InternalSwap(&other->text_messages_);
  operator_messages_.InternalSwap(&other->operator_messages_);
  blob_data_.InternalSwap(&other->blob_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogAnnotations::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogAnnotationTextMessage::InitAsDefaultInstance() {
  ::bosdyn::api::_LogAnnotationTextMessage_default_instance_._instance.get_mutable()->timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class LogAnnotationTextMessage::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const LogAnnotationTextMessage* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
LogAnnotationTextMessage::_Internal::timestamp(const LogAnnotationTextMessage* msg) {
  return *msg->timestamp_;
}
void LogAnnotationTextMessage::clear_timestamp() {
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
LogAnnotationTextMessage::LogAnnotationTextMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.LogAnnotationTextMessage)
}
LogAnnotationTextMessage::LogAnnotationTextMessage(const LogAnnotationTextMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  service_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_service().empty()) {
    service_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_service(),
      GetArena());
  }
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tag().empty()) {
    tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tag(),
      GetArena());
  }
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filename().empty()) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_filename(),
      GetArena());
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&line_number_) -
    reinterpret_cast<char*>(&level_)) + sizeof(line_number_));
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.LogAnnotationTextMessage)
}

void LogAnnotationTextMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogAnnotationTextMessage_bosdyn_2fapi_2flog_5fannotation_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&line_number_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(line_number_));
}

LogAnnotationTextMessage::~LogAnnotationTextMessage() {
  // @@protoc_insertion_point(destructor:bosdyn.api.LogAnnotationTextMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogAnnotationTextMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timestamp_;
}

void LogAnnotationTextMessage::ArenaDtor(void* object) {
  LogAnnotationTextMessage* _this = reinterpret_cast< LogAnnotationTextMessage* >(object);
  (void)_this;
}
void LogAnnotationTextMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogAnnotationTextMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogAnnotationTextMessage& LogAnnotationTextMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogAnnotationTextMessage_bosdyn_2fapi_2flog_5fannotation_2eproto.base);
  return *internal_default_instance();
}


void LogAnnotationTextMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.LogAnnotationTextMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  service_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  filename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&line_number_) -
      reinterpret_cast<char*>(&level_)) + sizeof(line_number_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogAnnotationTextMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.LogAnnotationTextMessage.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string service = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_service();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.LogAnnotationTextMessage.service"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.LogAnnotationTextMessage.Level level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_level(static_cast<::bosdyn::api::LogAnnotationTextMessage_Level>(val));
        } else goto handle_unusual;
        continue;
      // string tag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.LogAnnotationTextMessage.tag"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string filename = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.LogAnnotationTextMessage.filename"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 line_number = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          line_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogAnnotationTextMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.LogAnnotationTextMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.LogAnnotationTextMessage.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::timestamp(this), target, stream);
  }

  // string service = 3;
  if (this->service().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service().data(), static_cast<int>(this->_internal_service().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.LogAnnotationTextMessage.service");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_service(), target);
  }

  // .bosdyn.api.LogAnnotationTextMessage.Level level = 4;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_level(), target);
  }

  // string tag = 5;
  if (this->tag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.LogAnnotationTextMessage.tag");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_tag(), target);
  }

  // string filename = 6;
  if (this->filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.LogAnnotationTextMessage.filename");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_filename(), target);
  }

  // int32 line_number = 7;
  if (this->line_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_line_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.LogAnnotationTextMessage)
  return target;
}

size_t LogAnnotationTextMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.LogAnnotationTextMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // string service = 3;
  if (this->service().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service());
  }

  // string tag = 5;
  if (this->tag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  // string filename = 6;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .bosdyn.api.LogAnnotationTextMessage.Level level = 4;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_level());
  }

  // int32 line_number = 7;
  if (this->line_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_line_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogAnnotationTextMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.LogAnnotationTextMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const LogAnnotationTextMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogAnnotationTextMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.LogAnnotationTextMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.LogAnnotationTextMessage)
    MergeFrom(*source);
  }
}

void LogAnnotationTextMessage::MergeFrom(const LogAnnotationTextMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.LogAnnotationTextMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.service().size() > 0) {
    _internal_set_service(from._internal_service());
  }
  if (from.tag().size() > 0) {
    _internal_set_tag(from._internal_tag());
  }
  if (from.filename().size() > 0) {
    _internal_set_filename(from._internal_filename());
  }
  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from.line_number() != 0) {
    _internal_set_line_number(from._internal_line_number());
  }
}

void LogAnnotationTextMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.LogAnnotationTextMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogAnnotationTextMessage::CopyFrom(const LogAnnotationTextMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.LogAnnotationTextMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogAnnotationTextMessage::IsInitialized() const {
  return true;
}

void LogAnnotationTextMessage::InternalSwap(LogAnnotationTextMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  service_.Swap(&other->service_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogAnnotationTextMessage, line_number_)
      + sizeof(LogAnnotationTextMessage::line_number_)
      - PROTOBUF_FIELD_OFFSET(LogAnnotationTextMessage, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogAnnotationTextMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogAnnotationOperatorMessage::InitAsDefaultInstance() {
  ::bosdyn::api::_LogAnnotationOperatorMessage_default_instance_._instance.get_mutable()->timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class LogAnnotationOperatorMessage::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const LogAnnotationOperatorMessage* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
LogAnnotationOperatorMessage::_Internal::timestamp(const LogAnnotationOperatorMessage* msg) {
  return *msg->timestamp_;
}
void LogAnnotationOperatorMessage::clear_timestamp() {
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
LogAnnotationOperatorMessage::LogAnnotationOperatorMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.LogAnnotationOperatorMessage)
}
LogAnnotationOperatorMessage::LogAnnotationOperatorMessage(const LogAnnotationOperatorMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.LogAnnotationOperatorMessage)
}

void LogAnnotationOperatorMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogAnnotationOperatorMessage_bosdyn_2fapi_2flog_5fannotation_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_ = nullptr;
}

LogAnnotationOperatorMessage::~LogAnnotationOperatorMessage() {
  // @@protoc_insertion_point(destructor:bosdyn.api.LogAnnotationOperatorMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogAnnotationOperatorMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timestamp_;
}

void LogAnnotationOperatorMessage::ArenaDtor(void* object) {
  LogAnnotationOperatorMessage* _this = reinterpret_cast< LogAnnotationOperatorMessage* >(object);
  (void)_this;
}
void LogAnnotationOperatorMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogAnnotationOperatorMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogAnnotationOperatorMessage& LogAnnotationOperatorMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogAnnotationOperatorMessage_bosdyn_2fapi_2flog_5fannotation_2eproto.base);
  return *internal_default_instance();
}


void LogAnnotationOperatorMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.LogAnnotationOperatorMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogAnnotationOperatorMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.LogAnnotationOperatorMessage.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogAnnotationOperatorMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.LogAnnotationOperatorMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.LogAnnotationOperatorMessage.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::timestamp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.LogAnnotationOperatorMessage)
  return target;
}

size_t LogAnnotationOperatorMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.LogAnnotationOperatorMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogAnnotationOperatorMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.LogAnnotationOperatorMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const LogAnnotationOperatorMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogAnnotationOperatorMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.LogAnnotationOperatorMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.LogAnnotationOperatorMessage)
    MergeFrom(*source);
  }
}

void LogAnnotationOperatorMessage::MergeFrom(const LogAnnotationOperatorMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.LogAnnotationOperatorMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
}

void LogAnnotationOperatorMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.LogAnnotationOperatorMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogAnnotationOperatorMessage::CopyFrom(const LogAnnotationOperatorMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.LogAnnotationOperatorMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogAnnotationOperatorMessage::IsInitialized() const {
  return true;
}

void LogAnnotationOperatorMessage::InternalSwap(LogAnnotationOperatorMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogAnnotationOperatorMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogAnnotationLogBlob::InitAsDefaultInstance() {
  ::bosdyn::api::_LogAnnotationLogBlob_default_instance_._instance.get_mutable()->timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class LogAnnotationLogBlob::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const LogAnnotationLogBlob* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
LogAnnotationLogBlob::_Internal::timestamp(const LogAnnotationLogBlob* msg) {
  return *msg->timestamp_;
}
void LogAnnotationLogBlob::clear_timestamp() {
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
LogAnnotationLogBlob::LogAnnotationLogBlob(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.LogAnnotationLogBlob)
}
LogAnnotationLogBlob::LogAnnotationLogBlob(const LogAnnotationLogBlob& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  channel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_channel().empty()) {
    channel_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_channel(),
      GetArena());
  }
  type_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type_id().empty()) {
    type_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type_id(),
      GetArena());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.LogAnnotationLogBlob)
}

void LogAnnotationLogBlob::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogAnnotationLogBlob_bosdyn_2fapi_2flog_5fannotation_2eproto.base);
  channel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_ = nullptr;
}

LogAnnotationLogBlob::~LogAnnotationLogBlob() {
  // @@protoc_insertion_point(destructor:bosdyn.api.LogAnnotationLogBlob)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogAnnotationLogBlob::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  channel_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timestamp_;
}

void LogAnnotationLogBlob::ArenaDtor(void* object) {
  LogAnnotationLogBlob* _this = reinterpret_cast< LogAnnotationLogBlob* >(object);
  (void)_this;
}
void LogAnnotationLogBlob::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogAnnotationLogBlob::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogAnnotationLogBlob& LogAnnotationLogBlob::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogAnnotationLogBlob_bosdyn_2fapi_2flog_5fannotation_2eproto.base);
  return *internal_default_instance();
}


void LogAnnotationLogBlob::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.LogAnnotationLogBlob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogAnnotationLogBlob::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string channel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_channel();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.LogAnnotationLogBlob.channel"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_type_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.LogAnnotationLogBlob.type_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogAnnotationLogBlob::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.LogAnnotationLogBlob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::timestamp(this), target, stream);
  }

  // string channel = 2;
  if (this->channel().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channel().data(), static_cast<int>(this->_internal_channel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.LogAnnotationLogBlob.channel");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_channel(), target);
  }

  // string type_id = 3;
  if (this->type_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type_id().data(), static_cast<int>(this->_internal_type_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.LogAnnotationLogBlob.type_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_type_id(), target);
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.LogAnnotationLogBlob)
  return target;
}

size_t LogAnnotationLogBlob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.LogAnnotationLogBlob)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channel = 2;
  if (this->channel().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channel());
  }

  // string type_id = 3;
  if (this->type_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type_id());
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogAnnotationLogBlob::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.LogAnnotationLogBlob)
  GOOGLE_DCHECK_NE(&from, this);
  const LogAnnotationLogBlob* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogAnnotationLogBlob>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.LogAnnotationLogBlob)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.LogAnnotationLogBlob)
    MergeFrom(*source);
  }
}

void LogAnnotationLogBlob::MergeFrom(const LogAnnotationLogBlob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.LogAnnotationLogBlob)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channel().size() > 0) {
    _internal_set_channel(from._internal_channel());
  }
  if (from.type_id().size() > 0) {
    _internal_set_type_id(from._internal_type_id());
  }
  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
}

void LogAnnotationLogBlob::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.LogAnnotationLogBlob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogAnnotationLogBlob::CopyFrom(const LogAnnotationLogBlob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.LogAnnotationLogBlob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogAnnotationLogBlob::IsInitialized() const {
  return true;
}

void LogAnnotationLogBlob::InternalSwap(LogAnnotationLogBlob* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  channel_.Swap(&other->channel_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_id_.Swap(&other->type_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogAnnotationLogBlob::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddLogAnnotationResponse::InitAsDefaultInstance() {
  ::bosdyn::api::_AddLogAnnotationResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
}
class AddLogAnnotationResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const AddLogAnnotationResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
AddLogAnnotationResponse::_Internal::header(const AddLogAnnotationResponse* msg) {
  return *msg->header_;
}
void AddLogAnnotationResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
AddLogAnnotationResponse::AddLogAnnotationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.AddLogAnnotationResponse)
}
AddLogAnnotationResponse::AddLogAnnotationResponse(const AddLogAnnotationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.AddLogAnnotationResponse)
}

void AddLogAnnotationResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddLogAnnotationResponse_bosdyn_2fapi_2flog_5fannotation_2eproto.base);
  header_ = nullptr;
}

AddLogAnnotationResponse::~AddLogAnnotationResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.AddLogAnnotationResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddLogAnnotationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void AddLogAnnotationResponse::ArenaDtor(void* object) {
  AddLogAnnotationResponse* _this = reinterpret_cast< AddLogAnnotationResponse* >(object);
  (void)_this;
}
void AddLogAnnotationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddLogAnnotationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddLogAnnotationResponse& AddLogAnnotationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddLogAnnotationResponse_bosdyn_2fapi_2flog_5fannotation_2eproto.base);
  return *internal_default_instance();
}


void AddLogAnnotationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.AddLogAnnotationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddLogAnnotationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddLogAnnotationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.AddLogAnnotationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.AddLogAnnotationResponse)
  return target;
}

size_t AddLogAnnotationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.AddLogAnnotationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddLogAnnotationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.AddLogAnnotationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddLogAnnotationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddLogAnnotationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.AddLogAnnotationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.AddLogAnnotationResponse)
    MergeFrom(*source);
  }
}

void AddLogAnnotationResponse::MergeFrom(const AddLogAnnotationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.AddLogAnnotationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
}

void AddLogAnnotationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.AddLogAnnotationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddLogAnnotationResponse::CopyFrom(const AddLogAnnotationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.AddLogAnnotationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddLogAnnotationResponse::IsInitialized() const {
  return true;
}

void AddLogAnnotationResponse::InternalSwap(AddLogAnnotationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddLogAnnotationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bosdyn::api::AddLogAnnotationRequest* Arena::CreateMaybeMessage< ::bosdyn::api::AddLogAnnotationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::AddLogAnnotationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::LogAnnotations* Arena::CreateMaybeMessage< ::bosdyn::api::LogAnnotations >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::LogAnnotations >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::LogAnnotationTextMessage* Arena::CreateMaybeMessage< ::bosdyn::api::LogAnnotationTextMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::LogAnnotationTextMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::LogAnnotationOperatorMessage* Arena::CreateMaybeMessage< ::bosdyn::api::LogAnnotationOperatorMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::LogAnnotationOperatorMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::LogAnnotationLogBlob* Arena::CreateMaybeMessage< ::bosdyn::api::LogAnnotationLogBlob >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::LogAnnotationLogBlob >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::AddLogAnnotationResponse* Arena::CreateMaybeMessage< ::bosdyn::api::AddLogAnnotationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::AddLogAnnotationResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
