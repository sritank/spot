// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/basic_command.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fbasic_5fcommand_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fbasic_5fcommand_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "bosdyn/api/geometry.pb.h"
#include "bosdyn/api/trajectory.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fbasic_5fcommand_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bosdyn_2fapi_2fbasic_5fcommand_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[24]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fbasic_5fcommand_2eproto;
namespace bosdyn {
namespace api {
class FreezeCommand;
class FreezeCommandDefaultTypeInternal;
extern FreezeCommandDefaultTypeInternal _FreezeCommand_default_instance_;
class FreezeCommand_Feedback;
class FreezeCommand_FeedbackDefaultTypeInternal;
extern FreezeCommand_FeedbackDefaultTypeInternal _FreezeCommand_Feedback_default_instance_;
class FreezeCommand_Request;
class FreezeCommand_RequestDefaultTypeInternal;
extern FreezeCommand_RequestDefaultTypeInternal _FreezeCommand_Request_default_instance_;
class SE2TrajectoryCommand;
class SE2TrajectoryCommandDefaultTypeInternal;
extern SE2TrajectoryCommandDefaultTypeInternal _SE2TrajectoryCommand_default_instance_;
class SE2TrajectoryCommand_Feedback;
class SE2TrajectoryCommand_FeedbackDefaultTypeInternal;
extern SE2TrajectoryCommand_FeedbackDefaultTypeInternal _SE2TrajectoryCommand_Feedback_default_instance_;
class SE2TrajectoryCommand_Request;
class SE2TrajectoryCommand_RequestDefaultTypeInternal;
extern SE2TrajectoryCommand_RequestDefaultTypeInternal _SE2TrajectoryCommand_Request_default_instance_;
class SE2VelocityCommand;
class SE2VelocityCommandDefaultTypeInternal;
extern SE2VelocityCommandDefaultTypeInternal _SE2VelocityCommand_default_instance_;
class SE2VelocityCommand_Feedback;
class SE2VelocityCommand_FeedbackDefaultTypeInternal;
extern SE2VelocityCommand_FeedbackDefaultTypeInternal _SE2VelocityCommand_Feedback_default_instance_;
class SE2VelocityCommand_Request;
class SE2VelocityCommand_RequestDefaultTypeInternal;
extern SE2VelocityCommand_RequestDefaultTypeInternal _SE2VelocityCommand_Request_default_instance_;
class SafePowerOffCommand;
class SafePowerOffCommandDefaultTypeInternal;
extern SafePowerOffCommandDefaultTypeInternal _SafePowerOffCommand_default_instance_;
class SafePowerOffCommand_Feedback;
class SafePowerOffCommand_FeedbackDefaultTypeInternal;
extern SafePowerOffCommand_FeedbackDefaultTypeInternal _SafePowerOffCommand_Feedback_default_instance_;
class SafePowerOffCommand_Request;
class SafePowerOffCommand_RequestDefaultTypeInternal;
extern SafePowerOffCommand_RequestDefaultTypeInternal _SafePowerOffCommand_Request_default_instance_;
class SelfRightCommand;
class SelfRightCommandDefaultTypeInternal;
extern SelfRightCommandDefaultTypeInternal _SelfRightCommand_default_instance_;
class SelfRightCommand_Feedback;
class SelfRightCommand_FeedbackDefaultTypeInternal;
extern SelfRightCommand_FeedbackDefaultTypeInternal _SelfRightCommand_Feedback_default_instance_;
class SelfRightCommand_Request;
class SelfRightCommand_RequestDefaultTypeInternal;
extern SelfRightCommand_RequestDefaultTypeInternal _SelfRightCommand_Request_default_instance_;
class SitCommand;
class SitCommandDefaultTypeInternal;
extern SitCommandDefaultTypeInternal _SitCommand_default_instance_;
class SitCommand_Feedback;
class SitCommand_FeedbackDefaultTypeInternal;
extern SitCommand_FeedbackDefaultTypeInternal _SitCommand_Feedback_default_instance_;
class SitCommand_Request;
class SitCommand_RequestDefaultTypeInternal;
extern SitCommand_RequestDefaultTypeInternal _SitCommand_Request_default_instance_;
class StandCommand;
class StandCommandDefaultTypeInternal;
extern StandCommandDefaultTypeInternal _StandCommand_default_instance_;
class StandCommand_Feedback;
class StandCommand_FeedbackDefaultTypeInternal;
extern StandCommand_FeedbackDefaultTypeInternal _StandCommand_Feedback_default_instance_;
class StandCommand_Request;
class StandCommand_RequestDefaultTypeInternal;
extern StandCommand_RequestDefaultTypeInternal _StandCommand_Request_default_instance_;
class StopCommand;
class StopCommandDefaultTypeInternal;
extern StopCommandDefaultTypeInternal _StopCommand_default_instance_;
class StopCommand_Feedback;
class StopCommand_FeedbackDefaultTypeInternal;
extern StopCommand_FeedbackDefaultTypeInternal _StopCommand_Feedback_default_instance_;
class StopCommand_Request;
class StopCommand_RequestDefaultTypeInternal;
extern StopCommand_RequestDefaultTypeInternal _StopCommand_Request_default_instance_;
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> ::bosdyn::api::FreezeCommand* Arena::CreateMaybeMessage<::bosdyn::api::FreezeCommand>(Arena*);
template<> ::bosdyn::api::FreezeCommand_Feedback* Arena::CreateMaybeMessage<::bosdyn::api::FreezeCommand_Feedback>(Arena*);
template<> ::bosdyn::api::FreezeCommand_Request* Arena::CreateMaybeMessage<::bosdyn::api::FreezeCommand_Request>(Arena*);
template<> ::bosdyn::api::SE2TrajectoryCommand* Arena::CreateMaybeMessage<::bosdyn::api::SE2TrajectoryCommand>(Arena*);
template<> ::bosdyn::api::SE2TrajectoryCommand_Feedback* Arena::CreateMaybeMessage<::bosdyn::api::SE2TrajectoryCommand_Feedback>(Arena*);
template<> ::bosdyn::api::SE2TrajectoryCommand_Request* Arena::CreateMaybeMessage<::bosdyn::api::SE2TrajectoryCommand_Request>(Arena*);
template<> ::bosdyn::api::SE2VelocityCommand* Arena::CreateMaybeMessage<::bosdyn::api::SE2VelocityCommand>(Arena*);
template<> ::bosdyn::api::SE2VelocityCommand_Feedback* Arena::CreateMaybeMessage<::bosdyn::api::SE2VelocityCommand_Feedback>(Arena*);
template<> ::bosdyn::api::SE2VelocityCommand_Request* Arena::CreateMaybeMessage<::bosdyn::api::SE2VelocityCommand_Request>(Arena*);
template<> ::bosdyn::api::SafePowerOffCommand* Arena::CreateMaybeMessage<::bosdyn::api::SafePowerOffCommand>(Arena*);
template<> ::bosdyn::api::SafePowerOffCommand_Feedback* Arena::CreateMaybeMessage<::bosdyn::api::SafePowerOffCommand_Feedback>(Arena*);
template<> ::bosdyn::api::SafePowerOffCommand_Request* Arena::CreateMaybeMessage<::bosdyn::api::SafePowerOffCommand_Request>(Arena*);
template<> ::bosdyn::api::SelfRightCommand* Arena::CreateMaybeMessage<::bosdyn::api::SelfRightCommand>(Arena*);
template<> ::bosdyn::api::SelfRightCommand_Feedback* Arena::CreateMaybeMessage<::bosdyn::api::SelfRightCommand_Feedback>(Arena*);
template<> ::bosdyn::api::SelfRightCommand_Request* Arena::CreateMaybeMessage<::bosdyn::api::SelfRightCommand_Request>(Arena*);
template<> ::bosdyn::api::SitCommand* Arena::CreateMaybeMessage<::bosdyn::api::SitCommand>(Arena*);
template<> ::bosdyn::api::SitCommand_Feedback* Arena::CreateMaybeMessage<::bosdyn::api::SitCommand_Feedback>(Arena*);
template<> ::bosdyn::api::SitCommand_Request* Arena::CreateMaybeMessage<::bosdyn::api::SitCommand_Request>(Arena*);
template<> ::bosdyn::api::StandCommand* Arena::CreateMaybeMessage<::bosdyn::api::StandCommand>(Arena*);
template<> ::bosdyn::api::StandCommand_Feedback* Arena::CreateMaybeMessage<::bosdyn::api::StandCommand_Feedback>(Arena*);
template<> ::bosdyn::api::StandCommand_Request* Arena::CreateMaybeMessage<::bosdyn::api::StandCommand_Request>(Arena*);
template<> ::bosdyn::api::StopCommand* Arena::CreateMaybeMessage<::bosdyn::api::StopCommand>(Arena*);
template<> ::bosdyn::api::StopCommand_Feedback* Arena::CreateMaybeMessage<::bosdyn::api::StopCommand_Feedback>(Arena*);
template<> ::bosdyn::api::StopCommand_Request* Arena::CreateMaybeMessage<::bosdyn::api::StopCommand_Request>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bosdyn {
namespace api {

enum SafePowerOffCommand_Feedback_Status : int {
  SafePowerOffCommand_Feedback_Status_STATUS_UNKNOWN = 0,
  SafePowerOffCommand_Feedback_Status_STATUS_POWERED_OFF = 1,
  SafePowerOffCommand_Feedback_Status_STATUS_IN_PROGRESS = 2,
  SafePowerOffCommand_Feedback_Status_SafePowerOffCommand_Feedback_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SafePowerOffCommand_Feedback_Status_SafePowerOffCommand_Feedback_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SafePowerOffCommand_Feedback_Status_IsValid(int value);
constexpr SafePowerOffCommand_Feedback_Status SafePowerOffCommand_Feedback_Status_Status_MIN = SafePowerOffCommand_Feedback_Status_STATUS_UNKNOWN;
constexpr SafePowerOffCommand_Feedback_Status SafePowerOffCommand_Feedback_Status_Status_MAX = SafePowerOffCommand_Feedback_Status_STATUS_IN_PROGRESS;
constexpr int SafePowerOffCommand_Feedback_Status_Status_ARRAYSIZE = SafePowerOffCommand_Feedback_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SafePowerOffCommand_Feedback_Status_descriptor();
template<typename T>
inline const std::string& SafePowerOffCommand_Feedback_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SafePowerOffCommand_Feedback_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SafePowerOffCommand_Feedback_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SafePowerOffCommand_Feedback_Status_descriptor(), enum_t_value);
}
inline bool SafePowerOffCommand_Feedback_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SafePowerOffCommand_Feedback_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SafePowerOffCommand_Feedback_Status>(
    SafePowerOffCommand_Feedback_Status_descriptor(), name, value);
}
enum SE2TrajectoryCommand_Feedback_Status : int {
  SE2TrajectoryCommand_Feedback_Status_STATUS_UNKNOWN = 0,
  SE2TrajectoryCommand_Feedback_Status_STATUS_AT_GOAL = 1,
  SE2TrajectoryCommand_Feedback_Status_STATUS_GOING_TO_GOAL = 2,
  SE2TrajectoryCommand_Feedback_Status_SE2TrajectoryCommand_Feedback_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SE2TrajectoryCommand_Feedback_Status_SE2TrajectoryCommand_Feedback_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SE2TrajectoryCommand_Feedback_Status_IsValid(int value);
constexpr SE2TrajectoryCommand_Feedback_Status SE2TrajectoryCommand_Feedback_Status_Status_MIN = SE2TrajectoryCommand_Feedback_Status_STATUS_UNKNOWN;
constexpr SE2TrajectoryCommand_Feedback_Status SE2TrajectoryCommand_Feedback_Status_Status_MAX = SE2TrajectoryCommand_Feedback_Status_STATUS_GOING_TO_GOAL;
constexpr int SE2TrajectoryCommand_Feedback_Status_Status_ARRAYSIZE = SE2TrajectoryCommand_Feedback_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SE2TrajectoryCommand_Feedback_Status_descriptor();
template<typename T>
inline const std::string& SE2TrajectoryCommand_Feedback_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SE2TrajectoryCommand_Feedback_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SE2TrajectoryCommand_Feedback_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SE2TrajectoryCommand_Feedback_Status_descriptor(), enum_t_value);
}
inline bool SE2TrajectoryCommand_Feedback_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SE2TrajectoryCommand_Feedback_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SE2TrajectoryCommand_Feedback_Status>(
    SE2TrajectoryCommand_Feedback_Status_descriptor(), name, value);
}
enum SitCommand_Feedback_Status : int {
  SitCommand_Feedback_Status_STATUS_UNKNOWN = 0,
  SitCommand_Feedback_Status_STATUS_IS_SITTING = 1,
  SitCommand_Feedback_Status_STATUS_IN_PROGRESS = 2,
  SitCommand_Feedback_Status_SitCommand_Feedback_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SitCommand_Feedback_Status_SitCommand_Feedback_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SitCommand_Feedback_Status_IsValid(int value);
constexpr SitCommand_Feedback_Status SitCommand_Feedback_Status_Status_MIN = SitCommand_Feedback_Status_STATUS_UNKNOWN;
constexpr SitCommand_Feedback_Status SitCommand_Feedback_Status_Status_MAX = SitCommand_Feedback_Status_STATUS_IN_PROGRESS;
constexpr int SitCommand_Feedback_Status_Status_ARRAYSIZE = SitCommand_Feedback_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SitCommand_Feedback_Status_descriptor();
template<typename T>
inline const std::string& SitCommand_Feedback_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SitCommand_Feedback_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SitCommand_Feedback_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SitCommand_Feedback_Status_descriptor(), enum_t_value);
}
inline bool SitCommand_Feedback_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SitCommand_Feedback_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SitCommand_Feedback_Status>(
    SitCommand_Feedback_Status_descriptor(), name, value);
}
enum StandCommand_Feedback_Status : int {
  StandCommand_Feedback_Status_STATUS_UNKNOWN = 0,
  StandCommand_Feedback_Status_STATUS_IS_STANDING = 1,
  StandCommand_Feedback_Status_STATUS_IN_PROGRESS = 2,
  StandCommand_Feedback_Status_StandCommand_Feedback_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  StandCommand_Feedback_Status_StandCommand_Feedback_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool StandCommand_Feedback_Status_IsValid(int value);
constexpr StandCommand_Feedback_Status StandCommand_Feedback_Status_Status_MIN = StandCommand_Feedback_Status_STATUS_UNKNOWN;
constexpr StandCommand_Feedback_Status StandCommand_Feedback_Status_Status_MAX = StandCommand_Feedback_Status_STATUS_IN_PROGRESS;
constexpr int StandCommand_Feedback_Status_Status_ARRAYSIZE = StandCommand_Feedback_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StandCommand_Feedback_Status_descriptor();
template<typename T>
inline const std::string& StandCommand_Feedback_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StandCommand_Feedback_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StandCommand_Feedback_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StandCommand_Feedback_Status_descriptor(), enum_t_value);
}
inline bool StandCommand_Feedback_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StandCommand_Feedback_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StandCommand_Feedback_Status>(
    StandCommand_Feedback_Status_descriptor(), name, value);
}
// ===================================================================

class SelfRightCommand_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.SelfRightCommand.Request) */ {
 public:
  inline SelfRightCommand_Request() : SelfRightCommand_Request(nullptr) {}
  virtual ~SelfRightCommand_Request();

  SelfRightCommand_Request(const SelfRightCommand_Request& from);
  SelfRightCommand_Request(SelfRightCommand_Request&& from) noexcept
    : SelfRightCommand_Request() {
    *this = ::std::move(from);
  }

  inline SelfRightCommand_Request& operator=(const SelfRightCommand_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelfRightCommand_Request& operator=(SelfRightCommand_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SelfRightCommand_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SelfRightCommand_Request* internal_default_instance() {
    return reinterpret_cast<const SelfRightCommand_Request*>(
               &_SelfRightCommand_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SelfRightCommand_Request& a, SelfRightCommand_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(SelfRightCommand_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelfRightCommand_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SelfRightCommand_Request* New() const final {
    return CreateMaybeMessage<SelfRightCommand_Request>(nullptr);
  }

  SelfRightCommand_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SelfRightCommand_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SelfRightCommand_Request& from);
  void MergeFrom(const SelfRightCommand_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelfRightCommand_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.SelfRightCommand.Request";
  }
  protected:
  explicit SelfRightCommand_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fbasic_5fcommand_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fbasic_5fcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bosdyn.api.SelfRightCommand.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fbasic_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class SelfRightCommand_Feedback PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.SelfRightCommand.Feedback) */ {
 public:
  inline SelfRightCommand_Feedback() : SelfRightCommand_Feedback(nullptr) {}
  virtual ~SelfRightCommand_Feedback();

  SelfRightCommand_Feedback(const SelfRightCommand_Feedback& from);
  SelfRightCommand_Feedback(SelfRightCommand_Feedback&& from) noexcept
    : SelfRightCommand_Feedback() {
    *this = ::std::move(from);
  }

  inline SelfRightCommand_Feedback& operator=(const SelfRightCommand_Feedback& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelfRightCommand_Feedback& operator=(SelfRightCommand_Feedback&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SelfRightCommand_Feedback& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SelfRightCommand_Feedback* internal_default_instance() {
    return reinterpret_cast<const SelfRightCommand_Feedback*>(
               &_SelfRightCommand_Feedback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SelfRightCommand_Feedback& a, SelfRightCommand_Feedback& b) {
    a.Swap(&b);
  }
  inline void Swap(SelfRightCommand_Feedback* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelfRightCommand_Feedback* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SelfRightCommand_Feedback* New() const final {
    return CreateMaybeMessage<SelfRightCommand_Feedback>(nullptr);
  }

  SelfRightCommand_Feedback* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SelfRightCommand_Feedback>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SelfRightCommand_Feedback& from);
  void MergeFrom(const SelfRightCommand_Feedback& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelfRightCommand_Feedback* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.SelfRightCommand.Feedback";
  }
  protected:
  explicit SelfRightCommand_Feedback(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fbasic_5fcommand_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fbasic_5fcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bosdyn.api.SelfRightCommand.Feedback)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fbasic_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class SelfRightCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.SelfRightCommand) */ {
 public:
  inline SelfRightCommand() : SelfRightCommand(nullptr) {}
  virtual ~SelfRightCommand();

  SelfRightCommand(const SelfRightCommand& from);
  SelfRightCommand(SelfRightCommand&& from) noexcept
    : SelfRightCommand() {
    *this = ::std::move(from);
  }

  inline SelfRightCommand& operator=(const SelfRightCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelfRightCommand& operator=(SelfRightCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SelfRightCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SelfRightCommand* internal_default_instance() {
    return reinterpret_cast<const SelfRightCommand*>(
               &_SelfRightCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SelfRightCommand& a, SelfRightCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(SelfRightCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelfRightCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SelfRightCommand* New() const final {
    return CreateMaybeMessage<SelfRightCommand>(nullptr);
  }

  SelfRightCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SelfRightCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SelfRightCommand& from);
  void MergeFrom(const SelfRightCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelfRightCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.SelfRightCommand";
  }
  protected:
  explicit SelfRightCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fbasic_5fcommand_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fbasic_5fcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SelfRightCommand_Request Request;
  typedef SelfRightCommand_Feedback Feedback;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bosdyn.api.SelfRightCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fbasic_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class StopCommand_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.StopCommand.Request) */ {
 public:
  inline StopCommand_Request() : StopCommand_Request(nullptr) {}
  virtual ~StopCommand_Request();

  StopCommand_Request(const StopCommand_Request& from);
  StopCommand_Request(StopCommand_Request&& from) noexcept
    : StopCommand_Request() {
    *this = ::std::move(from);
  }

  inline StopCommand_Request& operator=(const StopCommand_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopCommand_Request& operator=(StopCommand_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopCommand_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopCommand_Request* internal_default_instance() {
    return reinterpret_cast<const StopCommand_Request*>(
               &_StopCommand_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StopCommand_Request& a, StopCommand_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(StopCommand_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopCommand_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopCommand_Request* New() const final {
    return CreateMaybeMessage<StopCommand_Request>(nullptr);
  }

  StopCommand_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopCommand_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopCommand_Request& from);
  void MergeFrom(const StopCommand_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopCommand_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.StopCommand.Request";
  }
  protected:
  explicit StopCommand_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fbasic_5fcommand_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fbasic_5fcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bosdyn.api.StopCommand.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fbasic_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class StopCommand_Feedback PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.StopCommand.Feedback) */ {
 public:
  inline StopCommand_Feedback() : StopCommand_Feedback(nullptr) {}
  virtual ~StopCommand_Feedback();

  StopCommand_Feedback(const StopCommand_Feedback& from);
  StopCommand_Feedback(StopCommand_Feedback&& from) noexcept
    : StopCommand_Feedback() {
    *this = ::std::move(from);
  }

  inline StopCommand_Feedback& operator=(const StopCommand_Feedback& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopCommand_Feedback& operator=(StopCommand_Feedback&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopCommand_Feedback& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopCommand_Feedback* internal_default_instance() {
    return reinterpret_cast<const StopCommand_Feedback*>(
               &_StopCommand_Feedback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StopCommand_Feedback& a, StopCommand_Feedback& b) {
    a.Swap(&b);
  }
  inline void Swap(StopCommand_Feedback* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopCommand_Feedback* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopCommand_Feedback* New() const final {
    return CreateMaybeMessage<StopCommand_Feedback>(nullptr);
  }

  StopCommand_Feedback* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopCommand_Feedback>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopCommand_Feedback& from);
  void MergeFrom(const StopCommand_Feedback& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopCommand_Feedback* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.StopCommand.Feedback";
  }
  protected:
  explicit StopCommand_Feedback(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fbasic_5fcommand_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fbasic_5fcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bosdyn.api.StopCommand.Feedback)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fbasic_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class StopCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.StopCommand) */ {
 public:
  inline StopCommand() : StopCommand(nullptr) {}
  virtual ~StopCommand();

  StopCommand(const StopCommand& from);
  StopCommand(StopCommand&& from) noexcept
    : StopCommand() {
    *this = ::std::move(from);
  }

  inline StopCommand& operator=(const StopCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopCommand& operator=(StopCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopCommand* internal_default_instance() {
    return reinterpret_cast<const StopCommand*>(
               &_StopCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StopCommand& a, StopCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(StopCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopCommand* New() const final {
    return CreateMaybeMessage<StopCommand>(nullptr);
  }

  StopCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopCommand& from);
  void MergeFrom(const StopCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.StopCommand";
  }
  protected:
  explicit StopCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fbasic_5fcommand_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fbasic_5fcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef StopCommand_Request Request;
  typedef StopCommand_Feedback Feedback;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bosdyn.api.StopCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fbasic_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class FreezeCommand_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.FreezeCommand.Request) */ {
 public:
  inline FreezeCommand_Request() : FreezeCommand_Request(nullptr) {}
  virtual ~FreezeCommand_Request();

  FreezeCommand_Request(const FreezeCommand_Request& from);
  FreezeCommand_Request(FreezeCommand_Request&& from) noexcept
    : FreezeCommand_Request() {
    *this = ::std::move(from);
  }

  inline FreezeCommand_Request& operator=(const FreezeCommand_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline FreezeCommand_Request& operator=(FreezeCommand_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FreezeCommand_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FreezeCommand_Request* internal_default_instance() {
    return reinterpret_cast<const FreezeCommand_Request*>(
               &_FreezeCommand_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(FreezeCommand_Request& a, FreezeCommand_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(FreezeCommand_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FreezeCommand_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FreezeCommand_Request* New() const final {
    return CreateMaybeMessage<FreezeCommand_Request>(nullptr);
  }

  FreezeCommand_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FreezeCommand_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FreezeCommand_Request& from);
  void MergeFrom(const FreezeCommand_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FreezeCommand_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.FreezeCommand.Request";
  }
  protected:
  explicit FreezeCommand_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fbasic_5fcommand_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fbasic_5fcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bosdyn.api.FreezeCommand.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fbasic_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class FreezeCommand_Feedback PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.FreezeCommand.Feedback) */ {
 public:
  inline FreezeCommand_Feedback() : FreezeCommand_Feedback(nullptr) {}
  virtual ~FreezeCommand_Feedback();

  FreezeCommand_Feedback(const FreezeCommand_Feedback& from);
  FreezeCommand_Feedback(FreezeCommand_Feedback&& from) noexcept
    : FreezeCommand_Feedback() {
    *this = ::std::move(from);
  }

  inline FreezeCommand_Feedback& operator=(const FreezeCommand_Feedback& from) {
    CopyFrom(from);
    return *this;
  }
  inline FreezeCommand_Feedback& operator=(FreezeCommand_Feedback&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FreezeCommand_Feedback& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FreezeCommand_Feedback* internal_default_instance() {
    return reinterpret_cast<const FreezeCommand_Feedback*>(
               &_FreezeCommand_Feedback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(FreezeCommand_Feedback& a, FreezeCommand_Feedback& b) {
    a.Swap(&b);
  }
  inline void Swap(FreezeCommand_Feedback* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FreezeCommand_Feedback* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FreezeCommand_Feedback* New() const final {
    return CreateMaybeMessage<FreezeCommand_Feedback>(nullptr);
  }

  FreezeCommand_Feedback* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FreezeCommand_Feedback>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FreezeCommand_Feedback& from);
  void MergeFrom(const FreezeCommand_Feedback& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FreezeCommand_Feedback* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.FreezeCommand.Feedback";
  }
  protected:
  explicit FreezeCommand_Feedback(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fbasic_5fcommand_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fbasic_5fcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bosdyn.api.FreezeCommand.Feedback)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fbasic_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class FreezeCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.FreezeCommand) */ {
 public:
  inline FreezeCommand() : FreezeCommand(nullptr) {}
  virtual ~FreezeCommand();

  FreezeCommand(const FreezeCommand& from);
  FreezeCommand(FreezeCommand&& from) noexcept
    : FreezeCommand() {
    *this = ::std::move(from);
  }

  inline FreezeCommand& operator=(const FreezeCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline FreezeCommand& operator=(FreezeCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FreezeCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FreezeCommand* internal_default_instance() {
    return reinterpret_cast<const FreezeCommand*>(
               &_FreezeCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(FreezeCommand& a, FreezeCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(FreezeCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FreezeCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FreezeCommand* New() const final {
    return CreateMaybeMessage<FreezeCommand>(nullptr);
  }

  FreezeCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FreezeCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FreezeCommand& from);
  void MergeFrom(const FreezeCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FreezeCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.FreezeCommand";
  }
  protected:
  explicit FreezeCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fbasic_5fcommand_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fbasic_5fcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef FreezeCommand_Request Request;
  typedef FreezeCommand_Feedback Feedback;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bosdyn.api.FreezeCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fbasic_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class SafePowerOffCommand_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.SafePowerOffCommand.Request) */ {
 public:
  inline SafePowerOffCommand_Request() : SafePowerOffCommand_Request(nullptr) {}
  virtual ~SafePowerOffCommand_Request();

  SafePowerOffCommand_Request(const SafePowerOffCommand_Request& from);
  SafePowerOffCommand_Request(SafePowerOffCommand_Request&& from) noexcept
    : SafePowerOffCommand_Request() {
    *this = ::std::move(from);
  }

  inline SafePowerOffCommand_Request& operator=(const SafePowerOffCommand_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline SafePowerOffCommand_Request& operator=(SafePowerOffCommand_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SafePowerOffCommand_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SafePowerOffCommand_Request* internal_default_instance() {
    return reinterpret_cast<const SafePowerOffCommand_Request*>(
               &_SafePowerOffCommand_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SafePowerOffCommand_Request& a, SafePowerOffCommand_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(SafePowerOffCommand_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SafePowerOffCommand_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SafePowerOffCommand_Request* New() const final {
    return CreateMaybeMessage<SafePowerOffCommand_Request>(nullptr);
  }

  SafePowerOffCommand_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SafePowerOffCommand_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SafePowerOffCommand_Request& from);
  void MergeFrom(const SafePowerOffCommand_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SafePowerOffCommand_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.SafePowerOffCommand.Request";
  }
  protected:
  explicit SafePowerOffCommand_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fbasic_5fcommand_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fbasic_5fcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bosdyn.api.SafePowerOffCommand.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fbasic_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class SafePowerOffCommand_Feedback PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.SafePowerOffCommand.Feedback) */ {
 public:
  inline SafePowerOffCommand_Feedback() : SafePowerOffCommand_Feedback(nullptr) {}
  virtual ~SafePowerOffCommand_Feedback();

  SafePowerOffCommand_Feedback(const SafePowerOffCommand_Feedback& from);
  SafePowerOffCommand_Feedback(SafePowerOffCommand_Feedback&& from) noexcept
    : SafePowerOffCommand_Feedback() {
    *this = ::std::move(from);
  }

  inline SafePowerOffCommand_Feedback& operator=(const SafePowerOffCommand_Feedback& from) {
    CopyFrom(from);
    return *this;
  }
  inline SafePowerOffCommand_Feedback& operator=(SafePowerOffCommand_Feedback&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SafePowerOffCommand_Feedback& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SafePowerOffCommand_Feedback* internal_default_instance() {
    return reinterpret_cast<const SafePowerOffCommand_Feedback*>(
               &_SafePowerOffCommand_Feedback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SafePowerOffCommand_Feedback& a, SafePowerOffCommand_Feedback& b) {
    a.Swap(&b);
  }
  inline void Swap(SafePowerOffCommand_Feedback* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SafePowerOffCommand_Feedback* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SafePowerOffCommand_Feedback* New() const final {
    return CreateMaybeMessage<SafePowerOffCommand_Feedback>(nullptr);
  }

  SafePowerOffCommand_Feedback* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SafePowerOffCommand_Feedback>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SafePowerOffCommand_Feedback& from);
  void MergeFrom(const SafePowerOffCommand_Feedback& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SafePowerOffCommand_Feedback* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.SafePowerOffCommand.Feedback";
  }
  protected:
  explicit SafePowerOffCommand_Feedback(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fbasic_5fcommand_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fbasic_5fcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SafePowerOffCommand_Feedback_Status Status;
  static constexpr Status STATUS_UNKNOWN =
    SafePowerOffCommand_Feedback_Status_STATUS_UNKNOWN;
  static constexpr Status STATUS_POWERED_OFF =
    SafePowerOffCommand_Feedback_Status_STATUS_POWERED_OFF;
  static constexpr Status STATUS_IN_PROGRESS =
    SafePowerOffCommand_Feedback_Status_STATUS_IN_PROGRESS;
  static inline bool Status_IsValid(int value) {
    return SafePowerOffCommand_Feedback_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    SafePowerOffCommand_Feedback_Status_Status_MIN;
  static constexpr Status Status_MAX =
    SafePowerOffCommand_Feedback_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    SafePowerOffCommand_Feedback_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return SafePowerOffCommand_Feedback_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return SafePowerOffCommand_Feedback_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return SafePowerOffCommand_Feedback_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .bosdyn.api.SafePowerOffCommand.Feedback.Status status = 1;
  void clear_status();
  ::bosdyn::api::SafePowerOffCommand_Feedback_Status status() const;
  void set_status(::bosdyn::api::SafePowerOffCommand_Feedback_Status value);
  private:
  ::bosdyn::api::SafePowerOffCommand_Feedback_Status _internal_status() const;
  void _internal_set_status(::bosdyn::api::SafePowerOffCommand_Feedback_Status value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.SafePowerOffCommand.Feedback)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fbasic_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class SafePowerOffCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.SafePowerOffCommand) */ {
 public:
  inline SafePowerOffCommand() : SafePowerOffCommand(nullptr) {}
  virtual ~SafePowerOffCommand();

  SafePowerOffCommand(const SafePowerOffCommand& from);
  SafePowerOffCommand(SafePowerOffCommand&& from) noexcept
    : SafePowerOffCommand() {
    *this = ::std::move(from);
  }

  inline SafePowerOffCommand& operator=(const SafePowerOffCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline SafePowerOffCommand& operator=(SafePowerOffCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SafePowerOffCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SafePowerOffCommand* internal_default_instance() {
    return reinterpret_cast<const SafePowerOffCommand*>(
               &_SafePowerOffCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SafePowerOffCommand& a, SafePowerOffCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(SafePowerOffCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SafePowerOffCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SafePowerOffCommand* New() const final {
    return CreateMaybeMessage<SafePowerOffCommand>(nullptr);
  }

  SafePowerOffCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SafePowerOffCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SafePowerOffCommand& from);
  void MergeFrom(const SafePowerOffCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SafePowerOffCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.SafePowerOffCommand";
  }
  protected:
  explicit SafePowerOffCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fbasic_5fcommand_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fbasic_5fcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SafePowerOffCommand_Request Request;
  typedef SafePowerOffCommand_Feedback Feedback;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bosdyn.api.SafePowerOffCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fbasic_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class SE2TrajectoryCommand_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.SE2TrajectoryCommand.Request) */ {
 public:
  inline SE2TrajectoryCommand_Request() : SE2TrajectoryCommand_Request(nullptr) {}
  virtual ~SE2TrajectoryCommand_Request();

  SE2TrajectoryCommand_Request(const SE2TrajectoryCommand_Request& from);
  SE2TrajectoryCommand_Request(SE2TrajectoryCommand_Request&& from) noexcept
    : SE2TrajectoryCommand_Request() {
    *this = ::std::move(from);
  }

  inline SE2TrajectoryCommand_Request& operator=(const SE2TrajectoryCommand_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline SE2TrajectoryCommand_Request& operator=(SE2TrajectoryCommand_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SE2TrajectoryCommand_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SE2TrajectoryCommand_Request* internal_default_instance() {
    return reinterpret_cast<const SE2TrajectoryCommand_Request*>(
               &_SE2TrajectoryCommand_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SE2TrajectoryCommand_Request& a, SE2TrajectoryCommand_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(SE2TrajectoryCommand_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SE2TrajectoryCommand_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SE2TrajectoryCommand_Request* New() const final {
    return CreateMaybeMessage<SE2TrajectoryCommand_Request>(nullptr);
  }

  SE2TrajectoryCommand_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SE2TrajectoryCommand_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SE2TrajectoryCommand_Request& from);
  void MergeFrom(const SE2TrajectoryCommand_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SE2TrajectoryCommand_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.SE2TrajectoryCommand.Request";
  }
  protected:
  explicit SE2TrajectoryCommand_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fbasic_5fcommand_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fbasic_5fcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSe2FrameNameFieldNumber = 3,
    kEndTimeFieldNumber = 1,
    kTrajectoryFieldNumber = 2,
  };
  // string se2_frame_name = 3;
  void clear_se2_frame_name();
  const std::string& se2_frame_name() const;
  void set_se2_frame_name(const std::string& value);
  void set_se2_frame_name(std::string&& value);
  void set_se2_frame_name(const char* value);
  void set_se2_frame_name(const char* value, size_t size);
  std::string* mutable_se2_frame_name();
  std::string* release_se2_frame_name();
  void set_allocated_se2_frame_name(std::string* se2_frame_name);
  private:
  const std::string& _internal_se2_frame_name() const;
  void _internal_set_se2_frame_name(const std::string& value);
  std::string* _internal_mutable_se2_frame_name();
  public:

  // .google.protobuf.Timestamp end_time = 1;
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& end_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_end_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_time();
  void set_allocated_end_time(PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_time();
  public:
  void unsafe_arena_set_allocated_end_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end_time();

  // .bosdyn.api.SE2Trajectory trajectory = 2;
  bool has_trajectory() const;
  private:
  bool _internal_has_trajectory() const;
  public:
  void clear_trajectory();
  const ::bosdyn::api::SE2Trajectory& trajectory() const;
  ::bosdyn::api::SE2Trajectory* release_trajectory();
  ::bosdyn::api::SE2Trajectory* mutable_trajectory();
  void set_allocated_trajectory(::bosdyn::api::SE2Trajectory* trajectory);
  private:
  const ::bosdyn::api::SE2Trajectory& _internal_trajectory() const;
  ::bosdyn::api::SE2Trajectory* _internal_mutable_trajectory();
  public:
  void unsafe_arena_set_allocated_trajectory(
      ::bosdyn::api::SE2Trajectory* trajectory);
  ::bosdyn::api::SE2Trajectory* unsafe_arena_release_trajectory();

  // @@protoc_insertion_point(class_scope:bosdyn.api.SE2TrajectoryCommand.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr se2_frame_name_;
  PROTOBUF_NAMESPACE_ID::Timestamp* end_time_;
  ::bosdyn::api::SE2Trajectory* trajectory_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fbasic_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class SE2TrajectoryCommand_Feedback PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.SE2TrajectoryCommand.Feedback) */ {
 public:
  inline SE2TrajectoryCommand_Feedback() : SE2TrajectoryCommand_Feedback(nullptr) {}
  virtual ~SE2TrajectoryCommand_Feedback();

  SE2TrajectoryCommand_Feedback(const SE2TrajectoryCommand_Feedback& from);
  SE2TrajectoryCommand_Feedback(SE2TrajectoryCommand_Feedback&& from) noexcept
    : SE2TrajectoryCommand_Feedback() {
    *this = ::std::move(from);
  }

  inline SE2TrajectoryCommand_Feedback& operator=(const SE2TrajectoryCommand_Feedback& from) {
    CopyFrom(from);
    return *this;
  }
  inline SE2TrajectoryCommand_Feedback& operator=(SE2TrajectoryCommand_Feedback&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SE2TrajectoryCommand_Feedback& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SE2TrajectoryCommand_Feedback* internal_default_instance() {
    return reinterpret_cast<const SE2TrajectoryCommand_Feedback*>(
               &_SE2TrajectoryCommand_Feedback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SE2TrajectoryCommand_Feedback& a, SE2TrajectoryCommand_Feedback& b) {
    a.Swap(&b);
  }
  inline void Swap(SE2TrajectoryCommand_Feedback* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SE2TrajectoryCommand_Feedback* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SE2TrajectoryCommand_Feedback* New() const final {
    return CreateMaybeMessage<SE2TrajectoryCommand_Feedback>(nullptr);
  }

  SE2TrajectoryCommand_Feedback* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SE2TrajectoryCommand_Feedback>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SE2TrajectoryCommand_Feedback& from);
  void MergeFrom(const SE2TrajectoryCommand_Feedback& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SE2TrajectoryCommand_Feedback* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.SE2TrajectoryCommand.Feedback";
  }
  protected:
  explicit SE2TrajectoryCommand_Feedback(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fbasic_5fcommand_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fbasic_5fcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SE2TrajectoryCommand_Feedback_Status Status;
  static constexpr Status STATUS_UNKNOWN =
    SE2TrajectoryCommand_Feedback_Status_STATUS_UNKNOWN;
  static constexpr Status STATUS_AT_GOAL =
    SE2TrajectoryCommand_Feedback_Status_STATUS_AT_GOAL;
  static constexpr Status STATUS_GOING_TO_GOAL =
    SE2TrajectoryCommand_Feedback_Status_STATUS_GOING_TO_GOAL;
  static inline bool Status_IsValid(int value) {
    return SE2TrajectoryCommand_Feedback_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    SE2TrajectoryCommand_Feedback_Status_Status_MIN;
  static constexpr Status Status_MAX =
    SE2TrajectoryCommand_Feedback_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    SE2TrajectoryCommand_Feedback_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return SE2TrajectoryCommand_Feedback_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return SE2TrajectoryCommand_Feedback_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return SE2TrajectoryCommand_Feedback_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .bosdyn.api.SE2TrajectoryCommand.Feedback.Status status = 1;
  void clear_status();
  ::bosdyn::api::SE2TrajectoryCommand_Feedback_Status status() const;
  void set_status(::bosdyn::api::SE2TrajectoryCommand_Feedback_Status value);
  private:
  ::bosdyn::api::SE2TrajectoryCommand_Feedback_Status _internal_status() const;
  void _internal_set_status(::bosdyn::api::SE2TrajectoryCommand_Feedback_Status value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.SE2TrajectoryCommand.Feedback)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fbasic_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class SE2TrajectoryCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.SE2TrajectoryCommand) */ {
 public:
  inline SE2TrajectoryCommand() : SE2TrajectoryCommand(nullptr) {}
  virtual ~SE2TrajectoryCommand();

  SE2TrajectoryCommand(const SE2TrajectoryCommand& from);
  SE2TrajectoryCommand(SE2TrajectoryCommand&& from) noexcept
    : SE2TrajectoryCommand() {
    *this = ::std::move(from);
  }

  inline SE2TrajectoryCommand& operator=(const SE2TrajectoryCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline SE2TrajectoryCommand& operator=(SE2TrajectoryCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SE2TrajectoryCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SE2TrajectoryCommand* internal_default_instance() {
    return reinterpret_cast<const SE2TrajectoryCommand*>(
               &_SE2TrajectoryCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SE2TrajectoryCommand& a, SE2TrajectoryCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(SE2TrajectoryCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SE2TrajectoryCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SE2TrajectoryCommand* New() const final {
    return CreateMaybeMessage<SE2TrajectoryCommand>(nullptr);
  }

  SE2TrajectoryCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SE2TrajectoryCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SE2TrajectoryCommand& from);
  void MergeFrom(const SE2TrajectoryCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SE2TrajectoryCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.SE2TrajectoryCommand";
  }
  protected:
  explicit SE2TrajectoryCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fbasic_5fcommand_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fbasic_5fcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SE2TrajectoryCommand_Request Request;
  typedef SE2TrajectoryCommand_Feedback Feedback;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bosdyn.api.SE2TrajectoryCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fbasic_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class SE2VelocityCommand_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.SE2VelocityCommand.Request) */ {
 public:
  inline SE2VelocityCommand_Request() : SE2VelocityCommand_Request(nullptr) {}
  virtual ~SE2VelocityCommand_Request();

  SE2VelocityCommand_Request(const SE2VelocityCommand_Request& from);
  SE2VelocityCommand_Request(SE2VelocityCommand_Request&& from) noexcept
    : SE2VelocityCommand_Request() {
    *this = ::std::move(from);
  }

  inline SE2VelocityCommand_Request& operator=(const SE2VelocityCommand_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline SE2VelocityCommand_Request& operator=(SE2VelocityCommand_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SE2VelocityCommand_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SE2VelocityCommand_Request* internal_default_instance() {
    return reinterpret_cast<const SE2VelocityCommand_Request*>(
               &_SE2VelocityCommand_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SE2VelocityCommand_Request& a, SE2VelocityCommand_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(SE2VelocityCommand_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SE2VelocityCommand_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SE2VelocityCommand_Request* New() const final {
    return CreateMaybeMessage<SE2VelocityCommand_Request>(nullptr);
  }

  SE2VelocityCommand_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SE2VelocityCommand_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SE2VelocityCommand_Request& from);
  void MergeFrom(const SE2VelocityCommand_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SE2VelocityCommand_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.SE2VelocityCommand.Request";
  }
  protected:
  explicit SE2VelocityCommand_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fbasic_5fcommand_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fbasic_5fcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSe2FrameNameFieldNumber = 5,
    kEndTimeFieldNumber = 1,
    kVelocityFieldNumber = 2,
    kSlewRateLimitFieldNumber = 4,
  };
  // string se2_frame_name = 5;
  void clear_se2_frame_name();
  const std::string& se2_frame_name() const;
  void set_se2_frame_name(const std::string& value);
  void set_se2_frame_name(std::string&& value);
  void set_se2_frame_name(const char* value);
  void set_se2_frame_name(const char* value, size_t size);
  std::string* mutable_se2_frame_name();
  std::string* release_se2_frame_name();
  void set_allocated_se2_frame_name(std::string* se2_frame_name);
  private:
  const std::string& _internal_se2_frame_name() const;
  void _internal_set_se2_frame_name(const std::string& value);
  std::string* _internal_mutable_se2_frame_name();
  public:

  // .google.protobuf.Timestamp end_time = 1;
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& end_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_end_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_time();
  void set_allocated_end_time(PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_time();
  public:
  void unsafe_arena_set_allocated_end_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end_time();

  // .bosdyn.api.SE2Velocity velocity = 2;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::bosdyn::api::SE2Velocity& velocity() const;
  ::bosdyn::api::SE2Velocity* release_velocity();
  ::bosdyn::api::SE2Velocity* mutable_velocity();
  void set_allocated_velocity(::bosdyn::api::SE2Velocity* velocity);
  private:
  const ::bosdyn::api::SE2Velocity& _internal_velocity() const;
  ::bosdyn::api::SE2Velocity* _internal_mutable_velocity();
  public:
  void unsafe_arena_set_allocated_velocity(
      ::bosdyn::api::SE2Velocity* velocity);
  ::bosdyn::api::SE2Velocity* unsafe_arena_release_velocity();

  // .bosdyn.api.SE2Velocity slew_rate_limit = 4;
  bool has_slew_rate_limit() const;
  private:
  bool _internal_has_slew_rate_limit() const;
  public:
  void clear_slew_rate_limit();
  const ::bosdyn::api::SE2Velocity& slew_rate_limit() const;
  ::bosdyn::api::SE2Velocity* release_slew_rate_limit();
  ::bosdyn::api::SE2Velocity* mutable_slew_rate_limit();
  void set_allocated_slew_rate_limit(::bosdyn::api::SE2Velocity* slew_rate_limit);
  private:
  const ::bosdyn::api::SE2Velocity& _internal_slew_rate_limit() const;
  ::bosdyn::api::SE2Velocity* _internal_mutable_slew_rate_limit();
  public:
  void unsafe_arena_set_allocated_slew_rate_limit(
      ::bosdyn::api::SE2Velocity* slew_rate_limit);
  ::bosdyn::api::SE2Velocity* unsafe_arena_release_slew_rate_limit();

  // @@protoc_insertion_point(class_scope:bosdyn.api.SE2VelocityCommand.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr se2_frame_name_;
  PROTOBUF_NAMESPACE_ID::Timestamp* end_time_;
  ::bosdyn::api::SE2Velocity* velocity_;
  ::bosdyn::api::SE2Velocity* slew_rate_limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fbasic_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class SE2VelocityCommand_Feedback PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.SE2VelocityCommand.Feedback) */ {
 public:
  inline SE2VelocityCommand_Feedback() : SE2VelocityCommand_Feedback(nullptr) {}
  virtual ~SE2VelocityCommand_Feedback();

  SE2VelocityCommand_Feedback(const SE2VelocityCommand_Feedback& from);
  SE2VelocityCommand_Feedback(SE2VelocityCommand_Feedback&& from) noexcept
    : SE2VelocityCommand_Feedback() {
    *this = ::std::move(from);
  }

  inline SE2VelocityCommand_Feedback& operator=(const SE2VelocityCommand_Feedback& from) {
    CopyFrom(from);
    return *this;
  }
  inline SE2VelocityCommand_Feedback& operator=(SE2VelocityCommand_Feedback&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SE2VelocityCommand_Feedback& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SE2VelocityCommand_Feedback* internal_default_instance() {
    return reinterpret_cast<const SE2VelocityCommand_Feedback*>(
               &_SE2VelocityCommand_Feedback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SE2VelocityCommand_Feedback& a, SE2VelocityCommand_Feedback& b) {
    a.Swap(&b);
  }
  inline void Swap(SE2VelocityCommand_Feedback* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SE2VelocityCommand_Feedback* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SE2VelocityCommand_Feedback* New() const final {
    return CreateMaybeMessage<SE2VelocityCommand_Feedback>(nullptr);
  }

  SE2VelocityCommand_Feedback* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SE2VelocityCommand_Feedback>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SE2VelocityCommand_Feedback& from);
  void MergeFrom(const SE2VelocityCommand_Feedback& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SE2VelocityCommand_Feedback* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.SE2VelocityCommand.Feedback";
  }
  protected:
  explicit SE2VelocityCommand_Feedback(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fbasic_5fcommand_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fbasic_5fcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bosdyn.api.SE2VelocityCommand.Feedback)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fbasic_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class SE2VelocityCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.SE2VelocityCommand) */ {
 public:
  inline SE2VelocityCommand() : SE2VelocityCommand(nullptr) {}
  virtual ~SE2VelocityCommand();

  SE2VelocityCommand(const SE2VelocityCommand& from);
  SE2VelocityCommand(SE2VelocityCommand&& from) noexcept
    : SE2VelocityCommand() {
    *this = ::std::move(from);
  }

  inline SE2VelocityCommand& operator=(const SE2VelocityCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline SE2VelocityCommand& operator=(SE2VelocityCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SE2VelocityCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SE2VelocityCommand* internal_default_instance() {
    return reinterpret_cast<const SE2VelocityCommand*>(
               &_SE2VelocityCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SE2VelocityCommand& a, SE2VelocityCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(SE2VelocityCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SE2VelocityCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SE2VelocityCommand* New() const final {
    return CreateMaybeMessage<SE2VelocityCommand>(nullptr);
  }

  SE2VelocityCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SE2VelocityCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SE2VelocityCommand& from);
  void MergeFrom(const SE2VelocityCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SE2VelocityCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.SE2VelocityCommand";
  }
  protected:
  explicit SE2VelocityCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fbasic_5fcommand_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fbasic_5fcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SE2VelocityCommand_Request Request;
  typedef SE2VelocityCommand_Feedback Feedback;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bosdyn.api.SE2VelocityCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fbasic_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class SitCommand_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.SitCommand.Request) */ {
 public:
  inline SitCommand_Request() : SitCommand_Request(nullptr) {}
  virtual ~SitCommand_Request();

  SitCommand_Request(const SitCommand_Request& from);
  SitCommand_Request(SitCommand_Request&& from) noexcept
    : SitCommand_Request() {
    *this = ::std::move(from);
  }

  inline SitCommand_Request& operator=(const SitCommand_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline SitCommand_Request& operator=(SitCommand_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SitCommand_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SitCommand_Request* internal_default_instance() {
    return reinterpret_cast<const SitCommand_Request*>(
               &_SitCommand_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(SitCommand_Request& a, SitCommand_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(SitCommand_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SitCommand_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SitCommand_Request* New() const final {
    return CreateMaybeMessage<SitCommand_Request>(nullptr);
  }

  SitCommand_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SitCommand_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SitCommand_Request& from);
  void MergeFrom(const SitCommand_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SitCommand_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.SitCommand.Request";
  }
  protected:
  explicit SitCommand_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fbasic_5fcommand_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fbasic_5fcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bosdyn.api.SitCommand.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fbasic_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class SitCommand_Feedback PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.SitCommand.Feedback) */ {
 public:
  inline SitCommand_Feedback() : SitCommand_Feedback(nullptr) {}
  virtual ~SitCommand_Feedback();

  SitCommand_Feedback(const SitCommand_Feedback& from);
  SitCommand_Feedback(SitCommand_Feedback&& from) noexcept
    : SitCommand_Feedback() {
    *this = ::std::move(from);
  }

  inline SitCommand_Feedback& operator=(const SitCommand_Feedback& from) {
    CopyFrom(from);
    return *this;
  }
  inline SitCommand_Feedback& operator=(SitCommand_Feedback&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SitCommand_Feedback& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SitCommand_Feedback* internal_default_instance() {
    return reinterpret_cast<const SitCommand_Feedback*>(
               &_SitCommand_Feedback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(SitCommand_Feedback& a, SitCommand_Feedback& b) {
    a.Swap(&b);
  }
  inline void Swap(SitCommand_Feedback* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SitCommand_Feedback* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SitCommand_Feedback* New() const final {
    return CreateMaybeMessage<SitCommand_Feedback>(nullptr);
  }

  SitCommand_Feedback* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SitCommand_Feedback>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SitCommand_Feedback& from);
  void MergeFrom(const SitCommand_Feedback& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SitCommand_Feedback* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.SitCommand.Feedback";
  }
  protected:
  explicit SitCommand_Feedback(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fbasic_5fcommand_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fbasic_5fcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SitCommand_Feedback_Status Status;
  static constexpr Status STATUS_UNKNOWN =
    SitCommand_Feedback_Status_STATUS_UNKNOWN;
  static constexpr Status STATUS_IS_SITTING =
    SitCommand_Feedback_Status_STATUS_IS_SITTING;
  static constexpr Status STATUS_IN_PROGRESS =
    SitCommand_Feedback_Status_STATUS_IN_PROGRESS;
  static inline bool Status_IsValid(int value) {
    return SitCommand_Feedback_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    SitCommand_Feedback_Status_Status_MIN;
  static constexpr Status Status_MAX =
    SitCommand_Feedback_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    SitCommand_Feedback_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return SitCommand_Feedback_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return SitCommand_Feedback_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return SitCommand_Feedback_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 2,
  };
  // .bosdyn.api.SitCommand.Feedback.Status status = 2;
  void clear_status();
  ::bosdyn::api::SitCommand_Feedback_Status status() const;
  void set_status(::bosdyn::api::SitCommand_Feedback_Status value);
  private:
  ::bosdyn::api::SitCommand_Feedback_Status _internal_status() const;
  void _internal_set_status(::bosdyn::api::SitCommand_Feedback_Status value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.SitCommand.Feedback)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fbasic_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class SitCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.SitCommand) */ {
 public:
  inline SitCommand() : SitCommand(nullptr) {}
  virtual ~SitCommand();

  SitCommand(const SitCommand& from);
  SitCommand(SitCommand&& from) noexcept
    : SitCommand() {
    *this = ::std::move(from);
  }

  inline SitCommand& operator=(const SitCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline SitCommand& operator=(SitCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SitCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SitCommand* internal_default_instance() {
    return reinterpret_cast<const SitCommand*>(
               &_SitCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(SitCommand& a, SitCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(SitCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SitCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SitCommand* New() const final {
    return CreateMaybeMessage<SitCommand>(nullptr);
  }

  SitCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SitCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SitCommand& from);
  void MergeFrom(const SitCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SitCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.SitCommand";
  }
  protected:
  explicit SitCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fbasic_5fcommand_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fbasic_5fcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SitCommand_Request Request;
  typedef SitCommand_Feedback Feedback;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bosdyn.api.SitCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fbasic_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class StandCommand_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.StandCommand.Request) */ {
 public:
  inline StandCommand_Request() : StandCommand_Request(nullptr) {}
  virtual ~StandCommand_Request();

  StandCommand_Request(const StandCommand_Request& from);
  StandCommand_Request(StandCommand_Request&& from) noexcept
    : StandCommand_Request() {
    *this = ::std::move(from);
  }

  inline StandCommand_Request& operator=(const StandCommand_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline StandCommand_Request& operator=(StandCommand_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StandCommand_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StandCommand_Request* internal_default_instance() {
    return reinterpret_cast<const StandCommand_Request*>(
               &_StandCommand_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(StandCommand_Request& a, StandCommand_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(StandCommand_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StandCommand_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StandCommand_Request* New() const final {
    return CreateMaybeMessage<StandCommand_Request>(nullptr);
  }

  StandCommand_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StandCommand_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StandCommand_Request& from);
  void MergeFrom(const StandCommand_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StandCommand_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.StandCommand.Request";
  }
  protected:
  explicit StandCommand_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fbasic_5fcommand_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fbasic_5fcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bosdyn.api.StandCommand.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fbasic_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class StandCommand_Feedback PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.StandCommand.Feedback) */ {
 public:
  inline StandCommand_Feedback() : StandCommand_Feedback(nullptr) {}
  virtual ~StandCommand_Feedback();

  StandCommand_Feedback(const StandCommand_Feedback& from);
  StandCommand_Feedback(StandCommand_Feedback&& from) noexcept
    : StandCommand_Feedback() {
    *this = ::std::move(from);
  }

  inline StandCommand_Feedback& operator=(const StandCommand_Feedback& from) {
    CopyFrom(from);
    return *this;
  }
  inline StandCommand_Feedback& operator=(StandCommand_Feedback&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StandCommand_Feedback& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StandCommand_Feedback* internal_default_instance() {
    return reinterpret_cast<const StandCommand_Feedback*>(
               &_StandCommand_Feedback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(StandCommand_Feedback& a, StandCommand_Feedback& b) {
    a.Swap(&b);
  }
  inline void Swap(StandCommand_Feedback* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StandCommand_Feedback* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StandCommand_Feedback* New() const final {
    return CreateMaybeMessage<StandCommand_Feedback>(nullptr);
  }

  StandCommand_Feedback* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StandCommand_Feedback>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StandCommand_Feedback& from);
  void MergeFrom(const StandCommand_Feedback& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StandCommand_Feedback* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.StandCommand.Feedback";
  }
  protected:
  explicit StandCommand_Feedback(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fbasic_5fcommand_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fbasic_5fcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef StandCommand_Feedback_Status Status;
  static constexpr Status STATUS_UNKNOWN =
    StandCommand_Feedback_Status_STATUS_UNKNOWN;
  static constexpr Status STATUS_IS_STANDING =
    StandCommand_Feedback_Status_STATUS_IS_STANDING;
  static constexpr Status STATUS_IN_PROGRESS =
    StandCommand_Feedback_Status_STATUS_IN_PROGRESS;
  static inline bool Status_IsValid(int value) {
    return StandCommand_Feedback_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    StandCommand_Feedback_Status_Status_MIN;
  static constexpr Status Status_MAX =
    StandCommand_Feedback_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    StandCommand_Feedback_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return StandCommand_Feedback_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return StandCommand_Feedback_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return StandCommand_Feedback_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .bosdyn.api.StandCommand.Feedback.Status status = 1;
  void clear_status();
  ::bosdyn::api::StandCommand_Feedback_Status status() const;
  void set_status(::bosdyn::api::StandCommand_Feedback_Status value);
  private:
  ::bosdyn::api::StandCommand_Feedback_Status _internal_status() const;
  void _internal_set_status(::bosdyn::api::StandCommand_Feedback_Status value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.StandCommand.Feedback)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fbasic_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class StandCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.StandCommand) */ {
 public:
  inline StandCommand() : StandCommand(nullptr) {}
  virtual ~StandCommand();

  StandCommand(const StandCommand& from);
  StandCommand(StandCommand&& from) noexcept
    : StandCommand() {
    *this = ::std::move(from);
  }

  inline StandCommand& operator=(const StandCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline StandCommand& operator=(StandCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StandCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StandCommand* internal_default_instance() {
    return reinterpret_cast<const StandCommand*>(
               &_StandCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(StandCommand& a, StandCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(StandCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StandCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StandCommand* New() const final {
    return CreateMaybeMessage<StandCommand>(nullptr);
  }

  StandCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StandCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StandCommand& from);
  void MergeFrom(const StandCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StandCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.StandCommand";
  }
  protected:
  explicit StandCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fbasic_5fcommand_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fbasic_5fcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef StandCommand_Request Request;
  typedef StandCommand_Feedback Feedback;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bosdyn.api.StandCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fbasic_5fcommand_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SelfRightCommand_Request

// -------------------------------------------------------------------

// SelfRightCommand_Feedback

// -------------------------------------------------------------------

// SelfRightCommand

// -------------------------------------------------------------------

// StopCommand_Request

// -------------------------------------------------------------------

// StopCommand_Feedback

// -------------------------------------------------------------------

// StopCommand

// -------------------------------------------------------------------

// FreezeCommand_Request

// -------------------------------------------------------------------

// FreezeCommand_Feedback

// -------------------------------------------------------------------

// FreezeCommand

// -------------------------------------------------------------------

// SafePowerOffCommand_Request

// -------------------------------------------------------------------

// SafePowerOffCommand_Feedback

// .bosdyn.api.SafePowerOffCommand.Feedback.Status status = 1;
inline void SafePowerOffCommand_Feedback::clear_status() {
  status_ = 0;
}
inline ::bosdyn::api::SafePowerOffCommand_Feedback_Status SafePowerOffCommand_Feedback::_internal_status() const {
  return static_cast< ::bosdyn::api::SafePowerOffCommand_Feedback_Status >(status_);
}
inline ::bosdyn::api::SafePowerOffCommand_Feedback_Status SafePowerOffCommand_Feedback::status() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.SafePowerOffCommand.Feedback.status)
  return _internal_status();
}
inline void SafePowerOffCommand_Feedback::_internal_set_status(::bosdyn::api::SafePowerOffCommand_Feedback_Status value) {
  
  status_ = value;
}
inline void SafePowerOffCommand_Feedback::set_status(::bosdyn::api::SafePowerOffCommand_Feedback_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.SafePowerOffCommand.Feedback.status)
}

// -------------------------------------------------------------------

// SafePowerOffCommand

// -------------------------------------------------------------------

// SE2TrajectoryCommand_Request

// .google.protobuf.Timestamp end_time = 1;
inline bool SE2TrajectoryCommand_Request::_internal_has_end_time() const {
  return this != internal_default_instance() && end_time_ != nullptr;
}
inline bool SE2TrajectoryCommand_Request::has_end_time() const {
  return _internal_has_end_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& SE2TrajectoryCommand_Request::_internal_end_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = end_time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& SE2TrajectoryCommand_Request::end_time() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.SE2TrajectoryCommand.Request.end_time)
  return _internal_end_time();
}
inline void SE2TrajectoryCommand_Request::unsafe_arena_set_allocated_end_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  end_time_ = end_time;
  if (end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.SE2TrajectoryCommand.Request.end_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SE2TrajectoryCommand_Request::release_end_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_time_;
  end_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SE2TrajectoryCommand_Request::unsafe_arena_release_end_time() {
  // @@protoc_insertion_point(field_release:bosdyn.api.SE2TrajectoryCommand.Request.end_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_time_;
  end_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SE2TrajectoryCommand_Request::_internal_mutable_end_time() {
  
  if (end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    end_time_ = p;
  }
  return end_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SE2TrajectoryCommand_Request::mutable_end_time() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.SE2TrajectoryCommand.Request.end_time)
  return _internal_mutable_end_time();
}
inline void SE2TrajectoryCommand_Request::set_allocated_end_time(PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  if (end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time)->GetArena();
    if (message_arena != submessage_arena) {
      end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.SE2TrajectoryCommand.Request.end_time)
}

// string se2_frame_name = 3;
inline void SE2TrajectoryCommand_Request::clear_se2_frame_name() {
  se2_frame_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SE2TrajectoryCommand_Request::se2_frame_name() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.SE2TrajectoryCommand.Request.se2_frame_name)
  return _internal_se2_frame_name();
}
inline void SE2TrajectoryCommand_Request::set_se2_frame_name(const std::string& value) {
  _internal_set_se2_frame_name(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.SE2TrajectoryCommand.Request.se2_frame_name)
}
inline std::string* SE2TrajectoryCommand_Request::mutable_se2_frame_name() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.SE2TrajectoryCommand.Request.se2_frame_name)
  return _internal_mutable_se2_frame_name();
}
inline const std::string& SE2TrajectoryCommand_Request::_internal_se2_frame_name() const {
  return se2_frame_name_.Get();
}
inline void SE2TrajectoryCommand_Request::_internal_set_se2_frame_name(const std::string& value) {
  
  se2_frame_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SE2TrajectoryCommand_Request::set_se2_frame_name(std::string&& value) {
  
  se2_frame_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.SE2TrajectoryCommand.Request.se2_frame_name)
}
inline void SE2TrajectoryCommand_Request::set_se2_frame_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  se2_frame_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.SE2TrajectoryCommand.Request.se2_frame_name)
}
inline void SE2TrajectoryCommand_Request::set_se2_frame_name(const char* value,
    size_t size) {
  
  se2_frame_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.SE2TrajectoryCommand.Request.se2_frame_name)
}
inline std::string* SE2TrajectoryCommand_Request::_internal_mutable_se2_frame_name() {
  
  return se2_frame_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SE2TrajectoryCommand_Request::release_se2_frame_name() {
  // @@protoc_insertion_point(field_release:bosdyn.api.SE2TrajectoryCommand.Request.se2_frame_name)
  return se2_frame_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SE2TrajectoryCommand_Request::set_allocated_se2_frame_name(std::string* se2_frame_name) {
  if (se2_frame_name != nullptr) {
    
  } else {
    
  }
  se2_frame_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), se2_frame_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.SE2TrajectoryCommand.Request.se2_frame_name)
}

// .bosdyn.api.SE2Trajectory trajectory = 2;
inline bool SE2TrajectoryCommand_Request::_internal_has_trajectory() const {
  return this != internal_default_instance() && trajectory_ != nullptr;
}
inline bool SE2TrajectoryCommand_Request::has_trajectory() const {
  return _internal_has_trajectory();
}
inline const ::bosdyn::api::SE2Trajectory& SE2TrajectoryCommand_Request::_internal_trajectory() const {
  const ::bosdyn::api::SE2Trajectory* p = trajectory_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::SE2Trajectory*>(
      &::bosdyn::api::_SE2Trajectory_default_instance_);
}
inline const ::bosdyn::api::SE2Trajectory& SE2TrajectoryCommand_Request::trajectory() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.SE2TrajectoryCommand.Request.trajectory)
  return _internal_trajectory();
}
inline void SE2TrajectoryCommand_Request::unsafe_arena_set_allocated_trajectory(
    ::bosdyn::api::SE2Trajectory* trajectory) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trajectory_);
  }
  trajectory_ = trajectory;
  if (trajectory) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.SE2TrajectoryCommand.Request.trajectory)
}
inline ::bosdyn::api::SE2Trajectory* SE2TrajectoryCommand_Request::release_trajectory() {
  
  ::bosdyn::api::SE2Trajectory* temp = trajectory_;
  trajectory_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::SE2Trajectory* SE2TrajectoryCommand_Request::unsafe_arena_release_trajectory() {
  // @@protoc_insertion_point(field_release:bosdyn.api.SE2TrajectoryCommand.Request.trajectory)
  
  ::bosdyn::api::SE2Trajectory* temp = trajectory_;
  trajectory_ = nullptr;
  return temp;
}
inline ::bosdyn::api::SE2Trajectory* SE2TrajectoryCommand_Request::_internal_mutable_trajectory() {
  
  if (trajectory_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::SE2Trajectory>(GetArena());
    trajectory_ = p;
  }
  return trajectory_;
}
inline ::bosdyn::api::SE2Trajectory* SE2TrajectoryCommand_Request::mutable_trajectory() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.SE2TrajectoryCommand.Request.trajectory)
  return _internal_mutable_trajectory();
}
inline void SE2TrajectoryCommand_Request::set_allocated_trajectory(::bosdyn::api::SE2Trajectory* trajectory) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(trajectory_);
  }
  if (trajectory) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trajectory)->GetArena();
    if (message_arena != submessage_arena) {
      trajectory = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trajectory, submessage_arena);
    }
    
  } else {
    
  }
  trajectory_ = trajectory;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.SE2TrajectoryCommand.Request.trajectory)
}

// -------------------------------------------------------------------

// SE2TrajectoryCommand_Feedback

// .bosdyn.api.SE2TrajectoryCommand.Feedback.Status status = 1;
inline void SE2TrajectoryCommand_Feedback::clear_status() {
  status_ = 0;
}
inline ::bosdyn::api::SE2TrajectoryCommand_Feedback_Status SE2TrajectoryCommand_Feedback::_internal_status() const {
  return static_cast< ::bosdyn::api::SE2TrajectoryCommand_Feedback_Status >(status_);
}
inline ::bosdyn::api::SE2TrajectoryCommand_Feedback_Status SE2TrajectoryCommand_Feedback::status() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.SE2TrajectoryCommand.Feedback.status)
  return _internal_status();
}
inline void SE2TrajectoryCommand_Feedback::_internal_set_status(::bosdyn::api::SE2TrajectoryCommand_Feedback_Status value) {
  
  status_ = value;
}
inline void SE2TrajectoryCommand_Feedback::set_status(::bosdyn::api::SE2TrajectoryCommand_Feedback_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.SE2TrajectoryCommand.Feedback.status)
}

// -------------------------------------------------------------------

// SE2TrajectoryCommand

// -------------------------------------------------------------------

// SE2VelocityCommand_Request

// .google.protobuf.Timestamp end_time = 1;
inline bool SE2VelocityCommand_Request::_internal_has_end_time() const {
  return this != internal_default_instance() && end_time_ != nullptr;
}
inline bool SE2VelocityCommand_Request::has_end_time() const {
  return _internal_has_end_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& SE2VelocityCommand_Request::_internal_end_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = end_time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& SE2VelocityCommand_Request::end_time() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.SE2VelocityCommand.Request.end_time)
  return _internal_end_time();
}
inline void SE2VelocityCommand_Request::unsafe_arena_set_allocated_end_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  end_time_ = end_time;
  if (end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.SE2VelocityCommand.Request.end_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SE2VelocityCommand_Request::release_end_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_time_;
  end_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SE2VelocityCommand_Request::unsafe_arena_release_end_time() {
  // @@protoc_insertion_point(field_release:bosdyn.api.SE2VelocityCommand.Request.end_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_time_;
  end_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SE2VelocityCommand_Request::_internal_mutable_end_time() {
  
  if (end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    end_time_ = p;
  }
  return end_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SE2VelocityCommand_Request::mutable_end_time() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.SE2VelocityCommand.Request.end_time)
  return _internal_mutable_end_time();
}
inline void SE2VelocityCommand_Request::set_allocated_end_time(PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  if (end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time)->GetArena();
    if (message_arena != submessage_arena) {
      end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.SE2VelocityCommand.Request.end_time)
}

// string se2_frame_name = 5;
inline void SE2VelocityCommand_Request::clear_se2_frame_name() {
  se2_frame_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SE2VelocityCommand_Request::se2_frame_name() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.SE2VelocityCommand.Request.se2_frame_name)
  return _internal_se2_frame_name();
}
inline void SE2VelocityCommand_Request::set_se2_frame_name(const std::string& value) {
  _internal_set_se2_frame_name(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.SE2VelocityCommand.Request.se2_frame_name)
}
inline std::string* SE2VelocityCommand_Request::mutable_se2_frame_name() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.SE2VelocityCommand.Request.se2_frame_name)
  return _internal_mutable_se2_frame_name();
}
inline const std::string& SE2VelocityCommand_Request::_internal_se2_frame_name() const {
  return se2_frame_name_.Get();
}
inline void SE2VelocityCommand_Request::_internal_set_se2_frame_name(const std::string& value) {
  
  se2_frame_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SE2VelocityCommand_Request::set_se2_frame_name(std::string&& value) {
  
  se2_frame_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.SE2VelocityCommand.Request.se2_frame_name)
}
inline void SE2VelocityCommand_Request::set_se2_frame_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  se2_frame_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.SE2VelocityCommand.Request.se2_frame_name)
}
inline void SE2VelocityCommand_Request::set_se2_frame_name(const char* value,
    size_t size) {
  
  se2_frame_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.SE2VelocityCommand.Request.se2_frame_name)
}
inline std::string* SE2VelocityCommand_Request::_internal_mutable_se2_frame_name() {
  
  return se2_frame_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SE2VelocityCommand_Request::release_se2_frame_name() {
  // @@protoc_insertion_point(field_release:bosdyn.api.SE2VelocityCommand.Request.se2_frame_name)
  return se2_frame_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SE2VelocityCommand_Request::set_allocated_se2_frame_name(std::string* se2_frame_name) {
  if (se2_frame_name != nullptr) {
    
  } else {
    
  }
  se2_frame_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), se2_frame_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.SE2VelocityCommand.Request.se2_frame_name)
}

// .bosdyn.api.SE2Velocity velocity = 2;
inline bool SE2VelocityCommand_Request::_internal_has_velocity() const {
  return this != internal_default_instance() && velocity_ != nullptr;
}
inline bool SE2VelocityCommand_Request::has_velocity() const {
  return _internal_has_velocity();
}
inline const ::bosdyn::api::SE2Velocity& SE2VelocityCommand_Request::_internal_velocity() const {
  const ::bosdyn::api::SE2Velocity* p = velocity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::SE2Velocity*>(
      &::bosdyn::api::_SE2Velocity_default_instance_);
}
inline const ::bosdyn::api::SE2Velocity& SE2VelocityCommand_Request::velocity() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.SE2VelocityCommand.Request.velocity)
  return _internal_velocity();
}
inline void SE2VelocityCommand_Request::unsafe_arena_set_allocated_velocity(
    ::bosdyn::api::SE2Velocity* velocity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_);
  }
  velocity_ = velocity;
  if (velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.SE2VelocityCommand.Request.velocity)
}
inline ::bosdyn::api::SE2Velocity* SE2VelocityCommand_Request::release_velocity() {
  
  ::bosdyn::api::SE2Velocity* temp = velocity_;
  velocity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::SE2Velocity* SE2VelocityCommand_Request::unsafe_arena_release_velocity() {
  // @@protoc_insertion_point(field_release:bosdyn.api.SE2VelocityCommand.Request.velocity)
  
  ::bosdyn::api::SE2Velocity* temp = velocity_;
  velocity_ = nullptr;
  return temp;
}
inline ::bosdyn::api::SE2Velocity* SE2VelocityCommand_Request::_internal_mutable_velocity() {
  
  if (velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::SE2Velocity>(GetArena());
    velocity_ = p;
  }
  return velocity_;
}
inline ::bosdyn::api::SE2Velocity* SE2VelocityCommand_Request::mutable_velocity() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.SE2VelocityCommand.Request.velocity)
  return _internal_mutable_velocity();
}
inline void SE2VelocityCommand_Request::set_allocated_velocity(::bosdyn::api::SE2Velocity* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_);
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity)->GetArena();
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.SE2VelocityCommand.Request.velocity)
}

// .bosdyn.api.SE2Velocity slew_rate_limit = 4;
inline bool SE2VelocityCommand_Request::_internal_has_slew_rate_limit() const {
  return this != internal_default_instance() && slew_rate_limit_ != nullptr;
}
inline bool SE2VelocityCommand_Request::has_slew_rate_limit() const {
  return _internal_has_slew_rate_limit();
}
inline const ::bosdyn::api::SE2Velocity& SE2VelocityCommand_Request::_internal_slew_rate_limit() const {
  const ::bosdyn::api::SE2Velocity* p = slew_rate_limit_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::SE2Velocity*>(
      &::bosdyn::api::_SE2Velocity_default_instance_);
}
inline const ::bosdyn::api::SE2Velocity& SE2VelocityCommand_Request::slew_rate_limit() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.SE2VelocityCommand.Request.slew_rate_limit)
  return _internal_slew_rate_limit();
}
inline void SE2VelocityCommand_Request::unsafe_arena_set_allocated_slew_rate_limit(
    ::bosdyn::api::SE2Velocity* slew_rate_limit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slew_rate_limit_);
  }
  slew_rate_limit_ = slew_rate_limit;
  if (slew_rate_limit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.SE2VelocityCommand.Request.slew_rate_limit)
}
inline ::bosdyn::api::SE2Velocity* SE2VelocityCommand_Request::release_slew_rate_limit() {
  
  ::bosdyn::api::SE2Velocity* temp = slew_rate_limit_;
  slew_rate_limit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::SE2Velocity* SE2VelocityCommand_Request::unsafe_arena_release_slew_rate_limit() {
  // @@protoc_insertion_point(field_release:bosdyn.api.SE2VelocityCommand.Request.slew_rate_limit)
  
  ::bosdyn::api::SE2Velocity* temp = slew_rate_limit_;
  slew_rate_limit_ = nullptr;
  return temp;
}
inline ::bosdyn::api::SE2Velocity* SE2VelocityCommand_Request::_internal_mutable_slew_rate_limit() {
  
  if (slew_rate_limit_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::SE2Velocity>(GetArena());
    slew_rate_limit_ = p;
  }
  return slew_rate_limit_;
}
inline ::bosdyn::api::SE2Velocity* SE2VelocityCommand_Request::mutable_slew_rate_limit() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.SE2VelocityCommand.Request.slew_rate_limit)
  return _internal_mutable_slew_rate_limit();
}
inline void SE2VelocityCommand_Request::set_allocated_slew_rate_limit(::bosdyn::api::SE2Velocity* slew_rate_limit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(slew_rate_limit_);
  }
  if (slew_rate_limit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slew_rate_limit)->GetArena();
    if (message_arena != submessage_arena) {
      slew_rate_limit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slew_rate_limit, submessage_arena);
    }
    
  } else {
    
  }
  slew_rate_limit_ = slew_rate_limit;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.SE2VelocityCommand.Request.slew_rate_limit)
}

// -------------------------------------------------------------------

// SE2VelocityCommand_Feedback

// -------------------------------------------------------------------

// SE2VelocityCommand

// -------------------------------------------------------------------

// SitCommand_Request

// -------------------------------------------------------------------

// SitCommand_Feedback

// .bosdyn.api.SitCommand.Feedback.Status status = 2;
inline void SitCommand_Feedback::clear_status() {
  status_ = 0;
}
inline ::bosdyn::api::SitCommand_Feedback_Status SitCommand_Feedback::_internal_status() const {
  return static_cast< ::bosdyn::api::SitCommand_Feedback_Status >(status_);
}
inline ::bosdyn::api::SitCommand_Feedback_Status SitCommand_Feedback::status() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.SitCommand.Feedback.status)
  return _internal_status();
}
inline void SitCommand_Feedback::_internal_set_status(::bosdyn::api::SitCommand_Feedback_Status value) {
  
  status_ = value;
}
inline void SitCommand_Feedback::set_status(::bosdyn::api::SitCommand_Feedback_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.SitCommand.Feedback.status)
}

// -------------------------------------------------------------------

// SitCommand

// -------------------------------------------------------------------

// StandCommand_Request

// -------------------------------------------------------------------

// StandCommand_Feedback

// .bosdyn.api.StandCommand.Feedback.Status status = 1;
inline void StandCommand_Feedback::clear_status() {
  status_ = 0;
}
inline ::bosdyn::api::StandCommand_Feedback_Status StandCommand_Feedback::_internal_status() const {
  return static_cast< ::bosdyn::api::StandCommand_Feedback_Status >(status_);
}
inline ::bosdyn::api::StandCommand_Feedback_Status StandCommand_Feedback::status() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.StandCommand.Feedback.status)
  return _internal_status();
}
inline void StandCommand_Feedback::_internal_set_status(::bosdyn::api::StandCommand_Feedback_Status value) {
  
  status_ = value;
}
inline void StandCommand_Feedback::set_status(::bosdyn::api::StandCommand_Feedback_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.StandCommand.Feedback.status)
}

// -------------------------------------------------------------------

// StandCommand

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace bosdyn

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bosdyn::api::SafePowerOffCommand_Feedback_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::SafePowerOffCommand_Feedback_Status>() {
  return ::bosdyn::api::SafePowerOffCommand_Feedback_Status_descriptor();
}
template <> struct is_proto_enum< ::bosdyn::api::SE2TrajectoryCommand_Feedback_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::SE2TrajectoryCommand_Feedback_Status>() {
  return ::bosdyn::api::SE2TrajectoryCommand_Feedback_Status_descriptor();
}
template <> struct is_proto_enum< ::bosdyn::api::SitCommand_Feedback_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::SitCommand_Feedback_Status>() {
  return ::bosdyn::api::SitCommand_Feedback_Status_descriptor();
}
template <> struct is_proto_enum< ::bosdyn::api::StandCommand_Feedback_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::StandCommand_Feedback_Status>() {
  return ::bosdyn::api::StandCommand_Feedback_Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fbasic_5fcommand_2eproto
