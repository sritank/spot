// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/image.proto

#include "bosdyn/api/image.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FrameTreeSnapshot_bosdyn_2fapi_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fimage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Image_bosdyn_2fapi_2fimage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fimage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ImageCapture_bosdyn_2fapi_2fimage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fimage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ImageRequest_bosdyn_2fapi_2fimage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fimage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ImageResponse_bosdyn_2fapi_2fimage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fimage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImageSource_bosdyn_2fapi_2fimage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fimage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImageSource_PinholeModel_bosdyn_2fapi_2fimage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fimage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImageSource_PinholeModel_CameraIntrinsics_bosdyn_2fapi_2fimage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec2_bosdyn_2fapi_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace bosdyn {
namespace api {
class ImageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Image> _instance;
} _Image_default_instance_;
class ImageCaptureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImageCapture> _instance;
} _ImageCapture_default_instance_;
class ImageSource_PinholeModel_CameraIntrinsicsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImageSource_PinholeModel_CameraIntrinsics> _instance;
} _ImageSource_PinholeModel_CameraIntrinsics_default_instance_;
class ImageSource_PinholeModelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImageSource_PinholeModel> _instance;
} _ImageSource_PinholeModel_default_instance_;
class ImageSourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImageSource> _instance;
  const ::bosdyn::api::ImageSource_PinholeModel* pinhole_;
} _ImageSource_default_instance_;
class ListImageSourcesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListImageSourcesRequest> _instance;
} _ListImageSourcesRequest_default_instance_;
class ListImageSourcesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListImageSourcesResponse> _instance;
} _ListImageSourcesResponse_default_instance_;
class ImageRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImageRequest> _instance;
} _ImageRequest_default_instance_;
class GetImageRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetImageRequest> _instance;
} _GetImageRequest_default_instance_;
class ImageResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImageResponse> _instance;
} _ImageResponse_default_instance_;
class GetImageResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetImageResponse> _instance;
} _GetImageResponse_default_instance_;
}  // namespace api
}  // namespace bosdyn
static void InitDefaultsscc_info_GetImageRequest_bosdyn_2fapi_2fimage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_GetImageRequest_default_instance_;
    new (ptr) ::bosdyn::api::GetImageRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::GetImageRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetImageRequest_bosdyn_2fapi_2fimage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetImageRequest_bosdyn_2fapi_2fimage_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_ImageRequest_bosdyn_2fapi_2fimage_2eproto.base,}};

static void InitDefaultsscc_info_GetImageResponse_bosdyn_2fapi_2fimage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_GetImageResponse_default_instance_;
    new (ptr) ::bosdyn::api::GetImageResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::GetImageResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetImageResponse_bosdyn_2fapi_2fimage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetImageResponse_bosdyn_2fapi_2fimage_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_ImageResponse_bosdyn_2fapi_2fimage_2eproto.base,}};

static void InitDefaultsscc_info_Image_bosdyn_2fapi_2fimage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_Image_default_instance_;
    new (ptr) ::bosdyn::api::Image();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::Image::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Image_bosdyn_2fapi_2fimage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Image_bosdyn_2fapi_2fimage_2eproto}, {}};

static void InitDefaultsscc_info_ImageCapture_bosdyn_2fapi_2fimage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_ImageCapture_default_instance_;
    new (ptr) ::bosdyn::api::ImageCapture();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::ImageCapture::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ImageCapture_bosdyn_2fapi_2fimage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ImageCapture_bosdyn_2fapi_2fimage_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_FrameTreeSnapshot_bosdyn_2fapi_2fgeometry_2eproto.base,
      &scc_info_Image_bosdyn_2fapi_2fimage_2eproto.base,}};

static void InitDefaultsscc_info_ImageRequest_bosdyn_2fapi_2fimage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_ImageRequest_default_instance_;
    new (ptr) ::bosdyn::api::ImageRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::ImageRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ImageRequest_bosdyn_2fapi_2fimage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ImageRequest_bosdyn_2fapi_2fimage_2eproto}, {}};

static void InitDefaultsscc_info_ImageResponse_bosdyn_2fapi_2fimage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_ImageResponse_default_instance_;
    new (ptr) ::bosdyn::api::ImageResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::ImageResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ImageResponse_bosdyn_2fapi_2fimage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ImageResponse_bosdyn_2fapi_2fimage_2eproto}, {
      &scc_info_ImageCapture_bosdyn_2fapi_2fimage_2eproto.base,
      &scc_info_ImageSource_bosdyn_2fapi_2fimage_2eproto.base,}};

static void InitDefaultsscc_info_ImageSource_bosdyn_2fapi_2fimage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_ImageSource_default_instance_;
    new (ptr) ::bosdyn::api::ImageSource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::ImageSource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImageSource_bosdyn_2fapi_2fimage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ImageSource_bosdyn_2fapi_2fimage_2eproto}, {
      &scc_info_ImageSource_PinholeModel_bosdyn_2fapi_2fimage_2eproto.base,}};

static void InitDefaultsscc_info_ImageSource_PinholeModel_bosdyn_2fapi_2fimage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_ImageSource_PinholeModel_default_instance_;
    new (ptr) ::bosdyn::api::ImageSource_PinholeModel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::ImageSource_PinholeModel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImageSource_PinholeModel_bosdyn_2fapi_2fimage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ImageSource_PinholeModel_bosdyn_2fapi_2fimage_2eproto}, {
      &scc_info_ImageSource_PinholeModel_CameraIntrinsics_bosdyn_2fapi_2fimage_2eproto.base,}};

static void InitDefaultsscc_info_ImageSource_PinholeModel_CameraIntrinsics_bosdyn_2fapi_2fimage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_ImageSource_PinholeModel_CameraIntrinsics_default_instance_;
    new (ptr) ::bosdyn::api::ImageSource_PinholeModel_CameraIntrinsics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::ImageSource_PinholeModel_CameraIntrinsics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImageSource_PinholeModel_CameraIntrinsics_bosdyn_2fapi_2fimage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ImageSource_PinholeModel_CameraIntrinsics_bosdyn_2fapi_2fimage_2eproto}, {
      &scc_info_Vec2_bosdyn_2fapi_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_ListImageSourcesRequest_bosdyn_2fapi_2fimage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_ListImageSourcesRequest_default_instance_;
    new (ptr) ::bosdyn::api::ListImageSourcesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::ListImageSourcesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListImageSourcesRequest_bosdyn_2fapi_2fimage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListImageSourcesRequest_bosdyn_2fapi_2fimage_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_ListImageSourcesResponse_bosdyn_2fapi_2fimage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_ListImageSourcesResponse_default_instance_;
    new (ptr) ::bosdyn::api::ListImageSourcesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::ListImageSourcesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ListImageSourcesResponse_bosdyn_2fapi_2fimage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ListImageSourcesResponse_bosdyn_2fapi_2fimage_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_ImageSource_bosdyn_2fapi_2fimage_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bosdyn_2fapi_2fimage_2eproto[11];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_bosdyn_2fapi_2fimage_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bosdyn_2fapi_2fimage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bosdyn_2fapi_2fimage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Image, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Image, cols_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Image, rows_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Image, data_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Image, format_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Image, pixel_format_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::ImageCapture, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::ImageCapture, acquisition_time_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::ImageCapture, transforms_snapshot_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::ImageCapture, frame_name_image_sensor_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::ImageCapture, image_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::ImageSource_PinholeModel_CameraIntrinsics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::ImageSource_PinholeModel_CameraIntrinsics, focal_length_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::ImageSource_PinholeModel_CameraIntrinsics, principal_point_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::ImageSource_PinholeModel_CameraIntrinsics, skew_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::ImageSource_PinholeModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::ImageSource_PinholeModel, intrinsics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::ImageSource, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::ImageSource, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::ImageSource, name_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::ImageSource, cols_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::ImageSource, rows_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::ImageSource, depth_scale_),
  offsetof(::bosdyn::api::ImageSourceDefaultTypeInternal, pinhole_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::ImageSource, image_type_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::ImageSource, camera_models_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::ListImageSourcesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::ListImageSourcesRequest, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::ListImageSourcesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::ListImageSourcesResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::ListImageSourcesResponse, image_sources_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::ImageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::ImageRequest, image_source_name_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::ImageRequest, quality_percent_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::ImageRequest, image_format_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::GetImageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::GetImageRequest, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::GetImageRequest, image_requests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::ImageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::ImageResponse, shot_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::ImageResponse, source_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::ImageResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::GetImageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::GetImageResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::GetImageResponse, image_responses_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::bosdyn::api::Image)},
  { 10, -1, sizeof(::bosdyn::api::ImageCapture)},
  { 19, -1, sizeof(::bosdyn::api::ImageSource_PinholeModel_CameraIntrinsics)},
  { 27, -1, sizeof(::bosdyn::api::ImageSource_PinholeModel)},
  { 33, -1, sizeof(::bosdyn::api::ImageSource)},
  { 45, -1, sizeof(::bosdyn::api::ListImageSourcesRequest)},
  { 51, -1, sizeof(::bosdyn::api::ListImageSourcesResponse)},
  { 58, -1, sizeof(::bosdyn::api::ImageRequest)},
  { 66, -1, sizeof(::bosdyn::api::GetImageRequest)},
  { 73, -1, sizeof(::bosdyn::api::ImageResponse)},
  { 81, -1, sizeof(::bosdyn::api::GetImageResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_Image_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_ImageCapture_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_ImageSource_PinholeModel_CameraIntrinsics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_ImageSource_PinholeModel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_ImageSource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_ListImageSourcesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_ListImageSourcesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_ImageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_GetImageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_ImageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_GetImageResponse_default_instance_),
};

const char descriptor_table_protodef_bosdyn_2fapi_2fimage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026bosdyn/api/image.proto\022\nbosdyn.api\032\027bo"
  "sdyn/api/header.proto\032\031bosdyn/api/geomet"
  "ry.proto\032\037google/protobuf/timestamp.prot"
  "o\"\367\002\n\005Image\022\014\n\004cols\030\002 \001(\005\022\014\n\004rows\030\003 \001(\005\022"
  "\014\n\004data\030\004 \001(\014\022(\n\006format\030\005 \001(\0162\030.bosdyn.a"
  "pi.Image.Format\0223\n\014pixel_format\030\006 \001(\0162\035."
  "bosdyn.api.Image.PixelFormat\"M\n\006Format\022\022"
  "\n\016FORMAT_UNKNOWN\020\000\022\017\n\013FORMAT_JPEG\020\001\022\016\n\nF"
  "ORMAT_RAW\020\002\022\016\n\nFORMAT_RLE\020\003\"\225\001\n\013PixelFor"
  "mat\022\030\n\024PIXEL_FORMAT_UNKNOWN\020\000\022\035\n\031PIXEL_F"
  "ORMAT_GREYSCALE_U8\020\001\022\027\n\023PIXEL_FORMAT_RGB"
  "_U8\020\003\022\030\n\024PIXEL_FORMAT_RGBA_U8\020\004\022\032\n\026PIXEL"
  "_FORMAT_DEPTH_U16\020\005\"\317\001\n\014ImageCapture\0224\n\020"
  "acquisition_time\030\036 \001(\0132\032.google.protobuf"
  ".Timestamp\022:\n\023transforms_snapshot\030\037 \001(\0132"
  "\035.bosdyn.api.FrameTreeSnapshot\022\037\n\027frame_"
  "name_image_sensor\030\005 \001(\t\022 \n\005image\030\003 \001(\0132\021"
  ".bosdyn.api.ImageJ\004\010\001\020\002J\004\010\002\020\003\"\217\004\n\013ImageS"
  "ource\022\014\n\004name\030\002 \001(\t\022\014\n\004cols\030\004 \001(\005\022\014\n\004row"
  "s\030\005 \001(\005\022\023\n\013depth_scale\030\006 \001(\001\0227\n\007pinhole\030"
  "\010 \001(\0132$.bosdyn.api.ImageSource.PinholeMo"
  "delH\000\0225\n\nimage_type\030\t \001(\0162!.bosdyn.api.I"
  "mageSource.ImageType\032\341\001\n\014PinholeModel\022I\n"
  "\nintrinsics\030\001 \001(\01325.bosdyn.api.ImageSour"
  "ce.PinholeModel.CameraIntrinsics\032\205\001\n\020Cam"
  "eraIntrinsics\022&\n\014focal_length\030\001 \001(\0132\020.bo"
  "sdyn.api.Vec2\022)\n\017principal_point\030\002 \001(\0132\020"
  ".bosdyn.api.Vec2\022\036\n\004skew\030\003 \001(\0132\020.bosdyn."
  "api.Vec2\"P\n\tImageType\022\026\n\022IMAGE_TYPE_UNKN"
  "OWN\020\000\022\025\n\021IMAGE_TYPE_VISUAL\020\001\022\024\n\020IMAGE_TY"
  "PE_DEPTH\020\002B\017\n\rcamera_modelsJ\004\010\003\020\004J\004\010\007\020\010\""
  "D\n\027ListImageSourcesRequest\022)\n\006header\030\001 \001"
  "(\0132\031.bosdyn.api.RequestHeader\"v\n\030ListIma"
  "geSourcesResponse\022*\n\006header\030\001 \001(\0132\032.bosd"
  "yn.api.ResponseHeader\022.\n\rimage_sources\030\002"
  " \003(\0132\027.bosdyn.api.ImageSource\"r\n\014ImageRe"
  "quest\022\031\n\021image_source_name\030\001 \001(\t\022\027\n\017qual"
  "ity_percent\030\002 \001(\001\022.\n\014image_format\030\003 \001(\0162"
  "\030.bosdyn.api.Image.Format\"n\n\017GetImageReq"
  "uest\022)\n\006header\030\001 \001(\0132\031.bosdyn.api.Reques"
  "tHeader\0220\n\016image_requests\030\002 \003(\0132\030.bosdyn"
  ".api.ImageRequest\"\242\002\n\rImageResponse\022&\n\004s"
  "hot\030\001 \001(\0132\030.bosdyn.api.ImageCapture\022\'\n\006s"
  "ource\030\002 \001(\0132\027.bosdyn.api.ImageSource\0220\n\006"
  "status\030\004 \001(\0162 .bosdyn.api.ImageResponse."
  "Status\"\201\001\n\006Status\022\022\n\016STATUS_UNKNOWN\020\000\022\r\n"
  "\tSTATUS_OK\020\001\022\031\n\025STATUS_UNKNOWN_CAMERA\020\002\022"
  "\034\n\030STATUS_SOURCE_DATA_ERROR\020\003\022\033\n\027STATUS_"
  "IMAGE_DATA_ERROR\020\004J\004\010\003\020\004J\004\010\005\020\006\"r\n\020GetIma"
  "geResponse\022*\n\006header\030\001 \001(\0132\032.bosdyn.api."
  "ResponseHeader\0222\n\017image_responses\030\002 \003(\0132"
  "\031.bosdyn.api.ImageResponseB\014B\nImageProto"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bosdyn_2fapi_2fimage_2eproto_deps[3] = {
  &::descriptor_table_bosdyn_2fapi_2fgeometry_2eproto,
  &::descriptor_table_bosdyn_2fapi_2fheader_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bosdyn_2fapi_2fimage_2eproto_sccs[11] = {
  &scc_info_GetImageRequest_bosdyn_2fapi_2fimage_2eproto.base,
  &scc_info_GetImageResponse_bosdyn_2fapi_2fimage_2eproto.base,
  &scc_info_Image_bosdyn_2fapi_2fimage_2eproto.base,
  &scc_info_ImageCapture_bosdyn_2fapi_2fimage_2eproto.base,
  &scc_info_ImageRequest_bosdyn_2fapi_2fimage_2eproto.base,
  &scc_info_ImageResponse_bosdyn_2fapi_2fimage_2eproto.base,
  &scc_info_ImageSource_bosdyn_2fapi_2fimage_2eproto.base,
  &scc_info_ImageSource_PinholeModel_bosdyn_2fapi_2fimage_2eproto.base,
  &scc_info_ImageSource_PinholeModel_CameraIntrinsics_bosdyn_2fapi_2fimage_2eproto.base,
  &scc_info_ListImageSourcesRequest_bosdyn_2fapi_2fimage_2eproto.base,
  &scc_info_ListImageSourcesResponse_bosdyn_2fapi_2fimage_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bosdyn_2fapi_2fimage_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fimage_2eproto = {
  false, false, descriptor_table_protodef_bosdyn_2fapi_2fimage_2eproto, "bosdyn/api/image.proto", 2088,
  &descriptor_table_bosdyn_2fapi_2fimage_2eproto_once, descriptor_table_bosdyn_2fapi_2fimage_2eproto_sccs, descriptor_table_bosdyn_2fapi_2fimage_2eproto_deps, 11, 3,
  schemas, file_default_instances, TableStruct_bosdyn_2fapi_2fimage_2eproto::offsets,
  file_level_metadata_bosdyn_2fapi_2fimage_2eproto, 11, file_level_enum_descriptors_bosdyn_2fapi_2fimage_2eproto, file_level_service_descriptors_bosdyn_2fapi_2fimage_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bosdyn_2fapi_2fimage_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bosdyn_2fapi_2fimage_2eproto)), true);
namespace bosdyn {
namespace api {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Image_Format_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2fimage_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2fimage_2eproto[0];
}
bool Image_Format_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Image_Format Image::FORMAT_UNKNOWN;
constexpr Image_Format Image::FORMAT_JPEG;
constexpr Image_Format Image::FORMAT_RAW;
constexpr Image_Format Image::FORMAT_RLE;
constexpr Image_Format Image::Format_MIN;
constexpr Image_Format Image::Format_MAX;
constexpr int Image::Format_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Image_PixelFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2fimage_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2fimage_2eproto[1];
}
bool Image_PixelFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Image_PixelFormat Image::PIXEL_FORMAT_UNKNOWN;
constexpr Image_PixelFormat Image::PIXEL_FORMAT_GREYSCALE_U8;
constexpr Image_PixelFormat Image::PIXEL_FORMAT_RGB_U8;
constexpr Image_PixelFormat Image::PIXEL_FORMAT_RGBA_U8;
constexpr Image_PixelFormat Image::PIXEL_FORMAT_DEPTH_U16;
constexpr Image_PixelFormat Image::PixelFormat_MIN;
constexpr Image_PixelFormat Image::PixelFormat_MAX;
constexpr int Image::PixelFormat_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImageSource_ImageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2fimage_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2fimage_2eproto[2];
}
bool ImageSource_ImageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ImageSource_ImageType ImageSource::IMAGE_TYPE_UNKNOWN;
constexpr ImageSource_ImageType ImageSource::IMAGE_TYPE_VISUAL;
constexpr ImageSource_ImageType ImageSource::IMAGE_TYPE_DEPTH;
constexpr ImageSource_ImageType ImageSource::ImageType_MIN;
constexpr ImageSource_ImageType ImageSource::ImageType_MAX;
constexpr int ImageSource::ImageType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImageResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2fimage_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2fimage_2eproto[3];
}
bool ImageResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ImageResponse_Status ImageResponse::STATUS_UNKNOWN;
constexpr ImageResponse_Status ImageResponse::STATUS_OK;
constexpr ImageResponse_Status ImageResponse::STATUS_UNKNOWN_CAMERA;
constexpr ImageResponse_Status ImageResponse::STATUS_SOURCE_DATA_ERROR;
constexpr ImageResponse_Status ImageResponse::STATUS_IMAGE_DATA_ERROR;
constexpr ImageResponse_Status ImageResponse::Status_MIN;
constexpr ImageResponse_Status ImageResponse::Status_MAX;
constexpr int ImageResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Image::InitAsDefaultInstance() {
}
class Image::_Internal {
 public:
};

Image::Image(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.Image)
}
Image::Image(const Image& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  ::memcpy(&cols_, &from.cols_,
    static_cast<size_t>(reinterpret_cast<char*>(&pixel_format_) -
    reinterpret_cast<char*>(&cols_)) + sizeof(pixel_format_));
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.Image)
}

void Image::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Image_bosdyn_2fapi_2fimage_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&cols_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pixel_format_) -
      reinterpret_cast<char*>(&cols_)) + sizeof(pixel_format_));
}

Image::~Image() {
  // @@protoc_insertion_point(destructor:bosdyn.api.Image)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Image::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Image::ArenaDtor(void* object) {
  Image* _this = reinterpret_cast< Image* >(object);
  (void)_this;
}
void Image::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Image::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Image& Image::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Image_bosdyn_2fapi_2fimage_2eproto.base);
  return *internal_default_instance();
}


void Image::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.Image)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&cols_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pixel_format_) -
      reinterpret_cast<char*>(&cols_)) + sizeof(pixel_format_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Image::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 cols = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cols_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rows = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.Image.Format format = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_format(static_cast<::bosdyn::api::Image_Format>(val));
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.Image.PixelFormat pixel_format = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_pixel_format(static_cast<::bosdyn::api::Image_PixelFormat>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Image::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.Image)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cols = 2;
  if (this->cols() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_cols(), target);
  }

  // int32 rows = 3;
  if (this->rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_rows(), target);
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_data(), target);
  }

  // .bosdyn.api.Image.Format format = 5;
  if (this->format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_format(), target);
  }

  // .bosdyn.api.Image.PixelFormat pixel_format = 6;
  if (this->pixel_format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_pixel_format(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.Image)
  return target;
}

size_t Image::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.Image)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 4;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int32 cols = 2;
  if (this->cols() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cols());
  }

  // int32 rows = 3;
  if (this->rows() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rows());
  }

  // .bosdyn.api.Image.Format format = 5;
  if (this->format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_format());
  }

  // .bosdyn.api.Image.PixelFormat pixel_format = 6;
  if (this->pixel_format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pixel_format());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Image::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.Image)
  GOOGLE_DCHECK_NE(&from, this);
  const Image* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Image>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.Image)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.Image)
    MergeFrom(*source);
  }
}

void Image::MergeFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.Image)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.cols() != 0) {
    _internal_set_cols(from._internal_cols());
  }
  if (from.rows() != 0) {
    _internal_set_rows(from._internal_rows());
  }
  if (from.format() != 0) {
    _internal_set_format(from._internal_format());
  }
  if (from.pixel_format() != 0) {
    _internal_set_pixel_format(from._internal_pixel_format());
  }
}

void Image::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Image::CopyFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image::IsInitialized() const {
  return true;
}

void Image::InternalSwap(Image* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Image, pixel_format_)
      + sizeof(Image::pixel_format_)
      - PROTOBUF_FIELD_OFFSET(Image, cols_)>(
          reinterpret_cast<char*>(&cols_),
          reinterpret_cast<char*>(&other->cols_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Image::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ImageCapture::InitAsDefaultInstance() {
  ::bosdyn::api::_ImageCapture_default_instance_._instance.get_mutable()->acquisition_time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::bosdyn::api::_ImageCapture_default_instance_._instance.get_mutable()->transforms_snapshot_ = const_cast< ::bosdyn::api::FrameTreeSnapshot*>(
      ::bosdyn::api::FrameTreeSnapshot::internal_default_instance());
  ::bosdyn::api::_ImageCapture_default_instance_._instance.get_mutable()->image_ = const_cast< ::bosdyn::api::Image*>(
      ::bosdyn::api::Image::internal_default_instance());
}
class ImageCapture::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& acquisition_time(const ImageCapture* msg);
  static const ::bosdyn::api::FrameTreeSnapshot& transforms_snapshot(const ImageCapture* msg);
  static const ::bosdyn::api::Image& image(const ImageCapture* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
ImageCapture::_Internal::acquisition_time(const ImageCapture* msg) {
  return *msg->acquisition_time_;
}
const ::bosdyn::api::FrameTreeSnapshot&
ImageCapture::_Internal::transforms_snapshot(const ImageCapture* msg) {
  return *msg->transforms_snapshot_;
}
const ::bosdyn::api::Image&
ImageCapture::_Internal::image(const ImageCapture* msg) {
  return *msg->image_;
}
void ImageCapture::clear_acquisition_time() {
  if (GetArena() == nullptr && acquisition_time_ != nullptr) {
    delete acquisition_time_;
  }
  acquisition_time_ = nullptr;
}
void ImageCapture::clear_transforms_snapshot() {
  if (GetArena() == nullptr && transforms_snapshot_ != nullptr) {
    delete transforms_snapshot_;
  }
  transforms_snapshot_ = nullptr;
}
ImageCapture::ImageCapture(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.ImageCapture)
}
ImageCapture::ImageCapture(const ImageCapture& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  frame_name_image_sensor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_frame_name_image_sensor().empty()) {
    frame_name_image_sensor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_frame_name_image_sensor(),
      GetArena());
  }
  if (from._internal_has_image()) {
    image_ = new ::bosdyn::api::Image(*from.image_);
  } else {
    image_ = nullptr;
  }
  if (from._internal_has_acquisition_time()) {
    acquisition_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.acquisition_time_);
  } else {
    acquisition_time_ = nullptr;
  }
  if (from._internal_has_transforms_snapshot()) {
    transforms_snapshot_ = new ::bosdyn::api::FrameTreeSnapshot(*from.transforms_snapshot_);
  } else {
    transforms_snapshot_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.ImageCapture)
}

void ImageCapture::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImageCapture_bosdyn_2fapi_2fimage_2eproto.base);
  frame_name_image_sensor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&image_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transforms_snapshot_) -
      reinterpret_cast<char*>(&image_)) + sizeof(transforms_snapshot_));
}

ImageCapture::~ImageCapture() {
  // @@protoc_insertion_point(destructor:bosdyn.api.ImageCapture)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImageCapture::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  frame_name_image_sensor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete image_;
  if (this != internal_default_instance()) delete acquisition_time_;
  if (this != internal_default_instance()) delete transforms_snapshot_;
}

void ImageCapture::ArenaDtor(void* object) {
  ImageCapture* _this = reinterpret_cast< ImageCapture* >(object);
  (void)_this;
}
void ImageCapture::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageCapture::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImageCapture& ImageCapture::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImageCapture_bosdyn_2fapi_2fimage_2eproto.base);
  return *internal_default_instance();
}


void ImageCapture::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.ImageCapture)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frame_name_image_sensor_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
  if (GetArena() == nullptr && acquisition_time_ != nullptr) {
    delete acquisition_time_;
  }
  acquisition_time_ = nullptr;
  if (GetArena() == nullptr && transforms_snapshot_ != nullptr) {
    delete transforms_snapshot_;
  }
  transforms_snapshot_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageCapture::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.Image image = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string frame_name_image_sensor = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_frame_name_image_sensor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.ImageCapture.frame_name_image_sensor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp acquisition_time = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_acquisition_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.FrameTreeSnapshot transforms_snapshot = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_transforms_snapshot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageCapture::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.ImageCapture)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.Image image = 3;
  if (this->has_image()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::image(this), target, stream);
  }

  // string frame_name_image_sensor = 5;
  if (this->frame_name_image_sensor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_frame_name_image_sensor().data(), static_cast<int>(this->_internal_frame_name_image_sensor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.ImageCapture.frame_name_image_sensor");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_frame_name_image_sensor(), target);
  }

  // .google.protobuf.Timestamp acquisition_time = 30;
  if (this->has_acquisition_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::acquisition_time(this), target, stream);
  }

  // .bosdyn.api.FrameTreeSnapshot transforms_snapshot = 31;
  if (this->has_transforms_snapshot()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::transforms_snapshot(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.ImageCapture)
  return target;
}

size_t ImageCapture::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.ImageCapture)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string frame_name_image_sensor = 5;
  if (this->frame_name_image_sensor().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_frame_name_image_sensor());
  }

  // .bosdyn.api.Image image = 3;
  if (this->has_image()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *image_);
  }

  // .google.protobuf.Timestamp acquisition_time = 30;
  if (this->has_acquisition_time()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *acquisition_time_);
  }

  // .bosdyn.api.FrameTreeSnapshot transforms_snapshot = 31;
  if (this->has_transforms_snapshot()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transforms_snapshot_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageCapture::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.ImageCapture)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageCapture* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageCapture>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.ImageCapture)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.ImageCapture)
    MergeFrom(*source);
  }
}

void ImageCapture::MergeFrom(const ImageCapture& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.ImageCapture)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.frame_name_image_sensor().size() > 0) {
    _internal_set_frame_name_image_sensor(from._internal_frame_name_image_sensor());
  }
  if (from.has_image()) {
    _internal_mutable_image()->::bosdyn::api::Image::MergeFrom(from._internal_image());
  }
  if (from.has_acquisition_time()) {
    _internal_mutable_acquisition_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_acquisition_time());
  }
  if (from.has_transforms_snapshot()) {
    _internal_mutable_transforms_snapshot()->::bosdyn::api::FrameTreeSnapshot::MergeFrom(from._internal_transforms_snapshot());
  }
}

void ImageCapture::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.ImageCapture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageCapture::CopyFrom(const ImageCapture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.ImageCapture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageCapture::IsInitialized() const {
  return true;
}

void ImageCapture::InternalSwap(ImageCapture* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  frame_name_image_sensor_.Swap(&other->frame_name_image_sensor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageCapture, transforms_snapshot_)
      + sizeof(ImageCapture::transforms_snapshot_)
      - PROTOBUF_FIELD_OFFSET(ImageCapture, image_)>(
          reinterpret_cast<char*>(&image_),
          reinterpret_cast<char*>(&other->image_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageCapture::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ImageSource_PinholeModel_CameraIntrinsics::InitAsDefaultInstance() {
  ::bosdyn::api::_ImageSource_PinholeModel_CameraIntrinsics_default_instance_._instance.get_mutable()->focal_length_ = const_cast< ::bosdyn::api::Vec2*>(
      ::bosdyn::api::Vec2::internal_default_instance());
  ::bosdyn::api::_ImageSource_PinholeModel_CameraIntrinsics_default_instance_._instance.get_mutable()->principal_point_ = const_cast< ::bosdyn::api::Vec2*>(
      ::bosdyn::api::Vec2::internal_default_instance());
  ::bosdyn::api::_ImageSource_PinholeModel_CameraIntrinsics_default_instance_._instance.get_mutable()->skew_ = const_cast< ::bosdyn::api::Vec2*>(
      ::bosdyn::api::Vec2::internal_default_instance());
}
class ImageSource_PinholeModel_CameraIntrinsics::_Internal {
 public:
  static const ::bosdyn::api::Vec2& focal_length(const ImageSource_PinholeModel_CameraIntrinsics* msg);
  static const ::bosdyn::api::Vec2& principal_point(const ImageSource_PinholeModel_CameraIntrinsics* msg);
  static const ::bosdyn::api::Vec2& skew(const ImageSource_PinholeModel_CameraIntrinsics* msg);
};

const ::bosdyn::api::Vec2&
ImageSource_PinholeModel_CameraIntrinsics::_Internal::focal_length(const ImageSource_PinholeModel_CameraIntrinsics* msg) {
  return *msg->focal_length_;
}
const ::bosdyn::api::Vec2&
ImageSource_PinholeModel_CameraIntrinsics::_Internal::principal_point(const ImageSource_PinholeModel_CameraIntrinsics* msg) {
  return *msg->principal_point_;
}
const ::bosdyn::api::Vec2&
ImageSource_PinholeModel_CameraIntrinsics::_Internal::skew(const ImageSource_PinholeModel_CameraIntrinsics* msg) {
  return *msg->skew_;
}
void ImageSource_PinholeModel_CameraIntrinsics::clear_focal_length() {
  if (GetArena() == nullptr && focal_length_ != nullptr) {
    delete focal_length_;
  }
  focal_length_ = nullptr;
}
void ImageSource_PinholeModel_CameraIntrinsics::clear_principal_point() {
  if (GetArena() == nullptr && principal_point_ != nullptr) {
    delete principal_point_;
  }
  principal_point_ = nullptr;
}
void ImageSource_PinholeModel_CameraIntrinsics::clear_skew() {
  if (GetArena() == nullptr && skew_ != nullptr) {
    delete skew_;
  }
  skew_ = nullptr;
}
ImageSource_PinholeModel_CameraIntrinsics::ImageSource_PinholeModel_CameraIntrinsics(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.ImageSource.PinholeModel.CameraIntrinsics)
}
ImageSource_PinholeModel_CameraIntrinsics::ImageSource_PinholeModel_CameraIntrinsics(const ImageSource_PinholeModel_CameraIntrinsics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_focal_length()) {
    focal_length_ = new ::bosdyn::api::Vec2(*from.focal_length_);
  } else {
    focal_length_ = nullptr;
  }
  if (from._internal_has_principal_point()) {
    principal_point_ = new ::bosdyn::api::Vec2(*from.principal_point_);
  } else {
    principal_point_ = nullptr;
  }
  if (from._internal_has_skew()) {
    skew_ = new ::bosdyn::api::Vec2(*from.skew_);
  } else {
    skew_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.ImageSource.PinholeModel.CameraIntrinsics)
}

void ImageSource_PinholeModel_CameraIntrinsics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImageSource_PinholeModel_CameraIntrinsics_bosdyn_2fapi_2fimage_2eproto.base);
  ::memset(&focal_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skew_) -
      reinterpret_cast<char*>(&focal_length_)) + sizeof(skew_));
}

ImageSource_PinholeModel_CameraIntrinsics::~ImageSource_PinholeModel_CameraIntrinsics() {
  // @@protoc_insertion_point(destructor:bosdyn.api.ImageSource.PinholeModel.CameraIntrinsics)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImageSource_PinholeModel_CameraIntrinsics::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete focal_length_;
  if (this != internal_default_instance()) delete principal_point_;
  if (this != internal_default_instance()) delete skew_;
}

void ImageSource_PinholeModel_CameraIntrinsics::ArenaDtor(void* object) {
  ImageSource_PinholeModel_CameraIntrinsics* _this = reinterpret_cast< ImageSource_PinholeModel_CameraIntrinsics* >(object);
  (void)_this;
}
void ImageSource_PinholeModel_CameraIntrinsics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageSource_PinholeModel_CameraIntrinsics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImageSource_PinholeModel_CameraIntrinsics& ImageSource_PinholeModel_CameraIntrinsics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImageSource_PinholeModel_CameraIntrinsics_bosdyn_2fapi_2fimage_2eproto.base);
  return *internal_default_instance();
}


void ImageSource_PinholeModel_CameraIntrinsics::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.ImageSource.PinholeModel.CameraIntrinsics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && focal_length_ != nullptr) {
    delete focal_length_;
  }
  focal_length_ = nullptr;
  if (GetArena() == nullptr && principal_point_ != nullptr) {
    delete principal_point_;
  }
  principal_point_ = nullptr;
  if (GetArena() == nullptr && skew_ != nullptr) {
    delete skew_;
  }
  skew_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageSource_PinholeModel_CameraIntrinsics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.Vec2 focal_length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_focal_length(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.Vec2 principal_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_principal_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.Vec2 skew = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_skew(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageSource_PinholeModel_CameraIntrinsics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.ImageSource.PinholeModel.CameraIntrinsics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.Vec2 focal_length = 1;
  if (this->has_focal_length()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::focal_length(this), target, stream);
  }

  // .bosdyn.api.Vec2 principal_point = 2;
  if (this->has_principal_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::principal_point(this), target, stream);
  }

  // .bosdyn.api.Vec2 skew = 3;
  if (this->has_skew()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::skew(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.ImageSource.PinholeModel.CameraIntrinsics)
  return target;
}

size_t ImageSource_PinholeModel_CameraIntrinsics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.ImageSource.PinholeModel.CameraIntrinsics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.Vec2 focal_length = 1;
  if (this->has_focal_length()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *focal_length_);
  }

  // .bosdyn.api.Vec2 principal_point = 2;
  if (this->has_principal_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *principal_point_);
  }

  // .bosdyn.api.Vec2 skew = 3;
  if (this->has_skew()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *skew_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageSource_PinholeModel_CameraIntrinsics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.ImageSource.PinholeModel.CameraIntrinsics)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageSource_PinholeModel_CameraIntrinsics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageSource_PinholeModel_CameraIntrinsics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.ImageSource.PinholeModel.CameraIntrinsics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.ImageSource.PinholeModel.CameraIntrinsics)
    MergeFrom(*source);
  }
}

void ImageSource_PinholeModel_CameraIntrinsics::MergeFrom(const ImageSource_PinholeModel_CameraIntrinsics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.ImageSource.PinholeModel.CameraIntrinsics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_focal_length()) {
    _internal_mutable_focal_length()->::bosdyn::api::Vec2::MergeFrom(from._internal_focal_length());
  }
  if (from.has_principal_point()) {
    _internal_mutable_principal_point()->::bosdyn::api::Vec2::MergeFrom(from._internal_principal_point());
  }
  if (from.has_skew()) {
    _internal_mutable_skew()->::bosdyn::api::Vec2::MergeFrom(from._internal_skew());
  }
}

void ImageSource_PinholeModel_CameraIntrinsics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.ImageSource.PinholeModel.CameraIntrinsics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageSource_PinholeModel_CameraIntrinsics::CopyFrom(const ImageSource_PinholeModel_CameraIntrinsics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.ImageSource.PinholeModel.CameraIntrinsics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageSource_PinholeModel_CameraIntrinsics::IsInitialized() const {
  return true;
}

void ImageSource_PinholeModel_CameraIntrinsics::InternalSwap(ImageSource_PinholeModel_CameraIntrinsics* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageSource_PinholeModel_CameraIntrinsics, skew_)
      + sizeof(ImageSource_PinholeModel_CameraIntrinsics::skew_)
      - PROTOBUF_FIELD_OFFSET(ImageSource_PinholeModel_CameraIntrinsics, focal_length_)>(
          reinterpret_cast<char*>(&focal_length_),
          reinterpret_cast<char*>(&other->focal_length_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageSource_PinholeModel_CameraIntrinsics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ImageSource_PinholeModel::InitAsDefaultInstance() {
  ::bosdyn::api::_ImageSource_PinholeModel_default_instance_._instance.get_mutable()->intrinsics_ = const_cast< ::bosdyn::api::ImageSource_PinholeModel_CameraIntrinsics*>(
      ::bosdyn::api::ImageSource_PinholeModel_CameraIntrinsics::internal_default_instance());
}
class ImageSource_PinholeModel::_Internal {
 public:
  static const ::bosdyn::api::ImageSource_PinholeModel_CameraIntrinsics& intrinsics(const ImageSource_PinholeModel* msg);
};

const ::bosdyn::api::ImageSource_PinholeModel_CameraIntrinsics&
ImageSource_PinholeModel::_Internal::intrinsics(const ImageSource_PinholeModel* msg) {
  return *msg->intrinsics_;
}
ImageSource_PinholeModel::ImageSource_PinholeModel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.ImageSource.PinholeModel)
}
ImageSource_PinholeModel::ImageSource_PinholeModel(const ImageSource_PinholeModel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_intrinsics()) {
    intrinsics_ = new ::bosdyn::api::ImageSource_PinholeModel_CameraIntrinsics(*from.intrinsics_);
  } else {
    intrinsics_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.ImageSource.PinholeModel)
}

void ImageSource_PinholeModel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImageSource_PinholeModel_bosdyn_2fapi_2fimage_2eproto.base);
  intrinsics_ = nullptr;
}

ImageSource_PinholeModel::~ImageSource_PinholeModel() {
  // @@protoc_insertion_point(destructor:bosdyn.api.ImageSource.PinholeModel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImageSource_PinholeModel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete intrinsics_;
}

void ImageSource_PinholeModel::ArenaDtor(void* object) {
  ImageSource_PinholeModel* _this = reinterpret_cast< ImageSource_PinholeModel* >(object);
  (void)_this;
}
void ImageSource_PinholeModel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageSource_PinholeModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImageSource_PinholeModel& ImageSource_PinholeModel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImageSource_PinholeModel_bosdyn_2fapi_2fimage_2eproto.base);
  return *internal_default_instance();
}


void ImageSource_PinholeModel::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.ImageSource.PinholeModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && intrinsics_ != nullptr) {
    delete intrinsics_;
  }
  intrinsics_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageSource_PinholeModel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ImageSource.PinholeModel.CameraIntrinsics intrinsics = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_intrinsics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageSource_PinholeModel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.ImageSource.PinholeModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ImageSource.PinholeModel.CameraIntrinsics intrinsics = 1;
  if (this->has_intrinsics()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::intrinsics(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.ImageSource.PinholeModel)
  return target;
}

size_t ImageSource_PinholeModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.ImageSource.PinholeModel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.ImageSource.PinholeModel.CameraIntrinsics intrinsics = 1;
  if (this->has_intrinsics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *intrinsics_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageSource_PinholeModel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.ImageSource.PinholeModel)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageSource_PinholeModel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageSource_PinholeModel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.ImageSource.PinholeModel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.ImageSource.PinholeModel)
    MergeFrom(*source);
  }
}

void ImageSource_PinholeModel::MergeFrom(const ImageSource_PinholeModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.ImageSource.PinholeModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_intrinsics()) {
    _internal_mutable_intrinsics()->::bosdyn::api::ImageSource_PinholeModel_CameraIntrinsics::MergeFrom(from._internal_intrinsics());
  }
}

void ImageSource_PinholeModel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.ImageSource.PinholeModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageSource_PinholeModel::CopyFrom(const ImageSource_PinholeModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.ImageSource.PinholeModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageSource_PinholeModel::IsInitialized() const {
  return true;
}

void ImageSource_PinholeModel::InternalSwap(ImageSource_PinholeModel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(intrinsics_, other->intrinsics_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageSource_PinholeModel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ImageSource::InitAsDefaultInstance() {
  ::bosdyn::api::_ImageSource_default_instance_.pinhole_ = const_cast< ::bosdyn::api::ImageSource_PinholeModel*>(
      ::bosdyn::api::ImageSource_PinholeModel::internal_default_instance());
}
class ImageSource::_Internal {
 public:
  static const ::bosdyn::api::ImageSource_PinholeModel& pinhole(const ImageSource* msg);
};

const ::bosdyn::api::ImageSource_PinholeModel&
ImageSource::_Internal::pinhole(const ImageSource* msg) {
  return *msg->camera_models_.pinhole_;
}
void ImageSource::set_allocated_pinhole(::bosdyn::api::ImageSource_PinholeModel* pinhole) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_camera_models();
  if (pinhole) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pinhole);
    if (message_arena != submessage_arena) {
      pinhole = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pinhole, submessage_arena);
    }
    set_has_pinhole();
    camera_models_.pinhole_ = pinhole;
  }
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ImageSource.pinhole)
}
ImageSource::ImageSource(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.ImageSource)
}
ImageSource::ImageSource(const ImageSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&cols_, &from.cols_,
    static_cast<size_t>(reinterpret_cast<char*>(&image_type_) -
    reinterpret_cast<char*>(&cols_)) + sizeof(image_type_));
  clear_has_camera_models();
  switch (from.camera_models_case()) {
    case kPinhole: {
      _internal_mutable_pinhole()->::bosdyn::api::ImageSource_PinholeModel::MergeFrom(from._internal_pinhole());
      break;
    }
    case CAMERA_MODELS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.ImageSource)
}

void ImageSource::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImageSource_bosdyn_2fapi_2fimage_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&cols_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&image_type_) -
      reinterpret_cast<char*>(&cols_)) + sizeof(image_type_));
  clear_has_camera_models();
}

ImageSource::~ImageSource() {
  // @@protoc_insertion_point(destructor:bosdyn.api.ImageSource)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImageSource::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_camera_models()) {
    clear_camera_models();
  }
}

void ImageSource::ArenaDtor(void* object) {
  ImageSource* _this = reinterpret_cast< ImageSource* >(object);
  (void)_this;
}
void ImageSource::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImageSource& ImageSource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImageSource_bosdyn_2fapi_2fimage_2eproto.base);
  return *internal_default_instance();
}


void ImageSource::clear_camera_models() {
// @@protoc_insertion_point(one_of_clear_start:bosdyn.api.ImageSource)
  switch (camera_models_case()) {
    case kPinhole: {
      if (GetArena() == nullptr) {
        delete camera_models_.pinhole_;
      }
      break;
    }
    case CAMERA_MODELS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CAMERA_MODELS_NOT_SET;
}


void ImageSource::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.ImageSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&cols_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&image_type_) -
      reinterpret_cast<char*>(&cols_)) + sizeof(image_type_));
  clear_camera_models();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageSource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.ImageSource.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cols = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          cols_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rows = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double depth_scale = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          depth_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.ImageSource.PinholeModel pinhole = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_pinhole(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.ImageSource.ImageType image_type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_image_type(static_cast<::bosdyn::api::ImageSource_ImageType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageSource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.ImageSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.ImageSource.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 cols = 4;
  if (this->cols() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_cols(), target);
  }

  // int32 rows = 5;
  if (this->rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_rows(), target);
  }

  // double depth_scale = 6;
  if (!(this->depth_scale() <= 0 && this->depth_scale() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_depth_scale(), target);
  }

  // .bosdyn.api.ImageSource.PinholeModel pinhole = 8;
  if (_internal_has_pinhole()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::pinhole(this), target, stream);
  }

  // .bosdyn.api.ImageSource.ImageType image_type = 9;
  if (this->image_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_image_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.ImageSource)
  return target;
}

size_t ImageSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.ImageSource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 cols = 4;
  if (this->cols() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cols());
  }

  // int32 rows = 5;
  if (this->rows() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rows());
  }

  // double depth_scale = 6;
  if (!(this->depth_scale() <= 0 && this->depth_scale() >= 0)) {
    total_size += 1 + 8;
  }

  // .bosdyn.api.ImageSource.ImageType image_type = 9;
  if (this->image_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_image_type());
  }

  switch (camera_models_case()) {
    // .bosdyn.api.ImageSource.PinholeModel pinhole = 8;
    case kPinhole: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *camera_models_.pinhole_);
      break;
    }
    case CAMERA_MODELS_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageSource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.ImageSource)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageSource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageSource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.ImageSource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.ImageSource)
    MergeFrom(*source);
  }
}

void ImageSource::MergeFrom(const ImageSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.ImageSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.cols() != 0) {
    _internal_set_cols(from._internal_cols());
  }
  if (from.rows() != 0) {
    _internal_set_rows(from._internal_rows());
  }
  if (!(from.depth_scale() <= 0 && from.depth_scale() >= 0)) {
    _internal_set_depth_scale(from._internal_depth_scale());
  }
  if (from.image_type() != 0) {
    _internal_set_image_type(from._internal_image_type());
  }
  switch (from.camera_models_case()) {
    case kPinhole: {
      _internal_mutable_pinhole()->::bosdyn::api::ImageSource_PinholeModel::MergeFrom(from._internal_pinhole());
      break;
    }
    case CAMERA_MODELS_NOT_SET: {
      break;
    }
  }
}

void ImageSource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.ImageSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageSource::CopyFrom(const ImageSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.ImageSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageSource::IsInitialized() const {
  return true;
}

void ImageSource::InternalSwap(ImageSource* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageSource, image_type_)
      + sizeof(ImageSource::image_type_)
      - PROTOBUF_FIELD_OFFSET(ImageSource, cols_)>(
          reinterpret_cast<char*>(&cols_),
          reinterpret_cast<char*>(&other->cols_));
  swap(camera_models_, other->camera_models_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageSource::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListImageSourcesRequest::InitAsDefaultInstance() {
  ::bosdyn::api::_ListImageSourcesRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
}
class ListImageSourcesRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const ListImageSourcesRequest* msg);
};

const ::bosdyn::api::RequestHeader&
ListImageSourcesRequest::_Internal::header(const ListImageSourcesRequest* msg) {
  return *msg->header_;
}
void ListImageSourcesRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
ListImageSourcesRequest::ListImageSourcesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.ListImageSourcesRequest)
}
ListImageSourcesRequest::ListImageSourcesRequest(const ListImageSourcesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.ListImageSourcesRequest)
}

void ListImageSourcesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListImageSourcesRequest_bosdyn_2fapi_2fimage_2eproto.base);
  header_ = nullptr;
}

ListImageSourcesRequest::~ListImageSourcesRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.ListImageSourcesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListImageSourcesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void ListImageSourcesRequest::ArenaDtor(void* object) {
  ListImageSourcesRequest* _this = reinterpret_cast< ListImageSourcesRequest* >(object);
  (void)_this;
}
void ListImageSourcesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListImageSourcesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListImageSourcesRequest& ListImageSourcesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListImageSourcesRequest_bosdyn_2fapi_2fimage_2eproto.base);
  return *internal_default_instance();
}


void ListImageSourcesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.ListImageSourcesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListImageSourcesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListImageSourcesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.ListImageSourcesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.ListImageSourcesRequest)
  return target;
}

size_t ListImageSourcesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.ListImageSourcesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListImageSourcesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.ListImageSourcesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListImageSourcesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListImageSourcesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.ListImageSourcesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.ListImageSourcesRequest)
    MergeFrom(*source);
  }
}

void ListImageSourcesRequest::MergeFrom(const ListImageSourcesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.ListImageSourcesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
}

void ListImageSourcesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.ListImageSourcesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListImageSourcesRequest::CopyFrom(const ListImageSourcesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.ListImageSourcesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListImageSourcesRequest::IsInitialized() const {
  return true;
}

void ListImageSourcesRequest::InternalSwap(ListImageSourcesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListImageSourcesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListImageSourcesResponse::InitAsDefaultInstance() {
  ::bosdyn::api::_ListImageSourcesResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
}
class ListImageSourcesResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const ListImageSourcesResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
ListImageSourcesResponse::_Internal::header(const ListImageSourcesResponse* msg) {
  return *msg->header_;
}
void ListImageSourcesResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
ListImageSourcesResponse::ListImageSourcesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  image_sources_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.ListImageSourcesResponse)
}
ListImageSourcesResponse::ListImageSourcesResponse(const ListImageSourcesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      image_sources_(from.image_sources_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.ListImageSourcesResponse)
}

void ListImageSourcesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListImageSourcesResponse_bosdyn_2fapi_2fimage_2eproto.base);
  header_ = nullptr;
}

ListImageSourcesResponse::~ListImageSourcesResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.ListImageSourcesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListImageSourcesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void ListImageSourcesResponse::ArenaDtor(void* object) {
  ListImageSourcesResponse* _this = reinterpret_cast< ListImageSourcesResponse* >(object);
  (void)_this;
}
void ListImageSourcesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListImageSourcesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListImageSourcesResponse& ListImageSourcesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListImageSourcesResponse_bosdyn_2fapi_2fimage_2eproto.base);
  return *internal_default_instance();
}


void ListImageSourcesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.ListImageSourcesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_sources_.Clear();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListImageSourcesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bosdyn.api.ImageSource image_sources = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_image_sources(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListImageSourcesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.ListImageSourcesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .bosdyn.api.ImageSource image_sources = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_image_sources_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_image_sources(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.ListImageSourcesResponse)
  return target;
}

size_t ListImageSourcesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.ListImageSourcesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bosdyn.api.ImageSource image_sources = 2;
  total_size += 1UL * this->_internal_image_sources_size();
  for (const auto& msg : this->image_sources_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListImageSourcesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.ListImageSourcesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListImageSourcesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListImageSourcesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.ListImageSourcesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.ListImageSourcesResponse)
    MergeFrom(*source);
  }
}

void ListImageSourcesResponse::MergeFrom(const ListImageSourcesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.ListImageSourcesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  image_sources_.MergeFrom(from.image_sources_);
  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
}

void ListImageSourcesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.ListImageSourcesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListImageSourcesResponse::CopyFrom(const ListImageSourcesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.ListImageSourcesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListImageSourcesResponse::IsInitialized() const {
  return true;
}

void ListImageSourcesResponse::InternalSwap(ListImageSourcesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  image_sources_.InternalSwap(&other->image_sources_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListImageSourcesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ImageRequest::InitAsDefaultInstance() {
}
class ImageRequest::_Internal {
 public:
};

ImageRequest::ImageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.ImageRequest)
}
ImageRequest::ImageRequest(const ImageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  image_source_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_image_source_name().empty()) {
    image_source_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_image_source_name(),
      GetArena());
  }
  ::memcpy(&quality_percent_, &from.quality_percent_,
    static_cast<size_t>(reinterpret_cast<char*>(&image_format_) -
    reinterpret_cast<char*>(&quality_percent_)) + sizeof(image_format_));
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.ImageRequest)
}

void ImageRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImageRequest_bosdyn_2fapi_2fimage_2eproto.base);
  image_source_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&quality_percent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&image_format_) -
      reinterpret_cast<char*>(&quality_percent_)) + sizeof(image_format_));
}

ImageRequest::~ImageRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.ImageRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  image_source_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ImageRequest::ArenaDtor(void* object) {
  ImageRequest* _this = reinterpret_cast< ImageRequest* >(object);
  (void)_this;
}
void ImageRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImageRequest& ImageRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImageRequest_bosdyn_2fapi_2fimage_2eproto.base);
  return *internal_default_instance();
}


void ImageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.ImageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_source_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&quality_percent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&image_format_) -
      reinterpret_cast<char*>(&quality_percent_)) + sizeof(image_format_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string image_source_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_image_source_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.ImageRequest.image_source_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double quality_percent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          quality_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.Image.Format image_format = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_image_format(static_cast<::bosdyn::api::Image_Format>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.ImageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string image_source_name = 1;
  if (this->image_source_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_image_source_name().data(), static_cast<int>(this->_internal_image_source_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.ImageRequest.image_source_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_image_source_name(), target);
  }

  // double quality_percent = 2;
  if (!(this->quality_percent() <= 0 && this->quality_percent() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_quality_percent(), target);
  }

  // .bosdyn.api.Image.Format image_format = 3;
  if (this->image_format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_image_format(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.ImageRequest)
  return target;
}

size_t ImageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.ImageRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string image_source_name = 1;
  if (this->image_source_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_image_source_name());
  }

  // double quality_percent = 2;
  if (!(this->quality_percent() <= 0 && this->quality_percent() >= 0)) {
    total_size += 1 + 8;
  }

  // .bosdyn.api.Image.Format image_format = 3;
  if (this->image_format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_image_format());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.ImageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.ImageRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.ImageRequest)
    MergeFrom(*source);
  }
}

void ImageRequest::MergeFrom(const ImageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.ImageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.image_source_name().size() > 0) {
    _internal_set_image_source_name(from._internal_image_source_name());
  }
  if (!(from.quality_percent() <= 0 && from.quality_percent() >= 0)) {
    _internal_set_quality_percent(from._internal_quality_percent());
  }
  if (from.image_format() != 0) {
    _internal_set_image_format(from._internal_image_format());
  }
}

void ImageRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.ImageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageRequest::CopyFrom(const ImageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.ImageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageRequest::IsInitialized() const {
  return true;
}

void ImageRequest::InternalSwap(ImageRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  image_source_name_.Swap(&other->image_source_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageRequest, image_format_)
      + sizeof(ImageRequest::image_format_)
      - PROTOBUF_FIELD_OFFSET(ImageRequest, quality_percent_)>(
          reinterpret_cast<char*>(&quality_percent_),
          reinterpret_cast<char*>(&other->quality_percent_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetImageRequest::InitAsDefaultInstance() {
  ::bosdyn::api::_GetImageRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
}
class GetImageRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const GetImageRequest* msg);
};

const ::bosdyn::api::RequestHeader&
GetImageRequest::_Internal::header(const GetImageRequest* msg) {
  return *msg->header_;
}
void GetImageRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
GetImageRequest::GetImageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  image_requests_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.GetImageRequest)
}
GetImageRequest::GetImageRequest(const GetImageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      image_requests_(from.image_requests_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.GetImageRequest)
}

void GetImageRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetImageRequest_bosdyn_2fapi_2fimage_2eproto.base);
  header_ = nullptr;
}

GetImageRequest::~GetImageRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.GetImageRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetImageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void GetImageRequest::ArenaDtor(void* object) {
  GetImageRequest* _this = reinterpret_cast< GetImageRequest* >(object);
  (void)_this;
}
void GetImageRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetImageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetImageRequest& GetImageRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetImageRequest_bosdyn_2fapi_2fimage_2eproto.base);
  return *internal_default_instance();
}


void GetImageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.GetImageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_requests_.Clear();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetImageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bosdyn.api.ImageRequest image_requests = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_image_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetImageRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.GetImageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .bosdyn.api.ImageRequest image_requests = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_image_requests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_image_requests(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.GetImageRequest)
  return target;
}

size_t GetImageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.GetImageRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bosdyn.api.ImageRequest image_requests = 2;
  total_size += 1UL * this->_internal_image_requests_size();
  for (const auto& msg : this->image_requests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetImageRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.GetImageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetImageRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetImageRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.GetImageRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.GetImageRequest)
    MergeFrom(*source);
  }
}

void GetImageRequest::MergeFrom(const GetImageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.GetImageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  image_requests_.MergeFrom(from.image_requests_);
  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
}

void GetImageRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.GetImageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetImageRequest::CopyFrom(const GetImageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.GetImageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetImageRequest::IsInitialized() const {
  return true;
}

void GetImageRequest::InternalSwap(GetImageRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  image_requests_.InternalSwap(&other->image_requests_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetImageRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ImageResponse::InitAsDefaultInstance() {
  ::bosdyn::api::_ImageResponse_default_instance_._instance.get_mutable()->shot_ = const_cast< ::bosdyn::api::ImageCapture*>(
      ::bosdyn::api::ImageCapture::internal_default_instance());
  ::bosdyn::api::_ImageResponse_default_instance_._instance.get_mutable()->source_ = const_cast< ::bosdyn::api::ImageSource*>(
      ::bosdyn::api::ImageSource::internal_default_instance());
}
class ImageResponse::_Internal {
 public:
  static const ::bosdyn::api::ImageCapture& shot(const ImageResponse* msg);
  static const ::bosdyn::api::ImageSource& source(const ImageResponse* msg);
};

const ::bosdyn::api::ImageCapture&
ImageResponse::_Internal::shot(const ImageResponse* msg) {
  return *msg->shot_;
}
const ::bosdyn::api::ImageSource&
ImageResponse::_Internal::source(const ImageResponse* msg) {
  return *msg->source_;
}
ImageResponse::ImageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.ImageResponse)
}
ImageResponse::ImageResponse(const ImageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_shot()) {
    shot_ = new ::bosdyn::api::ImageCapture(*from.shot_);
  } else {
    shot_ = nullptr;
  }
  if (from._internal_has_source()) {
    source_ = new ::bosdyn::api::ImageSource(*from.source_);
  } else {
    source_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.ImageResponse)
}

void ImageResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImageResponse_bosdyn_2fapi_2fimage_2eproto.base);
  ::memset(&shot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&shot_)) + sizeof(status_));
}

ImageResponse::~ImageResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.ImageResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete shot_;
  if (this != internal_default_instance()) delete source_;
}

void ImageResponse::ArenaDtor(void* object) {
  ImageResponse* _this = reinterpret_cast< ImageResponse* >(object);
  (void)_this;
}
void ImageResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImageResponse& ImageResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImageResponse_bosdyn_2fapi_2fimage_2eproto.base);
  return *internal_default_instance();
}


void ImageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.ImageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && shot_ != nullptr) {
    delete shot_;
  }
  shot_ = nullptr;
  if (GetArena() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ImageCapture shot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_shot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.ImageSource source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.ImageResponse.Status status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::bosdyn::api::ImageResponse_Status>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.ImageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ImageCapture shot = 1;
  if (this->has_shot()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::shot(this), target, stream);
  }

  // .bosdyn.api.ImageSource source = 2;
  if (this->has_source()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::source(this), target, stream);
  }

  // .bosdyn.api.ImageResponse.Status status = 4;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.ImageResponse)
  return target;
}

size_t ImageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.ImageResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.ImageCapture shot = 1;
  if (this->has_shot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shot_);
  }

  // .bosdyn.api.ImageSource source = 2;
  if (this->has_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_);
  }

  // .bosdyn.api.ImageResponse.Status status = 4;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.ImageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.ImageResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.ImageResponse)
    MergeFrom(*source);
  }
}

void ImageResponse::MergeFrom(const ImageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.ImageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_shot()) {
    _internal_mutable_shot()->::bosdyn::api::ImageCapture::MergeFrom(from._internal_shot());
  }
  if (from.has_source()) {
    _internal_mutable_source()->::bosdyn::api::ImageSource::MergeFrom(from._internal_source());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void ImageResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.ImageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageResponse::CopyFrom(const ImageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.ImageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageResponse::IsInitialized() const {
  return true;
}

void ImageResponse::InternalSwap(ImageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageResponse, status_)
      + sizeof(ImageResponse::status_)
      - PROTOBUF_FIELD_OFFSET(ImageResponse, shot_)>(
          reinterpret_cast<char*>(&shot_),
          reinterpret_cast<char*>(&other->shot_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetImageResponse::InitAsDefaultInstance() {
  ::bosdyn::api::_GetImageResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
}
class GetImageResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const GetImageResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
GetImageResponse::_Internal::header(const GetImageResponse* msg) {
  return *msg->header_;
}
void GetImageResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
GetImageResponse::GetImageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  image_responses_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.GetImageResponse)
}
GetImageResponse::GetImageResponse(const GetImageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      image_responses_(from.image_responses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.GetImageResponse)
}

void GetImageResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetImageResponse_bosdyn_2fapi_2fimage_2eproto.base);
  header_ = nullptr;
}

GetImageResponse::~GetImageResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.GetImageResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetImageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void GetImageResponse::ArenaDtor(void* object) {
  GetImageResponse* _this = reinterpret_cast< GetImageResponse* >(object);
  (void)_this;
}
void GetImageResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetImageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetImageResponse& GetImageResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetImageResponse_bosdyn_2fapi_2fimage_2eproto.base);
  return *internal_default_instance();
}


void GetImageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.GetImageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_responses_.Clear();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetImageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bosdyn.api.ImageResponse image_responses = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_image_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetImageResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.GetImageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .bosdyn.api.ImageResponse image_responses = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_image_responses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_image_responses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.GetImageResponse)
  return target;
}

size_t GetImageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.GetImageResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bosdyn.api.ImageResponse image_responses = 2;
  total_size += 1UL * this->_internal_image_responses_size();
  for (const auto& msg : this->image_responses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetImageResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.GetImageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetImageResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetImageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.GetImageResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.GetImageResponse)
    MergeFrom(*source);
  }
}

void GetImageResponse::MergeFrom(const GetImageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.GetImageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  image_responses_.MergeFrom(from.image_responses_);
  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
}

void GetImageResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.GetImageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetImageResponse::CopyFrom(const GetImageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.GetImageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetImageResponse::IsInitialized() const {
  return true;
}

void GetImageResponse::InternalSwap(GetImageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  image_responses_.InternalSwap(&other->image_responses_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetImageResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bosdyn::api::Image* Arena::CreateMaybeMessage< ::bosdyn::api::Image >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::Image >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::ImageCapture* Arena::CreateMaybeMessage< ::bosdyn::api::ImageCapture >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::ImageCapture >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::ImageSource_PinholeModel_CameraIntrinsics* Arena::CreateMaybeMessage< ::bosdyn::api::ImageSource_PinholeModel_CameraIntrinsics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::ImageSource_PinholeModel_CameraIntrinsics >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::ImageSource_PinholeModel* Arena::CreateMaybeMessage< ::bosdyn::api::ImageSource_PinholeModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::ImageSource_PinholeModel >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::ImageSource* Arena::CreateMaybeMessage< ::bosdyn::api::ImageSource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::ImageSource >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::ListImageSourcesRequest* Arena::CreateMaybeMessage< ::bosdyn::api::ListImageSourcesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::ListImageSourcesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::ListImageSourcesResponse* Arena::CreateMaybeMessage< ::bosdyn::api::ListImageSourcesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::ListImageSourcesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::ImageRequest* Arena::CreateMaybeMessage< ::bosdyn::api::ImageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::ImageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::GetImageRequest* Arena::CreateMaybeMessage< ::bosdyn::api::GetImageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::GetImageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::ImageResponse* Arena::CreateMaybeMessage< ::bosdyn::api::ImageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::ImageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::GetImageResponse* Arena::CreateMaybeMessage< ::bosdyn::api::GetImageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::GetImageResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
