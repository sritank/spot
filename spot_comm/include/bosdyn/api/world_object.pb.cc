// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/world_object.proto

#include "bosdyn/api/world_object.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fworld_5fobject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AprilTagProperties_bosdyn_2fapi_2fworld_5fobject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fworld_5fobject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DrawableArrow_bosdyn_2fapi_2fworld_5fobject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fworld_5fobject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DrawableBox_bosdyn_2fapi_2fworld_5fobject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fworld_5fobject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DrawableCapsule_bosdyn_2fapi_2fworld_5fobject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fworld_5fobject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DrawableCylinder_bosdyn_2fapi_2fworld_5fobject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fworld_5fobject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DrawableFrame_bosdyn_2fapi_2fworld_5fobject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fworld_5fobject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DrawableLineStrip_bosdyn_2fapi_2fworld_5fobject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fworld_5fobject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DrawablePoints_bosdyn_2fapi_2fworld_5fobject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fworld_5fobject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_DrawableProperties_bosdyn_2fapi_2fworld_5fobject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fworld_5fobject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DrawableProperties_Color_bosdyn_2fapi_2fworld_5fobject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fworld_5fobject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DrawableSphere_bosdyn_2fapi_2fworld_5fobject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FrameTreeSnapshot_bosdyn_2fapi_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fworld_5fobject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImageProperties_bosdyn_2fapi_2fworld_5fobject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fworld_5fobject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MutateWorldObjectRequest_Mutation_bosdyn_2fapi_2fworld_5fobject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Polygon_bosdyn_2fapi_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec2_bosdyn_2fapi_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec3_bosdyn_2fapi_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fworld_5fobject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_WorldObject_bosdyn_2fapi_2fworld_5fobject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Any_google_2fprotobuf_2fany_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace bosdyn {
namespace api {
class WorldObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorldObject> _instance;
} _WorldObject_default_instance_;
class ListWorldObjectRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListWorldObjectRequest> _instance;
} _ListWorldObjectRequest_default_instance_;
class ListWorldObjectResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListWorldObjectResponse> _instance;
} _ListWorldObjectResponse_default_instance_;
class MutateWorldObjectRequest_MutationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MutateWorldObjectRequest_Mutation> _instance;
} _MutateWorldObjectRequest_Mutation_default_instance_;
class MutateWorldObjectRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MutateWorldObjectRequest> _instance;
} _MutateWorldObjectRequest_default_instance_;
class MutateWorldObjectResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MutateWorldObjectResponse> _instance;
} _MutateWorldObjectResponse_default_instance_;
class ImagePropertiesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ImageProperties> _instance;
} _ImageProperties_default_instance_;
class AprilTagPropertiesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AprilTagProperties> _instance;
} _AprilTagProperties_default_instance_;
class DrawableProperties_ColorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DrawableProperties_Color> _instance;
} _DrawableProperties_Color_default_instance_;
class DrawablePropertiesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DrawableProperties> _instance;
  const ::bosdyn::api::DrawableFrame* frame_;
  const ::bosdyn::api::DrawableSphere* sphere_;
  const ::bosdyn::api::DrawableBox* box_;
  const ::bosdyn::api::DrawableArrow* arrow_;
  const ::bosdyn::api::DrawableCapsule* capsule_;
  const ::bosdyn::api::DrawableCylinder* cylinder_;
  const ::bosdyn::api::DrawableLineStrip* linestrip_;
  const ::bosdyn::api::DrawablePoints* points_;
} _DrawableProperties_default_instance_;
class DrawableFrameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DrawableFrame> _instance;
} _DrawableFrame_default_instance_;
class DrawableSphereDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DrawableSphere> _instance;
} _DrawableSphere_default_instance_;
class DrawableBoxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DrawableBox> _instance;
} _DrawableBox_default_instance_;
class DrawableArrowDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DrawableArrow> _instance;
} _DrawableArrow_default_instance_;
class DrawableCapsuleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DrawableCapsule> _instance;
} _DrawableCapsule_default_instance_;
class DrawableCylinderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DrawableCylinder> _instance;
} _DrawableCylinder_default_instance_;
class DrawableLineStripDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DrawableLineStrip> _instance;
} _DrawableLineStrip_default_instance_;
class DrawablePointsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DrawablePoints> _instance;
} _DrawablePoints_default_instance_;
}  // namespace api
}  // namespace bosdyn
static void InitDefaultsscc_info_AprilTagProperties_bosdyn_2fapi_2fworld_5fobject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_AprilTagProperties_default_instance_;
    new (ptr) ::bosdyn::api::AprilTagProperties();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::AprilTagProperties::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AprilTagProperties_bosdyn_2fapi_2fworld_5fobject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AprilTagProperties_bosdyn_2fapi_2fworld_5fobject_2eproto}, {
      &scc_info_Vec2_bosdyn_2fapi_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_DrawableArrow_bosdyn_2fapi_2fworld_5fobject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_DrawableArrow_default_instance_;
    new (ptr) ::bosdyn::api::DrawableArrow();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::DrawableArrow::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DrawableArrow_bosdyn_2fapi_2fworld_5fobject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DrawableArrow_bosdyn_2fapi_2fworld_5fobject_2eproto}, {
      &scc_info_Vec3_bosdyn_2fapi_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_DrawableBox_bosdyn_2fapi_2fworld_5fobject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_DrawableBox_default_instance_;
    new (ptr) ::bosdyn::api::DrawableBox();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::DrawableBox::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DrawableBox_bosdyn_2fapi_2fworld_5fobject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DrawableBox_bosdyn_2fapi_2fworld_5fobject_2eproto}, {
      &scc_info_Vec3_bosdyn_2fapi_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_DrawableCapsule_bosdyn_2fapi_2fworld_5fobject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_DrawableCapsule_default_instance_;
    new (ptr) ::bosdyn::api::DrawableCapsule();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::DrawableCapsule::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DrawableCapsule_bosdyn_2fapi_2fworld_5fobject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DrawableCapsule_bosdyn_2fapi_2fworld_5fobject_2eproto}, {
      &scc_info_Vec3_bosdyn_2fapi_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_DrawableCylinder_bosdyn_2fapi_2fworld_5fobject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_DrawableCylinder_default_instance_;
    new (ptr) ::bosdyn::api::DrawableCylinder();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::DrawableCylinder::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DrawableCylinder_bosdyn_2fapi_2fworld_5fobject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DrawableCylinder_bosdyn_2fapi_2fworld_5fobject_2eproto}, {
      &scc_info_Vec3_bosdyn_2fapi_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_DrawableFrame_bosdyn_2fapi_2fworld_5fobject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_DrawableFrame_default_instance_;
    new (ptr) ::bosdyn::api::DrawableFrame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::DrawableFrame::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DrawableFrame_bosdyn_2fapi_2fworld_5fobject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DrawableFrame_bosdyn_2fapi_2fworld_5fobject_2eproto}, {}};

static void InitDefaultsscc_info_DrawableLineStrip_bosdyn_2fapi_2fworld_5fobject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_DrawableLineStrip_default_instance_;
    new (ptr) ::bosdyn::api::DrawableLineStrip();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::DrawableLineStrip::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DrawableLineStrip_bosdyn_2fapi_2fworld_5fobject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DrawableLineStrip_bosdyn_2fapi_2fworld_5fobject_2eproto}, {
      &scc_info_Vec3_bosdyn_2fapi_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_DrawablePoints_bosdyn_2fapi_2fworld_5fobject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_DrawablePoints_default_instance_;
    new (ptr) ::bosdyn::api::DrawablePoints();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::DrawablePoints::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DrawablePoints_bosdyn_2fapi_2fworld_5fobject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DrawablePoints_bosdyn_2fapi_2fworld_5fobject_2eproto}, {
      &scc_info_Vec3_bosdyn_2fapi_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_DrawableProperties_bosdyn_2fapi_2fworld_5fobject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_DrawableProperties_default_instance_;
    new (ptr) ::bosdyn::api::DrawableProperties();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::DrawableProperties::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_DrawableProperties_bosdyn_2fapi_2fworld_5fobject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 9, 0, InitDefaultsscc_info_DrawableProperties_bosdyn_2fapi_2fworld_5fobject_2eproto}, {
      &scc_info_DrawableProperties_Color_bosdyn_2fapi_2fworld_5fobject_2eproto.base,
      &scc_info_DrawableFrame_bosdyn_2fapi_2fworld_5fobject_2eproto.base,
      &scc_info_DrawableSphere_bosdyn_2fapi_2fworld_5fobject_2eproto.base,
      &scc_info_DrawableBox_bosdyn_2fapi_2fworld_5fobject_2eproto.base,
      &scc_info_DrawableArrow_bosdyn_2fapi_2fworld_5fobject_2eproto.base,
      &scc_info_DrawableCapsule_bosdyn_2fapi_2fworld_5fobject_2eproto.base,
      &scc_info_DrawableCylinder_bosdyn_2fapi_2fworld_5fobject_2eproto.base,
      &scc_info_DrawableLineStrip_bosdyn_2fapi_2fworld_5fobject_2eproto.base,
      &scc_info_DrawablePoints_bosdyn_2fapi_2fworld_5fobject_2eproto.base,}};

static void InitDefaultsscc_info_DrawableProperties_Color_bosdyn_2fapi_2fworld_5fobject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_DrawableProperties_Color_default_instance_;
    new (ptr) ::bosdyn::api::DrawableProperties_Color();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::DrawableProperties_Color::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DrawableProperties_Color_bosdyn_2fapi_2fworld_5fobject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DrawableProperties_Color_bosdyn_2fapi_2fworld_5fobject_2eproto}, {}};

static void InitDefaultsscc_info_DrawableSphere_bosdyn_2fapi_2fworld_5fobject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_DrawableSphere_default_instance_;
    new (ptr) ::bosdyn::api::DrawableSphere();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::DrawableSphere::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DrawableSphere_bosdyn_2fapi_2fworld_5fobject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DrawableSphere_bosdyn_2fapi_2fworld_5fobject_2eproto}, {}};

static void InitDefaultsscc_info_ImageProperties_bosdyn_2fapi_2fworld_5fobject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_ImageProperties_default_instance_;
    new (ptr) ::bosdyn::api::ImageProperties();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::ImageProperties::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImageProperties_bosdyn_2fapi_2fworld_5fobject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ImageProperties_bosdyn_2fapi_2fworld_5fobject_2eproto}, {
      &scc_info_Polygon_bosdyn_2fapi_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_ListWorldObjectRequest_bosdyn_2fapi_2fworld_5fobject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_ListWorldObjectRequest_default_instance_;
    new (ptr) ::bosdyn::api::ListWorldObjectRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::ListWorldObjectRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ListWorldObjectRequest_bosdyn_2fapi_2fworld_5fobject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ListWorldObjectRequest_bosdyn_2fapi_2fworld_5fobject_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_ListWorldObjectResponse_bosdyn_2fapi_2fworld_5fobject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_ListWorldObjectResponse_default_instance_;
    new (ptr) ::bosdyn::api::ListWorldObjectResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::ListWorldObjectResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ListWorldObjectResponse_bosdyn_2fapi_2fworld_5fobject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ListWorldObjectResponse_bosdyn_2fapi_2fworld_5fobject_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_WorldObject_bosdyn_2fapi_2fworld_5fobject_2eproto.base,}};

static void InitDefaultsscc_info_MutateWorldObjectRequest_bosdyn_2fapi_2fworld_5fobject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_MutateWorldObjectRequest_default_instance_;
    new (ptr) ::bosdyn::api::MutateWorldObjectRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::MutateWorldObjectRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MutateWorldObjectRequest_bosdyn_2fapi_2fworld_5fobject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MutateWorldObjectRequest_bosdyn_2fapi_2fworld_5fobject_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_MutateWorldObjectRequest_Mutation_bosdyn_2fapi_2fworld_5fobject_2eproto.base,}};

static void InitDefaultsscc_info_MutateWorldObjectRequest_Mutation_bosdyn_2fapi_2fworld_5fobject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_MutateWorldObjectRequest_Mutation_default_instance_;
    new (ptr) ::bosdyn::api::MutateWorldObjectRequest_Mutation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::MutateWorldObjectRequest_Mutation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MutateWorldObjectRequest_Mutation_bosdyn_2fapi_2fworld_5fobject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MutateWorldObjectRequest_Mutation_bosdyn_2fapi_2fworld_5fobject_2eproto}, {
      &scc_info_WorldObject_bosdyn_2fapi_2fworld_5fobject_2eproto.base,}};

static void InitDefaultsscc_info_MutateWorldObjectResponse_bosdyn_2fapi_2fworld_5fobject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_MutateWorldObjectResponse_default_instance_;
    new (ptr) ::bosdyn::api::MutateWorldObjectResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::MutateWorldObjectResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MutateWorldObjectResponse_bosdyn_2fapi_2fworld_5fobject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MutateWorldObjectResponse_bosdyn_2fapi_2fworld_5fobject_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_WorldObject_bosdyn_2fapi_2fworld_5fobject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_WorldObject_default_instance_;
    new (ptr) ::bosdyn::api::WorldObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::WorldObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_WorldObject_bosdyn_2fapi_2fworld_5fobject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_WorldObject_bosdyn_2fapi_2fworld_5fobject_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_FrameTreeSnapshot_bosdyn_2fapi_2fgeometry_2eproto.base,
      &scc_info_DrawableProperties_bosdyn_2fapi_2fworld_5fobject_2eproto.base,
      &scc_info_AprilTagProperties_bosdyn_2fapi_2fworld_5fobject_2eproto.base,
      &scc_info_ImageProperties_bosdyn_2fapi_2fworld_5fobject_2eproto.base,
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bosdyn_2fapi_2fworld_5fobject_2eproto[18];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_bosdyn_2fapi_2fworld_5fobject_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bosdyn_2fapi_2fworld_5fobject_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bosdyn_2fapi_2fworld_5fobject_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::WorldObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::WorldObject, id_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::WorldObject, name_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::WorldObject, acquisition_time_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::WorldObject, transforms_snapshot_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::WorldObject, drawable_properties_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::WorldObject, apriltag_properties_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::WorldObject, image_properties_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::WorldObject, additional_properties_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::ListWorldObjectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::ListWorldObjectRequest, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::ListWorldObjectRequest, object_type_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::ListWorldObjectRequest, timestamp_filter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::ListWorldObjectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::ListWorldObjectResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::ListWorldObjectResponse, world_objects_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::MutateWorldObjectRequest_Mutation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::MutateWorldObjectRequest_Mutation, action_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::MutateWorldObjectRequest_Mutation, object_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::MutateWorldObjectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::MutateWorldObjectRequest, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::MutateWorldObjectRequest, mutation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::MutateWorldObjectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::MutateWorldObjectResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::MutateWorldObjectResponse, status_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::MutateWorldObjectResponse, mutated_object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::ImageProperties, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::ImageProperties, camera_source_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::ImageProperties, coordinates_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::ImageProperties, frame_name_image_coordinates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::AprilTagProperties, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::AprilTagProperties, tag_id_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::AprilTagProperties, dimensions_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::AprilTagProperties, frame_name_fiducial_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::AprilTagProperties, frame_name_fiducial_filtered_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::DrawableProperties_Color, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::DrawableProperties_Color, r_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::DrawableProperties_Color, g_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::DrawableProperties_Color, b_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::DrawableProperties_Color, a_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::DrawableProperties, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::DrawableProperties, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::DrawableProperties, color_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::DrawableProperties, label_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::DrawableProperties, wireframe_),
  offsetof(::bosdyn::api::DrawablePropertiesDefaultTypeInternal, frame_),
  offsetof(::bosdyn::api::DrawablePropertiesDefaultTypeInternal, sphere_),
  offsetof(::bosdyn::api::DrawablePropertiesDefaultTypeInternal, box_),
  offsetof(::bosdyn::api::DrawablePropertiesDefaultTypeInternal, arrow_),
  offsetof(::bosdyn::api::DrawablePropertiesDefaultTypeInternal, capsule_),
  offsetof(::bosdyn::api::DrawablePropertiesDefaultTypeInternal, cylinder_),
  offsetof(::bosdyn::api::DrawablePropertiesDefaultTypeInternal, linestrip_),
  offsetof(::bosdyn::api::DrawablePropertiesDefaultTypeInternal, points_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::DrawableProperties, frame_name_drawable_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::DrawableProperties, drawable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::DrawableFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::DrawableFrame, arrow_length_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::DrawableFrame, arrow_radius_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::DrawableSphere, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::DrawableSphere, radius_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::DrawableBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::DrawableBox, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::DrawableArrow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::DrawableArrow, direction_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::DrawableArrow, radius_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::DrawableCapsule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::DrawableCapsule, direction_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::DrawableCapsule, radius_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::DrawableCylinder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::DrawableCylinder, direction_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::DrawableCylinder, radius_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::DrawableLineStrip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::DrawableLineStrip, points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::DrawablePoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::DrawablePoints, points_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::bosdyn::api::WorldObject)},
  { 13, -1, sizeof(::bosdyn::api::ListWorldObjectRequest)},
  { 21, -1, sizeof(::bosdyn::api::ListWorldObjectResponse)},
  { 28, -1, sizeof(::bosdyn::api::MutateWorldObjectRequest_Mutation)},
  { 35, -1, sizeof(::bosdyn::api::MutateWorldObjectRequest)},
  { 42, -1, sizeof(::bosdyn::api::MutateWorldObjectResponse)},
  { 50, -1, sizeof(::bosdyn::api::ImageProperties)},
  { 58, -1, sizeof(::bosdyn::api::AprilTagProperties)},
  { 67, -1, sizeof(::bosdyn::api::DrawableProperties_Color)},
  { 76, -1, sizeof(::bosdyn::api::DrawableProperties)},
  { 94, -1, sizeof(::bosdyn::api::DrawableFrame)},
  { 101, -1, sizeof(::bosdyn::api::DrawableSphere)},
  { 107, -1, sizeof(::bosdyn::api::DrawableBox)},
  { 113, -1, sizeof(::bosdyn::api::DrawableArrow)},
  { 120, -1, sizeof(::bosdyn::api::DrawableCapsule)},
  { 127, -1, sizeof(::bosdyn::api::DrawableCylinder)},
  { 134, -1, sizeof(::bosdyn::api::DrawableLineStrip)},
  { 140, -1, sizeof(::bosdyn::api::DrawablePoints)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_WorldObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_ListWorldObjectRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_ListWorldObjectResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_MutateWorldObjectRequest_Mutation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_MutateWorldObjectRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_MutateWorldObjectResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_ImageProperties_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_AprilTagProperties_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_DrawableProperties_Color_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_DrawableProperties_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_DrawableFrame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_DrawableSphere_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_DrawableBox_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_DrawableArrow_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_DrawableCapsule_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_DrawableCylinder_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_DrawableLineStrip_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_DrawablePoints_default_instance_),
};

const char descriptor_table_protodef_bosdyn_2fapi_2fworld_5fobject_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035bosdyn/api/world_object.proto\022\nbosdyn."
  "api\032\031bosdyn/api/geometry.proto\032\037google/p"
  "rotobuf/timestamp.proto\032\031google/protobuf"
  "/any.proto\032\027bosdyn/api/header.proto\"\377\002\n\013"
  "WorldObject\022\n\n\002id\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\0224\n"
  "\020acquisition_time\030\036 \001(\0132\032.google.protobu"
  "f.Timestamp\022:\n\023transforms_snapshot\030\037 \001(\013"
  "2\035.bosdyn.api.FrameTreeSnapshot\022;\n\023drawa"
  "ble_properties\030\005 \003(\0132\036.bosdyn.api.Drawab"
  "leProperties\022;\n\023apriltag_properties\030\006 \001("
  "\0132\036.bosdyn.api.AprilTagProperties\0225\n\020ima"
  "ge_properties\030\t \001(\0132\033.bosdyn.api.ImagePr"
  "operties\0223\n\025additional_properties\030d \001(\0132"
  "\024.google.protobuf.Any\"\253\001\n\026ListWorldObjec"
  "tRequest\022)\n\006header\030\001 \001(\0132\031.bosdyn.api.Re"
  "questHeader\0220\n\013object_type\030\002 \003(\0162\033.bosdy"
  "n.api.WorldObjectType\0224\n\020timestamp_filte"
  "r\030\003 \001(\0132\032.google.protobuf.Timestamp\"u\n\027L"
  "istWorldObjectResponse\022*\n\006header\030\001 \001(\0132\032"
  ".bosdyn.api.ResponseHeader\022.\n\rworld_obje"
  "cts\030\002 \003(\0132\027.bosdyn.api.WorldObject\"\314\002\n\030M"
  "utateWorldObjectRequest\022)\n\006header\030\001 \001(\0132"
  "\031.bosdyn.api.RequestHeader\022\?\n\010mutation\030\002"
  " \001(\0132-.bosdyn.api.MutateWorldObjectReque"
  "st.Mutation\032p\n\010Mutation\022;\n\006action\030\001 \001(\0162"
  "+.bosdyn.api.MutateWorldObjectRequest.Ac"
  "tion\022\'\n\006object\030\002 \001(\0132\027.bosdyn.api.WorldO"
  "bject\"R\n\006Action\022\022\n\016ACTION_UNKNOWN\020\000\022\016\n\nA"
  "CTION_ADD\020\001\022\021\n\rACTION_CHANGE\020\002\022\021\n\rACTION"
  "_DELETE\020\003\"\207\002\n\031MutateWorldObjectResponse\022"
  "*\n\006header\030\001 \001(\0132\032.bosdyn.api.ResponseHea"
  "der\022<\n\006status\030\002 \001(\0162,.bosdyn.api.MutateW"
  "orldObjectResponse.Status\022\031\n\021mutated_obj"
  "ect_id\030\004 \001(\005\"e\n\006Status\022\022\n\016STATUS_UNKNOWN"
  "\020\000\022\r\n\tSTATUS_OK\020\001\022\036\n\032STATUS_INVALID_MUTA"
  "TION_ID\020\002\022\030\n\024STATUS_NO_PERMISSION\020\003\"x\n\017I"
  "mageProperties\022\025\n\rcamera_source\030\001 \001(\t\022(\n"
  "\013coordinates\030\002 \001(\0132\023.bosdyn.api.Polygon\022"
  "$\n\034frame_name_image_coordinates\030\003 \001(\t\"\215\001"
  "\n\022AprilTagProperties\022\016\n\006tag_id\030\001 \001(\005\022$\n\n"
  "dimensions\030\002 \001(\0132\020.bosdyn.api.Vec2\022\033\n\023fr"
  "ame_name_fiducial\030\003 \001(\t\022$\n\034frame_name_fi"
  "ducial_filtered\030\004 \001(\t\"\273\004\n\022DrawableProper"
  "ties\0223\n\005color\030\001 \001(\0132$.bosdyn.api.Drawabl"
  "eProperties.Color\022\r\n\005label\030\002 \001(\t\022\021\n\twire"
  "frame\030\003 \001(\010\022*\n\005frame\030\004 \001(\0132\031.bosdyn.api."
  "DrawableFrameH\000\022,\n\006sphere\030\005 \001(\0132\032.bosdyn"
  ".api.DrawableSphereH\000\022&\n\003box\030\006 \001(\0132\027.bos"
  "dyn.api.DrawableBoxH\000\022*\n\005arrow\030\007 \001(\0132\031.b"
  "osdyn.api.DrawableArrowH\000\022.\n\007capsule\030\010 \001"
  "(\0132\033.bosdyn.api.DrawableCapsuleH\000\0220\n\010cyl"
  "inder\030\t \001(\0132\034.bosdyn.api.DrawableCylinde"
  "rH\000\0222\n\tlinestrip\030\n \001(\0132\035.bosdyn.api.Draw"
  "ableLineStripH\000\022,\n\006points\030\013 \001(\0132\032.bosdyn"
  ".api.DrawablePointsH\000\022\033\n\023frame_name_draw"
  "able\030\014 \001(\t\0323\n\005Color\022\t\n\001r\030\001 \001(\005\022\t\n\001g\030\002 \001("
  "\005\022\t\n\001b\030\003 \001(\005\022\t\n\001a\030\004 \001(\001B\n\n\010drawable\";\n\rD"
  "rawableFrame\022\024\n\014arrow_length\030\001 \001(\001\022\024\n\014ar"
  "row_radius\030\002 \001(\001\" \n\016DrawableSphere\022\016\n\006ra"
  "dius\030\001 \001(\001\"-\n\013DrawableBox\022\036\n\004size\030\001 \001(\0132"
  "\020.bosdyn.api.Vec3\"D\n\rDrawableArrow\022#\n\tdi"
  "rection\030\001 \001(\0132\020.bosdyn.api.Vec3\022\016\n\006radiu"
  "s\030\002 \001(\001\"F\n\017DrawableCapsule\022#\n\tdirection\030"
  "\001 \001(\0132\020.bosdyn.api.Vec3\022\016\n\006radius\030\002 \001(\001\""
  "G\n\020DrawableCylinder\022#\n\tdirection\030\001 \001(\0132\020"
  ".bosdyn.api.Vec3\022\016\n\006radius\030\002 \001(\001\"5\n\021Draw"
  "ableLineStrip\022 \n\006points\030\001 \001(\0132\020.bosdyn.a"
  "pi.Vec3\"2\n\016DrawablePoints\022 \n\006points\030\001 \003("
  "\0132\020.bosdyn.api.Vec3*\205\001\n\017WorldObjectType\022"
  "\030\n\024WORLD_OBJECT_UNKNOWN\020\000\022\031\n\025WORLD_OBJEC"
  "T_DRAWABLE\020\001\022\031\n\025WORLD_OBJECT_APRILTAG\020\002\022"
  "\"\n\036WORLD_OBJECT_IMAGE_COORDINATES\020\005B\022B\020W"
  "orldObjectProtob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bosdyn_2fapi_2fworld_5fobject_2eproto_deps[4] = {
  &::descriptor_table_bosdyn_2fapi_2fgeometry_2eproto,
  &::descriptor_table_bosdyn_2fapi_2fheader_2eproto,
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bosdyn_2fapi_2fworld_5fobject_2eproto_sccs[18] = {
  &scc_info_AprilTagProperties_bosdyn_2fapi_2fworld_5fobject_2eproto.base,
  &scc_info_DrawableArrow_bosdyn_2fapi_2fworld_5fobject_2eproto.base,
  &scc_info_DrawableBox_bosdyn_2fapi_2fworld_5fobject_2eproto.base,
  &scc_info_DrawableCapsule_bosdyn_2fapi_2fworld_5fobject_2eproto.base,
  &scc_info_DrawableCylinder_bosdyn_2fapi_2fworld_5fobject_2eproto.base,
  &scc_info_DrawableFrame_bosdyn_2fapi_2fworld_5fobject_2eproto.base,
  &scc_info_DrawableLineStrip_bosdyn_2fapi_2fworld_5fobject_2eproto.base,
  &scc_info_DrawablePoints_bosdyn_2fapi_2fworld_5fobject_2eproto.base,
  &scc_info_DrawableProperties_bosdyn_2fapi_2fworld_5fobject_2eproto.base,
  &scc_info_DrawableProperties_Color_bosdyn_2fapi_2fworld_5fobject_2eproto.base,
  &scc_info_DrawableSphere_bosdyn_2fapi_2fworld_5fobject_2eproto.base,
  &scc_info_ImageProperties_bosdyn_2fapi_2fworld_5fobject_2eproto.base,
  &scc_info_ListWorldObjectRequest_bosdyn_2fapi_2fworld_5fobject_2eproto.base,
  &scc_info_ListWorldObjectResponse_bosdyn_2fapi_2fworld_5fobject_2eproto.base,
  &scc_info_MutateWorldObjectRequest_bosdyn_2fapi_2fworld_5fobject_2eproto.base,
  &scc_info_MutateWorldObjectRequest_Mutation_bosdyn_2fapi_2fworld_5fobject_2eproto.base,
  &scc_info_MutateWorldObjectResponse_bosdyn_2fapi_2fworld_5fobject_2eproto.base,
  &scc_info_WorldObject_bosdyn_2fapi_2fworld_5fobject_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bosdyn_2fapi_2fworld_5fobject_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fworld_5fobject_2eproto = {
  false, false, descriptor_table_protodef_bosdyn_2fapi_2fworld_5fobject_2eproto, "bosdyn/api/world_object.proto", 2903,
  &descriptor_table_bosdyn_2fapi_2fworld_5fobject_2eproto_once, descriptor_table_bosdyn_2fapi_2fworld_5fobject_2eproto_sccs, descriptor_table_bosdyn_2fapi_2fworld_5fobject_2eproto_deps, 18, 4,
  schemas, file_default_instances, TableStruct_bosdyn_2fapi_2fworld_5fobject_2eproto::offsets,
  file_level_metadata_bosdyn_2fapi_2fworld_5fobject_2eproto, 18, file_level_enum_descriptors_bosdyn_2fapi_2fworld_5fobject_2eproto, file_level_service_descriptors_bosdyn_2fapi_2fworld_5fobject_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bosdyn_2fapi_2fworld_5fobject_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bosdyn_2fapi_2fworld_5fobject_2eproto)), true);
namespace bosdyn {
namespace api {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MutateWorldObjectRequest_Action_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2fworld_5fobject_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2fworld_5fobject_2eproto[0];
}
bool MutateWorldObjectRequest_Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MutateWorldObjectRequest_Action MutateWorldObjectRequest::ACTION_UNKNOWN;
constexpr MutateWorldObjectRequest_Action MutateWorldObjectRequest::ACTION_ADD;
constexpr MutateWorldObjectRequest_Action MutateWorldObjectRequest::ACTION_CHANGE;
constexpr MutateWorldObjectRequest_Action MutateWorldObjectRequest::ACTION_DELETE;
constexpr MutateWorldObjectRequest_Action MutateWorldObjectRequest::Action_MIN;
constexpr MutateWorldObjectRequest_Action MutateWorldObjectRequest::Action_MAX;
constexpr int MutateWorldObjectRequest::Action_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MutateWorldObjectResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2fworld_5fobject_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2fworld_5fobject_2eproto[1];
}
bool MutateWorldObjectResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MutateWorldObjectResponse_Status MutateWorldObjectResponse::STATUS_UNKNOWN;
constexpr MutateWorldObjectResponse_Status MutateWorldObjectResponse::STATUS_OK;
constexpr MutateWorldObjectResponse_Status MutateWorldObjectResponse::STATUS_INVALID_MUTATION_ID;
constexpr MutateWorldObjectResponse_Status MutateWorldObjectResponse::STATUS_NO_PERMISSION;
constexpr MutateWorldObjectResponse_Status MutateWorldObjectResponse::Status_MIN;
constexpr MutateWorldObjectResponse_Status MutateWorldObjectResponse::Status_MAX;
constexpr int MutateWorldObjectResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WorldObjectType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2fworld_5fobject_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2fworld_5fobject_2eproto[2];
}
bool WorldObjectType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void WorldObject::InitAsDefaultInstance() {
  ::bosdyn::api::_WorldObject_default_instance_._instance.get_mutable()->acquisition_time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::bosdyn::api::_WorldObject_default_instance_._instance.get_mutable()->transforms_snapshot_ = const_cast< ::bosdyn::api::FrameTreeSnapshot*>(
      ::bosdyn::api::FrameTreeSnapshot::internal_default_instance());
  ::bosdyn::api::_WorldObject_default_instance_._instance.get_mutable()->apriltag_properties_ = const_cast< ::bosdyn::api::AprilTagProperties*>(
      ::bosdyn::api::AprilTagProperties::internal_default_instance());
  ::bosdyn::api::_WorldObject_default_instance_._instance.get_mutable()->image_properties_ = const_cast< ::bosdyn::api::ImageProperties*>(
      ::bosdyn::api::ImageProperties::internal_default_instance());
  ::bosdyn::api::_WorldObject_default_instance_._instance.get_mutable()->additional_properties_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class WorldObject::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& acquisition_time(const WorldObject* msg);
  static const ::bosdyn::api::FrameTreeSnapshot& transforms_snapshot(const WorldObject* msg);
  static const ::bosdyn::api::AprilTagProperties& apriltag_properties(const WorldObject* msg);
  static const ::bosdyn::api::ImageProperties& image_properties(const WorldObject* msg);
  static const PROTOBUF_NAMESPACE_ID::Any& additional_properties(const WorldObject* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
WorldObject::_Internal::acquisition_time(const WorldObject* msg) {
  return *msg->acquisition_time_;
}
const ::bosdyn::api::FrameTreeSnapshot&
WorldObject::_Internal::transforms_snapshot(const WorldObject* msg) {
  return *msg->transforms_snapshot_;
}
const ::bosdyn::api::AprilTagProperties&
WorldObject::_Internal::apriltag_properties(const WorldObject* msg) {
  return *msg->apriltag_properties_;
}
const ::bosdyn::api::ImageProperties&
WorldObject::_Internal::image_properties(const WorldObject* msg) {
  return *msg->image_properties_;
}
const PROTOBUF_NAMESPACE_ID::Any&
WorldObject::_Internal::additional_properties(const WorldObject* msg) {
  return *msg->additional_properties_;
}
void WorldObject::clear_acquisition_time() {
  if (GetArena() == nullptr && acquisition_time_ != nullptr) {
    delete acquisition_time_;
  }
  acquisition_time_ = nullptr;
}
void WorldObject::clear_transforms_snapshot() {
  if (GetArena() == nullptr && transforms_snapshot_ != nullptr) {
    delete transforms_snapshot_;
  }
  transforms_snapshot_ = nullptr;
}
void WorldObject::clear_additional_properties() {
  if (GetArena() == nullptr && additional_properties_ != nullptr) {
    delete additional_properties_;
  }
  additional_properties_ = nullptr;
}
WorldObject::WorldObject(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  drawable_properties_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.WorldObject)
}
WorldObject::WorldObject(const WorldObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      drawable_properties_(from.drawable_properties_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_apriltag_properties()) {
    apriltag_properties_ = new ::bosdyn::api::AprilTagProperties(*from.apriltag_properties_);
  } else {
    apriltag_properties_ = nullptr;
  }
  if (from._internal_has_image_properties()) {
    image_properties_ = new ::bosdyn::api::ImageProperties(*from.image_properties_);
  } else {
    image_properties_ = nullptr;
  }
  if (from._internal_has_acquisition_time()) {
    acquisition_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.acquisition_time_);
  } else {
    acquisition_time_ = nullptr;
  }
  if (from._internal_has_transforms_snapshot()) {
    transforms_snapshot_ = new ::bosdyn::api::FrameTreeSnapshot(*from.transforms_snapshot_);
  } else {
    transforms_snapshot_ = nullptr;
  }
  if (from._internal_has_additional_properties()) {
    additional_properties_ = new PROTOBUF_NAMESPACE_ID::Any(*from.additional_properties_);
  } else {
    additional_properties_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.WorldObject)
}

void WorldObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WorldObject_bosdyn_2fapi_2fworld_5fobject_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&apriltag_properties_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&apriltag_properties_)) + sizeof(id_));
}

WorldObject::~WorldObject() {
  // @@protoc_insertion_point(destructor:bosdyn.api.WorldObject)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WorldObject::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete apriltag_properties_;
  if (this != internal_default_instance()) delete image_properties_;
  if (this != internal_default_instance()) delete acquisition_time_;
  if (this != internal_default_instance()) delete transforms_snapshot_;
  if (this != internal_default_instance()) delete additional_properties_;
}

void WorldObject::ArenaDtor(void* object) {
  WorldObject* _this = reinterpret_cast< WorldObject* >(object);
  (void)_this;
}
void WorldObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorldObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorldObject& WorldObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorldObject_bosdyn_2fapi_2fworld_5fobject_2eproto.base);
  return *internal_default_instance();
}


void WorldObject::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.WorldObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  drawable_properties_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && apriltag_properties_ != nullptr) {
    delete apriltag_properties_;
  }
  apriltag_properties_ = nullptr;
  if (GetArena() == nullptr && image_properties_ != nullptr) {
    delete image_properties_;
  }
  image_properties_ = nullptr;
  if (GetArena() == nullptr && acquisition_time_ != nullptr) {
    delete acquisition_time_;
  }
  acquisition_time_ = nullptr;
  if (GetArena() == nullptr && transforms_snapshot_ != nullptr) {
    delete transforms_snapshot_;
  }
  transforms_snapshot_ = nullptr;
  if (GetArena() == nullptr && additional_properties_ != nullptr) {
    delete additional_properties_;
  }
  additional_properties_ = nullptr;
  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorldObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.WorldObject.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bosdyn.api.DrawableProperties drawable_properties = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_drawable_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.AprilTagProperties apriltag_properties = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_apriltag_properties(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.ImageProperties image_properties = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_image_properties(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp acquisition_time = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_acquisition_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.FrameTreeSnapshot transforms_snapshot = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_transforms_snapshot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any additional_properties = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_additional_properties(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorldObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.WorldObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.WorldObject.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated .bosdyn.api.DrawableProperties drawable_properties = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_drawable_properties_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_drawable_properties(i), target, stream);
  }

  // .bosdyn.api.AprilTagProperties apriltag_properties = 6;
  if (this->has_apriltag_properties()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::apriltag_properties(this), target, stream);
  }

  // .bosdyn.api.ImageProperties image_properties = 9;
  if (this->has_image_properties()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::image_properties(this), target, stream);
  }

  // .google.protobuf.Timestamp acquisition_time = 30;
  if (this->has_acquisition_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::acquisition_time(this), target, stream);
  }

  // .bosdyn.api.FrameTreeSnapshot transforms_snapshot = 31;
  if (this->has_transforms_snapshot()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::transforms_snapshot(this), target, stream);
  }

  // .google.protobuf.Any additional_properties = 100;
  if (this->has_additional_properties()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        100, _Internal::additional_properties(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.WorldObject)
  return target;
}

size_t WorldObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.WorldObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bosdyn.api.DrawableProperties drawable_properties = 5;
  total_size += 1UL * this->_internal_drawable_properties_size();
  for (const auto& msg : this->drawable_properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .bosdyn.api.AprilTagProperties apriltag_properties = 6;
  if (this->has_apriltag_properties()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *apriltag_properties_);
  }

  // .bosdyn.api.ImageProperties image_properties = 9;
  if (this->has_image_properties()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *image_properties_);
  }

  // .google.protobuf.Timestamp acquisition_time = 30;
  if (this->has_acquisition_time()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *acquisition_time_);
  }

  // .bosdyn.api.FrameTreeSnapshot transforms_snapshot = 31;
  if (this->has_transforms_snapshot()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transforms_snapshot_);
  }

  // .google.protobuf.Any additional_properties = 100;
  if (this->has_additional_properties()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *additional_properties_);
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorldObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.WorldObject)
  GOOGLE_DCHECK_NE(&from, this);
  const WorldObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorldObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.WorldObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.WorldObject)
    MergeFrom(*source);
  }
}

void WorldObject::MergeFrom(const WorldObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.WorldObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  drawable_properties_.MergeFrom(from.drawable_properties_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_apriltag_properties()) {
    _internal_mutable_apriltag_properties()->::bosdyn::api::AprilTagProperties::MergeFrom(from._internal_apriltag_properties());
  }
  if (from.has_image_properties()) {
    _internal_mutable_image_properties()->::bosdyn::api::ImageProperties::MergeFrom(from._internal_image_properties());
  }
  if (from.has_acquisition_time()) {
    _internal_mutable_acquisition_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_acquisition_time());
  }
  if (from.has_transforms_snapshot()) {
    _internal_mutable_transforms_snapshot()->::bosdyn::api::FrameTreeSnapshot::MergeFrom(from._internal_transforms_snapshot());
  }
  if (from.has_additional_properties()) {
    _internal_mutable_additional_properties()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_additional_properties());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void WorldObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.WorldObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldObject::CopyFrom(const WorldObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.WorldObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldObject::IsInitialized() const {
  return true;
}

void WorldObject::InternalSwap(WorldObject* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  drawable_properties_.InternalSwap(&other->drawable_properties_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorldObject, id_)
      + sizeof(WorldObject::id_)
      - PROTOBUF_FIELD_OFFSET(WorldObject, apriltag_properties_)>(
          reinterpret_cast<char*>(&apriltag_properties_),
          reinterpret_cast<char*>(&other->apriltag_properties_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorldObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListWorldObjectRequest::InitAsDefaultInstance() {
  ::bosdyn::api::_ListWorldObjectRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
  ::bosdyn::api::_ListWorldObjectRequest_default_instance_._instance.get_mutable()->timestamp_filter_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class ListWorldObjectRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const ListWorldObjectRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp_filter(const ListWorldObjectRequest* msg);
};

const ::bosdyn::api::RequestHeader&
ListWorldObjectRequest::_Internal::header(const ListWorldObjectRequest* msg) {
  return *msg->header_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
ListWorldObjectRequest::_Internal::timestamp_filter(const ListWorldObjectRequest* msg) {
  return *msg->timestamp_filter_;
}
void ListWorldObjectRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void ListWorldObjectRequest::clear_timestamp_filter() {
  if (GetArena() == nullptr && timestamp_filter_ != nullptr) {
    delete timestamp_filter_;
  }
  timestamp_filter_ = nullptr;
}
ListWorldObjectRequest::ListWorldObjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  object_type_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.ListWorldObjectRequest)
}
ListWorldObjectRequest::ListWorldObjectRequest(const ListWorldObjectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      object_type_(from.object_type_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_timestamp_filter()) {
    timestamp_filter_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_filter_);
  } else {
    timestamp_filter_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.ListWorldObjectRequest)
}

void ListWorldObjectRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListWorldObjectRequest_bosdyn_2fapi_2fworld_5fobject_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_filter_) -
      reinterpret_cast<char*>(&header_)) + sizeof(timestamp_filter_));
}

ListWorldObjectRequest::~ListWorldObjectRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.ListWorldObjectRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListWorldObjectRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete timestamp_filter_;
}

void ListWorldObjectRequest::ArenaDtor(void* object) {
  ListWorldObjectRequest* _this = reinterpret_cast< ListWorldObjectRequest* >(object);
  (void)_this;
}
void ListWorldObjectRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListWorldObjectRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListWorldObjectRequest& ListWorldObjectRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListWorldObjectRequest_bosdyn_2fapi_2fworld_5fobject_2eproto.base);
  return *internal_default_instance();
}


void ListWorldObjectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.ListWorldObjectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_type_.Clear();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && timestamp_filter_ != nullptr) {
    delete timestamp_filter_;
  }
  timestamp_filter_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListWorldObjectRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bosdyn.api.WorldObjectType object_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_object_type(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_object_type(static_cast<::bosdyn::api::WorldObjectType>(val));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp_filter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListWorldObjectRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.ListWorldObjectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .bosdyn.api.WorldObjectType object_type = 2;
  {
    int byte_size = _object_type_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          2, object_type_, byte_size, target);
    }
  }

  // .google.protobuf.Timestamp timestamp_filter = 3;
  if (this->has_timestamp_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::timestamp_filter(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.ListWorldObjectRequest)
  return target;
}

size_t ListWorldObjectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.ListWorldObjectRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bosdyn.api.WorldObjectType object_type = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_object_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_object_type(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _object_type_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .google.protobuf.Timestamp timestamp_filter = 3;
  if (this->has_timestamp_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_filter_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListWorldObjectRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.ListWorldObjectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListWorldObjectRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListWorldObjectRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.ListWorldObjectRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.ListWorldObjectRequest)
    MergeFrom(*source);
  }
}

void ListWorldObjectRequest::MergeFrom(const ListWorldObjectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.ListWorldObjectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  object_type_.MergeFrom(from.object_type_);
  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
  if (from.has_timestamp_filter()) {
    _internal_mutable_timestamp_filter()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp_filter());
  }
}

void ListWorldObjectRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.ListWorldObjectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListWorldObjectRequest::CopyFrom(const ListWorldObjectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.ListWorldObjectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListWorldObjectRequest::IsInitialized() const {
  return true;
}

void ListWorldObjectRequest::InternalSwap(ListWorldObjectRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  object_type_.InternalSwap(&other->object_type_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListWorldObjectRequest, timestamp_filter_)
      + sizeof(ListWorldObjectRequest::timestamp_filter_)
      - PROTOBUF_FIELD_OFFSET(ListWorldObjectRequest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListWorldObjectRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListWorldObjectResponse::InitAsDefaultInstance() {
  ::bosdyn::api::_ListWorldObjectResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
}
class ListWorldObjectResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const ListWorldObjectResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
ListWorldObjectResponse::_Internal::header(const ListWorldObjectResponse* msg) {
  return *msg->header_;
}
void ListWorldObjectResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
ListWorldObjectResponse::ListWorldObjectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  world_objects_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.ListWorldObjectResponse)
}
ListWorldObjectResponse::ListWorldObjectResponse(const ListWorldObjectResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      world_objects_(from.world_objects_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.ListWorldObjectResponse)
}

void ListWorldObjectResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListWorldObjectResponse_bosdyn_2fapi_2fworld_5fobject_2eproto.base);
  header_ = nullptr;
}

ListWorldObjectResponse::~ListWorldObjectResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.ListWorldObjectResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListWorldObjectResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void ListWorldObjectResponse::ArenaDtor(void* object) {
  ListWorldObjectResponse* _this = reinterpret_cast< ListWorldObjectResponse* >(object);
  (void)_this;
}
void ListWorldObjectResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListWorldObjectResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListWorldObjectResponse& ListWorldObjectResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListWorldObjectResponse_bosdyn_2fapi_2fworld_5fobject_2eproto.base);
  return *internal_default_instance();
}


void ListWorldObjectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.ListWorldObjectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  world_objects_.Clear();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListWorldObjectResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bosdyn.api.WorldObject world_objects = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_world_objects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListWorldObjectResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.ListWorldObjectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .bosdyn.api.WorldObject world_objects = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_world_objects_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_world_objects(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.ListWorldObjectResponse)
  return target;
}

size_t ListWorldObjectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.ListWorldObjectResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bosdyn.api.WorldObject world_objects = 2;
  total_size += 1UL * this->_internal_world_objects_size();
  for (const auto& msg : this->world_objects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListWorldObjectResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.ListWorldObjectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListWorldObjectResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListWorldObjectResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.ListWorldObjectResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.ListWorldObjectResponse)
    MergeFrom(*source);
  }
}

void ListWorldObjectResponse::MergeFrom(const ListWorldObjectResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.ListWorldObjectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  world_objects_.MergeFrom(from.world_objects_);
  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
}

void ListWorldObjectResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.ListWorldObjectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListWorldObjectResponse::CopyFrom(const ListWorldObjectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.ListWorldObjectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListWorldObjectResponse::IsInitialized() const {
  return true;
}

void ListWorldObjectResponse::InternalSwap(ListWorldObjectResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  world_objects_.InternalSwap(&other->world_objects_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListWorldObjectResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MutateWorldObjectRequest_Mutation::InitAsDefaultInstance() {
  ::bosdyn::api::_MutateWorldObjectRequest_Mutation_default_instance_._instance.get_mutable()->object_ = const_cast< ::bosdyn::api::WorldObject*>(
      ::bosdyn::api::WorldObject::internal_default_instance());
}
class MutateWorldObjectRequest_Mutation::_Internal {
 public:
  static const ::bosdyn::api::WorldObject& object(const MutateWorldObjectRequest_Mutation* msg);
};

const ::bosdyn::api::WorldObject&
MutateWorldObjectRequest_Mutation::_Internal::object(const MutateWorldObjectRequest_Mutation* msg) {
  return *msg->object_;
}
MutateWorldObjectRequest_Mutation::MutateWorldObjectRequest_Mutation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.MutateWorldObjectRequest.Mutation)
}
MutateWorldObjectRequest_Mutation::MutateWorldObjectRequest_Mutation(const MutateWorldObjectRequest_Mutation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_object()) {
    object_ = new ::bosdyn::api::WorldObject(*from.object_);
  } else {
    object_ = nullptr;
  }
  action_ = from.action_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.MutateWorldObjectRequest.Mutation)
}

void MutateWorldObjectRequest_Mutation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MutateWorldObjectRequest_Mutation_bosdyn_2fapi_2fworld_5fobject_2eproto.base);
  ::memset(&object_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_) -
      reinterpret_cast<char*>(&object_)) + sizeof(action_));
}

MutateWorldObjectRequest_Mutation::~MutateWorldObjectRequest_Mutation() {
  // @@protoc_insertion_point(destructor:bosdyn.api.MutateWorldObjectRequest.Mutation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MutateWorldObjectRequest_Mutation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete object_;
}

void MutateWorldObjectRequest_Mutation::ArenaDtor(void* object) {
  MutateWorldObjectRequest_Mutation* _this = reinterpret_cast< MutateWorldObjectRequest_Mutation* >(object);
  (void)_this;
}
void MutateWorldObjectRequest_Mutation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MutateWorldObjectRequest_Mutation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MutateWorldObjectRequest_Mutation& MutateWorldObjectRequest_Mutation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MutateWorldObjectRequest_Mutation_bosdyn_2fapi_2fworld_5fobject_2eproto.base);
  return *internal_default_instance();
}


void MutateWorldObjectRequest_Mutation::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.MutateWorldObjectRequest.Mutation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && object_ != nullptr) {
    delete object_;
  }
  object_ = nullptr;
  action_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MutateWorldObjectRequest_Mutation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.MutateWorldObjectRequest.Action action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_action(static_cast<::bosdyn::api::MutateWorldObjectRequest_Action>(val));
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.WorldObject object = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MutateWorldObjectRequest_Mutation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.MutateWorldObjectRequest.Mutation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.MutateWorldObjectRequest.Action action = 1;
  if (this->action() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_action(), target);
  }

  // .bosdyn.api.WorldObject object = 2;
  if (this->has_object()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::object(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.MutateWorldObjectRequest.Mutation)
  return target;
}

size_t MutateWorldObjectRequest_Mutation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.MutateWorldObjectRequest.Mutation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.WorldObject object = 2;
  if (this->has_object()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_);
  }

  // .bosdyn.api.MutateWorldObjectRequest.Action action = 1;
  if (this->action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_action());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MutateWorldObjectRequest_Mutation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.MutateWorldObjectRequest.Mutation)
  GOOGLE_DCHECK_NE(&from, this);
  const MutateWorldObjectRequest_Mutation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MutateWorldObjectRequest_Mutation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.MutateWorldObjectRequest.Mutation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.MutateWorldObjectRequest.Mutation)
    MergeFrom(*source);
  }
}

void MutateWorldObjectRequest_Mutation::MergeFrom(const MutateWorldObjectRequest_Mutation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.MutateWorldObjectRequest.Mutation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_object()) {
    _internal_mutable_object()->::bosdyn::api::WorldObject::MergeFrom(from._internal_object());
  }
  if (from.action() != 0) {
    _internal_set_action(from._internal_action());
  }
}

void MutateWorldObjectRequest_Mutation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.MutateWorldObjectRequest.Mutation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MutateWorldObjectRequest_Mutation::CopyFrom(const MutateWorldObjectRequest_Mutation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.MutateWorldObjectRequest.Mutation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MutateWorldObjectRequest_Mutation::IsInitialized() const {
  return true;
}

void MutateWorldObjectRequest_Mutation::InternalSwap(MutateWorldObjectRequest_Mutation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MutateWorldObjectRequest_Mutation, action_)
      + sizeof(MutateWorldObjectRequest_Mutation::action_)
      - PROTOBUF_FIELD_OFFSET(MutateWorldObjectRequest_Mutation, object_)>(
          reinterpret_cast<char*>(&object_),
          reinterpret_cast<char*>(&other->object_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MutateWorldObjectRequest_Mutation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MutateWorldObjectRequest::InitAsDefaultInstance() {
  ::bosdyn::api::_MutateWorldObjectRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
  ::bosdyn::api::_MutateWorldObjectRequest_default_instance_._instance.get_mutable()->mutation_ = const_cast< ::bosdyn::api::MutateWorldObjectRequest_Mutation*>(
      ::bosdyn::api::MutateWorldObjectRequest_Mutation::internal_default_instance());
}
class MutateWorldObjectRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const MutateWorldObjectRequest* msg);
  static const ::bosdyn::api::MutateWorldObjectRequest_Mutation& mutation(const MutateWorldObjectRequest* msg);
};

const ::bosdyn::api::RequestHeader&
MutateWorldObjectRequest::_Internal::header(const MutateWorldObjectRequest* msg) {
  return *msg->header_;
}
const ::bosdyn::api::MutateWorldObjectRequest_Mutation&
MutateWorldObjectRequest::_Internal::mutation(const MutateWorldObjectRequest* msg) {
  return *msg->mutation_;
}
void MutateWorldObjectRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
MutateWorldObjectRequest::MutateWorldObjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.MutateWorldObjectRequest)
}
MutateWorldObjectRequest::MutateWorldObjectRequest(const MutateWorldObjectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_mutation()) {
    mutation_ = new ::bosdyn::api::MutateWorldObjectRequest_Mutation(*from.mutation_);
  } else {
    mutation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.MutateWorldObjectRequest)
}

void MutateWorldObjectRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MutateWorldObjectRequest_bosdyn_2fapi_2fworld_5fobject_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mutation_) -
      reinterpret_cast<char*>(&header_)) + sizeof(mutation_));
}

MutateWorldObjectRequest::~MutateWorldObjectRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.MutateWorldObjectRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MutateWorldObjectRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete mutation_;
}

void MutateWorldObjectRequest::ArenaDtor(void* object) {
  MutateWorldObjectRequest* _this = reinterpret_cast< MutateWorldObjectRequest* >(object);
  (void)_this;
}
void MutateWorldObjectRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MutateWorldObjectRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MutateWorldObjectRequest& MutateWorldObjectRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MutateWorldObjectRequest_bosdyn_2fapi_2fworld_5fobject_2eproto.base);
  return *internal_default_instance();
}


void MutateWorldObjectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.MutateWorldObjectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && mutation_ != nullptr) {
    delete mutation_;
  }
  mutation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MutateWorldObjectRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.MutateWorldObjectRequest.Mutation mutation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mutation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MutateWorldObjectRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.MutateWorldObjectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.MutateWorldObjectRequest.Mutation mutation = 2;
  if (this->has_mutation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::mutation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.MutateWorldObjectRequest)
  return target;
}

size_t MutateWorldObjectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.MutateWorldObjectRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.MutateWorldObjectRequest.Mutation mutation = 2;
  if (this->has_mutation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mutation_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MutateWorldObjectRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.MutateWorldObjectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MutateWorldObjectRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MutateWorldObjectRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.MutateWorldObjectRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.MutateWorldObjectRequest)
    MergeFrom(*source);
  }
}

void MutateWorldObjectRequest::MergeFrom(const MutateWorldObjectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.MutateWorldObjectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
  if (from.has_mutation()) {
    _internal_mutable_mutation()->::bosdyn::api::MutateWorldObjectRequest_Mutation::MergeFrom(from._internal_mutation());
  }
}

void MutateWorldObjectRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.MutateWorldObjectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MutateWorldObjectRequest::CopyFrom(const MutateWorldObjectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.MutateWorldObjectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MutateWorldObjectRequest::IsInitialized() const {
  return true;
}

void MutateWorldObjectRequest::InternalSwap(MutateWorldObjectRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MutateWorldObjectRequest, mutation_)
      + sizeof(MutateWorldObjectRequest::mutation_)
      - PROTOBUF_FIELD_OFFSET(MutateWorldObjectRequest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MutateWorldObjectRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MutateWorldObjectResponse::InitAsDefaultInstance() {
  ::bosdyn::api::_MutateWorldObjectResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
}
class MutateWorldObjectResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const MutateWorldObjectResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
MutateWorldObjectResponse::_Internal::header(const MutateWorldObjectResponse* msg) {
  return *msg->header_;
}
void MutateWorldObjectResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
MutateWorldObjectResponse::MutateWorldObjectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.MutateWorldObjectResponse)
}
MutateWorldObjectResponse::MutateWorldObjectResponse(const MutateWorldObjectResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&mutated_object_id_) -
    reinterpret_cast<char*>(&status_)) + sizeof(mutated_object_id_));
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.MutateWorldObjectResponse)
}

void MutateWorldObjectResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MutateWorldObjectResponse_bosdyn_2fapi_2fworld_5fobject_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mutated_object_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(mutated_object_id_));
}

MutateWorldObjectResponse::~MutateWorldObjectResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.MutateWorldObjectResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MutateWorldObjectResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void MutateWorldObjectResponse::ArenaDtor(void* object) {
  MutateWorldObjectResponse* _this = reinterpret_cast< MutateWorldObjectResponse* >(object);
  (void)_this;
}
void MutateWorldObjectResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MutateWorldObjectResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MutateWorldObjectResponse& MutateWorldObjectResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MutateWorldObjectResponse_bosdyn_2fapi_2fworld_5fobject_2eproto.base);
  return *internal_default_instance();
}


void MutateWorldObjectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.MutateWorldObjectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mutated_object_id_) -
      reinterpret_cast<char*>(&status_)) + sizeof(mutated_object_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MutateWorldObjectResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.MutateWorldObjectResponse.Status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::bosdyn::api::MutateWorldObjectResponse_Status>(val));
        } else goto handle_unusual;
        continue;
      // int32 mutated_object_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          mutated_object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MutateWorldObjectResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.MutateWorldObjectResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.MutateWorldObjectResponse.Status status = 2;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // int32 mutated_object_id = 4;
  if (this->mutated_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_mutated_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.MutateWorldObjectResponse)
  return target;
}

size_t MutateWorldObjectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.MutateWorldObjectResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.MutateWorldObjectResponse.Status status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // int32 mutated_object_id = 4;
  if (this->mutated_object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mutated_object_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MutateWorldObjectResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.MutateWorldObjectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MutateWorldObjectResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MutateWorldObjectResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.MutateWorldObjectResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.MutateWorldObjectResponse)
    MergeFrom(*source);
  }
}

void MutateWorldObjectResponse::MergeFrom(const MutateWorldObjectResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.MutateWorldObjectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.mutated_object_id() != 0) {
    _internal_set_mutated_object_id(from._internal_mutated_object_id());
  }
}

void MutateWorldObjectResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.MutateWorldObjectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MutateWorldObjectResponse::CopyFrom(const MutateWorldObjectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.MutateWorldObjectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MutateWorldObjectResponse::IsInitialized() const {
  return true;
}

void MutateWorldObjectResponse::InternalSwap(MutateWorldObjectResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MutateWorldObjectResponse, mutated_object_id_)
      + sizeof(MutateWorldObjectResponse::mutated_object_id_)
      - PROTOBUF_FIELD_OFFSET(MutateWorldObjectResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MutateWorldObjectResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ImageProperties::InitAsDefaultInstance() {
  ::bosdyn::api::_ImageProperties_default_instance_._instance.get_mutable()->coordinates_ = const_cast< ::bosdyn::api::Polygon*>(
      ::bosdyn::api::Polygon::internal_default_instance());
}
class ImageProperties::_Internal {
 public:
  static const ::bosdyn::api::Polygon& coordinates(const ImageProperties* msg);
};

const ::bosdyn::api::Polygon&
ImageProperties::_Internal::coordinates(const ImageProperties* msg) {
  return *msg->coordinates_;
}
void ImageProperties::clear_coordinates() {
  if (GetArena() == nullptr && coordinates_ != nullptr) {
    delete coordinates_;
  }
  coordinates_ = nullptr;
}
ImageProperties::ImageProperties(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.ImageProperties)
}
ImageProperties::ImageProperties(const ImageProperties& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  camera_source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_camera_source().empty()) {
    camera_source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_camera_source(),
      GetArena());
  }
  frame_name_image_coordinates_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_frame_name_image_coordinates().empty()) {
    frame_name_image_coordinates_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_frame_name_image_coordinates(),
      GetArena());
  }
  if (from._internal_has_coordinates()) {
    coordinates_ = new ::bosdyn::api::Polygon(*from.coordinates_);
  } else {
    coordinates_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.ImageProperties)
}

void ImageProperties::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ImageProperties_bosdyn_2fapi_2fworld_5fobject_2eproto.base);
  camera_source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  frame_name_image_coordinates_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  coordinates_ = nullptr;
}

ImageProperties::~ImageProperties() {
  // @@protoc_insertion_point(destructor:bosdyn.api.ImageProperties)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ImageProperties::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  camera_source_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  frame_name_image_coordinates_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete coordinates_;
}

void ImageProperties::ArenaDtor(void* object) {
  ImageProperties* _this = reinterpret_cast< ImageProperties* >(object);
  (void)_this;
}
void ImageProperties::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImageProperties::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImageProperties& ImageProperties::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ImageProperties_bosdyn_2fapi_2fworld_5fobject_2eproto.base);
  return *internal_default_instance();
}


void ImageProperties::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.ImageProperties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  camera_source_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  frame_name_image_coordinates_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && coordinates_ != nullptr) {
    delete coordinates_;
  }
  coordinates_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageProperties::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string camera_source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_camera_source();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.ImageProperties.camera_source"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.Polygon coordinates = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_coordinates(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string frame_name_image_coordinates = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_frame_name_image_coordinates();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.ImageProperties.frame_name_image_coordinates"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImageProperties::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.ImageProperties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string camera_source = 1;
  if (this->camera_source().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_camera_source().data(), static_cast<int>(this->_internal_camera_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.ImageProperties.camera_source");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_camera_source(), target);
  }

  // .bosdyn.api.Polygon coordinates = 2;
  if (this->has_coordinates()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::coordinates(this), target, stream);
  }

  // string frame_name_image_coordinates = 3;
  if (this->frame_name_image_coordinates().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_frame_name_image_coordinates().data(), static_cast<int>(this->_internal_frame_name_image_coordinates().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.ImageProperties.frame_name_image_coordinates");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_frame_name_image_coordinates(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.ImageProperties)
  return target;
}

size_t ImageProperties::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.ImageProperties)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string camera_source = 1;
  if (this->camera_source().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_camera_source());
  }

  // string frame_name_image_coordinates = 3;
  if (this->frame_name_image_coordinates().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_frame_name_image_coordinates());
  }

  // .bosdyn.api.Polygon coordinates = 2;
  if (this->has_coordinates()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coordinates_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageProperties::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.ImageProperties)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageProperties* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ImageProperties>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.ImageProperties)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.ImageProperties)
    MergeFrom(*source);
  }
}

void ImageProperties::MergeFrom(const ImageProperties& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.ImageProperties)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.camera_source().size() > 0) {
    _internal_set_camera_source(from._internal_camera_source());
  }
  if (from.frame_name_image_coordinates().size() > 0) {
    _internal_set_frame_name_image_coordinates(from._internal_frame_name_image_coordinates());
  }
  if (from.has_coordinates()) {
    _internal_mutable_coordinates()->::bosdyn::api::Polygon::MergeFrom(from._internal_coordinates());
  }
}

void ImageProperties::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.ImageProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageProperties::CopyFrom(const ImageProperties& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.ImageProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageProperties::IsInitialized() const {
  return true;
}

void ImageProperties::InternalSwap(ImageProperties* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  camera_source_.Swap(&other->camera_source_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  frame_name_image_coordinates_.Swap(&other->frame_name_image_coordinates_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(coordinates_, other->coordinates_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageProperties::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AprilTagProperties::InitAsDefaultInstance() {
  ::bosdyn::api::_AprilTagProperties_default_instance_._instance.get_mutable()->dimensions_ = const_cast< ::bosdyn::api::Vec2*>(
      ::bosdyn::api::Vec2::internal_default_instance());
}
class AprilTagProperties::_Internal {
 public:
  static const ::bosdyn::api::Vec2& dimensions(const AprilTagProperties* msg);
};

const ::bosdyn::api::Vec2&
AprilTagProperties::_Internal::dimensions(const AprilTagProperties* msg) {
  return *msg->dimensions_;
}
void AprilTagProperties::clear_dimensions() {
  if (GetArena() == nullptr && dimensions_ != nullptr) {
    delete dimensions_;
  }
  dimensions_ = nullptr;
}
AprilTagProperties::AprilTagProperties(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.AprilTagProperties)
}
AprilTagProperties::AprilTagProperties(const AprilTagProperties& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  frame_name_fiducial_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_frame_name_fiducial().empty()) {
    frame_name_fiducial_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_frame_name_fiducial(),
      GetArena());
  }
  frame_name_fiducial_filtered_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_frame_name_fiducial_filtered().empty()) {
    frame_name_fiducial_filtered_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_frame_name_fiducial_filtered(),
      GetArena());
  }
  if (from._internal_has_dimensions()) {
    dimensions_ = new ::bosdyn::api::Vec2(*from.dimensions_);
  } else {
    dimensions_ = nullptr;
  }
  tag_id_ = from.tag_id_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.AprilTagProperties)
}

void AprilTagProperties::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AprilTagProperties_bosdyn_2fapi_2fworld_5fobject_2eproto.base);
  frame_name_fiducial_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  frame_name_fiducial_filtered_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dimensions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tag_id_) -
      reinterpret_cast<char*>(&dimensions_)) + sizeof(tag_id_));
}

AprilTagProperties::~AprilTagProperties() {
  // @@protoc_insertion_point(destructor:bosdyn.api.AprilTagProperties)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AprilTagProperties::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  frame_name_fiducial_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  frame_name_fiducial_filtered_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete dimensions_;
}

void AprilTagProperties::ArenaDtor(void* object) {
  AprilTagProperties* _this = reinterpret_cast< AprilTagProperties* >(object);
  (void)_this;
}
void AprilTagProperties::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AprilTagProperties::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AprilTagProperties& AprilTagProperties::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AprilTagProperties_bosdyn_2fapi_2fworld_5fobject_2eproto.base);
  return *internal_default_instance();
}


void AprilTagProperties::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.AprilTagProperties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frame_name_fiducial_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  frame_name_fiducial_filtered_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && dimensions_ != nullptr) {
    delete dimensions_;
  }
  dimensions_ = nullptr;
  tag_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AprilTagProperties::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 tag_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          tag_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.Vec2 dimensions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dimensions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string frame_name_fiducial = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_frame_name_fiducial();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.AprilTagProperties.frame_name_fiducial"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string frame_name_fiducial_filtered = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_frame_name_fiducial_filtered();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.AprilTagProperties.frame_name_fiducial_filtered"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AprilTagProperties::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.AprilTagProperties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 tag_id = 1;
  if (this->tag_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_tag_id(), target);
  }

  // .bosdyn.api.Vec2 dimensions = 2;
  if (this->has_dimensions()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::dimensions(this), target, stream);
  }

  // string frame_name_fiducial = 3;
  if (this->frame_name_fiducial().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_frame_name_fiducial().data(), static_cast<int>(this->_internal_frame_name_fiducial().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.AprilTagProperties.frame_name_fiducial");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_frame_name_fiducial(), target);
  }

  // string frame_name_fiducial_filtered = 4;
  if (this->frame_name_fiducial_filtered().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_frame_name_fiducial_filtered().data(), static_cast<int>(this->_internal_frame_name_fiducial_filtered().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.AprilTagProperties.frame_name_fiducial_filtered");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_frame_name_fiducial_filtered(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.AprilTagProperties)
  return target;
}

size_t AprilTagProperties::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.AprilTagProperties)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string frame_name_fiducial = 3;
  if (this->frame_name_fiducial().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_frame_name_fiducial());
  }

  // string frame_name_fiducial_filtered = 4;
  if (this->frame_name_fiducial_filtered().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_frame_name_fiducial_filtered());
  }

  // .bosdyn.api.Vec2 dimensions = 2;
  if (this->has_dimensions()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dimensions_);
  }

  // int32 tag_id = 1;
  if (this->tag_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tag_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AprilTagProperties::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.AprilTagProperties)
  GOOGLE_DCHECK_NE(&from, this);
  const AprilTagProperties* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AprilTagProperties>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.AprilTagProperties)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.AprilTagProperties)
    MergeFrom(*source);
  }
}

void AprilTagProperties::MergeFrom(const AprilTagProperties& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.AprilTagProperties)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.frame_name_fiducial().size() > 0) {
    _internal_set_frame_name_fiducial(from._internal_frame_name_fiducial());
  }
  if (from.frame_name_fiducial_filtered().size() > 0) {
    _internal_set_frame_name_fiducial_filtered(from._internal_frame_name_fiducial_filtered());
  }
  if (from.has_dimensions()) {
    _internal_mutable_dimensions()->::bosdyn::api::Vec2::MergeFrom(from._internal_dimensions());
  }
  if (from.tag_id() != 0) {
    _internal_set_tag_id(from._internal_tag_id());
  }
}

void AprilTagProperties::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.AprilTagProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AprilTagProperties::CopyFrom(const AprilTagProperties& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.AprilTagProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AprilTagProperties::IsInitialized() const {
  return true;
}

void AprilTagProperties::InternalSwap(AprilTagProperties* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  frame_name_fiducial_.Swap(&other->frame_name_fiducial_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  frame_name_fiducial_filtered_.Swap(&other->frame_name_fiducial_filtered_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AprilTagProperties, tag_id_)
      + sizeof(AprilTagProperties::tag_id_)
      - PROTOBUF_FIELD_OFFSET(AprilTagProperties, dimensions_)>(
          reinterpret_cast<char*>(&dimensions_),
          reinterpret_cast<char*>(&other->dimensions_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AprilTagProperties::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DrawableProperties_Color::InitAsDefaultInstance() {
}
class DrawableProperties_Color::_Internal {
 public:
};

DrawableProperties_Color::DrawableProperties_Color(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.DrawableProperties.Color)
}
DrawableProperties_Color::DrawableProperties_Color(const DrawableProperties_Color& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&r_, &from.r_,
    static_cast<size_t>(reinterpret_cast<char*>(&b_) -
    reinterpret_cast<char*>(&r_)) + sizeof(b_));
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.DrawableProperties.Color)
}

void DrawableProperties_Color::SharedCtor() {
  ::memset(&r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&b_) -
      reinterpret_cast<char*>(&r_)) + sizeof(b_));
}

DrawableProperties_Color::~DrawableProperties_Color() {
  // @@protoc_insertion_point(destructor:bosdyn.api.DrawableProperties.Color)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DrawableProperties_Color::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DrawableProperties_Color::ArenaDtor(void* object) {
  DrawableProperties_Color* _this = reinterpret_cast< DrawableProperties_Color* >(object);
  (void)_this;
}
void DrawableProperties_Color::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DrawableProperties_Color::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DrawableProperties_Color& DrawableProperties_Color::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DrawableProperties_Color_bosdyn_2fapi_2fworld_5fobject_2eproto.base);
  return *internal_default_instance();
}


void DrawableProperties_Color::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.DrawableProperties.Color)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&b_) -
      reinterpret_cast<char*>(&r_)) + sizeof(b_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DrawableProperties_Color::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 r = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          r_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 g = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          g_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 b = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double a = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DrawableProperties_Color::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.DrawableProperties.Color)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 r = 1;
  if (this->r() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_r(), target);
  }

  // int32 g = 2;
  if (this->g() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_g(), target);
  }

  // int32 b = 3;
  if (this->b() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_b(), target);
  }

  // double a = 4;
  if (!(this->a() <= 0 && this->a() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_a(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.DrawableProperties.Color)
  return target;
}

size_t DrawableProperties_Color::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.DrawableProperties.Color)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 r = 1;
  if (this->r() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_r());
  }

  // int32 g = 2;
  if (this->g() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_g());
  }

  // double a = 4;
  if (!(this->a() <= 0 && this->a() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 b = 3;
  if (this->b() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_b());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DrawableProperties_Color::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.DrawableProperties.Color)
  GOOGLE_DCHECK_NE(&from, this);
  const DrawableProperties_Color* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DrawableProperties_Color>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.DrawableProperties.Color)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.DrawableProperties.Color)
    MergeFrom(*source);
  }
}

void DrawableProperties_Color::MergeFrom(const DrawableProperties_Color& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.DrawableProperties.Color)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.r() != 0) {
    _internal_set_r(from._internal_r());
  }
  if (from.g() != 0) {
    _internal_set_g(from._internal_g());
  }
  if (!(from.a() <= 0 && from.a() >= 0)) {
    _internal_set_a(from._internal_a());
  }
  if (from.b() != 0) {
    _internal_set_b(from._internal_b());
  }
}

void DrawableProperties_Color::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.DrawableProperties.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrawableProperties_Color::CopyFrom(const DrawableProperties_Color& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.DrawableProperties.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawableProperties_Color::IsInitialized() const {
  return true;
}

void DrawableProperties_Color::InternalSwap(DrawableProperties_Color* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DrawableProperties_Color, b_)
      + sizeof(DrawableProperties_Color::b_)
      - PROTOBUF_FIELD_OFFSET(DrawableProperties_Color, r_)>(
          reinterpret_cast<char*>(&r_),
          reinterpret_cast<char*>(&other->r_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DrawableProperties_Color::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DrawableProperties::InitAsDefaultInstance() {
  ::bosdyn::api::_DrawableProperties_default_instance_._instance.get_mutable()->color_ = const_cast< ::bosdyn::api::DrawableProperties_Color*>(
      ::bosdyn::api::DrawableProperties_Color::internal_default_instance());
  ::bosdyn::api::_DrawableProperties_default_instance_.frame_ = const_cast< ::bosdyn::api::DrawableFrame*>(
      ::bosdyn::api::DrawableFrame::internal_default_instance());
  ::bosdyn::api::_DrawableProperties_default_instance_.sphere_ = const_cast< ::bosdyn::api::DrawableSphere*>(
      ::bosdyn::api::DrawableSphere::internal_default_instance());
  ::bosdyn::api::_DrawableProperties_default_instance_.box_ = const_cast< ::bosdyn::api::DrawableBox*>(
      ::bosdyn::api::DrawableBox::internal_default_instance());
  ::bosdyn::api::_DrawableProperties_default_instance_.arrow_ = const_cast< ::bosdyn::api::DrawableArrow*>(
      ::bosdyn::api::DrawableArrow::internal_default_instance());
  ::bosdyn::api::_DrawableProperties_default_instance_.capsule_ = const_cast< ::bosdyn::api::DrawableCapsule*>(
      ::bosdyn::api::DrawableCapsule::internal_default_instance());
  ::bosdyn::api::_DrawableProperties_default_instance_.cylinder_ = const_cast< ::bosdyn::api::DrawableCylinder*>(
      ::bosdyn::api::DrawableCylinder::internal_default_instance());
  ::bosdyn::api::_DrawableProperties_default_instance_.linestrip_ = const_cast< ::bosdyn::api::DrawableLineStrip*>(
      ::bosdyn::api::DrawableLineStrip::internal_default_instance());
  ::bosdyn::api::_DrawableProperties_default_instance_.points_ = const_cast< ::bosdyn::api::DrawablePoints*>(
      ::bosdyn::api::DrawablePoints::internal_default_instance());
}
class DrawableProperties::_Internal {
 public:
  static const ::bosdyn::api::DrawableProperties_Color& color(const DrawableProperties* msg);
  static const ::bosdyn::api::DrawableFrame& frame(const DrawableProperties* msg);
  static const ::bosdyn::api::DrawableSphere& sphere(const DrawableProperties* msg);
  static const ::bosdyn::api::DrawableBox& box(const DrawableProperties* msg);
  static const ::bosdyn::api::DrawableArrow& arrow(const DrawableProperties* msg);
  static const ::bosdyn::api::DrawableCapsule& capsule(const DrawableProperties* msg);
  static const ::bosdyn::api::DrawableCylinder& cylinder(const DrawableProperties* msg);
  static const ::bosdyn::api::DrawableLineStrip& linestrip(const DrawableProperties* msg);
  static const ::bosdyn::api::DrawablePoints& points(const DrawableProperties* msg);
};

const ::bosdyn::api::DrawableProperties_Color&
DrawableProperties::_Internal::color(const DrawableProperties* msg) {
  return *msg->color_;
}
const ::bosdyn::api::DrawableFrame&
DrawableProperties::_Internal::frame(const DrawableProperties* msg) {
  return *msg->drawable_.frame_;
}
const ::bosdyn::api::DrawableSphere&
DrawableProperties::_Internal::sphere(const DrawableProperties* msg) {
  return *msg->drawable_.sphere_;
}
const ::bosdyn::api::DrawableBox&
DrawableProperties::_Internal::box(const DrawableProperties* msg) {
  return *msg->drawable_.box_;
}
const ::bosdyn::api::DrawableArrow&
DrawableProperties::_Internal::arrow(const DrawableProperties* msg) {
  return *msg->drawable_.arrow_;
}
const ::bosdyn::api::DrawableCapsule&
DrawableProperties::_Internal::capsule(const DrawableProperties* msg) {
  return *msg->drawable_.capsule_;
}
const ::bosdyn::api::DrawableCylinder&
DrawableProperties::_Internal::cylinder(const DrawableProperties* msg) {
  return *msg->drawable_.cylinder_;
}
const ::bosdyn::api::DrawableLineStrip&
DrawableProperties::_Internal::linestrip(const DrawableProperties* msg) {
  return *msg->drawable_.linestrip_;
}
const ::bosdyn::api::DrawablePoints&
DrawableProperties::_Internal::points(const DrawableProperties* msg) {
  return *msg->drawable_.points_;
}
void DrawableProperties::set_allocated_frame(::bosdyn::api::DrawableFrame* frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_drawable();
  if (frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(frame);
    if (message_arena != submessage_arena) {
      frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frame, submessage_arena);
    }
    set_has_frame();
    drawable_.frame_ = frame;
  }
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.DrawableProperties.frame)
}
void DrawableProperties::set_allocated_sphere(::bosdyn::api::DrawableSphere* sphere) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_drawable();
  if (sphere) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sphere);
    if (message_arena != submessage_arena) {
      sphere = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sphere, submessage_arena);
    }
    set_has_sphere();
    drawable_.sphere_ = sphere;
  }
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.DrawableProperties.sphere)
}
void DrawableProperties::set_allocated_box(::bosdyn::api::DrawableBox* box) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_drawable();
  if (box) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(box);
    if (message_arena != submessage_arena) {
      box = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, box, submessage_arena);
    }
    set_has_box();
    drawable_.box_ = box;
  }
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.DrawableProperties.box)
}
void DrawableProperties::set_allocated_arrow(::bosdyn::api::DrawableArrow* arrow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_drawable();
  if (arrow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(arrow);
    if (message_arena != submessage_arena) {
      arrow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arrow, submessage_arena);
    }
    set_has_arrow();
    drawable_.arrow_ = arrow;
  }
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.DrawableProperties.arrow)
}
void DrawableProperties::set_allocated_capsule(::bosdyn::api::DrawableCapsule* capsule) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_drawable();
  if (capsule) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(capsule);
    if (message_arena != submessage_arena) {
      capsule = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capsule, submessage_arena);
    }
    set_has_capsule();
    drawable_.capsule_ = capsule;
  }
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.DrawableProperties.capsule)
}
void DrawableProperties::set_allocated_cylinder(::bosdyn::api::DrawableCylinder* cylinder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_drawable();
  if (cylinder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cylinder);
    if (message_arena != submessage_arena) {
      cylinder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cylinder, submessage_arena);
    }
    set_has_cylinder();
    drawable_.cylinder_ = cylinder;
  }
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.DrawableProperties.cylinder)
}
void DrawableProperties::set_allocated_linestrip(::bosdyn::api::DrawableLineStrip* linestrip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_drawable();
  if (linestrip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(linestrip);
    if (message_arena != submessage_arena) {
      linestrip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linestrip, submessage_arena);
    }
    set_has_linestrip();
    drawable_.linestrip_ = linestrip;
  }
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.DrawableProperties.linestrip)
}
void DrawableProperties::set_allocated_points(::bosdyn::api::DrawablePoints* points) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_drawable();
  if (points) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(points);
    if (message_arena != submessage_arena) {
      points = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, points, submessage_arena);
    }
    set_has_points();
    drawable_.points_ = points;
  }
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.DrawableProperties.points)
}
DrawableProperties::DrawableProperties(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.DrawableProperties)
}
DrawableProperties::DrawableProperties(const DrawableProperties& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_label().empty()) {
    label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_label(),
      GetArena());
  }
  frame_name_drawable_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_frame_name_drawable().empty()) {
    frame_name_drawable_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_frame_name_drawable(),
      GetArena());
  }
  if (from._internal_has_color()) {
    color_ = new ::bosdyn::api::DrawableProperties_Color(*from.color_);
  } else {
    color_ = nullptr;
  }
  wireframe_ = from.wireframe_;
  clear_has_drawable();
  switch (from.drawable_case()) {
    case kFrame: {
      _internal_mutable_frame()->::bosdyn::api::DrawableFrame::MergeFrom(from._internal_frame());
      break;
    }
    case kSphere: {
      _internal_mutable_sphere()->::bosdyn::api::DrawableSphere::MergeFrom(from._internal_sphere());
      break;
    }
    case kBox: {
      _internal_mutable_box()->::bosdyn::api::DrawableBox::MergeFrom(from._internal_box());
      break;
    }
    case kArrow: {
      _internal_mutable_arrow()->::bosdyn::api::DrawableArrow::MergeFrom(from._internal_arrow());
      break;
    }
    case kCapsule: {
      _internal_mutable_capsule()->::bosdyn::api::DrawableCapsule::MergeFrom(from._internal_capsule());
      break;
    }
    case kCylinder: {
      _internal_mutable_cylinder()->::bosdyn::api::DrawableCylinder::MergeFrom(from._internal_cylinder());
      break;
    }
    case kLinestrip: {
      _internal_mutable_linestrip()->::bosdyn::api::DrawableLineStrip::MergeFrom(from._internal_linestrip());
      break;
    }
    case kPoints: {
      _internal_mutable_points()->::bosdyn::api::DrawablePoints::MergeFrom(from._internal_points());
      break;
    }
    case DRAWABLE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.DrawableProperties)
}

void DrawableProperties::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DrawableProperties_bosdyn_2fapi_2fworld_5fobject_2eproto.base);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  frame_name_drawable_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wireframe_) -
      reinterpret_cast<char*>(&color_)) + sizeof(wireframe_));
  clear_has_drawable();
}

DrawableProperties::~DrawableProperties() {
  // @@protoc_insertion_point(destructor:bosdyn.api.DrawableProperties)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DrawableProperties::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  frame_name_drawable_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete color_;
  if (has_drawable()) {
    clear_drawable();
  }
}

void DrawableProperties::ArenaDtor(void* object) {
  DrawableProperties* _this = reinterpret_cast< DrawableProperties* >(object);
  (void)_this;
}
void DrawableProperties::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DrawableProperties::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DrawableProperties& DrawableProperties::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DrawableProperties_bosdyn_2fapi_2fworld_5fobject_2eproto.base);
  return *internal_default_instance();
}


void DrawableProperties::clear_drawable() {
// @@protoc_insertion_point(one_of_clear_start:bosdyn.api.DrawableProperties)
  switch (drawable_case()) {
    case kFrame: {
      if (GetArena() == nullptr) {
        delete drawable_.frame_;
      }
      break;
    }
    case kSphere: {
      if (GetArena() == nullptr) {
        delete drawable_.sphere_;
      }
      break;
    }
    case kBox: {
      if (GetArena() == nullptr) {
        delete drawable_.box_;
      }
      break;
    }
    case kArrow: {
      if (GetArena() == nullptr) {
        delete drawable_.arrow_;
      }
      break;
    }
    case kCapsule: {
      if (GetArena() == nullptr) {
        delete drawable_.capsule_;
      }
      break;
    }
    case kCylinder: {
      if (GetArena() == nullptr) {
        delete drawable_.cylinder_;
      }
      break;
    }
    case kLinestrip: {
      if (GetArena() == nullptr) {
        delete drawable_.linestrip_;
      }
      break;
    }
    case kPoints: {
      if (GetArena() == nullptr) {
        delete drawable_.points_;
      }
      break;
    }
    case DRAWABLE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DRAWABLE_NOT_SET;
}


void DrawableProperties::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.DrawableProperties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  label_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  frame_name_drawable_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && color_ != nullptr) {
    delete color_;
  }
  color_ = nullptr;
  wireframe_ = false;
  clear_drawable();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DrawableProperties::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.DrawableProperties.Color color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string label = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.DrawableProperties.label"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool wireframe = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          wireframe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.DrawableFrame frame = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_frame(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.DrawableSphere sphere = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_sphere(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.DrawableBox box = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_box(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.DrawableArrow arrow = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_arrow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.DrawableCapsule capsule = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_capsule(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.DrawableCylinder cylinder = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_cylinder(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.DrawableLineStrip linestrip = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_linestrip(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.DrawablePoints points = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_points(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string frame_name_drawable = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_frame_name_drawable();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.DrawableProperties.frame_name_drawable"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DrawableProperties::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.DrawableProperties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.DrawableProperties.Color color = 1;
  if (this->has_color()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::color(this), target, stream);
  }

  // string label = 2;
  if (this->label().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.DrawableProperties.label");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_label(), target);
  }

  // bool wireframe = 3;
  if (this->wireframe() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_wireframe(), target);
  }

  // .bosdyn.api.DrawableFrame frame = 4;
  if (_internal_has_frame()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::frame(this), target, stream);
  }

  // .bosdyn.api.DrawableSphere sphere = 5;
  if (_internal_has_sphere()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::sphere(this), target, stream);
  }

  // .bosdyn.api.DrawableBox box = 6;
  if (_internal_has_box()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::box(this), target, stream);
  }

  // .bosdyn.api.DrawableArrow arrow = 7;
  if (_internal_has_arrow()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::arrow(this), target, stream);
  }

  // .bosdyn.api.DrawableCapsule capsule = 8;
  if (_internal_has_capsule()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::capsule(this), target, stream);
  }

  // .bosdyn.api.DrawableCylinder cylinder = 9;
  if (_internal_has_cylinder()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::cylinder(this), target, stream);
  }

  // .bosdyn.api.DrawableLineStrip linestrip = 10;
  if (_internal_has_linestrip()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::linestrip(this), target, stream);
  }

  // .bosdyn.api.DrawablePoints points = 11;
  if (_internal_has_points()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::points(this), target, stream);
  }

  // string frame_name_drawable = 12;
  if (this->frame_name_drawable().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_frame_name_drawable().data(), static_cast<int>(this->_internal_frame_name_drawable().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.DrawableProperties.frame_name_drawable");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_frame_name_drawable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.DrawableProperties)
  return target;
}

size_t DrawableProperties::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.DrawableProperties)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string label = 2;
  if (this->label().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  // string frame_name_drawable = 12;
  if (this->frame_name_drawable().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_frame_name_drawable());
  }

  // .bosdyn.api.DrawableProperties.Color color = 1;
  if (this->has_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *color_);
  }

  // bool wireframe = 3;
  if (this->wireframe() != 0) {
    total_size += 1 + 1;
  }

  switch (drawable_case()) {
    // .bosdyn.api.DrawableFrame frame = 4;
    case kFrame: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *drawable_.frame_);
      break;
    }
    // .bosdyn.api.DrawableSphere sphere = 5;
    case kSphere: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *drawable_.sphere_);
      break;
    }
    // .bosdyn.api.DrawableBox box = 6;
    case kBox: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *drawable_.box_);
      break;
    }
    // .bosdyn.api.DrawableArrow arrow = 7;
    case kArrow: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *drawable_.arrow_);
      break;
    }
    // .bosdyn.api.DrawableCapsule capsule = 8;
    case kCapsule: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *drawable_.capsule_);
      break;
    }
    // .bosdyn.api.DrawableCylinder cylinder = 9;
    case kCylinder: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *drawable_.cylinder_);
      break;
    }
    // .bosdyn.api.DrawableLineStrip linestrip = 10;
    case kLinestrip: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *drawable_.linestrip_);
      break;
    }
    // .bosdyn.api.DrawablePoints points = 11;
    case kPoints: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *drawable_.points_);
      break;
    }
    case DRAWABLE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DrawableProperties::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.DrawableProperties)
  GOOGLE_DCHECK_NE(&from, this);
  const DrawableProperties* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DrawableProperties>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.DrawableProperties)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.DrawableProperties)
    MergeFrom(*source);
  }
}

void DrawableProperties::MergeFrom(const DrawableProperties& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.DrawableProperties)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.label().size() > 0) {
    _internal_set_label(from._internal_label());
  }
  if (from.frame_name_drawable().size() > 0) {
    _internal_set_frame_name_drawable(from._internal_frame_name_drawable());
  }
  if (from.has_color()) {
    _internal_mutable_color()->::bosdyn::api::DrawableProperties_Color::MergeFrom(from._internal_color());
  }
  if (from.wireframe() != 0) {
    _internal_set_wireframe(from._internal_wireframe());
  }
  switch (from.drawable_case()) {
    case kFrame: {
      _internal_mutable_frame()->::bosdyn::api::DrawableFrame::MergeFrom(from._internal_frame());
      break;
    }
    case kSphere: {
      _internal_mutable_sphere()->::bosdyn::api::DrawableSphere::MergeFrom(from._internal_sphere());
      break;
    }
    case kBox: {
      _internal_mutable_box()->::bosdyn::api::DrawableBox::MergeFrom(from._internal_box());
      break;
    }
    case kArrow: {
      _internal_mutable_arrow()->::bosdyn::api::DrawableArrow::MergeFrom(from._internal_arrow());
      break;
    }
    case kCapsule: {
      _internal_mutable_capsule()->::bosdyn::api::DrawableCapsule::MergeFrom(from._internal_capsule());
      break;
    }
    case kCylinder: {
      _internal_mutable_cylinder()->::bosdyn::api::DrawableCylinder::MergeFrom(from._internal_cylinder());
      break;
    }
    case kLinestrip: {
      _internal_mutable_linestrip()->::bosdyn::api::DrawableLineStrip::MergeFrom(from._internal_linestrip());
      break;
    }
    case kPoints: {
      _internal_mutable_points()->::bosdyn::api::DrawablePoints::MergeFrom(from._internal_points());
      break;
    }
    case DRAWABLE_NOT_SET: {
      break;
    }
  }
}

void DrawableProperties::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.DrawableProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrawableProperties::CopyFrom(const DrawableProperties& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.DrawableProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawableProperties::IsInitialized() const {
  return true;
}

void DrawableProperties::InternalSwap(DrawableProperties* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  frame_name_drawable_.Swap(&other->frame_name_drawable_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DrawableProperties, wireframe_)
      + sizeof(DrawableProperties::wireframe_)
      - PROTOBUF_FIELD_OFFSET(DrawableProperties, color_)>(
          reinterpret_cast<char*>(&color_),
          reinterpret_cast<char*>(&other->color_));
  swap(drawable_, other->drawable_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DrawableProperties::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DrawableFrame::InitAsDefaultInstance() {
}
class DrawableFrame::_Internal {
 public:
};

DrawableFrame::DrawableFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.DrawableFrame)
}
DrawableFrame::DrawableFrame(const DrawableFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&arrow_length_, &from.arrow_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&arrow_radius_) -
    reinterpret_cast<char*>(&arrow_length_)) + sizeof(arrow_radius_));
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.DrawableFrame)
}

void DrawableFrame::SharedCtor() {
  ::memset(&arrow_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&arrow_radius_) -
      reinterpret_cast<char*>(&arrow_length_)) + sizeof(arrow_radius_));
}

DrawableFrame::~DrawableFrame() {
  // @@protoc_insertion_point(destructor:bosdyn.api.DrawableFrame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DrawableFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DrawableFrame::ArenaDtor(void* object) {
  DrawableFrame* _this = reinterpret_cast< DrawableFrame* >(object);
  (void)_this;
}
void DrawableFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DrawableFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DrawableFrame& DrawableFrame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DrawableFrame_bosdyn_2fapi_2fworld_5fobject_2eproto.base);
  return *internal_default_instance();
}


void DrawableFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.DrawableFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&arrow_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&arrow_radius_) -
      reinterpret_cast<char*>(&arrow_length_)) + sizeof(arrow_radius_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DrawableFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double arrow_length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          arrow_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double arrow_radius = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          arrow_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DrawableFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.DrawableFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double arrow_length = 1;
  if (!(this->arrow_length() <= 0 && this->arrow_length() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_arrow_length(), target);
  }

  // double arrow_radius = 2;
  if (!(this->arrow_radius() <= 0 && this->arrow_radius() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_arrow_radius(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.DrawableFrame)
  return target;
}

size_t DrawableFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.DrawableFrame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double arrow_length = 1;
  if (!(this->arrow_length() <= 0 && this->arrow_length() >= 0)) {
    total_size += 1 + 8;
  }

  // double arrow_radius = 2;
  if (!(this->arrow_radius() <= 0 && this->arrow_radius() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DrawableFrame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.DrawableFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const DrawableFrame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DrawableFrame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.DrawableFrame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.DrawableFrame)
    MergeFrom(*source);
  }
}

void DrawableFrame::MergeFrom(const DrawableFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.DrawableFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.arrow_length() <= 0 && from.arrow_length() >= 0)) {
    _internal_set_arrow_length(from._internal_arrow_length());
  }
  if (!(from.arrow_radius() <= 0 && from.arrow_radius() >= 0)) {
    _internal_set_arrow_radius(from._internal_arrow_radius());
  }
}

void DrawableFrame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.DrawableFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrawableFrame::CopyFrom(const DrawableFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.DrawableFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawableFrame::IsInitialized() const {
  return true;
}

void DrawableFrame::InternalSwap(DrawableFrame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DrawableFrame, arrow_radius_)
      + sizeof(DrawableFrame::arrow_radius_)
      - PROTOBUF_FIELD_OFFSET(DrawableFrame, arrow_length_)>(
          reinterpret_cast<char*>(&arrow_length_),
          reinterpret_cast<char*>(&other->arrow_length_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DrawableFrame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DrawableSphere::InitAsDefaultInstance() {
}
class DrawableSphere::_Internal {
 public:
};

DrawableSphere::DrawableSphere(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.DrawableSphere)
}
DrawableSphere::DrawableSphere(const DrawableSphere& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  radius_ = from.radius_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.DrawableSphere)
}

void DrawableSphere::SharedCtor() {
  radius_ = 0;
}

DrawableSphere::~DrawableSphere() {
  // @@protoc_insertion_point(destructor:bosdyn.api.DrawableSphere)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DrawableSphere::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DrawableSphere::ArenaDtor(void* object) {
  DrawableSphere* _this = reinterpret_cast< DrawableSphere* >(object);
  (void)_this;
}
void DrawableSphere::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DrawableSphere::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DrawableSphere& DrawableSphere::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DrawableSphere_bosdyn_2fapi_2fworld_5fobject_2eproto.base);
  return *internal_default_instance();
}


void DrawableSphere::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.DrawableSphere)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  radius_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DrawableSphere::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double radius = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DrawableSphere::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.DrawableSphere)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double radius = 1;
  if (!(this->radius() <= 0 && this->radius() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_radius(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.DrawableSphere)
  return target;
}

size_t DrawableSphere::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.DrawableSphere)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double radius = 1;
  if (!(this->radius() <= 0 && this->radius() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DrawableSphere::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.DrawableSphere)
  GOOGLE_DCHECK_NE(&from, this);
  const DrawableSphere* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DrawableSphere>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.DrawableSphere)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.DrawableSphere)
    MergeFrom(*source);
  }
}

void DrawableSphere::MergeFrom(const DrawableSphere& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.DrawableSphere)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.radius() <= 0 && from.radius() >= 0)) {
    _internal_set_radius(from._internal_radius());
  }
}

void DrawableSphere::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.DrawableSphere)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrawableSphere::CopyFrom(const DrawableSphere& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.DrawableSphere)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawableSphere::IsInitialized() const {
  return true;
}

void DrawableSphere::InternalSwap(DrawableSphere* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(radius_, other->radius_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DrawableSphere::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DrawableBox::InitAsDefaultInstance() {
  ::bosdyn::api::_DrawableBox_default_instance_._instance.get_mutable()->size_ = const_cast< ::bosdyn::api::Vec3*>(
      ::bosdyn::api::Vec3::internal_default_instance());
}
class DrawableBox::_Internal {
 public:
  static const ::bosdyn::api::Vec3& size(const DrawableBox* msg);
};

const ::bosdyn::api::Vec3&
DrawableBox::_Internal::size(const DrawableBox* msg) {
  return *msg->size_;
}
void DrawableBox::clear_size() {
  if (GetArena() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
}
DrawableBox::DrawableBox(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.DrawableBox)
}
DrawableBox::DrawableBox(const DrawableBox& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_size()) {
    size_ = new ::bosdyn::api::Vec3(*from.size_);
  } else {
    size_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.DrawableBox)
}

void DrawableBox::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DrawableBox_bosdyn_2fapi_2fworld_5fobject_2eproto.base);
  size_ = nullptr;
}

DrawableBox::~DrawableBox() {
  // @@protoc_insertion_point(destructor:bosdyn.api.DrawableBox)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DrawableBox::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete size_;
}

void DrawableBox::ArenaDtor(void* object) {
  DrawableBox* _this = reinterpret_cast< DrawableBox* >(object);
  (void)_this;
}
void DrawableBox::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DrawableBox::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DrawableBox& DrawableBox::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DrawableBox_bosdyn_2fapi_2fworld_5fobject_2eproto.base);
  return *internal_default_instance();
}


void DrawableBox::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.DrawableBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DrawableBox::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.Vec3 size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DrawableBox::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.DrawableBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.Vec3 size = 1;
  if (this->has_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::size(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.DrawableBox)
  return target;
}

size_t DrawableBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.DrawableBox)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.Vec3 size = 1;
  if (this->has_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *size_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DrawableBox::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.DrawableBox)
  GOOGLE_DCHECK_NE(&from, this);
  const DrawableBox* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DrawableBox>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.DrawableBox)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.DrawableBox)
    MergeFrom(*source);
  }
}

void DrawableBox::MergeFrom(const DrawableBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.DrawableBox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_size()) {
    _internal_mutable_size()->::bosdyn::api::Vec3::MergeFrom(from._internal_size());
  }
}

void DrawableBox::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.DrawableBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrawableBox::CopyFrom(const DrawableBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.DrawableBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawableBox::IsInitialized() const {
  return true;
}

void DrawableBox::InternalSwap(DrawableBox* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(size_, other->size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DrawableBox::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DrawableArrow::InitAsDefaultInstance() {
  ::bosdyn::api::_DrawableArrow_default_instance_._instance.get_mutable()->direction_ = const_cast< ::bosdyn::api::Vec3*>(
      ::bosdyn::api::Vec3::internal_default_instance());
}
class DrawableArrow::_Internal {
 public:
  static const ::bosdyn::api::Vec3& direction(const DrawableArrow* msg);
};

const ::bosdyn::api::Vec3&
DrawableArrow::_Internal::direction(const DrawableArrow* msg) {
  return *msg->direction_;
}
void DrawableArrow::clear_direction() {
  if (GetArena() == nullptr && direction_ != nullptr) {
    delete direction_;
  }
  direction_ = nullptr;
}
DrawableArrow::DrawableArrow(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.DrawableArrow)
}
DrawableArrow::DrawableArrow(const DrawableArrow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_direction()) {
    direction_ = new ::bosdyn::api::Vec3(*from.direction_);
  } else {
    direction_ = nullptr;
  }
  radius_ = from.radius_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.DrawableArrow)
}

void DrawableArrow::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DrawableArrow_bosdyn_2fapi_2fworld_5fobject_2eproto.base);
  ::memset(&direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radius_) -
      reinterpret_cast<char*>(&direction_)) + sizeof(radius_));
}

DrawableArrow::~DrawableArrow() {
  // @@protoc_insertion_point(destructor:bosdyn.api.DrawableArrow)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DrawableArrow::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete direction_;
}

void DrawableArrow::ArenaDtor(void* object) {
  DrawableArrow* _this = reinterpret_cast< DrawableArrow* >(object);
  (void)_this;
}
void DrawableArrow::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DrawableArrow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DrawableArrow& DrawableArrow::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DrawableArrow_bosdyn_2fapi_2fworld_5fobject_2eproto.base);
  return *internal_default_instance();
}


void DrawableArrow::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.DrawableArrow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && direction_ != nullptr) {
    delete direction_;
  }
  direction_ = nullptr;
  radius_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DrawableArrow::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.Vec3 direction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_direction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double radius = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DrawableArrow::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.DrawableArrow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.Vec3 direction = 1;
  if (this->has_direction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::direction(this), target, stream);
  }

  // double radius = 2;
  if (!(this->radius() <= 0 && this->radius() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_radius(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.DrawableArrow)
  return target;
}

size_t DrawableArrow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.DrawableArrow)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.Vec3 direction = 1;
  if (this->has_direction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *direction_);
  }

  // double radius = 2;
  if (!(this->radius() <= 0 && this->radius() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DrawableArrow::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.DrawableArrow)
  GOOGLE_DCHECK_NE(&from, this);
  const DrawableArrow* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DrawableArrow>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.DrawableArrow)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.DrawableArrow)
    MergeFrom(*source);
  }
}

void DrawableArrow::MergeFrom(const DrawableArrow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.DrawableArrow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_direction()) {
    _internal_mutable_direction()->::bosdyn::api::Vec3::MergeFrom(from._internal_direction());
  }
  if (!(from.radius() <= 0 && from.radius() >= 0)) {
    _internal_set_radius(from._internal_radius());
  }
}

void DrawableArrow::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.DrawableArrow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrawableArrow::CopyFrom(const DrawableArrow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.DrawableArrow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawableArrow::IsInitialized() const {
  return true;
}

void DrawableArrow::InternalSwap(DrawableArrow* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DrawableArrow, radius_)
      + sizeof(DrawableArrow::radius_)
      - PROTOBUF_FIELD_OFFSET(DrawableArrow, direction_)>(
          reinterpret_cast<char*>(&direction_),
          reinterpret_cast<char*>(&other->direction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DrawableArrow::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DrawableCapsule::InitAsDefaultInstance() {
  ::bosdyn::api::_DrawableCapsule_default_instance_._instance.get_mutable()->direction_ = const_cast< ::bosdyn::api::Vec3*>(
      ::bosdyn::api::Vec3::internal_default_instance());
}
class DrawableCapsule::_Internal {
 public:
  static const ::bosdyn::api::Vec3& direction(const DrawableCapsule* msg);
};

const ::bosdyn::api::Vec3&
DrawableCapsule::_Internal::direction(const DrawableCapsule* msg) {
  return *msg->direction_;
}
void DrawableCapsule::clear_direction() {
  if (GetArena() == nullptr && direction_ != nullptr) {
    delete direction_;
  }
  direction_ = nullptr;
}
DrawableCapsule::DrawableCapsule(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.DrawableCapsule)
}
DrawableCapsule::DrawableCapsule(const DrawableCapsule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_direction()) {
    direction_ = new ::bosdyn::api::Vec3(*from.direction_);
  } else {
    direction_ = nullptr;
  }
  radius_ = from.radius_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.DrawableCapsule)
}

void DrawableCapsule::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DrawableCapsule_bosdyn_2fapi_2fworld_5fobject_2eproto.base);
  ::memset(&direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radius_) -
      reinterpret_cast<char*>(&direction_)) + sizeof(radius_));
}

DrawableCapsule::~DrawableCapsule() {
  // @@protoc_insertion_point(destructor:bosdyn.api.DrawableCapsule)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DrawableCapsule::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete direction_;
}

void DrawableCapsule::ArenaDtor(void* object) {
  DrawableCapsule* _this = reinterpret_cast< DrawableCapsule* >(object);
  (void)_this;
}
void DrawableCapsule::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DrawableCapsule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DrawableCapsule& DrawableCapsule::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DrawableCapsule_bosdyn_2fapi_2fworld_5fobject_2eproto.base);
  return *internal_default_instance();
}


void DrawableCapsule::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.DrawableCapsule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && direction_ != nullptr) {
    delete direction_;
  }
  direction_ = nullptr;
  radius_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DrawableCapsule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.Vec3 direction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_direction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double radius = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DrawableCapsule::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.DrawableCapsule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.Vec3 direction = 1;
  if (this->has_direction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::direction(this), target, stream);
  }

  // double radius = 2;
  if (!(this->radius() <= 0 && this->radius() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_radius(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.DrawableCapsule)
  return target;
}

size_t DrawableCapsule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.DrawableCapsule)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.Vec3 direction = 1;
  if (this->has_direction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *direction_);
  }

  // double radius = 2;
  if (!(this->radius() <= 0 && this->radius() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DrawableCapsule::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.DrawableCapsule)
  GOOGLE_DCHECK_NE(&from, this);
  const DrawableCapsule* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DrawableCapsule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.DrawableCapsule)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.DrawableCapsule)
    MergeFrom(*source);
  }
}

void DrawableCapsule::MergeFrom(const DrawableCapsule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.DrawableCapsule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_direction()) {
    _internal_mutable_direction()->::bosdyn::api::Vec3::MergeFrom(from._internal_direction());
  }
  if (!(from.radius() <= 0 && from.radius() >= 0)) {
    _internal_set_radius(from._internal_radius());
  }
}

void DrawableCapsule::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.DrawableCapsule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrawableCapsule::CopyFrom(const DrawableCapsule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.DrawableCapsule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawableCapsule::IsInitialized() const {
  return true;
}

void DrawableCapsule::InternalSwap(DrawableCapsule* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DrawableCapsule, radius_)
      + sizeof(DrawableCapsule::radius_)
      - PROTOBUF_FIELD_OFFSET(DrawableCapsule, direction_)>(
          reinterpret_cast<char*>(&direction_),
          reinterpret_cast<char*>(&other->direction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DrawableCapsule::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DrawableCylinder::InitAsDefaultInstance() {
  ::bosdyn::api::_DrawableCylinder_default_instance_._instance.get_mutable()->direction_ = const_cast< ::bosdyn::api::Vec3*>(
      ::bosdyn::api::Vec3::internal_default_instance());
}
class DrawableCylinder::_Internal {
 public:
  static const ::bosdyn::api::Vec3& direction(const DrawableCylinder* msg);
};

const ::bosdyn::api::Vec3&
DrawableCylinder::_Internal::direction(const DrawableCylinder* msg) {
  return *msg->direction_;
}
void DrawableCylinder::clear_direction() {
  if (GetArena() == nullptr && direction_ != nullptr) {
    delete direction_;
  }
  direction_ = nullptr;
}
DrawableCylinder::DrawableCylinder(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.DrawableCylinder)
}
DrawableCylinder::DrawableCylinder(const DrawableCylinder& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_direction()) {
    direction_ = new ::bosdyn::api::Vec3(*from.direction_);
  } else {
    direction_ = nullptr;
  }
  radius_ = from.radius_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.DrawableCylinder)
}

void DrawableCylinder::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DrawableCylinder_bosdyn_2fapi_2fworld_5fobject_2eproto.base);
  ::memset(&direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radius_) -
      reinterpret_cast<char*>(&direction_)) + sizeof(radius_));
}

DrawableCylinder::~DrawableCylinder() {
  // @@protoc_insertion_point(destructor:bosdyn.api.DrawableCylinder)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DrawableCylinder::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete direction_;
}

void DrawableCylinder::ArenaDtor(void* object) {
  DrawableCylinder* _this = reinterpret_cast< DrawableCylinder* >(object);
  (void)_this;
}
void DrawableCylinder::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DrawableCylinder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DrawableCylinder& DrawableCylinder::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DrawableCylinder_bosdyn_2fapi_2fworld_5fobject_2eproto.base);
  return *internal_default_instance();
}


void DrawableCylinder::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.DrawableCylinder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && direction_ != nullptr) {
    delete direction_;
  }
  direction_ = nullptr;
  radius_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DrawableCylinder::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.Vec3 direction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_direction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double radius = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DrawableCylinder::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.DrawableCylinder)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.Vec3 direction = 1;
  if (this->has_direction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::direction(this), target, stream);
  }

  // double radius = 2;
  if (!(this->radius() <= 0 && this->radius() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_radius(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.DrawableCylinder)
  return target;
}

size_t DrawableCylinder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.DrawableCylinder)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.Vec3 direction = 1;
  if (this->has_direction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *direction_);
  }

  // double radius = 2;
  if (!(this->radius() <= 0 && this->radius() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DrawableCylinder::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.DrawableCylinder)
  GOOGLE_DCHECK_NE(&from, this);
  const DrawableCylinder* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DrawableCylinder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.DrawableCylinder)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.DrawableCylinder)
    MergeFrom(*source);
  }
}

void DrawableCylinder::MergeFrom(const DrawableCylinder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.DrawableCylinder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_direction()) {
    _internal_mutable_direction()->::bosdyn::api::Vec3::MergeFrom(from._internal_direction());
  }
  if (!(from.radius() <= 0 && from.radius() >= 0)) {
    _internal_set_radius(from._internal_radius());
  }
}

void DrawableCylinder::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.DrawableCylinder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrawableCylinder::CopyFrom(const DrawableCylinder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.DrawableCylinder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawableCylinder::IsInitialized() const {
  return true;
}

void DrawableCylinder::InternalSwap(DrawableCylinder* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DrawableCylinder, radius_)
      + sizeof(DrawableCylinder::radius_)
      - PROTOBUF_FIELD_OFFSET(DrawableCylinder, direction_)>(
          reinterpret_cast<char*>(&direction_),
          reinterpret_cast<char*>(&other->direction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DrawableCylinder::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DrawableLineStrip::InitAsDefaultInstance() {
  ::bosdyn::api::_DrawableLineStrip_default_instance_._instance.get_mutable()->points_ = const_cast< ::bosdyn::api::Vec3*>(
      ::bosdyn::api::Vec3::internal_default_instance());
}
class DrawableLineStrip::_Internal {
 public:
  static const ::bosdyn::api::Vec3& points(const DrawableLineStrip* msg);
};

const ::bosdyn::api::Vec3&
DrawableLineStrip::_Internal::points(const DrawableLineStrip* msg) {
  return *msg->points_;
}
void DrawableLineStrip::clear_points() {
  if (GetArena() == nullptr && points_ != nullptr) {
    delete points_;
  }
  points_ = nullptr;
}
DrawableLineStrip::DrawableLineStrip(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.DrawableLineStrip)
}
DrawableLineStrip::DrawableLineStrip(const DrawableLineStrip& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_points()) {
    points_ = new ::bosdyn::api::Vec3(*from.points_);
  } else {
    points_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.DrawableLineStrip)
}

void DrawableLineStrip::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DrawableLineStrip_bosdyn_2fapi_2fworld_5fobject_2eproto.base);
  points_ = nullptr;
}

DrawableLineStrip::~DrawableLineStrip() {
  // @@protoc_insertion_point(destructor:bosdyn.api.DrawableLineStrip)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DrawableLineStrip::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete points_;
}

void DrawableLineStrip::ArenaDtor(void* object) {
  DrawableLineStrip* _this = reinterpret_cast< DrawableLineStrip* >(object);
  (void)_this;
}
void DrawableLineStrip::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DrawableLineStrip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DrawableLineStrip& DrawableLineStrip::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DrawableLineStrip_bosdyn_2fapi_2fworld_5fobject_2eproto.base);
  return *internal_default_instance();
}


void DrawableLineStrip::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.DrawableLineStrip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && points_ != nullptr) {
    delete points_;
  }
  points_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DrawableLineStrip::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.Vec3 points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_points(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DrawableLineStrip::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.DrawableLineStrip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.Vec3 points = 1;
  if (this->has_points()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::points(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.DrawableLineStrip)
  return target;
}

size_t DrawableLineStrip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.DrawableLineStrip)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.Vec3 points = 1;
  if (this->has_points()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *points_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DrawableLineStrip::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.DrawableLineStrip)
  GOOGLE_DCHECK_NE(&from, this);
  const DrawableLineStrip* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DrawableLineStrip>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.DrawableLineStrip)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.DrawableLineStrip)
    MergeFrom(*source);
  }
}

void DrawableLineStrip::MergeFrom(const DrawableLineStrip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.DrawableLineStrip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_points()) {
    _internal_mutable_points()->::bosdyn::api::Vec3::MergeFrom(from._internal_points());
  }
}

void DrawableLineStrip::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.DrawableLineStrip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrawableLineStrip::CopyFrom(const DrawableLineStrip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.DrawableLineStrip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawableLineStrip::IsInitialized() const {
  return true;
}

void DrawableLineStrip::InternalSwap(DrawableLineStrip* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(points_, other->points_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DrawableLineStrip::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DrawablePoints::InitAsDefaultInstance() {
}
class DrawablePoints::_Internal {
 public:
};

void DrawablePoints::clear_points() {
  points_.Clear();
}
DrawablePoints::DrawablePoints(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.DrawablePoints)
}
DrawablePoints::DrawablePoints(const DrawablePoints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      points_(from.points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.DrawablePoints)
}

void DrawablePoints::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DrawablePoints_bosdyn_2fapi_2fworld_5fobject_2eproto.base);
}

DrawablePoints::~DrawablePoints() {
  // @@protoc_insertion_point(destructor:bosdyn.api.DrawablePoints)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DrawablePoints::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DrawablePoints::ArenaDtor(void* object) {
  DrawablePoints* _this = reinterpret_cast< DrawablePoints* >(object);
  (void)_this;
}
void DrawablePoints::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DrawablePoints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DrawablePoints& DrawablePoints::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DrawablePoints_bosdyn_2fapi_2fworld_5fobject_2eproto.base);
  return *internal_default_instance();
}


void DrawablePoints::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.DrawablePoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DrawablePoints::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bosdyn.api.Vec3 points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DrawablePoints::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.DrawablePoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bosdyn.api.Vec3 points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_points(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.DrawablePoints)
  return target;
}

size_t DrawablePoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.DrawablePoints)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bosdyn.api.Vec3 points = 1;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DrawablePoints::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.DrawablePoints)
  GOOGLE_DCHECK_NE(&from, this);
  const DrawablePoints* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DrawablePoints>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.DrawablePoints)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.DrawablePoints)
    MergeFrom(*source);
  }
}

void DrawablePoints::MergeFrom(const DrawablePoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.DrawablePoints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
}

void DrawablePoints::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.DrawablePoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrawablePoints::CopyFrom(const DrawablePoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.DrawablePoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawablePoints::IsInitialized() const {
  return true;
}

void DrawablePoints::InternalSwap(DrawablePoints* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DrawablePoints::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bosdyn::api::WorldObject* Arena::CreateMaybeMessage< ::bosdyn::api::WorldObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::WorldObject >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::ListWorldObjectRequest* Arena::CreateMaybeMessage< ::bosdyn::api::ListWorldObjectRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::ListWorldObjectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::ListWorldObjectResponse* Arena::CreateMaybeMessage< ::bosdyn::api::ListWorldObjectResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::ListWorldObjectResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::MutateWorldObjectRequest_Mutation* Arena::CreateMaybeMessage< ::bosdyn::api::MutateWorldObjectRequest_Mutation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::MutateWorldObjectRequest_Mutation >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::MutateWorldObjectRequest* Arena::CreateMaybeMessage< ::bosdyn::api::MutateWorldObjectRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::MutateWorldObjectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::MutateWorldObjectResponse* Arena::CreateMaybeMessage< ::bosdyn::api::MutateWorldObjectResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::MutateWorldObjectResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::ImageProperties* Arena::CreateMaybeMessage< ::bosdyn::api::ImageProperties >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::ImageProperties >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::AprilTagProperties* Arena::CreateMaybeMessage< ::bosdyn::api::AprilTagProperties >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::AprilTagProperties >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::DrawableProperties_Color* Arena::CreateMaybeMessage< ::bosdyn::api::DrawableProperties_Color >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::DrawableProperties_Color >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::DrawableProperties* Arena::CreateMaybeMessage< ::bosdyn::api::DrawableProperties >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::DrawableProperties >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::DrawableFrame* Arena::CreateMaybeMessage< ::bosdyn::api::DrawableFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::DrawableFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::DrawableSphere* Arena::CreateMaybeMessage< ::bosdyn::api::DrawableSphere >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::DrawableSphere >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::DrawableBox* Arena::CreateMaybeMessage< ::bosdyn::api::DrawableBox >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::DrawableBox >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::DrawableArrow* Arena::CreateMaybeMessage< ::bosdyn::api::DrawableArrow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::DrawableArrow >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::DrawableCapsule* Arena::CreateMaybeMessage< ::bosdyn::api::DrawableCapsule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::DrawableCapsule >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::DrawableCylinder* Arena::CreateMaybeMessage< ::bosdyn::api::DrawableCylinder >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::DrawableCylinder >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::DrawableLineStrip* Arena::CreateMaybeMessage< ::bosdyn::api::DrawableLineStrip >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::DrawableLineStrip >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::DrawablePoints* Arena::CreateMaybeMessage< ::bosdyn::api::DrawablePoints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::DrawablePoints >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
