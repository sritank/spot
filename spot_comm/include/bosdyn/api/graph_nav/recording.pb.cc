// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/graph_nav/recording.proto

#include "bosdyn/api/graph_nav/recording.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2flease_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Lease_bosdyn_2fapi_2flease_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2flease_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LeaseUseResult_bosdyn_2fapi_2flease_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Edge_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Edge_Annotations_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RecordingEnvironment_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Waypoint_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Waypoint_Annotations_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto;
namespace bosdyn {
namespace api {
namespace graph_nav {
class RecordingEnvironmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RecordingEnvironment> _instance;
} _RecordingEnvironment_default_instance_;
class SetRecordingEnvironmentRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRecordingEnvironmentRequest> _instance;
} _SetRecordingEnvironmentRequest_default_instance_;
class SetRecordingEnvironmentResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetRecordingEnvironmentResponse> _instance;
} _SetRecordingEnvironmentResponse_default_instance_;
class StartRecordingRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartRecordingRequest> _instance;
} _StartRecordingRequest_default_instance_;
class StartRecordingResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartRecordingResponse> _instance;
} _StartRecordingResponse_default_instance_;
class StopRecordingRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopRecordingRequest> _instance;
} _StopRecordingRequest_default_instance_;
class StopRecordingResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopRecordingResponse> _instance;
} _StopRecordingResponse_default_instance_;
class CreateWaypointRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateWaypointRequest> _instance;
} _CreateWaypointRequest_default_instance_;
class CreateWaypointResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateWaypointResponse> _instance;
} _CreateWaypointResponse_default_instance_;
class CreateEdgeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateEdgeRequest> _instance;
} _CreateEdgeRequest_default_instance_;
class CreateEdgeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateEdgeResponse> _instance;
} _CreateEdgeResponse_default_instance_;
class GetRecordStatusRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetRecordStatusRequest> _instance;
} _GetRecordStatusRequest_default_instance_;
class GetRecordStatusResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetRecordStatusResponse> _instance;
} _GetRecordStatusResponse_default_instance_;
}  // namespace graph_nav
}  // namespace api
}  // namespace bosdyn
static void InitDefaultsscc_info_CreateEdgeRequest_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::graph_nav::_CreateEdgeRequest_default_instance_;
    new (ptr) ::bosdyn::api::graph_nav::CreateEdgeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::graph_nav::CreateEdgeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CreateEdgeRequest_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_CreateEdgeRequest_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_Edge_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto.base,
      &scc_info_Lease_bosdyn_2fapi_2flease_2eproto.base,}};

static void InitDefaultsscc_info_CreateEdgeResponse_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::graph_nav::_CreateEdgeResponse_default_instance_;
    new (ptr) ::bosdyn::api::graph_nav::CreateEdgeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::graph_nav::CreateEdgeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CreateEdgeResponse_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_CreateEdgeResponse_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_Edge_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto.base,
      &scc_info_LeaseUseResult_bosdyn_2fapi_2flease_2eproto.base,}};

static void InitDefaultsscc_info_CreateWaypointRequest_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::graph_nav::_CreateWaypointRequest_default_instance_;
    new (ptr) ::bosdyn::api::graph_nav::CreateWaypointRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::graph_nav::CreateWaypointRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CreateWaypointRequest_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_CreateWaypointRequest_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_RecordingEnvironment_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto.base,
      &scc_info_Lease_bosdyn_2fapi_2flease_2eproto.base,}};

static void InitDefaultsscc_info_CreateWaypointResponse_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::graph_nav::_CreateWaypointResponse_default_instance_;
    new (ptr) ::bosdyn::api::graph_nav::CreateWaypointResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::graph_nav::CreateWaypointResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_CreateWaypointResponse_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_CreateWaypointResponse_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_Waypoint_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto.base,
      &scc_info_Edge_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto.base,
      &scc_info_LeaseUseResult_bosdyn_2fapi_2flease_2eproto.base,}};

static void InitDefaultsscc_info_GetRecordStatusRequest_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::graph_nav::_GetRecordStatusRequest_default_instance_;
    new (ptr) ::bosdyn::api::graph_nav::GetRecordStatusRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::graph_nav::GetRecordStatusRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetRecordStatusRequest_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetRecordStatusRequest_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_GetRecordStatusResponse_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::graph_nav::_GetRecordStatusResponse_default_instance_;
    new (ptr) ::bosdyn::api::graph_nav::GetRecordStatusResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::graph_nav::GetRecordStatusResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetRecordStatusResponse_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetRecordStatusResponse_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_RecordingEnvironment_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto.base,}};

static void InitDefaultsscc_info_RecordingEnvironment_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::graph_nav::_RecordingEnvironment_default_instance_;
    new (ptr) ::bosdyn::api::graph_nav::RecordingEnvironment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::graph_nav::RecordingEnvironment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RecordingEnvironment_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RecordingEnvironment_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto}, {
      &scc_info_Waypoint_Annotations_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto.base,
      &scc_info_Edge_Annotations_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto.base,}};

static void InitDefaultsscc_info_SetRecordingEnvironmentRequest_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::graph_nav::_SetRecordingEnvironmentRequest_default_instance_;
    new (ptr) ::bosdyn::api::graph_nav::SetRecordingEnvironmentRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::graph_nav::SetRecordingEnvironmentRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SetRecordingEnvironmentRequest_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SetRecordingEnvironmentRequest_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_RecordingEnvironment_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto.base,
      &scc_info_Lease_bosdyn_2fapi_2flease_2eproto.base,}};

static void InitDefaultsscc_info_SetRecordingEnvironmentResponse_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::graph_nav::_SetRecordingEnvironmentResponse_default_instance_;
    new (ptr) ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SetRecordingEnvironmentResponse_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SetRecordingEnvironmentResponse_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_LeaseUseResult_bosdyn_2fapi_2flease_2eproto.base,}};

static void InitDefaultsscc_info_StartRecordingRequest_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::graph_nav::_StartRecordingRequest_default_instance_;
    new (ptr) ::bosdyn::api::graph_nav::StartRecordingRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::graph_nav::StartRecordingRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_StartRecordingRequest_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_StartRecordingRequest_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_Lease_bosdyn_2fapi_2flease_2eproto.base,
      &scc_info_RecordingEnvironment_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto.base,}};

static void InitDefaultsscc_info_StartRecordingResponse_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::graph_nav::_StartRecordingResponse_default_instance_;
    new (ptr) ::bosdyn::api::graph_nav::StartRecordingResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::graph_nav::StartRecordingResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_StartRecordingResponse_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_StartRecordingResponse_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_Waypoint_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto.base,
      &scc_info_LeaseUseResult_bosdyn_2fapi_2flease_2eproto.base,}};

static void InitDefaultsscc_info_StopRecordingRequest_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::graph_nav::_StopRecordingRequest_default_instance_;
    new (ptr) ::bosdyn::api::graph_nav::StopRecordingRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::graph_nav::StopRecordingRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StopRecordingRequest_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_StopRecordingRequest_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_Lease_bosdyn_2fapi_2flease_2eproto.base,}};

static void InitDefaultsscc_info_StopRecordingResponse_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::graph_nav::_StopRecordingResponse_default_instance_;
    new (ptr) ::bosdyn::api::graph_nav::StopRecordingResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::graph_nav::StopRecordingResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StopRecordingResponse_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_StopRecordingResponse_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_LeaseUseResult_bosdyn_2fapi_2flease_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto[13];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::RecordingEnvironment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::RecordingEnvironment, name_prefix_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::RecordingEnvironment, waypoint_environment_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::RecordingEnvironment, edge_environment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::SetRecordingEnvironmentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::SetRecordingEnvironmentRequest, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::SetRecordingEnvironmentRequest, environment_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::SetRecordingEnvironmentRequest, lease_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse, lease_use_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::StartRecordingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::StartRecordingRequest, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::StartRecordingRequest, lease_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::StartRecordingRequest, recording_environment_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::StartRecordingRequest, require_fiducials_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::StartRecordingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::StartRecordingResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::StartRecordingResponse, created_waypoint_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::StartRecordingResponse, lease_use_result_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::StartRecordingResponse, status_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::StartRecordingResponse, missing_fiducials_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::StartRecordingResponse, license_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::StopRecordingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::StopRecordingRequest, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::StopRecordingRequest, lease_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::StopRecordingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::StopRecordingResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::StopRecordingResponse, status_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::StopRecordingResponse, error_waypoint_localized_id_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::StopRecordingResponse, lease_use_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::CreateWaypointRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::CreateWaypointRequest, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::CreateWaypointRequest, waypoint_name_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::CreateWaypointRequest, recording_environment_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::CreateWaypointRequest, lease_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::CreateWaypointRequest, require_fiducials_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::CreateWaypointResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::CreateWaypointResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::CreateWaypointResponse, created_waypoint_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::CreateWaypointResponse, created_edge_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::CreateWaypointResponse, status_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::CreateWaypointResponse, lease_use_result_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::CreateWaypointResponse, missing_fiducials_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::CreateWaypointResponse, license_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::CreateEdgeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::CreateEdgeRequest, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::CreateEdgeRequest, edge_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::CreateEdgeRequest, lease_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::CreateEdgeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::CreateEdgeResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::CreateEdgeResponse, status_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::CreateEdgeResponse, error_existing_edge_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::CreateEdgeResponse, lease_use_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::GetRecordStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::GetRecordStatusRequest, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::GetRecordStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::GetRecordStatusResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::GetRecordStatusResponse, is_recording_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::GetRecordStatusResponse, recording_environment_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::GetRecordStatusResponse, map_state_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::bosdyn::api::graph_nav::RecordingEnvironment)},
  { 8, -1, sizeof(::bosdyn::api::graph_nav::SetRecordingEnvironmentRequest)},
  { 16, -1, sizeof(::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse)},
  { 23, -1, sizeof(::bosdyn::api::graph_nav::StartRecordingRequest)},
  { 32, -1, sizeof(::bosdyn::api::graph_nav::StartRecordingResponse)},
  { 43, -1, sizeof(::bosdyn::api::graph_nav::StopRecordingRequest)},
  { 50, -1, sizeof(::bosdyn::api::graph_nav::StopRecordingResponse)},
  { 59, -1, sizeof(::bosdyn::api::graph_nav::CreateWaypointRequest)},
  { 69, -1, sizeof(::bosdyn::api::graph_nav::CreateWaypointResponse)},
  { 81, -1, sizeof(::bosdyn::api::graph_nav::CreateEdgeRequest)},
  { 89, -1, sizeof(::bosdyn::api::graph_nav::CreateEdgeResponse)},
  { 98, -1, sizeof(::bosdyn::api::graph_nav::GetRecordStatusRequest)},
  { 104, -1, sizeof(::bosdyn::api::graph_nav::GetRecordStatusResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::graph_nav::_RecordingEnvironment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::graph_nav::_SetRecordingEnvironmentRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::graph_nav::_SetRecordingEnvironmentResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::graph_nav::_StartRecordingRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::graph_nav::_StartRecordingResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::graph_nav::_StopRecordingRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::graph_nav::_StopRecordingResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::graph_nav::_CreateWaypointRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::graph_nav::_CreateWaypointResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::graph_nav::_CreateEdgeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::graph_nav::_CreateEdgeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::graph_nav::_GetRecordStatusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::graph_nav::_GetRecordStatusResponse_default_instance_),
};

const char descriptor_table_protodef_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$bosdyn/api/graph_nav/recording.proto\022\024"
  "bosdyn.api.graph_nav\032\027bosdyn/api/header."
  "proto\032\026bosdyn/api/lease.proto\032\030bosdyn/ap"
  "i/license.proto\032\036bosdyn/api/graph_nav/ma"
  "p.proto\"\267\001\n\024RecordingEnvironment\022\023\n\013name"
  "_prefix\030\001 \001(\t\022H\n\024waypoint_environment\030\002 "
  "\001(\0132*.bosdyn.api.graph_nav.Waypoint.Anno"
  "tations\022@\n\020edge_environment\030\003 \001(\0132&.bosd"
  "yn.api.graph_nav.Edge.Annotations\"\256\001\n\036Se"
  "tRecordingEnvironmentRequest\022)\n\006header\030\001"
  " \001(\0132\031.bosdyn.api.RequestHeader\022\?\n\013envir"
  "onment\030\002 \001(\0132*.bosdyn.api.graph_nav.Reco"
  "rdingEnvironment\022 \n\005lease\030\003 \001(\0132\021.bosdyn"
  ".api.Lease\"\203\001\n\037SetRecordingEnvironmentRe"
  "sponse\022*\n\006header\030\001 \001(\0132\032.bosdyn.api.Resp"
  "onseHeader\0224\n\020lease_use_result\030\002 \001(\0132\032.b"
  "osdyn.api.LeaseUseResult\"\312\001\n\025StartRecord"
  "ingRequest\022)\n\006header\030\001 \001(\0132\031.bosdyn.api."
  "RequestHeader\022 \n\005lease\030\002 \001(\0132\021.bosdyn.ap"
  "i.Lease\022I\n\025recording_environment\030\003 \001(\0132*"
  ".bosdyn.api.graph_nav.RecordingEnvironme"
  "nt\022\031\n\021require_fiducials\030\004 \003(\005\"\246\004\n\026StartR"
  "ecordingResponse\022*\n\006header\030\001 \001(\0132\032.bosdy"
  "n.api.ResponseHeader\0228\n\020created_waypoint"
  "\030\002 \001(\0132\036.bosdyn.api.graph_nav.Waypoint\0224"
  "\n\020lease_use_result\030\003 \001(\0132\032.bosdyn.api.Le"
  "aseUseResult\022C\n\006status\030\004 \001(\01623.bosdyn.ap"
  "i.graph_nav.StartRecordingResponse.Statu"
  "s\022\031\n\021missing_fiducials\030\005 \003(\005\0226\n\016license_"
  "status\030\006 \001(\0162\036.bosdyn.api.LicenseInfo.St"
  "atus\"\327\001\n\006Status\022\022\n\016STATUS_UNKNOWN\020\000\022\r\n\tS"
  "TATUS_OK\020\001\022$\n STATUS_COULD_NOT_CREATE_WA"
  "YPOINT\020\002\022\032\n\026STATUS_FOLLOWING_ROUTE\020\003\022(\n$"
  "STATUS_NOT_LOCALIZED_TO_EXISTING_MAP\020\004\022\034"
  "\n\030STATUS_MISSING_FIDUCIALS\020\005\022 \n\034STATUS_M"
  "AP_TOO_LARGE_LICENSE\020\006\"c\n\024StopRecordingR"
  "equest\022)\n\006header\030\001 \001(\0132\031.bosdyn.api.Requ"
  "estHeader\022 \n\005lease\030\002 \001(\0132\021.bosdyn.api.Le"
  "ase\"\312\002\n\025StopRecordingResponse\022*\n\006header\030"
  "\001 \001(\0132\032.bosdyn.api.ResponseHeader\022B\n\006sta"
  "tus\030\002 \001(\01622.bosdyn.api.graph_nav.StopRec"
  "ordingResponse.Status\022#\n\033error_waypoint_"
  "localized_id\030\003 \001(\t\0224\n\020lease_use_result\030\004"
  " \001(\0132\032.bosdyn.api.LeaseUseResult\"f\n\006Stat"
  "us\022\022\n\016STATUS_UNKNOWN\020\000\022\r\n\tSTATUS_OK\020\001\022\037\n"
  "\033STATUS_NOT_LOCALIZED_TO_END\020\002\022\030\n\024STATUS"
  "_NOT_READY_YET\020\003\"\341\001\n\025CreateWaypointReque"
  "st\022)\n\006header\030\001 \001(\0132\031.bosdyn.api.RequestH"
  "eader\022\025\n\rwaypoint_name\030\002 \001(\t\022I\n\025recordin"
  "g_environment\030\003 \001(\0132*.bosdyn.api.graph_n"
  "av.RecordingEnvironment\022 \n\005lease\030\004 \001(\0132\021"
  ".bosdyn.api.Lease\022\031\n\021require_fiducials\030\005"
  " \003(\005\"\254\004\n\026CreateWaypointResponse\022*\n\006heade"
  "r\030\001 \001(\0132\032.bosdyn.api.ResponseHeader\0228\n\020c"
  "reated_waypoint\030\002 \001(\0132\036.bosdyn.api.graph"
  "_nav.Waypoint\0220\n\014created_edge\030\003 \001(\0132\032.bo"
  "sdyn.api.graph_nav.Edge\022C\n\006status\030\005 \001(\0162"
  "3.bosdyn.api.graph_nav.CreateWaypointRes"
  "ponse.Status\0224\n\020lease_use_result\030\004 \001(\0132\032"
  ".bosdyn.api.LeaseUseResult\022\031\n\021missing_fi"
  "ducials\030\006 \003(\005\0226\n\016license_status\030\007 \001(\0162\036."
  "bosdyn.api.LicenseInfo.Status\"\253\001\n\006Status"
  "\022\022\n\016STATUS_UNKNOWN\020\000\022\r\n\tSTATUS_OK\020\001\022\030\n\024S"
  "TATUS_NOT_RECORDING\020\002\022$\n STATUS_COULD_NO"
  "T_CREATE_WAYPOINT\020\003\022\034\n\030STATUS_MISSING_FI"
  "DUCIALS\020\004\022 \n\034STATUS_MAP_TOO_LARGE_LICENS"
  "E\020\005\"\212\001\n\021CreateEdgeRequest\022)\n\006header\030\001 \001("
  "\0132\031.bosdyn.api.RequestHeader\022(\n\004edge\030\002 \001"
  "(\0132\032.bosdyn.api.graph_nav.Edge\022 \n\005lease\030"
  "\003 \001(\0132\021.bosdyn.api.Lease\"\206\003\n\022CreateEdgeR"
  "esponse\022*\n\006header\030\001 \001(\0132\032.bosdyn.api.Res"
  "ponseHeader\022\?\n\006status\030\002 \001(\0162/.bosdyn.api"
  ".graph_nav.CreateEdgeResponse.Status\0227\n\023"
  "error_existing_edge\030\003 \001(\0132\032.bosdyn.api.g"
  "raph_nav.Edge\0224\n\020lease_use_result\030\004 \001(\0132"
  "\032.bosdyn.api.LeaseUseResult\"\223\001\n\006Status\022\022"
  "\n\016STATUS_UNKNOWN\020\000\022\r\n\tSTATUS_OK\020\001\022\021\n\rSTA"
  "TUS_EXISTS\020\002\022\030\n\024STATUS_NOT_RECORDING\020\003\022\033"
  "\n\027STATUS_UNKNOWN_WAYPOINT\020\004\022\034\n\030STATUS_MI"
  "SSING_TRANSFORM\020\005\"C\n\026GetRecordStatusRequ"
  "est\022)\n\006header\030\001 \001(\0132\031.bosdyn.api.Request"
  "Header\"\313\002\n\027GetRecordStatusResponse\022*\n\006he"
  "ader\030\001 \001(\0132\032.bosdyn.api.ResponseHeader\022\024"
  "\n\014is_recording\030\002 \001(\010\022I\n\025recording_enviro"
  "nment\030\003 \001(\0132*.bosdyn.api.graph_nav.Recor"
  "dingEnvironment\022I\n\tmap_state\030\004 \001(\01626.bos"
  "dyn.api.graph_nav.GetRecordStatusRespons"
  "e.MapState\"X\n\010MapState\022\025\n\021MAP_STATE_UNKN"
  "OWN\020\000\022\020\n\014MAP_STATE_OK\020\001\022#\n\037MAP_STATE_TOO"
  "_LARGE_FOR_LICENSE\020\002B\020B\016RecordingProtob\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto_deps[4] = {
  &::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto,
  &::descriptor_table_bosdyn_2fapi_2fheader_2eproto,
  &::descriptor_table_bosdyn_2fapi_2flease_2eproto,
  &::descriptor_table_bosdyn_2fapi_2flicense_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto_sccs[13] = {
  &scc_info_CreateEdgeRequest_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto.base,
  &scc_info_CreateEdgeResponse_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto.base,
  &scc_info_CreateWaypointRequest_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto.base,
  &scc_info_CreateWaypointResponse_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto.base,
  &scc_info_GetRecordStatusRequest_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto.base,
  &scc_info_GetRecordStatusResponse_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto.base,
  &scc_info_RecordingEnvironment_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto.base,
  &scc_info_SetRecordingEnvironmentRequest_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto.base,
  &scc_info_SetRecordingEnvironmentResponse_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto.base,
  &scc_info_StartRecordingRequest_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto.base,
  &scc_info_StartRecordingResponse_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto.base,
  &scc_info_StopRecordingRequest_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto.base,
  &scc_info_StopRecordingResponse_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto = {
  false, false, descriptor_table_protodef_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto, "bosdyn/api/graph_nav/recording.proto", 3606,
  &descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto_once, descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto_sccs, descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto_deps, 13, 4,
  schemas, file_default_instances, TableStruct_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto::offsets,
  file_level_metadata_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto, 13, file_level_enum_descriptors_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto, file_level_service_descriptors_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto)), true);
namespace bosdyn {
namespace api {
namespace graph_nav {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StartRecordingResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto[0];
}
bool StartRecordingResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr StartRecordingResponse_Status StartRecordingResponse::STATUS_UNKNOWN;
constexpr StartRecordingResponse_Status StartRecordingResponse::STATUS_OK;
constexpr StartRecordingResponse_Status StartRecordingResponse::STATUS_COULD_NOT_CREATE_WAYPOINT;
constexpr StartRecordingResponse_Status StartRecordingResponse::STATUS_FOLLOWING_ROUTE;
constexpr StartRecordingResponse_Status StartRecordingResponse::STATUS_NOT_LOCALIZED_TO_EXISTING_MAP;
constexpr StartRecordingResponse_Status StartRecordingResponse::STATUS_MISSING_FIDUCIALS;
constexpr StartRecordingResponse_Status StartRecordingResponse::STATUS_MAP_TOO_LARGE_LICENSE;
constexpr StartRecordingResponse_Status StartRecordingResponse::Status_MIN;
constexpr StartRecordingResponse_Status StartRecordingResponse::Status_MAX;
constexpr int StartRecordingResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StopRecordingResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto[1];
}
bool StopRecordingResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr StopRecordingResponse_Status StopRecordingResponse::STATUS_UNKNOWN;
constexpr StopRecordingResponse_Status StopRecordingResponse::STATUS_OK;
constexpr StopRecordingResponse_Status StopRecordingResponse::STATUS_NOT_LOCALIZED_TO_END;
constexpr StopRecordingResponse_Status StopRecordingResponse::STATUS_NOT_READY_YET;
constexpr StopRecordingResponse_Status StopRecordingResponse::Status_MIN;
constexpr StopRecordingResponse_Status StopRecordingResponse::Status_MAX;
constexpr int StopRecordingResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreateWaypointResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto[2];
}
bool CreateWaypointResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CreateWaypointResponse_Status CreateWaypointResponse::STATUS_UNKNOWN;
constexpr CreateWaypointResponse_Status CreateWaypointResponse::STATUS_OK;
constexpr CreateWaypointResponse_Status CreateWaypointResponse::STATUS_NOT_RECORDING;
constexpr CreateWaypointResponse_Status CreateWaypointResponse::STATUS_COULD_NOT_CREATE_WAYPOINT;
constexpr CreateWaypointResponse_Status CreateWaypointResponse::STATUS_MISSING_FIDUCIALS;
constexpr CreateWaypointResponse_Status CreateWaypointResponse::STATUS_MAP_TOO_LARGE_LICENSE;
constexpr CreateWaypointResponse_Status CreateWaypointResponse::Status_MIN;
constexpr CreateWaypointResponse_Status CreateWaypointResponse::Status_MAX;
constexpr int CreateWaypointResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreateEdgeResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto[3];
}
bool CreateEdgeResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CreateEdgeResponse_Status CreateEdgeResponse::STATUS_UNKNOWN;
constexpr CreateEdgeResponse_Status CreateEdgeResponse::STATUS_OK;
constexpr CreateEdgeResponse_Status CreateEdgeResponse::STATUS_EXISTS;
constexpr CreateEdgeResponse_Status CreateEdgeResponse::STATUS_NOT_RECORDING;
constexpr CreateEdgeResponse_Status CreateEdgeResponse::STATUS_UNKNOWN_WAYPOINT;
constexpr CreateEdgeResponse_Status CreateEdgeResponse::STATUS_MISSING_TRANSFORM;
constexpr CreateEdgeResponse_Status CreateEdgeResponse::Status_MIN;
constexpr CreateEdgeResponse_Status CreateEdgeResponse::Status_MAX;
constexpr int CreateEdgeResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetRecordStatusResponse_MapState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto[4];
}
bool GetRecordStatusResponse_MapState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GetRecordStatusResponse_MapState GetRecordStatusResponse::MAP_STATE_UNKNOWN;
constexpr GetRecordStatusResponse_MapState GetRecordStatusResponse::MAP_STATE_OK;
constexpr GetRecordStatusResponse_MapState GetRecordStatusResponse::MAP_STATE_TOO_LARGE_FOR_LICENSE;
constexpr GetRecordStatusResponse_MapState GetRecordStatusResponse::MapState_MIN;
constexpr GetRecordStatusResponse_MapState GetRecordStatusResponse::MapState_MAX;
constexpr int GetRecordStatusResponse::MapState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void RecordingEnvironment::InitAsDefaultInstance() {
  ::bosdyn::api::graph_nav::_RecordingEnvironment_default_instance_._instance.get_mutable()->waypoint_environment_ = const_cast< ::bosdyn::api::graph_nav::Waypoint_Annotations*>(
      ::bosdyn::api::graph_nav::Waypoint_Annotations::internal_default_instance());
  ::bosdyn::api::graph_nav::_RecordingEnvironment_default_instance_._instance.get_mutable()->edge_environment_ = const_cast< ::bosdyn::api::graph_nav::Edge_Annotations*>(
      ::bosdyn::api::graph_nav::Edge_Annotations::internal_default_instance());
}
class RecordingEnvironment::_Internal {
 public:
  static const ::bosdyn::api::graph_nav::Waypoint_Annotations& waypoint_environment(const RecordingEnvironment* msg);
  static const ::bosdyn::api::graph_nav::Edge_Annotations& edge_environment(const RecordingEnvironment* msg);
};

const ::bosdyn::api::graph_nav::Waypoint_Annotations&
RecordingEnvironment::_Internal::waypoint_environment(const RecordingEnvironment* msg) {
  return *msg->waypoint_environment_;
}
const ::bosdyn::api::graph_nav::Edge_Annotations&
RecordingEnvironment::_Internal::edge_environment(const RecordingEnvironment* msg) {
  return *msg->edge_environment_;
}
void RecordingEnvironment::clear_waypoint_environment() {
  if (GetArena() == nullptr && waypoint_environment_ != nullptr) {
    delete waypoint_environment_;
  }
  waypoint_environment_ = nullptr;
}
void RecordingEnvironment::clear_edge_environment() {
  if (GetArena() == nullptr && edge_environment_ != nullptr) {
    delete edge_environment_;
  }
  edge_environment_ = nullptr;
}
RecordingEnvironment::RecordingEnvironment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.graph_nav.RecordingEnvironment)
}
RecordingEnvironment::RecordingEnvironment(const RecordingEnvironment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name_prefix().empty()) {
    name_prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name_prefix(),
      GetArena());
  }
  if (from._internal_has_waypoint_environment()) {
    waypoint_environment_ = new ::bosdyn::api::graph_nav::Waypoint_Annotations(*from.waypoint_environment_);
  } else {
    waypoint_environment_ = nullptr;
  }
  if (from._internal_has_edge_environment()) {
    edge_environment_ = new ::bosdyn::api::graph_nav::Edge_Annotations(*from.edge_environment_);
  } else {
    edge_environment_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.graph_nav.RecordingEnvironment)
}

void RecordingEnvironment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RecordingEnvironment_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto.base);
  name_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&waypoint_environment_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&edge_environment_) -
      reinterpret_cast<char*>(&waypoint_environment_)) + sizeof(edge_environment_));
}

RecordingEnvironment::~RecordingEnvironment() {
  // @@protoc_insertion_point(destructor:bosdyn.api.graph_nav.RecordingEnvironment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RecordingEnvironment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete waypoint_environment_;
  if (this != internal_default_instance()) delete edge_environment_;
}

void RecordingEnvironment::ArenaDtor(void* object) {
  RecordingEnvironment* _this = reinterpret_cast< RecordingEnvironment* >(object);
  (void)_this;
}
void RecordingEnvironment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecordingEnvironment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecordingEnvironment& RecordingEnvironment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RecordingEnvironment_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto.base);
  return *internal_default_instance();
}


void RecordingEnvironment::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.graph_nav.RecordingEnvironment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_prefix_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && waypoint_environment_ != nullptr) {
    delete waypoint_environment_;
  }
  waypoint_environment_ = nullptr;
  if (GetArena() == nullptr && edge_environment_ != nullptr) {
    delete edge_environment_;
  }
  edge_environment_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordingEnvironment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name_prefix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.graph_nav.RecordingEnvironment.name_prefix"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.graph_nav.Waypoint.Annotations waypoint_environment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_waypoint_environment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.graph_nav.Edge.Annotations edge_environment = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_edge_environment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecordingEnvironment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.graph_nav.RecordingEnvironment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name_prefix = 1;
  if (this->name_prefix().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name_prefix().data(), static_cast<int>(this->_internal_name_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.graph_nav.RecordingEnvironment.name_prefix");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name_prefix(), target);
  }

  // .bosdyn.api.graph_nav.Waypoint.Annotations waypoint_environment = 2;
  if (this->has_waypoint_environment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::waypoint_environment(this), target, stream);
  }

  // .bosdyn.api.graph_nav.Edge.Annotations edge_environment = 3;
  if (this->has_edge_environment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::edge_environment(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.graph_nav.RecordingEnvironment)
  return target;
}

size_t RecordingEnvironment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.graph_nav.RecordingEnvironment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name_prefix = 1;
  if (this->name_prefix().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name_prefix());
  }

  // .bosdyn.api.graph_nav.Waypoint.Annotations waypoint_environment = 2;
  if (this->has_waypoint_environment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *waypoint_environment_);
  }

  // .bosdyn.api.graph_nav.Edge.Annotations edge_environment = 3;
  if (this->has_edge_environment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *edge_environment_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecordingEnvironment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.graph_nav.RecordingEnvironment)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordingEnvironment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecordingEnvironment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.graph_nav.RecordingEnvironment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.graph_nav.RecordingEnvironment)
    MergeFrom(*source);
  }
}

void RecordingEnvironment::MergeFrom(const RecordingEnvironment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.graph_nav.RecordingEnvironment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name_prefix().size() > 0) {
    _internal_set_name_prefix(from._internal_name_prefix());
  }
  if (from.has_waypoint_environment()) {
    _internal_mutable_waypoint_environment()->::bosdyn::api::graph_nav::Waypoint_Annotations::MergeFrom(from._internal_waypoint_environment());
  }
  if (from.has_edge_environment()) {
    _internal_mutable_edge_environment()->::bosdyn::api::graph_nav::Edge_Annotations::MergeFrom(from._internal_edge_environment());
  }
}

void RecordingEnvironment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.graph_nav.RecordingEnvironment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordingEnvironment::CopyFrom(const RecordingEnvironment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.graph_nav.RecordingEnvironment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordingEnvironment::IsInitialized() const {
  return true;
}

void RecordingEnvironment::InternalSwap(RecordingEnvironment* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_prefix_.Swap(&other->name_prefix_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecordingEnvironment, edge_environment_)
      + sizeof(RecordingEnvironment::edge_environment_)
      - PROTOBUF_FIELD_OFFSET(RecordingEnvironment, waypoint_environment_)>(
          reinterpret_cast<char*>(&waypoint_environment_),
          reinterpret_cast<char*>(&other->waypoint_environment_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordingEnvironment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetRecordingEnvironmentRequest::InitAsDefaultInstance() {
  ::bosdyn::api::graph_nav::_SetRecordingEnvironmentRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
  ::bosdyn::api::graph_nav::_SetRecordingEnvironmentRequest_default_instance_._instance.get_mutable()->environment_ = const_cast< ::bosdyn::api::graph_nav::RecordingEnvironment*>(
      ::bosdyn::api::graph_nav::RecordingEnvironment::internal_default_instance());
  ::bosdyn::api::graph_nav::_SetRecordingEnvironmentRequest_default_instance_._instance.get_mutable()->lease_ = const_cast< ::bosdyn::api::Lease*>(
      ::bosdyn::api::Lease::internal_default_instance());
}
class SetRecordingEnvironmentRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const SetRecordingEnvironmentRequest* msg);
  static const ::bosdyn::api::graph_nav::RecordingEnvironment& environment(const SetRecordingEnvironmentRequest* msg);
  static const ::bosdyn::api::Lease& lease(const SetRecordingEnvironmentRequest* msg);
};

const ::bosdyn::api::RequestHeader&
SetRecordingEnvironmentRequest::_Internal::header(const SetRecordingEnvironmentRequest* msg) {
  return *msg->header_;
}
const ::bosdyn::api::graph_nav::RecordingEnvironment&
SetRecordingEnvironmentRequest::_Internal::environment(const SetRecordingEnvironmentRequest* msg) {
  return *msg->environment_;
}
const ::bosdyn::api::Lease&
SetRecordingEnvironmentRequest::_Internal::lease(const SetRecordingEnvironmentRequest* msg) {
  return *msg->lease_;
}
void SetRecordingEnvironmentRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void SetRecordingEnvironmentRequest::clear_lease() {
  if (GetArena() == nullptr && lease_ != nullptr) {
    delete lease_;
  }
  lease_ = nullptr;
}
SetRecordingEnvironmentRequest::SetRecordingEnvironmentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.graph_nav.SetRecordingEnvironmentRequest)
}
SetRecordingEnvironmentRequest::SetRecordingEnvironmentRequest(const SetRecordingEnvironmentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_environment()) {
    environment_ = new ::bosdyn::api::graph_nav::RecordingEnvironment(*from.environment_);
  } else {
    environment_ = nullptr;
  }
  if (from._internal_has_lease()) {
    lease_ = new ::bosdyn::api::Lease(*from.lease_);
  } else {
    lease_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.graph_nav.SetRecordingEnvironmentRequest)
}

void SetRecordingEnvironmentRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetRecordingEnvironmentRequest_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lease_) -
      reinterpret_cast<char*>(&header_)) + sizeof(lease_));
}

SetRecordingEnvironmentRequest::~SetRecordingEnvironmentRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.graph_nav.SetRecordingEnvironmentRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRecordingEnvironmentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete environment_;
  if (this != internal_default_instance()) delete lease_;
}

void SetRecordingEnvironmentRequest::ArenaDtor(void* object) {
  SetRecordingEnvironmentRequest* _this = reinterpret_cast< SetRecordingEnvironmentRequest* >(object);
  (void)_this;
}
void SetRecordingEnvironmentRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRecordingEnvironmentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRecordingEnvironmentRequest& SetRecordingEnvironmentRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRecordingEnvironmentRequest_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto.base);
  return *internal_default_instance();
}


void SetRecordingEnvironmentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.graph_nav.SetRecordingEnvironmentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && environment_ != nullptr) {
    delete environment_;
  }
  environment_ = nullptr;
  if (GetArena() == nullptr && lease_ != nullptr) {
    delete lease_;
  }
  lease_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRecordingEnvironmentRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.graph_nav.RecordingEnvironment environment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_environment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.Lease lease = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_lease(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRecordingEnvironmentRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.graph_nav.SetRecordingEnvironmentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.graph_nav.RecordingEnvironment environment = 2;
  if (this->has_environment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::environment(this), target, stream);
  }

  // .bosdyn.api.Lease lease = 3;
  if (this->has_lease()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::lease(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.graph_nav.SetRecordingEnvironmentRequest)
  return target;
}

size_t SetRecordingEnvironmentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.graph_nav.SetRecordingEnvironmentRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.graph_nav.RecordingEnvironment environment = 2;
  if (this->has_environment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *environment_);
  }

  // .bosdyn.api.Lease lease = 3;
  if (this->has_lease()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lease_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRecordingEnvironmentRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.graph_nav.SetRecordingEnvironmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRecordingEnvironmentRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRecordingEnvironmentRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.graph_nav.SetRecordingEnvironmentRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.graph_nav.SetRecordingEnvironmentRequest)
    MergeFrom(*source);
  }
}

void SetRecordingEnvironmentRequest::MergeFrom(const SetRecordingEnvironmentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.graph_nav.SetRecordingEnvironmentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
  if (from.has_environment()) {
    _internal_mutable_environment()->::bosdyn::api::graph_nav::RecordingEnvironment::MergeFrom(from._internal_environment());
  }
  if (from.has_lease()) {
    _internal_mutable_lease()->::bosdyn::api::Lease::MergeFrom(from._internal_lease());
  }
}

void SetRecordingEnvironmentRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.graph_nav.SetRecordingEnvironmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRecordingEnvironmentRequest::CopyFrom(const SetRecordingEnvironmentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.graph_nav.SetRecordingEnvironmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRecordingEnvironmentRequest::IsInitialized() const {
  return true;
}

void SetRecordingEnvironmentRequest::InternalSwap(SetRecordingEnvironmentRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetRecordingEnvironmentRequest, lease_)
      + sizeof(SetRecordingEnvironmentRequest::lease_)
      - PROTOBUF_FIELD_OFFSET(SetRecordingEnvironmentRequest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRecordingEnvironmentRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetRecordingEnvironmentResponse::InitAsDefaultInstance() {
  ::bosdyn::api::graph_nav::_SetRecordingEnvironmentResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
  ::bosdyn::api::graph_nav::_SetRecordingEnvironmentResponse_default_instance_._instance.get_mutable()->lease_use_result_ = const_cast< ::bosdyn::api::LeaseUseResult*>(
      ::bosdyn::api::LeaseUseResult::internal_default_instance());
}
class SetRecordingEnvironmentResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const SetRecordingEnvironmentResponse* msg);
  static const ::bosdyn::api::LeaseUseResult& lease_use_result(const SetRecordingEnvironmentResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
SetRecordingEnvironmentResponse::_Internal::header(const SetRecordingEnvironmentResponse* msg) {
  return *msg->header_;
}
const ::bosdyn::api::LeaseUseResult&
SetRecordingEnvironmentResponse::_Internal::lease_use_result(const SetRecordingEnvironmentResponse* msg) {
  return *msg->lease_use_result_;
}
void SetRecordingEnvironmentResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void SetRecordingEnvironmentResponse::clear_lease_use_result() {
  if (GetArena() == nullptr && lease_use_result_ != nullptr) {
    delete lease_use_result_;
  }
  lease_use_result_ = nullptr;
}
SetRecordingEnvironmentResponse::SetRecordingEnvironmentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.graph_nav.SetRecordingEnvironmentResponse)
}
SetRecordingEnvironmentResponse::SetRecordingEnvironmentResponse(const SetRecordingEnvironmentResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_lease_use_result()) {
    lease_use_result_ = new ::bosdyn::api::LeaseUseResult(*from.lease_use_result_);
  } else {
    lease_use_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.graph_nav.SetRecordingEnvironmentResponse)
}

void SetRecordingEnvironmentResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetRecordingEnvironmentResponse_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lease_use_result_) -
      reinterpret_cast<char*>(&header_)) + sizeof(lease_use_result_));
}

SetRecordingEnvironmentResponse::~SetRecordingEnvironmentResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.graph_nav.SetRecordingEnvironmentResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetRecordingEnvironmentResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete lease_use_result_;
}

void SetRecordingEnvironmentResponse::ArenaDtor(void* object) {
  SetRecordingEnvironmentResponse* _this = reinterpret_cast< SetRecordingEnvironmentResponse* >(object);
  (void)_this;
}
void SetRecordingEnvironmentResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetRecordingEnvironmentResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetRecordingEnvironmentResponse& SetRecordingEnvironmentResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetRecordingEnvironmentResponse_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto.base);
  return *internal_default_instance();
}


void SetRecordingEnvironmentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.graph_nav.SetRecordingEnvironmentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && lease_use_result_ != nullptr) {
    delete lease_use_result_;
  }
  lease_use_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetRecordingEnvironmentResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.LeaseUseResult lease_use_result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lease_use_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetRecordingEnvironmentResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.graph_nav.SetRecordingEnvironmentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.LeaseUseResult lease_use_result = 2;
  if (this->has_lease_use_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::lease_use_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.graph_nav.SetRecordingEnvironmentResponse)
  return target;
}

size_t SetRecordingEnvironmentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.graph_nav.SetRecordingEnvironmentResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.LeaseUseResult lease_use_result = 2;
  if (this->has_lease_use_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lease_use_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRecordingEnvironmentResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.graph_nav.SetRecordingEnvironmentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetRecordingEnvironmentResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetRecordingEnvironmentResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.graph_nav.SetRecordingEnvironmentResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.graph_nav.SetRecordingEnvironmentResponse)
    MergeFrom(*source);
  }
}

void SetRecordingEnvironmentResponse::MergeFrom(const SetRecordingEnvironmentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.graph_nav.SetRecordingEnvironmentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.has_lease_use_result()) {
    _internal_mutable_lease_use_result()->::bosdyn::api::LeaseUseResult::MergeFrom(from._internal_lease_use_result());
  }
}

void SetRecordingEnvironmentResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.graph_nav.SetRecordingEnvironmentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRecordingEnvironmentResponse::CopyFrom(const SetRecordingEnvironmentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.graph_nav.SetRecordingEnvironmentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRecordingEnvironmentResponse::IsInitialized() const {
  return true;
}

void SetRecordingEnvironmentResponse::InternalSwap(SetRecordingEnvironmentResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetRecordingEnvironmentResponse, lease_use_result_)
      + sizeof(SetRecordingEnvironmentResponse::lease_use_result_)
      - PROTOBUF_FIELD_OFFSET(SetRecordingEnvironmentResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetRecordingEnvironmentResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StartRecordingRequest::InitAsDefaultInstance() {
  ::bosdyn::api::graph_nav::_StartRecordingRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
  ::bosdyn::api::graph_nav::_StartRecordingRequest_default_instance_._instance.get_mutable()->lease_ = const_cast< ::bosdyn::api::Lease*>(
      ::bosdyn::api::Lease::internal_default_instance());
  ::bosdyn::api::graph_nav::_StartRecordingRequest_default_instance_._instance.get_mutable()->recording_environment_ = const_cast< ::bosdyn::api::graph_nav::RecordingEnvironment*>(
      ::bosdyn::api::graph_nav::RecordingEnvironment::internal_default_instance());
}
class StartRecordingRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const StartRecordingRequest* msg);
  static const ::bosdyn::api::Lease& lease(const StartRecordingRequest* msg);
  static const ::bosdyn::api::graph_nav::RecordingEnvironment& recording_environment(const StartRecordingRequest* msg);
};

const ::bosdyn::api::RequestHeader&
StartRecordingRequest::_Internal::header(const StartRecordingRequest* msg) {
  return *msg->header_;
}
const ::bosdyn::api::Lease&
StartRecordingRequest::_Internal::lease(const StartRecordingRequest* msg) {
  return *msg->lease_;
}
const ::bosdyn::api::graph_nav::RecordingEnvironment&
StartRecordingRequest::_Internal::recording_environment(const StartRecordingRequest* msg) {
  return *msg->recording_environment_;
}
void StartRecordingRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void StartRecordingRequest::clear_lease() {
  if (GetArena() == nullptr && lease_ != nullptr) {
    delete lease_;
  }
  lease_ = nullptr;
}
StartRecordingRequest::StartRecordingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  require_fiducials_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.graph_nav.StartRecordingRequest)
}
StartRecordingRequest::StartRecordingRequest(const StartRecordingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      require_fiducials_(from.require_fiducials_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_lease()) {
    lease_ = new ::bosdyn::api::Lease(*from.lease_);
  } else {
    lease_ = nullptr;
  }
  if (from._internal_has_recording_environment()) {
    recording_environment_ = new ::bosdyn::api::graph_nav::RecordingEnvironment(*from.recording_environment_);
  } else {
    recording_environment_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.graph_nav.StartRecordingRequest)
}

void StartRecordingRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StartRecordingRequest_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&recording_environment_) -
      reinterpret_cast<char*>(&header_)) + sizeof(recording_environment_));
}

StartRecordingRequest::~StartRecordingRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.graph_nav.StartRecordingRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StartRecordingRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete lease_;
  if (this != internal_default_instance()) delete recording_environment_;
}

void StartRecordingRequest::ArenaDtor(void* object) {
  StartRecordingRequest* _this = reinterpret_cast< StartRecordingRequest* >(object);
  (void)_this;
}
void StartRecordingRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartRecordingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartRecordingRequest& StartRecordingRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartRecordingRequest_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto.base);
  return *internal_default_instance();
}


void StartRecordingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.graph_nav.StartRecordingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  require_fiducials_.Clear();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && lease_ != nullptr) {
    delete lease_;
  }
  lease_ = nullptr;
  if (GetArena() == nullptr && recording_environment_ != nullptr) {
    delete recording_environment_;
  }
  recording_environment_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartRecordingRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.Lease lease = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lease(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.graph_nav.RecordingEnvironment recording_environment = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_recording_environment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 require_fiducials = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_require_fiducials(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_require_fiducials(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartRecordingRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.graph_nav.StartRecordingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.Lease lease = 2;
  if (this->has_lease()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::lease(this), target, stream);
  }

  // .bosdyn.api.graph_nav.RecordingEnvironment recording_environment = 3;
  if (this->has_recording_environment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::recording_environment(this), target, stream);
  }

  // repeated int32 require_fiducials = 4;
  {
    int byte_size = _require_fiducials_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_require_fiducials(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.graph_nav.StartRecordingRequest)
  return target;
}

size_t StartRecordingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.graph_nav.StartRecordingRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 require_fiducials = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->require_fiducials_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _require_fiducials_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.Lease lease = 2;
  if (this->has_lease()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lease_);
  }

  // .bosdyn.api.graph_nav.RecordingEnvironment recording_environment = 3;
  if (this->has_recording_environment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *recording_environment_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartRecordingRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.graph_nav.StartRecordingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StartRecordingRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartRecordingRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.graph_nav.StartRecordingRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.graph_nav.StartRecordingRequest)
    MergeFrom(*source);
  }
}

void StartRecordingRequest::MergeFrom(const StartRecordingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.graph_nav.StartRecordingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  require_fiducials_.MergeFrom(from.require_fiducials_);
  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
  if (from.has_lease()) {
    _internal_mutable_lease()->::bosdyn::api::Lease::MergeFrom(from._internal_lease());
  }
  if (from.has_recording_environment()) {
    _internal_mutable_recording_environment()->::bosdyn::api::graph_nav::RecordingEnvironment::MergeFrom(from._internal_recording_environment());
  }
}

void StartRecordingRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.graph_nav.StartRecordingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartRecordingRequest::CopyFrom(const StartRecordingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.graph_nav.StartRecordingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartRecordingRequest::IsInitialized() const {
  return true;
}

void StartRecordingRequest::InternalSwap(StartRecordingRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  require_fiducials_.InternalSwap(&other->require_fiducials_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StartRecordingRequest, recording_environment_)
      + sizeof(StartRecordingRequest::recording_environment_)
      - PROTOBUF_FIELD_OFFSET(StartRecordingRequest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StartRecordingRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StartRecordingResponse::InitAsDefaultInstance() {
  ::bosdyn::api::graph_nav::_StartRecordingResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
  ::bosdyn::api::graph_nav::_StartRecordingResponse_default_instance_._instance.get_mutable()->created_waypoint_ = const_cast< ::bosdyn::api::graph_nav::Waypoint*>(
      ::bosdyn::api::graph_nav::Waypoint::internal_default_instance());
  ::bosdyn::api::graph_nav::_StartRecordingResponse_default_instance_._instance.get_mutable()->lease_use_result_ = const_cast< ::bosdyn::api::LeaseUseResult*>(
      ::bosdyn::api::LeaseUseResult::internal_default_instance());
}
class StartRecordingResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const StartRecordingResponse* msg);
  static const ::bosdyn::api::graph_nav::Waypoint& created_waypoint(const StartRecordingResponse* msg);
  static const ::bosdyn::api::LeaseUseResult& lease_use_result(const StartRecordingResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
StartRecordingResponse::_Internal::header(const StartRecordingResponse* msg) {
  return *msg->header_;
}
const ::bosdyn::api::graph_nav::Waypoint&
StartRecordingResponse::_Internal::created_waypoint(const StartRecordingResponse* msg) {
  return *msg->created_waypoint_;
}
const ::bosdyn::api::LeaseUseResult&
StartRecordingResponse::_Internal::lease_use_result(const StartRecordingResponse* msg) {
  return *msg->lease_use_result_;
}
void StartRecordingResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void StartRecordingResponse::clear_created_waypoint() {
  if (GetArena() == nullptr && created_waypoint_ != nullptr) {
    delete created_waypoint_;
  }
  created_waypoint_ = nullptr;
}
void StartRecordingResponse::clear_lease_use_result() {
  if (GetArena() == nullptr && lease_use_result_ != nullptr) {
    delete lease_use_result_;
  }
  lease_use_result_ = nullptr;
}
StartRecordingResponse::StartRecordingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  missing_fiducials_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.graph_nav.StartRecordingResponse)
}
StartRecordingResponse::StartRecordingResponse(const StartRecordingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      missing_fiducials_(from.missing_fiducials_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_created_waypoint()) {
    created_waypoint_ = new ::bosdyn::api::graph_nav::Waypoint(*from.created_waypoint_);
  } else {
    created_waypoint_ = nullptr;
  }
  if (from._internal_has_lease_use_result()) {
    lease_use_result_ = new ::bosdyn::api::LeaseUseResult(*from.lease_use_result_);
  } else {
    lease_use_result_ = nullptr;
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&license_status_) -
    reinterpret_cast<char*>(&status_)) + sizeof(license_status_));
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.graph_nav.StartRecordingResponse)
}

void StartRecordingResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StartRecordingResponse_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&license_status_) -
      reinterpret_cast<char*>(&header_)) + sizeof(license_status_));
}

StartRecordingResponse::~StartRecordingResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.graph_nav.StartRecordingResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StartRecordingResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete created_waypoint_;
  if (this != internal_default_instance()) delete lease_use_result_;
}

void StartRecordingResponse::ArenaDtor(void* object) {
  StartRecordingResponse* _this = reinterpret_cast< StartRecordingResponse* >(object);
  (void)_this;
}
void StartRecordingResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartRecordingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartRecordingResponse& StartRecordingResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartRecordingResponse_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto.base);
  return *internal_default_instance();
}


void StartRecordingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.graph_nav.StartRecordingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  missing_fiducials_.Clear();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && created_waypoint_ != nullptr) {
    delete created_waypoint_;
  }
  created_waypoint_ = nullptr;
  if (GetArena() == nullptr && lease_use_result_ != nullptr) {
    delete lease_use_result_;
  }
  lease_use_result_ = nullptr;
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&license_status_) -
      reinterpret_cast<char*>(&status_)) + sizeof(license_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartRecordingResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.graph_nav.Waypoint created_waypoint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_waypoint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.LeaseUseResult lease_use_result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_lease_use_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.graph_nav.StartRecordingResponse.Status status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::bosdyn::api::graph_nav::StartRecordingResponse_Status>(val));
        } else goto handle_unusual;
        continue;
      // repeated int32 missing_fiducials = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_missing_fiducials(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_missing_fiducials(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.LicenseInfo.Status license_status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_license_status(static_cast<::bosdyn::api::LicenseInfo_Status>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartRecordingResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.graph_nav.StartRecordingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.graph_nav.Waypoint created_waypoint = 2;
  if (this->has_created_waypoint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::created_waypoint(this), target, stream);
  }

  // .bosdyn.api.LeaseUseResult lease_use_result = 3;
  if (this->has_lease_use_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::lease_use_result(this), target, stream);
  }

  // .bosdyn.api.graph_nav.StartRecordingResponse.Status status = 4;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_status(), target);
  }

  // repeated int32 missing_fiducials = 5;
  {
    int byte_size = _missing_fiducials_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_missing_fiducials(), byte_size, target);
    }
  }

  // .bosdyn.api.LicenseInfo.Status license_status = 6;
  if (this->license_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_license_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.graph_nav.StartRecordingResponse)
  return target;
}

size_t StartRecordingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.graph_nav.StartRecordingResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 missing_fiducials = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->missing_fiducials_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _missing_fiducials_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.graph_nav.Waypoint created_waypoint = 2;
  if (this->has_created_waypoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_waypoint_);
  }

  // .bosdyn.api.LeaseUseResult lease_use_result = 3;
  if (this->has_lease_use_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lease_use_result_);
  }

  // .bosdyn.api.graph_nav.StartRecordingResponse.Status status = 4;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // .bosdyn.api.LicenseInfo.Status license_status = 6;
  if (this->license_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_license_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartRecordingResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.graph_nav.StartRecordingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StartRecordingResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartRecordingResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.graph_nav.StartRecordingResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.graph_nav.StartRecordingResponse)
    MergeFrom(*source);
  }
}

void StartRecordingResponse::MergeFrom(const StartRecordingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.graph_nav.StartRecordingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  missing_fiducials_.MergeFrom(from.missing_fiducials_);
  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.has_created_waypoint()) {
    _internal_mutable_created_waypoint()->::bosdyn::api::graph_nav::Waypoint::MergeFrom(from._internal_created_waypoint());
  }
  if (from.has_lease_use_result()) {
    _internal_mutable_lease_use_result()->::bosdyn::api::LeaseUseResult::MergeFrom(from._internal_lease_use_result());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.license_status() != 0) {
    _internal_set_license_status(from._internal_license_status());
  }
}

void StartRecordingResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.graph_nav.StartRecordingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartRecordingResponse::CopyFrom(const StartRecordingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.graph_nav.StartRecordingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartRecordingResponse::IsInitialized() const {
  return true;
}

void StartRecordingResponse::InternalSwap(StartRecordingResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  missing_fiducials_.InternalSwap(&other->missing_fiducials_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StartRecordingResponse, license_status_)
      + sizeof(StartRecordingResponse::license_status_)
      - PROTOBUF_FIELD_OFFSET(StartRecordingResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StartRecordingResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StopRecordingRequest::InitAsDefaultInstance() {
  ::bosdyn::api::graph_nav::_StopRecordingRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
  ::bosdyn::api::graph_nav::_StopRecordingRequest_default_instance_._instance.get_mutable()->lease_ = const_cast< ::bosdyn::api::Lease*>(
      ::bosdyn::api::Lease::internal_default_instance());
}
class StopRecordingRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const StopRecordingRequest* msg);
  static const ::bosdyn::api::Lease& lease(const StopRecordingRequest* msg);
};

const ::bosdyn::api::RequestHeader&
StopRecordingRequest::_Internal::header(const StopRecordingRequest* msg) {
  return *msg->header_;
}
const ::bosdyn::api::Lease&
StopRecordingRequest::_Internal::lease(const StopRecordingRequest* msg) {
  return *msg->lease_;
}
void StopRecordingRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void StopRecordingRequest::clear_lease() {
  if (GetArena() == nullptr && lease_ != nullptr) {
    delete lease_;
  }
  lease_ = nullptr;
}
StopRecordingRequest::StopRecordingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.graph_nav.StopRecordingRequest)
}
StopRecordingRequest::StopRecordingRequest(const StopRecordingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_lease()) {
    lease_ = new ::bosdyn::api::Lease(*from.lease_);
  } else {
    lease_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.graph_nav.StopRecordingRequest)
}

void StopRecordingRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StopRecordingRequest_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lease_) -
      reinterpret_cast<char*>(&header_)) + sizeof(lease_));
}

StopRecordingRequest::~StopRecordingRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.graph_nav.StopRecordingRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StopRecordingRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete lease_;
}

void StopRecordingRequest::ArenaDtor(void* object) {
  StopRecordingRequest* _this = reinterpret_cast< StopRecordingRequest* >(object);
  (void)_this;
}
void StopRecordingRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StopRecordingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopRecordingRequest& StopRecordingRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopRecordingRequest_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto.base);
  return *internal_default_instance();
}


void StopRecordingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.graph_nav.StopRecordingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && lease_ != nullptr) {
    delete lease_;
  }
  lease_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopRecordingRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.Lease lease = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lease(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopRecordingRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.graph_nav.StopRecordingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.Lease lease = 2;
  if (this->has_lease()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::lease(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.graph_nav.StopRecordingRequest)
  return target;
}

size_t StopRecordingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.graph_nav.StopRecordingRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.Lease lease = 2;
  if (this->has_lease()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lease_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopRecordingRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.graph_nav.StopRecordingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StopRecordingRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopRecordingRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.graph_nav.StopRecordingRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.graph_nav.StopRecordingRequest)
    MergeFrom(*source);
  }
}

void StopRecordingRequest::MergeFrom(const StopRecordingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.graph_nav.StopRecordingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
  if (from.has_lease()) {
    _internal_mutable_lease()->::bosdyn::api::Lease::MergeFrom(from._internal_lease());
  }
}

void StopRecordingRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.graph_nav.StopRecordingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopRecordingRequest::CopyFrom(const StopRecordingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.graph_nav.StopRecordingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopRecordingRequest::IsInitialized() const {
  return true;
}

void StopRecordingRequest::InternalSwap(StopRecordingRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StopRecordingRequest, lease_)
      + sizeof(StopRecordingRequest::lease_)
      - PROTOBUF_FIELD_OFFSET(StopRecordingRequest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StopRecordingRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StopRecordingResponse::InitAsDefaultInstance() {
  ::bosdyn::api::graph_nav::_StopRecordingResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
  ::bosdyn::api::graph_nav::_StopRecordingResponse_default_instance_._instance.get_mutable()->lease_use_result_ = const_cast< ::bosdyn::api::LeaseUseResult*>(
      ::bosdyn::api::LeaseUseResult::internal_default_instance());
}
class StopRecordingResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const StopRecordingResponse* msg);
  static const ::bosdyn::api::LeaseUseResult& lease_use_result(const StopRecordingResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
StopRecordingResponse::_Internal::header(const StopRecordingResponse* msg) {
  return *msg->header_;
}
const ::bosdyn::api::LeaseUseResult&
StopRecordingResponse::_Internal::lease_use_result(const StopRecordingResponse* msg) {
  return *msg->lease_use_result_;
}
void StopRecordingResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void StopRecordingResponse::clear_lease_use_result() {
  if (GetArena() == nullptr && lease_use_result_ != nullptr) {
    delete lease_use_result_;
  }
  lease_use_result_ = nullptr;
}
StopRecordingResponse::StopRecordingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.graph_nav.StopRecordingResponse)
}
StopRecordingResponse::StopRecordingResponse(const StopRecordingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_waypoint_localized_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error_waypoint_localized_id().empty()) {
    error_waypoint_localized_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_error_waypoint_localized_id(),
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_lease_use_result()) {
    lease_use_result_ = new ::bosdyn::api::LeaseUseResult(*from.lease_use_result_);
  } else {
    lease_use_result_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.graph_nav.StopRecordingResponse)
}

void StopRecordingResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StopRecordingResponse_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto.base);
  error_waypoint_localized_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&header_)) + sizeof(status_));
}

StopRecordingResponse::~StopRecordingResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.graph_nav.StopRecordingResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StopRecordingResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  error_waypoint_localized_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete lease_use_result_;
}

void StopRecordingResponse::ArenaDtor(void* object) {
  StopRecordingResponse* _this = reinterpret_cast< StopRecordingResponse* >(object);
  (void)_this;
}
void StopRecordingResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StopRecordingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopRecordingResponse& StopRecordingResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopRecordingResponse_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto.base);
  return *internal_default_instance();
}


void StopRecordingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.graph_nav.StopRecordingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_waypoint_localized_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && lease_use_result_ != nullptr) {
    delete lease_use_result_;
  }
  lease_use_result_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopRecordingResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.graph_nav.StopRecordingResponse.Status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::bosdyn::api::graph_nav::StopRecordingResponse_Status>(val));
        } else goto handle_unusual;
        continue;
      // string error_waypoint_localized_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_error_waypoint_localized_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.graph_nav.StopRecordingResponse.error_waypoint_localized_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.LeaseUseResult lease_use_result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_lease_use_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopRecordingResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.graph_nav.StopRecordingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.graph_nav.StopRecordingResponse.Status status = 2;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // string error_waypoint_localized_id = 3;
  if (this->error_waypoint_localized_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_waypoint_localized_id().data(), static_cast<int>(this->_internal_error_waypoint_localized_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.graph_nav.StopRecordingResponse.error_waypoint_localized_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error_waypoint_localized_id(), target);
  }

  // .bosdyn.api.LeaseUseResult lease_use_result = 4;
  if (this->has_lease_use_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::lease_use_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.graph_nav.StopRecordingResponse)
  return target;
}

size_t StopRecordingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.graph_nav.StopRecordingResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_waypoint_localized_id = 3;
  if (this->error_waypoint_localized_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_waypoint_localized_id());
  }

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.LeaseUseResult lease_use_result = 4;
  if (this->has_lease_use_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lease_use_result_);
  }

  // .bosdyn.api.graph_nav.StopRecordingResponse.Status status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopRecordingResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.graph_nav.StopRecordingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StopRecordingResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopRecordingResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.graph_nav.StopRecordingResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.graph_nav.StopRecordingResponse)
    MergeFrom(*source);
  }
}

void StopRecordingResponse::MergeFrom(const StopRecordingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.graph_nav.StopRecordingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_waypoint_localized_id().size() > 0) {
    _internal_set_error_waypoint_localized_id(from._internal_error_waypoint_localized_id());
  }
  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.has_lease_use_result()) {
    _internal_mutable_lease_use_result()->::bosdyn::api::LeaseUseResult::MergeFrom(from._internal_lease_use_result());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void StopRecordingResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.graph_nav.StopRecordingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopRecordingResponse::CopyFrom(const StopRecordingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.graph_nav.StopRecordingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopRecordingResponse::IsInitialized() const {
  return true;
}

void StopRecordingResponse::InternalSwap(StopRecordingResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  error_waypoint_localized_id_.Swap(&other->error_waypoint_localized_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StopRecordingResponse, status_)
      + sizeof(StopRecordingResponse::status_)
      - PROTOBUF_FIELD_OFFSET(StopRecordingResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StopRecordingResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateWaypointRequest::InitAsDefaultInstance() {
  ::bosdyn::api::graph_nav::_CreateWaypointRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
  ::bosdyn::api::graph_nav::_CreateWaypointRequest_default_instance_._instance.get_mutable()->recording_environment_ = const_cast< ::bosdyn::api::graph_nav::RecordingEnvironment*>(
      ::bosdyn::api::graph_nav::RecordingEnvironment::internal_default_instance());
  ::bosdyn::api::graph_nav::_CreateWaypointRequest_default_instance_._instance.get_mutable()->lease_ = const_cast< ::bosdyn::api::Lease*>(
      ::bosdyn::api::Lease::internal_default_instance());
}
class CreateWaypointRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const CreateWaypointRequest* msg);
  static const ::bosdyn::api::graph_nav::RecordingEnvironment& recording_environment(const CreateWaypointRequest* msg);
  static const ::bosdyn::api::Lease& lease(const CreateWaypointRequest* msg);
};

const ::bosdyn::api::RequestHeader&
CreateWaypointRequest::_Internal::header(const CreateWaypointRequest* msg) {
  return *msg->header_;
}
const ::bosdyn::api::graph_nav::RecordingEnvironment&
CreateWaypointRequest::_Internal::recording_environment(const CreateWaypointRequest* msg) {
  return *msg->recording_environment_;
}
const ::bosdyn::api::Lease&
CreateWaypointRequest::_Internal::lease(const CreateWaypointRequest* msg) {
  return *msg->lease_;
}
void CreateWaypointRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void CreateWaypointRequest::clear_lease() {
  if (GetArena() == nullptr && lease_ != nullptr) {
    delete lease_;
  }
  lease_ = nullptr;
}
CreateWaypointRequest::CreateWaypointRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  require_fiducials_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.graph_nav.CreateWaypointRequest)
}
CreateWaypointRequest::CreateWaypointRequest(const CreateWaypointRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      require_fiducials_(from.require_fiducials_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  waypoint_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_waypoint_name().empty()) {
    waypoint_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_waypoint_name(),
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_recording_environment()) {
    recording_environment_ = new ::bosdyn::api::graph_nav::RecordingEnvironment(*from.recording_environment_);
  } else {
    recording_environment_ = nullptr;
  }
  if (from._internal_has_lease()) {
    lease_ = new ::bosdyn::api::Lease(*from.lease_);
  } else {
    lease_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.graph_nav.CreateWaypointRequest)
}

void CreateWaypointRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateWaypointRequest_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto.base);
  waypoint_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lease_) -
      reinterpret_cast<char*>(&header_)) + sizeof(lease_));
}

CreateWaypointRequest::~CreateWaypointRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.graph_nav.CreateWaypointRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateWaypointRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  waypoint_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete recording_environment_;
  if (this != internal_default_instance()) delete lease_;
}

void CreateWaypointRequest::ArenaDtor(void* object) {
  CreateWaypointRequest* _this = reinterpret_cast< CreateWaypointRequest* >(object);
  (void)_this;
}
void CreateWaypointRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateWaypointRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateWaypointRequest& CreateWaypointRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateWaypointRequest_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto.base);
  return *internal_default_instance();
}


void CreateWaypointRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.graph_nav.CreateWaypointRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  require_fiducials_.Clear();
  waypoint_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && recording_environment_ != nullptr) {
    delete recording_environment_;
  }
  recording_environment_ = nullptr;
  if (GetArena() == nullptr && lease_ != nullptr) {
    delete lease_;
  }
  lease_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateWaypointRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string waypoint_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_waypoint_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.graph_nav.CreateWaypointRequest.waypoint_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.graph_nav.RecordingEnvironment recording_environment = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_recording_environment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.Lease lease = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_lease(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 require_fiducials = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_require_fiducials(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_require_fiducials(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateWaypointRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.graph_nav.CreateWaypointRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // string waypoint_name = 2;
  if (this->waypoint_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_waypoint_name().data(), static_cast<int>(this->_internal_waypoint_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.graph_nav.CreateWaypointRequest.waypoint_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_waypoint_name(), target);
  }

  // .bosdyn.api.graph_nav.RecordingEnvironment recording_environment = 3;
  if (this->has_recording_environment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::recording_environment(this), target, stream);
  }

  // .bosdyn.api.Lease lease = 4;
  if (this->has_lease()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::lease(this), target, stream);
  }

  // repeated int32 require_fiducials = 5;
  {
    int byte_size = _require_fiducials_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_require_fiducials(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.graph_nav.CreateWaypointRequest)
  return target;
}

size_t CreateWaypointRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.graph_nav.CreateWaypointRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 require_fiducials = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->require_fiducials_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _require_fiducials_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string waypoint_name = 2;
  if (this->waypoint_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_waypoint_name());
  }

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.graph_nav.RecordingEnvironment recording_environment = 3;
  if (this->has_recording_environment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *recording_environment_);
  }

  // .bosdyn.api.Lease lease = 4;
  if (this->has_lease()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lease_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateWaypointRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.graph_nav.CreateWaypointRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateWaypointRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateWaypointRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.graph_nav.CreateWaypointRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.graph_nav.CreateWaypointRequest)
    MergeFrom(*source);
  }
}

void CreateWaypointRequest::MergeFrom(const CreateWaypointRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.graph_nav.CreateWaypointRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  require_fiducials_.MergeFrom(from.require_fiducials_);
  if (from.waypoint_name().size() > 0) {
    _internal_set_waypoint_name(from._internal_waypoint_name());
  }
  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
  if (from.has_recording_environment()) {
    _internal_mutable_recording_environment()->::bosdyn::api::graph_nav::RecordingEnvironment::MergeFrom(from._internal_recording_environment());
  }
  if (from.has_lease()) {
    _internal_mutable_lease()->::bosdyn::api::Lease::MergeFrom(from._internal_lease());
  }
}

void CreateWaypointRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.graph_nav.CreateWaypointRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateWaypointRequest::CopyFrom(const CreateWaypointRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.graph_nav.CreateWaypointRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateWaypointRequest::IsInitialized() const {
  return true;
}

void CreateWaypointRequest::InternalSwap(CreateWaypointRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  require_fiducials_.InternalSwap(&other->require_fiducials_);
  waypoint_name_.Swap(&other->waypoint_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateWaypointRequest, lease_)
      + sizeof(CreateWaypointRequest::lease_)
      - PROTOBUF_FIELD_OFFSET(CreateWaypointRequest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateWaypointRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateWaypointResponse::InitAsDefaultInstance() {
  ::bosdyn::api::graph_nav::_CreateWaypointResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
  ::bosdyn::api::graph_nav::_CreateWaypointResponse_default_instance_._instance.get_mutable()->created_waypoint_ = const_cast< ::bosdyn::api::graph_nav::Waypoint*>(
      ::bosdyn::api::graph_nav::Waypoint::internal_default_instance());
  ::bosdyn::api::graph_nav::_CreateWaypointResponse_default_instance_._instance.get_mutable()->created_edge_ = const_cast< ::bosdyn::api::graph_nav::Edge*>(
      ::bosdyn::api::graph_nav::Edge::internal_default_instance());
  ::bosdyn::api::graph_nav::_CreateWaypointResponse_default_instance_._instance.get_mutable()->lease_use_result_ = const_cast< ::bosdyn::api::LeaseUseResult*>(
      ::bosdyn::api::LeaseUseResult::internal_default_instance());
}
class CreateWaypointResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const CreateWaypointResponse* msg);
  static const ::bosdyn::api::graph_nav::Waypoint& created_waypoint(const CreateWaypointResponse* msg);
  static const ::bosdyn::api::graph_nav::Edge& created_edge(const CreateWaypointResponse* msg);
  static const ::bosdyn::api::LeaseUseResult& lease_use_result(const CreateWaypointResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
CreateWaypointResponse::_Internal::header(const CreateWaypointResponse* msg) {
  return *msg->header_;
}
const ::bosdyn::api::graph_nav::Waypoint&
CreateWaypointResponse::_Internal::created_waypoint(const CreateWaypointResponse* msg) {
  return *msg->created_waypoint_;
}
const ::bosdyn::api::graph_nav::Edge&
CreateWaypointResponse::_Internal::created_edge(const CreateWaypointResponse* msg) {
  return *msg->created_edge_;
}
const ::bosdyn::api::LeaseUseResult&
CreateWaypointResponse::_Internal::lease_use_result(const CreateWaypointResponse* msg) {
  return *msg->lease_use_result_;
}
void CreateWaypointResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void CreateWaypointResponse::clear_created_waypoint() {
  if (GetArena() == nullptr && created_waypoint_ != nullptr) {
    delete created_waypoint_;
  }
  created_waypoint_ = nullptr;
}
void CreateWaypointResponse::clear_created_edge() {
  if (GetArena() == nullptr && created_edge_ != nullptr) {
    delete created_edge_;
  }
  created_edge_ = nullptr;
}
void CreateWaypointResponse::clear_lease_use_result() {
  if (GetArena() == nullptr && lease_use_result_ != nullptr) {
    delete lease_use_result_;
  }
  lease_use_result_ = nullptr;
}
CreateWaypointResponse::CreateWaypointResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  missing_fiducials_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.graph_nav.CreateWaypointResponse)
}
CreateWaypointResponse::CreateWaypointResponse(const CreateWaypointResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      missing_fiducials_(from.missing_fiducials_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_created_waypoint()) {
    created_waypoint_ = new ::bosdyn::api::graph_nav::Waypoint(*from.created_waypoint_);
  } else {
    created_waypoint_ = nullptr;
  }
  if (from._internal_has_created_edge()) {
    created_edge_ = new ::bosdyn::api::graph_nav::Edge(*from.created_edge_);
  } else {
    created_edge_ = nullptr;
  }
  if (from._internal_has_lease_use_result()) {
    lease_use_result_ = new ::bosdyn::api::LeaseUseResult(*from.lease_use_result_);
  } else {
    lease_use_result_ = nullptr;
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&license_status_) -
    reinterpret_cast<char*>(&status_)) + sizeof(license_status_));
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.graph_nav.CreateWaypointResponse)
}

void CreateWaypointResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateWaypointResponse_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&license_status_) -
      reinterpret_cast<char*>(&header_)) + sizeof(license_status_));
}

CreateWaypointResponse::~CreateWaypointResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.graph_nav.CreateWaypointResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateWaypointResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete created_waypoint_;
  if (this != internal_default_instance()) delete created_edge_;
  if (this != internal_default_instance()) delete lease_use_result_;
}

void CreateWaypointResponse::ArenaDtor(void* object) {
  CreateWaypointResponse* _this = reinterpret_cast< CreateWaypointResponse* >(object);
  (void)_this;
}
void CreateWaypointResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateWaypointResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateWaypointResponse& CreateWaypointResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateWaypointResponse_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto.base);
  return *internal_default_instance();
}


void CreateWaypointResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.graph_nav.CreateWaypointResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  missing_fiducials_.Clear();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && created_waypoint_ != nullptr) {
    delete created_waypoint_;
  }
  created_waypoint_ = nullptr;
  if (GetArena() == nullptr && created_edge_ != nullptr) {
    delete created_edge_;
  }
  created_edge_ = nullptr;
  if (GetArena() == nullptr && lease_use_result_ != nullptr) {
    delete lease_use_result_;
  }
  lease_use_result_ = nullptr;
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&license_status_) -
      reinterpret_cast<char*>(&status_)) + sizeof(license_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateWaypointResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.graph_nav.Waypoint created_waypoint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_waypoint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.graph_nav.Edge created_edge = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_edge(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.LeaseUseResult lease_use_result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_lease_use_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.graph_nav.CreateWaypointResponse.Status status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::bosdyn::api::graph_nav::CreateWaypointResponse_Status>(val));
        } else goto handle_unusual;
        continue;
      // repeated int32 missing_fiducials = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_missing_fiducials(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_missing_fiducials(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.LicenseInfo.Status license_status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_license_status(static_cast<::bosdyn::api::LicenseInfo_Status>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateWaypointResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.graph_nav.CreateWaypointResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.graph_nav.Waypoint created_waypoint = 2;
  if (this->has_created_waypoint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::created_waypoint(this), target, stream);
  }

  // .bosdyn.api.graph_nav.Edge created_edge = 3;
  if (this->has_created_edge()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::created_edge(this), target, stream);
  }

  // .bosdyn.api.LeaseUseResult lease_use_result = 4;
  if (this->has_lease_use_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::lease_use_result(this), target, stream);
  }

  // .bosdyn.api.graph_nav.CreateWaypointResponse.Status status = 5;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_status(), target);
  }

  // repeated int32 missing_fiducials = 6;
  {
    int byte_size = _missing_fiducials_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_missing_fiducials(), byte_size, target);
    }
  }

  // .bosdyn.api.LicenseInfo.Status license_status = 7;
  if (this->license_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_license_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.graph_nav.CreateWaypointResponse)
  return target;
}

size_t CreateWaypointResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.graph_nav.CreateWaypointResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 missing_fiducials = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->missing_fiducials_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _missing_fiducials_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.graph_nav.Waypoint created_waypoint = 2;
  if (this->has_created_waypoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_waypoint_);
  }

  // .bosdyn.api.graph_nav.Edge created_edge = 3;
  if (this->has_created_edge()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_edge_);
  }

  // .bosdyn.api.LeaseUseResult lease_use_result = 4;
  if (this->has_lease_use_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lease_use_result_);
  }

  // .bosdyn.api.graph_nav.CreateWaypointResponse.Status status = 5;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // .bosdyn.api.LicenseInfo.Status license_status = 7;
  if (this->license_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_license_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateWaypointResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.graph_nav.CreateWaypointResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateWaypointResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateWaypointResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.graph_nav.CreateWaypointResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.graph_nav.CreateWaypointResponse)
    MergeFrom(*source);
  }
}

void CreateWaypointResponse::MergeFrom(const CreateWaypointResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.graph_nav.CreateWaypointResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  missing_fiducials_.MergeFrom(from.missing_fiducials_);
  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.has_created_waypoint()) {
    _internal_mutable_created_waypoint()->::bosdyn::api::graph_nav::Waypoint::MergeFrom(from._internal_created_waypoint());
  }
  if (from.has_created_edge()) {
    _internal_mutable_created_edge()->::bosdyn::api::graph_nav::Edge::MergeFrom(from._internal_created_edge());
  }
  if (from.has_lease_use_result()) {
    _internal_mutable_lease_use_result()->::bosdyn::api::LeaseUseResult::MergeFrom(from._internal_lease_use_result());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.license_status() != 0) {
    _internal_set_license_status(from._internal_license_status());
  }
}

void CreateWaypointResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.graph_nav.CreateWaypointResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateWaypointResponse::CopyFrom(const CreateWaypointResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.graph_nav.CreateWaypointResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateWaypointResponse::IsInitialized() const {
  return true;
}

void CreateWaypointResponse::InternalSwap(CreateWaypointResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  missing_fiducials_.InternalSwap(&other->missing_fiducials_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateWaypointResponse, license_status_)
      + sizeof(CreateWaypointResponse::license_status_)
      - PROTOBUF_FIELD_OFFSET(CreateWaypointResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateWaypointResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateEdgeRequest::InitAsDefaultInstance() {
  ::bosdyn::api::graph_nav::_CreateEdgeRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
  ::bosdyn::api::graph_nav::_CreateEdgeRequest_default_instance_._instance.get_mutable()->edge_ = const_cast< ::bosdyn::api::graph_nav::Edge*>(
      ::bosdyn::api::graph_nav::Edge::internal_default_instance());
  ::bosdyn::api::graph_nav::_CreateEdgeRequest_default_instance_._instance.get_mutable()->lease_ = const_cast< ::bosdyn::api::Lease*>(
      ::bosdyn::api::Lease::internal_default_instance());
}
class CreateEdgeRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const CreateEdgeRequest* msg);
  static const ::bosdyn::api::graph_nav::Edge& edge(const CreateEdgeRequest* msg);
  static const ::bosdyn::api::Lease& lease(const CreateEdgeRequest* msg);
};

const ::bosdyn::api::RequestHeader&
CreateEdgeRequest::_Internal::header(const CreateEdgeRequest* msg) {
  return *msg->header_;
}
const ::bosdyn::api::graph_nav::Edge&
CreateEdgeRequest::_Internal::edge(const CreateEdgeRequest* msg) {
  return *msg->edge_;
}
const ::bosdyn::api::Lease&
CreateEdgeRequest::_Internal::lease(const CreateEdgeRequest* msg) {
  return *msg->lease_;
}
void CreateEdgeRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void CreateEdgeRequest::clear_edge() {
  if (GetArena() == nullptr && edge_ != nullptr) {
    delete edge_;
  }
  edge_ = nullptr;
}
void CreateEdgeRequest::clear_lease() {
  if (GetArena() == nullptr && lease_ != nullptr) {
    delete lease_;
  }
  lease_ = nullptr;
}
CreateEdgeRequest::CreateEdgeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.graph_nav.CreateEdgeRequest)
}
CreateEdgeRequest::CreateEdgeRequest(const CreateEdgeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_edge()) {
    edge_ = new ::bosdyn::api::graph_nav::Edge(*from.edge_);
  } else {
    edge_ = nullptr;
  }
  if (from._internal_has_lease()) {
    lease_ = new ::bosdyn::api::Lease(*from.lease_);
  } else {
    lease_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.graph_nav.CreateEdgeRequest)
}

void CreateEdgeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateEdgeRequest_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lease_) -
      reinterpret_cast<char*>(&header_)) + sizeof(lease_));
}

CreateEdgeRequest::~CreateEdgeRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.graph_nav.CreateEdgeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateEdgeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete edge_;
  if (this != internal_default_instance()) delete lease_;
}

void CreateEdgeRequest::ArenaDtor(void* object) {
  CreateEdgeRequest* _this = reinterpret_cast< CreateEdgeRequest* >(object);
  (void)_this;
}
void CreateEdgeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateEdgeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateEdgeRequest& CreateEdgeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateEdgeRequest_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto.base);
  return *internal_default_instance();
}


void CreateEdgeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.graph_nav.CreateEdgeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && edge_ != nullptr) {
    delete edge_;
  }
  edge_ = nullptr;
  if (GetArena() == nullptr && lease_ != nullptr) {
    delete lease_;
  }
  lease_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateEdgeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.graph_nav.Edge edge = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_edge(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.Lease lease = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_lease(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateEdgeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.graph_nav.CreateEdgeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.graph_nav.Edge edge = 2;
  if (this->has_edge()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::edge(this), target, stream);
  }

  // .bosdyn.api.Lease lease = 3;
  if (this->has_lease()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::lease(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.graph_nav.CreateEdgeRequest)
  return target;
}

size_t CreateEdgeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.graph_nav.CreateEdgeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.graph_nav.Edge edge = 2;
  if (this->has_edge()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *edge_);
  }

  // .bosdyn.api.Lease lease = 3;
  if (this->has_lease()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lease_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateEdgeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.graph_nav.CreateEdgeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateEdgeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateEdgeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.graph_nav.CreateEdgeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.graph_nav.CreateEdgeRequest)
    MergeFrom(*source);
  }
}

void CreateEdgeRequest::MergeFrom(const CreateEdgeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.graph_nav.CreateEdgeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
  if (from.has_edge()) {
    _internal_mutable_edge()->::bosdyn::api::graph_nav::Edge::MergeFrom(from._internal_edge());
  }
  if (from.has_lease()) {
    _internal_mutable_lease()->::bosdyn::api::Lease::MergeFrom(from._internal_lease());
  }
}

void CreateEdgeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.graph_nav.CreateEdgeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateEdgeRequest::CopyFrom(const CreateEdgeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.graph_nav.CreateEdgeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateEdgeRequest::IsInitialized() const {
  return true;
}

void CreateEdgeRequest::InternalSwap(CreateEdgeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateEdgeRequest, lease_)
      + sizeof(CreateEdgeRequest::lease_)
      - PROTOBUF_FIELD_OFFSET(CreateEdgeRequest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateEdgeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateEdgeResponse::InitAsDefaultInstance() {
  ::bosdyn::api::graph_nav::_CreateEdgeResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
  ::bosdyn::api::graph_nav::_CreateEdgeResponse_default_instance_._instance.get_mutable()->error_existing_edge_ = const_cast< ::bosdyn::api::graph_nav::Edge*>(
      ::bosdyn::api::graph_nav::Edge::internal_default_instance());
  ::bosdyn::api::graph_nav::_CreateEdgeResponse_default_instance_._instance.get_mutable()->lease_use_result_ = const_cast< ::bosdyn::api::LeaseUseResult*>(
      ::bosdyn::api::LeaseUseResult::internal_default_instance());
}
class CreateEdgeResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const CreateEdgeResponse* msg);
  static const ::bosdyn::api::graph_nav::Edge& error_existing_edge(const CreateEdgeResponse* msg);
  static const ::bosdyn::api::LeaseUseResult& lease_use_result(const CreateEdgeResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
CreateEdgeResponse::_Internal::header(const CreateEdgeResponse* msg) {
  return *msg->header_;
}
const ::bosdyn::api::graph_nav::Edge&
CreateEdgeResponse::_Internal::error_existing_edge(const CreateEdgeResponse* msg) {
  return *msg->error_existing_edge_;
}
const ::bosdyn::api::LeaseUseResult&
CreateEdgeResponse::_Internal::lease_use_result(const CreateEdgeResponse* msg) {
  return *msg->lease_use_result_;
}
void CreateEdgeResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void CreateEdgeResponse::clear_error_existing_edge() {
  if (GetArena() == nullptr && error_existing_edge_ != nullptr) {
    delete error_existing_edge_;
  }
  error_existing_edge_ = nullptr;
}
void CreateEdgeResponse::clear_lease_use_result() {
  if (GetArena() == nullptr && lease_use_result_ != nullptr) {
    delete lease_use_result_;
  }
  lease_use_result_ = nullptr;
}
CreateEdgeResponse::CreateEdgeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.graph_nav.CreateEdgeResponse)
}
CreateEdgeResponse::CreateEdgeResponse(const CreateEdgeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_error_existing_edge()) {
    error_existing_edge_ = new ::bosdyn::api::graph_nav::Edge(*from.error_existing_edge_);
  } else {
    error_existing_edge_ = nullptr;
  }
  if (from._internal_has_lease_use_result()) {
    lease_use_result_ = new ::bosdyn::api::LeaseUseResult(*from.lease_use_result_);
  } else {
    lease_use_result_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.graph_nav.CreateEdgeResponse)
}

void CreateEdgeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateEdgeResponse_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&header_)) + sizeof(status_));
}

CreateEdgeResponse::~CreateEdgeResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.graph_nav.CreateEdgeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateEdgeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete error_existing_edge_;
  if (this != internal_default_instance()) delete lease_use_result_;
}

void CreateEdgeResponse::ArenaDtor(void* object) {
  CreateEdgeResponse* _this = reinterpret_cast< CreateEdgeResponse* >(object);
  (void)_this;
}
void CreateEdgeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateEdgeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateEdgeResponse& CreateEdgeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateEdgeResponse_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto.base);
  return *internal_default_instance();
}


void CreateEdgeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.graph_nav.CreateEdgeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && error_existing_edge_ != nullptr) {
    delete error_existing_edge_;
  }
  error_existing_edge_ = nullptr;
  if (GetArena() == nullptr && lease_use_result_ != nullptr) {
    delete lease_use_result_;
  }
  lease_use_result_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateEdgeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.graph_nav.CreateEdgeResponse.Status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::bosdyn::api::graph_nav::CreateEdgeResponse_Status>(val));
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.graph_nav.Edge error_existing_edge = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_error_existing_edge(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.LeaseUseResult lease_use_result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_lease_use_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateEdgeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.graph_nav.CreateEdgeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.graph_nav.CreateEdgeResponse.Status status = 2;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // .bosdyn.api.graph_nav.Edge error_existing_edge = 3;
  if (this->has_error_existing_edge()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::error_existing_edge(this), target, stream);
  }

  // .bosdyn.api.LeaseUseResult lease_use_result = 4;
  if (this->has_lease_use_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::lease_use_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.graph_nav.CreateEdgeResponse)
  return target;
}

size_t CreateEdgeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.graph_nav.CreateEdgeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.graph_nav.Edge error_existing_edge = 3;
  if (this->has_error_existing_edge()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *error_existing_edge_);
  }

  // .bosdyn.api.LeaseUseResult lease_use_result = 4;
  if (this->has_lease_use_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lease_use_result_);
  }

  // .bosdyn.api.graph_nav.CreateEdgeResponse.Status status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateEdgeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.graph_nav.CreateEdgeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateEdgeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateEdgeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.graph_nav.CreateEdgeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.graph_nav.CreateEdgeResponse)
    MergeFrom(*source);
  }
}

void CreateEdgeResponse::MergeFrom(const CreateEdgeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.graph_nav.CreateEdgeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.has_error_existing_edge()) {
    _internal_mutable_error_existing_edge()->::bosdyn::api::graph_nav::Edge::MergeFrom(from._internal_error_existing_edge());
  }
  if (from.has_lease_use_result()) {
    _internal_mutable_lease_use_result()->::bosdyn::api::LeaseUseResult::MergeFrom(from._internal_lease_use_result());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void CreateEdgeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.graph_nav.CreateEdgeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateEdgeResponse::CopyFrom(const CreateEdgeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.graph_nav.CreateEdgeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateEdgeResponse::IsInitialized() const {
  return true;
}

void CreateEdgeResponse::InternalSwap(CreateEdgeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateEdgeResponse, status_)
      + sizeof(CreateEdgeResponse::status_)
      - PROTOBUF_FIELD_OFFSET(CreateEdgeResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateEdgeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetRecordStatusRequest::InitAsDefaultInstance() {
  ::bosdyn::api::graph_nav::_GetRecordStatusRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
}
class GetRecordStatusRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const GetRecordStatusRequest* msg);
};

const ::bosdyn::api::RequestHeader&
GetRecordStatusRequest::_Internal::header(const GetRecordStatusRequest* msg) {
  return *msg->header_;
}
void GetRecordStatusRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
GetRecordStatusRequest::GetRecordStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.graph_nav.GetRecordStatusRequest)
}
GetRecordStatusRequest::GetRecordStatusRequest(const GetRecordStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.graph_nav.GetRecordStatusRequest)
}

void GetRecordStatusRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetRecordStatusRequest_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto.base);
  header_ = nullptr;
}

GetRecordStatusRequest::~GetRecordStatusRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.graph_nav.GetRecordStatusRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetRecordStatusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void GetRecordStatusRequest::ArenaDtor(void* object) {
  GetRecordStatusRequest* _this = reinterpret_cast< GetRecordStatusRequest* >(object);
  (void)_this;
}
void GetRecordStatusRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetRecordStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRecordStatusRequest& GetRecordStatusRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetRecordStatusRequest_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto.base);
  return *internal_default_instance();
}


void GetRecordStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.graph_nav.GetRecordStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRecordStatusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRecordStatusRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.graph_nav.GetRecordStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.graph_nav.GetRecordStatusRequest)
  return target;
}

size_t GetRecordStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.graph_nav.GetRecordStatusRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRecordStatusRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.graph_nav.GetRecordStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRecordStatusRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetRecordStatusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.graph_nav.GetRecordStatusRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.graph_nav.GetRecordStatusRequest)
    MergeFrom(*source);
  }
}

void GetRecordStatusRequest::MergeFrom(const GetRecordStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.graph_nav.GetRecordStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
}

void GetRecordStatusRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.graph_nav.GetRecordStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRecordStatusRequest::CopyFrom(const GetRecordStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.graph_nav.GetRecordStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRecordStatusRequest::IsInitialized() const {
  return true;
}

void GetRecordStatusRequest::InternalSwap(GetRecordStatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRecordStatusRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetRecordStatusResponse::InitAsDefaultInstance() {
  ::bosdyn::api::graph_nav::_GetRecordStatusResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
  ::bosdyn::api::graph_nav::_GetRecordStatusResponse_default_instance_._instance.get_mutable()->recording_environment_ = const_cast< ::bosdyn::api::graph_nav::RecordingEnvironment*>(
      ::bosdyn::api::graph_nav::RecordingEnvironment::internal_default_instance());
}
class GetRecordStatusResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const GetRecordStatusResponse* msg);
  static const ::bosdyn::api::graph_nav::RecordingEnvironment& recording_environment(const GetRecordStatusResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
GetRecordStatusResponse::_Internal::header(const GetRecordStatusResponse* msg) {
  return *msg->header_;
}
const ::bosdyn::api::graph_nav::RecordingEnvironment&
GetRecordStatusResponse::_Internal::recording_environment(const GetRecordStatusResponse* msg) {
  return *msg->recording_environment_;
}
void GetRecordStatusResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
GetRecordStatusResponse::GetRecordStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.graph_nav.GetRecordStatusResponse)
}
GetRecordStatusResponse::GetRecordStatusResponse(const GetRecordStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_recording_environment()) {
    recording_environment_ = new ::bosdyn::api::graph_nav::RecordingEnvironment(*from.recording_environment_);
  } else {
    recording_environment_ = nullptr;
  }
  ::memcpy(&is_recording_, &from.is_recording_,
    static_cast<size_t>(reinterpret_cast<char*>(&map_state_) -
    reinterpret_cast<char*>(&is_recording_)) + sizeof(map_state_));
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.graph_nav.GetRecordStatusResponse)
}

void GetRecordStatusResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetRecordStatusResponse_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&map_state_) -
      reinterpret_cast<char*>(&header_)) + sizeof(map_state_));
}

GetRecordStatusResponse::~GetRecordStatusResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.graph_nav.GetRecordStatusResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetRecordStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete recording_environment_;
}

void GetRecordStatusResponse::ArenaDtor(void* object) {
  GetRecordStatusResponse* _this = reinterpret_cast< GetRecordStatusResponse* >(object);
  (void)_this;
}
void GetRecordStatusResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetRecordStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRecordStatusResponse& GetRecordStatusResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetRecordStatusResponse_bosdyn_2fapi_2fgraph_5fnav_2frecording_2eproto.base);
  return *internal_default_instance();
}


void GetRecordStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.graph_nav.GetRecordStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && recording_environment_ != nullptr) {
    delete recording_environment_;
  }
  recording_environment_ = nullptr;
  ::memset(&is_recording_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&map_state_) -
      reinterpret_cast<char*>(&is_recording_)) + sizeof(map_state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetRecordStatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_recording = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_recording_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.graph_nav.RecordingEnvironment recording_environment = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_recording_environment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.graph_nav.GetRecordStatusResponse.MapState map_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_map_state(static_cast<::bosdyn::api::graph_nav::GetRecordStatusResponse_MapState>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRecordStatusResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.graph_nav.GetRecordStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // bool is_recording = 2;
  if (this->is_recording() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_recording(), target);
  }

  // .bosdyn.api.graph_nav.RecordingEnvironment recording_environment = 3;
  if (this->has_recording_environment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::recording_environment(this), target, stream);
  }

  // .bosdyn.api.graph_nav.GetRecordStatusResponse.MapState map_state = 4;
  if (this->map_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_map_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.graph_nav.GetRecordStatusResponse)
  return target;
}

size_t GetRecordStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.graph_nav.GetRecordStatusResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.graph_nav.RecordingEnvironment recording_environment = 3;
  if (this->has_recording_environment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *recording_environment_);
  }

  // bool is_recording = 2;
  if (this->is_recording() != 0) {
    total_size += 1 + 1;
  }

  // .bosdyn.api.graph_nav.GetRecordStatusResponse.MapState map_state = 4;
  if (this->map_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_map_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRecordStatusResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.graph_nav.GetRecordStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRecordStatusResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetRecordStatusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.graph_nav.GetRecordStatusResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.graph_nav.GetRecordStatusResponse)
    MergeFrom(*source);
  }
}

void GetRecordStatusResponse::MergeFrom(const GetRecordStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.graph_nav.GetRecordStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.has_recording_environment()) {
    _internal_mutable_recording_environment()->::bosdyn::api::graph_nav::RecordingEnvironment::MergeFrom(from._internal_recording_environment());
  }
  if (from.is_recording() != 0) {
    _internal_set_is_recording(from._internal_is_recording());
  }
  if (from.map_state() != 0) {
    _internal_set_map_state(from._internal_map_state());
  }
}

void GetRecordStatusResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.graph_nav.GetRecordStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRecordStatusResponse::CopyFrom(const GetRecordStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.graph_nav.GetRecordStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRecordStatusResponse::IsInitialized() const {
  return true;
}

void GetRecordStatusResponse::InternalSwap(GetRecordStatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetRecordStatusResponse, map_state_)
      + sizeof(GetRecordStatusResponse::map_state_)
      - PROTOBUF_FIELD_OFFSET(GetRecordStatusResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRecordStatusResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace graph_nav
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bosdyn::api::graph_nav::RecordingEnvironment* Arena::CreateMaybeMessage< ::bosdyn::api::graph_nav::RecordingEnvironment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::graph_nav::RecordingEnvironment >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::graph_nav::SetRecordingEnvironmentRequest* Arena::CreateMaybeMessage< ::bosdyn::api::graph_nav::SetRecordingEnvironmentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::graph_nav::SetRecordingEnvironmentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse* Arena::CreateMaybeMessage< ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::graph_nav::StartRecordingRequest* Arena::CreateMaybeMessage< ::bosdyn::api::graph_nav::StartRecordingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::graph_nav::StartRecordingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::graph_nav::StartRecordingResponse* Arena::CreateMaybeMessage< ::bosdyn::api::graph_nav::StartRecordingResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::graph_nav::StartRecordingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::graph_nav::StopRecordingRequest* Arena::CreateMaybeMessage< ::bosdyn::api::graph_nav::StopRecordingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::graph_nav::StopRecordingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::graph_nav::StopRecordingResponse* Arena::CreateMaybeMessage< ::bosdyn::api::graph_nav::StopRecordingResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::graph_nav::StopRecordingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::graph_nav::CreateWaypointRequest* Arena::CreateMaybeMessage< ::bosdyn::api::graph_nav::CreateWaypointRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::graph_nav::CreateWaypointRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::graph_nav::CreateWaypointResponse* Arena::CreateMaybeMessage< ::bosdyn::api::graph_nav::CreateWaypointResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::graph_nav::CreateWaypointResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::graph_nav::CreateEdgeRequest* Arena::CreateMaybeMessage< ::bosdyn::api::graph_nav::CreateEdgeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::graph_nav::CreateEdgeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::graph_nav::CreateEdgeResponse* Arena::CreateMaybeMessage< ::bosdyn::api::graph_nav::CreateEdgeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::graph_nav::CreateEdgeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::graph_nav::GetRecordStatusRequest* Arena::CreateMaybeMessage< ::bosdyn::api::graph_nav::GetRecordStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::graph_nav::GetRecordStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::graph_nav::GetRecordStatusResponse* Arena::CreateMaybeMessage< ::bosdyn::api::graph_nav::GetRecordStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::graph_nav::GetRecordStatusResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
