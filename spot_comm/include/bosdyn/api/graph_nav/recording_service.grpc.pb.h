// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bosdyn/api/graph_nav/recording_service.proto
// Original file comments:
// Copyright (c) 2020 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).
//
#ifndef GRPC_bosdyn_2fapi_2fgraph_5fnav_2frecording_5fservice_2eproto__INCLUDED
#define GRPC_bosdyn_2fapi_2fgraph_5fnav_2frecording_5fservice_2eproto__INCLUDED

#include "bosdyn/api/graph_nav/recording_service.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace bosdyn {
namespace api {
namespace graph_nav {

// The recording service can be used to record a Graph Nav map (containing waypoints and edges).
// The recorded map can consist of the following:
// * Chain: a topological arrangement of waypoints/edges where every waypoint has at least 1
// but at most 2 edges attached to it.
// * Branch: separate Chains can be joined together into a Branch at exactly one waypoint.
// When recording a map using the recording service, a common pattern is:
// * Call StartRecording to begin recording a chain of waypoints.
// * Call SetRecordingEnvironment to define persistent annotations for the edges and waypoints.
// * While recording, call GetRecordStatus to get feedback on the state of the recording service.
// * While recording, call GetMapStatus to determine what waypoints have been created.
// * Optionally call CreateWaypoint to create waypoints in specific locations.
// * Call StopRecording to pause the recording service and create branches.
// * While recording (or after completing recording), call DownloadWaypoint/Edge Snapshot rpc's
// from the GraphNavService to download the large sensor data with the map.
class GraphNavRecordingService final {
 public:
  static constexpr char const* service_full_name() {
    return "bosdyn.api.graph_nav.GraphNavRecordingService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Start recording the map from the current localization.
    // Creates a waypoint if you are starting to record. Otherwise, waits until you are
    // sufficiently far away from the previous waypoint.
    virtual ::grpc::Status StartRecording(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::StartRecordingRequest& request, ::bosdyn::api::graph_nav::StartRecordingResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::StartRecordingResponse>> AsyncStartRecording(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::StartRecordingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::StartRecordingResponse>>(AsyncStartRecordingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::StartRecordingResponse>> PrepareAsyncStartRecording(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::StartRecordingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::StartRecordingResponse>>(PrepareAsyncStartRecordingRaw(context, request, cq));
    }
    // Stop recording the map from the current localization.
    virtual ::grpc::Status StopRecording(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::StopRecordingRequest& request, ::bosdyn::api::graph_nav::StopRecordingResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::StopRecordingResponse>> AsyncStopRecording(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::StopRecordingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::StopRecordingResponse>>(AsyncStopRecordingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::StopRecordingResponse>> PrepareAsyncStopRecording(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::StopRecordingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::StopRecordingResponse>>(PrepareAsyncStopRecordingRaw(context, request, cq));
    }
    // Create a new waypoint at the current localization.
    virtual ::grpc::Status CreateWaypoint(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::CreateWaypointRequest& request, ::bosdyn::api::graph_nav::CreateWaypointResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::CreateWaypointResponse>> AsyncCreateWaypoint(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::CreateWaypointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::CreateWaypointResponse>>(AsyncCreateWaypointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::CreateWaypointResponse>> PrepareAsyncCreateWaypoint(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::CreateWaypointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::CreateWaypointResponse>>(PrepareAsyncCreateWaypointRaw(context, request, cq));
    }
    // Set the environmnent and name prefix to use for the recording.
    virtual ::grpc::Status SetRecordingEnvironment(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::SetRecordingEnvironmentRequest& request, ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse>> AsyncSetRecordingEnvironment(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::SetRecordingEnvironmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse>>(AsyncSetRecordingEnvironmentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse>> PrepareAsyncSetRecordingEnvironment(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::SetRecordingEnvironmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse>>(PrepareAsyncSetRecordingEnvironmentRaw(context, request, cq));
    }
    // Create an arbitrary edge between two waypoints.
    virtual ::grpc::Status CreateEdge(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::CreateEdgeRequest& request, ::bosdyn::api::graph_nav::CreateEdgeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::CreateEdgeResponse>> AsyncCreateEdge(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::CreateEdgeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::CreateEdgeResponse>>(AsyncCreateEdgeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::CreateEdgeResponse>> PrepareAsyncCreateEdge(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::CreateEdgeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::CreateEdgeResponse>>(PrepareAsyncCreateEdgeRaw(context, request, cq));
    }
    // Tells the client the internal state of the record service, and the structure of the map that has been recorded
    // so far.
    virtual ::grpc::Status GetRecordStatus(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::GetRecordStatusRequest& request, ::bosdyn::api::graph_nav::GetRecordStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::GetRecordStatusResponse>> AsyncGetRecordStatus(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::GetRecordStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::GetRecordStatusResponse>>(AsyncGetRecordStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::GetRecordStatusResponse>> PrepareAsyncGetRecordStatus(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::GetRecordStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::GetRecordStatusResponse>>(PrepareAsyncGetRecordStatusRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Start recording the map from the current localization.
      // Creates a waypoint if you are starting to record. Otherwise, waits until you are
      // sufficiently far away from the previous waypoint.
      virtual void StartRecording(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::StartRecordingRequest* request, ::bosdyn::api::graph_nav::StartRecordingResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StartRecording(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::StartRecordingResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StartRecording(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::StartRecordingRequest* request, ::bosdyn::api::graph_nav::StartRecordingResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void StartRecording(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::StartRecordingRequest* request, ::bosdyn::api::graph_nav::StartRecordingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StartRecording(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::StartRecordingResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void StartRecording(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::StartRecordingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Stop recording the map from the current localization.
      virtual void StopRecording(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::StopRecordingRequest* request, ::bosdyn::api::graph_nav::StopRecordingResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StopRecording(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::StopRecordingResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StopRecording(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::StopRecordingRequest* request, ::bosdyn::api::graph_nav::StopRecordingResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void StopRecording(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::StopRecordingRequest* request, ::bosdyn::api::graph_nav::StopRecordingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StopRecording(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::StopRecordingResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void StopRecording(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::StopRecordingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Create a new waypoint at the current localization.
      virtual void CreateWaypoint(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::CreateWaypointRequest* request, ::bosdyn::api::graph_nav::CreateWaypointResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateWaypoint(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::CreateWaypointResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateWaypoint(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::CreateWaypointRequest* request, ::bosdyn::api::graph_nav::CreateWaypointResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateWaypoint(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::CreateWaypointRequest* request, ::bosdyn::api::graph_nav::CreateWaypointResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateWaypoint(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::CreateWaypointResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateWaypoint(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::CreateWaypointResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Set the environmnent and name prefix to use for the recording.
      virtual void SetRecordingEnvironment(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::SetRecordingEnvironmentRequest* request, ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetRecordingEnvironment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetRecordingEnvironment(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::SetRecordingEnvironmentRequest* request, ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetRecordingEnvironment(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::SetRecordingEnvironmentRequest* request, ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetRecordingEnvironment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetRecordingEnvironment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Create an arbitrary edge between two waypoints.
      virtual void CreateEdge(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::CreateEdgeRequest* request, ::bosdyn::api::graph_nav::CreateEdgeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateEdge(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::CreateEdgeResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateEdge(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::CreateEdgeRequest* request, ::bosdyn::api::graph_nav::CreateEdgeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateEdge(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::CreateEdgeRequest* request, ::bosdyn::api::graph_nav::CreateEdgeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateEdge(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::CreateEdgeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateEdge(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::CreateEdgeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Tells the client the internal state of the record service, and the structure of the map that has been recorded
      // so far.
      virtual void GetRecordStatus(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::GetRecordStatusRequest* request, ::bosdyn::api::graph_nav::GetRecordStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRecordStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::GetRecordStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetRecordStatus(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::GetRecordStatusRequest* request, ::bosdyn::api::graph_nav::GetRecordStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetRecordStatus(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::GetRecordStatusRequest* request, ::bosdyn::api::graph_nav::GetRecordStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetRecordStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::GetRecordStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetRecordStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::GetRecordStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::StartRecordingResponse>* AsyncStartRecordingRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::StartRecordingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::StartRecordingResponse>* PrepareAsyncStartRecordingRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::StartRecordingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::StopRecordingResponse>* AsyncStopRecordingRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::StopRecordingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::StopRecordingResponse>* PrepareAsyncStopRecordingRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::StopRecordingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::CreateWaypointResponse>* AsyncCreateWaypointRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::CreateWaypointRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::CreateWaypointResponse>* PrepareAsyncCreateWaypointRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::CreateWaypointRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse>* AsyncSetRecordingEnvironmentRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::SetRecordingEnvironmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse>* PrepareAsyncSetRecordingEnvironmentRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::SetRecordingEnvironmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::CreateEdgeResponse>* AsyncCreateEdgeRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::CreateEdgeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::CreateEdgeResponse>* PrepareAsyncCreateEdgeRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::CreateEdgeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::GetRecordStatusResponse>* AsyncGetRecordStatusRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::GetRecordStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::GetRecordStatusResponse>* PrepareAsyncGetRecordStatusRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::GetRecordStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status StartRecording(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::StartRecordingRequest& request, ::bosdyn::api::graph_nav::StartRecordingResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::StartRecordingResponse>> AsyncStartRecording(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::StartRecordingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::StartRecordingResponse>>(AsyncStartRecordingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::StartRecordingResponse>> PrepareAsyncStartRecording(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::StartRecordingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::StartRecordingResponse>>(PrepareAsyncStartRecordingRaw(context, request, cq));
    }
    ::grpc::Status StopRecording(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::StopRecordingRequest& request, ::bosdyn::api::graph_nav::StopRecordingResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::StopRecordingResponse>> AsyncStopRecording(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::StopRecordingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::StopRecordingResponse>>(AsyncStopRecordingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::StopRecordingResponse>> PrepareAsyncStopRecording(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::StopRecordingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::StopRecordingResponse>>(PrepareAsyncStopRecordingRaw(context, request, cq));
    }
    ::grpc::Status CreateWaypoint(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::CreateWaypointRequest& request, ::bosdyn::api::graph_nav::CreateWaypointResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::CreateWaypointResponse>> AsyncCreateWaypoint(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::CreateWaypointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::CreateWaypointResponse>>(AsyncCreateWaypointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::CreateWaypointResponse>> PrepareAsyncCreateWaypoint(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::CreateWaypointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::CreateWaypointResponse>>(PrepareAsyncCreateWaypointRaw(context, request, cq));
    }
    ::grpc::Status SetRecordingEnvironment(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::SetRecordingEnvironmentRequest& request, ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse>> AsyncSetRecordingEnvironment(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::SetRecordingEnvironmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse>>(AsyncSetRecordingEnvironmentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse>> PrepareAsyncSetRecordingEnvironment(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::SetRecordingEnvironmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse>>(PrepareAsyncSetRecordingEnvironmentRaw(context, request, cq));
    }
    ::grpc::Status CreateEdge(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::CreateEdgeRequest& request, ::bosdyn::api::graph_nav::CreateEdgeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::CreateEdgeResponse>> AsyncCreateEdge(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::CreateEdgeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::CreateEdgeResponse>>(AsyncCreateEdgeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::CreateEdgeResponse>> PrepareAsyncCreateEdge(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::CreateEdgeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::CreateEdgeResponse>>(PrepareAsyncCreateEdgeRaw(context, request, cq));
    }
    ::grpc::Status GetRecordStatus(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::GetRecordStatusRequest& request, ::bosdyn::api::graph_nav::GetRecordStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::GetRecordStatusResponse>> AsyncGetRecordStatus(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::GetRecordStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::GetRecordStatusResponse>>(AsyncGetRecordStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::GetRecordStatusResponse>> PrepareAsyncGetRecordStatus(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::GetRecordStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::GetRecordStatusResponse>>(PrepareAsyncGetRecordStatusRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void StartRecording(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::StartRecordingRequest* request, ::bosdyn::api::graph_nav::StartRecordingResponse* response, std::function<void(::grpc::Status)>) override;
      void StartRecording(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::StartRecordingResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StartRecording(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::StartRecordingRequest* request, ::bosdyn::api::graph_nav::StartRecordingResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void StartRecording(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::StartRecordingRequest* request, ::bosdyn::api::graph_nav::StartRecordingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StartRecording(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::StartRecordingResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void StartRecording(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::StartRecordingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void StopRecording(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::StopRecordingRequest* request, ::bosdyn::api::graph_nav::StopRecordingResponse* response, std::function<void(::grpc::Status)>) override;
      void StopRecording(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::StopRecordingResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StopRecording(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::StopRecordingRequest* request, ::bosdyn::api::graph_nav::StopRecordingResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void StopRecording(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::StopRecordingRequest* request, ::bosdyn::api::graph_nav::StopRecordingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StopRecording(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::StopRecordingResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void StopRecording(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::StopRecordingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CreateWaypoint(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::CreateWaypointRequest* request, ::bosdyn::api::graph_nav::CreateWaypointResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateWaypoint(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::CreateWaypointResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateWaypoint(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::CreateWaypointRequest* request, ::bosdyn::api::graph_nav::CreateWaypointResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateWaypoint(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::CreateWaypointRequest* request, ::bosdyn::api::graph_nav::CreateWaypointResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateWaypoint(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::CreateWaypointResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateWaypoint(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::CreateWaypointResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetRecordingEnvironment(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::SetRecordingEnvironmentRequest* request, ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse* response, std::function<void(::grpc::Status)>) override;
      void SetRecordingEnvironment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetRecordingEnvironment(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::SetRecordingEnvironmentRequest* request, ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetRecordingEnvironment(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::SetRecordingEnvironmentRequest* request, ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetRecordingEnvironment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetRecordingEnvironment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CreateEdge(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::CreateEdgeRequest* request, ::bosdyn::api::graph_nav::CreateEdgeResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateEdge(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::CreateEdgeResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateEdge(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::CreateEdgeRequest* request, ::bosdyn::api::graph_nav::CreateEdgeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateEdge(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::CreateEdgeRequest* request, ::bosdyn::api::graph_nav::CreateEdgeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateEdge(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::CreateEdgeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateEdge(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::CreateEdgeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetRecordStatus(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::GetRecordStatusRequest* request, ::bosdyn::api::graph_nav::GetRecordStatusResponse* response, std::function<void(::grpc::Status)>) override;
      void GetRecordStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::GetRecordStatusResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetRecordStatus(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::GetRecordStatusRequest* request, ::bosdyn::api::graph_nav::GetRecordStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetRecordStatus(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::GetRecordStatusRequest* request, ::bosdyn::api::graph_nav::GetRecordStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetRecordStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::GetRecordStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetRecordStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::GetRecordStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::StartRecordingResponse>* AsyncStartRecordingRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::StartRecordingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::StartRecordingResponse>* PrepareAsyncStartRecordingRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::StartRecordingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::StopRecordingResponse>* AsyncStopRecordingRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::StopRecordingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::StopRecordingResponse>* PrepareAsyncStopRecordingRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::StopRecordingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::CreateWaypointResponse>* AsyncCreateWaypointRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::CreateWaypointRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::CreateWaypointResponse>* PrepareAsyncCreateWaypointRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::CreateWaypointRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse>* AsyncSetRecordingEnvironmentRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::SetRecordingEnvironmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse>* PrepareAsyncSetRecordingEnvironmentRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::SetRecordingEnvironmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::CreateEdgeResponse>* AsyncCreateEdgeRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::CreateEdgeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::CreateEdgeResponse>* PrepareAsyncCreateEdgeRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::CreateEdgeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::GetRecordStatusResponse>* AsyncGetRecordStatusRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::GetRecordStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::GetRecordStatusResponse>* PrepareAsyncGetRecordStatusRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::GetRecordStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_StartRecording_;
    const ::grpc::internal::RpcMethod rpcmethod_StopRecording_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateWaypoint_;
    const ::grpc::internal::RpcMethod rpcmethod_SetRecordingEnvironment_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateEdge_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRecordStatus_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Start recording the map from the current localization.
    // Creates a waypoint if you are starting to record. Otherwise, waits until you are
    // sufficiently far away from the previous waypoint.
    virtual ::grpc::Status StartRecording(::grpc::ServerContext* context, const ::bosdyn::api::graph_nav::StartRecordingRequest* request, ::bosdyn::api::graph_nav::StartRecordingResponse* response);
    // Stop recording the map from the current localization.
    virtual ::grpc::Status StopRecording(::grpc::ServerContext* context, const ::bosdyn::api::graph_nav::StopRecordingRequest* request, ::bosdyn::api::graph_nav::StopRecordingResponse* response);
    // Create a new waypoint at the current localization.
    virtual ::grpc::Status CreateWaypoint(::grpc::ServerContext* context, const ::bosdyn::api::graph_nav::CreateWaypointRequest* request, ::bosdyn::api::graph_nav::CreateWaypointResponse* response);
    // Set the environmnent and name prefix to use for the recording.
    virtual ::grpc::Status SetRecordingEnvironment(::grpc::ServerContext* context, const ::bosdyn::api::graph_nav::SetRecordingEnvironmentRequest* request, ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse* response);
    // Create an arbitrary edge between two waypoints.
    virtual ::grpc::Status CreateEdge(::grpc::ServerContext* context, const ::bosdyn::api::graph_nav::CreateEdgeRequest* request, ::bosdyn::api::graph_nav::CreateEdgeResponse* response);
    // Tells the client the internal state of the record service, and the structure of the map that has been recorded
    // so far.
    virtual ::grpc::Status GetRecordStatus(::grpc::ServerContext* context, const ::bosdyn::api::graph_nav::GetRecordStatusRequest* request, ::bosdyn::api::graph_nav::GetRecordStatusResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_StartRecording : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StartRecording() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_StartRecording() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartRecording(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::StartRecordingRequest* /*request*/, ::bosdyn::api::graph_nav::StartRecordingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartRecording(::grpc::ServerContext* context, ::bosdyn::api::graph_nav::StartRecordingRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::graph_nav::StartRecordingResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StopRecording : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StopRecording() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_StopRecording() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopRecording(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::StopRecordingRequest* /*request*/, ::bosdyn::api::graph_nav::StopRecordingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopRecording(::grpc::ServerContext* context, ::bosdyn::api::graph_nav::StopRecordingRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::graph_nav::StopRecordingResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateWaypoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateWaypoint() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CreateWaypoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateWaypoint(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::CreateWaypointRequest* /*request*/, ::bosdyn::api::graph_nav::CreateWaypointResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateWaypoint(::grpc::ServerContext* context, ::bosdyn::api::graph_nav::CreateWaypointRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::graph_nav::CreateWaypointResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetRecordingEnvironment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetRecordingEnvironment() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SetRecordingEnvironment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRecordingEnvironment(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::SetRecordingEnvironmentRequest* /*request*/, ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetRecordingEnvironment(::grpc::ServerContext* context, ::bosdyn::api::graph_nav::SetRecordingEnvironmentRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateEdge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateEdge() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_CreateEdge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateEdge(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::CreateEdgeRequest* /*request*/, ::bosdyn::api::graph_nav::CreateEdgeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateEdge(::grpc::ServerContext* context, ::bosdyn::api::graph_nav::CreateEdgeRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::graph_nav::CreateEdgeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRecordStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRecordStatus() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetRecordStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRecordStatus(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::GetRecordStatusRequest* /*request*/, ::bosdyn::api::graph_nav::GetRecordStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRecordStatus(::grpc::ServerContext* context, ::bosdyn::api::graph_nav::GetRecordStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::graph_nav::GetRecordStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_StartRecording<WithAsyncMethod_StopRecording<WithAsyncMethod_CreateWaypoint<WithAsyncMethod_SetRecordingEnvironment<WithAsyncMethod_CreateEdge<WithAsyncMethod_GetRecordStatus<Service > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_StartRecording : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_StartRecording() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::graph_nav::StartRecordingRequest, ::bosdyn::api::graph_nav::StartRecordingResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bosdyn::api::graph_nav::StartRecordingRequest* request, ::bosdyn::api::graph_nav::StartRecordingResponse* response) { return this->StartRecording(context, request, response); }));}
    void SetMessageAllocatorFor_StartRecording(
        ::grpc::experimental::MessageAllocator< ::bosdyn::api::graph_nav::StartRecordingRequest, ::bosdyn::api::graph_nav::StartRecordingResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::graph_nav::StartRecordingRequest, ::bosdyn::api::graph_nav::StartRecordingResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_StartRecording() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartRecording(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::StartRecordingRequest* /*request*/, ::bosdyn::api::graph_nav::StartRecordingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StartRecording(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::graph_nav::StartRecordingRequest* /*request*/, ::bosdyn::api::graph_nav::StartRecordingResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StartRecording(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bosdyn::api::graph_nav::StartRecordingRequest* /*request*/, ::bosdyn::api::graph_nav::StartRecordingResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_StopRecording : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_StopRecording() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::graph_nav::StopRecordingRequest, ::bosdyn::api::graph_nav::StopRecordingResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bosdyn::api::graph_nav::StopRecordingRequest* request, ::bosdyn::api::graph_nav::StopRecordingResponse* response) { return this->StopRecording(context, request, response); }));}
    void SetMessageAllocatorFor_StopRecording(
        ::grpc::experimental::MessageAllocator< ::bosdyn::api::graph_nav::StopRecordingRequest, ::bosdyn::api::graph_nav::StopRecordingResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::graph_nav::StopRecordingRequest, ::bosdyn::api::graph_nav::StopRecordingResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_StopRecording() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopRecording(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::StopRecordingRequest* /*request*/, ::bosdyn::api::graph_nav::StopRecordingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StopRecording(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::graph_nav::StopRecordingRequest* /*request*/, ::bosdyn::api::graph_nav::StopRecordingResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StopRecording(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bosdyn::api::graph_nav::StopRecordingRequest* /*request*/, ::bosdyn::api::graph_nav::StopRecordingResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateWaypoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateWaypoint() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::graph_nav::CreateWaypointRequest, ::bosdyn::api::graph_nav::CreateWaypointResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bosdyn::api::graph_nav::CreateWaypointRequest* request, ::bosdyn::api::graph_nav::CreateWaypointResponse* response) { return this->CreateWaypoint(context, request, response); }));}
    void SetMessageAllocatorFor_CreateWaypoint(
        ::grpc::experimental::MessageAllocator< ::bosdyn::api::graph_nav::CreateWaypointRequest, ::bosdyn::api::graph_nav::CreateWaypointResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::graph_nav::CreateWaypointRequest, ::bosdyn::api::graph_nav::CreateWaypointResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateWaypoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateWaypoint(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::CreateWaypointRequest* /*request*/, ::bosdyn::api::graph_nav::CreateWaypointResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateWaypoint(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::graph_nav::CreateWaypointRequest* /*request*/, ::bosdyn::api::graph_nav::CreateWaypointResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateWaypoint(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bosdyn::api::graph_nav::CreateWaypointRequest* /*request*/, ::bosdyn::api::graph_nav::CreateWaypointResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetRecordingEnvironment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetRecordingEnvironment() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::graph_nav::SetRecordingEnvironmentRequest, ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bosdyn::api::graph_nav::SetRecordingEnvironmentRequest* request, ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse* response) { return this->SetRecordingEnvironment(context, request, response); }));}
    void SetMessageAllocatorFor_SetRecordingEnvironment(
        ::grpc::experimental::MessageAllocator< ::bosdyn::api::graph_nav::SetRecordingEnvironmentRequest, ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::graph_nav::SetRecordingEnvironmentRequest, ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetRecordingEnvironment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRecordingEnvironment(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::SetRecordingEnvironmentRequest* /*request*/, ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetRecordingEnvironment(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::graph_nav::SetRecordingEnvironmentRequest* /*request*/, ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetRecordingEnvironment(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bosdyn::api::graph_nav::SetRecordingEnvironmentRequest* /*request*/, ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateEdge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateEdge() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::graph_nav::CreateEdgeRequest, ::bosdyn::api::graph_nav::CreateEdgeResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bosdyn::api::graph_nav::CreateEdgeRequest* request, ::bosdyn::api::graph_nav::CreateEdgeResponse* response) { return this->CreateEdge(context, request, response); }));}
    void SetMessageAllocatorFor_CreateEdge(
        ::grpc::experimental::MessageAllocator< ::bosdyn::api::graph_nav::CreateEdgeRequest, ::bosdyn::api::graph_nav::CreateEdgeResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::graph_nav::CreateEdgeRequest, ::bosdyn::api::graph_nav::CreateEdgeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateEdge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateEdge(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::CreateEdgeRequest* /*request*/, ::bosdyn::api::graph_nav::CreateEdgeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateEdge(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::graph_nav::CreateEdgeRequest* /*request*/, ::bosdyn::api::graph_nav::CreateEdgeResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateEdge(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bosdyn::api::graph_nav::CreateEdgeRequest* /*request*/, ::bosdyn::api::graph_nav::CreateEdgeResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetRecordStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetRecordStatus() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::graph_nav::GetRecordStatusRequest, ::bosdyn::api::graph_nav::GetRecordStatusResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bosdyn::api::graph_nav::GetRecordStatusRequest* request, ::bosdyn::api::graph_nav::GetRecordStatusResponse* response) { return this->GetRecordStatus(context, request, response); }));}
    void SetMessageAllocatorFor_GetRecordStatus(
        ::grpc::experimental::MessageAllocator< ::bosdyn::api::graph_nav::GetRecordStatusRequest, ::bosdyn::api::graph_nav::GetRecordStatusResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::graph_nav::GetRecordStatusRequest, ::bosdyn::api::graph_nav::GetRecordStatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetRecordStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRecordStatus(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::GetRecordStatusRequest* /*request*/, ::bosdyn::api::graph_nav::GetRecordStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetRecordStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::graph_nav::GetRecordStatusRequest* /*request*/, ::bosdyn::api::graph_nav::GetRecordStatusResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetRecordStatus(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bosdyn::api::graph_nav::GetRecordStatusRequest* /*request*/, ::bosdyn::api::graph_nav::GetRecordStatusResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_StartRecording<ExperimentalWithCallbackMethod_StopRecording<ExperimentalWithCallbackMethod_CreateWaypoint<ExperimentalWithCallbackMethod_SetRecordingEnvironment<ExperimentalWithCallbackMethod_CreateEdge<ExperimentalWithCallbackMethod_GetRecordStatus<Service > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_StartRecording<ExperimentalWithCallbackMethod_StopRecording<ExperimentalWithCallbackMethod_CreateWaypoint<ExperimentalWithCallbackMethod_SetRecordingEnvironment<ExperimentalWithCallbackMethod_CreateEdge<ExperimentalWithCallbackMethod_GetRecordStatus<Service > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_StartRecording : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StartRecording() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_StartRecording() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartRecording(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::StartRecordingRequest* /*request*/, ::bosdyn::api::graph_nav::StartRecordingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StopRecording : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StopRecording() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_StopRecording() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopRecording(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::StopRecordingRequest* /*request*/, ::bosdyn::api::graph_nav::StopRecordingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateWaypoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateWaypoint() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CreateWaypoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateWaypoint(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::CreateWaypointRequest* /*request*/, ::bosdyn::api::graph_nav::CreateWaypointResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetRecordingEnvironment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetRecordingEnvironment() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SetRecordingEnvironment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRecordingEnvironment(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::SetRecordingEnvironmentRequest* /*request*/, ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateEdge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateEdge() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_CreateEdge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateEdge(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::CreateEdgeRequest* /*request*/, ::bosdyn::api::graph_nav::CreateEdgeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRecordStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRecordStatus() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetRecordStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRecordStatus(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::GetRecordStatusRequest* /*request*/, ::bosdyn::api::graph_nav::GetRecordStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_StartRecording : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StartRecording() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_StartRecording() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartRecording(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::StartRecordingRequest* /*request*/, ::bosdyn::api::graph_nav::StartRecordingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartRecording(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StopRecording : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StopRecording() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_StopRecording() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopRecording(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::StopRecordingRequest* /*request*/, ::bosdyn::api::graph_nav::StopRecordingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopRecording(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateWaypoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateWaypoint() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CreateWaypoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateWaypoint(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::CreateWaypointRequest* /*request*/, ::bosdyn::api::graph_nav::CreateWaypointResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateWaypoint(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetRecordingEnvironment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetRecordingEnvironment() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SetRecordingEnvironment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRecordingEnvironment(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::SetRecordingEnvironmentRequest* /*request*/, ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetRecordingEnvironment(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateEdge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateEdge() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_CreateEdge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateEdge(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::CreateEdgeRequest* /*request*/, ::bosdyn::api::graph_nav::CreateEdgeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateEdge(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRecordStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRecordStatus() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetRecordStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRecordStatus(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::GetRecordStatusRequest* /*request*/, ::bosdyn::api::graph_nav::GetRecordStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRecordStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_StartRecording : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_StartRecording() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StartRecording(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_StartRecording() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartRecording(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::StartRecordingRequest* /*request*/, ::bosdyn::api::graph_nav::StartRecordingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StartRecording(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StartRecording(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_StopRecording : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_StopRecording() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StopRecording(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_StopRecording() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopRecording(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::StopRecordingRequest* /*request*/, ::bosdyn::api::graph_nav::StopRecordingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StopRecording(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StopRecording(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateWaypoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateWaypoint() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateWaypoint(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateWaypoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateWaypoint(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::CreateWaypointRequest* /*request*/, ::bosdyn::api::graph_nav::CreateWaypointResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateWaypoint(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateWaypoint(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetRecordingEnvironment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetRecordingEnvironment() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetRecordingEnvironment(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetRecordingEnvironment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRecordingEnvironment(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::SetRecordingEnvironmentRequest* /*request*/, ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetRecordingEnvironment(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetRecordingEnvironment(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateEdge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateEdge() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateEdge(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateEdge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateEdge(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::CreateEdgeRequest* /*request*/, ::bosdyn::api::graph_nav::CreateEdgeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateEdge(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateEdge(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetRecordStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetRecordStatus() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetRecordStatus(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetRecordStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRecordStatus(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::GetRecordStatusRequest* /*request*/, ::bosdyn::api::graph_nav::GetRecordStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetRecordStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetRecordStatus(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StartRecording : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StartRecording() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::graph_nav::StartRecordingRequest, ::bosdyn::api::graph_nav::StartRecordingResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::graph_nav::StartRecordingRequest, ::bosdyn::api::graph_nav::StartRecordingResponse>* streamer) {
                       return this->StreamedStartRecording(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StartRecording() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StartRecording(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::StartRecordingRequest* /*request*/, ::bosdyn::api::graph_nav::StartRecordingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStartRecording(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::graph_nav::StartRecordingRequest,::bosdyn::api::graph_nav::StartRecordingResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StopRecording : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StopRecording() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::graph_nav::StopRecordingRequest, ::bosdyn::api::graph_nav::StopRecordingResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::graph_nav::StopRecordingRequest, ::bosdyn::api::graph_nav::StopRecordingResponse>* streamer) {
                       return this->StreamedStopRecording(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StopRecording() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StopRecording(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::StopRecordingRequest* /*request*/, ::bosdyn::api::graph_nav::StopRecordingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStopRecording(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::graph_nav::StopRecordingRequest,::bosdyn::api::graph_nav::StopRecordingResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateWaypoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateWaypoint() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::graph_nav::CreateWaypointRequest, ::bosdyn::api::graph_nav::CreateWaypointResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::graph_nav::CreateWaypointRequest, ::bosdyn::api::graph_nav::CreateWaypointResponse>* streamer) {
                       return this->StreamedCreateWaypoint(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateWaypoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateWaypoint(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::CreateWaypointRequest* /*request*/, ::bosdyn::api::graph_nav::CreateWaypointResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateWaypoint(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::graph_nav::CreateWaypointRequest,::bosdyn::api::graph_nav::CreateWaypointResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetRecordingEnvironment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetRecordingEnvironment() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::graph_nav::SetRecordingEnvironmentRequest, ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::graph_nav::SetRecordingEnvironmentRequest, ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse>* streamer) {
                       return this->StreamedSetRecordingEnvironment(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetRecordingEnvironment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetRecordingEnvironment(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::SetRecordingEnvironmentRequest* /*request*/, ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetRecordingEnvironment(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::graph_nav::SetRecordingEnvironmentRequest,::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateEdge : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateEdge() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::graph_nav::CreateEdgeRequest, ::bosdyn::api::graph_nav::CreateEdgeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::graph_nav::CreateEdgeRequest, ::bosdyn::api::graph_nav::CreateEdgeResponse>* streamer) {
                       return this->StreamedCreateEdge(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateEdge() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateEdge(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::CreateEdgeRequest* /*request*/, ::bosdyn::api::graph_nav::CreateEdgeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateEdge(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::graph_nav::CreateEdgeRequest,::bosdyn::api::graph_nav::CreateEdgeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRecordStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetRecordStatus() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::graph_nav::GetRecordStatusRequest, ::bosdyn::api::graph_nav::GetRecordStatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::graph_nav::GetRecordStatusRequest, ::bosdyn::api::graph_nav::GetRecordStatusResponse>* streamer) {
                       return this->StreamedGetRecordStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetRecordStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRecordStatus(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::GetRecordStatusRequest* /*request*/, ::bosdyn::api::graph_nav::GetRecordStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRecordStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::graph_nav::GetRecordStatusRequest,::bosdyn::api::graph_nav::GetRecordStatusResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_StartRecording<WithStreamedUnaryMethod_StopRecording<WithStreamedUnaryMethod_CreateWaypoint<WithStreamedUnaryMethod_SetRecordingEnvironment<WithStreamedUnaryMethod_CreateEdge<WithStreamedUnaryMethod_GetRecordStatus<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_StartRecording<WithStreamedUnaryMethod_StopRecording<WithStreamedUnaryMethod_CreateWaypoint<WithStreamedUnaryMethod_SetRecordingEnvironment<WithStreamedUnaryMethod_CreateEdge<WithStreamedUnaryMethod_GetRecordStatus<Service > > > > > > StreamedService;
};

}  // namespace graph_nav
}  // namespace api
}  // namespace bosdyn


#endif  // GRPC_bosdyn_2fapi_2fgraph_5fnav_2frecording_5fservice_2eproto__INCLUDED
