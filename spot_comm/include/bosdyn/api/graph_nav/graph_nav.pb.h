// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/graph_nav/graph_nav.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "bosdyn/api/data_chunk.pb.h"
#include "bosdyn/api/geometry.pb.h"
#include "bosdyn/api/graph_nav/nav.pb.h"
#include "bosdyn/api/graph_nav/map.pb.h"
#include "bosdyn/api/header.pb.h"
#include "bosdyn/api/lease.pb.h"
#include "bosdyn/api/license.pb.h"
#include "bosdyn/api/robot_state.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[29]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto;
namespace bosdyn {
namespace api {
namespace graph_nav {
class ClearGraphRequest;
class ClearGraphRequestDefaultTypeInternal;
extern ClearGraphRequestDefaultTypeInternal _ClearGraphRequest_default_instance_;
class ClearGraphResponse;
class ClearGraphResponseDefaultTypeInternal;
extern ClearGraphResponseDefaultTypeInternal _ClearGraphResponse_default_instance_;
class DownloadEdgeSnapshotRequest;
class DownloadEdgeSnapshotRequestDefaultTypeInternal;
extern DownloadEdgeSnapshotRequestDefaultTypeInternal _DownloadEdgeSnapshotRequest_default_instance_;
class DownloadEdgeSnapshotResponse;
class DownloadEdgeSnapshotResponseDefaultTypeInternal;
extern DownloadEdgeSnapshotResponseDefaultTypeInternal _DownloadEdgeSnapshotResponse_default_instance_;
class DownloadGraphRequest;
class DownloadGraphRequestDefaultTypeInternal;
extern DownloadGraphRequestDefaultTypeInternal _DownloadGraphRequest_default_instance_;
class DownloadGraphResponse;
class DownloadGraphResponseDefaultTypeInternal;
extern DownloadGraphResponseDefaultTypeInternal _DownloadGraphResponse_default_instance_;
class DownloadWaypointSnapshotRequest;
class DownloadWaypointSnapshotRequestDefaultTypeInternal;
extern DownloadWaypointSnapshotRequestDefaultTypeInternal _DownloadWaypointSnapshotRequest_default_instance_;
class DownloadWaypointSnapshotResponse;
class DownloadWaypointSnapshotResponseDefaultTypeInternal;
extern DownloadWaypointSnapshotResponseDefaultTypeInternal _DownloadWaypointSnapshotResponse_default_instance_;
class GetLocalizationStateRequest;
class GetLocalizationStateRequestDefaultTypeInternal;
extern GetLocalizationStateRequestDefaultTypeInternal _GetLocalizationStateRequest_default_instance_;
class GetLocalizationStateResponse;
class GetLocalizationStateResponseDefaultTypeInternal;
extern GetLocalizationStateResponseDefaultTypeInternal _GetLocalizationStateResponse_default_instance_;
class LostDetectorState;
class LostDetectorStateDefaultTypeInternal;
extern LostDetectorStateDefaultTypeInternal _LostDetectorState_default_instance_;
class NavigateRouteRequest;
class NavigateRouteRequestDefaultTypeInternal;
extern NavigateRouteRequestDefaultTypeInternal _NavigateRouteRequest_default_instance_;
class NavigateRouteResponse;
class NavigateRouteResponseDefaultTypeInternal;
extern NavigateRouteResponseDefaultTypeInternal _NavigateRouteResponse_default_instance_;
class NavigateToRequest;
class NavigateToRequestDefaultTypeInternal;
extern NavigateToRequestDefaultTypeInternal _NavigateToRequest_default_instance_;
class NavigateToResponse;
class NavigateToResponseDefaultTypeInternal;
extern NavigateToResponseDefaultTypeInternal _NavigateToResponse_default_instance_;
class NavigationFeedbackRequest;
class NavigationFeedbackRequestDefaultTypeInternal;
extern NavigationFeedbackRequestDefaultTypeInternal _NavigationFeedbackRequest_default_instance_;
class NavigationFeedbackResponse;
class NavigationFeedbackResponseDefaultTypeInternal;
extern NavigationFeedbackResponseDefaultTypeInternal _NavigationFeedbackResponse_default_instance_;
class RemotePointCloudStatus;
class RemotePointCloudStatusDefaultTypeInternal;
extern RemotePointCloudStatusDefaultTypeInternal _RemotePointCloudStatus_default_instance_;
class RouteGenParams;
class RouteGenParamsDefaultTypeInternal;
extern RouteGenParamsDefaultTypeInternal _RouteGenParams_default_instance_;
class SetLocalizationRequest;
class SetLocalizationRequestDefaultTypeInternal;
extern SetLocalizationRequestDefaultTypeInternal _SetLocalizationRequest_default_instance_;
class SetLocalizationResponse;
class SetLocalizationResponseDefaultTypeInternal;
extern SetLocalizationResponseDefaultTypeInternal _SetLocalizationResponse_default_instance_;
class SetLocalizationResponse_SuspectedAmbiguity;
class SetLocalizationResponse_SuspectedAmbiguityDefaultTypeInternal;
extern SetLocalizationResponse_SuspectedAmbiguityDefaultTypeInternal _SetLocalizationResponse_SuspectedAmbiguity_default_instance_;
class TravelParams;
class TravelParamsDefaultTypeInternal;
extern TravelParamsDefaultTypeInternal _TravelParams_default_instance_;
class UploadEdgeSnapshotRequest;
class UploadEdgeSnapshotRequestDefaultTypeInternal;
extern UploadEdgeSnapshotRequestDefaultTypeInternal _UploadEdgeSnapshotRequest_default_instance_;
class UploadEdgeSnapshotResponse;
class UploadEdgeSnapshotResponseDefaultTypeInternal;
extern UploadEdgeSnapshotResponseDefaultTypeInternal _UploadEdgeSnapshotResponse_default_instance_;
class UploadGraphRequest;
class UploadGraphRequestDefaultTypeInternal;
extern UploadGraphRequestDefaultTypeInternal _UploadGraphRequest_default_instance_;
class UploadGraphResponse;
class UploadGraphResponseDefaultTypeInternal;
extern UploadGraphResponseDefaultTypeInternal _UploadGraphResponse_default_instance_;
class UploadWaypointSnapshotRequest;
class UploadWaypointSnapshotRequestDefaultTypeInternal;
extern UploadWaypointSnapshotRequestDefaultTypeInternal _UploadWaypointSnapshotRequest_default_instance_;
class UploadWaypointSnapshotResponse;
class UploadWaypointSnapshotResponseDefaultTypeInternal;
extern UploadWaypointSnapshotResponseDefaultTypeInternal _UploadWaypointSnapshotResponse_default_instance_;
}  // namespace graph_nav
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> ::bosdyn::api::graph_nav::ClearGraphRequest* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::ClearGraphRequest>(Arena*);
template<> ::bosdyn::api::graph_nav::ClearGraphResponse* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::ClearGraphResponse>(Arena*);
template<> ::bosdyn::api::graph_nav::DownloadEdgeSnapshotRequest* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::DownloadEdgeSnapshotRequest>(Arena*);
template<> ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse>(Arena*);
template<> ::bosdyn::api::graph_nav::DownloadGraphRequest* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::DownloadGraphRequest>(Arena*);
template<> ::bosdyn::api::graph_nav::DownloadGraphResponse* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::DownloadGraphResponse>(Arena*);
template<> ::bosdyn::api::graph_nav::DownloadWaypointSnapshotRequest* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::DownloadWaypointSnapshotRequest>(Arena*);
template<> ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse>(Arena*);
template<> ::bosdyn::api::graph_nav::GetLocalizationStateRequest* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::GetLocalizationStateRequest>(Arena*);
template<> ::bosdyn::api::graph_nav::GetLocalizationStateResponse* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::GetLocalizationStateResponse>(Arena*);
template<> ::bosdyn::api::graph_nav::LostDetectorState* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::LostDetectorState>(Arena*);
template<> ::bosdyn::api::graph_nav::NavigateRouteRequest* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::NavigateRouteRequest>(Arena*);
template<> ::bosdyn::api::graph_nav::NavigateRouteResponse* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::NavigateRouteResponse>(Arena*);
template<> ::bosdyn::api::graph_nav::NavigateToRequest* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::NavigateToRequest>(Arena*);
template<> ::bosdyn::api::graph_nav::NavigateToResponse* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::NavigateToResponse>(Arena*);
template<> ::bosdyn::api::graph_nav::NavigationFeedbackRequest* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::NavigationFeedbackRequest>(Arena*);
template<> ::bosdyn::api::graph_nav::NavigationFeedbackResponse* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::NavigationFeedbackResponse>(Arena*);
template<> ::bosdyn::api::graph_nav::RemotePointCloudStatus* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::RemotePointCloudStatus>(Arena*);
template<> ::bosdyn::api::graph_nav::RouteGenParams* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::RouteGenParams>(Arena*);
template<> ::bosdyn::api::graph_nav::SetLocalizationRequest* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::SetLocalizationRequest>(Arena*);
template<> ::bosdyn::api::graph_nav::SetLocalizationResponse* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::SetLocalizationResponse>(Arena*);
template<> ::bosdyn::api::graph_nav::SetLocalizationResponse_SuspectedAmbiguity* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::SetLocalizationResponse_SuspectedAmbiguity>(Arena*);
template<> ::bosdyn::api::graph_nav::TravelParams* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::TravelParams>(Arena*);
template<> ::bosdyn::api::graph_nav::UploadEdgeSnapshotRequest* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::UploadEdgeSnapshotRequest>(Arena*);
template<> ::bosdyn::api::graph_nav::UploadEdgeSnapshotResponse* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::UploadEdgeSnapshotResponse>(Arena*);
template<> ::bosdyn::api::graph_nav::UploadGraphRequest* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::UploadGraphRequest>(Arena*);
template<> ::bosdyn::api::graph_nav::UploadGraphResponse* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::UploadGraphResponse>(Arena*);
template<> ::bosdyn::api::graph_nav::UploadWaypointSnapshotRequest* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::UploadWaypointSnapshotRequest>(Arena*);
template<> ::bosdyn::api::graph_nav::UploadWaypointSnapshotResponse* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::UploadWaypointSnapshotResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bosdyn {
namespace api {
namespace graph_nav {

enum SetLocalizationRequest_FiducialInit : int {
  SetLocalizationRequest_FiducialInit_FIDUCIAL_INIT_UNKNOWN = 0,
  SetLocalizationRequest_FiducialInit_FIDUCIAL_INIT_NO_FIDUCIAL = 1,
  SetLocalizationRequest_FiducialInit_FIDUCIAL_INIT_NEAREST = 2,
  SetLocalizationRequest_FiducialInit_FIDUCIAL_INIT_NEAREST_AT_TARGET = 3,
  SetLocalizationRequest_FiducialInit_FIDUCIAL_INIT_SPECIFIC = 4,
  SetLocalizationRequest_FiducialInit_SetLocalizationRequest_FiducialInit_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SetLocalizationRequest_FiducialInit_SetLocalizationRequest_FiducialInit_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SetLocalizationRequest_FiducialInit_IsValid(int value);
constexpr SetLocalizationRequest_FiducialInit SetLocalizationRequest_FiducialInit_FiducialInit_MIN = SetLocalizationRequest_FiducialInit_FIDUCIAL_INIT_UNKNOWN;
constexpr SetLocalizationRequest_FiducialInit SetLocalizationRequest_FiducialInit_FiducialInit_MAX = SetLocalizationRequest_FiducialInit_FIDUCIAL_INIT_SPECIFIC;
constexpr int SetLocalizationRequest_FiducialInit_FiducialInit_ARRAYSIZE = SetLocalizationRequest_FiducialInit_FiducialInit_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SetLocalizationRequest_FiducialInit_descriptor();
template<typename T>
inline const std::string& SetLocalizationRequest_FiducialInit_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SetLocalizationRequest_FiducialInit>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SetLocalizationRequest_FiducialInit_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SetLocalizationRequest_FiducialInit_descriptor(), enum_t_value);
}
inline bool SetLocalizationRequest_FiducialInit_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SetLocalizationRequest_FiducialInit* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SetLocalizationRequest_FiducialInit>(
    SetLocalizationRequest_FiducialInit_descriptor(), name, value);
}
enum SetLocalizationResponse_Status : int {
  SetLocalizationResponse_Status_STATUS_UNKNOWN = 0,
  SetLocalizationResponse_Status_STATUS_OK = 1,
  SetLocalizationResponse_Status_STATUS_ROBOT_IMPAIRED = 2,
  SetLocalizationResponse_Status_STATUS_UNKNOWN_WAYPOINT = 3,
  SetLocalizationResponse_Status_STATUS_ABORTED = 4,
  SetLocalizationResponse_Status_STATUS_FAILED = 5,
  SetLocalizationResponse_Status_SetLocalizationResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SetLocalizationResponse_Status_SetLocalizationResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SetLocalizationResponse_Status_IsValid(int value);
constexpr SetLocalizationResponse_Status SetLocalizationResponse_Status_Status_MIN = SetLocalizationResponse_Status_STATUS_UNKNOWN;
constexpr SetLocalizationResponse_Status SetLocalizationResponse_Status_Status_MAX = SetLocalizationResponse_Status_STATUS_FAILED;
constexpr int SetLocalizationResponse_Status_Status_ARRAYSIZE = SetLocalizationResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SetLocalizationResponse_Status_descriptor();
template<typename T>
inline const std::string& SetLocalizationResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SetLocalizationResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SetLocalizationResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SetLocalizationResponse_Status_descriptor(), enum_t_value);
}
inline bool SetLocalizationResponse_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SetLocalizationResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SetLocalizationResponse_Status>(
    SetLocalizationResponse_Status_descriptor(), name, value);
}
enum NavigateToResponse_Status : int {
  NavigateToResponse_Status_STATUS_UNKNOWN = 0,
  NavigateToResponse_Status_STATUS_OK = 1,
  NavigateToResponse_Status_STATUS_NO_TIMESYNC = 2,
  NavigateToResponse_Status_STATUS_EXPIRED = 3,
  NavigateToResponse_Status_STATUS_TOO_DISTANT = 4,
  NavigateToResponse_Status_STATUS_ROBOT_IMPAIRED = 5,
  NavigateToResponse_Status_STATUS_RECORDING = 6,
  NavigateToResponse_Status_STATUS_UNKNOWN_WAYPOINT = 7,
  NavigateToResponse_Status_STATUS_NO_PATH = 8,
  NavigateToResponse_Status_STATUS_FEATURE_DESERT = 10,
  NavigateToResponse_Status_STATUS_LOST = 11,
  NavigateToResponse_Status_STATUS_NOT_LOCALIZED_TO_MAP = 13,
  NavigateToResponse_Status_STATUS_COULD_NOT_UPDATE_ROUTE = 12,
  NavigateToResponse_Status_NavigateToResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  NavigateToResponse_Status_NavigateToResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool NavigateToResponse_Status_IsValid(int value);
constexpr NavigateToResponse_Status NavigateToResponse_Status_Status_MIN = NavigateToResponse_Status_STATUS_UNKNOWN;
constexpr NavigateToResponse_Status NavigateToResponse_Status_Status_MAX = NavigateToResponse_Status_STATUS_NOT_LOCALIZED_TO_MAP;
constexpr int NavigateToResponse_Status_Status_ARRAYSIZE = NavigateToResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NavigateToResponse_Status_descriptor();
template<typename T>
inline const std::string& NavigateToResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NavigateToResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NavigateToResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NavigateToResponse_Status_descriptor(), enum_t_value);
}
inline bool NavigateToResponse_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NavigateToResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NavigateToResponse_Status>(
    NavigateToResponse_Status_descriptor(), name, value);
}
enum NavigateRouteResponse_Status : int {
  NavigateRouteResponse_Status_STATUS_UNKNOWN = 0,
  NavigateRouteResponse_Status_STATUS_OK = 1,
  NavigateRouteResponse_Status_STATUS_NO_TIMESYNC = 2,
  NavigateRouteResponse_Status_STATUS_EXPIRED = 3,
  NavigateRouteResponse_Status_STATUS_TOO_DISTANT = 4,
  NavigateRouteResponse_Status_STATUS_ROBOT_IMPAIRED = 5,
  NavigateRouteResponse_Status_STATUS_RECORDING = 6,
  NavigateRouteResponse_Status_STATUS_UNKNOWN_ROUTE_ELEMENTS = 8,
  NavigateRouteResponse_Status_STATUS_INVALID_EDGE = 9,
  NavigateRouteResponse_Status_STATUS_CONSTRAINT_FAULT = 11,
  NavigateRouteResponse_Status_STATUS_FEATURE_DESERT = 13,
  NavigateRouteResponse_Status_STATUS_LOST = 14,
  NavigateRouteResponse_Status_STATUS_NOT_LOCALIZED_TO_ROUTE = 16,
  NavigateRouteResponse_Status_STATUS_COULD_NOT_UPDATE_ROUTE = 15,
  NavigateRouteResponse_Status_NavigateRouteResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  NavigateRouteResponse_Status_NavigateRouteResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool NavigateRouteResponse_Status_IsValid(int value);
constexpr NavigateRouteResponse_Status NavigateRouteResponse_Status_Status_MIN = NavigateRouteResponse_Status_STATUS_UNKNOWN;
constexpr NavigateRouteResponse_Status NavigateRouteResponse_Status_Status_MAX = NavigateRouteResponse_Status_STATUS_NOT_LOCALIZED_TO_ROUTE;
constexpr int NavigateRouteResponse_Status_Status_ARRAYSIZE = NavigateRouteResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NavigateRouteResponse_Status_descriptor();
template<typename T>
inline const std::string& NavigateRouteResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NavigateRouteResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NavigateRouteResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NavigateRouteResponse_Status_descriptor(), enum_t_value);
}
inline bool NavigateRouteResponse_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NavigateRouteResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NavigateRouteResponse_Status>(
    NavigateRouteResponse_Status_descriptor(), name, value);
}
enum NavigationFeedbackResponse_Status : int {
  NavigationFeedbackResponse_Status_STATUS_UNKNOWN = 0,
  NavigationFeedbackResponse_Status_STATUS_FOLLOWING_ROUTE = 1,
  NavigationFeedbackResponse_Status_STATUS_REACHED_GOAL = 2,
  NavigationFeedbackResponse_Status_STATUS_NO_ROUTE = 3,
  NavigationFeedbackResponse_Status_STATUS_NO_LOCALIZATION = 4,
  NavigationFeedbackResponse_Status_STATUS_LOST = 5,
  NavigationFeedbackResponse_Status_STATUS_STUCK = 6,
  NavigationFeedbackResponse_Status_STATUS_COMMAND_TIMED_OUT = 7,
  NavigationFeedbackResponse_Status_STATUS_ROBOT_IMPAIRED = 8,
  NavigationFeedbackResponse_Status_STATUS_CONSTRAINT_FAULT = 11,
  NavigationFeedbackResponse_Status_STATUS_COMMAND_OVERRIDDEN = 12,
  NavigationFeedbackResponse_Status_STATUS_NOT_LOCALIZED_TO_ROUTE = 13,
  NavigationFeedbackResponse_Status_STATUS_LEASE_ERROR = 14,
  NavigationFeedbackResponse_Status_NavigationFeedbackResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  NavigationFeedbackResponse_Status_NavigationFeedbackResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool NavigationFeedbackResponse_Status_IsValid(int value);
constexpr NavigationFeedbackResponse_Status NavigationFeedbackResponse_Status_Status_MIN = NavigationFeedbackResponse_Status_STATUS_UNKNOWN;
constexpr NavigationFeedbackResponse_Status NavigationFeedbackResponse_Status_Status_MAX = NavigationFeedbackResponse_Status_STATUS_LEASE_ERROR;
constexpr int NavigationFeedbackResponse_Status_Status_ARRAYSIZE = NavigationFeedbackResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NavigationFeedbackResponse_Status_descriptor();
template<typename T>
inline const std::string& NavigationFeedbackResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NavigationFeedbackResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NavigationFeedbackResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NavigationFeedbackResponse_Status_descriptor(), enum_t_value);
}
inline bool NavigationFeedbackResponse_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NavigationFeedbackResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NavigationFeedbackResponse_Status>(
    NavigationFeedbackResponse_Status_descriptor(), name, value);
}
enum UploadGraphResponse_Status : int {
  UploadGraphResponse_Status_STATUS_UNKNOWN = 0,
  UploadGraphResponse_Status_STATUS_OK = 1,
  UploadGraphResponse_Status_STATUS_MAP_TOO_LARGE_LICENSE = 3,
  UploadGraphResponse_Status_UploadGraphResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UploadGraphResponse_Status_UploadGraphResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UploadGraphResponse_Status_IsValid(int value);
constexpr UploadGraphResponse_Status UploadGraphResponse_Status_Status_MIN = UploadGraphResponse_Status_STATUS_UNKNOWN;
constexpr UploadGraphResponse_Status UploadGraphResponse_Status_Status_MAX = UploadGraphResponse_Status_STATUS_MAP_TOO_LARGE_LICENSE;
constexpr int UploadGraphResponse_Status_Status_ARRAYSIZE = UploadGraphResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UploadGraphResponse_Status_descriptor();
template<typename T>
inline const std::string& UploadGraphResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UploadGraphResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UploadGraphResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UploadGraphResponse_Status_descriptor(), enum_t_value);
}
inline bool UploadGraphResponse_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UploadGraphResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UploadGraphResponse_Status>(
    UploadGraphResponse_Status_descriptor(), name, value);
}
enum DownloadWaypointSnapshotResponse_Status : int {
  DownloadWaypointSnapshotResponse_Status_STATUS_UNKNOWN = 0,
  DownloadWaypointSnapshotResponse_Status_STATUS_OK = 1,
  DownloadWaypointSnapshotResponse_Status_STATUS_SNAPSHOT_DOES_NOT_EXIST = 2,
  DownloadWaypointSnapshotResponse_Status_DownloadWaypointSnapshotResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DownloadWaypointSnapshotResponse_Status_DownloadWaypointSnapshotResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DownloadWaypointSnapshotResponse_Status_IsValid(int value);
constexpr DownloadWaypointSnapshotResponse_Status DownloadWaypointSnapshotResponse_Status_Status_MIN = DownloadWaypointSnapshotResponse_Status_STATUS_UNKNOWN;
constexpr DownloadWaypointSnapshotResponse_Status DownloadWaypointSnapshotResponse_Status_Status_MAX = DownloadWaypointSnapshotResponse_Status_STATUS_SNAPSHOT_DOES_NOT_EXIST;
constexpr int DownloadWaypointSnapshotResponse_Status_Status_ARRAYSIZE = DownloadWaypointSnapshotResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DownloadWaypointSnapshotResponse_Status_descriptor();
template<typename T>
inline const std::string& DownloadWaypointSnapshotResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DownloadWaypointSnapshotResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DownloadWaypointSnapshotResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DownloadWaypointSnapshotResponse_Status_descriptor(), enum_t_value);
}
inline bool DownloadWaypointSnapshotResponse_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DownloadWaypointSnapshotResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DownloadWaypointSnapshotResponse_Status>(
    DownloadWaypointSnapshotResponse_Status_descriptor(), name, value);
}
enum DownloadEdgeSnapshotResponse_Status : int {
  DownloadEdgeSnapshotResponse_Status_STATUS_UNKNOWN = 0,
  DownloadEdgeSnapshotResponse_Status_STATUS_OK = 1,
  DownloadEdgeSnapshotResponse_Status_STATUS_SNAPSHOT_DOES_NOT_EXIST = 2,
  DownloadEdgeSnapshotResponse_Status_DownloadEdgeSnapshotResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DownloadEdgeSnapshotResponse_Status_DownloadEdgeSnapshotResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DownloadEdgeSnapshotResponse_Status_IsValid(int value);
constexpr DownloadEdgeSnapshotResponse_Status DownloadEdgeSnapshotResponse_Status_Status_MIN = DownloadEdgeSnapshotResponse_Status_STATUS_UNKNOWN;
constexpr DownloadEdgeSnapshotResponse_Status DownloadEdgeSnapshotResponse_Status_Status_MAX = DownloadEdgeSnapshotResponse_Status_STATUS_SNAPSHOT_DOES_NOT_EXIST;
constexpr int DownloadEdgeSnapshotResponse_Status_Status_ARRAYSIZE = DownloadEdgeSnapshotResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DownloadEdgeSnapshotResponse_Status_descriptor();
template<typename T>
inline const std::string& DownloadEdgeSnapshotResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DownloadEdgeSnapshotResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DownloadEdgeSnapshotResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DownloadEdgeSnapshotResponse_Status_descriptor(), enum_t_value);
}
inline bool DownloadEdgeSnapshotResponse_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DownloadEdgeSnapshotResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DownloadEdgeSnapshotResponse_Status>(
    DownloadEdgeSnapshotResponse_Status_descriptor(), name, value);
}
// ===================================================================

class SetLocalizationRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.SetLocalizationRequest) */ {
 public:
  inline SetLocalizationRequest() : SetLocalizationRequest(nullptr) {}
  virtual ~SetLocalizationRequest();

  SetLocalizationRequest(const SetLocalizationRequest& from);
  SetLocalizationRequest(SetLocalizationRequest&& from) noexcept
    : SetLocalizationRequest() {
    *this = ::std::move(from);
  }

  inline SetLocalizationRequest& operator=(const SetLocalizationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetLocalizationRequest& operator=(SetLocalizationRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetLocalizationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetLocalizationRequest* internal_default_instance() {
    return reinterpret_cast<const SetLocalizationRequest*>(
               &_SetLocalizationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SetLocalizationRequest& a, SetLocalizationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetLocalizationRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetLocalizationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetLocalizationRequest* New() const final {
    return CreateMaybeMessage<SetLocalizationRequest>(nullptr);
  }

  SetLocalizationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetLocalizationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetLocalizationRequest& from);
  void MergeFrom(const SetLocalizationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetLocalizationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.SetLocalizationRequest";
  }
  protected:
  explicit SetLocalizationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SetLocalizationRequest_FiducialInit FiducialInit;
  static constexpr FiducialInit FIDUCIAL_INIT_UNKNOWN =
    SetLocalizationRequest_FiducialInit_FIDUCIAL_INIT_UNKNOWN;
  static constexpr FiducialInit FIDUCIAL_INIT_NO_FIDUCIAL =
    SetLocalizationRequest_FiducialInit_FIDUCIAL_INIT_NO_FIDUCIAL;
  static constexpr FiducialInit FIDUCIAL_INIT_NEAREST =
    SetLocalizationRequest_FiducialInit_FIDUCIAL_INIT_NEAREST;
  static constexpr FiducialInit FIDUCIAL_INIT_NEAREST_AT_TARGET =
    SetLocalizationRequest_FiducialInit_FIDUCIAL_INIT_NEAREST_AT_TARGET;
  static constexpr FiducialInit FIDUCIAL_INIT_SPECIFIC =
    SetLocalizationRequest_FiducialInit_FIDUCIAL_INIT_SPECIFIC;
  static inline bool FiducialInit_IsValid(int value) {
    return SetLocalizationRequest_FiducialInit_IsValid(value);
  }
  static constexpr FiducialInit FiducialInit_MIN =
    SetLocalizationRequest_FiducialInit_FiducialInit_MIN;
  static constexpr FiducialInit FiducialInit_MAX =
    SetLocalizationRequest_FiducialInit_FiducialInit_MAX;
  static constexpr int FiducialInit_ARRAYSIZE =
    SetLocalizationRequest_FiducialInit_FiducialInit_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FiducialInit_descriptor() {
    return SetLocalizationRequest_FiducialInit_descriptor();
  }
  template<typename T>
  static inline const std::string& FiducialInit_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FiducialInit>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FiducialInit_Name.");
    return SetLocalizationRequest_FiducialInit_Name(enum_t_value);
  }
  static inline bool FiducialInit_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FiducialInit* value) {
    return SetLocalizationRequest_FiducialInit_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kInitialGuessFieldNumber = 3,
    kKoTformBodyFieldNumber = 4,
    kMaxDistanceFieldNumber = 5,
    kMaxYawFieldNumber = 6,
    kFiducialInitFieldNumber = 7,
    kUseFiducialIdFieldNumber = 8,
    kRefineFiducialResultWithIcpFieldNumber = 9,
    kDoAmbiguityCheckFieldNumber = 10,
  };
  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // .bosdyn.api.graph_nav.Localization initial_guess = 3;
  bool has_initial_guess() const;
  private:
  bool _internal_has_initial_guess() const;
  public:
  void clear_initial_guess();
  const ::bosdyn::api::graph_nav::Localization& initial_guess() const;
  ::bosdyn::api::graph_nav::Localization* release_initial_guess();
  ::bosdyn::api::graph_nav::Localization* mutable_initial_guess();
  void set_allocated_initial_guess(::bosdyn::api::graph_nav::Localization* initial_guess);
  private:
  const ::bosdyn::api::graph_nav::Localization& _internal_initial_guess() const;
  ::bosdyn::api::graph_nav::Localization* _internal_mutable_initial_guess();
  public:
  void unsafe_arena_set_allocated_initial_guess(
      ::bosdyn::api::graph_nav::Localization* initial_guess);
  ::bosdyn::api::graph_nav::Localization* unsafe_arena_release_initial_guess();

  // .bosdyn.api.SE3Pose ko_tform_body = 4;
  bool has_ko_tform_body() const;
  private:
  bool _internal_has_ko_tform_body() const;
  public:
  void clear_ko_tform_body();
  const ::bosdyn::api::SE3Pose& ko_tform_body() const;
  ::bosdyn::api::SE3Pose* release_ko_tform_body();
  ::bosdyn::api::SE3Pose* mutable_ko_tform_body();
  void set_allocated_ko_tform_body(::bosdyn::api::SE3Pose* ko_tform_body);
  private:
  const ::bosdyn::api::SE3Pose& _internal_ko_tform_body() const;
  ::bosdyn::api::SE3Pose* _internal_mutable_ko_tform_body();
  public:
  void unsafe_arena_set_allocated_ko_tform_body(
      ::bosdyn::api::SE3Pose* ko_tform_body);
  ::bosdyn::api::SE3Pose* unsafe_arena_release_ko_tform_body();

  // double max_distance = 5;
  void clear_max_distance();
  double max_distance() const;
  void set_max_distance(double value);
  private:
  double _internal_max_distance() const;
  void _internal_set_max_distance(double value);
  public:

  // double max_yaw = 6;
  void clear_max_yaw();
  double max_yaw() const;
  void set_max_yaw(double value);
  private:
  double _internal_max_yaw() const;
  void _internal_set_max_yaw(double value);
  public:

  // .bosdyn.api.graph_nav.SetLocalizationRequest.FiducialInit fiducial_init = 7;
  void clear_fiducial_init();
  ::bosdyn::api::graph_nav::SetLocalizationRequest_FiducialInit fiducial_init() const;
  void set_fiducial_init(::bosdyn::api::graph_nav::SetLocalizationRequest_FiducialInit value);
  private:
  ::bosdyn::api::graph_nav::SetLocalizationRequest_FiducialInit _internal_fiducial_init() const;
  void _internal_set_fiducial_init(::bosdyn::api::graph_nav::SetLocalizationRequest_FiducialInit value);
  public:

  // int32 use_fiducial_id = 8;
  void clear_use_fiducial_id();
  ::PROTOBUF_NAMESPACE_ID::int32 use_fiducial_id() const;
  void set_use_fiducial_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_use_fiducial_id() const;
  void _internal_set_use_fiducial_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool refine_fiducial_result_with_icp = 9;
  void clear_refine_fiducial_result_with_icp();
  bool refine_fiducial_result_with_icp() const;
  void set_refine_fiducial_result_with_icp(bool value);
  private:
  bool _internal_refine_fiducial_result_with_icp() const;
  void _internal_set_refine_fiducial_result_with_icp(bool value);
  public:

  // bool do_ambiguity_check = 10;
  void clear_do_ambiguity_check();
  bool do_ambiguity_check() const;
  void set_do_ambiguity_check(bool value);
  private:
  bool _internal_do_ambiguity_check() const;
  void _internal_set_do_ambiguity_check(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.SetLocalizationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::RequestHeader* header_;
  ::bosdyn::api::graph_nav::Localization* initial_guess_;
  ::bosdyn::api::SE3Pose* ko_tform_body_;
  double max_distance_;
  double max_yaw_;
  int fiducial_init_;
  ::PROTOBUF_NAMESPACE_ID::int32 use_fiducial_id_;
  bool refine_fiducial_result_with_icp_;
  bool do_ambiguity_check_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto;
};
// -------------------------------------------------------------------

class SetLocalizationResponse_SuspectedAmbiguity PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.SetLocalizationResponse.SuspectedAmbiguity) */ {
 public:
  inline SetLocalizationResponse_SuspectedAmbiguity() : SetLocalizationResponse_SuspectedAmbiguity(nullptr) {}
  virtual ~SetLocalizationResponse_SuspectedAmbiguity();

  SetLocalizationResponse_SuspectedAmbiguity(const SetLocalizationResponse_SuspectedAmbiguity& from);
  SetLocalizationResponse_SuspectedAmbiguity(SetLocalizationResponse_SuspectedAmbiguity&& from) noexcept
    : SetLocalizationResponse_SuspectedAmbiguity() {
    *this = ::std::move(from);
  }

  inline SetLocalizationResponse_SuspectedAmbiguity& operator=(const SetLocalizationResponse_SuspectedAmbiguity& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetLocalizationResponse_SuspectedAmbiguity& operator=(SetLocalizationResponse_SuspectedAmbiguity&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetLocalizationResponse_SuspectedAmbiguity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetLocalizationResponse_SuspectedAmbiguity* internal_default_instance() {
    return reinterpret_cast<const SetLocalizationResponse_SuspectedAmbiguity*>(
               &_SetLocalizationResponse_SuspectedAmbiguity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SetLocalizationResponse_SuspectedAmbiguity& a, SetLocalizationResponse_SuspectedAmbiguity& b) {
    a.Swap(&b);
  }
  inline void Swap(SetLocalizationResponse_SuspectedAmbiguity* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetLocalizationResponse_SuspectedAmbiguity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetLocalizationResponse_SuspectedAmbiguity* New() const final {
    return CreateMaybeMessage<SetLocalizationResponse_SuspectedAmbiguity>(nullptr);
  }

  SetLocalizationResponse_SuspectedAmbiguity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetLocalizationResponse_SuspectedAmbiguity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetLocalizationResponse_SuspectedAmbiguity& from);
  void MergeFrom(const SetLocalizationResponse_SuspectedAmbiguity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetLocalizationResponse_SuspectedAmbiguity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.SetLocalizationResponse.SuspectedAmbiguity";
  }
  protected:
  explicit SetLocalizationResponse_SuspectedAmbiguity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlternateRobotTformWaypointFieldNumber = 1,
  };
  // .bosdyn.api.SE3Pose alternate_robot_tform_waypoint = 1;
  bool has_alternate_robot_tform_waypoint() const;
  private:
  bool _internal_has_alternate_robot_tform_waypoint() const;
  public:
  void clear_alternate_robot_tform_waypoint();
  const ::bosdyn::api::SE3Pose& alternate_robot_tform_waypoint() const;
  ::bosdyn::api::SE3Pose* release_alternate_robot_tform_waypoint();
  ::bosdyn::api::SE3Pose* mutable_alternate_robot_tform_waypoint();
  void set_allocated_alternate_robot_tform_waypoint(::bosdyn::api::SE3Pose* alternate_robot_tform_waypoint);
  private:
  const ::bosdyn::api::SE3Pose& _internal_alternate_robot_tform_waypoint() const;
  ::bosdyn::api::SE3Pose* _internal_mutable_alternate_robot_tform_waypoint();
  public:
  void unsafe_arena_set_allocated_alternate_robot_tform_waypoint(
      ::bosdyn::api::SE3Pose* alternate_robot_tform_waypoint);
  ::bosdyn::api::SE3Pose* unsafe_arena_release_alternate_robot_tform_waypoint();

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.SetLocalizationResponse.SuspectedAmbiguity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::SE3Pose* alternate_robot_tform_waypoint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto;
};
// -------------------------------------------------------------------

class SetLocalizationResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.SetLocalizationResponse) */ {
 public:
  inline SetLocalizationResponse() : SetLocalizationResponse(nullptr) {}
  virtual ~SetLocalizationResponse();

  SetLocalizationResponse(const SetLocalizationResponse& from);
  SetLocalizationResponse(SetLocalizationResponse&& from) noexcept
    : SetLocalizationResponse() {
    *this = ::std::move(from);
  }

  inline SetLocalizationResponse& operator=(const SetLocalizationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetLocalizationResponse& operator=(SetLocalizationResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetLocalizationResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetLocalizationResponse* internal_default_instance() {
    return reinterpret_cast<const SetLocalizationResponse*>(
               &_SetLocalizationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SetLocalizationResponse& a, SetLocalizationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetLocalizationResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetLocalizationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetLocalizationResponse* New() const final {
    return CreateMaybeMessage<SetLocalizationResponse>(nullptr);
  }

  SetLocalizationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetLocalizationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetLocalizationResponse& from);
  void MergeFrom(const SetLocalizationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetLocalizationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.SetLocalizationResponse";
  }
  protected:
  explicit SetLocalizationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SetLocalizationResponse_SuspectedAmbiguity SuspectedAmbiguity;

  typedef SetLocalizationResponse_Status Status;
  static constexpr Status STATUS_UNKNOWN =
    SetLocalizationResponse_Status_STATUS_UNKNOWN;
  static constexpr Status STATUS_OK =
    SetLocalizationResponse_Status_STATUS_OK;
  static constexpr Status STATUS_ROBOT_IMPAIRED =
    SetLocalizationResponse_Status_STATUS_ROBOT_IMPAIRED;
  static constexpr Status STATUS_UNKNOWN_WAYPOINT =
    SetLocalizationResponse_Status_STATUS_UNKNOWN_WAYPOINT;
  static constexpr Status STATUS_ABORTED =
    SetLocalizationResponse_Status_STATUS_ABORTED;
  static constexpr Status STATUS_FAILED =
    SetLocalizationResponse_Status_STATUS_FAILED;
  static inline bool Status_IsValid(int value) {
    return SetLocalizationResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    SetLocalizationResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    SetLocalizationResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    SetLocalizationResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return SetLocalizationResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return SetLocalizationResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return SetLocalizationResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kErrorReportFieldNumber = 4,
    kHeaderFieldNumber = 1,
    kLeaseUseResultFieldNumber = 2,
    kLocalizationFieldNumber = 5,
    kSuspectedAmbiguityFieldNumber = 7,
    kStatusFieldNumber = 3,
  };
  // string error_report = 4;
  void clear_error_report();
  const std::string& error_report() const;
  void set_error_report(const std::string& value);
  void set_error_report(std::string&& value);
  void set_error_report(const char* value);
  void set_error_report(const char* value, size_t size);
  std::string* mutable_error_report();
  std::string* release_error_report();
  void set_allocated_error_report(std::string* error_report);
  private:
  const std::string& _internal_error_report() const;
  void _internal_set_error_report(const std::string& value);
  std::string* _internal_mutable_error_report();
  public:

  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // .bosdyn.api.LeaseUseResult lease_use_result = 2;
  bool has_lease_use_result() const;
  private:
  bool _internal_has_lease_use_result() const;
  public:
  void clear_lease_use_result();
  const ::bosdyn::api::LeaseUseResult& lease_use_result() const;
  ::bosdyn::api::LeaseUseResult* release_lease_use_result();
  ::bosdyn::api::LeaseUseResult* mutable_lease_use_result();
  void set_allocated_lease_use_result(::bosdyn::api::LeaseUseResult* lease_use_result);
  private:
  const ::bosdyn::api::LeaseUseResult& _internal_lease_use_result() const;
  ::bosdyn::api::LeaseUseResult* _internal_mutable_lease_use_result();
  public:
  void unsafe_arena_set_allocated_lease_use_result(
      ::bosdyn::api::LeaseUseResult* lease_use_result);
  ::bosdyn::api::LeaseUseResult* unsafe_arena_release_lease_use_result();

  // .bosdyn.api.graph_nav.Localization localization = 5;
  bool has_localization() const;
  private:
  bool _internal_has_localization() const;
  public:
  void clear_localization();
  const ::bosdyn::api::graph_nav::Localization& localization() const;
  ::bosdyn::api::graph_nav::Localization* release_localization();
  ::bosdyn::api::graph_nav::Localization* mutable_localization();
  void set_allocated_localization(::bosdyn::api::graph_nav::Localization* localization);
  private:
  const ::bosdyn::api::graph_nav::Localization& _internal_localization() const;
  ::bosdyn::api::graph_nav::Localization* _internal_mutable_localization();
  public:
  void unsafe_arena_set_allocated_localization(
      ::bosdyn::api::graph_nav::Localization* localization);
  ::bosdyn::api::graph_nav::Localization* unsafe_arena_release_localization();

  // .bosdyn.api.graph_nav.SetLocalizationResponse.SuspectedAmbiguity suspected_ambiguity = 7;
  bool has_suspected_ambiguity() const;
  private:
  bool _internal_has_suspected_ambiguity() const;
  public:
  void clear_suspected_ambiguity();
  const ::bosdyn::api::graph_nav::SetLocalizationResponse_SuspectedAmbiguity& suspected_ambiguity() const;
  ::bosdyn::api::graph_nav::SetLocalizationResponse_SuspectedAmbiguity* release_suspected_ambiguity();
  ::bosdyn::api::graph_nav::SetLocalizationResponse_SuspectedAmbiguity* mutable_suspected_ambiguity();
  void set_allocated_suspected_ambiguity(::bosdyn::api::graph_nav::SetLocalizationResponse_SuspectedAmbiguity* suspected_ambiguity);
  private:
  const ::bosdyn::api::graph_nav::SetLocalizationResponse_SuspectedAmbiguity& _internal_suspected_ambiguity() const;
  ::bosdyn::api::graph_nav::SetLocalizationResponse_SuspectedAmbiguity* _internal_mutable_suspected_ambiguity();
  public:
  void unsafe_arena_set_allocated_suspected_ambiguity(
      ::bosdyn::api::graph_nav::SetLocalizationResponse_SuspectedAmbiguity* suspected_ambiguity);
  ::bosdyn::api::graph_nav::SetLocalizationResponse_SuspectedAmbiguity* unsafe_arena_release_suspected_ambiguity();

  // .bosdyn.api.graph_nav.SetLocalizationResponse.Status status = 3;
  void clear_status();
  ::bosdyn::api::graph_nav::SetLocalizationResponse_Status status() const;
  void set_status(::bosdyn::api::graph_nav::SetLocalizationResponse_Status value);
  private:
  ::bosdyn::api::graph_nav::SetLocalizationResponse_Status _internal_status() const;
  void _internal_set_status(::bosdyn::api::graph_nav::SetLocalizationResponse_Status value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.SetLocalizationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_report_;
  ::bosdyn::api::ResponseHeader* header_;
  ::bosdyn::api::LeaseUseResult* lease_use_result_;
  ::bosdyn::api::graph_nav::Localization* localization_;
  ::bosdyn::api::graph_nav::SetLocalizationResponse_SuspectedAmbiguity* suspected_ambiguity_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto;
};
// -------------------------------------------------------------------

class RouteGenParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.RouteGenParams) */ {
 public:
  inline RouteGenParams() : RouteGenParams(nullptr) {}
  virtual ~RouteGenParams();

  RouteGenParams(const RouteGenParams& from);
  RouteGenParams(RouteGenParams&& from) noexcept
    : RouteGenParams() {
    *this = ::std::move(from);
  }

  inline RouteGenParams& operator=(const RouteGenParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteGenParams& operator=(RouteGenParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RouteGenParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RouteGenParams* internal_default_instance() {
    return reinterpret_cast<const RouteGenParams*>(
               &_RouteGenParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RouteGenParams& a, RouteGenParams& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteGenParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouteGenParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RouteGenParams* New() const final {
    return CreateMaybeMessage<RouteGenParams>(nullptr);
  }

  RouteGenParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RouteGenParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RouteGenParams& from);
  void MergeFrom(const RouteGenParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteGenParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.RouteGenParams";
  }
  protected:
  explicit RouteGenParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.RouteGenParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto;
};
// -------------------------------------------------------------------

class TravelParams PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.TravelParams) */ {
 public:
  inline TravelParams() : TravelParams(nullptr) {}
  virtual ~TravelParams();

  TravelParams(const TravelParams& from);
  TravelParams(TravelParams&& from) noexcept
    : TravelParams() {
    *this = ::std::move(from);
  }

  inline TravelParams& operator=(const TravelParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline TravelParams& operator=(TravelParams&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TravelParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TravelParams* internal_default_instance() {
    return reinterpret_cast<const TravelParams*>(
               &_TravelParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TravelParams& a, TravelParams& b) {
    a.Swap(&b);
  }
  inline void Swap(TravelParams* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TravelParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TravelParams* New() const final {
    return CreateMaybeMessage<TravelParams>(nullptr);
  }

  TravelParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TravelParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TravelParams& from);
  void MergeFrom(const TravelParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TravelParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.TravelParams";
  }
  protected:
  explicit TravelParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVelocityLimitFieldNumber = 3,
    kMaxDistanceFieldNumber = 1,
    kMaxYawFieldNumber = 2,
    kIgnoreFinalYawFieldNumber = 4,
  };
  // .bosdyn.api.SE2VelocityLimit velocity_limit = 3;
  bool has_velocity_limit() const;
  private:
  bool _internal_has_velocity_limit() const;
  public:
  void clear_velocity_limit();
  const ::bosdyn::api::SE2VelocityLimit& velocity_limit() const;
  ::bosdyn::api::SE2VelocityLimit* release_velocity_limit();
  ::bosdyn::api::SE2VelocityLimit* mutable_velocity_limit();
  void set_allocated_velocity_limit(::bosdyn::api::SE2VelocityLimit* velocity_limit);
  private:
  const ::bosdyn::api::SE2VelocityLimit& _internal_velocity_limit() const;
  ::bosdyn::api::SE2VelocityLimit* _internal_mutable_velocity_limit();
  public:
  void unsafe_arena_set_allocated_velocity_limit(
      ::bosdyn::api::SE2VelocityLimit* velocity_limit);
  ::bosdyn::api::SE2VelocityLimit* unsafe_arena_release_velocity_limit();

  // double max_distance = 1;
  void clear_max_distance();
  double max_distance() const;
  void set_max_distance(double value);
  private:
  double _internal_max_distance() const;
  void _internal_set_max_distance(double value);
  public:

  // double max_yaw = 2;
  void clear_max_yaw();
  double max_yaw() const;
  void set_max_yaw(double value);
  private:
  double _internal_max_yaw() const;
  void _internal_set_max_yaw(double value);
  public:

  // bool ignore_final_yaw = 4;
  void clear_ignore_final_yaw();
  bool ignore_final_yaw() const;
  void set_ignore_final_yaw(bool value);
  private:
  bool _internal_ignore_final_yaw() const;
  void _internal_set_ignore_final_yaw(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.TravelParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::SE2VelocityLimit* velocity_limit_;
  double max_distance_;
  double max_yaw_;
  bool ignore_final_yaw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto;
};
// -------------------------------------------------------------------

class NavigateToRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.NavigateToRequest) */ {
 public:
  inline NavigateToRequest() : NavigateToRequest(nullptr) {}
  virtual ~NavigateToRequest();

  NavigateToRequest(const NavigateToRequest& from);
  NavigateToRequest(NavigateToRequest&& from) noexcept
    : NavigateToRequest() {
    *this = ::std::move(from);
  }

  inline NavigateToRequest& operator=(const NavigateToRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NavigateToRequest& operator=(NavigateToRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NavigateToRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NavigateToRequest* internal_default_instance() {
    return reinterpret_cast<const NavigateToRequest*>(
               &_NavigateToRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(NavigateToRequest& a, NavigateToRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NavigateToRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NavigateToRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NavigateToRequest* New() const final {
    return CreateMaybeMessage<NavigateToRequest>(nullptr);
  }

  NavigateToRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NavigateToRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NavigateToRequest& from);
  void MergeFrom(const NavigateToRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NavigateToRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.NavigateToRequest";
  }
  protected:
  explicit NavigateToRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeasesFieldNumber = 2,
    kDestinationWaypointIdFieldNumber = 3,
    kClockIdentifierFieldNumber = 7,
    kHeaderFieldNumber = 1,
    kRouteParamsFieldNumber = 4,
    kTravelParamsFieldNumber = 5,
    kEndTimeFieldNumber = 6,
  };
  // repeated .bosdyn.api.Lease leases = 2;
  int leases_size() const;
  private:
  int _internal_leases_size() const;
  public:
  void clear_leases();
  ::bosdyn::api::Lease* mutable_leases(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::Lease >*
      mutable_leases();
  private:
  const ::bosdyn::api::Lease& _internal_leases(int index) const;
  ::bosdyn::api::Lease* _internal_add_leases();
  public:
  const ::bosdyn::api::Lease& leases(int index) const;
  ::bosdyn::api::Lease* add_leases();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::Lease >&
      leases() const;

  // string destination_waypoint_id = 3;
  void clear_destination_waypoint_id();
  const std::string& destination_waypoint_id() const;
  void set_destination_waypoint_id(const std::string& value);
  void set_destination_waypoint_id(std::string&& value);
  void set_destination_waypoint_id(const char* value);
  void set_destination_waypoint_id(const char* value, size_t size);
  std::string* mutable_destination_waypoint_id();
  std::string* release_destination_waypoint_id();
  void set_allocated_destination_waypoint_id(std::string* destination_waypoint_id);
  private:
  const std::string& _internal_destination_waypoint_id() const;
  void _internal_set_destination_waypoint_id(const std::string& value);
  std::string* _internal_mutable_destination_waypoint_id();
  public:

  // string clock_identifier = 7;
  void clear_clock_identifier();
  const std::string& clock_identifier() const;
  void set_clock_identifier(const std::string& value);
  void set_clock_identifier(std::string&& value);
  void set_clock_identifier(const char* value);
  void set_clock_identifier(const char* value, size_t size);
  std::string* mutable_clock_identifier();
  std::string* release_clock_identifier();
  void set_allocated_clock_identifier(std::string* clock_identifier);
  private:
  const std::string& _internal_clock_identifier() const;
  void _internal_set_clock_identifier(const std::string& value);
  std::string* _internal_mutable_clock_identifier();
  public:

  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // .bosdyn.api.graph_nav.RouteGenParams route_params = 4;
  bool has_route_params() const;
  private:
  bool _internal_has_route_params() const;
  public:
  void clear_route_params();
  const ::bosdyn::api::graph_nav::RouteGenParams& route_params() const;
  ::bosdyn::api::graph_nav::RouteGenParams* release_route_params();
  ::bosdyn::api::graph_nav::RouteGenParams* mutable_route_params();
  void set_allocated_route_params(::bosdyn::api::graph_nav::RouteGenParams* route_params);
  private:
  const ::bosdyn::api::graph_nav::RouteGenParams& _internal_route_params() const;
  ::bosdyn::api::graph_nav::RouteGenParams* _internal_mutable_route_params();
  public:
  void unsafe_arena_set_allocated_route_params(
      ::bosdyn::api::graph_nav::RouteGenParams* route_params);
  ::bosdyn::api::graph_nav::RouteGenParams* unsafe_arena_release_route_params();

  // .bosdyn.api.graph_nav.TravelParams travel_params = 5;
  bool has_travel_params() const;
  private:
  bool _internal_has_travel_params() const;
  public:
  void clear_travel_params();
  const ::bosdyn::api::graph_nav::TravelParams& travel_params() const;
  ::bosdyn::api::graph_nav::TravelParams* release_travel_params();
  ::bosdyn::api::graph_nav::TravelParams* mutable_travel_params();
  void set_allocated_travel_params(::bosdyn::api::graph_nav::TravelParams* travel_params);
  private:
  const ::bosdyn::api::graph_nav::TravelParams& _internal_travel_params() const;
  ::bosdyn::api::graph_nav::TravelParams* _internal_mutable_travel_params();
  public:
  void unsafe_arena_set_allocated_travel_params(
      ::bosdyn::api::graph_nav::TravelParams* travel_params);
  ::bosdyn::api::graph_nav::TravelParams* unsafe_arena_release_travel_params();

  // .google.protobuf.Timestamp end_time = 6;
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& end_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_end_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_time();
  void set_allocated_end_time(PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_time();
  public:
  void unsafe_arena_set_allocated_end_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end_time();

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.NavigateToRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::Lease > leases_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destination_waypoint_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clock_identifier_;
  ::bosdyn::api::RequestHeader* header_;
  ::bosdyn::api::graph_nav::RouteGenParams* route_params_;
  ::bosdyn::api::graph_nav::TravelParams* travel_params_;
  PROTOBUF_NAMESPACE_ID::Timestamp* end_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto;
};
// -------------------------------------------------------------------

class NavigateToResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.NavigateToResponse) */ {
 public:
  inline NavigateToResponse() : NavigateToResponse(nullptr) {}
  virtual ~NavigateToResponse();

  NavigateToResponse(const NavigateToResponse& from);
  NavigateToResponse(NavigateToResponse&& from) noexcept
    : NavigateToResponse() {
    *this = ::std::move(from);
  }

  inline NavigateToResponse& operator=(const NavigateToResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NavigateToResponse& operator=(NavigateToResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NavigateToResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NavigateToResponse* internal_default_instance() {
    return reinterpret_cast<const NavigateToResponse*>(
               &_NavigateToResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(NavigateToResponse& a, NavigateToResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NavigateToResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NavigateToResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NavigateToResponse* New() const final {
    return CreateMaybeMessage<NavigateToResponse>(nullptr);
  }

  NavigateToResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NavigateToResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NavigateToResponse& from);
  void MergeFrom(const NavigateToResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NavigateToResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.NavigateToResponse";
  }
  protected:
  explicit NavigateToResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef NavigateToResponse_Status Status;
  static constexpr Status STATUS_UNKNOWN =
    NavigateToResponse_Status_STATUS_UNKNOWN;
  static constexpr Status STATUS_OK =
    NavigateToResponse_Status_STATUS_OK;
  static constexpr Status STATUS_NO_TIMESYNC =
    NavigateToResponse_Status_STATUS_NO_TIMESYNC;
  static constexpr Status STATUS_EXPIRED =
    NavigateToResponse_Status_STATUS_EXPIRED;
  static constexpr Status STATUS_TOO_DISTANT =
    NavigateToResponse_Status_STATUS_TOO_DISTANT;
  static constexpr Status STATUS_ROBOT_IMPAIRED =
    NavigateToResponse_Status_STATUS_ROBOT_IMPAIRED;
  static constexpr Status STATUS_RECORDING =
    NavigateToResponse_Status_STATUS_RECORDING;
  static constexpr Status STATUS_UNKNOWN_WAYPOINT =
    NavigateToResponse_Status_STATUS_UNKNOWN_WAYPOINT;
  static constexpr Status STATUS_NO_PATH =
    NavigateToResponse_Status_STATUS_NO_PATH;
  static constexpr Status STATUS_FEATURE_DESERT =
    NavigateToResponse_Status_STATUS_FEATURE_DESERT;
  static constexpr Status STATUS_LOST =
    NavigateToResponse_Status_STATUS_LOST;
  static constexpr Status STATUS_NOT_LOCALIZED_TO_MAP =
    NavigateToResponse_Status_STATUS_NOT_LOCALIZED_TO_MAP;
  static constexpr Status STATUS_COULD_NOT_UPDATE_ROUTE =
    NavigateToResponse_Status_STATUS_COULD_NOT_UPDATE_ROUTE;
  static inline bool Status_IsValid(int value) {
    return NavigateToResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    NavigateToResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    NavigateToResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    NavigateToResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return NavigateToResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return NavigateToResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return NavigateToResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLeaseUseResultsFieldNumber = 2,
    kErrorWaypointIdsFieldNumber = 5,
    kHeaderFieldNumber = 1,
    kStatusFieldNumber = 3,
    kCommandIdFieldNumber = 4,
  };
  // repeated .bosdyn.api.LeaseUseResult lease_use_results = 2;
  int lease_use_results_size() const;
  private:
  int _internal_lease_use_results_size() const;
  public:
  void clear_lease_use_results();
  ::bosdyn::api::LeaseUseResult* mutable_lease_use_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::LeaseUseResult >*
      mutable_lease_use_results();
  private:
  const ::bosdyn::api::LeaseUseResult& _internal_lease_use_results(int index) const;
  ::bosdyn::api::LeaseUseResult* _internal_add_lease_use_results();
  public:
  const ::bosdyn::api::LeaseUseResult& lease_use_results(int index) const;
  ::bosdyn::api::LeaseUseResult* add_lease_use_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::LeaseUseResult >&
      lease_use_results() const;

  // repeated string error_waypoint_ids = 5;
  int error_waypoint_ids_size() const;
  private:
  int _internal_error_waypoint_ids_size() const;
  public:
  void clear_error_waypoint_ids();
  const std::string& error_waypoint_ids(int index) const;
  std::string* mutable_error_waypoint_ids(int index);
  void set_error_waypoint_ids(int index, const std::string& value);
  void set_error_waypoint_ids(int index, std::string&& value);
  void set_error_waypoint_ids(int index, const char* value);
  void set_error_waypoint_ids(int index, const char* value, size_t size);
  std::string* add_error_waypoint_ids();
  void add_error_waypoint_ids(const std::string& value);
  void add_error_waypoint_ids(std::string&& value);
  void add_error_waypoint_ids(const char* value);
  void add_error_waypoint_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& error_waypoint_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_error_waypoint_ids();
  private:
  const std::string& _internal_error_waypoint_ids(int index) const;
  std::string* _internal_add_error_waypoint_ids();
  public:

  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // .bosdyn.api.graph_nav.NavigateToResponse.Status status = 3;
  void clear_status();
  ::bosdyn::api::graph_nav::NavigateToResponse_Status status() const;
  void set_status(::bosdyn::api::graph_nav::NavigateToResponse_Status value);
  private:
  ::bosdyn::api::graph_nav::NavigateToResponse_Status _internal_status() const;
  void _internal_set_status(::bosdyn::api::graph_nav::NavigateToResponse_Status value);
  public:

  // uint32 command_id = 4;
  void clear_command_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 command_id() const;
  void set_command_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_command_id() const;
  void _internal_set_command_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.NavigateToResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::LeaseUseResult > lease_use_results_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> error_waypoint_ids_;
  ::bosdyn::api::ResponseHeader* header_;
  int status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 command_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto;
};
// -------------------------------------------------------------------

class NavigateRouteRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.NavigateRouteRequest) */ {
 public:
  inline NavigateRouteRequest() : NavigateRouteRequest(nullptr) {}
  virtual ~NavigateRouteRequest();

  NavigateRouteRequest(const NavigateRouteRequest& from);
  NavigateRouteRequest(NavigateRouteRequest&& from) noexcept
    : NavigateRouteRequest() {
    *this = ::std::move(from);
  }

  inline NavigateRouteRequest& operator=(const NavigateRouteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NavigateRouteRequest& operator=(NavigateRouteRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NavigateRouteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NavigateRouteRequest* internal_default_instance() {
    return reinterpret_cast<const NavigateRouteRequest*>(
               &_NavigateRouteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(NavigateRouteRequest& a, NavigateRouteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NavigateRouteRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NavigateRouteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NavigateRouteRequest* New() const final {
    return CreateMaybeMessage<NavigateRouteRequest>(nullptr);
  }

  NavigateRouteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NavigateRouteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NavigateRouteRequest& from);
  void MergeFrom(const NavigateRouteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NavigateRouteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.NavigateRouteRequest";
  }
  protected:
  explicit NavigateRouteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeasesFieldNumber = 2,
    kClockIdentifierFieldNumber = 6,
    kHeaderFieldNumber = 1,
    kRouteFieldNumber = 3,
    kTravelParamsFieldNumber = 4,
    kEndTimeFieldNumber = 5,
  };
  // repeated .bosdyn.api.Lease leases = 2;
  int leases_size() const;
  private:
  int _internal_leases_size() const;
  public:
  void clear_leases();
  ::bosdyn::api::Lease* mutable_leases(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::Lease >*
      mutable_leases();
  private:
  const ::bosdyn::api::Lease& _internal_leases(int index) const;
  ::bosdyn::api::Lease* _internal_add_leases();
  public:
  const ::bosdyn::api::Lease& leases(int index) const;
  ::bosdyn::api::Lease* add_leases();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::Lease >&
      leases() const;

  // string clock_identifier = 6;
  void clear_clock_identifier();
  const std::string& clock_identifier() const;
  void set_clock_identifier(const std::string& value);
  void set_clock_identifier(std::string&& value);
  void set_clock_identifier(const char* value);
  void set_clock_identifier(const char* value, size_t size);
  std::string* mutable_clock_identifier();
  std::string* release_clock_identifier();
  void set_allocated_clock_identifier(std::string* clock_identifier);
  private:
  const std::string& _internal_clock_identifier() const;
  void _internal_set_clock_identifier(const std::string& value);
  std::string* _internal_mutable_clock_identifier();
  public:

  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // .bosdyn.api.graph_nav.Route route = 3;
  bool has_route() const;
  private:
  bool _internal_has_route() const;
  public:
  void clear_route();
  const ::bosdyn::api::graph_nav::Route& route() const;
  ::bosdyn::api::graph_nav::Route* release_route();
  ::bosdyn::api::graph_nav::Route* mutable_route();
  void set_allocated_route(::bosdyn::api::graph_nav::Route* route);
  private:
  const ::bosdyn::api::graph_nav::Route& _internal_route() const;
  ::bosdyn::api::graph_nav::Route* _internal_mutable_route();
  public:
  void unsafe_arena_set_allocated_route(
      ::bosdyn::api::graph_nav::Route* route);
  ::bosdyn::api::graph_nav::Route* unsafe_arena_release_route();

  // .bosdyn.api.graph_nav.TravelParams travel_params = 4;
  bool has_travel_params() const;
  private:
  bool _internal_has_travel_params() const;
  public:
  void clear_travel_params();
  const ::bosdyn::api::graph_nav::TravelParams& travel_params() const;
  ::bosdyn::api::graph_nav::TravelParams* release_travel_params();
  ::bosdyn::api::graph_nav::TravelParams* mutable_travel_params();
  void set_allocated_travel_params(::bosdyn::api::graph_nav::TravelParams* travel_params);
  private:
  const ::bosdyn::api::graph_nav::TravelParams& _internal_travel_params() const;
  ::bosdyn::api::graph_nav::TravelParams* _internal_mutable_travel_params();
  public:
  void unsafe_arena_set_allocated_travel_params(
      ::bosdyn::api::graph_nav::TravelParams* travel_params);
  ::bosdyn::api::graph_nav::TravelParams* unsafe_arena_release_travel_params();

  // .google.protobuf.Timestamp end_time = 5;
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& end_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_end_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_time();
  void set_allocated_end_time(PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_time();
  public:
  void unsafe_arena_set_allocated_end_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end_time();

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.NavigateRouteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::Lease > leases_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clock_identifier_;
  ::bosdyn::api::RequestHeader* header_;
  ::bosdyn::api::graph_nav::Route* route_;
  ::bosdyn::api::graph_nav::TravelParams* travel_params_;
  PROTOBUF_NAMESPACE_ID::Timestamp* end_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto;
};
// -------------------------------------------------------------------

class NavigateRouteResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.NavigateRouteResponse) */ {
 public:
  inline NavigateRouteResponse() : NavigateRouteResponse(nullptr) {}
  virtual ~NavigateRouteResponse();

  NavigateRouteResponse(const NavigateRouteResponse& from);
  NavigateRouteResponse(NavigateRouteResponse&& from) noexcept
    : NavigateRouteResponse() {
    *this = ::std::move(from);
  }

  inline NavigateRouteResponse& operator=(const NavigateRouteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NavigateRouteResponse& operator=(NavigateRouteResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NavigateRouteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NavigateRouteResponse* internal_default_instance() {
    return reinterpret_cast<const NavigateRouteResponse*>(
               &_NavigateRouteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(NavigateRouteResponse& a, NavigateRouteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NavigateRouteResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NavigateRouteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NavigateRouteResponse* New() const final {
    return CreateMaybeMessage<NavigateRouteResponse>(nullptr);
  }

  NavigateRouteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NavigateRouteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NavigateRouteResponse& from);
  void MergeFrom(const NavigateRouteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NavigateRouteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.NavigateRouteResponse";
  }
  protected:
  explicit NavigateRouteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef NavigateRouteResponse_Status Status;
  static constexpr Status STATUS_UNKNOWN =
    NavigateRouteResponse_Status_STATUS_UNKNOWN;
  static constexpr Status STATUS_OK =
    NavigateRouteResponse_Status_STATUS_OK;
  static constexpr Status STATUS_NO_TIMESYNC =
    NavigateRouteResponse_Status_STATUS_NO_TIMESYNC;
  static constexpr Status STATUS_EXPIRED =
    NavigateRouteResponse_Status_STATUS_EXPIRED;
  static constexpr Status STATUS_TOO_DISTANT =
    NavigateRouteResponse_Status_STATUS_TOO_DISTANT;
  static constexpr Status STATUS_ROBOT_IMPAIRED =
    NavigateRouteResponse_Status_STATUS_ROBOT_IMPAIRED;
  static constexpr Status STATUS_RECORDING =
    NavigateRouteResponse_Status_STATUS_RECORDING;
  static constexpr Status STATUS_UNKNOWN_ROUTE_ELEMENTS =
    NavigateRouteResponse_Status_STATUS_UNKNOWN_ROUTE_ELEMENTS;
  static constexpr Status STATUS_INVALID_EDGE =
    NavigateRouteResponse_Status_STATUS_INVALID_EDGE;
  static constexpr Status STATUS_CONSTRAINT_FAULT =
    NavigateRouteResponse_Status_STATUS_CONSTRAINT_FAULT;
  static constexpr Status STATUS_FEATURE_DESERT =
    NavigateRouteResponse_Status_STATUS_FEATURE_DESERT;
  static constexpr Status STATUS_LOST =
    NavigateRouteResponse_Status_STATUS_LOST;
  static constexpr Status STATUS_NOT_LOCALIZED_TO_ROUTE =
    NavigateRouteResponse_Status_STATUS_NOT_LOCALIZED_TO_ROUTE;
  static constexpr Status STATUS_COULD_NOT_UPDATE_ROUTE =
    NavigateRouteResponse_Status_STATUS_COULD_NOT_UPDATE_ROUTE;
  static inline bool Status_IsValid(int value) {
    return NavigateRouteResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    NavigateRouteResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    NavigateRouteResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    NavigateRouteResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return NavigateRouteResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return NavigateRouteResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return NavigateRouteResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLeaseUseResultsFieldNumber = 2,
    kErrorWaypointIdsFieldNumber = 5,
    kErrorEdgeIdsFieldNumber = 6,
    kHeaderFieldNumber = 1,
    kStatusFieldNumber = 3,
    kCommandIdFieldNumber = 4,
  };
  // repeated .bosdyn.api.LeaseUseResult lease_use_results = 2;
  int lease_use_results_size() const;
  private:
  int _internal_lease_use_results_size() const;
  public:
  void clear_lease_use_results();
  ::bosdyn::api::LeaseUseResult* mutable_lease_use_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::LeaseUseResult >*
      mutable_lease_use_results();
  private:
  const ::bosdyn::api::LeaseUseResult& _internal_lease_use_results(int index) const;
  ::bosdyn::api::LeaseUseResult* _internal_add_lease_use_results();
  public:
  const ::bosdyn::api::LeaseUseResult& lease_use_results(int index) const;
  ::bosdyn::api::LeaseUseResult* add_lease_use_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::LeaseUseResult >&
      lease_use_results() const;

  // repeated string error_waypoint_ids = 5;
  int error_waypoint_ids_size() const;
  private:
  int _internal_error_waypoint_ids_size() const;
  public:
  void clear_error_waypoint_ids();
  const std::string& error_waypoint_ids(int index) const;
  std::string* mutable_error_waypoint_ids(int index);
  void set_error_waypoint_ids(int index, const std::string& value);
  void set_error_waypoint_ids(int index, std::string&& value);
  void set_error_waypoint_ids(int index, const char* value);
  void set_error_waypoint_ids(int index, const char* value, size_t size);
  std::string* add_error_waypoint_ids();
  void add_error_waypoint_ids(const std::string& value);
  void add_error_waypoint_ids(std::string&& value);
  void add_error_waypoint_ids(const char* value);
  void add_error_waypoint_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& error_waypoint_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_error_waypoint_ids();
  private:
  const std::string& _internal_error_waypoint_ids(int index) const;
  std::string* _internal_add_error_waypoint_ids();
  public:

  // repeated .bosdyn.api.graph_nav.Edge.Id error_edge_ids = 6;
  int error_edge_ids_size() const;
  private:
  int _internal_error_edge_ids_size() const;
  public:
  void clear_error_edge_ids();
  ::bosdyn::api::graph_nav::Edge_Id* mutable_error_edge_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::Edge_Id >*
      mutable_error_edge_ids();
  private:
  const ::bosdyn::api::graph_nav::Edge_Id& _internal_error_edge_ids(int index) const;
  ::bosdyn::api::graph_nav::Edge_Id* _internal_add_error_edge_ids();
  public:
  const ::bosdyn::api::graph_nav::Edge_Id& error_edge_ids(int index) const;
  ::bosdyn::api::graph_nav::Edge_Id* add_error_edge_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::Edge_Id >&
      error_edge_ids() const;

  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // .bosdyn.api.graph_nav.NavigateRouteResponse.Status status = 3;
  void clear_status();
  ::bosdyn::api::graph_nav::NavigateRouteResponse_Status status() const;
  void set_status(::bosdyn::api::graph_nav::NavigateRouteResponse_Status value);
  private:
  ::bosdyn::api::graph_nav::NavigateRouteResponse_Status _internal_status() const;
  void _internal_set_status(::bosdyn::api::graph_nav::NavigateRouteResponse_Status value);
  public:

  // uint32 command_id = 4;
  void clear_command_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 command_id() const;
  void set_command_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_command_id() const;
  void _internal_set_command_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.NavigateRouteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::LeaseUseResult > lease_use_results_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> error_waypoint_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::Edge_Id > error_edge_ids_;
  ::bosdyn::api::ResponseHeader* header_;
  int status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 command_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto;
};
// -------------------------------------------------------------------

class NavigationFeedbackRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.NavigationFeedbackRequest) */ {
 public:
  inline NavigationFeedbackRequest() : NavigationFeedbackRequest(nullptr) {}
  virtual ~NavigationFeedbackRequest();

  NavigationFeedbackRequest(const NavigationFeedbackRequest& from);
  NavigationFeedbackRequest(NavigationFeedbackRequest&& from) noexcept
    : NavigationFeedbackRequest() {
    *this = ::std::move(from);
  }

  inline NavigationFeedbackRequest& operator=(const NavigationFeedbackRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NavigationFeedbackRequest& operator=(NavigationFeedbackRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NavigationFeedbackRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NavigationFeedbackRequest* internal_default_instance() {
    return reinterpret_cast<const NavigationFeedbackRequest*>(
               &_NavigationFeedbackRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(NavigationFeedbackRequest& a, NavigationFeedbackRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NavigationFeedbackRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NavigationFeedbackRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NavigationFeedbackRequest* New() const final {
    return CreateMaybeMessage<NavigationFeedbackRequest>(nullptr);
  }

  NavigationFeedbackRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NavigationFeedbackRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NavigationFeedbackRequest& from);
  void MergeFrom(const NavigationFeedbackRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NavigationFeedbackRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.NavigationFeedbackRequest";
  }
  protected:
  explicit NavigationFeedbackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kCommandIdFieldNumber = 2,
  };
  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // uint32 command_id = 2;
  void clear_command_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 command_id() const;
  void set_command_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_command_id() const;
  void _internal_set_command_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.NavigationFeedbackRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::RequestHeader* header_;
  ::PROTOBUF_NAMESPACE_ID::uint32 command_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto;
};
// -------------------------------------------------------------------

class NavigationFeedbackResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.NavigationFeedbackResponse) */ {
 public:
  inline NavigationFeedbackResponse() : NavigationFeedbackResponse(nullptr) {}
  virtual ~NavigationFeedbackResponse();

  NavigationFeedbackResponse(const NavigationFeedbackResponse& from);
  NavigationFeedbackResponse(NavigationFeedbackResponse&& from) noexcept
    : NavigationFeedbackResponse() {
    *this = ::std::move(from);
  }

  inline NavigationFeedbackResponse& operator=(const NavigationFeedbackResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NavigationFeedbackResponse& operator=(NavigationFeedbackResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NavigationFeedbackResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NavigationFeedbackResponse* internal_default_instance() {
    return reinterpret_cast<const NavigationFeedbackResponse*>(
               &_NavigationFeedbackResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(NavigationFeedbackResponse& a, NavigationFeedbackResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NavigationFeedbackResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NavigationFeedbackResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NavigationFeedbackResponse* New() const final {
    return CreateMaybeMessage<NavigationFeedbackResponse>(nullptr);
  }

  NavigationFeedbackResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NavigationFeedbackResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NavigationFeedbackResponse& from);
  void MergeFrom(const NavigationFeedbackResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NavigationFeedbackResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.NavigationFeedbackResponse";
  }
  protected:
  explicit NavigationFeedbackResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef NavigationFeedbackResponse_Status Status;
  static constexpr Status STATUS_UNKNOWN =
    NavigationFeedbackResponse_Status_STATUS_UNKNOWN;
  static constexpr Status STATUS_FOLLOWING_ROUTE =
    NavigationFeedbackResponse_Status_STATUS_FOLLOWING_ROUTE;
  static constexpr Status STATUS_REACHED_GOAL =
    NavigationFeedbackResponse_Status_STATUS_REACHED_GOAL;
  static constexpr Status STATUS_NO_ROUTE =
    NavigationFeedbackResponse_Status_STATUS_NO_ROUTE;
  static constexpr Status STATUS_NO_LOCALIZATION =
    NavigationFeedbackResponse_Status_STATUS_NO_LOCALIZATION;
  static constexpr Status STATUS_LOST =
    NavigationFeedbackResponse_Status_STATUS_LOST;
  static constexpr Status STATUS_STUCK =
    NavigationFeedbackResponse_Status_STATUS_STUCK;
  static constexpr Status STATUS_COMMAND_TIMED_OUT =
    NavigationFeedbackResponse_Status_STATUS_COMMAND_TIMED_OUT;
  static constexpr Status STATUS_ROBOT_IMPAIRED =
    NavigationFeedbackResponse_Status_STATUS_ROBOT_IMPAIRED;
  static constexpr Status STATUS_CONSTRAINT_FAULT =
    NavigationFeedbackResponse_Status_STATUS_CONSTRAINT_FAULT;
  static constexpr Status STATUS_COMMAND_OVERRIDDEN =
    NavigationFeedbackResponse_Status_STATUS_COMMAND_OVERRIDDEN;
  static constexpr Status STATUS_NOT_LOCALIZED_TO_ROUTE =
    NavigationFeedbackResponse_Status_STATUS_NOT_LOCALIZED_TO_ROUTE;
  static constexpr Status STATUS_LEASE_ERROR =
    NavigationFeedbackResponse_Status_STATUS_LEASE_ERROR;
  static inline bool Status_IsValid(int value) {
    return NavigationFeedbackResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    NavigationFeedbackResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    NavigationFeedbackResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    NavigationFeedbackResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return NavigationFeedbackResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return NavigationFeedbackResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return NavigationFeedbackResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kRemainingRouteFieldNumber = 3,
    kLastKoTformGoalFieldNumber = 5,
    kStatusFieldNumber = 2,
    kCommandIdFieldNumber = 4,
  };
  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // .bosdyn.api.graph_nav.Route remaining_route = 3;
  bool has_remaining_route() const;
  private:
  bool _internal_has_remaining_route() const;
  public:
  void clear_remaining_route();
  const ::bosdyn::api::graph_nav::Route& remaining_route() const;
  ::bosdyn::api::graph_nav::Route* release_remaining_route();
  ::bosdyn::api::graph_nav::Route* mutable_remaining_route();
  void set_allocated_remaining_route(::bosdyn::api::graph_nav::Route* remaining_route);
  private:
  const ::bosdyn::api::graph_nav::Route& _internal_remaining_route() const;
  ::bosdyn::api::graph_nav::Route* _internal_mutable_remaining_route();
  public:
  void unsafe_arena_set_allocated_remaining_route(
      ::bosdyn::api::graph_nav::Route* remaining_route);
  ::bosdyn::api::graph_nav::Route* unsafe_arena_release_remaining_route();

  // .bosdyn.api.SE3Pose last_ko_tform_goal = 5;
  bool has_last_ko_tform_goal() const;
  private:
  bool _internal_has_last_ko_tform_goal() const;
  public:
  void clear_last_ko_tform_goal();
  const ::bosdyn::api::SE3Pose& last_ko_tform_goal() const;
  ::bosdyn::api::SE3Pose* release_last_ko_tform_goal();
  ::bosdyn::api::SE3Pose* mutable_last_ko_tform_goal();
  void set_allocated_last_ko_tform_goal(::bosdyn::api::SE3Pose* last_ko_tform_goal);
  private:
  const ::bosdyn::api::SE3Pose& _internal_last_ko_tform_goal() const;
  ::bosdyn::api::SE3Pose* _internal_mutable_last_ko_tform_goal();
  public:
  void unsafe_arena_set_allocated_last_ko_tform_goal(
      ::bosdyn::api::SE3Pose* last_ko_tform_goal);
  ::bosdyn::api::SE3Pose* unsafe_arena_release_last_ko_tform_goal();

  // .bosdyn.api.graph_nav.NavigationFeedbackResponse.Status status = 2;
  void clear_status();
  ::bosdyn::api::graph_nav::NavigationFeedbackResponse_Status status() const;
  void set_status(::bosdyn::api::graph_nav::NavigationFeedbackResponse_Status value);
  private:
  ::bosdyn::api::graph_nav::NavigationFeedbackResponse_Status _internal_status() const;
  void _internal_set_status(::bosdyn::api::graph_nav::NavigationFeedbackResponse_Status value);
  public:

  // uint32 command_id = 4;
  void clear_command_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 command_id() const;
  void set_command_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_command_id() const;
  void _internal_set_command_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.NavigationFeedbackResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::ResponseHeader* header_;
  ::bosdyn::api::graph_nav::Route* remaining_route_;
  ::bosdyn::api::SE3Pose* last_ko_tform_goal_;
  int status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 command_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto;
};
// -------------------------------------------------------------------

class GetLocalizationStateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.GetLocalizationStateRequest) */ {
 public:
  inline GetLocalizationStateRequest() : GetLocalizationStateRequest(nullptr) {}
  virtual ~GetLocalizationStateRequest();

  GetLocalizationStateRequest(const GetLocalizationStateRequest& from);
  GetLocalizationStateRequest(GetLocalizationStateRequest&& from) noexcept
    : GetLocalizationStateRequest() {
    *this = ::std::move(from);
  }

  inline GetLocalizationStateRequest& operator=(const GetLocalizationStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLocalizationStateRequest& operator=(GetLocalizationStateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLocalizationStateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLocalizationStateRequest* internal_default_instance() {
    return reinterpret_cast<const GetLocalizationStateRequest*>(
               &_GetLocalizationStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetLocalizationStateRequest& a, GetLocalizationStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLocalizationStateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLocalizationStateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLocalizationStateRequest* New() const final {
    return CreateMaybeMessage<GetLocalizationStateRequest>(nullptr);
  }

  GetLocalizationStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLocalizationStateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLocalizationStateRequest& from);
  void MergeFrom(const GetLocalizationStateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLocalizationStateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.GetLocalizationStateRequest";
  }
  protected:
  explicit GetLocalizationStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kRequestLivePointCloudFieldNumber = 2,
    kRequestLiveImagesFieldNumber = 3,
    kRequestLiveTerrainMapsFieldNumber = 4,
    kRequestLiveWorldObjectsFieldNumber = 5,
    kRequestLiveRobotStateFieldNumber = 6,
    kCompressLivePointCloudFieldNumber = 7,
  };
  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // bool request_live_point_cloud = 2;
  void clear_request_live_point_cloud();
  bool request_live_point_cloud() const;
  void set_request_live_point_cloud(bool value);
  private:
  bool _internal_request_live_point_cloud() const;
  void _internal_set_request_live_point_cloud(bool value);
  public:

  // bool request_live_images = 3;
  void clear_request_live_images();
  bool request_live_images() const;
  void set_request_live_images(bool value);
  private:
  bool _internal_request_live_images() const;
  void _internal_set_request_live_images(bool value);
  public:

  // bool request_live_terrain_maps = 4;
  void clear_request_live_terrain_maps();
  bool request_live_terrain_maps() const;
  void set_request_live_terrain_maps(bool value);
  private:
  bool _internal_request_live_terrain_maps() const;
  void _internal_set_request_live_terrain_maps(bool value);
  public:

  // bool request_live_world_objects = 5;
  void clear_request_live_world_objects();
  bool request_live_world_objects() const;
  void set_request_live_world_objects(bool value);
  private:
  bool _internal_request_live_world_objects() const;
  void _internal_set_request_live_world_objects(bool value);
  public:

  // bool request_live_robot_state = 6;
  void clear_request_live_robot_state();
  bool request_live_robot_state() const;
  void set_request_live_robot_state(bool value);
  private:
  bool _internal_request_live_robot_state() const;
  void _internal_set_request_live_robot_state(bool value);
  public:

  // bool compress_live_point_cloud = 7;
  void clear_compress_live_point_cloud();
  bool compress_live_point_cloud() const;
  void set_compress_live_point_cloud(bool value);
  private:
  bool _internal_compress_live_point_cloud() const;
  void _internal_set_compress_live_point_cloud(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.GetLocalizationStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::RequestHeader* header_;
  bool request_live_point_cloud_;
  bool request_live_images_;
  bool request_live_terrain_maps_;
  bool request_live_world_objects_;
  bool request_live_robot_state_;
  bool compress_live_point_cloud_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto;
};
// -------------------------------------------------------------------

class RemotePointCloudStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.RemotePointCloudStatus) */ {
 public:
  inline RemotePointCloudStatus() : RemotePointCloudStatus(nullptr) {}
  virtual ~RemotePointCloudStatus();

  RemotePointCloudStatus(const RemotePointCloudStatus& from);
  RemotePointCloudStatus(RemotePointCloudStatus&& from) noexcept
    : RemotePointCloudStatus() {
    *this = ::std::move(from);
  }

  inline RemotePointCloudStatus& operator=(const RemotePointCloudStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemotePointCloudStatus& operator=(RemotePointCloudStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemotePointCloudStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemotePointCloudStatus* internal_default_instance() {
    return reinterpret_cast<const RemotePointCloudStatus*>(
               &_RemotePointCloudStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(RemotePointCloudStatus& a, RemotePointCloudStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(RemotePointCloudStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemotePointCloudStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemotePointCloudStatus* New() const final {
    return CreateMaybeMessage<RemotePointCloudStatus>(nullptr);
  }

  RemotePointCloudStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemotePointCloudStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemotePointCloudStatus& from);
  void MergeFrom(const RemotePointCloudStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemotePointCloudStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.RemotePointCloudStatus";
  }
  protected:
  explicit RemotePointCloudStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceNameFieldNumber = 1,
    kExistsInDirectoryFieldNumber = 2,
    kHasDataFieldNumber = 3,
  };
  // string service_name = 1;
  void clear_service_name();
  const std::string& service_name() const;
  void set_service_name(const std::string& value);
  void set_service_name(std::string&& value);
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  std::string* mutable_service_name();
  std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);
  private:
  const std::string& _internal_service_name() const;
  void _internal_set_service_name(const std::string& value);
  std::string* _internal_mutable_service_name();
  public:

  // bool exists_in_directory = 2;
  void clear_exists_in_directory();
  bool exists_in_directory() const;
  void set_exists_in_directory(bool value);
  private:
  bool _internal_exists_in_directory() const;
  void _internal_set_exists_in_directory(bool value);
  public:

  // bool has_data = 3;
  void clear_has_data();
  bool has_data() const;
  void set_has_data(bool value);
  private:
  bool _internal_has_data() const;
  void _internal_set_has_data(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.RemotePointCloudStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
  bool exists_in_directory_;
  bool has_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto;
};
// -------------------------------------------------------------------

class LostDetectorState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.LostDetectorState) */ {
 public:
  inline LostDetectorState() : LostDetectorState(nullptr) {}
  virtual ~LostDetectorState();

  LostDetectorState(const LostDetectorState& from);
  LostDetectorState(LostDetectorState&& from) noexcept
    : LostDetectorState() {
    *this = ::std::move(from);
  }

  inline LostDetectorState& operator=(const LostDetectorState& from) {
    CopyFrom(from);
    return *this;
  }
  inline LostDetectorState& operator=(LostDetectorState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LostDetectorState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LostDetectorState* internal_default_instance() {
    return reinterpret_cast<const LostDetectorState*>(
               &_LostDetectorState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(LostDetectorState& a, LostDetectorState& b) {
    a.Swap(&b);
  }
  inline void Swap(LostDetectorState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LostDetectorState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LostDetectorState* New() const final {
    return CreateMaybeMessage<LostDetectorState>(nullptr);
  }

  LostDetectorState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LostDetectorState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LostDetectorState& from);
  void MergeFrom(const LostDetectorState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LostDetectorState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.LostDetectorState";
  }
  protected:
  explicit LostDetectorState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsLostFieldNumber = 1,
  };
  // bool is_lost = 1;
  void clear_is_lost();
  bool is_lost() const;
  void set_is_lost(bool value);
  private:
  bool _internal_is_lost() const;
  void _internal_set_is_lost(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.LostDetectorState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool is_lost_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto;
};
// -------------------------------------------------------------------

class GetLocalizationStateResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.GetLocalizationStateResponse) */ {
 public:
  inline GetLocalizationStateResponse() : GetLocalizationStateResponse(nullptr) {}
  virtual ~GetLocalizationStateResponse();

  GetLocalizationStateResponse(const GetLocalizationStateResponse& from);
  GetLocalizationStateResponse(GetLocalizationStateResponse&& from) noexcept
    : GetLocalizationStateResponse() {
    *this = ::std::move(from);
  }

  inline GetLocalizationStateResponse& operator=(const GetLocalizationStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLocalizationStateResponse& operator=(GetLocalizationStateResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLocalizationStateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLocalizationStateResponse* internal_default_instance() {
    return reinterpret_cast<const GetLocalizationStateResponse*>(
               &_GetLocalizationStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GetLocalizationStateResponse& a, GetLocalizationStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLocalizationStateResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLocalizationStateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLocalizationStateResponse* New() const final {
    return CreateMaybeMessage<GetLocalizationStateResponse>(nullptr);
  }

  GetLocalizationStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLocalizationStateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLocalizationStateResponse& from);
  void MergeFrom(const GetLocalizationStateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLocalizationStateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.GetLocalizationStateResponse";
  }
  protected:
  explicit GetLocalizationStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemoteCloudStatusFieldNumber = 5,
    kHeaderFieldNumber = 1,
    kLocalizationFieldNumber = 2,
    kRobotKinematicsFieldNumber = 4,
    kLiveDataFieldNumber = 6,
    kLostDetectorStateFieldNumber = 7,
  };
  // repeated .bosdyn.api.graph_nav.RemotePointCloudStatus remote_cloud_status = 5;
  int remote_cloud_status_size() const;
  private:
  int _internal_remote_cloud_status_size() const;
  public:
  void clear_remote_cloud_status();
  ::bosdyn::api::graph_nav::RemotePointCloudStatus* mutable_remote_cloud_status(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::RemotePointCloudStatus >*
      mutable_remote_cloud_status();
  private:
  const ::bosdyn::api::graph_nav::RemotePointCloudStatus& _internal_remote_cloud_status(int index) const;
  ::bosdyn::api::graph_nav::RemotePointCloudStatus* _internal_add_remote_cloud_status();
  public:
  const ::bosdyn::api::graph_nav::RemotePointCloudStatus& remote_cloud_status(int index) const;
  ::bosdyn::api::graph_nav::RemotePointCloudStatus* add_remote_cloud_status();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::RemotePointCloudStatus >&
      remote_cloud_status() const;

  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // .bosdyn.api.graph_nav.Localization localization = 2;
  bool has_localization() const;
  private:
  bool _internal_has_localization() const;
  public:
  void clear_localization();
  const ::bosdyn::api::graph_nav::Localization& localization() const;
  ::bosdyn::api::graph_nav::Localization* release_localization();
  ::bosdyn::api::graph_nav::Localization* mutable_localization();
  void set_allocated_localization(::bosdyn::api::graph_nav::Localization* localization);
  private:
  const ::bosdyn::api::graph_nav::Localization& _internal_localization() const;
  ::bosdyn::api::graph_nav::Localization* _internal_mutable_localization();
  public:
  void unsafe_arena_set_allocated_localization(
      ::bosdyn::api::graph_nav::Localization* localization);
  ::bosdyn::api::graph_nav::Localization* unsafe_arena_release_localization();

  // .bosdyn.api.KinematicState robot_kinematics = 4;
  bool has_robot_kinematics() const;
  private:
  bool _internal_has_robot_kinematics() const;
  public:
  void clear_robot_kinematics();
  const ::bosdyn::api::KinematicState& robot_kinematics() const;
  ::bosdyn::api::KinematicState* release_robot_kinematics();
  ::bosdyn::api::KinematicState* mutable_robot_kinematics();
  void set_allocated_robot_kinematics(::bosdyn::api::KinematicState* robot_kinematics);
  private:
  const ::bosdyn::api::KinematicState& _internal_robot_kinematics() const;
  ::bosdyn::api::KinematicState* _internal_mutable_robot_kinematics();
  public:
  void unsafe_arena_set_allocated_robot_kinematics(
      ::bosdyn::api::KinematicState* robot_kinematics);
  ::bosdyn::api::KinematicState* unsafe_arena_release_robot_kinematics();

  // .bosdyn.api.graph_nav.WaypointSnapshot live_data = 6;
  bool has_live_data() const;
  private:
  bool _internal_has_live_data() const;
  public:
  void clear_live_data();
  const ::bosdyn::api::graph_nav::WaypointSnapshot& live_data() const;
  ::bosdyn::api::graph_nav::WaypointSnapshot* release_live_data();
  ::bosdyn::api::graph_nav::WaypointSnapshot* mutable_live_data();
  void set_allocated_live_data(::bosdyn::api::graph_nav::WaypointSnapshot* live_data);
  private:
  const ::bosdyn::api::graph_nav::WaypointSnapshot& _internal_live_data() const;
  ::bosdyn::api::graph_nav::WaypointSnapshot* _internal_mutable_live_data();
  public:
  void unsafe_arena_set_allocated_live_data(
      ::bosdyn::api::graph_nav::WaypointSnapshot* live_data);
  ::bosdyn::api::graph_nav::WaypointSnapshot* unsafe_arena_release_live_data();

  // .bosdyn.api.graph_nav.LostDetectorState lost_detector_state = 7;
  bool has_lost_detector_state() const;
  private:
  bool _internal_has_lost_detector_state() const;
  public:
  void clear_lost_detector_state();
  const ::bosdyn::api::graph_nav::LostDetectorState& lost_detector_state() const;
  ::bosdyn::api::graph_nav::LostDetectorState* release_lost_detector_state();
  ::bosdyn::api::graph_nav::LostDetectorState* mutable_lost_detector_state();
  void set_allocated_lost_detector_state(::bosdyn::api::graph_nav::LostDetectorState* lost_detector_state);
  private:
  const ::bosdyn::api::graph_nav::LostDetectorState& _internal_lost_detector_state() const;
  ::bosdyn::api::graph_nav::LostDetectorState* _internal_mutable_lost_detector_state();
  public:
  void unsafe_arena_set_allocated_lost_detector_state(
      ::bosdyn::api::graph_nav::LostDetectorState* lost_detector_state);
  ::bosdyn::api::graph_nav::LostDetectorState* unsafe_arena_release_lost_detector_state();

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.GetLocalizationStateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::RemotePointCloudStatus > remote_cloud_status_;
  ::bosdyn::api::ResponseHeader* header_;
  ::bosdyn::api::graph_nav::Localization* localization_;
  ::bosdyn::api::KinematicState* robot_kinematics_;
  ::bosdyn::api::graph_nav::WaypointSnapshot* live_data_;
  ::bosdyn::api::graph_nav::LostDetectorState* lost_detector_state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto;
};
// -------------------------------------------------------------------

class ClearGraphRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.ClearGraphRequest) */ {
 public:
  inline ClearGraphRequest() : ClearGraphRequest(nullptr) {}
  virtual ~ClearGraphRequest();

  ClearGraphRequest(const ClearGraphRequest& from);
  ClearGraphRequest(ClearGraphRequest&& from) noexcept
    : ClearGraphRequest() {
    *this = ::std::move(from);
  }

  inline ClearGraphRequest& operator=(const ClearGraphRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearGraphRequest& operator=(ClearGraphRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClearGraphRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClearGraphRequest* internal_default_instance() {
    return reinterpret_cast<const ClearGraphRequest*>(
               &_ClearGraphRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ClearGraphRequest& a, ClearGraphRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearGraphRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClearGraphRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClearGraphRequest* New() const final {
    return CreateMaybeMessage<ClearGraphRequest>(nullptr);
  }

  ClearGraphRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClearGraphRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClearGraphRequest& from);
  void MergeFrom(const ClearGraphRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClearGraphRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.ClearGraphRequest";
  }
  protected:
  explicit ClearGraphRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kLeaseFieldNumber = 2,
  };
  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // .bosdyn.api.Lease lease = 2;
  bool has_lease() const;
  private:
  bool _internal_has_lease() const;
  public:
  void clear_lease();
  const ::bosdyn::api::Lease& lease() const;
  ::bosdyn::api::Lease* release_lease();
  ::bosdyn::api::Lease* mutable_lease();
  void set_allocated_lease(::bosdyn::api::Lease* lease);
  private:
  const ::bosdyn::api::Lease& _internal_lease() const;
  ::bosdyn::api::Lease* _internal_mutable_lease();
  public:
  void unsafe_arena_set_allocated_lease(
      ::bosdyn::api::Lease* lease);
  ::bosdyn::api::Lease* unsafe_arena_release_lease();

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.ClearGraphRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::RequestHeader* header_;
  ::bosdyn::api::Lease* lease_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto;
};
// -------------------------------------------------------------------

class ClearGraphResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.ClearGraphResponse) */ {
 public:
  inline ClearGraphResponse() : ClearGraphResponse(nullptr) {}
  virtual ~ClearGraphResponse();

  ClearGraphResponse(const ClearGraphResponse& from);
  ClearGraphResponse(ClearGraphResponse&& from) noexcept
    : ClearGraphResponse() {
    *this = ::std::move(from);
  }

  inline ClearGraphResponse& operator=(const ClearGraphResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearGraphResponse& operator=(ClearGraphResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClearGraphResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClearGraphResponse* internal_default_instance() {
    return reinterpret_cast<const ClearGraphResponse*>(
               &_ClearGraphResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ClearGraphResponse& a, ClearGraphResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearGraphResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClearGraphResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClearGraphResponse* New() const final {
    return CreateMaybeMessage<ClearGraphResponse>(nullptr);
  }

  ClearGraphResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClearGraphResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClearGraphResponse& from);
  void MergeFrom(const ClearGraphResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClearGraphResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.ClearGraphResponse";
  }
  protected:
  explicit ClearGraphResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kLeaseUseResultFieldNumber = 2,
  };
  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // .bosdyn.api.LeaseUseResult lease_use_result = 2;
  bool has_lease_use_result() const;
  private:
  bool _internal_has_lease_use_result() const;
  public:
  void clear_lease_use_result();
  const ::bosdyn::api::LeaseUseResult& lease_use_result() const;
  ::bosdyn::api::LeaseUseResult* release_lease_use_result();
  ::bosdyn::api::LeaseUseResult* mutable_lease_use_result();
  void set_allocated_lease_use_result(::bosdyn::api::LeaseUseResult* lease_use_result);
  private:
  const ::bosdyn::api::LeaseUseResult& _internal_lease_use_result() const;
  ::bosdyn::api::LeaseUseResult* _internal_mutable_lease_use_result();
  public:
  void unsafe_arena_set_allocated_lease_use_result(
      ::bosdyn::api::LeaseUseResult* lease_use_result);
  ::bosdyn::api::LeaseUseResult* unsafe_arena_release_lease_use_result();

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.ClearGraphResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::ResponseHeader* header_;
  ::bosdyn::api::LeaseUseResult* lease_use_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto;
};
// -------------------------------------------------------------------

class UploadGraphRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.UploadGraphRequest) */ {
 public:
  inline UploadGraphRequest() : UploadGraphRequest(nullptr) {}
  virtual ~UploadGraphRequest();

  UploadGraphRequest(const UploadGraphRequest& from);
  UploadGraphRequest(UploadGraphRequest&& from) noexcept
    : UploadGraphRequest() {
    *this = ::std::move(from);
  }

  inline UploadGraphRequest& operator=(const UploadGraphRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadGraphRequest& operator=(UploadGraphRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UploadGraphRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UploadGraphRequest* internal_default_instance() {
    return reinterpret_cast<const UploadGraphRequest*>(
               &_UploadGraphRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(UploadGraphRequest& a, UploadGraphRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadGraphRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadGraphRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UploadGraphRequest* New() const final {
    return CreateMaybeMessage<UploadGraphRequest>(nullptr);
  }

  UploadGraphRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UploadGraphRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UploadGraphRequest& from);
  void MergeFrom(const UploadGraphRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadGraphRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.UploadGraphRequest";
  }
  protected:
  explicit UploadGraphRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kGraphFieldNumber = 2,
    kLeaseFieldNumber = 3,
  };
  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // .bosdyn.api.graph_nav.Graph graph = 2;
  bool has_graph() const;
  private:
  bool _internal_has_graph() const;
  public:
  void clear_graph();
  const ::bosdyn::api::graph_nav::Graph& graph() const;
  ::bosdyn::api::graph_nav::Graph* release_graph();
  ::bosdyn::api::graph_nav::Graph* mutable_graph();
  void set_allocated_graph(::bosdyn::api::graph_nav::Graph* graph);
  private:
  const ::bosdyn::api::graph_nav::Graph& _internal_graph() const;
  ::bosdyn::api::graph_nav::Graph* _internal_mutable_graph();
  public:
  void unsafe_arena_set_allocated_graph(
      ::bosdyn::api::graph_nav::Graph* graph);
  ::bosdyn::api::graph_nav::Graph* unsafe_arena_release_graph();

  // .bosdyn.api.Lease lease = 3;
  bool has_lease() const;
  private:
  bool _internal_has_lease() const;
  public:
  void clear_lease();
  const ::bosdyn::api::Lease& lease() const;
  ::bosdyn::api::Lease* release_lease();
  ::bosdyn::api::Lease* mutable_lease();
  void set_allocated_lease(::bosdyn::api::Lease* lease);
  private:
  const ::bosdyn::api::Lease& _internal_lease() const;
  ::bosdyn::api::Lease* _internal_mutable_lease();
  public:
  void unsafe_arena_set_allocated_lease(
      ::bosdyn::api::Lease* lease);
  ::bosdyn::api::Lease* unsafe_arena_release_lease();

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.UploadGraphRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::RequestHeader* header_;
  ::bosdyn::api::graph_nav::Graph* graph_;
  ::bosdyn::api::Lease* lease_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto;
};
// -------------------------------------------------------------------

class UploadGraphResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.UploadGraphResponse) */ {
 public:
  inline UploadGraphResponse() : UploadGraphResponse(nullptr) {}
  virtual ~UploadGraphResponse();

  UploadGraphResponse(const UploadGraphResponse& from);
  UploadGraphResponse(UploadGraphResponse&& from) noexcept
    : UploadGraphResponse() {
    *this = ::std::move(from);
  }

  inline UploadGraphResponse& operator=(const UploadGraphResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadGraphResponse& operator=(UploadGraphResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UploadGraphResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UploadGraphResponse* internal_default_instance() {
    return reinterpret_cast<const UploadGraphResponse*>(
               &_UploadGraphResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(UploadGraphResponse& a, UploadGraphResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadGraphResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadGraphResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UploadGraphResponse* New() const final {
    return CreateMaybeMessage<UploadGraphResponse>(nullptr);
  }

  UploadGraphResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UploadGraphResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UploadGraphResponse& from);
  void MergeFrom(const UploadGraphResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadGraphResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.UploadGraphResponse";
  }
  protected:
  explicit UploadGraphResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef UploadGraphResponse_Status Status;
  static constexpr Status STATUS_UNKNOWN =
    UploadGraphResponse_Status_STATUS_UNKNOWN;
  static constexpr Status STATUS_OK =
    UploadGraphResponse_Status_STATUS_OK;
  static constexpr Status STATUS_MAP_TOO_LARGE_LICENSE =
    UploadGraphResponse_Status_STATUS_MAP_TOO_LARGE_LICENSE;
  static inline bool Status_IsValid(int value) {
    return UploadGraphResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    UploadGraphResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    UploadGraphResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    UploadGraphResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return UploadGraphResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return UploadGraphResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return UploadGraphResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLoadedWaypointSnapshotIdsFieldNumber = 3,
    kUnknownWaypointSnapshotIdsFieldNumber = 4,
    kLoadedEdgeSnapshotIdsFieldNumber = 5,
    kUnknownEdgeSnapshotIdsFieldNumber = 6,
    kHeaderFieldNumber = 1,
    kLeaseUseResultFieldNumber = 2,
    kLicenseStatusFieldNumber = 7,
    kStatusFieldNumber = 8,
  };
  // repeated string loaded_waypoint_snapshot_ids = 3;
  int loaded_waypoint_snapshot_ids_size() const;
  private:
  int _internal_loaded_waypoint_snapshot_ids_size() const;
  public:
  void clear_loaded_waypoint_snapshot_ids();
  const std::string& loaded_waypoint_snapshot_ids(int index) const;
  std::string* mutable_loaded_waypoint_snapshot_ids(int index);
  void set_loaded_waypoint_snapshot_ids(int index, const std::string& value);
  void set_loaded_waypoint_snapshot_ids(int index, std::string&& value);
  void set_loaded_waypoint_snapshot_ids(int index, const char* value);
  void set_loaded_waypoint_snapshot_ids(int index, const char* value, size_t size);
  std::string* add_loaded_waypoint_snapshot_ids();
  void add_loaded_waypoint_snapshot_ids(const std::string& value);
  void add_loaded_waypoint_snapshot_ids(std::string&& value);
  void add_loaded_waypoint_snapshot_ids(const char* value);
  void add_loaded_waypoint_snapshot_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& loaded_waypoint_snapshot_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_loaded_waypoint_snapshot_ids();
  private:
  const std::string& _internal_loaded_waypoint_snapshot_ids(int index) const;
  std::string* _internal_add_loaded_waypoint_snapshot_ids();
  public:

  // repeated string unknown_waypoint_snapshot_ids = 4;
  int unknown_waypoint_snapshot_ids_size() const;
  private:
  int _internal_unknown_waypoint_snapshot_ids_size() const;
  public:
  void clear_unknown_waypoint_snapshot_ids();
  const std::string& unknown_waypoint_snapshot_ids(int index) const;
  std::string* mutable_unknown_waypoint_snapshot_ids(int index);
  void set_unknown_waypoint_snapshot_ids(int index, const std::string& value);
  void set_unknown_waypoint_snapshot_ids(int index, std::string&& value);
  void set_unknown_waypoint_snapshot_ids(int index, const char* value);
  void set_unknown_waypoint_snapshot_ids(int index, const char* value, size_t size);
  std::string* add_unknown_waypoint_snapshot_ids();
  void add_unknown_waypoint_snapshot_ids(const std::string& value);
  void add_unknown_waypoint_snapshot_ids(std::string&& value);
  void add_unknown_waypoint_snapshot_ids(const char* value);
  void add_unknown_waypoint_snapshot_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& unknown_waypoint_snapshot_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_unknown_waypoint_snapshot_ids();
  private:
  const std::string& _internal_unknown_waypoint_snapshot_ids(int index) const;
  std::string* _internal_add_unknown_waypoint_snapshot_ids();
  public:

  // repeated string loaded_edge_snapshot_ids = 5;
  int loaded_edge_snapshot_ids_size() const;
  private:
  int _internal_loaded_edge_snapshot_ids_size() const;
  public:
  void clear_loaded_edge_snapshot_ids();
  const std::string& loaded_edge_snapshot_ids(int index) const;
  std::string* mutable_loaded_edge_snapshot_ids(int index);
  void set_loaded_edge_snapshot_ids(int index, const std::string& value);
  void set_loaded_edge_snapshot_ids(int index, std::string&& value);
  void set_loaded_edge_snapshot_ids(int index, const char* value);
  void set_loaded_edge_snapshot_ids(int index, const char* value, size_t size);
  std::string* add_loaded_edge_snapshot_ids();
  void add_loaded_edge_snapshot_ids(const std::string& value);
  void add_loaded_edge_snapshot_ids(std::string&& value);
  void add_loaded_edge_snapshot_ids(const char* value);
  void add_loaded_edge_snapshot_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& loaded_edge_snapshot_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_loaded_edge_snapshot_ids();
  private:
  const std::string& _internal_loaded_edge_snapshot_ids(int index) const;
  std::string* _internal_add_loaded_edge_snapshot_ids();
  public:

  // repeated string unknown_edge_snapshot_ids = 6;
  int unknown_edge_snapshot_ids_size() const;
  private:
  int _internal_unknown_edge_snapshot_ids_size() const;
  public:
  void clear_unknown_edge_snapshot_ids();
  const std::string& unknown_edge_snapshot_ids(int index) const;
  std::string* mutable_unknown_edge_snapshot_ids(int index);
  void set_unknown_edge_snapshot_ids(int index, const std::string& value);
  void set_unknown_edge_snapshot_ids(int index, std::string&& value);
  void set_unknown_edge_snapshot_ids(int index, const char* value);
  void set_unknown_edge_snapshot_ids(int index, const char* value, size_t size);
  std::string* add_unknown_edge_snapshot_ids();
  void add_unknown_edge_snapshot_ids(const std::string& value);
  void add_unknown_edge_snapshot_ids(std::string&& value);
  void add_unknown_edge_snapshot_ids(const char* value);
  void add_unknown_edge_snapshot_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& unknown_edge_snapshot_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_unknown_edge_snapshot_ids();
  private:
  const std::string& _internal_unknown_edge_snapshot_ids(int index) const;
  std::string* _internal_add_unknown_edge_snapshot_ids();
  public:

  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // .bosdyn.api.LeaseUseResult lease_use_result = 2;
  bool has_lease_use_result() const;
  private:
  bool _internal_has_lease_use_result() const;
  public:
  void clear_lease_use_result();
  const ::bosdyn::api::LeaseUseResult& lease_use_result() const;
  ::bosdyn::api::LeaseUseResult* release_lease_use_result();
  ::bosdyn::api::LeaseUseResult* mutable_lease_use_result();
  void set_allocated_lease_use_result(::bosdyn::api::LeaseUseResult* lease_use_result);
  private:
  const ::bosdyn::api::LeaseUseResult& _internal_lease_use_result() const;
  ::bosdyn::api::LeaseUseResult* _internal_mutable_lease_use_result();
  public:
  void unsafe_arena_set_allocated_lease_use_result(
      ::bosdyn::api::LeaseUseResult* lease_use_result);
  ::bosdyn::api::LeaseUseResult* unsafe_arena_release_lease_use_result();

  // .bosdyn.api.LicenseInfo.Status license_status = 7;
  void clear_license_status();
  ::bosdyn::api::LicenseInfo_Status license_status() const;
  void set_license_status(::bosdyn::api::LicenseInfo_Status value);
  private:
  ::bosdyn::api::LicenseInfo_Status _internal_license_status() const;
  void _internal_set_license_status(::bosdyn::api::LicenseInfo_Status value);
  public:

  // .bosdyn.api.graph_nav.UploadGraphResponse.Status status = 8;
  void clear_status();
  ::bosdyn::api::graph_nav::UploadGraphResponse_Status status() const;
  void set_status(::bosdyn::api::graph_nav::UploadGraphResponse_Status value);
  private:
  ::bosdyn::api::graph_nav::UploadGraphResponse_Status _internal_status() const;
  void _internal_set_status(::bosdyn::api::graph_nav::UploadGraphResponse_Status value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.UploadGraphResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> loaded_waypoint_snapshot_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> unknown_waypoint_snapshot_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> loaded_edge_snapshot_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> unknown_edge_snapshot_ids_;
  ::bosdyn::api::ResponseHeader* header_;
  ::bosdyn::api::LeaseUseResult* lease_use_result_;
  int license_status_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto;
};
// -------------------------------------------------------------------

class DownloadGraphRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.DownloadGraphRequest) */ {
 public:
  inline DownloadGraphRequest() : DownloadGraphRequest(nullptr) {}
  virtual ~DownloadGraphRequest();

  DownloadGraphRequest(const DownloadGraphRequest& from);
  DownloadGraphRequest(DownloadGraphRequest&& from) noexcept
    : DownloadGraphRequest() {
    *this = ::std::move(from);
  }

  inline DownloadGraphRequest& operator=(const DownloadGraphRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DownloadGraphRequest& operator=(DownloadGraphRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DownloadGraphRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DownloadGraphRequest* internal_default_instance() {
    return reinterpret_cast<const DownloadGraphRequest*>(
               &_DownloadGraphRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(DownloadGraphRequest& a, DownloadGraphRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DownloadGraphRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DownloadGraphRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DownloadGraphRequest* New() const final {
    return CreateMaybeMessage<DownloadGraphRequest>(nullptr);
  }

  DownloadGraphRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DownloadGraphRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DownloadGraphRequest& from);
  void MergeFrom(const DownloadGraphRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DownloadGraphRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.DownloadGraphRequest";
  }
  protected:
  explicit DownloadGraphRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.DownloadGraphRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::RequestHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto;
};
// -------------------------------------------------------------------

class DownloadGraphResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.DownloadGraphResponse) */ {
 public:
  inline DownloadGraphResponse() : DownloadGraphResponse(nullptr) {}
  virtual ~DownloadGraphResponse();

  DownloadGraphResponse(const DownloadGraphResponse& from);
  DownloadGraphResponse(DownloadGraphResponse&& from) noexcept
    : DownloadGraphResponse() {
    *this = ::std::move(from);
  }

  inline DownloadGraphResponse& operator=(const DownloadGraphResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DownloadGraphResponse& operator=(DownloadGraphResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DownloadGraphResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DownloadGraphResponse* internal_default_instance() {
    return reinterpret_cast<const DownloadGraphResponse*>(
               &_DownloadGraphResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(DownloadGraphResponse& a, DownloadGraphResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DownloadGraphResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DownloadGraphResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DownloadGraphResponse* New() const final {
    return CreateMaybeMessage<DownloadGraphResponse>(nullptr);
  }

  DownloadGraphResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DownloadGraphResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DownloadGraphResponse& from);
  void MergeFrom(const DownloadGraphResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DownloadGraphResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.DownloadGraphResponse";
  }
  protected:
  explicit DownloadGraphResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kGraphFieldNumber = 2,
  };
  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // .bosdyn.api.graph_nav.Graph graph = 2;
  bool has_graph() const;
  private:
  bool _internal_has_graph() const;
  public:
  void clear_graph();
  const ::bosdyn::api::graph_nav::Graph& graph() const;
  ::bosdyn::api::graph_nav::Graph* release_graph();
  ::bosdyn::api::graph_nav::Graph* mutable_graph();
  void set_allocated_graph(::bosdyn::api::graph_nav::Graph* graph);
  private:
  const ::bosdyn::api::graph_nav::Graph& _internal_graph() const;
  ::bosdyn::api::graph_nav::Graph* _internal_mutable_graph();
  public:
  void unsafe_arena_set_allocated_graph(
      ::bosdyn::api::graph_nav::Graph* graph);
  ::bosdyn::api::graph_nav::Graph* unsafe_arena_release_graph();

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.DownloadGraphResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::ResponseHeader* header_;
  ::bosdyn::api::graph_nav::Graph* graph_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto;
};
// -------------------------------------------------------------------

class UploadWaypointSnapshotRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.UploadWaypointSnapshotRequest) */ {
 public:
  inline UploadWaypointSnapshotRequest() : UploadWaypointSnapshotRequest(nullptr) {}
  virtual ~UploadWaypointSnapshotRequest();

  UploadWaypointSnapshotRequest(const UploadWaypointSnapshotRequest& from);
  UploadWaypointSnapshotRequest(UploadWaypointSnapshotRequest&& from) noexcept
    : UploadWaypointSnapshotRequest() {
    *this = ::std::move(from);
  }

  inline UploadWaypointSnapshotRequest& operator=(const UploadWaypointSnapshotRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadWaypointSnapshotRequest& operator=(UploadWaypointSnapshotRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UploadWaypointSnapshotRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UploadWaypointSnapshotRequest* internal_default_instance() {
    return reinterpret_cast<const UploadWaypointSnapshotRequest*>(
               &_UploadWaypointSnapshotRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(UploadWaypointSnapshotRequest& a, UploadWaypointSnapshotRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadWaypointSnapshotRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadWaypointSnapshotRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UploadWaypointSnapshotRequest* New() const final {
    return CreateMaybeMessage<UploadWaypointSnapshotRequest>(nullptr);
  }

  UploadWaypointSnapshotRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UploadWaypointSnapshotRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UploadWaypointSnapshotRequest& from);
  void MergeFrom(const UploadWaypointSnapshotRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadWaypointSnapshotRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.UploadWaypointSnapshotRequest";
  }
  protected:
  explicit UploadWaypointSnapshotRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kChunkFieldNumber = 3,
    kLeaseFieldNumber = 4,
  };
  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // .bosdyn.api.DataChunk chunk = 3;
  bool has_chunk() const;
  private:
  bool _internal_has_chunk() const;
  public:
  void clear_chunk();
  const ::bosdyn::api::DataChunk& chunk() const;
  ::bosdyn::api::DataChunk* release_chunk();
  ::bosdyn::api::DataChunk* mutable_chunk();
  void set_allocated_chunk(::bosdyn::api::DataChunk* chunk);
  private:
  const ::bosdyn::api::DataChunk& _internal_chunk() const;
  ::bosdyn::api::DataChunk* _internal_mutable_chunk();
  public:
  void unsafe_arena_set_allocated_chunk(
      ::bosdyn::api::DataChunk* chunk);
  ::bosdyn::api::DataChunk* unsafe_arena_release_chunk();

  // .bosdyn.api.Lease lease = 4;
  bool has_lease() const;
  private:
  bool _internal_has_lease() const;
  public:
  void clear_lease();
  const ::bosdyn::api::Lease& lease() const;
  ::bosdyn::api::Lease* release_lease();
  ::bosdyn::api::Lease* mutable_lease();
  void set_allocated_lease(::bosdyn::api::Lease* lease);
  private:
  const ::bosdyn::api::Lease& _internal_lease() const;
  ::bosdyn::api::Lease* _internal_mutable_lease();
  public:
  void unsafe_arena_set_allocated_lease(
      ::bosdyn::api::Lease* lease);
  ::bosdyn::api::Lease* unsafe_arena_release_lease();

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.UploadWaypointSnapshotRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::RequestHeader* header_;
  ::bosdyn::api::DataChunk* chunk_;
  ::bosdyn::api::Lease* lease_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto;
};
// -------------------------------------------------------------------

class UploadWaypointSnapshotResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.UploadWaypointSnapshotResponse) */ {
 public:
  inline UploadWaypointSnapshotResponse() : UploadWaypointSnapshotResponse(nullptr) {}
  virtual ~UploadWaypointSnapshotResponse();

  UploadWaypointSnapshotResponse(const UploadWaypointSnapshotResponse& from);
  UploadWaypointSnapshotResponse(UploadWaypointSnapshotResponse&& from) noexcept
    : UploadWaypointSnapshotResponse() {
    *this = ::std::move(from);
  }

  inline UploadWaypointSnapshotResponse& operator=(const UploadWaypointSnapshotResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadWaypointSnapshotResponse& operator=(UploadWaypointSnapshotResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UploadWaypointSnapshotResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UploadWaypointSnapshotResponse* internal_default_instance() {
    return reinterpret_cast<const UploadWaypointSnapshotResponse*>(
               &_UploadWaypointSnapshotResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(UploadWaypointSnapshotResponse& a, UploadWaypointSnapshotResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadWaypointSnapshotResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadWaypointSnapshotResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UploadWaypointSnapshotResponse* New() const final {
    return CreateMaybeMessage<UploadWaypointSnapshotResponse>(nullptr);
  }

  UploadWaypointSnapshotResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UploadWaypointSnapshotResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UploadWaypointSnapshotResponse& from);
  void MergeFrom(const UploadWaypointSnapshotResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadWaypointSnapshotResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.UploadWaypointSnapshotResponse";
  }
  protected:
  explicit UploadWaypointSnapshotResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kLeaseUseResultFieldNumber = 2,
  };
  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // .bosdyn.api.LeaseUseResult lease_use_result = 2;
  bool has_lease_use_result() const;
  private:
  bool _internal_has_lease_use_result() const;
  public:
  void clear_lease_use_result();
  const ::bosdyn::api::LeaseUseResult& lease_use_result() const;
  ::bosdyn::api::LeaseUseResult* release_lease_use_result();
  ::bosdyn::api::LeaseUseResult* mutable_lease_use_result();
  void set_allocated_lease_use_result(::bosdyn::api::LeaseUseResult* lease_use_result);
  private:
  const ::bosdyn::api::LeaseUseResult& _internal_lease_use_result() const;
  ::bosdyn::api::LeaseUseResult* _internal_mutable_lease_use_result();
  public:
  void unsafe_arena_set_allocated_lease_use_result(
      ::bosdyn::api::LeaseUseResult* lease_use_result);
  ::bosdyn::api::LeaseUseResult* unsafe_arena_release_lease_use_result();

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.UploadWaypointSnapshotResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::ResponseHeader* header_;
  ::bosdyn::api::LeaseUseResult* lease_use_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto;
};
// -------------------------------------------------------------------

class UploadEdgeSnapshotRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.UploadEdgeSnapshotRequest) */ {
 public:
  inline UploadEdgeSnapshotRequest() : UploadEdgeSnapshotRequest(nullptr) {}
  virtual ~UploadEdgeSnapshotRequest();

  UploadEdgeSnapshotRequest(const UploadEdgeSnapshotRequest& from);
  UploadEdgeSnapshotRequest(UploadEdgeSnapshotRequest&& from) noexcept
    : UploadEdgeSnapshotRequest() {
    *this = ::std::move(from);
  }

  inline UploadEdgeSnapshotRequest& operator=(const UploadEdgeSnapshotRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadEdgeSnapshotRequest& operator=(UploadEdgeSnapshotRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UploadEdgeSnapshotRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UploadEdgeSnapshotRequest* internal_default_instance() {
    return reinterpret_cast<const UploadEdgeSnapshotRequest*>(
               &_UploadEdgeSnapshotRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(UploadEdgeSnapshotRequest& a, UploadEdgeSnapshotRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadEdgeSnapshotRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadEdgeSnapshotRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UploadEdgeSnapshotRequest* New() const final {
    return CreateMaybeMessage<UploadEdgeSnapshotRequest>(nullptr);
  }

  UploadEdgeSnapshotRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UploadEdgeSnapshotRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UploadEdgeSnapshotRequest& from);
  void MergeFrom(const UploadEdgeSnapshotRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadEdgeSnapshotRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.UploadEdgeSnapshotRequest";
  }
  protected:
  explicit UploadEdgeSnapshotRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kChunkFieldNumber = 4,
    kLeaseFieldNumber = 5,
  };
  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // .bosdyn.api.DataChunk chunk = 4;
  bool has_chunk() const;
  private:
  bool _internal_has_chunk() const;
  public:
  void clear_chunk();
  const ::bosdyn::api::DataChunk& chunk() const;
  ::bosdyn::api::DataChunk* release_chunk();
  ::bosdyn::api::DataChunk* mutable_chunk();
  void set_allocated_chunk(::bosdyn::api::DataChunk* chunk);
  private:
  const ::bosdyn::api::DataChunk& _internal_chunk() const;
  ::bosdyn::api::DataChunk* _internal_mutable_chunk();
  public:
  void unsafe_arena_set_allocated_chunk(
      ::bosdyn::api::DataChunk* chunk);
  ::bosdyn::api::DataChunk* unsafe_arena_release_chunk();

  // .bosdyn.api.Lease lease = 5;
  bool has_lease() const;
  private:
  bool _internal_has_lease() const;
  public:
  void clear_lease();
  const ::bosdyn::api::Lease& lease() const;
  ::bosdyn::api::Lease* release_lease();
  ::bosdyn::api::Lease* mutable_lease();
  void set_allocated_lease(::bosdyn::api::Lease* lease);
  private:
  const ::bosdyn::api::Lease& _internal_lease() const;
  ::bosdyn::api::Lease* _internal_mutable_lease();
  public:
  void unsafe_arena_set_allocated_lease(
      ::bosdyn::api::Lease* lease);
  ::bosdyn::api::Lease* unsafe_arena_release_lease();

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.UploadEdgeSnapshotRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::RequestHeader* header_;
  ::bosdyn::api::DataChunk* chunk_;
  ::bosdyn::api::Lease* lease_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto;
};
// -------------------------------------------------------------------

class UploadEdgeSnapshotResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.UploadEdgeSnapshotResponse) */ {
 public:
  inline UploadEdgeSnapshotResponse() : UploadEdgeSnapshotResponse(nullptr) {}
  virtual ~UploadEdgeSnapshotResponse();

  UploadEdgeSnapshotResponse(const UploadEdgeSnapshotResponse& from);
  UploadEdgeSnapshotResponse(UploadEdgeSnapshotResponse&& from) noexcept
    : UploadEdgeSnapshotResponse() {
    *this = ::std::move(from);
  }

  inline UploadEdgeSnapshotResponse& operator=(const UploadEdgeSnapshotResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadEdgeSnapshotResponse& operator=(UploadEdgeSnapshotResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UploadEdgeSnapshotResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UploadEdgeSnapshotResponse* internal_default_instance() {
    return reinterpret_cast<const UploadEdgeSnapshotResponse*>(
               &_UploadEdgeSnapshotResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(UploadEdgeSnapshotResponse& a, UploadEdgeSnapshotResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadEdgeSnapshotResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadEdgeSnapshotResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UploadEdgeSnapshotResponse* New() const final {
    return CreateMaybeMessage<UploadEdgeSnapshotResponse>(nullptr);
  }

  UploadEdgeSnapshotResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UploadEdgeSnapshotResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UploadEdgeSnapshotResponse& from);
  void MergeFrom(const UploadEdgeSnapshotResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadEdgeSnapshotResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.UploadEdgeSnapshotResponse";
  }
  protected:
  explicit UploadEdgeSnapshotResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kLeaseUseResultFieldNumber = 2,
  };
  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // .bosdyn.api.LeaseUseResult lease_use_result = 2;
  bool has_lease_use_result() const;
  private:
  bool _internal_has_lease_use_result() const;
  public:
  void clear_lease_use_result();
  const ::bosdyn::api::LeaseUseResult& lease_use_result() const;
  ::bosdyn::api::LeaseUseResult* release_lease_use_result();
  ::bosdyn::api::LeaseUseResult* mutable_lease_use_result();
  void set_allocated_lease_use_result(::bosdyn::api::LeaseUseResult* lease_use_result);
  private:
  const ::bosdyn::api::LeaseUseResult& _internal_lease_use_result() const;
  ::bosdyn::api::LeaseUseResult* _internal_mutable_lease_use_result();
  public:
  void unsafe_arena_set_allocated_lease_use_result(
      ::bosdyn::api::LeaseUseResult* lease_use_result);
  ::bosdyn::api::LeaseUseResult* unsafe_arena_release_lease_use_result();

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.UploadEdgeSnapshotResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::ResponseHeader* header_;
  ::bosdyn::api::LeaseUseResult* lease_use_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto;
};
// -------------------------------------------------------------------

class DownloadWaypointSnapshotRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.DownloadWaypointSnapshotRequest) */ {
 public:
  inline DownloadWaypointSnapshotRequest() : DownloadWaypointSnapshotRequest(nullptr) {}
  virtual ~DownloadWaypointSnapshotRequest();

  DownloadWaypointSnapshotRequest(const DownloadWaypointSnapshotRequest& from);
  DownloadWaypointSnapshotRequest(DownloadWaypointSnapshotRequest&& from) noexcept
    : DownloadWaypointSnapshotRequest() {
    *this = ::std::move(from);
  }

  inline DownloadWaypointSnapshotRequest& operator=(const DownloadWaypointSnapshotRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DownloadWaypointSnapshotRequest& operator=(DownloadWaypointSnapshotRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DownloadWaypointSnapshotRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DownloadWaypointSnapshotRequest* internal_default_instance() {
    return reinterpret_cast<const DownloadWaypointSnapshotRequest*>(
               &_DownloadWaypointSnapshotRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(DownloadWaypointSnapshotRequest& a, DownloadWaypointSnapshotRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DownloadWaypointSnapshotRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DownloadWaypointSnapshotRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DownloadWaypointSnapshotRequest* New() const final {
    return CreateMaybeMessage<DownloadWaypointSnapshotRequest>(nullptr);
  }

  DownloadWaypointSnapshotRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DownloadWaypointSnapshotRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DownloadWaypointSnapshotRequest& from);
  void MergeFrom(const DownloadWaypointSnapshotRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DownloadWaypointSnapshotRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.DownloadWaypointSnapshotRequest";
  }
  protected:
  explicit DownloadWaypointSnapshotRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWaypointSnapshotIdFieldNumber = 2,
    kHeaderFieldNumber = 1,
    kDownloadImagesFieldNumber = 3,
    kCompressPointCloudFieldNumber = 4,
  };
  // string waypoint_snapshot_id = 2;
  void clear_waypoint_snapshot_id();
  const std::string& waypoint_snapshot_id() const;
  void set_waypoint_snapshot_id(const std::string& value);
  void set_waypoint_snapshot_id(std::string&& value);
  void set_waypoint_snapshot_id(const char* value);
  void set_waypoint_snapshot_id(const char* value, size_t size);
  std::string* mutable_waypoint_snapshot_id();
  std::string* release_waypoint_snapshot_id();
  void set_allocated_waypoint_snapshot_id(std::string* waypoint_snapshot_id);
  private:
  const std::string& _internal_waypoint_snapshot_id() const;
  void _internal_set_waypoint_snapshot_id(const std::string& value);
  std::string* _internal_mutable_waypoint_snapshot_id();
  public:

  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // bool download_images = 3;
  void clear_download_images();
  bool download_images() const;
  void set_download_images(bool value);
  private:
  bool _internal_download_images() const;
  void _internal_set_download_images(bool value);
  public:

  // bool compress_point_cloud = 4;
  void clear_compress_point_cloud();
  bool compress_point_cloud() const;
  void set_compress_point_cloud(bool value);
  private:
  bool _internal_compress_point_cloud() const;
  void _internal_set_compress_point_cloud(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.DownloadWaypointSnapshotRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr waypoint_snapshot_id_;
  ::bosdyn::api::RequestHeader* header_;
  bool download_images_;
  bool compress_point_cloud_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto;
};
// -------------------------------------------------------------------

class DownloadWaypointSnapshotResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.DownloadWaypointSnapshotResponse) */ {
 public:
  inline DownloadWaypointSnapshotResponse() : DownloadWaypointSnapshotResponse(nullptr) {}
  virtual ~DownloadWaypointSnapshotResponse();

  DownloadWaypointSnapshotResponse(const DownloadWaypointSnapshotResponse& from);
  DownloadWaypointSnapshotResponse(DownloadWaypointSnapshotResponse&& from) noexcept
    : DownloadWaypointSnapshotResponse() {
    *this = ::std::move(from);
  }

  inline DownloadWaypointSnapshotResponse& operator=(const DownloadWaypointSnapshotResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DownloadWaypointSnapshotResponse& operator=(DownloadWaypointSnapshotResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DownloadWaypointSnapshotResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DownloadWaypointSnapshotResponse* internal_default_instance() {
    return reinterpret_cast<const DownloadWaypointSnapshotResponse*>(
               &_DownloadWaypointSnapshotResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(DownloadWaypointSnapshotResponse& a, DownloadWaypointSnapshotResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DownloadWaypointSnapshotResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DownloadWaypointSnapshotResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DownloadWaypointSnapshotResponse* New() const final {
    return CreateMaybeMessage<DownloadWaypointSnapshotResponse>(nullptr);
  }

  DownloadWaypointSnapshotResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DownloadWaypointSnapshotResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DownloadWaypointSnapshotResponse& from);
  void MergeFrom(const DownloadWaypointSnapshotResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DownloadWaypointSnapshotResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.DownloadWaypointSnapshotResponse";
  }
  protected:
  explicit DownloadWaypointSnapshotResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef DownloadWaypointSnapshotResponse_Status Status;
  static constexpr Status STATUS_UNKNOWN =
    DownloadWaypointSnapshotResponse_Status_STATUS_UNKNOWN;
  static constexpr Status STATUS_OK =
    DownloadWaypointSnapshotResponse_Status_STATUS_OK;
  static constexpr Status STATUS_SNAPSHOT_DOES_NOT_EXIST =
    DownloadWaypointSnapshotResponse_Status_STATUS_SNAPSHOT_DOES_NOT_EXIST;
  static inline bool Status_IsValid(int value) {
    return DownloadWaypointSnapshotResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    DownloadWaypointSnapshotResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    DownloadWaypointSnapshotResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    DownloadWaypointSnapshotResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return DownloadWaypointSnapshotResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return DownloadWaypointSnapshotResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return DownloadWaypointSnapshotResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kWaypointSnapshotIdFieldNumber = 4,
    kHeaderFieldNumber = 1,
    kChunkFieldNumber = 5,
    kStatusFieldNumber = 2,
  };
  // string waypoint_snapshot_id = 4;
  void clear_waypoint_snapshot_id();
  const std::string& waypoint_snapshot_id() const;
  void set_waypoint_snapshot_id(const std::string& value);
  void set_waypoint_snapshot_id(std::string&& value);
  void set_waypoint_snapshot_id(const char* value);
  void set_waypoint_snapshot_id(const char* value, size_t size);
  std::string* mutable_waypoint_snapshot_id();
  std::string* release_waypoint_snapshot_id();
  void set_allocated_waypoint_snapshot_id(std::string* waypoint_snapshot_id);
  private:
  const std::string& _internal_waypoint_snapshot_id() const;
  void _internal_set_waypoint_snapshot_id(const std::string& value);
  std::string* _internal_mutable_waypoint_snapshot_id();
  public:

  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // .bosdyn.api.DataChunk chunk = 5;
  bool has_chunk() const;
  private:
  bool _internal_has_chunk() const;
  public:
  void clear_chunk();
  const ::bosdyn::api::DataChunk& chunk() const;
  ::bosdyn::api::DataChunk* release_chunk();
  ::bosdyn::api::DataChunk* mutable_chunk();
  void set_allocated_chunk(::bosdyn::api::DataChunk* chunk);
  private:
  const ::bosdyn::api::DataChunk& _internal_chunk() const;
  ::bosdyn::api::DataChunk* _internal_mutable_chunk();
  public:
  void unsafe_arena_set_allocated_chunk(
      ::bosdyn::api::DataChunk* chunk);
  ::bosdyn::api::DataChunk* unsafe_arena_release_chunk();

  // .bosdyn.api.graph_nav.DownloadWaypointSnapshotResponse.Status status = 2;
  void clear_status();
  ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse_Status status() const;
  void set_status(::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse_Status value);
  private:
  ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse_Status _internal_status() const;
  void _internal_set_status(::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse_Status value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.DownloadWaypointSnapshotResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr waypoint_snapshot_id_;
  ::bosdyn::api::ResponseHeader* header_;
  ::bosdyn::api::DataChunk* chunk_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto;
};
// -------------------------------------------------------------------

class DownloadEdgeSnapshotRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.DownloadEdgeSnapshotRequest) */ {
 public:
  inline DownloadEdgeSnapshotRequest() : DownloadEdgeSnapshotRequest(nullptr) {}
  virtual ~DownloadEdgeSnapshotRequest();

  DownloadEdgeSnapshotRequest(const DownloadEdgeSnapshotRequest& from);
  DownloadEdgeSnapshotRequest(DownloadEdgeSnapshotRequest&& from) noexcept
    : DownloadEdgeSnapshotRequest() {
    *this = ::std::move(from);
  }

  inline DownloadEdgeSnapshotRequest& operator=(const DownloadEdgeSnapshotRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DownloadEdgeSnapshotRequest& operator=(DownloadEdgeSnapshotRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DownloadEdgeSnapshotRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DownloadEdgeSnapshotRequest* internal_default_instance() {
    return reinterpret_cast<const DownloadEdgeSnapshotRequest*>(
               &_DownloadEdgeSnapshotRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(DownloadEdgeSnapshotRequest& a, DownloadEdgeSnapshotRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DownloadEdgeSnapshotRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DownloadEdgeSnapshotRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DownloadEdgeSnapshotRequest* New() const final {
    return CreateMaybeMessage<DownloadEdgeSnapshotRequest>(nullptr);
  }

  DownloadEdgeSnapshotRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DownloadEdgeSnapshotRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DownloadEdgeSnapshotRequest& from);
  void MergeFrom(const DownloadEdgeSnapshotRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DownloadEdgeSnapshotRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.DownloadEdgeSnapshotRequest";
  }
  protected:
  explicit DownloadEdgeSnapshotRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEdgeSnapshotIdFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // string edge_snapshot_id = 2;
  void clear_edge_snapshot_id();
  const std::string& edge_snapshot_id() const;
  void set_edge_snapshot_id(const std::string& value);
  void set_edge_snapshot_id(std::string&& value);
  void set_edge_snapshot_id(const char* value);
  void set_edge_snapshot_id(const char* value, size_t size);
  std::string* mutable_edge_snapshot_id();
  std::string* release_edge_snapshot_id();
  void set_allocated_edge_snapshot_id(std::string* edge_snapshot_id);
  private:
  const std::string& _internal_edge_snapshot_id() const;
  void _internal_set_edge_snapshot_id(const std::string& value);
  std::string* _internal_mutable_edge_snapshot_id();
  public:

  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.DownloadEdgeSnapshotRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr edge_snapshot_id_;
  ::bosdyn::api::RequestHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto;
};
// -------------------------------------------------------------------

class DownloadEdgeSnapshotResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.DownloadEdgeSnapshotResponse) */ {
 public:
  inline DownloadEdgeSnapshotResponse() : DownloadEdgeSnapshotResponse(nullptr) {}
  virtual ~DownloadEdgeSnapshotResponse();

  DownloadEdgeSnapshotResponse(const DownloadEdgeSnapshotResponse& from);
  DownloadEdgeSnapshotResponse(DownloadEdgeSnapshotResponse&& from) noexcept
    : DownloadEdgeSnapshotResponse() {
    *this = ::std::move(from);
  }

  inline DownloadEdgeSnapshotResponse& operator=(const DownloadEdgeSnapshotResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DownloadEdgeSnapshotResponse& operator=(DownloadEdgeSnapshotResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DownloadEdgeSnapshotResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DownloadEdgeSnapshotResponse* internal_default_instance() {
    return reinterpret_cast<const DownloadEdgeSnapshotResponse*>(
               &_DownloadEdgeSnapshotResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(DownloadEdgeSnapshotResponse& a, DownloadEdgeSnapshotResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DownloadEdgeSnapshotResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DownloadEdgeSnapshotResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DownloadEdgeSnapshotResponse* New() const final {
    return CreateMaybeMessage<DownloadEdgeSnapshotResponse>(nullptr);
  }

  DownloadEdgeSnapshotResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DownloadEdgeSnapshotResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DownloadEdgeSnapshotResponse& from);
  void MergeFrom(const DownloadEdgeSnapshotResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DownloadEdgeSnapshotResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.DownloadEdgeSnapshotResponse";
  }
  protected:
  explicit DownloadEdgeSnapshotResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef DownloadEdgeSnapshotResponse_Status Status;
  static constexpr Status STATUS_UNKNOWN =
    DownloadEdgeSnapshotResponse_Status_STATUS_UNKNOWN;
  static constexpr Status STATUS_OK =
    DownloadEdgeSnapshotResponse_Status_STATUS_OK;
  static constexpr Status STATUS_SNAPSHOT_DOES_NOT_EXIST =
    DownloadEdgeSnapshotResponse_Status_STATUS_SNAPSHOT_DOES_NOT_EXIST;
  static inline bool Status_IsValid(int value) {
    return DownloadEdgeSnapshotResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    DownloadEdgeSnapshotResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    DownloadEdgeSnapshotResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    DownloadEdgeSnapshotResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return DownloadEdgeSnapshotResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return DownloadEdgeSnapshotResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return DownloadEdgeSnapshotResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEdgeSnapshotIdFieldNumber = 4,
    kHeaderFieldNumber = 1,
    kChunkFieldNumber = 5,
    kStatusFieldNumber = 2,
  };
  // string edge_snapshot_id = 4;
  void clear_edge_snapshot_id();
  const std::string& edge_snapshot_id() const;
  void set_edge_snapshot_id(const std::string& value);
  void set_edge_snapshot_id(std::string&& value);
  void set_edge_snapshot_id(const char* value);
  void set_edge_snapshot_id(const char* value, size_t size);
  std::string* mutable_edge_snapshot_id();
  std::string* release_edge_snapshot_id();
  void set_allocated_edge_snapshot_id(std::string* edge_snapshot_id);
  private:
  const std::string& _internal_edge_snapshot_id() const;
  void _internal_set_edge_snapshot_id(const std::string& value);
  std::string* _internal_mutable_edge_snapshot_id();
  public:

  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // .bosdyn.api.DataChunk chunk = 5;
  bool has_chunk() const;
  private:
  bool _internal_has_chunk() const;
  public:
  void clear_chunk();
  const ::bosdyn::api::DataChunk& chunk() const;
  ::bosdyn::api::DataChunk* release_chunk();
  ::bosdyn::api::DataChunk* mutable_chunk();
  void set_allocated_chunk(::bosdyn::api::DataChunk* chunk);
  private:
  const ::bosdyn::api::DataChunk& _internal_chunk() const;
  ::bosdyn::api::DataChunk* _internal_mutable_chunk();
  public:
  void unsafe_arena_set_allocated_chunk(
      ::bosdyn::api::DataChunk* chunk);
  ::bosdyn::api::DataChunk* unsafe_arena_release_chunk();

  // .bosdyn.api.graph_nav.DownloadEdgeSnapshotResponse.Status status = 2;
  void clear_status();
  ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse_Status status() const;
  void set_status(::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse_Status value);
  private:
  ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse_Status _internal_status() const;
  void _internal_set_status(::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse_Status value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.DownloadEdgeSnapshotResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr edge_snapshot_id_;
  ::bosdyn::api::ResponseHeader* header_;
  ::bosdyn::api::DataChunk* chunk_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SetLocalizationRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool SetLocalizationRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool SetLocalizationRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& SetLocalizationRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::RequestHeader*>(
      &::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& SetLocalizationRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.SetLocalizationRequest.header)
  return _internal_header();
}
inline void SetLocalizationRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.SetLocalizationRequest.header)
}
inline ::bosdyn::api::RequestHeader* SetLocalizationRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::RequestHeader* SetLocalizationRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.SetLocalizationRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* SetLocalizationRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::RequestHeader* SetLocalizationRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.SetLocalizationRequest.header)
  return _internal_mutable_header();
}
inline void SetLocalizationRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.SetLocalizationRequest.header)
}

// .bosdyn.api.graph_nav.Localization initial_guess = 3;
inline bool SetLocalizationRequest::_internal_has_initial_guess() const {
  return this != internal_default_instance() && initial_guess_ != nullptr;
}
inline bool SetLocalizationRequest::has_initial_guess() const {
  return _internal_has_initial_guess();
}
inline const ::bosdyn::api::graph_nav::Localization& SetLocalizationRequest::_internal_initial_guess() const {
  const ::bosdyn::api::graph_nav::Localization* p = initial_guess_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::graph_nav::Localization*>(
      &::bosdyn::api::graph_nav::_Localization_default_instance_);
}
inline const ::bosdyn::api::graph_nav::Localization& SetLocalizationRequest::initial_guess() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.SetLocalizationRequest.initial_guess)
  return _internal_initial_guess();
}
inline void SetLocalizationRequest::unsafe_arena_set_allocated_initial_guess(
    ::bosdyn::api::graph_nav::Localization* initial_guess) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(initial_guess_);
  }
  initial_guess_ = initial_guess;
  if (initial_guess) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.SetLocalizationRequest.initial_guess)
}
inline ::bosdyn::api::graph_nav::Localization* SetLocalizationRequest::release_initial_guess() {
  
  ::bosdyn::api::graph_nav::Localization* temp = initial_guess_;
  initial_guess_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::graph_nav::Localization* SetLocalizationRequest::unsafe_arena_release_initial_guess() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.SetLocalizationRequest.initial_guess)
  
  ::bosdyn::api::graph_nav::Localization* temp = initial_guess_;
  initial_guess_ = nullptr;
  return temp;
}
inline ::bosdyn::api::graph_nav::Localization* SetLocalizationRequest::_internal_mutable_initial_guess() {
  
  if (initial_guess_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::graph_nav::Localization>(GetArena());
    initial_guess_ = p;
  }
  return initial_guess_;
}
inline ::bosdyn::api::graph_nav::Localization* SetLocalizationRequest::mutable_initial_guess() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.SetLocalizationRequest.initial_guess)
  return _internal_mutable_initial_guess();
}
inline void SetLocalizationRequest::set_allocated_initial_guess(::bosdyn::api::graph_nav::Localization* initial_guess) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(initial_guess_);
  }
  if (initial_guess) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(initial_guess)->GetArena();
    if (message_arena != submessage_arena) {
      initial_guess = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, initial_guess, submessage_arena);
    }
    
  } else {
    
  }
  initial_guess_ = initial_guess;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.SetLocalizationRequest.initial_guess)
}

// .bosdyn.api.SE3Pose ko_tform_body = 4;
inline bool SetLocalizationRequest::_internal_has_ko_tform_body() const {
  return this != internal_default_instance() && ko_tform_body_ != nullptr;
}
inline bool SetLocalizationRequest::has_ko_tform_body() const {
  return _internal_has_ko_tform_body();
}
inline const ::bosdyn::api::SE3Pose& SetLocalizationRequest::_internal_ko_tform_body() const {
  const ::bosdyn::api::SE3Pose* p = ko_tform_body_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::SE3Pose*>(
      &::bosdyn::api::_SE3Pose_default_instance_);
}
inline const ::bosdyn::api::SE3Pose& SetLocalizationRequest::ko_tform_body() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.SetLocalizationRequest.ko_tform_body)
  return _internal_ko_tform_body();
}
inline void SetLocalizationRequest::unsafe_arena_set_allocated_ko_tform_body(
    ::bosdyn::api::SE3Pose* ko_tform_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ko_tform_body_);
  }
  ko_tform_body_ = ko_tform_body;
  if (ko_tform_body) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.SetLocalizationRequest.ko_tform_body)
}
inline ::bosdyn::api::SE3Pose* SetLocalizationRequest::release_ko_tform_body() {
  
  ::bosdyn::api::SE3Pose* temp = ko_tform_body_;
  ko_tform_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::SE3Pose* SetLocalizationRequest::unsafe_arena_release_ko_tform_body() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.SetLocalizationRequest.ko_tform_body)
  
  ::bosdyn::api::SE3Pose* temp = ko_tform_body_;
  ko_tform_body_ = nullptr;
  return temp;
}
inline ::bosdyn::api::SE3Pose* SetLocalizationRequest::_internal_mutable_ko_tform_body() {
  
  if (ko_tform_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::SE3Pose>(GetArena());
    ko_tform_body_ = p;
  }
  return ko_tform_body_;
}
inline ::bosdyn::api::SE3Pose* SetLocalizationRequest::mutable_ko_tform_body() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.SetLocalizationRequest.ko_tform_body)
  return _internal_mutable_ko_tform_body();
}
inline void SetLocalizationRequest::set_allocated_ko_tform_body(::bosdyn::api::SE3Pose* ko_tform_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ko_tform_body_);
  }
  if (ko_tform_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ko_tform_body)->GetArena();
    if (message_arena != submessage_arena) {
      ko_tform_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ko_tform_body, submessage_arena);
    }
    
  } else {
    
  }
  ko_tform_body_ = ko_tform_body;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.SetLocalizationRequest.ko_tform_body)
}

// double max_distance = 5;
inline void SetLocalizationRequest::clear_max_distance() {
  max_distance_ = 0;
}
inline double SetLocalizationRequest::_internal_max_distance() const {
  return max_distance_;
}
inline double SetLocalizationRequest::max_distance() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.SetLocalizationRequest.max_distance)
  return _internal_max_distance();
}
inline void SetLocalizationRequest::_internal_set_max_distance(double value) {
  
  max_distance_ = value;
}
inline void SetLocalizationRequest::set_max_distance(double value) {
  _internal_set_max_distance(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.SetLocalizationRequest.max_distance)
}

// double max_yaw = 6;
inline void SetLocalizationRequest::clear_max_yaw() {
  max_yaw_ = 0;
}
inline double SetLocalizationRequest::_internal_max_yaw() const {
  return max_yaw_;
}
inline double SetLocalizationRequest::max_yaw() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.SetLocalizationRequest.max_yaw)
  return _internal_max_yaw();
}
inline void SetLocalizationRequest::_internal_set_max_yaw(double value) {
  
  max_yaw_ = value;
}
inline void SetLocalizationRequest::set_max_yaw(double value) {
  _internal_set_max_yaw(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.SetLocalizationRequest.max_yaw)
}

// .bosdyn.api.graph_nav.SetLocalizationRequest.FiducialInit fiducial_init = 7;
inline void SetLocalizationRequest::clear_fiducial_init() {
  fiducial_init_ = 0;
}
inline ::bosdyn::api::graph_nav::SetLocalizationRequest_FiducialInit SetLocalizationRequest::_internal_fiducial_init() const {
  return static_cast< ::bosdyn::api::graph_nav::SetLocalizationRequest_FiducialInit >(fiducial_init_);
}
inline ::bosdyn::api::graph_nav::SetLocalizationRequest_FiducialInit SetLocalizationRequest::fiducial_init() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.SetLocalizationRequest.fiducial_init)
  return _internal_fiducial_init();
}
inline void SetLocalizationRequest::_internal_set_fiducial_init(::bosdyn::api::graph_nav::SetLocalizationRequest_FiducialInit value) {
  
  fiducial_init_ = value;
}
inline void SetLocalizationRequest::set_fiducial_init(::bosdyn::api::graph_nav::SetLocalizationRequest_FiducialInit value) {
  _internal_set_fiducial_init(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.SetLocalizationRequest.fiducial_init)
}

// int32 use_fiducial_id = 8;
inline void SetLocalizationRequest::clear_use_fiducial_id() {
  use_fiducial_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetLocalizationRequest::_internal_use_fiducial_id() const {
  return use_fiducial_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SetLocalizationRequest::use_fiducial_id() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.SetLocalizationRequest.use_fiducial_id)
  return _internal_use_fiducial_id();
}
inline void SetLocalizationRequest::_internal_set_use_fiducial_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  use_fiducial_id_ = value;
}
inline void SetLocalizationRequest::set_use_fiducial_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_use_fiducial_id(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.SetLocalizationRequest.use_fiducial_id)
}

// bool refine_fiducial_result_with_icp = 9;
inline void SetLocalizationRequest::clear_refine_fiducial_result_with_icp() {
  refine_fiducial_result_with_icp_ = false;
}
inline bool SetLocalizationRequest::_internal_refine_fiducial_result_with_icp() const {
  return refine_fiducial_result_with_icp_;
}
inline bool SetLocalizationRequest::refine_fiducial_result_with_icp() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.SetLocalizationRequest.refine_fiducial_result_with_icp)
  return _internal_refine_fiducial_result_with_icp();
}
inline void SetLocalizationRequest::_internal_set_refine_fiducial_result_with_icp(bool value) {
  
  refine_fiducial_result_with_icp_ = value;
}
inline void SetLocalizationRequest::set_refine_fiducial_result_with_icp(bool value) {
  _internal_set_refine_fiducial_result_with_icp(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.SetLocalizationRequest.refine_fiducial_result_with_icp)
}

// bool do_ambiguity_check = 10;
inline void SetLocalizationRequest::clear_do_ambiguity_check() {
  do_ambiguity_check_ = false;
}
inline bool SetLocalizationRequest::_internal_do_ambiguity_check() const {
  return do_ambiguity_check_;
}
inline bool SetLocalizationRequest::do_ambiguity_check() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.SetLocalizationRequest.do_ambiguity_check)
  return _internal_do_ambiguity_check();
}
inline void SetLocalizationRequest::_internal_set_do_ambiguity_check(bool value) {
  
  do_ambiguity_check_ = value;
}
inline void SetLocalizationRequest::set_do_ambiguity_check(bool value) {
  _internal_set_do_ambiguity_check(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.SetLocalizationRequest.do_ambiguity_check)
}

// -------------------------------------------------------------------

// SetLocalizationResponse_SuspectedAmbiguity

// .bosdyn.api.SE3Pose alternate_robot_tform_waypoint = 1;
inline bool SetLocalizationResponse_SuspectedAmbiguity::_internal_has_alternate_robot_tform_waypoint() const {
  return this != internal_default_instance() && alternate_robot_tform_waypoint_ != nullptr;
}
inline bool SetLocalizationResponse_SuspectedAmbiguity::has_alternate_robot_tform_waypoint() const {
  return _internal_has_alternate_robot_tform_waypoint();
}
inline const ::bosdyn::api::SE3Pose& SetLocalizationResponse_SuspectedAmbiguity::_internal_alternate_robot_tform_waypoint() const {
  const ::bosdyn::api::SE3Pose* p = alternate_robot_tform_waypoint_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::SE3Pose*>(
      &::bosdyn::api::_SE3Pose_default_instance_);
}
inline const ::bosdyn::api::SE3Pose& SetLocalizationResponse_SuspectedAmbiguity::alternate_robot_tform_waypoint() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.SetLocalizationResponse.SuspectedAmbiguity.alternate_robot_tform_waypoint)
  return _internal_alternate_robot_tform_waypoint();
}
inline void SetLocalizationResponse_SuspectedAmbiguity::unsafe_arena_set_allocated_alternate_robot_tform_waypoint(
    ::bosdyn::api::SE3Pose* alternate_robot_tform_waypoint) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alternate_robot_tform_waypoint_);
  }
  alternate_robot_tform_waypoint_ = alternate_robot_tform_waypoint;
  if (alternate_robot_tform_waypoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.SetLocalizationResponse.SuspectedAmbiguity.alternate_robot_tform_waypoint)
}
inline ::bosdyn::api::SE3Pose* SetLocalizationResponse_SuspectedAmbiguity::release_alternate_robot_tform_waypoint() {
  
  ::bosdyn::api::SE3Pose* temp = alternate_robot_tform_waypoint_;
  alternate_robot_tform_waypoint_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::SE3Pose* SetLocalizationResponse_SuspectedAmbiguity::unsafe_arena_release_alternate_robot_tform_waypoint() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.SetLocalizationResponse.SuspectedAmbiguity.alternate_robot_tform_waypoint)
  
  ::bosdyn::api::SE3Pose* temp = alternate_robot_tform_waypoint_;
  alternate_robot_tform_waypoint_ = nullptr;
  return temp;
}
inline ::bosdyn::api::SE3Pose* SetLocalizationResponse_SuspectedAmbiguity::_internal_mutable_alternate_robot_tform_waypoint() {
  
  if (alternate_robot_tform_waypoint_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::SE3Pose>(GetArena());
    alternate_robot_tform_waypoint_ = p;
  }
  return alternate_robot_tform_waypoint_;
}
inline ::bosdyn::api::SE3Pose* SetLocalizationResponse_SuspectedAmbiguity::mutable_alternate_robot_tform_waypoint() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.SetLocalizationResponse.SuspectedAmbiguity.alternate_robot_tform_waypoint)
  return _internal_mutable_alternate_robot_tform_waypoint();
}
inline void SetLocalizationResponse_SuspectedAmbiguity::set_allocated_alternate_robot_tform_waypoint(::bosdyn::api::SE3Pose* alternate_robot_tform_waypoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(alternate_robot_tform_waypoint_);
  }
  if (alternate_robot_tform_waypoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alternate_robot_tform_waypoint)->GetArena();
    if (message_arena != submessage_arena) {
      alternate_robot_tform_waypoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alternate_robot_tform_waypoint, submessage_arena);
    }
    
  } else {
    
  }
  alternate_robot_tform_waypoint_ = alternate_robot_tform_waypoint;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.SetLocalizationResponse.SuspectedAmbiguity.alternate_robot_tform_waypoint)
}

// -------------------------------------------------------------------

// SetLocalizationResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool SetLocalizationResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool SetLocalizationResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& SetLocalizationResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::ResponseHeader*>(
      &::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& SetLocalizationResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.SetLocalizationResponse.header)
  return _internal_header();
}
inline void SetLocalizationResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.SetLocalizationResponse.header)
}
inline ::bosdyn::api::ResponseHeader* SetLocalizationResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::ResponseHeader* SetLocalizationResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.SetLocalizationResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* SetLocalizationResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::ResponseHeader* SetLocalizationResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.SetLocalizationResponse.header)
  return _internal_mutable_header();
}
inline void SetLocalizationResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.SetLocalizationResponse.header)
}

// .bosdyn.api.LeaseUseResult lease_use_result = 2;
inline bool SetLocalizationResponse::_internal_has_lease_use_result() const {
  return this != internal_default_instance() && lease_use_result_ != nullptr;
}
inline bool SetLocalizationResponse::has_lease_use_result() const {
  return _internal_has_lease_use_result();
}
inline const ::bosdyn::api::LeaseUseResult& SetLocalizationResponse::_internal_lease_use_result() const {
  const ::bosdyn::api::LeaseUseResult* p = lease_use_result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::LeaseUseResult*>(
      &::bosdyn::api::_LeaseUseResult_default_instance_);
}
inline const ::bosdyn::api::LeaseUseResult& SetLocalizationResponse::lease_use_result() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.SetLocalizationResponse.lease_use_result)
  return _internal_lease_use_result();
}
inline void SetLocalizationResponse::unsafe_arena_set_allocated_lease_use_result(
    ::bosdyn::api::LeaseUseResult* lease_use_result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lease_use_result_);
  }
  lease_use_result_ = lease_use_result;
  if (lease_use_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.SetLocalizationResponse.lease_use_result)
}
inline ::bosdyn::api::LeaseUseResult* SetLocalizationResponse::release_lease_use_result() {
  
  ::bosdyn::api::LeaseUseResult* temp = lease_use_result_;
  lease_use_result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::LeaseUseResult* SetLocalizationResponse::unsafe_arena_release_lease_use_result() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.SetLocalizationResponse.lease_use_result)
  
  ::bosdyn::api::LeaseUseResult* temp = lease_use_result_;
  lease_use_result_ = nullptr;
  return temp;
}
inline ::bosdyn::api::LeaseUseResult* SetLocalizationResponse::_internal_mutable_lease_use_result() {
  
  if (lease_use_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::LeaseUseResult>(GetArena());
    lease_use_result_ = p;
  }
  return lease_use_result_;
}
inline ::bosdyn::api::LeaseUseResult* SetLocalizationResponse::mutable_lease_use_result() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.SetLocalizationResponse.lease_use_result)
  return _internal_mutable_lease_use_result();
}
inline void SetLocalizationResponse::set_allocated_lease_use_result(::bosdyn::api::LeaseUseResult* lease_use_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lease_use_result_);
  }
  if (lease_use_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lease_use_result)->GetArena();
    if (message_arena != submessage_arena) {
      lease_use_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lease_use_result, submessage_arena);
    }
    
  } else {
    
  }
  lease_use_result_ = lease_use_result;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.SetLocalizationResponse.lease_use_result)
}

// .bosdyn.api.graph_nav.SetLocalizationResponse.Status status = 3;
inline void SetLocalizationResponse::clear_status() {
  status_ = 0;
}
inline ::bosdyn::api::graph_nav::SetLocalizationResponse_Status SetLocalizationResponse::_internal_status() const {
  return static_cast< ::bosdyn::api::graph_nav::SetLocalizationResponse_Status >(status_);
}
inline ::bosdyn::api::graph_nav::SetLocalizationResponse_Status SetLocalizationResponse::status() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.SetLocalizationResponse.status)
  return _internal_status();
}
inline void SetLocalizationResponse::_internal_set_status(::bosdyn::api::graph_nav::SetLocalizationResponse_Status value) {
  
  status_ = value;
}
inline void SetLocalizationResponse::set_status(::bosdyn::api::graph_nav::SetLocalizationResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.SetLocalizationResponse.status)
}

// string error_report = 4;
inline void SetLocalizationResponse::clear_error_report() {
  error_report_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetLocalizationResponse::error_report() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.SetLocalizationResponse.error_report)
  return _internal_error_report();
}
inline void SetLocalizationResponse::set_error_report(const std::string& value) {
  _internal_set_error_report(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.SetLocalizationResponse.error_report)
}
inline std::string* SetLocalizationResponse::mutable_error_report() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.SetLocalizationResponse.error_report)
  return _internal_mutable_error_report();
}
inline const std::string& SetLocalizationResponse::_internal_error_report() const {
  return error_report_.Get();
}
inline void SetLocalizationResponse::_internal_set_error_report(const std::string& value) {
  
  error_report_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetLocalizationResponse::set_error_report(std::string&& value) {
  
  error_report_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.graph_nav.SetLocalizationResponse.error_report)
}
inline void SetLocalizationResponse::set_error_report(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_report_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.graph_nav.SetLocalizationResponse.error_report)
}
inline void SetLocalizationResponse::set_error_report(const char* value,
    size_t size) {
  
  error_report_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.graph_nav.SetLocalizationResponse.error_report)
}
inline std::string* SetLocalizationResponse::_internal_mutable_error_report() {
  
  return error_report_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetLocalizationResponse::release_error_report() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.SetLocalizationResponse.error_report)
  return error_report_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetLocalizationResponse::set_allocated_error_report(std::string* error_report) {
  if (error_report != nullptr) {
    
  } else {
    
  }
  error_report_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_report,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.SetLocalizationResponse.error_report)
}

// .bosdyn.api.graph_nav.Localization localization = 5;
inline bool SetLocalizationResponse::_internal_has_localization() const {
  return this != internal_default_instance() && localization_ != nullptr;
}
inline bool SetLocalizationResponse::has_localization() const {
  return _internal_has_localization();
}
inline const ::bosdyn::api::graph_nav::Localization& SetLocalizationResponse::_internal_localization() const {
  const ::bosdyn::api::graph_nav::Localization* p = localization_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::graph_nav::Localization*>(
      &::bosdyn::api::graph_nav::_Localization_default_instance_);
}
inline const ::bosdyn::api::graph_nav::Localization& SetLocalizationResponse::localization() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.SetLocalizationResponse.localization)
  return _internal_localization();
}
inline void SetLocalizationResponse::unsafe_arena_set_allocated_localization(
    ::bosdyn::api::graph_nav::Localization* localization) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(localization_);
  }
  localization_ = localization;
  if (localization) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.SetLocalizationResponse.localization)
}
inline ::bosdyn::api::graph_nav::Localization* SetLocalizationResponse::release_localization() {
  
  ::bosdyn::api::graph_nav::Localization* temp = localization_;
  localization_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::graph_nav::Localization* SetLocalizationResponse::unsafe_arena_release_localization() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.SetLocalizationResponse.localization)
  
  ::bosdyn::api::graph_nav::Localization* temp = localization_;
  localization_ = nullptr;
  return temp;
}
inline ::bosdyn::api::graph_nav::Localization* SetLocalizationResponse::_internal_mutable_localization() {
  
  if (localization_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::graph_nav::Localization>(GetArena());
    localization_ = p;
  }
  return localization_;
}
inline ::bosdyn::api::graph_nav::Localization* SetLocalizationResponse::mutable_localization() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.SetLocalizationResponse.localization)
  return _internal_mutable_localization();
}
inline void SetLocalizationResponse::set_allocated_localization(::bosdyn::api::graph_nav::Localization* localization) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(localization_);
  }
  if (localization) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(localization)->GetArena();
    if (message_arena != submessage_arena) {
      localization = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, localization, submessage_arena);
    }
    
  } else {
    
  }
  localization_ = localization;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.SetLocalizationResponse.localization)
}

// .bosdyn.api.graph_nav.SetLocalizationResponse.SuspectedAmbiguity suspected_ambiguity = 7;
inline bool SetLocalizationResponse::_internal_has_suspected_ambiguity() const {
  return this != internal_default_instance() && suspected_ambiguity_ != nullptr;
}
inline bool SetLocalizationResponse::has_suspected_ambiguity() const {
  return _internal_has_suspected_ambiguity();
}
inline void SetLocalizationResponse::clear_suspected_ambiguity() {
  if (GetArena() == nullptr && suspected_ambiguity_ != nullptr) {
    delete suspected_ambiguity_;
  }
  suspected_ambiguity_ = nullptr;
}
inline const ::bosdyn::api::graph_nav::SetLocalizationResponse_SuspectedAmbiguity& SetLocalizationResponse::_internal_suspected_ambiguity() const {
  const ::bosdyn::api::graph_nav::SetLocalizationResponse_SuspectedAmbiguity* p = suspected_ambiguity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::graph_nav::SetLocalizationResponse_SuspectedAmbiguity*>(
      &::bosdyn::api::graph_nav::_SetLocalizationResponse_SuspectedAmbiguity_default_instance_);
}
inline const ::bosdyn::api::graph_nav::SetLocalizationResponse_SuspectedAmbiguity& SetLocalizationResponse::suspected_ambiguity() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.SetLocalizationResponse.suspected_ambiguity)
  return _internal_suspected_ambiguity();
}
inline void SetLocalizationResponse::unsafe_arena_set_allocated_suspected_ambiguity(
    ::bosdyn::api::graph_nav::SetLocalizationResponse_SuspectedAmbiguity* suspected_ambiguity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(suspected_ambiguity_);
  }
  suspected_ambiguity_ = suspected_ambiguity;
  if (suspected_ambiguity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.SetLocalizationResponse.suspected_ambiguity)
}
inline ::bosdyn::api::graph_nav::SetLocalizationResponse_SuspectedAmbiguity* SetLocalizationResponse::release_suspected_ambiguity() {
  
  ::bosdyn::api::graph_nav::SetLocalizationResponse_SuspectedAmbiguity* temp = suspected_ambiguity_;
  suspected_ambiguity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::graph_nav::SetLocalizationResponse_SuspectedAmbiguity* SetLocalizationResponse::unsafe_arena_release_suspected_ambiguity() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.SetLocalizationResponse.suspected_ambiguity)
  
  ::bosdyn::api::graph_nav::SetLocalizationResponse_SuspectedAmbiguity* temp = suspected_ambiguity_;
  suspected_ambiguity_ = nullptr;
  return temp;
}
inline ::bosdyn::api::graph_nav::SetLocalizationResponse_SuspectedAmbiguity* SetLocalizationResponse::_internal_mutable_suspected_ambiguity() {
  
  if (suspected_ambiguity_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::graph_nav::SetLocalizationResponse_SuspectedAmbiguity>(GetArena());
    suspected_ambiguity_ = p;
  }
  return suspected_ambiguity_;
}
inline ::bosdyn::api::graph_nav::SetLocalizationResponse_SuspectedAmbiguity* SetLocalizationResponse::mutable_suspected_ambiguity() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.SetLocalizationResponse.suspected_ambiguity)
  return _internal_mutable_suspected_ambiguity();
}
inline void SetLocalizationResponse::set_allocated_suspected_ambiguity(::bosdyn::api::graph_nav::SetLocalizationResponse_SuspectedAmbiguity* suspected_ambiguity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete suspected_ambiguity_;
  }
  if (suspected_ambiguity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(suspected_ambiguity);
    if (message_arena != submessage_arena) {
      suspected_ambiguity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, suspected_ambiguity, submessage_arena);
    }
    
  } else {
    
  }
  suspected_ambiguity_ = suspected_ambiguity;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.SetLocalizationResponse.suspected_ambiguity)
}

// -------------------------------------------------------------------

// RouteGenParams

// -------------------------------------------------------------------

// TravelParams

// double max_distance = 1;
inline void TravelParams::clear_max_distance() {
  max_distance_ = 0;
}
inline double TravelParams::_internal_max_distance() const {
  return max_distance_;
}
inline double TravelParams::max_distance() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.TravelParams.max_distance)
  return _internal_max_distance();
}
inline void TravelParams::_internal_set_max_distance(double value) {
  
  max_distance_ = value;
}
inline void TravelParams::set_max_distance(double value) {
  _internal_set_max_distance(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.TravelParams.max_distance)
}

// double max_yaw = 2;
inline void TravelParams::clear_max_yaw() {
  max_yaw_ = 0;
}
inline double TravelParams::_internal_max_yaw() const {
  return max_yaw_;
}
inline double TravelParams::max_yaw() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.TravelParams.max_yaw)
  return _internal_max_yaw();
}
inline void TravelParams::_internal_set_max_yaw(double value) {
  
  max_yaw_ = value;
}
inline void TravelParams::set_max_yaw(double value) {
  _internal_set_max_yaw(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.TravelParams.max_yaw)
}

// .bosdyn.api.SE2VelocityLimit velocity_limit = 3;
inline bool TravelParams::_internal_has_velocity_limit() const {
  return this != internal_default_instance() && velocity_limit_ != nullptr;
}
inline bool TravelParams::has_velocity_limit() const {
  return _internal_has_velocity_limit();
}
inline const ::bosdyn::api::SE2VelocityLimit& TravelParams::_internal_velocity_limit() const {
  const ::bosdyn::api::SE2VelocityLimit* p = velocity_limit_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::SE2VelocityLimit*>(
      &::bosdyn::api::_SE2VelocityLimit_default_instance_);
}
inline const ::bosdyn::api::SE2VelocityLimit& TravelParams::velocity_limit() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.TravelParams.velocity_limit)
  return _internal_velocity_limit();
}
inline void TravelParams::unsafe_arena_set_allocated_velocity_limit(
    ::bosdyn::api::SE2VelocityLimit* velocity_limit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_limit_);
  }
  velocity_limit_ = velocity_limit;
  if (velocity_limit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.TravelParams.velocity_limit)
}
inline ::bosdyn::api::SE2VelocityLimit* TravelParams::release_velocity_limit() {
  
  ::bosdyn::api::SE2VelocityLimit* temp = velocity_limit_;
  velocity_limit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::SE2VelocityLimit* TravelParams::unsafe_arena_release_velocity_limit() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.TravelParams.velocity_limit)
  
  ::bosdyn::api::SE2VelocityLimit* temp = velocity_limit_;
  velocity_limit_ = nullptr;
  return temp;
}
inline ::bosdyn::api::SE2VelocityLimit* TravelParams::_internal_mutable_velocity_limit() {
  
  if (velocity_limit_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::SE2VelocityLimit>(GetArena());
    velocity_limit_ = p;
  }
  return velocity_limit_;
}
inline ::bosdyn::api::SE2VelocityLimit* TravelParams::mutable_velocity_limit() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.TravelParams.velocity_limit)
  return _internal_mutable_velocity_limit();
}
inline void TravelParams::set_allocated_velocity_limit(::bosdyn::api::SE2VelocityLimit* velocity_limit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_limit_);
  }
  if (velocity_limit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_limit)->GetArena();
    if (message_arena != submessage_arena) {
      velocity_limit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity_limit, submessage_arena);
    }
    
  } else {
    
  }
  velocity_limit_ = velocity_limit;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.TravelParams.velocity_limit)
}

// bool ignore_final_yaw = 4;
inline void TravelParams::clear_ignore_final_yaw() {
  ignore_final_yaw_ = false;
}
inline bool TravelParams::_internal_ignore_final_yaw() const {
  return ignore_final_yaw_;
}
inline bool TravelParams::ignore_final_yaw() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.TravelParams.ignore_final_yaw)
  return _internal_ignore_final_yaw();
}
inline void TravelParams::_internal_set_ignore_final_yaw(bool value) {
  
  ignore_final_yaw_ = value;
}
inline void TravelParams::set_ignore_final_yaw(bool value) {
  _internal_set_ignore_final_yaw(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.TravelParams.ignore_final_yaw)
}

// -------------------------------------------------------------------

// NavigateToRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool NavigateToRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool NavigateToRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& NavigateToRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::RequestHeader*>(
      &::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& NavigateToRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.NavigateToRequest.header)
  return _internal_header();
}
inline void NavigateToRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.NavigateToRequest.header)
}
inline ::bosdyn::api::RequestHeader* NavigateToRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::RequestHeader* NavigateToRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.NavigateToRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* NavigateToRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::RequestHeader* NavigateToRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.NavigateToRequest.header)
  return _internal_mutable_header();
}
inline void NavigateToRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.NavigateToRequest.header)
}

// repeated .bosdyn.api.Lease leases = 2;
inline int NavigateToRequest::_internal_leases_size() const {
  return leases_.size();
}
inline int NavigateToRequest::leases_size() const {
  return _internal_leases_size();
}
inline ::bosdyn::api::Lease* NavigateToRequest::mutable_leases(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.NavigateToRequest.leases)
  return leases_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::Lease >*
NavigateToRequest::mutable_leases() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.graph_nav.NavigateToRequest.leases)
  return &leases_;
}
inline const ::bosdyn::api::Lease& NavigateToRequest::_internal_leases(int index) const {
  return leases_.Get(index);
}
inline const ::bosdyn::api::Lease& NavigateToRequest::leases(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.NavigateToRequest.leases)
  return _internal_leases(index);
}
inline ::bosdyn::api::Lease* NavigateToRequest::_internal_add_leases() {
  return leases_.Add();
}
inline ::bosdyn::api::Lease* NavigateToRequest::add_leases() {
  // @@protoc_insertion_point(field_add:bosdyn.api.graph_nav.NavigateToRequest.leases)
  return _internal_add_leases();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::Lease >&
NavigateToRequest::leases() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.graph_nav.NavigateToRequest.leases)
  return leases_;
}

// string destination_waypoint_id = 3;
inline void NavigateToRequest::clear_destination_waypoint_id() {
  destination_waypoint_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NavigateToRequest::destination_waypoint_id() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.NavigateToRequest.destination_waypoint_id)
  return _internal_destination_waypoint_id();
}
inline void NavigateToRequest::set_destination_waypoint_id(const std::string& value) {
  _internal_set_destination_waypoint_id(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.NavigateToRequest.destination_waypoint_id)
}
inline std::string* NavigateToRequest::mutable_destination_waypoint_id() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.NavigateToRequest.destination_waypoint_id)
  return _internal_mutable_destination_waypoint_id();
}
inline const std::string& NavigateToRequest::_internal_destination_waypoint_id() const {
  return destination_waypoint_id_.Get();
}
inline void NavigateToRequest::_internal_set_destination_waypoint_id(const std::string& value) {
  
  destination_waypoint_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NavigateToRequest::set_destination_waypoint_id(std::string&& value) {
  
  destination_waypoint_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.graph_nav.NavigateToRequest.destination_waypoint_id)
}
inline void NavigateToRequest::set_destination_waypoint_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  destination_waypoint_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.graph_nav.NavigateToRequest.destination_waypoint_id)
}
inline void NavigateToRequest::set_destination_waypoint_id(const char* value,
    size_t size) {
  
  destination_waypoint_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.graph_nav.NavigateToRequest.destination_waypoint_id)
}
inline std::string* NavigateToRequest::_internal_mutable_destination_waypoint_id() {
  
  return destination_waypoint_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NavigateToRequest::release_destination_waypoint_id() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.NavigateToRequest.destination_waypoint_id)
  return destination_waypoint_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NavigateToRequest::set_allocated_destination_waypoint_id(std::string* destination_waypoint_id) {
  if (destination_waypoint_id != nullptr) {
    
  } else {
    
  }
  destination_waypoint_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), destination_waypoint_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.NavigateToRequest.destination_waypoint_id)
}

// .bosdyn.api.graph_nav.RouteGenParams route_params = 4;
inline bool NavigateToRequest::_internal_has_route_params() const {
  return this != internal_default_instance() && route_params_ != nullptr;
}
inline bool NavigateToRequest::has_route_params() const {
  return _internal_has_route_params();
}
inline void NavigateToRequest::clear_route_params() {
  if (GetArena() == nullptr && route_params_ != nullptr) {
    delete route_params_;
  }
  route_params_ = nullptr;
}
inline const ::bosdyn::api::graph_nav::RouteGenParams& NavigateToRequest::_internal_route_params() const {
  const ::bosdyn::api::graph_nav::RouteGenParams* p = route_params_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::graph_nav::RouteGenParams*>(
      &::bosdyn::api::graph_nav::_RouteGenParams_default_instance_);
}
inline const ::bosdyn::api::graph_nav::RouteGenParams& NavigateToRequest::route_params() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.NavigateToRequest.route_params)
  return _internal_route_params();
}
inline void NavigateToRequest::unsafe_arena_set_allocated_route_params(
    ::bosdyn::api::graph_nav::RouteGenParams* route_params) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(route_params_);
  }
  route_params_ = route_params;
  if (route_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.NavigateToRequest.route_params)
}
inline ::bosdyn::api::graph_nav::RouteGenParams* NavigateToRequest::release_route_params() {
  
  ::bosdyn::api::graph_nav::RouteGenParams* temp = route_params_;
  route_params_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::graph_nav::RouteGenParams* NavigateToRequest::unsafe_arena_release_route_params() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.NavigateToRequest.route_params)
  
  ::bosdyn::api::graph_nav::RouteGenParams* temp = route_params_;
  route_params_ = nullptr;
  return temp;
}
inline ::bosdyn::api::graph_nav::RouteGenParams* NavigateToRequest::_internal_mutable_route_params() {
  
  if (route_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::graph_nav::RouteGenParams>(GetArena());
    route_params_ = p;
  }
  return route_params_;
}
inline ::bosdyn::api::graph_nav::RouteGenParams* NavigateToRequest::mutable_route_params() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.NavigateToRequest.route_params)
  return _internal_mutable_route_params();
}
inline void NavigateToRequest::set_allocated_route_params(::bosdyn::api::graph_nav::RouteGenParams* route_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete route_params_;
  }
  if (route_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(route_params);
    if (message_arena != submessage_arena) {
      route_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, route_params, submessage_arena);
    }
    
  } else {
    
  }
  route_params_ = route_params;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.NavigateToRequest.route_params)
}

// .bosdyn.api.graph_nav.TravelParams travel_params = 5;
inline bool NavigateToRequest::_internal_has_travel_params() const {
  return this != internal_default_instance() && travel_params_ != nullptr;
}
inline bool NavigateToRequest::has_travel_params() const {
  return _internal_has_travel_params();
}
inline void NavigateToRequest::clear_travel_params() {
  if (GetArena() == nullptr && travel_params_ != nullptr) {
    delete travel_params_;
  }
  travel_params_ = nullptr;
}
inline const ::bosdyn::api::graph_nav::TravelParams& NavigateToRequest::_internal_travel_params() const {
  const ::bosdyn::api::graph_nav::TravelParams* p = travel_params_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::graph_nav::TravelParams*>(
      &::bosdyn::api::graph_nav::_TravelParams_default_instance_);
}
inline const ::bosdyn::api::graph_nav::TravelParams& NavigateToRequest::travel_params() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.NavigateToRequest.travel_params)
  return _internal_travel_params();
}
inline void NavigateToRequest::unsafe_arena_set_allocated_travel_params(
    ::bosdyn::api::graph_nav::TravelParams* travel_params) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(travel_params_);
  }
  travel_params_ = travel_params;
  if (travel_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.NavigateToRequest.travel_params)
}
inline ::bosdyn::api::graph_nav::TravelParams* NavigateToRequest::release_travel_params() {
  
  ::bosdyn::api::graph_nav::TravelParams* temp = travel_params_;
  travel_params_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::graph_nav::TravelParams* NavigateToRequest::unsafe_arena_release_travel_params() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.NavigateToRequest.travel_params)
  
  ::bosdyn::api::graph_nav::TravelParams* temp = travel_params_;
  travel_params_ = nullptr;
  return temp;
}
inline ::bosdyn::api::graph_nav::TravelParams* NavigateToRequest::_internal_mutable_travel_params() {
  
  if (travel_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::graph_nav::TravelParams>(GetArena());
    travel_params_ = p;
  }
  return travel_params_;
}
inline ::bosdyn::api::graph_nav::TravelParams* NavigateToRequest::mutable_travel_params() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.NavigateToRequest.travel_params)
  return _internal_mutable_travel_params();
}
inline void NavigateToRequest::set_allocated_travel_params(::bosdyn::api::graph_nav::TravelParams* travel_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete travel_params_;
  }
  if (travel_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(travel_params);
    if (message_arena != submessage_arena) {
      travel_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, travel_params, submessage_arena);
    }
    
  } else {
    
  }
  travel_params_ = travel_params;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.NavigateToRequest.travel_params)
}

// .google.protobuf.Timestamp end_time = 6;
inline bool NavigateToRequest::_internal_has_end_time() const {
  return this != internal_default_instance() && end_time_ != nullptr;
}
inline bool NavigateToRequest::has_end_time() const {
  return _internal_has_end_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& NavigateToRequest::_internal_end_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = end_time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& NavigateToRequest::end_time() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.NavigateToRequest.end_time)
  return _internal_end_time();
}
inline void NavigateToRequest::unsafe_arena_set_allocated_end_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  end_time_ = end_time;
  if (end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.NavigateToRequest.end_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* NavigateToRequest::release_end_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_time_;
  end_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* NavigateToRequest::unsafe_arena_release_end_time() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.NavigateToRequest.end_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_time_;
  end_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* NavigateToRequest::_internal_mutable_end_time() {
  
  if (end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    end_time_ = p;
  }
  return end_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* NavigateToRequest::mutable_end_time() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.NavigateToRequest.end_time)
  return _internal_mutable_end_time();
}
inline void NavigateToRequest::set_allocated_end_time(PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  if (end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time)->GetArena();
    if (message_arena != submessage_arena) {
      end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.NavigateToRequest.end_time)
}

// string clock_identifier = 7;
inline void NavigateToRequest::clear_clock_identifier() {
  clock_identifier_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NavigateToRequest::clock_identifier() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.NavigateToRequest.clock_identifier)
  return _internal_clock_identifier();
}
inline void NavigateToRequest::set_clock_identifier(const std::string& value) {
  _internal_set_clock_identifier(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.NavigateToRequest.clock_identifier)
}
inline std::string* NavigateToRequest::mutable_clock_identifier() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.NavigateToRequest.clock_identifier)
  return _internal_mutable_clock_identifier();
}
inline const std::string& NavigateToRequest::_internal_clock_identifier() const {
  return clock_identifier_.Get();
}
inline void NavigateToRequest::_internal_set_clock_identifier(const std::string& value) {
  
  clock_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NavigateToRequest::set_clock_identifier(std::string&& value) {
  
  clock_identifier_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.graph_nav.NavigateToRequest.clock_identifier)
}
inline void NavigateToRequest::set_clock_identifier(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  clock_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.graph_nav.NavigateToRequest.clock_identifier)
}
inline void NavigateToRequest::set_clock_identifier(const char* value,
    size_t size) {
  
  clock_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.graph_nav.NavigateToRequest.clock_identifier)
}
inline std::string* NavigateToRequest::_internal_mutable_clock_identifier() {
  
  return clock_identifier_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NavigateToRequest::release_clock_identifier() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.NavigateToRequest.clock_identifier)
  return clock_identifier_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NavigateToRequest::set_allocated_clock_identifier(std::string* clock_identifier) {
  if (clock_identifier != nullptr) {
    
  } else {
    
  }
  clock_identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clock_identifier,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.NavigateToRequest.clock_identifier)
}

// -------------------------------------------------------------------

// NavigateToResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool NavigateToResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool NavigateToResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& NavigateToResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::ResponseHeader*>(
      &::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& NavigateToResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.NavigateToResponse.header)
  return _internal_header();
}
inline void NavigateToResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.NavigateToResponse.header)
}
inline ::bosdyn::api::ResponseHeader* NavigateToResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::ResponseHeader* NavigateToResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.NavigateToResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* NavigateToResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::ResponseHeader* NavigateToResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.NavigateToResponse.header)
  return _internal_mutable_header();
}
inline void NavigateToResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.NavigateToResponse.header)
}

// repeated .bosdyn.api.LeaseUseResult lease_use_results = 2;
inline int NavigateToResponse::_internal_lease_use_results_size() const {
  return lease_use_results_.size();
}
inline int NavigateToResponse::lease_use_results_size() const {
  return _internal_lease_use_results_size();
}
inline ::bosdyn::api::LeaseUseResult* NavigateToResponse::mutable_lease_use_results(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.NavigateToResponse.lease_use_results)
  return lease_use_results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::LeaseUseResult >*
NavigateToResponse::mutable_lease_use_results() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.graph_nav.NavigateToResponse.lease_use_results)
  return &lease_use_results_;
}
inline const ::bosdyn::api::LeaseUseResult& NavigateToResponse::_internal_lease_use_results(int index) const {
  return lease_use_results_.Get(index);
}
inline const ::bosdyn::api::LeaseUseResult& NavigateToResponse::lease_use_results(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.NavigateToResponse.lease_use_results)
  return _internal_lease_use_results(index);
}
inline ::bosdyn::api::LeaseUseResult* NavigateToResponse::_internal_add_lease_use_results() {
  return lease_use_results_.Add();
}
inline ::bosdyn::api::LeaseUseResult* NavigateToResponse::add_lease_use_results() {
  // @@protoc_insertion_point(field_add:bosdyn.api.graph_nav.NavigateToResponse.lease_use_results)
  return _internal_add_lease_use_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::LeaseUseResult >&
NavigateToResponse::lease_use_results() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.graph_nav.NavigateToResponse.lease_use_results)
  return lease_use_results_;
}

// .bosdyn.api.graph_nav.NavigateToResponse.Status status = 3;
inline void NavigateToResponse::clear_status() {
  status_ = 0;
}
inline ::bosdyn::api::graph_nav::NavigateToResponse_Status NavigateToResponse::_internal_status() const {
  return static_cast< ::bosdyn::api::graph_nav::NavigateToResponse_Status >(status_);
}
inline ::bosdyn::api::graph_nav::NavigateToResponse_Status NavigateToResponse::status() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.NavigateToResponse.status)
  return _internal_status();
}
inline void NavigateToResponse::_internal_set_status(::bosdyn::api::graph_nav::NavigateToResponse_Status value) {
  
  status_ = value;
}
inline void NavigateToResponse::set_status(::bosdyn::api::graph_nav::NavigateToResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.NavigateToResponse.status)
}

// uint32 command_id = 4;
inline void NavigateToResponse::clear_command_id() {
  command_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NavigateToResponse::_internal_command_id() const {
  return command_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NavigateToResponse::command_id() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.NavigateToResponse.command_id)
  return _internal_command_id();
}
inline void NavigateToResponse::_internal_set_command_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  command_id_ = value;
}
inline void NavigateToResponse::set_command_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_command_id(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.NavigateToResponse.command_id)
}

// repeated string error_waypoint_ids = 5;
inline int NavigateToResponse::_internal_error_waypoint_ids_size() const {
  return error_waypoint_ids_.size();
}
inline int NavigateToResponse::error_waypoint_ids_size() const {
  return _internal_error_waypoint_ids_size();
}
inline void NavigateToResponse::clear_error_waypoint_ids() {
  error_waypoint_ids_.Clear();
}
inline std::string* NavigateToResponse::add_error_waypoint_ids() {
  // @@protoc_insertion_point(field_add_mutable:bosdyn.api.graph_nav.NavigateToResponse.error_waypoint_ids)
  return _internal_add_error_waypoint_ids();
}
inline const std::string& NavigateToResponse::_internal_error_waypoint_ids(int index) const {
  return error_waypoint_ids_.Get(index);
}
inline const std::string& NavigateToResponse::error_waypoint_ids(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.NavigateToResponse.error_waypoint_ids)
  return _internal_error_waypoint_ids(index);
}
inline std::string* NavigateToResponse::mutable_error_waypoint_ids(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.NavigateToResponse.error_waypoint_ids)
  return error_waypoint_ids_.Mutable(index);
}
inline void NavigateToResponse::set_error_waypoint_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.NavigateToResponse.error_waypoint_ids)
  error_waypoint_ids_.Mutable(index)->assign(value);
}
inline void NavigateToResponse::set_error_waypoint_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.NavigateToResponse.error_waypoint_ids)
  error_waypoint_ids_.Mutable(index)->assign(std::move(value));
}
inline void NavigateToResponse::set_error_waypoint_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  error_waypoint_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bosdyn.api.graph_nav.NavigateToResponse.error_waypoint_ids)
}
inline void NavigateToResponse::set_error_waypoint_ids(int index, const char* value, size_t size) {
  error_waypoint_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.graph_nav.NavigateToResponse.error_waypoint_ids)
}
inline std::string* NavigateToResponse::_internal_add_error_waypoint_ids() {
  return error_waypoint_ids_.Add();
}
inline void NavigateToResponse::add_error_waypoint_ids(const std::string& value) {
  error_waypoint_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bosdyn.api.graph_nav.NavigateToResponse.error_waypoint_ids)
}
inline void NavigateToResponse::add_error_waypoint_ids(std::string&& value) {
  error_waypoint_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:bosdyn.api.graph_nav.NavigateToResponse.error_waypoint_ids)
}
inline void NavigateToResponse::add_error_waypoint_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  error_waypoint_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bosdyn.api.graph_nav.NavigateToResponse.error_waypoint_ids)
}
inline void NavigateToResponse::add_error_waypoint_ids(const char* value, size_t size) {
  error_waypoint_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bosdyn.api.graph_nav.NavigateToResponse.error_waypoint_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NavigateToResponse::error_waypoint_ids() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.graph_nav.NavigateToResponse.error_waypoint_ids)
  return error_waypoint_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NavigateToResponse::mutable_error_waypoint_ids() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.graph_nav.NavigateToResponse.error_waypoint_ids)
  return &error_waypoint_ids_;
}

// -------------------------------------------------------------------

// NavigateRouteRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool NavigateRouteRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool NavigateRouteRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& NavigateRouteRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::RequestHeader*>(
      &::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& NavigateRouteRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.NavigateRouteRequest.header)
  return _internal_header();
}
inline void NavigateRouteRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.NavigateRouteRequest.header)
}
inline ::bosdyn::api::RequestHeader* NavigateRouteRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::RequestHeader* NavigateRouteRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.NavigateRouteRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* NavigateRouteRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::RequestHeader* NavigateRouteRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.NavigateRouteRequest.header)
  return _internal_mutable_header();
}
inline void NavigateRouteRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.NavigateRouteRequest.header)
}

// repeated .bosdyn.api.Lease leases = 2;
inline int NavigateRouteRequest::_internal_leases_size() const {
  return leases_.size();
}
inline int NavigateRouteRequest::leases_size() const {
  return _internal_leases_size();
}
inline ::bosdyn::api::Lease* NavigateRouteRequest::mutable_leases(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.NavigateRouteRequest.leases)
  return leases_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::Lease >*
NavigateRouteRequest::mutable_leases() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.graph_nav.NavigateRouteRequest.leases)
  return &leases_;
}
inline const ::bosdyn::api::Lease& NavigateRouteRequest::_internal_leases(int index) const {
  return leases_.Get(index);
}
inline const ::bosdyn::api::Lease& NavigateRouteRequest::leases(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.NavigateRouteRequest.leases)
  return _internal_leases(index);
}
inline ::bosdyn::api::Lease* NavigateRouteRequest::_internal_add_leases() {
  return leases_.Add();
}
inline ::bosdyn::api::Lease* NavigateRouteRequest::add_leases() {
  // @@protoc_insertion_point(field_add:bosdyn.api.graph_nav.NavigateRouteRequest.leases)
  return _internal_add_leases();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::Lease >&
NavigateRouteRequest::leases() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.graph_nav.NavigateRouteRequest.leases)
  return leases_;
}

// .bosdyn.api.graph_nav.Route route = 3;
inline bool NavigateRouteRequest::_internal_has_route() const {
  return this != internal_default_instance() && route_ != nullptr;
}
inline bool NavigateRouteRequest::has_route() const {
  return _internal_has_route();
}
inline const ::bosdyn::api::graph_nav::Route& NavigateRouteRequest::_internal_route() const {
  const ::bosdyn::api::graph_nav::Route* p = route_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::graph_nav::Route*>(
      &::bosdyn::api::graph_nav::_Route_default_instance_);
}
inline const ::bosdyn::api::graph_nav::Route& NavigateRouteRequest::route() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.NavigateRouteRequest.route)
  return _internal_route();
}
inline void NavigateRouteRequest::unsafe_arena_set_allocated_route(
    ::bosdyn::api::graph_nav::Route* route) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(route_);
  }
  route_ = route;
  if (route) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.NavigateRouteRequest.route)
}
inline ::bosdyn::api::graph_nav::Route* NavigateRouteRequest::release_route() {
  
  ::bosdyn::api::graph_nav::Route* temp = route_;
  route_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::graph_nav::Route* NavigateRouteRequest::unsafe_arena_release_route() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.NavigateRouteRequest.route)
  
  ::bosdyn::api::graph_nav::Route* temp = route_;
  route_ = nullptr;
  return temp;
}
inline ::bosdyn::api::graph_nav::Route* NavigateRouteRequest::_internal_mutable_route() {
  
  if (route_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::graph_nav::Route>(GetArena());
    route_ = p;
  }
  return route_;
}
inline ::bosdyn::api::graph_nav::Route* NavigateRouteRequest::mutable_route() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.NavigateRouteRequest.route)
  return _internal_mutable_route();
}
inline void NavigateRouteRequest::set_allocated_route(::bosdyn::api::graph_nav::Route* route) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(route_);
  }
  if (route) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(route)->GetArena();
    if (message_arena != submessage_arena) {
      route = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, route, submessage_arena);
    }
    
  } else {
    
  }
  route_ = route;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.NavigateRouteRequest.route)
}

// .bosdyn.api.graph_nav.TravelParams travel_params = 4;
inline bool NavigateRouteRequest::_internal_has_travel_params() const {
  return this != internal_default_instance() && travel_params_ != nullptr;
}
inline bool NavigateRouteRequest::has_travel_params() const {
  return _internal_has_travel_params();
}
inline void NavigateRouteRequest::clear_travel_params() {
  if (GetArena() == nullptr && travel_params_ != nullptr) {
    delete travel_params_;
  }
  travel_params_ = nullptr;
}
inline const ::bosdyn::api::graph_nav::TravelParams& NavigateRouteRequest::_internal_travel_params() const {
  const ::bosdyn::api::graph_nav::TravelParams* p = travel_params_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::graph_nav::TravelParams*>(
      &::bosdyn::api::graph_nav::_TravelParams_default_instance_);
}
inline const ::bosdyn::api::graph_nav::TravelParams& NavigateRouteRequest::travel_params() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.NavigateRouteRequest.travel_params)
  return _internal_travel_params();
}
inline void NavigateRouteRequest::unsafe_arena_set_allocated_travel_params(
    ::bosdyn::api::graph_nav::TravelParams* travel_params) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(travel_params_);
  }
  travel_params_ = travel_params;
  if (travel_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.NavigateRouteRequest.travel_params)
}
inline ::bosdyn::api::graph_nav::TravelParams* NavigateRouteRequest::release_travel_params() {
  
  ::bosdyn::api::graph_nav::TravelParams* temp = travel_params_;
  travel_params_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::graph_nav::TravelParams* NavigateRouteRequest::unsafe_arena_release_travel_params() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.NavigateRouteRequest.travel_params)
  
  ::bosdyn::api::graph_nav::TravelParams* temp = travel_params_;
  travel_params_ = nullptr;
  return temp;
}
inline ::bosdyn::api::graph_nav::TravelParams* NavigateRouteRequest::_internal_mutable_travel_params() {
  
  if (travel_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::graph_nav::TravelParams>(GetArena());
    travel_params_ = p;
  }
  return travel_params_;
}
inline ::bosdyn::api::graph_nav::TravelParams* NavigateRouteRequest::mutable_travel_params() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.NavigateRouteRequest.travel_params)
  return _internal_mutable_travel_params();
}
inline void NavigateRouteRequest::set_allocated_travel_params(::bosdyn::api::graph_nav::TravelParams* travel_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete travel_params_;
  }
  if (travel_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(travel_params);
    if (message_arena != submessage_arena) {
      travel_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, travel_params, submessage_arena);
    }
    
  } else {
    
  }
  travel_params_ = travel_params;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.NavigateRouteRequest.travel_params)
}

// .google.protobuf.Timestamp end_time = 5;
inline bool NavigateRouteRequest::_internal_has_end_time() const {
  return this != internal_default_instance() && end_time_ != nullptr;
}
inline bool NavigateRouteRequest::has_end_time() const {
  return _internal_has_end_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& NavigateRouteRequest::_internal_end_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = end_time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& NavigateRouteRequest::end_time() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.NavigateRouteRequest.end_time)
  return _internal_end_time();
}
inline void NavigateRouteRequest::unsafe_arena_set_allocated_end_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  end_time_ = end_time;
  if (end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.NavigateRouteRequest.end_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* NavigateRouteRequest::release_end_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_time_;
  end_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* NavigateRouteRequest::unsafe_arena_release_end_time() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.NavigateRouteRequest.end_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_time_;
  end_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* NavigateRouteRequest::_internal_mutable_end_time() {
  
  if (end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    end_time_ = p;
  }
  return end_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* NavigateRouteRequest::mutable_end_time() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.NavigateRouteRequest.end_time)
  return _internal_mutable_end_time();
}
inline void NavigateRouteRequest::set_allocated_end_time(PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  if (end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time)->GetArena();
    if (message_arena != submessage_arena) {
      end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.NavigateRouteRequest.end_time)
}

// string clock_identifier = 6;
inline void NavigateRouteRequest::clear_clock_identifier() {
  clock_identifier_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NavigateRouteRequest::clock_identifier() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.NavigateRouteRequest.clock_identifier)
  return _internal_clock_identifier();
}
inline void NavigateRouteRequest::set_clock_identifier(const std::string& value) {
  _internal_set_clock_identifier(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.NavigateRouteRequest.clock_identifier)
}
inline std::string* NavigateRouteRequest::mutable_clock_identifier() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.NavigateRouteRequest.clock_identifier)
  return _internal_mutable_clock_identifier();
}
inline const std::string& NavigateRouteRequest::_internal_clock_identifier() const {
  return clock_identifier_.Get();
}
inline void NavigateRouteRequest::_internal_set_clock_identifier(const std::string& value) {
  
  clock_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NavigateRouteRequest::set_clock_identifier(std::string&& value) {
  
  clock_identifier_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.graph_nav.NavigateRouteRequest.clock_identifier)
}
inline void NavigateRouteRequest::set_clock_identifier(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  clock_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.graph_nav.NavigateRouteRequest.clock_identifier)
}
inline void NavigateRouteRequest::set_clock_identifier(const char* value,
    size_t size) {
  
  clock_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.graph_nav.NavigateRouteRequest.clock_identifier)
}
inline std::string* NavigateRouteRequest::_internal_mutable_clock_identifier() {
  
  return clock_identifier_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NavigateRouteRequest::release_clock_identifier() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.NavigateRouteRequest.clock_identifier)
  return clock_identifier_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NavigateRouteRequest::set_allocated_clock_identifier(std::string* clock_identifier) {
  if (clock_identifier != nullptr) {
    
  } else {
    
  }
  clock_identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clock_identifier,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.NavigateRouteRequest.clock_identifier)
}

// -------------------------------------------------------------------

// NavigateRouteResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool NavigateRouteResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool NavigateRouteResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& NavigateRouteResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::ResponseHeader*>(
      &::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& NavigateRouteResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.NavigateRouteResponse.header)
  return _internal_header();
}
inline void NavigateRouteResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.NavigateRouteResponse.header)
}
inline ::bosdyn::api::ResponseHeader* NavigateRouteResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::ResponseHeader* NavigateRouteResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.NavigateRouteResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* NavigateRouteResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::ResponseHeader* NavigateRouteResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.NavigateRouteResponse.header)
  return _internal_mutable_header();
}
inline void NavigateRouteResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.NavigateRouteResponse.header)
}

// repeated .bosdyn.api.LeaseUseResult lease_use_results = 2;
inline int NavigateRouteResponse::_internal_lease_use_results_size() const {
  return lease_use_results_.size();
}
inline int NavigateRouteResponse::lease_use_results_size() const {
  return _internal_lease_use_results_size();
}
inline ::bosdyn::api::LeaseUseResult* NavigateRouteResponse::mutable_lease_use_results(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.NavigateRouteResponse.lease_use_results)
  return lease_use_results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::LeaseUseResult >*
NavigateRouteResponse::mutable_lease_use_results() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.graph_nav.NavigateRouteResponse.lease_use_results)
  return &lease_use_results_;
}
inline const ::bosdyn::api::LeaseUseResult& NavigateRouteResponse::_internal_lease_use_results(int index) const {
  return lease_use_results_.Get(index);
}
inline const ::bosdyn::api::LeaseUseResult& NavigateRouteResponse::lease_use_results(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.NavigateRouteResponse.lease_use_results)
  return _internal_lease_use_results(index);
}
inline ::bosdyn::api::LeaseUseResult* NavigateRouteResponse::_internal_add_lease_use_results() {
  return lease_use_results_.Add();
}
inline ::bosdyn::api::LeaseUseResult* NavigateRouteResponse::add_lease_use_results() {
  // @@protoc_insertion_point(field_add:bosdyn.api.graph_nav.NavigateRouteResponse.lease_use_results)
  return _internal_add_lease_use_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::LeaseUseResult >&
NavigateRouteResponse::lease_use_results() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.graph_nav.NavigateRouteResponse.lease_use_results)
  return lease_use_results_;
}

// .bosdyn.api.graph_nav.NavigateRouteResponse.Status status = 3;
inline void NavigateRouteResponse::clear_status() {
  status_ = 0;
}
inline ::bosdyn::api::graph_nav::NavigateRouteResponse_Status NavigateRouteResponse::_internal_status() const {
  return static_cast< ::bosdyn::api::graph_nav::NavigateRouteResponse_Status >(status_);
}
inline ::bosdyn::api::graph_nav::NavigateRouteResponse_Status NavigateRouteResponse::status() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.NavigateRouteResponse.status)
  return _internal_status();
}
inline void NavigateRouteResponse::_internal_set_status(::bosdyn::api::graph_nav::NavigateRouteResponse_Status value) {
  
  status_ = value;
}
inline void NavigateRouteResponse::set_status(::bosdyn::api::graph_nav::NavigateRouteResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.NavigateRouteResponse.status)
}

// uint32 command_id = 4;
inline void NavigateRouteResponse::clear_command_id() {
  command_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NavigateRouteResponse::_internal_command_id() const {
  return command_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NavigateRouteResponse::command_id() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.NavigateRouteResponse.command_id)
  return _internal_command_id();
}
inline void NavigateRouteResponse::_internal_set_command_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  command_id_ = value;
}
inline void NavigateRouteResponse::set_command_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_command_id(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.NavigateRouteResponse.command_id)
}

// repeated string error_waypoint_ids = 5;
inline int NavigateRouteResponse::_internal_error_waypoint_ids_size() const {
  return error_waypoint_ids_.size();
}
inline int NavigateRouteResponse::error_waypoint_ids_size() const {
  return _internal_error_waypoint_ids_size();
}
inline void NavigateRouteResponse::clear_error_waypoint_ids() {
  error_waypoint_ids_.Clear();
}
inline std::string* NavigateRouteResponse::add_error_waypoint_ids() {
  // @@protoc_insertion_point(field_add_mutable:bosdyn.api.graph_nav.NavigateRouteResponse.error_waypoint_ids)
  return _internal_add_error_waypoint_ids();
}
inline const std::string& NavigateRouteResponse::_internal_error_waypoint_ids(int index) const {
  return error_waypoint_ids_.Get(index);
}
inline const std::string& NavigateRouteResponse::error_waypoint_ids(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.NavigateRouteResponse.error_waypoint_ids)
  return _internal_error_waypoint_ids(index);
}
inline std::string* NavigateRouteResponse::mutable_error_waypoint_ids(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.NavigateRouteResponse.error_waypoint_ids)
  return error_waypoint_ids_.Mutable(index);
}
inline void NavigateRouteResponse::set_error_waypoint_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.NavigateRouteResponse.error_waypoint_ids)
  error_waypoint_ids_.Mutable(index)->assign(value);
}
inline void NavigateRouteResponse::set_error_waypoint_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.NavigateRouteResponse.error_waypoint_ids)
  error_waypoint_ids_.Mutable(index)->assign(std::move(value));
}
inline void NavigateRouteResponse::set_error_waypoint_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  error_waypoint_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bosdyn.api.graph_nav.NavigateRouteResponse.error_waypoint_ids)
}
inline void NavigateRouteResponse::set_error_waypoint_ids(int index, const char* value, size_t size) {
  error_waypoint_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.graph_nav.NavigateRouteResponse.error_waypoint_ids)
}
inline std::string* NavigateRouteResponse::_internal_add_error_waypoint_ids() {
  return error_waypoint_ids_.Add();
}
inline void NavigateRouteResponse::add_error_waypoint_ids(const std::string& value) {
  error_waypoint_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bosdyn.api.graph_nav.NavigateRouteResponse.error_waypoint_ids)
}
inline void NavigateRouteResponse::add_error_waypoint_ids(std::string&& value) {
  error_waypoint_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:bosdyn.api.graph_nav.NavigateRouteResponse.error_waypoint_ids)
}
inline void NavigateRouteResponse::add_error_waypoint_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  error_waypoint_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bosdyn.api.graph_nav.NavigateRouteResponse.error_waypoint_ids)
}
inline void NavigateRouteResponse::add_error_waypoint_ids(const char* value, size_t size) {
  error_waypoint_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bosdyn.api.graph_nav.NavigateRouteResponse.error_waypoint_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NavigateRouteResponse::error_waypoint_ids() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.graph_nav.NavigateRouteResponse.error_waypoint_ids)
  return error_waypoint_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NavigateRouteResponse::mutable_error_waypoint_ids() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.graph_nav.NavigateRouteResponse.error_waypoint_ids)
  return &error_waypoint_ids_;
}

// repeated .bosdyn.api.graph_nav.Edge.Id error_edge_ids = 6;
inline int NavigateRouteResponse::_internal_error_edge_ids_size() const {
  return error_edge_ids_.size();
}
inline int NavigateRouteResponse::error_edge_ids_size() const {
  return _internal_error_edge_ids_size();
}
inline ::bosdyn::api::graph_nav::Edge_Id* NavigateRouteResponse::mutable_error_edge_ids(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.NavigateRouteResponse.error_edge_ids)
  return error_edge_ids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::Edge_Id >*
NavigateRouteResponse::mutable_error_edge_ids() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.graph_nav.NavigateRouteResponse.error_edge_ids)
  return &error_edge_ids_;
}
inline const ::bosdyn::api::graph_nav::Edge_Id& NavigateRouteResponse::_internal_error_edge_ids(int index) const {
  return error_edge_ids_.Get(index);
}
inline const ::bosdyn::api::graph_nav::Edge_Id& NavigateRouteResponse::error_edge_ids(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.NavigateRouteResponse.error_edge_ids)
  return _internal_error_edge_ids(index);
}
inline ::bosdyn::api::graph_nav::Edge_Id* NavigateRouteResponse::_internal_add_error_edge_ids() {
  return error_edge_ids_.Add();
}
inline ::bosdyn::api::graph_nav::Edge_Id* NavigateRouteResponse::add_error_edge_ids() {
  // @@protoc_insertion_point(field_add:bosdyn.api.graph_nav.NavigateRouteResponse.error_edge_ids)
  return _internal_add_error_edge_ids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::Edge_Id >&
NavigateRouteResponse::error_edge_ids() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.graph_nav.NavigateRouteResponse.error_edge_ids)
  return error_edge_ids_;
}

// -------------------------------------------------------------------

// NavigationFeedbackRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool NavigationFeedbackRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool NavigationFeedbackRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& NavigationFeedbackRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::RequestHeader*>(
      &::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& NavigationFeedbackRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.NavigationFeedbackRequest.header)
  return _internal_header();
}
inline void NavigationFeedbackRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.NavigationFeedbackRequest.header)
}
inline ::bosdyn::api::RequestHeader* NavigationFeedbackRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::RequestHeader* NavigationFeedbackRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.NavigationFeedbackRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* NavigationFeedbackRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::RequestHeader* NavigationFeedbackRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.NavigationFeedbackRequest.header)
  return _internal_mutable_header();
}
inline void NavigationFeedbackRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.NavigationFeedbackRequest.header)
}

// uint32 command_id = 2;
inline void NavigationFeedbackRequest::clear_command_id() {
  command_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NavigationFeedbackRequest::_internal_command_id() const {
  return command_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NavigationFeedbackRequest::command_id() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.NavigationFeedbackRequest.command_id)
  return _internal_command_id();
}
inline void NavigationFeedbackRequest::_internal_set_command_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  command_id_ = value;
}
inline void NavigationFeedbackRequest::set_command_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_command_id(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.NavigationFeedbackRequest.command_id)
}

// -------------------------------------------------------------------

// NavigationFeedbackResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool NavigationFeedbackResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool NavigationFeedbackResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& NavigationFeedbackResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::ResponseHeader*>(
      &::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& NavigationFeedbackResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.NavigationFeedbackResponse.header)
  return _internal_header();
}
inline void NavigationFeedbackResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.NavigationFeedbackResponse.header)
}
inline ::bosdyn::api::ResponseHeader* NavigationFeedbackResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::ResponseHeader* NavigationFeedbackResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.NavigationFeedbackResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* NavigationFeedbackResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::ResponseHeader* NavigationFeedbackResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.NavigationFeedbackResponse.header)
  return _internal_mutable_header();
}
inline void NavigationFeedbackResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.NavigationFeedbackResponse.header)
}

// .bosdyn.api.graph_nav.NavigationFeedbackResponse.Status status = 2;
inline void NavigationFeedbackResponse::clear_status() {
  status_ = 0;
}
inline ::bosdyn::api::graph_nav::NavigationFeedbackResponse_Status NavigationFeedbackResponse::_internal_status() const {
  return static_cast< ::bosdyn::api::graph_nav::NavigationFeedbackResponse_Status >(status_);
}
inline ::bosdyn::api::graph_nav::NavigationFeedbackResponse_Status NavigationFeedbackResponse::status() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.NavigationFeedbackResponse.status)
  return _internal_status();
}
inline void NavigationFeedbackResponse::_internal_set_status(::bosdyn::api::graph_nav::NavigationFeedbackResponse_Status value) {
  
  status_ = value;
}
inline void NavigationFeedbackResponse::set_status(::bosdyn::api::graph_nav::NavigationFeedbackResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.NavigationFeedbackResponse.status)
}

// .bosdyn.api.graph_nav.Route remaining_route = 3;
inline bool NavigationFeedbackResponse::_internal_has_remaining_route() const {
  return this != internal_default_instance() && remaining_route_ != nullptr;
}
inline bool NavigationFeedbackResponse::has_remaining_route() const {
  return _internal_has_remaining_route();
}
inline const ::bosdyn::api::graph_nav::Route& NavigationFeedbackResponse::_internal_remaining_route() const {
  const ::bosdyn::api::graph_nav::Route* p = remaining_route_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::graph_nav::Route*>(
      &::bosdyn::api::graph_nav::_Route_default_instance_);
}
inline const ::bosdyn::api::graph_nav::Route& NavigationFeedbackResponse::remaining_route() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.NavigationFeedbackResponse.remaining_route)
  return _internal_remaining_route();
}
inline void NavigationFeedbackResponse::unsafe_arena_set_allocated_remaining_route(
    ::bosdyn::api::graph_nav::Route* remaining_route) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(remaining_route_);
  }
  remaining_route_ = remaining_route;
  if (remaining_route) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.NavigationFeedbackResponse.remaining_route)
}
inline ::bosdyn::api::graph_nav::Route* NavigationFeedbackResponse::release_remaining_route() {
  
  ::bosdyn::api::graph_nav::Route* temp = remaining_route_;
  remaining_route_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::graph_nav::Route* NavigationFeedbackResponse::unsafe_arena_release_remaining_route() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.NavigationFeedbackResponse.remaining_route)
  
  ::bosdyn::api::graph_nav::Route* temp = remaining_route_;
  remaining_route_ = nullptr;
  return temp;
}
inline ::bosdyn::api::graph_nav::Route* NavigationFeedbackResponse::_internal_mutable_remaining_route() {
  
  if (remaining_route_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::graph_nav::Route>(GetArena());
    remaining_route_ = p;
  }
  return remaining_route_;
}
inline ::bosdyn::api::graph_nav::Route* NavigationFeedbackResponse::mutable_remaining_route() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.NavigationFeedbackResponse.remaining_route)
  return _internal_mutable_remaining_route();
}
inline void NavigationFeedbackResponse::set_allocated_remaining_route(::bosdyn::api::graph_nav::Route* remaining_route) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(remaining_route_);
  }
  if (remaining_route) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(remaining_route)->GetArena();
    if (message_arena != submessage_arena) {
      remaining_route = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remaining_route, submessage_arena);
    }
    
  } else {
    
  }
  remaining_route_ = remaining_route;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.NavigationFeedbackResponse.remaining_route)
}

// uint32 command_id = 4;
inline void NavigationFeedbackResponse::clear_command_id() {
  command_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NavigationFeedbackResponse::_internal_command_id() const {
  return command_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NavigationFeedbackResponse::command_id() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.NavigationFeedbackResponse.command_id)
  return _internal_command_id();
}
inline void NavigationFeedbackResponse::_internal_set_command_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  command_id_ = value;
}
inline void NavigationFeedbackResponse::set_command_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_command_id(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.NavigationFeedbackResponse.command_id)
}

// .bosdyn.api.SE3Pose last_ko_tform_goal = 5;
inline bool NavigationFeedbackResponse::_internal_has_last_ko_tform_goal() const {
  return this != internal_default_instance() && last_ko_tform_goal_ != nullptr;
}
inline bool NavigationFeedbackResponse::has_last_ko_tform_goal() const {
  return _internal_has_last_ko_tform_goal();
}
inline const ::bosdyn::api::SE3Pose& NavigationFeedbackResponse::_internal_last_ko_tform_goal() const {
  const ::bosdyn::api::SE3Pose* p = last_ko_tform_goal_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::SE3Pose*>(
      &::bosdyn::api::_SE3Pose_default_instance_);
}
inline const ::bosdyn::api::SE3Pose& NavigationFeedbackResponse::last_ko_tform_goal() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.NavigationFeedbackResponse.last_ko_tform_goal)
  return _internal_last_ko_tform_goal();
}
inline void NavigationFeedbackResponse::unsafe_arena_set_allocated_last_ko_tform_goal(
    ::bosdyn::api::SE3Pose* last_ko_tform_goal) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_ko_tform_goal_);
  }
  last_ko_tform_goal_ = last_ko_tform_goal;
  if (last_ko_tform_goal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.NavigationFeedbackResponse.last_ko_tform_goal)
}
inline ::bosdyn::api::SE3Pose* NavigationFeedbackResponse::release_last_ko_tform_goal() {
  
  ::bosdyn::api::SE3Pose* temp = last_ko_tform_goal_;
  last_ko_tform_goal_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::SE3Pose* NavigationFeedbackResponse::unsafe_arena_release_last_ko_tform_goal() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.NavigationFeedbackResponse.last_ko_tform_goal)
  
  ::bosdyn::api::SE3Pose* temp = last_ko_tform_goal_;
  last_ko_tform_goal_ = nullptr;
  return temp;
}
inline ::bosdyn::api::SE3Pose* NavigationFeedbackResponse::_internal_mutable_last_ko_tform_goal() {
  
  if (last_ko_tform_goal_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::SE3Pose>(GetArena());
    last_ko_tform_goal_ = p;
  }
  return last_ko_tform_goal_;
}
inline ::bosdyn::api::SE3Pose* NavigationFeedbackResponse::mutable_last_ko_tform_goal() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.NavigationFeedbackResponse.last_ko_tform_goal)
  return _internal_mutable_last_ko_tform_goal();
}
inline void NavigationFeedbackResponse::set_allocated_last_ko_tform_goal(::bosdyn::api::SE3Pose* last_ko_tform_goal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_ko_tform_goal_);
  }
  if (last_ko_tform_goal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_ko_tform_goal)->GetArena();
    if (message_arena != submessage_arena) {
      last_ko_tform_goal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_ko_tform_goal, submessage_arena);
    }
    
  } else {
    
  }
  last_ko_tform_goal_ = last_ko_tform_goal;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.NavigationFeedbackResponse.last_ko_tform_goal)
}

// -------------------------------------------------------------------

// GetLocalizationStateRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool GetLocalizationStateRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool GetLocalizationStateRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& GetLocalizationStateRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::RequestHeader*>(
      &::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& GetLocalizationStateRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.GetLocalizationStateRequest.header)
  return _internal_header();
}
inline void GetLocalizationStateRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.GetLocalizationStateRequest.header)
}
inline ::bosdyn::api::RequestHeader* GetLocalizationStateRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::RequestHeader* GetLocalizationStateRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.GetLocalizationStateRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* GetLocalizationStateRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::RequestHeader* GetLocalizationStateRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.GetLocalizationStateRequest.header)
  return _internal_mutable_header();
}
inline void GetLocalizationStateRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.GetLocalizationStateRequest.header)
}

// bool request_live_point_cloud = 2;
inline void GetLocalizationStateRequest::clear_request_live_point_cloud() {
  request_live_point_cloud_ = false;
}
inline bool GetLocalizationStateRequest::_internal_request_live_point_cloud() const {
  return request_live_point_cloud_;
}
inline bool GetLocalizationStateRequest::request_live_point_cloud() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.GetLocalizationStateRequest.request_live_point_cloud)
  return _internal_request_live_point_cloud();
}
inline void GetLocalizationStateRequest::_internal_set_request_live_point_cloud(bool value) {
  
  request_live_point_cloud_ = value;
}
inline void GetLocalizationStateRequest::set_request_live_point_cloud(bool value) {
  _internal_set_request_live_point_cloud(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.GetLocalizationStateRequest.request_live_point_cloud)
}

// bool request_live_images = 3;
inline void GetLocalizationStateRequest::clear_request_live_images() {
  request_live_images_ = false;
}
inline bool GetLocalizationStateRequest::_internal_request_live_images() const {
  return request_live_images_;
}
inline bool GetLocalizationStateRequest::request_live_images() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.GetLocalizationStateRequest.request_live_images)
  return _internal_request_live_images();
}
inline void GetLocalizationStateRequest::_internal_set_request_live_images(bool value) {
  
  request_live_images_ = value;
}
inline void GetLocalizationStateRequest::set_request_live_images(bool value) {
  _internal_set_request_live_images(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.GetLocalizationStateRequest.request_live_images)
}

// bool request_live_terrain_maps = 4;
inline void GetLocalizationStateRequest::clear_request_live_terrain_maps() {
  request_live_terrain_maps_ = false;
}
inline bool GetLocalizationStateRequest::_internal_request_live_terrain_maps() const {
  return request_live_terrain_maps_;
}
inline bool GetLocalizationStateRequest::request_live_terrain_maps() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.GetLocalizationStateRequest.request_live_terrain_maps)
  return _internal_request_live_terrain_maps();
}
inline void GetLocalizationStateRequest::_internal_set_request_live_terrain_maps(bool value) {
  
  request_live_terrain_maps_ = value;
}
inline void GetLocalizationStateRequest::set_request_live_terrain_maps(bool value) {
  _internal_set_request_live_terrain_maps(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.GetLocalizationStateRequest.request_live_terrain_maps)
}

// bool request_live_world_objects = 5;
inline void GetLocalizationStateRequest::clear_request_live_world_objects() {
  request_live_world_objects_ = false;
}
inline bool GetLocalizationStateRequest::_internal_request_live_world_objects() const {
  return request_live_world_objects_;
}
inline bool GetLocalizationStateRequest::request_live_world_objects() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.GetLocalizationStateRequest.request_live_world_objects)
  return _internal_request_live_world_objects();
}
inline void GetLocalizationStateRequest::_internal_set_request_live_world_objects(bool value) {
  
  request_live_world_objects_ = value;
}
inline void GetLocalizationStateRequest::set_request_live_world_objects(bool value) {
  _internal_set_request_live_world_objects(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.GetLocalizationStateRequest.request_live_world_objects)
}

// bool request_live_robot_state = 6;
inline void GetLocalizationStateRequest::clear_request_live_robot_state() {
  request_live_robot_state_ = false;
}
inline bool GetLocalizationStateRequest::_internal_request_live_robot_state() const {
  return request_live_robot_state_;
}
inline bool GetLocalizationStateRequest::request_live_robot_state() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.GetLocalizationStateRequest.request_live_robot_state)
  return _internal_request_live_robot_state();
}
inline void GetLocalizationStateRequest::_internal_set_request_live_robot_state(bool value) {
  
  request_live_robot_state_ = value;
}
inline void GetLocalizationStateRequest::set_request_live_robot_state(bool value) {
  _internal_set_request_live_robot_state(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.GetLocalizationStateRequest.request_live_robot_state)
}

// bool compress_live_point_cloud = 7;
inline void GetLocalizationStateRequest::clear_compress_live_point_cloud() {
  compress_live_point_cloud_ = false;
}
inline bool GetLocalizationStateRequest::_internal_compress_live_point_cloud() const {
  return compress_live_point_cloud_;
}
inline bool GetLocalizationStateRequest::compress_live_point_cloud() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.GetLocalizationStateRequest.compress_live_point_cloud)
  return _internal_compress_live_point_cloud();
}
inline void GetLocalizationStateRequest::_internal_set_compress_live_point_cloud(bool value) {
  
  compress_live_point_cloud_ = value;
}
inline void GetLocalizationStateRequest::set_compress_live_point_cloud(bool value) {
  _internal_set_compress_live_point_cloud(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.GetLocalizationStateRequest.compress_live_point_cloud)
}

// -------------------------------------------------------------------

// RemotePointCloudStatus

// string service_name = 1;
inline void RemotePointCloudStatus::clear_service_name() {
  service_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RemotePointCloudStatus::service_name() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.RemotePointCloudStatus.service_name)
  return _internal_service_name();
}
inline void RemotePointCloudStatus::set_service_name(const std::string& value) {
  _internal_set_service_name(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.RemotePointCloudStatus.service_name)
}
inline std::string* RemotePointCloudStatus::mutable_service_name() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.RemotePointCloudStatus.service_name)
  return _internal_mutable_service_name();
}
inline const std::string& RemotePointCloudStatus::_internal_service_name() const {
  return service_name_.Get();
}
inline void RemotePointCloudStatus::_internal_set_service_name(const std::string& value) {
  
  service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RemotePointCloudStatus::set_service_name(std::string&& value) {
  
  service_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.graph_nav.RemotePointCloudStatus.service_name)
}
inline void RemotePointCloudStatus::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.graph_nav.RemotePointCloudStatus.service_name)
}
inline void RemotePointCloudStatus::set_service_name(const char* value,
    size_t size) {
  
  service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.graph_nav.RemotePointCloudStatus.service_name)
}
inline std::string* RemotePointCloudStatus::_internal_mutable_service_name() {
  
  return service_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RemotePointCloudStatus::release_service_name() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.RemotePointCloudStatus.service_name)
  return service_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemotePointCloudStatus::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    
  } else {
    
  }
  service_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.RemotePointCloudStatus.service_name)
}

// bool exists_in_directory = 2;
inline void RemotePointCloudStatus::clear_exists_in_directory() {
  exists_in_directory_ = false;
}
inline bool RemotePointCloudStatus::_internal_exists_in_directory() const {
  return exists_in_directory_;
}
inline bool RemotePointCloudStatus::exists_in_directory() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.RemotePointCloudStatus.exists_in_directory)
  return _internal_exists_in_directory();
}
inline void RemotePointCloudStatus::_internal_set_exists_in_directory(bool value) {
  
  exists_in_directory_ = value;
}
inline void RemotePointCloudStatus::set_exists_in_directory(bool value) {
  _internal_set_exists_in_directory(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.RemotePointCloudStatus.exists_in_directory)
}

// bool has_data = 3;
inline void RemotePointCloudStatus::clear_has_data() {
  has_data_ = false;
}
inline bool RemotePointCloudStatus::_internal_has_data() const {
  return has_data_;
}
inline bool RemotePointCloudStatus::has_data() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.RemotePointCloudStatus.has_data)
  return _internal_has_data();
}
inline void RemotePointCloudStatus::_internal_set_has_data(bool value) {
  
  has_data_ = value;
}
inline void RemotePointCloudStatus::set_has_data(bool value) {
  _internal_set_has_data(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.RemotePointCloudStatus.has_data)
}

// -------------------------------------------------------------------

// LostDetectorState

// bool is_lost = 1;
inline void LostDetectorState::clear_is_lost() {
  is_lost_ = false;
}
inline bool LostDetectorState::_internal_is_lost() const {
  return is_lost_;
}
inline bool LostDetectorState::is_lost() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.LostDetectorState.is_lost)
  return _internal_is_lost();
}
inline void LostDetectorState::_internal_set_is_lost(bool value) {
  
  is_lost_ = value;
}
inline void LostDetectorState::set_is_lost(bool value) {
  _internal_set_is_lost(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.LostDetectorState.is_lost)
}

// -------------------------------------------------------------------

// GetLocalizationStateResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool GetLocalizationStateResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool GetLocalizationStateResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& GetLocalizationStateResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::ResponseHeader*>(
      &::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& GetLocalizationStateResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.GetLocalizationStateResponse.header)
  return _internal_header();
}
inline void GetLocalizationStateResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.GetLocalizationStateResponse.header)
}
inline ::bosdyn::api::ResponseHeader* GetLocalizationStateResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::ResponseHeader* GetLocalizationStateResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.GetLocalizationStateResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* GetLocalizationStateResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::ResponseHeader* GetLocalizationStateResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.GetLocalizationStateResponse.header)
  return _internal_mutable_header();
}
inline void GetLocalizationStateResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.GetLocalizationStateResponse.header)
}

// .bosdyn.api.graph_nav.Localization localization = 2;
inline bool GetLocalizationStateResponse::_internal_has_localization() const {
  return this != internal_default_instance() && localization_ != nullptr;
}
inline bool GetLocalizationStateResponse::has_localization() const {
  return _internal_has_localization();
}
inline const ::bosdyn::api::graph_nav::Localization& GetLocalizationStateResponse::_internal_localization() const {
  const ::bosdyn::api::graph_nav::Localization* p = localization_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::graph_nav::Localization*>(
      &::bosdyn::api::graph_nav::_Localization_default_instance_);
}
inline const ::bosdyn::api::graph_nav::Localization& GetLocalizationStateResponse::localization() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.GetLocalizationStateResponse.localization)
  return _internal_localization();
}
inline void GetLocalizationStateResponse::unsafe_arena_set_allocated_localization(
    ::bosdyn::api::graph_nav::Localization* localization) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(localization_);
  }
  localization_ = localization;
  if (localization) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.GetLocalizationStateResponse.localization)
}
inline ::bosdyn::api::graph_nav::Localization* GetLocalizationStateResponse::release_localization() {
  
  ::bosdyn::api::graph_nav::Localization* temp = localization_;
  localization_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::graph_nav::Localization* GetLocalizationStateResponse::unsafe_arena_release_localization() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.GetLocalizationStateResponse.localization)
  
  ::bosdyn::api::graph_nav::Localization* temp = localization_;
  localization_ = nullptr;
  return temp;
}
inline ::bosdyn::api::graph_nav::Localization* GetLocalizationStateResponse::_internal_mutable_localization() {
  
  if (localization_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::graph_nav::Localization>(GetArena());
    localization_ = p;
  }
  return localization_;
}
inline ::bosdyn::api::graph_nav::Localization* GetLocalizationStateResponse::mutable_localization() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.GetLocalizationStateResponse.localization)
  return _internal_mutable_localization();
}
inline void GetLocalizationStateResponse::set_allocated_localization(::bosdyn::api::graph_nav::Localization* localization) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(localization_);
  }
  if (localization) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(localization)->GetArena();
    if (message_arena != submessage_arena) {
      localization = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, localization, submessage_arena);
    }
    
  } else {
    
  }
  localization_ = localization;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.GetLocalizationStateResponse.localization)
}

// .bosdyn.api.KinematicState robot_kinematics = 4;
inline bool GetLocalizationStateResponse::_internal_has_robot_kinematics() const {
  return this != internal_default_instance() && robot_kinematics_ != nullptr;
}
inline bool GetLocalizationStateResponse::has_robot_kinematics() const {
  return _internal_has_robot_kinematics();
}
inline const ::bosdyn::api::KinematicState& GetLocalizationStateResponse::_internal_robot_kinematics() const {
  const ::bosdyn::api::KinematicState* p = robot_kinematics_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::KinematicState*>(
      &::bosdyn::api::_KinematicState_default_instance_);
}
inline const ::bosdyn::api::KinematicState& GetLocalizationStateResponse::robot_kinematics() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.GetLocalizationStateResponse.robot_kinematics)
  return _internal_robot_kinematics();
}
inline void GetLocalizationStateResponse::unsafe_arena_set_allocated_robot_kinematics(
    ::bosdyn::api::KinematicState* robot_kinematics) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(robot_kinematics_);
  }
  robot_kinematics_ = robot_kinematics;
  if (robot_kinematics) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.GetLocalizationStateResponse.robot_kinematics)
}
inline ::bosdyn::api::KinematicState* GetLocalizationStateResponse::release_robot_kinematics() {
  
  ::bosdyn::api::KinematicState* temp = robot_kinematics_;
  robot_kinematics_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::KinematicState* GetLocalizationStateResponse::unsafe_arena_release_robot_kinematics() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.GetLocalizationStateResponse.robot_kinematics)
  
  ::bosdyn::api::KinematicState* temp = robot_kinematics_;
  robot_kinematics_ = nullptr;
  return temp;
}
inline ::bosdyn::api::KinematicState* GetLocalizationStateResponse::_internal_mutable_robot_kinematics() {
  
  if (robot_kinematics_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::KinematicState>(GetArena());
    robot_kinematics_ = p;
  }
  return robot_kinematics_;
}
inline ::bosdyn::api::KinematicState* GetLocalizationStateResponse::mutable_robot_kinematics() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.GetLocalizationStateResponse.robot_kinematics)
  return _internal_mutable_robot_kinematics();
}
inline void GetLocalizationStateResponse::set_allocated_robot_kinematics(::bosdyn::api::KinematicState* robot_kinematics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(robot_kinematics_);
  }
  if (robot_kinematics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(robot_kinematics)->GetArena();
    if (message_arena != submessage_arena) {
      robot_kinematics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, robot_kinematics, submessage_arena);
    }
    
  } else {
    
  }
  robot_kinematics_ = robot_kinematics;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.GetLocalizationStateResponse.robot_kinematics)
}

// repeated .bosdyn.api.graph_nav.RemotePointCloudStatus remote_cloud_status = 5;
inline int GetLocalizationStateResponse::_internal_remote_cloud_status_size() const {
  return remote_cloud_status_.size();
}
inline int GetLocalizationStateResponse::remote_cloud_status_size() const {
  return _internal_remote_cloud_status_size();
}
inline void GetLocalizationStateResponse::clear_remote_cloud_status() {
  remote_cloud_status_.Clear();
}
inline ::bosdyn::api::graph_nav::RemotePointCloudStatus* GetLocalizationStateResponse::mutable_remote_cloud_status(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.GetLocalizationStateResponse.remote_cloud_status)
  return remote_cloud_status_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::RemotePointCloudStatus >*
GetLocalizationStateResponse::mutable_remote_cloud_status() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.graph_nav.GetLocalizationStateResponse.remote_cloud_status)
  return &remote_cloud_status_;
}
inline const ::bosdyn::api::graph_nav::RemotePointCloudStatus& GetLocalizationStateResponse::_internal_remote_cloud_status(int index) const {
  return remote_cloud_status_.Get(index);
}
inline const ::bosdyn::api::graph_nav::RemotePointCloudStatus& GetLocalizationStateResponse::remote_cloud_status(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.GetLocalizationStateResponse.remote_cloud_status)
  return _internal_remote_cloud_status(index);
}
inline ::bosdyn::api::graph_nav::RemotePointCloudStatus* GetLocalizationStateResponse::_internal_add_remote_cloud_status() {
  return remote_cloud_status_.Add();
}
inline ::bosdyn::api::graph_nav::RemotePointCloudStatus* GetLocalizationStateResponse::add_remote_cloud_status() {
  // @@protoc_insertion_point(field_add:bosdyn.api.graph_nav.GetLocalizationStateResponse.remote_cloud_status)
  return _internal_add_remote_cloud_status();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::RemotePointCloudStatus >&
GetLocalizationStateResponse::remote_cloud_status() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.graph_nav.GetLocalizationStateResponse.remote_cloud_status)
  return remote_cloud_status_;
}

// .bosdyn.api.graph_nav.WaypointSnapshot live_data = 6;
inline bool GetLocalizationStateResponse::_internal_has_live_data() const {
  return this != internal_default_instance() && live_data_ != nullptr;
}
inline bool GetLocalizationStateResponse::has_live_data() const {
  return _internal_has_live_data();
}
inline const ::bosdyn::api::graph_nav::WaypointSnapshot& GetLocalizationStateResponse::_internal_live_data() const {
  const ::bosdyn::api::graph_nav::WaypointSnapshot* p = live_data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::graph_nav::WaypointSnapshot*>(
      &::bosdyn::api::graph_nav::_WaypointSnapshot_default_instance_);
}
inline const ::bosdyn::api::graph_nav::WaypointSnapshot& GetLocalizationStateResponse::live_data() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.GetLocalizationStateResponse.live_data)
  return _internal_live_data();
}
inline void GetLocalizationStateResponse::unsafe_arena_set_allocated_live_data(
    ::bosdyn::api::graph_nav::WaypointSnapshot* live_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(live_data_);
  }
  live_data_ = live_data;
  if (live_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.GetLocalizationStateResponse.live_data)
}
inline ::bosdyn::api::graph_nav::WaypointSnapshot* GetLocalizationStateResponse::release_live_data() {
  
  ::bosdyn::api::graph_nav::WaypointSnapshot* temp = live_data_;
  live_data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::graph_nav::WaypointSnapshot* GetLocalizationStateResponse::unsafe_arena_release_live_data() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.GetLocalizationStateResponse.live_data)
  
  ::bosdyn::api::graph_nav::WaypointSnapshot* temp = live_data_;
  live_data_ = nullptr;
  return temp;
}
inline ::bosdyn::api::graph_nav::WaypointSnapshot* GetLocalizationStateResponse::_internal_mutable_live_data() {
  
  if (live_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::graph_nav::WaypointSnapshot>(GetArena());
    live_data_ = p;
  }
  return live_data_;
}
inline ::bosdyn::api::graph_nav::WaypointSnapshot* GetLocalizationStateResponse::mutable_live_data() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.GetLocalizationStateResponse.live_data)
  return _internal_mutable_live_data();
}
inline void GetLocalizationStateResponse::set_allocated_live_data(::bosdyn::api::graph_nav::WaypointSnapshot* live_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(live_data_);
  }
  if (live_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(live_data)->GetArena();
    if (message_arena != submessage_arena) {
      live_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, live_data, submessage_arena);
    }
    
  } else {
    
  }
  live_data_ = live_data;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.GetLocalizationStateResponse.live_data)
}

// .bosdyn.api.graph_nav.LostDetectorState lost_detector_state = 7;
inline bool GetLocalizationStateResponse::_internal_has_lost_detector_state() const {
  return this != internal_default_instance() && lost_detector_state_ != nullptr;
}
inline bool GetLocalizationStateResponse::has_lost_detector_state() const {
  return _internal_has_lost_detector_state();
}
inline void GetLocalizationStateResponse::clear_lost_detector_state() {
  if (GetArena() == nullptr && lost_detector_state_ != nullptr) {
    delete lost_detector_state_;
  }
  lost_detector_state_ = nullptr;
}
inline const ::bosdyn::api::graph_nav::LostDetectorState& GetLocalizationStateResponse::_internal_lost_detector_state() const {
  const ::bosdyn::api::graph_nav::LostDetectorState* p = lost_detector_state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::graph_nav::LostDetectorState*>(
      &::bosdyn::api::graph_nav::_LostDetectorState_default_instance_);
}
inline const ::bosdyn::api::graph_nav::LostDetectorState& GetLocalizationStateResponse::lost_detector_state() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.GetLocalizationStateResponse.lost_detector_state)
  return _internal_lost_detector_state();
}
inline void GetLocalizationStateResponse::unsafe_arena_set_allocated_lost_detector_state(
    ::bosdyn::api::graph_nav::LostDetectorState* lost_detector_state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lost_detector_state_);
  }
  lost_detector_state_ = lost_detector_state;
  if (lost_detector_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.GetLocalizationStateResponse.lost_detector_state)
}
inline ::bosdyn::api::graph_nav::LostDetectorState* GetLocalizationStateResponse::release_lost_detector_state() {
  
  ::bosdyn::api::graph_nav::LostDetectorState* temp = lost_detector_state_;
  lost_detector_state_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::graph_nav::LostDetectorState* GetLocalizationStateResponse::unsafe_arena_release_lost_detector_state() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.GetLocalizationStateResponse.lost_detector_state)
  
  ::bosdyn::api::graph_nav::LostDetectorState* temp = lost_detector_state_;
  lost_detector_state_ = nullptr;
  return temp;
}
inline ::bosdyn::api::graph_nav::LostDetectorState* GetLocalizationStateResponse::_internal_mutable_lost_detector_state() {
  
  if (lost_detector_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::graph_nav::LostDetectorState>(GetArena());
    lost_detector_state_ = p;
  }
  return lost_detector_state_;
}
inline ::bosdyn::api::graph_nav::LostDetectorState* GetLocalizationStateResponse::mutable_lost_detector_state() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.GetLocalizationStateResponse.lost_detector_state)
  return _internal_mutable_lost_detector_state();
}
inline void GetLocalizationStateResponse::set_allocated_lost_detector_state(::bosdyn::api::graph_nav::LostDetectorState* lost_detector_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lost_detector_state_;
  }
  if (lost_detector_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lost_detector_state);
    if (message_arena != submessage_arena) {
      lost_detector_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lost_detector_state, submessage_arena);
    }
    
  } else {
    
  }
  lost_detector_state_ = lost_detector_state;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.GetLocalizationStateResponse.lost_detector_state)
}

// -------------------------------------------------------------------

// ClearGraphRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool ClearGraphRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool ClearGraphRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& ClearGraphRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::RequestHeader*>(
      &::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& ClearGraphRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ClearGraphRequest.header)
  return _internal_header();
}
inline void ClearGraphRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.ClearGraphRequest.header)
}
inline ::bosdyn::api::RequestHeader* ClearGraphRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::RequestHeader* ClearGraphRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.ClearGraphRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* ClearGraphRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::RequestHeader* ClearGraphRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.ClearGraphRequest.header)
  return _internal_mutable_header();
}
inline void ClearGraphRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.ClearGraphRequest.header)
}

// .bosdyn.api.Lease lease = 2;
inline bool ClearGraphRequest::_internal_has_lease() const {
  return this != internal_default_instance() && lease_ != nullptr;
}
inline bool ClearGraphRequest::has_lease() const {
  return _internal_has_lease();
}
inline const ::bosdyn::api::Lease& ClearGraphRequest::_internal_lease() const {
  const ::bosdyn::api::Lease* p = lease_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::Lease*>(
      &::bosdyn::api::_Lease_default_instance_);
}
inline const ::bosdyn::api::Lease& ClearGraphRequest::lease() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ClearGraphRequest.lease)
  return _internal_lease();
}
inline void ClearGraphRequest::unsafe_arena_set_allocated_lease(
    ::bosdyn::api::Lease* lease) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lease_);
  }
  lease_ = lease;
  if (lease) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.ClearGraphRequest.lease)
}
inline ::bosdyn::api::Lease* ClearGraphRequest::release_lease() {
  
  ::bosdyn::api::Lease* temp = lease_;
  lease_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::Lease* ClearGraphRequest::unsafe_arena_release_lease() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.ClearGraphRequest.lease)
  
  ::bosdyn::api::Lease* temp = lease_;
  lease_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Lease* ClearGraphRequest::_internal_mutable_lease() {
  
  if (lease_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Lease>(GetArena());
    lease_ = p;
  }
  return lease_;
}
inline ::bosdyn::api::Lease* ClearGraphRequest::mutable_lease() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.ClearGraphRequest.lease)
  return _internal_mutable_lease();
}
inline void ClearGraphRequest::set_allocated_lease(::bosdyn::api::Lease* lease) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lease_);
  }
  if (lease) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lease)->GetArena();
    if (message_arena != submessage_arena) {
      lease = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lease, submessage_arena);
    }
    
  } else {
    
  }
  lease_ = lease;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.ClearGraphRequest.lease)
}

// -------------------------------------------------------------------

// ClearGraphResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool ClearGraphResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool ClearGraphResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& ClearGraphResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::ResponseHeader*>(
      &::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& ClearGraphResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ClearGraphResponse.header)
  return _internal_header();
}
inline void ClearGraphResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.ClearGraphResponse.header)
}
inline ::bosdyn::api::ResponseHeader* ClearGraphResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::ResponseHeader* ClearGraphResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.ClearGraphResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* ClearGraphResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::ResponseHeader* ClearGraphResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.ClearGraphResponse.header)
  return _internal_mutable_header();
}
inline void ClearGraphResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.ClearGraphResponse.header)
}

// .bosdyn.api.LeaseUseResult lease_use_result = 2;
inline bool ClearGraphResponse::_internal_has_lease_use_result() const {
  return this != internal_default_instance() && lease_use_result_ != nullptr;
}
inline bool ClearGraphResponse::has_lease_use_result() const {
  return _internal_has_lease_use_result();
}
inline const ::bosdyn::api::LeaseUseResult& ClearGraphResponse::_internal_lease_use_result() const {
  const ::bosdyn::api::LeaseUseResult* p = lease_use_result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::LeaseUseResult*>(
      &::bosdyn::api::_LeaseUseResult_default_instance_);
}
inline const ::bosdyn::api::LeaseUseResult& ClearGraphResponse::lease_use_result() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.ClearGraphResponse.lease_use_result)
  return _internal_lease_use_result();
}
inline void ClearGraphResponse::unsafe_arena_set_allocated_lease_use_result(
    ::bosdyn::api::LeaseUseResult* lease_use_result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lease_use_result_);
  }
  lease_use_result_ = lease_use_result;
  if (lease_use_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.ClearGraphResponse.lease_use_result)
}
inline ::bosdyn::api::LeaseUseResult* ClearGraphResponse::release_lease_use_result() {
  
  ::bosdyn::api::LeaseUseResult* temp = lease_use_result_;
  lease_use_result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::LeaseUseResult* ClearGraphResponse::unsafe_arena_release_lease_use_result() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.ClearGraphResponse.lease_use_result)
  
  ::bosdyn::api::LeaseUseResult* temp = lease_use_result_;
  lease_use_result_ = nullptr;
  return temp;
}
inline ::bosdyn::api::LeaseUseResult* ClearGraphResponse::_internal_mutable_lease_use_result() {
  
  if (lease_use_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::LeaseUseResult>(GetArena());
    lease_use_result_ = p;
  }
  return lease_use_result_;
}
inline ::bosdyn::api::LeaseUseResult* ClearGraphResponse::mutable_lease_use_result() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.ClearGraphResponse.lease_use_result)
  return _internal_mutable_lease_use_result();
}
inline void ClearGraphResponse::set_allocated_lease_use_result(::bosdyn::api::LeaseUseResult* lease_use_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lease_use_result_);
  }
  if (lease_use_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lease_use_result)->GetArena();
    if (message_arena != submessage_arena) {
      lease_use_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lease_use_result, submessage_arena);
    }
    
  } else {
    
  }
  lease_use_result_ = lease_use_result;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.ClearGraphResponse.lease_use_result)
}

// -------------------------------------------------------------------

// UploadGraphRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool UploadGraphRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool UploadGraphRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& UploadGraphRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::RequestHeader*>(
      &::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& UploadGraphRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.UploadGraphRequest.header)
  return _internal_header();
}
inline void UploadGraphRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.UploadGraphRequest.header)
}
inline ::bosdyn::api::RequestHeader* UploadGraphRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::RequestHeader* UploadGraphRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.UploadGraphRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* UploadGraphRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::RequestHeader* UploadGraphRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.UploadGraphRequest.header)
  return _internal_mutable_header();
}
inline void UploadGraphRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.UploadGraphRequest.header)
}

// .bosdyn.api.graph_nav.Graph graph = 2;
inline bool UploadGraphRequest::_internal_has_graph() const {
  return this != internal_default_instance() && graph_ != nullptr;
}
inline bool UploadGraphRequest::has_graph() const {
  return _internal_has_graph();
}
inline const ::bosdyn::api::graph_nav::Graph& UploadGraphRequest::_internal_graph() const {
  const ::bosdyn::api::graph_nav::Graph* p = graph_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::graph_nav::Graph*>(
      &::bosdyn::api::graph_nav::_Graph_default_instance_);
}
inline const ::bosdyn::api::graph_nav::Graph& UploadGraphRequest::graph() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.UploadGraphRequest.graph)
  return _internal_graph();
}
inline void UploadGraphRequest::unsafe_arena_set_allocated_graph(
    ::bosdyn::api::graph_nav::Graph* graph) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph_);
  }
  graph_ = graph;
  if (graph) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.UploadGraphRequest.graph)
}
inline ::bosdyn::api::graph_nav::Graph* UploadGraphRequest::release_graph() {
  
  ::bosdyn::api::graph_nav::Graph* temp = graph_;
  graph_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::graph_nav::Graph* UploadGraphRequest::unsafe_arena_release_graph() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.UploadGraphRequest.graph)
  
  ::bosdyn::api::graph_nav::Graph* temp = graph_;
  graph_ = nullptr;
  return temp;
}
inline ::bosdyn::api::graph_nav::Graph* UploadGraphRequest::_internal_mutable_graph() {
  
  if (graph_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::graph_nav::Graph>(GetArena());
    graph_ = p;
  }
  return graph_;
}
inline ::bosdyn::api::graph_nav::Graph* UploadGraphRequest::mutable_graph() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.UploadGraphRequest.graph)
  return _internal_mutable_graph();
}
inline void UploadGraphRequest::set_allocated_graph(::bosdyn::api::graph_nav::Graph* graph) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph_);
  }
  if (graph) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph)->GetArena();
    if (message_arena != submessage_arena) {
      graph = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, graph, submessage_arena);
    }
    
  } else {
    
  }
  graph_ = graph;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.UploadGraphRequest.graph)
}

// .bosdyn.api.Lease lease = 3;
inline bool UploadGraphRequest::_internal_has_lease() const {
  return this != internal_default_instance() && lease_ != nullptr;
}
inline bool UploadGraphRequest::has_lease() const {
  return _internal_has_lease();
}
inline const ::bosdyn::api::Lease& UploadGraphRequest::_internal_lease() const {
  const ::bosdyn::api::Lease* p = lease_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::Lease*>(
      &::bosdyn::api::_Lease_default_instance_);
}
inline const ::bosdyn::api::Lease& UploadGraphRequest::lease() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.UploadGraphRequest.lease)
  return _internal_lease();
}
inline void UploadGraphRequest::unsafe_arena_set_allocated_lease(
    ::bosdyn::api::Lease* lease) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lease_);
  }
  lease_ = lease;
  if (lease) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.UploadGraphRequest.lease)
}
inline ::bosdyn::api::Lease* UploadGraphRequest::release_lease() {
  
  ::bosdyn::api::Lease* temp = lease_;
  lease_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::Lease* UploadGraphRequest::unsafe_arena_release_lease() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.UploadGraphRequest.lease)
  
  ::bosdyn::api::Lease* temp = lease_;
  lease_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Lease* UploadGraphRequest::_internal_mutable_lease() {
  
  if (lease_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Lease>(GetArena());
    lease_ = p;
  }
  return lease_;
}
inline ::bosdyn::api::Lease* UploadGraphRequest::mutable_lease() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.UploadGraphRequest.lease)
  return _internal_mutable_lease();
}
inline void UploadGraphRequest::set_allocated_lease(::bosdyn::api::Lease* lease) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lease_);
  }
  if (lease) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lease)->GetArena();
    if (message_arena != submessage_arena) {
      lease = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lease, submessage_arena);
    }
    
  } else {
    
  }
  lease_ = lease;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.UploadGraphRequest.lease)
}

// -------------------------------------------------------------------

// UploadGraphResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool UploadGraphResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool UploadGraphResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& UploadGraphResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::ResponseHeader*>(
      &::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& UploadGraphResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.UploadGraphResponse.header)
  return _internal_header();
}
inline void UploadGraphResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.UploadGraphResponse.header)
}
inline ::bosdyn::api::ResponseHeader* UploadGraphResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::ResponseHeader* UploadGraphResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.UploadGraphResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* UploadGraphResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::ResponseHeader* UploadGraphResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.UploadGraphResponse.header)
  return _internal_mutable_header();
}
inline void UploadGraphResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.UploadGraphResponse.header)
}

// .bosdyn.api.graph_nav.UploadGraphResponse.Status status = 8;
inline void UploadGraphResponse::clear_status() {
  status_ = 0;
}
inline ::bosdyn::api::graph_nav::UploadGraphResponse_Status UploadGraphResponse::_internal_status() const {
  return static_cast< ::bosdyn::api::graph_nav::UploadGraphResponse_Status >(status_);
}
inline ::bosdyn::api::graph_nav::UploadGraphResponse_Status UploadGraphResponse::status() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.UploadGraphResponse.status)
  return _internal_status();
}
inline void UploadGraphResponse::_internal_set_status(::bosdyn::api::graph_nav::UploadGraphResponse_Status value) {
  
  status_ = value;
}
inline void UploadGraphResponse::set_status(::bosdyn::api::graph_nav::UploadGraphResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.UploadGraphResponse.status)
}

// .bosdyn.api.LeaseUseResult lease_use_result = 2;
inline bool UploadGraphResponse::_internal_has_lease_use_result() const {
  return this != internal_default_instance() && lease_use_result_ != nullptr;
}
inline bool UploadGraphResponse::has_lease_use_result() const {
  return _internal_has_lease_use_result();
}
inline const ::bosdyn::api::LeaseUseResult& UploadGraphResponse::_internal_lease_use_result() const {
  const ::bosdyn::api::LeaseUseResult* p = lease_use_result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::LeaseUseResult*>(
      &::bosdyn::api::_LeaseUseResult_default_instance_);
}
inline const ::bosdyn::api::LeaseUseResult& UploadGraphResponse::lease_use_result() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.UploadGraphResponse.lease_use_result)
  return _internal_lease_use_result();
}
inline void UploadGraphResponse::unsafe_arena_set_allocated_lease_use_result(
    ::bosdyn::api::LeaseUseResult* lease_use_result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lease_use_result_);
  }
  lease_use_result_ = lease_use_result;
  if (lease_use_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.UploadGraphResponse.lease_use_result)
}
inline ::bosdyn::api::LeaseUseResult* UploadGraphResponse::release_lease_use_result() {
  
  ::bosdyn::api::LeaseUseResult* temp = lease_use_result_;
  lease_use_result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::LeaseUseResult* UploadGraphResponse::unsafe_arena_release_lease_use_result() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.UploadGraphResponse.lease_use_result)
  
  ::bosdyn::api::LeaseUseResult* temp = lease_use_result_;
  lease_use_result_ = nullptr;
  return temp;
}
inline ::bosdyn::api::LeaseUseResult* UploadGraphResponse::_internal_mutable_lease_use_result() {
  
  if (lease_use_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::LeaseUseResult>(GetArena());
    lease_use_result_ = p;
  }
  return lease_use_result_;
}
inline ::bosdyn::api::LeaseUseResult* UploadGraphResponse::mutable_lease_use_result() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.UploadGraphResponse.lease_use_result)
  return _internal_mutable_lease_use_result();
}
inline void UploadGraphResponse::set_allocated_lease_use_result(::bosdyn::api::LeaseUseResult* lease_use_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lease_use_result_);
  }
  if (lease_use_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lease_use_result)->GetArena();
    if (message_arena != submessage_arena) {
      lease_use_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lease_use_result, submessage_arena);
    }
    
  } else {
    
  }
  lease_use_result_ = lease_use_result;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.UploadGraphResponse.lease_use_result)
}

// repeated string loaded_waypoint_snapshot_ids = 3;
inline int UploadGraphResponse::_internal_loaded_waypoint_snapshot_ids_size() const {
  return loaded_waypoint_snapshot_ids_.size();
}
inline int UploadGraphResponse::loaded_waypoint_snapshot_ids_size() const {
  return _internal_loaded_waypoint_snapshot_ids_size();
}
inline void UploadGraphResponse::clear_loaded_waypoint_snapshot_ids() {
  loaded_waypoint_snapshot_ids_.Clear();
}
inline std::string* UploadGraphResponse::add_loaded_waypoint_snapshot_ids() {
  // @@protoc_insertion_point(field_add_mutable:bosdyn.api.graph_nav.UploadGraphResponse.loaded_waypoint_snapshot_ids)
  return _internal_add_loaded_waypoint_snapshot_ids();
}
inline const std::string& UploadGraphResponse::_internal_loaded_waypoint_snapshot_ids(int index) const {
  return loaded_waypoint_snapshot_ids_.Get(index);
}
inline const std::string& UploadGraphResponse::loaded_waypoint_snapshot_ids(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.UploadGraphResponse.loaded_waypoint_snapshot_ids)
  return _internal_loaded_waypoint_snapshot_ids(index);
}
inline std::string* UploadGraphResponse::mutable_loaded_waypoint_snapshot_ids(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.UploadGraphResponse.loaded_waypoint_snapshot_ids)
  return loaded_waypoint_snapshot_ids_.Mutable(index);
}
inline void UploadGraphResponse::set_loaded_waypoint_snapshot_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.UploadGraphResponse.loaded_waypoint_snapshot_ids)
  loaded_waypoint_snapshot_ids_.Mutable(index)->assign(value);
}
inline void UploadGraphResponse::set_loaded_waypoint_snapshot_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.UploadGraphResponse.loaded_waypoint_snapshot_ids)
  loaded_waypoint_snapshot_ids_.Mutable(index)->assign(std::move(value));
}
inline void UploadGraphResponse::set_loaded_waypoint_snapshot_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  loaded_waypoint_snapshot_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bosdyn.api.graph_nav.UploadGraphResponse.loaded_waypoint_snapshot_ids)
}
inline void UploadGraphResponse::set_loaded_waypoint_snapshot_ids(int index, const char* value, size_t size) {
  loaded_waypoint_snapshot_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.graph_nav.UploadGraphResponse.loaded_waypoint_snapshot_ids)
}
inline std::string* UploadGraphResponse::_internal_add_loaded_waypoint_snapshot_ids() {
  return loaded_waypoint_snapshot_ids_.Add();
}
inline void UploadGraphResponse::add_loaded_waypoint_snapshot_ids(const std::string& value) {
  loaded_waypoint_snapshot_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bosdyn.api.graph_nav.UploadGraphResponse.loaded_waypoint_snapshot_ids)
}
inline void UploadGraphResponse::add_loaded_waypoint_snapshot_ids(std::string&& value) {
  loaded_waypoint_snapshot_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:bosdyn.api.graph_nav.UploadGraphResponse.loaded_waypoint_snapshot_ids)
}
inline void UploadGraphResponse::add_loaded_waypoint_snapshot_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  loaded_waypoint_snapshot_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bosdyn.api.graph_nav.UploadGraphResponse.loaded_waypoint_snapshot_ids)
}
inline void UploadGraphResponse::add_loaded_waypoint_snapshot_ids(const char* value, size_t size) {
  loaded_waypoint_snapshot_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bosdyn.api.graph_nav.UploadGraphResponse.loaded_waypoint_snapshot_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UploadGraphResponse::loaded_waypoint_snapshot_ids() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.graph_nav.UploadGraphResponse.loaded_waypoint_snapshot_ids)
  return loaded_waypoint_snapshot_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UploadGraphResponse::mutable_loaded_waypoint_snapshot_ids() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.graph_nav.UploadGraphResponse.loaded_waypoint_snapshot_ids)
  return &loaded_waypoint_snapshot_ids_;
}

// repeated string unknown_waypoint_snapshot_ids = 4;
inline int UploadGraphResponse::_internal_unknown_waypoint_snapshot_ids_size() const {
  return unknown_waypoint_snapshot_ids_.size();
}
inline int UploadGraphResponse::unknown_waypoint_snapshot_ids_size() const {
  return _internal_unknown_waypoint_snapshot_ids_size();
}
inline void UploadGraphResponse::clear_unknown_waypoint_snapshot_ids() {
  unknown_waypoint_snapshot_ids_.Clear();
}
inline std::string* UploadGraphResponse::add_unknown_waypoint_snapshot_ids() {
  // @@protoc_insertion_point(field_add_mutable:bosdyn.api.graph_nav.UploadGraphResponse.unknown_waypoint_snapshot_ids)
  return _internal_add_unknown_waypoint_snapshot_ids();
}
inline const std::string& UploadGraphResponse::_internal_unknown_waypoint_snapshot_ids(int index) const {
  return unknown_waypoint_snapshot_ids_.Get(index);
}
inline const std::string& UploadGraphResponse::unknown_waypoint_snapshot_ids(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.UploadGraphResponse.unknown_waypoint_snapshot_ids)
  return _internal_unknown_waypoint_snapshot_ids(index);
}
inline std::string* UploadGraphResponse::mutable_unknown_waypoint_snapshot_ids(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.UploadGraphResponse.unknown_waypoint_snapshot_ids)
  return unknown_waypoint_snapshot_ids_.Mutable(index);
}
inline void UploadGraphResponse::set_unknown_waypoint_snapshot_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.UploadGraphResponse.unknown_waypoint_snapshot_ids)
  unknown_waypoint_snapshot_ids_.Mutable(index)->assign(value);
}
inline void UploadGraphResponse::set_unknown_waypoint_snapshot_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.UploadGraphResponse.unknown_waypoint_snapshot_ids)
  unknown_waypoint_snapshot_ids_.Mutable(index)->assign(std::move(value));
}
inline void UploadGraphResponse::set_unknown_waypoint_snapshot_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  unknown_waypoint_snapshot_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bosdyn.api.graph_nav.UploadGraphResponse.unknown_waypoint_snapshot_ids)
}
inline void UploadGraphResponse::set_unknown_waypoint_snapshot_ids(int index, const char* value, size_t size) {
  unknown_waypoint_snapshot_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.graph_nav.UploadGraphResponse.unknown_waypoint_snapshot_ids)
}
inline std::string* UploadGraphResponse::_internal_add_unknown_waypoint_snapshot_ids() {
  return unknown_waypoint_snapshot_ids_.Add();
}
inline void UploadGraphResponse::add_unknown_waypoint_snapshot_ids(const std::string& value) {
  unknown_waypoint_snapshot_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bosdyn.api.graph_nav.UploadGraphResponse.unknown_waypoint_snapshot_ids)
}
inline void UploadGraphResponse::add_unknown_waypoint_snapshot_ids(std::string&& value) {
  unknown_waypoint_snapshot_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:bosdyn.api.graph_nav.UploadGraphResponse.unknown_waypoint_snapshot_ids)
}
inline void UploadGraphResponse::add_unknown_waypoint_snapshot_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  unknown_waypoint_snapshot_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bosdyn.api.graph_nav.UploadGraphResponse.unknown_waypoint_snapshot_ids)
}
inline void UploadGraphResponse::add_unknown_waypoint_snapshot_ids(const char* value, size_t size) {
  unknown_waypoint_snapshot_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bosdyn.api.graph_nav.UploadGraphResponse.unknown_waypoint_snapshot_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UploadGraphResponse::unknown_waypoint_snapshot_ids() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.graph_nav.UploadGraphResponse.unknown_waypoint_snapshot_ids)
  return unknown_waypoint_snapshot_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UploadGraphResponse::mutable_unknown_waypoint_snapshot_ids() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.graph_nav.UploadGraphResponse.unknown_waypoint_snapshot_ids)
  return &unknown_waypoint_snapshot_ids_;
}

// repeated string loaded_edge_snapshot_ids = 5;
inline int UploadGraphResponse::_internal_loaded_edge_snapshot_ids_size() const {
  return loaded_edge_snapshot_ids_.size();
}
inline int UploadGraphResponse::loaded_edge_snapshot_ids_size() const {
  return _internal_loaded_edge_snapshot_ids_size();
}
inline void UploadGraphResponse::clear_loaded_edge_snapshot_ids() {
  loaded_edge_snapshot_ids_.Clear();
}
inline std::string* UploadGraphResponse::add_loaded_edge_snapshot_ids() {
  // @@protoc_insertion_point(field_add_mutable:bosdyn.api.graph_nav.UploadGraphResponse.loaded_edge_snapshot_ids)
  return _internal_add_loaded_edge_snapshot_ids();
}
inline const std::string& UploadGraphResponse::_internal_loaded_edge_snapshot_ids(int index) const {
  return loaded_edge_snapshot_ids_.Get(index);
}
inline const std::string& UploadGraphResponse::loaded_edge_snapshot_ids(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.UploadGraphResponse.loaded_edge_snapshot_ids)
  return _internal_loaded_edge_snapshot_ids(index);
}
inline std::string* UploadGraphResponse::mutable_loaded_edge_snapshot_ids(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.UploadGraphResponse.loaded_edge_snapshot_ids)
  return loaded_edge_snapshot_ids_.Mutable(index);
}
inline void UploadGraphResponse::set_loaded_edge_snapshot_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.UploadGraphResponse.loaded_edge_snapshot_ids)
  loaded_edge_snapshot_ids_.Mutable(index)->assign(value);
}
inline void UploadGraphResponse::set_loaded_edge_snapshot_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.UploadGraphResponse.loaded_edge_snapshot_ids)
  loaded_edge_snapshot_ids_.Mutable(index)->assign(std::move(value));
}
inline void UploadGraphResponse::set_loaded_edge_snapshot_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  loaded_edge_snapshot_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bosdyn.api.graph_nav.UploadGraphResponse.loaded_edge_snapshot_ids)
}
inline void UploadGraphResponse::set_loaded_edge_snapshot_ids(int index, const char* value, size_t size) {
  loaded_edge_snapshot_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.graph_nav.UploadGraphResponse.loaded_edge_snapshot_ids)
}
inline std::string* UploadGraphResponse::_internal_add_loaded_edge_snapshot_ids() {
  return loaded_edge_snapshot_ids_.Add();
}
inline void UploadGraphResponse::add_loaded_edge_snapshot_ids(const std::string& value) {
  loaded_edge_snapshot_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bosdyn.api.graph_nav.UploadGraphResponse.loaded_edge_snapshot_ids)
}
inline void UploadGraphResponse::add_loaded_edge_snapshot_ids(std::string&& value) {
  loaded_edge_snapshot_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:bosdyn.api.graph_nav.UploadGraphResponse.loaded_edge_snapshot_ids)
}
inline void UploadGraphResponse::add_loaded_edge_snapshot_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  loaded_edge_snapshot_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bosdyn.api.graph_nav.UploadGraphResponse.loaded_edge_snapshot_ids)
}
inline void UploadGraphResponse::add_loaded_edge_snapshot_ids(const char* value, size_t size) {
  loaded_edge_snapshot_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bosdyn.api.graph_nav.UploadGraphResponse.loaded_edge_snapshot_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UploadGraphResponse::loaded_edge_snapshot_ids() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.graph_nav.UploadGraphResponse.loaded_edge_snapshot_ids)
  return loaded_edge_snapshot_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UploadGraphResponse::mutable_loaded_edge_snapshot_ids() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.graph_nav.UploadGraphResponse.loaded_edge_snapshot_ids)
  return &loaded_edge_snapshot_ids_;
}

// repeated string unknown_edge_snapshot_ids = 6;
inline int UploadGraphResponse::_internal_unknown_edge_snapshot_ids_size() const {
  return unknown_edge_snapshot_ids_.size();
}
inline int UploadGraphResponse::unknown_edge_snapshot_ids_size() const {
  return _internal_unknown_edge_snapshot_ids_size();
}
inline void UploadGraphResponse::clear_unknown_edge_snapshot_ids() {
  unknown_edge_snapshot_ids_.Clear();
}
inline std::string* UploadGraphResponse::add_unknown_edge_snapshot_ids() {
  // @@protoc_insertion_point(field_add_mutable:bosdyn.api.graph_nav.UploadGraphResponse.unknown_edge_snapshot_ids)
  return _internal_add_unknown_edge_snapshot_ids();
}
inline const std::string& UploadGraphResponse::_internal_unknown_edge_snapshot_ids(int index) const {
  return unknown_edge_snapshot_ids_.Get(index);
}
inline const std::string& UploadGraphResponse::unknown_edge_snapshot_ids(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.UploadGraphResponse.unknown_edge_snapshot_ids)
  return _internal_unknown_edge_snapshot_ids(index);
}
inline std::string* UploadGraphResponse::mutable_unknown_edge_snapshot_ids(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.UploadGraphResponse.unknown_edge_snapshot_ids)
  return unknown_edge_snapshot_ids_.Mutable(index);
}
inline void UploadGraphResponse::set_unknown_edge_snapshot_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.UploadGraphResponse.unknown_edge_snapshot_ids)
  unknown_edge_snapshot_ids_.Mutable(index)->assign(value);
}
inline void UploadGraphResponse::set_unknown_edge_snapshot_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.UploadGraphResponse.unknown_edge_snapshot_ids)
  unknown_edge_snapshot_ids_.Mutable(index)->assign(std::move(value));
}
inline void UploadGraphResponse::set_unknown_edge_snapshot_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  unknown_edge_snapshot_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bosdyn.api.graph_nav.UploadGraphResponse.unknown_edge_snapshot_ids)
}
inline void UploadGraphResponse::set_unknown_edge_snapshot_ids(int index, const char* value, size_t size) {
  unknown_edge_snapshot_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.graph_nav.UploadGraphResponse.unknown_edge_snapshot_ids)
}
inline std::string* UploadGraphResponse::_internal_add_unknown_edge_snapshot_ids() {
  return unknown_edge_snapshot_ids_.Add();
}
inline void UploadGraphResponse::add_unknown_edge_snapshot_ids(const std::string& value) {
  unknown_edge_snapshot_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bosdyn.api.graph_nav.UploadGraphResponse.unknown_edge_snapshot_ids)
}
inline void UploadGraphResponse::add_unknown_edge_snapshot_ids(std::string&& value) {
  unknown_edge_snapshot_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:bosdyn.api.graph_nav.UploadGraphResponse.unknown_edge_snapshot_ids)
}
inline void UploadGraphResponse::add_unknown_edge_snapshot_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  unknown_edge_snapshot_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bosdyn.api.graph_nav.UploadGraphResponse.unknown_edge_snapshot_ids)
}
inline void UploadGraphResponse::add_unknown_edge_snapshot_ids(const char* value, size_t size) {
  unknown_edge_snapshot_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bosdyn.api.graph_nav.UploadGraphResponse.unknown_edge_snapshot_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UploadGraphResponse::unknown_edge_snapshot_ids() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.graph_nav.UploadGraphResponse.unknown_edge_snapshot_ids)
  return unknown_edge_snapshot_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UploadGraphResponse::mutable_unknown_edge_snapshot_ids() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.graph_nav.UploadGraphResponse.unknown_edge_snapshot_ids)
  return &unknown_edge_snapshot_ids_;
}

// .bosdyn.api.LicenseInfo.Status license_status = 7;
inline void UploadGraphResponse::clear_license_status() {
  license_status_ = 0;
}
inline ::bosdyn::api::LicenseInfo_Status UploadGraphResponse::_internal_license_status() const {
  return static_cast< ::bosdyn::api::LicenseInfo_Status >(license_status_);
}
inline ::bosdyn::api::LicenseInfo_Status UploadGraphResponse::license_status() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.UploadGraphResponse.license_status)
  return _internal_license_status();
}
inline void UploadGraphResponse::_internal_set_license_status(::bosdyn::api::LicenseInfo_Status value) {
  
  license_status_ = value;
}
inline void UploadGraphResponse::set_license_status(::bosdyn::api::LicenseInfo_Status value) {
  _internal_set_license_status(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.UploadGraphResponse.license_status)
}

// -------------------------------------------------------------------

// DownloadGraphRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool DownloadGraphRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool DownloadGraphRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& DownloadGraphRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::RequestHeader*>(
      &::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& DownloadGraphRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.DownloadGraphRequest.header)
  return _internal_header();
}
inline void DownloadGraphRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.DownloadGraphRequest.header)
}
inline ::bosdyn::api::RequestHeader* DownloadGraphRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::RequestHeader* DownloadGraphRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.DownloadGraphRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* DownloadGraphRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::RequestHeader* DownloadGraphRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.DownloadGraphRequest.header)
  return _internal_mutable_header();
}
inline void DownloadGraphRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.DownloadGraphRequest.header)
}

// -------------------------------------------------------------------

// DownloadGraphResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool DownloadGraphResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool DownloadGraphResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& DownloadGraphResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::ResponseHeader*>(
      &::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& DownloadGraphResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.DownloadGraphResponse.header)
  return _internal_header();
}
inline void DownloadGraphResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.DownloadGraphResponse.header)
}
inline ::bosdyn::api::ResponseHeader* DownloadGraphResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::ResponseHeader* DownloadGraphResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.DownloadGraphResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* DownloadGraphResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::ResponseHeader* DownloadGraphResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.DownloadGraphResponse.header)
  return _internal_mutable_header();
}
inline void DownloadGraphResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.DownloadGraphResponse.header)
}

// .bosdyn.api.graph_nav.Graph graph = 2;
inline bool DownloadGraphResponse::_internal_has_graph() const {
  return this != internal_default_instance() && graph_ != nullptr;
}
inline bool DownloadGraphResponse::has_graph() const {
  return _internal_has_graph();
}
inline const ::bosdyn::api::graph_nav::Graph& DownloadGraphResponse::_internal_graph() const {
  const ::bosdyn::api::graph_nav::Graph* p = graph_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::graph_nav::Graph*>(
      &::bosdyn::api::graph_nav::_Graph_default_instance_);
}
inline const ::bosdyn::api::graph_nav::Graph& DownloadGraphResponse::graph() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.DownloadGraphResponse.graph)
  return _internal_graph();
}
inline void DownloadGraphResponse::unsafe_arena_set_allocated_graph(
    ::bosdyn::api::graph_nav::Graph* graph) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph_);
  }
  graph_ = graph;
  if (graph) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.DownloadGraphResponse.graph)
}
inline ::bosdyn::api::graph_nav::Graph* DownloadGraphResponse::release_graph() {
  
  ::bosdyn::api::graph_nav::Graph* temp = graph_;
  graph_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::graph_nav::Graph* DownloadGraphResponse::unsafe_arena_release_graph() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.DownloadGraphResponse.graph)
  
  ::bosdyn::api::graph_nav::Graph* temp = graph_;
  graph_ = nullptr;
  return temp;
}
inline ::bosdyn::api::graph_nav::Graph* DownloadGraphResponse::_internal_mutable_graph() {
  
  if (graph_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::graph_nav::Graph>(GetArena());
    graph_ = p;
  }
  return graph_;
}
inline ::bosdyn::api::graph_nav::Graph* DownloadGraphResponse::mutable_graph() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.DownloadGraphResponse.graph)
  return _internal_mutable_graph();
}
inline void DownloadGraphResponse::set_allocated_graph(::bosdyn::api::graph_nav::Graph* graph) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph_);
  }
  if (graph) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph)->GetArena();
    if (message_arena != submessage_arena) {
      graph = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, graph, submessage_arena);
    }
    
  } else {
    
  }
  graph_ = graph;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.DownloadGraphResponse.graph)
}

// -------------------------------------------------------------------

// UploadWaypointSnapshotRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool UploadWaypointSnapshotRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool UploadWaypointSnapshotRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& UploadWaypointSnapshotRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::RequestHeader*>(
      &::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& UploadWaypointSnapshotRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.UploadWaypointSnapshotRequest.header)
  return _internal_header();
}
inline void UploadWaypointSnapshotRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.UploadWaypointSnapshotRequest.header)
}
inline ::bosdyn::api::RequestHeader* UploadWaypointSnapshotRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::RequestHeader* UploadWaypointSnapshotRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.UploadWaypointSnapshotRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* UploadWaypointSnapshotRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::RequestHeader* UploadWaypointSnapshotRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.UploadWaypointSnapshotRequest.header)
  return _internal_mutable_header();
}
inline void UploadWaypointSnapshotRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.UploadWaypointSnapshotRequest.header)
}

// .bosdyn.api.DataChunk chunk = 3;
inline bool UploadWaypointSnapshotRequest::_internal_has_chunk() const {
  return this != internal_default_instance() && chunk_ != nullptr;
}
inline bool UploadWaypointSnapshotRequest::has_chunk() const {
  return _internal_has_chunk();
}
inline const ::bosdyn::api::DataChunk& UploadWaypointSnapshotRequest::_internal_chunk() const {
  const ::bosdyn::api::DataChunk* p = chunk_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::DataChunk*>(
      &::bosdyn::api::_DataChunk_default_instance_);
}
inline const ::bosdyn::api::DataChunk& UploadWaypointSnapshotRequest::chunk() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.UploadWaypointSnapshotRequest.chunk)
  return _internal_chunk();
}
inline void UploadWaypointSnapshotRequest::unsafe_arena_set_allocated_chunk(
    ::bosdyn::api::DataChunk* chunk) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chunk_);
  }
  chunk_ = chunk;
  if (chunk) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.UploadWaypointSnapshotRequest.chunk)
}
inline ::bosdyn::api::DataChunk* UploadWaypointSnapshotRequest::release_chunk() {
  
  ::bosdyn::api::DataChunk* temp = chunk_;
  chunk_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::DataChunk* UploadWaypointSnapshotRequest::unsafe_arena_release_chunk() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.UploadWaypointSnapshotRequest.chunk)
  
  ::bosdyn::api::DataChunk* temp = chunk_;
  chunk_ = nullptr;
  return temp;
}
inline ::bosdyn::api::DataChunk* UploadWaypointSnapshotRequest::_internal_mutable_chunk() {
  
  if (chunk_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::DataChunk>(GetArena());
    chunk_ = p;
  }
  return chunk_;
}
inline ::bosdyn::api::DataChunk* UploadWaypointSnapshotRequest::mutable_chunk() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.UploadWaypointSnapshotRequest.chunk)
  return _internal_mutable_chunk();
}
inline void UploadWaypointSnapshotRequest::set_allocated_chunk(::bosdyn::api::DataChunk* chunk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(chunk_);
  }
  if (chunk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chunk)->GetArena();
    if (message_arena != submessage_arena) {
      chunk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chunk, submessage_arena);
    }
    
  } else {
    
  }
  chunk_ = chunk;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.UploadWaypointSnapshotRequest.chunk)
}

// .bosdyn.api.Lease lease = 4;
inline bool UploadWaypointSnapshotRequest::_internal_has_lease() const {
  return this != internal_default_instance() && lease_ != nullptr;
}
inline bool UploadWaypointSnapshotRequest::has_lease() const {
  return _internal_has_lease();
}
inline const ::bosdyn::api::Lease& UploadWaypointSnapshotRequest::_internal_lease() const {
  const ::bosdyn::api::Lease* p = lease_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::Lease*>(
      &::bosdyn::api::_Lease_default_instance_);
}
inline const ::bosdyn::api::Lease& UploadWaypointSnapshotRequest::lease() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.UploadWaypointSnapshotRequest.lease)
  return _internal_lease();
}
inline void UploadWaypointSnapshotRequest::unsafe_arena_set_allocated_lease(
    ::bosdyn::api::Lease* lease) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lease_);
  }
  lease_ = lease;
  if (lease) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.UploadWaypointSnapshotRequest.lease)
}
inline ::bosdyn::api::Lease* UploadWaypointSnapshotRequest::release_lease() {
  
  ::bosdyn::api::Lease* temp = lease_;
  lease_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::Lease* UploadWaypointSnapshotRequest::unsafe_arena_release_lease() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.UploadWaypointSnapshotRequest.lease)
  
  ::bosdyn::api::Lease* temp = lease_;
  lease_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Lease* UploadWaypointSnapshotRequest::_internal_mutable_lease() {
  
  if (lease_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Lease>(GetArena());
    lease_ = p;
  }
  return lease_;
}
inline ::bosdyn::api::Lease* UploadWaypointSnapshotRequest::mutable_lease() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.UploadWaypointSnapshotRequest.lease)
  return _internal_mutable_lease();
}
inline void UploadWaypointSnapshotRequest::set_allocated_lease(::bosdyn::api::Lease* lease) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lease_);
  }
  if (lease) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lease)->GetArena();
    if (message_arena != submessage_arena) {
      lease = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lease, submessage_arena);
    }
    
  } else {
    
  }
  lease_ = lease;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.UploadWaypointSnapshotRequest.lease)
}

// -------------------------------------------------------------------

// UploadWaypointSnapshotResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool UploadWaypointSnapshotResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool UploadWaypointSnapshotResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& UploadWaypointSnapshotResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::ResponseHeader*>(
      &::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& UploadWaypointSnapshotResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.UploadWaypointSnapshotResponse.header)
  return _internal_header();
}
inline void UploadWaypointSnapshotResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.UploadWaypointSnapshotResponse.header)
}
inline ::bosdyn::api::ResponseHeader* UploadWaypointSnapshotResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::ResponseHeader* UploadWaypointSnapshotResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.UploadWaypointSnapshotResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* UploadWaypointSnapshotResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::ResponseHeader* UploadWaypointSnapshotResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.UploadWaypointSnapshotResponse.header)
  return _internal_mutable_header();
}
inline void UploadWaypointSnapshotResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.UploadWaypointSnapshotResponse.header)
}

// .bosdyn.api.LeaseUseResult lease_use_result = 2;
inline bool UploadWaypointSnapshotResponse::_internal_has_lease_use_result() const {
  return this != internal_default_instance() && lease_use_result_ != nullptr;
}
inline bool UploadWaypointSnapshotResponse::has_lease_use_result() const {
  return _internal_has_lease_use_result();
}
inline const ::bosdyn::api::LeaseUseResult& UploadWaypointSnapshotResponse::_internal_lease_use_result() const {
  const ::bosdyn::api::LeaseUseResult* p = lease_use_result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::LeaseUseResult*>(
      &::bosdyn::api::_LeaseUseResult_default_instance_);
}
inline const ::bosdyn::api::LeaseUseResult& UploadWaypointSnapshotResponse::lease_use_result() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.UploadWaypointSnapshotResponse.lease_use_result)
  return _internal_lease_use_result();
}
inline void UploadWaypointSnapshotResponse::unsafe_arena_set_allocated_lease_use_result(
    ::bosdyn::api::LeaseUseResult* lease_use_result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lease_use_result_);
  }
  lease_use_result_ = lease_use_result;
  if (lease_use_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.UploadWaypointSnapshotResponse.lease_use_result)
}
inline ::bosdyn::api::LeaseUseResult* UploadWaypointSnapshotResponse::release_lease_use_result() {
  
  ::bosdyn::api::LeaseUseResult* temp = lease_use_result_;
  lease_use_result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::LeaseUseResult* UploadWaypointSnapshotResponse::unsafe_arena_release_lease_use_result() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.UploadWaypointSnapshotResponse.lease_use_result)
  
  ::bosdyn::api::LeaseUseResult* temp = lease_use_result_;
  lease_use_result_ = nullptr;
  return temp;
}
inline ::bosdyn::api::LeaseUseResult* UploadWaypointSnapshotResponse::_internal_mutable_lease_use_result() {
  
  if (lease_use_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::LeaseUseResult>(GetArena());
    lease_use_result_ = p;
  }
  return lease_use_result_;
}
inline ::bosdyn::api::LeaseUseResult* UploadWaypointSnapshotResponse::mutable_lease_use_result() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.UploadWaypointSnapshotResponse.lease_use_result)
  return _internal_mutable_lease_use_result();
}
inline void UploadWaypointSnapshotResponse::set_allocated_lease_use_result(::bosdyn::api::LeaseUseResult* lease_use_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lease_use_result_);
  }
  if (lease_use_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lease_use_result)->GetArena();
    if (message_arena != submessage_arena) {
      lease_use_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lease_use_result, submessage_arena);
    }
    
  } else {
    
  }
  lease_use_result_ = lease_use_result;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.UploadWaypointSnapshotResponse.lease_use_result)
}

// -------------------------------------------------------------------

// UploadEdgeSnapshotRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool UploadEdgeSnapshotRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool UploadEdgeSnapshotRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& UploadEdgeSnapshotRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::RequestHeader*>(
      &::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& UploadEdgeSnapshotRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.UploadEdgeSnapshotRequest.header)
  return _internal_header();
}
inline void UploadEdgeSnapshotRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.UploadEdgeSnapshotRequest.header)
}
inline ::bosdyn::api::RequestHeader* UploadEdgeSnapshotRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::RequestHeader* UploadEdgeSnapshotRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.UploadEdgeSnapshotRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* UploadEdgeSnapshotRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::RequestHeader* UploadEdgeSnapshotRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.UploadEdgeSnapshotRequest.header)
  return _internal_mutable_header();
}
inline void UploadEdgeSnapshotRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.UploadEdgeSnapshotRequest.header)
}

// .bosdyn.api.DataChunk chunk = 4;
inline bool UploadEdgeSnapshotRequest::_internal_has_chunk() const {
  return this != internal_default_instance() && chunk_ != nullptr;
}
inline bool UploadEdgeSnapshotRequest::has_chunk() const {
  return _internal_has_chunk();
}
inline const ::bosdyn::api::DataChunk& UploadEdgeSnapshotRequest::_internal_chunk() const {
  const ::bosdyn::api::DataChunk* p = chunk_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::DataChunk*>(
      &::bosdyn::api::_DataChunk_default_instance_);
}
inline const ::bosdyn::api::DataChunk& UploadEdgeSnapshotRequest::chunk() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.UploadEdgeSnapshotRequest.chunk)
  return _internal_chunk();
}
inline void UploadEdgeSnapshotRequest::unsafe_arena_set_allocated_chunk(
    ::bosdyn::api::DataChunk* chunk) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chunk_);
  }
  chunk_ = chunk;
  if (chunk) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.UploadEdgeSnapshotRequest.chunk)
}
inline ::bosdyn::api::DataChunk* UploadEdgeSnapshotRequest::release_chunk() {
  
  ::bosdyn::api::DataChunk* temp = chunk_;
  chunk_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::DataChunk* UploadEdgeSnapshotRequest::unsafe_arena_release_chunk() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.UploadEdgeSnapshotRequest.chunk)
  
  ::bosdyn::api::DataChunk* temp = chunk_;
  chunk_ = nullptr;
  return temp;
}
inline ::bosdyn::api::DataChunk* UploadEdgeSnapshotRequest::_internal_mutable_chunk() {
  
  if (chunk_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::DataChunk>(GetArena());
    chunk_ = p;
  }
  return chunk_;
}
inline ::bosdyn::api::DataChunk* UploadEdgeSnapshotRequest::mutable_chunk() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.UploadEdgeSnapshotRequest.chunk)
  return _internal_mutable_chunk();
}
inline void UploadEdgeSnapshotRequest::set_allocated_chunk(::bosdyn::api::DataChunk* chunk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(chunk_);
  }
  if (chunk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chunk)->GetArena();
    if (message_arena != submessage_arena) {
      chunk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chunk, submessage_arena);
    }
    
  } else {
    
  }
  chunk_ = chunk;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.UploadEdgeSnapshotRequest.chunk)
}

// .bosdyn.api.Lease lease = 5;
inline bool UploadEdgeSnapshotRequest::_internal_has_lease() const {
  return this != internal_default_instance() && lease_ != nullptr;
}
inline bool UploadEdgeSnapshotRequest::has_lease() const {
  return _internal_has_lease();
}
inline const ::bosdyn::api::Lease& UploadEdgeSnapshotRequest::_internal_lease() const {
  const ::bosdyn::api::Lease* p = lease_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::Lease*>(
      &::bosdyn::api::_Lease_default_instance_);
}
inline const ::bosdyn::api::Lease& UploadEdgeSnapshotRequest::lease() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.UploadEdgeSnapshotRequest.lease)
  return _internal_lease();
}
inline void UploadEdgeSnapshotRequest::unsafe_arena_set_allocated_lease(
    ::bosdyn::api::Lease* lease) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lease_);
  }
  lease_ = lease;
  if (lease) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.UploadEdgeSnapshotRequest.lease)
}
inline ::bosdyn::api::Lease* UploadEdgeSnapshotRequest::release_lease() {
  
  ::bosdyn::api::Lease* temp = lease_;
  lease_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::Lease* UploadEdgeSnapshotRequest::unsafe_arena_release_lease() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.UploadEdgeSnapshotRequest.lease)
  
  ::bosdyn::api::Lease* temp = lease_;
  lease_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Lease* UploadEdgeSnapshotRequest::_internal_mutable_lease() {
  
  if (lease_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Lease>(GetArena());
    lease_ = p;
  }
  return lease_;
}
inline ::bosdyn::api::Lease* UploadEdgeSnapshotRequest::mutable_lease() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.UploadEdgeSnapshotRequest.lease)
  return _internal_mutable_lease();
}
inline void UploadEdgeSnapshotRequest::set_allocated_lease(::bosdyn::api::Lease* lease) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lease_);
  }
  if (lease) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lease)->GetArena();
    if (message_arena != submessage_arena) {
      lease = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lease, submessage_arena);
    }
    
  } else {
    
  }
  lease_ = lease;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.UploadEdgeSnapshotRequest.lease)
}

// -------------------------------------------------------------------

// UploadEdgeSnapshotResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool UploadEdgeSnapshotResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool UploadEdgeSnapshotResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& UploadEdgeSnapshotResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::ResponseHeader*>(
      &::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& UploadEdgeSnapshotResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.UploadEdgeSnapshotResponse.header)
  return _internal_header();
}
inline void UploadEdgeSnapshotResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.UploadEdgeSnapshotResponse.header)
}
inline ::bosdyn::api::ResponseHeader* UploadEdgeSnapshotResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::ResponseHeader* UploadEdgeSnapshotResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.UploadEdgeSnapshotResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* UploadEdgeSnapshotResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::ResponseHeader* UploadEdgeSnapshotResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.UploadEdgeSnapshotResponse.header)
  return _internal_mutable_header();
}
inline void UploadEdgeSnapshotResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.UploadEdgeSnapshotResponse.header)
}

// .bosdyn.api.LeaseUseResult lease_use_result = 2;
inline bool UploadEdgeSnapshotResponse::_internal_has_lease_use_result() const {
  return this != internal_default_instance() && lease_use_result_ != nullptr;
}
inline bool UploadEdgeSnapshotResponse::has_lease_use_result() const {
  return _internal_has_lease_use_result();
}
inline const ::bosdyn::api::LeaseUseResult& UploadEdgeSnapshotResponse::_internal_lease_use_result() const {
  const ::bosdyn::api::LeaseUseResult* p = lease_use_result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::LeaseUseResult*>(
      &::bosdyn::api::_LeaseUseResult_default_instance_);
}
inline const ::bosdyn::api::LeaseUseResult& UploadEdgeSnapshotResponse::lease_use_result() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.UploadEdgeSnapshotResponse.lease_use_result)
  return _internal_lease_use_result();
}
inline void UploadEdgeSnapshotResponse::unsafe_arena_set_allocated_lease_use_result(
    ::bosdyn::api::LeaseUseResult* lease_use_result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lease_use_result_);
  }
  lease_use_result_ = lease_use_result;
  if (lease_use_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.UploadEdgeSnapshotResponse.lease_use_result)
}
inline ::bosdyn::api::LeaseUseResult* UploadEdgeSnapshotResponse::release_lease_use_result() {
  
  ::bosdyn::api::LeaseUseResult* temp = lease_use_result_;
  lease_use_result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::LeaseUseResult* UploadEdgeSnapshotResponse::unsafe_arena_release_lease_use_result() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.UploadEdgeSnapshotResponse.lease_use_result)
  
  ::bosdyn::api::LeaseUseResult* temp = lease_use_result_;
  lease_use_result_ = nullptr;
  return temp;
}
inline ::bosdyn::api::LeaseUseResult* UploadEdgeSnapshotResponse::_internal_mutable_lease_use_result() {
  
  if (lease_use_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::LeaseUseResult>(GetArena());
    lease_use_result_ = p;
  }
  return lease_use_result_;
}
inline ::bosdyn::api::LeaseUseResult* UploadEdgeSnapshotResponse::mutable_lease_use_result() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.UploadEdgeSnapshotResponse.lease_use_result)
  return _internal_mutable_lease_use_result();
}
inline void UploadEdgeSnapshotResponse::set_allocated_lease_use_result(::bosdyn::api::LeaseUseResult* lease_use_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lease_use_result_);
  }
  if (lease_use_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lease_use_result)->GetArena();
    if (message_arena != submessage_arena) {
      lease_use_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lease_use_result, submessage_arena);
    }
    
  } else {
    
  }
  lease_use_result_ = lease_use_result;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.UploadEdgeSnapshotResponse.lease_use_result)
}

// -------------------------------------------------------------------

// DownloadWaypointSnapshotRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool DownloadWaypointSnapshotRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool DownloadWaypointSnapshotRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& DownloadWaypointSnapshotRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::RequestHeader*>(
      &::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& DownloadWaypointSnapshotRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.DownloadWaypointSnapshotRequest.header)
  return _internal_header();
}
inline void DownloadWaypointSnapshotRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.DownloadWaypointSnapshotRequest.header)
}
inline ::bosdyn::api::RequestHeader* DownloadWaypointSnapshotRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::RequestHeader* DownloadWaypointSnapshotRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.DownloadWaypointSnapshotRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* DownloadWaypointSnapshotRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::RequestHeader* DownloadWaypointSnapshotRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.DownloadWaypointSnapshotRequest.header)
  return _internal_mutable_header();
}
inline void DownloadWaypointSnapshotRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.DownloadWaypointSnapshotRequest.header)
}

// string waypoint_snapshot_id = 2;
inline void DownloadWaypointSnapshotRequest::clear_waypoint_snapshot_id() {
  waypoint_snapshot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DownloadWaypointSnapshotRequest::waypoint_snapshot_id() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.DownloadWaypointSnapshotRequest.waypoint_snapshot_id)
  return _internal_waypoint_snapshot_id();
}
inline void DownloadWaypointSnapshotRequest::set_waypoint_snapshot_id(const std::string& value) {
  _internal_set_waypoint_snapshot_id(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.DownloadWaypointSnapshotRequest.waypoint_snapshot_id)
}
inline std::string* DownloadWaypointSnapshotRequest::mutable_waypoint_snapshot_id() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.DownloadWaypointSnapshotRequest.waypoint_snapshot_id)
  return _internal_mutable_waypoint_snapshot_id();
}
inline const std::string& DownloadWaypointSnapshotRequest::_internal_waypoint_snapshot_id() const {
  return waypoint_snapshot_id_.Get();
}
inline void DownloadWaypointSnapshotRequest::_internal_set_waypoint_snapshot_id(const std::string& value) {
  
  waypoint_snapshot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DownloadWaypointSnapshotRequest::set_waypoint_snapshot_id(std::string&& value) {
  
  waypoint_snapshot_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.graph_nav.DownloadWaypointSnapshotRequest.waypoint_snapshot_id)
}
inline void DownloadWaypointSnapshotRequest::set_waypoint_snapshot_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  waypoint_snapshot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.graph_nav.DownloadWaypointSnapshotRequest.waypoint_snapshot_id)
}
inline void DownloadWaypointSnapshotRequest::set_waypoint_snapshot_id(const char* value,
    size_t size) {
  
  waypoint_snapshot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.graph_nav.DownloadWaypointSnapshotRequest.waypoint_snapshot_id)
}
inline std::string* DownloadWaypointSnapshotRequest::_internal_mutable_waypoint_snapshot_id() {
  
  return waypoint_snapshot_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DownloadWaypointSnapshotRequest::release_waypoint_snapshot_id() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.DownloadWaypointSnapshotRequest.waypoint_snapshot_id)
  return waypoint_snapshot_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DownloadWaypointSnapshotRequest::set_allocated_waypoint_snapshot_id(std::string* waypoint_snapshot_id) {
  if (waypoint_snapshot_id != nullptr) {
    
  } else {
    
  }
  waypoint_snapshot_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), waypoint_snapshot_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.DownloadWaypointSnapshotRequest.waypoint_snapshot_id)
}

// bool download_images = 3;
inline void DownloadWaypointSnapshotRequest::clear_download_images() {
  download_images_ = false;
}
inline bool DownloadWaypointSnapshotRequest::_internal_download_images() const {
  return download_images_;
}
inline bool DownloadWaypointSnapshotRequest::download_images() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.DownloadWaypointSnapshotRequest.download_images)
  return _internal_download_images();
}
inline void DownloadWaypointSnapshotRequest::_internal_set_download_images(bool value) {
  
  download_images_ = value;
}
inline void DownloadWaypointSnapshotRequest::set_download_images(bool value) {
  _internal_set_download_images(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.DownloadWaypointSnapshotRequest.download_images)
}

// bool compress_point_cloud = 4;
inline void DownloadWaypointSnapshotRequest::clear_compress_point_cloud() {
  compress_point_cloud_ = false;
}
inline bool DownloadWaypointSnapshotRequest::_internal_compress_point_cloud() const {
  return compress_point_cloud_;
}
inline bool DownloadWaypointSnapshotRequest::compress_point_cloud() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.DownloadWaypointSnapshotRequest.compress_point_cloud)
  return _internal_compress_point_cloud();
}
inline void DownloadWaypointSnapshotRequest::_internal_set_compress_point_cloud(bool value) {
  
  compress_point_cloud_ = value;
}
inline void DownloadWaypointSnapshotRequest::set_compress_point_cloud(bool value) {
  _internal_set_compress_point_cloud(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.DownloadWaypointSnapshotRequest.compress_point_cloud)
}

// -------------------------------------------------------------------

// DownloadWaypointSnapshotResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool DownloadWaypointSnapshotResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool DownloadWaypointSnapshotResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& DownloadWaypointSnapshotResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::ResponseHeader*>(
      &::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& DownloadWaypointSnapshotResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.DownloadWaypointSnapshotResponse.header)
  return _internal_header();
}
inline void DownloadWaypointSnapshotResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.DownloadWaypointSnapshotResponse.header)
}
inline ::bosdyn::api::ResponseHeader* DownloadWaypointSnapshotResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::ResponseHeader* DownloadWaypointSnapshotResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.DownloadWaypointSnapshotResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* DownloadWaypointSnapshotResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::ResponseHeader* DownloadWaypointSnapshotResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.DownloadWaypointSnapshotResponse.header)
  return _internal_mutable_header();
}
inline void DownloadWaypointSnapshotResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.DownloadWaypointSnapshotResponse.header)
}

// .bosdyn.api.graph_nav.DownloadWaypointSnapshotResponse.Status status = 2;
inline void DownloadWaypointSnapshotResponse::clear_status() {
  status_ = 0;
}
inline ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse_Status DownloadWaypointSnapshotResponse::_internal_status() const {
  return static_cast< ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse_Status >(status_);
}
inline ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse_Status DownloadWaypointSnapshotResponse::status() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.DownloadWaypointSnapshotResponse.status)
  return _internal_status();
}
inline void DownloadWaypointSnapshotResponse::_internal_set_status(::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse_Status value) {
  
  status_ = value;
}
inline void DownloadWaypointSnapshotResponse::set_status(::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.DownloadWaypointSnapshotResponse.status)
}

// string waypoint_snapshot_id = 4;
inline void DownloadWaypointSnapshotResponse::clear_waypoint_snapshot_id() {
  waypoint_snapshot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DownloadWaypointSnapshotResponse::waypoint_snapshot_id() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.DownloadWaypointSnapshotResponse.waypoint_snapshot_id)
  return _internal_waypoint_snapshot_id();
}
inline void DownloadWaypointSnapshotResponse::set_waypoint_snapshot_id(const std::string& value) {
  _internal_set_waypoint_snapshot_id(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.DownloadWaypointSnapshotResponse.waypoint_snapshot_id)
}
inline std::string* DownloadWaypointSnapshotResponse::mutable_waypoint_snapshot_id() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.DownloadWaypointSnapshotResponse.waypoint_snapshot_id)
  return _internal_mutable_waypoint_snapshot_id();
}
inline const std::string& DownloadWaypointSnapshotResponse::_internal_waypoint_snapshot_id() const {
  return waypoint_snapshot_id_.Get();
}
inline void DownloadWaypointSnapshotResponse::_internal_set_waypoint_snapshot_id(const std::string& value) {
  
  waypoint_snapshot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DownloadWaypointSnapshotResponse::set_waypoint_snapshot_id(std::string&& value) {
  
  waypoint_snapshot_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.graph_nav.DownloadWaypointSnapshotResponse.waypoint_snapshot_id)
}
inline void DownloadWaypointSnapshotResponse::set_waypoint_snapshot_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  waypoint_snapshot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.graph_nav.DownloadWaypointSnapshotResponse.waypoint_snapshot_id)
}
inline void DownloadWaypointSnapshotResponse::set_waypoint_snapshot_id(const char* value,
    size_t size) {
  
  waypoint_snapshot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.graph_nav.DownloadWaypointSnapshotResponse.waypoint_snapshot_id)
}
inline std::string* DownloadWaypointSnapshotResponse::_internal_mutable_waypoint_snapshot_id() {
  
  return waypoint_snapshot_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DownloadWaypointSnapshotResponse::release_waypoint_snapshot_id() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.DownloadWaypointSnapshotResponse.waypoint_snapshot_id)
  return waypoint_snapshot_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DownloadWaypointSnapshotResponse::set_allocated_waypoint_snapshot_id(std::string* waypoint_snapshot_id) {
  if (waypoint_snapshot_id != nullptr) {
    
  } else {
    
  }
  waypoint_snapshot_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), waypoint_snapshot_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.DownloadWaypointSnapshotResponse.waypoint_snapshot_id)
}

// .bosdyn.api.DataChunk chunk = 5;
inline bool DownloadWaypointSnapshotResponse::_internal_has_chunk() const {
  return this != internal_default_instance() && chunk_ != nullptr;
}
inline bool DownloadWaypointSnapshotResponse::has_chunk() const {
  return _internal_has_chunk();
}
inline const ::bosdyn::api::DataChunk& DownloadWaypointSnapshotResponse::_internal_chunk() const {
  const ::bosdyn::api::DataChunk* p = chunk_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::DataChunk*>(
      &::bosdyn::api::_DataChunk_default_instance_);
}
inline const ::bosdyn::api::DataChunk& DownloadWaypointSnapshotResponse::chunk() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.DownloadWaypointSnapshotResponse.chunk)
  return _internal_chunk();
}
inline void DownloadWaypointSnapshotResponse::unsafe_arena_set_allocated_chunk(
    ::bosdyn::api::DataChunk* chunk) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chunk_);
  }
  chunk_ = chunk;
  if (chunk) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.DownloadWaypointSnapshotResponse.chunk)
}
inline ::bosdyn::api::DataChunk* DownloadWaypointSnapshotResponse::release_chunk() {
  
  ::bosdyn::api::DataChunk* temp = chunk_;
  chunk_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::DataChunk* DownloadWaypointSnapshotResponse::unsafe_arena_release_chunk() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.DownloadWaypointSnapshotResponse.chunk)
  
  ::bosdyn::api::DataChunk* temp = chunk_;
  chunk_ = nullptr;
  return temp;
}
inline ::bosdyn::api::DataChunk* DownloadWaypointSnapshotResponse::_internal_mutable_chunk() {
  
  if (chunk_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::DataChunk>(GetArena());
    chunk_ = p;
  }
  return chunk_;
}
inline ::bosdyn::api::DataChunk* DownloadWaypointSnapshotResponse::mutable_chunk() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.DownloadWaypointSnapshotResponse.chunk)
  return _internal_mutable_chunk();
}
inline void DownloadWaypointSnapshotResponse::set_allocated_chunk(::bosdyn::api::DataChunk* chunk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(chunk_);
  }
  if (chunk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chunk)->GetArena();
    if (message_arena != submessage_arena) {
      chunk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chunk, submessage_arena);
    }
    
  } else {
    
  }
  chunk_ = chunk;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.DownloadWaypointSnapshotResponse.chunk)
}

// -------------------------------------------------------------------

// DownloadEdgeSnapshotRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool DownloadEdgeSnapshotRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool DownloadEdgeSnapshotRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& DownloadEdgeSnapshotRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::RequestHeader*>(
      &::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& DownloadEdgeSnapshotRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.DownloadEdgeSnapshotRequest.header)
  return _internal_header();
}
inline void DownloadEdgeSnapshotRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.DownloadEdgeSnapshotRequest.header)
}
inline ::bosdyn::api::RequestHeader* DownloadEdgeSnapshotRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::RequestHeader* DownloadEdgeSnapshotRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.DownloadEdgeSnapshotRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* DownloadEdgeSnapshotRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::RequestHeader* DownloadEdgeSnapshotRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.DownloadEdgeSnapshotRequest.header)
  return _internal_mutable_header();
}
inline void DownloadEdgeSnapshotRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.DownloadEdgeSnapshotRequest.header)
}

// string edge_snapshot_id = 2;
inline void DownloadEdgeSnapshotRequest::clear_edge_snapshot_id() {
  edge_snapshot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DownloadEdgeSnapshotRequest::edge_snapshot_id() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.DownloadEdgeSnapshotRequest.edge_snapshot_id)
  return _internal_edge_snapshot_id();
}
inline void DownloadEdgeSnapshotRequest::set_edge_snapshot_id(const std::string& value) {
  _internal_set_edge_snapshot_id(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.DownloadEdgeSnapshotRequest.edge_snapshot_id)
}
inline std::string* DownloadEdgeSnapshotRequest::mutable_edge_snapshot_id() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.DownloadEdgeSnapshotRequest.edge_snapshot_id)
  return _internal_mutable_edge_snapshot_id();
}
inline const std::string& DownloadEdgeSnapshotRequest::_internal_edge_snapshot_id() const {
  return edge_snapshot_id_.Get();
}
inline void DownloadEdgeSnapshotRequest::_internal_set_edge_snapshot_id(const std::string& value) {
  
  edge_snapshot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DownloadEdgeSnapshotRequest::set_edge_snapshot_id(std::string&& value) {
  
  edge_snapshot_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.graph_nav.DownloadEdgeSnapshotRequest.edge_snapshot_id)
}
inline void DownloadEdgeSnapshotRequest::set_edge_snapshot_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  edge_snapshot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.graph_nav.DownloadEdgeSnapshotRequest.edge_snapshot_id)
}
inline void DownloadEdgeSnapshotRequest::set_edge_snapshot_id(const char* value,
    size_t size) {
  
  edge_snapshot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.graph_nav.DownloadEdgeSnapshotRequest.edge_snapshot_id)
}
inline std::string* DownloadEdgeSnapshotRequest::_internal_mutable_edge_snapshot_id() {
  
  return edge_snapshot_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DownloadEdgeSnapshotRequest::release_edge_snapshot_id() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.DownloadEdgeSnapshotRequest.edge_snapshot_id)
  return edge_snapshot_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DownloadEdgeSnapshotRequest::set_allocated_edge_snapshot_id(std::string* edge_snapshot_id) {
  if (edge_snapshot_id != nullptr) {
    
  } else {
    
  }
  edge_snapshot_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), edge_snapshot_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.DownloadEdgeSnapshotRequest.edge_snapshot_id)
}

// -------------------------------------------------------------------

// DownloadEdgeSnapshotResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool DownloadEdgeSnapshotResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool DownloadEdgeSnapshotResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& DownloadEdgeSnapshotResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::ResponseHeader*>(
      &::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& DownloadEdgeSnapshotResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.DownloadEdgeSnapshotResponse.header)
  return _internal_header();
}
inline void DownloadEdgeSnapshotResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.DownloadEdgeSnapshotResponse.header)
}
inline ::bosdyn::api::ResponseHeader* DownloadEdgeSnapshotResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::ResponseHeader* DownloadEdgeSnapshotResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.DownloadEdgeSnapshotResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* DownloadEdgeSnapshotResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::ResponseHeader* DownloadEdgeSnapshotResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.DownloadEdgeSnapshotResponse.header)
  return _internal_mutable_header();
}
inline void DownloadEdgeSnapshotResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.DownloadEdgeSnapshotResponse.header)
}

// .bosdyn.api.graph_nav.DownloadEdgeSnapshotResponse.Status status = 2;
inline void DownloadEdgeSnapshotResponse::clear_status() {
  status_ = 0;
}
inline ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse_Status DownloadEdgeSnapshotResponse::_internal_status() const {
  return static_cast< ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse_Status >(status_);
}
inline ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse_Status DownloadEdgeSnapshotResponse::status() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.DownloadEdgeSnapshotResponse.status)
  return _internal_status();
}
inline void DownloadEdgeSnapshotResponse::_internal_set_status(::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse_Status value) {
  
  status_ = value;
}
inline void DownloadEdgeSnapshotResponse::set_status(::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.DownloadEdgeSnapshotResponse.status)
}

// string edge_snapshot_id = 4;
inline void DownloadEdgeSnapshotResponse::clear_edge_snapshot_id() {
  edge_snapshot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DownloadEdgeSnapshotResponse::edge_snapshot_id() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.DownloadEdgeSnapshotResponse.edge_snapshot_id)
  return _internal_edge_snapshot_id();
}
inline void DownloadEdgeSnapshotResponse::set_edge_snapshot_id(const std::string& value) {
  _internal_set_edge_snapshot_id(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.DownloadEdgeSnapshotResponse.edge_snapshot_id)
}
inline std::string* DownloadEdgeSnapshotResponse::mutable_edge_snapshot_id() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.DownloadEdgeSnapshotResponse.edge_snapshot_id)
  return _internal_mutable_edge_snapshot_id();
}
inline const std::string& DownloadEdgeSnapshotResponse::_internal_edge_snapshot_id() const {
  return edge_snapshot_id_.Get();
}
inline void DownloadEdgeSnapshotResponse::_internal_set_edge_snapshot_id(const std::string& value) {
  
  edge_snapshot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DownloadEdgeSnapshotResponse::set_edge_snapshot_id(std::string&& value) {
  
  edge_snapshot_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.graph_nav.DownloadEdgeSnapshotResponse.edge_snapshot_id)
}
inline void DownloadEdgeSnapshotResponse::set_edge_snapshot_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  edge_snapshot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.graph_nav.DownloadEdgeSnapshotResponse.edge_snapshot_id)
}
inline void DownloadEdgeSnapshotResponse::set_edge_snapshot_id(const char* value,
    size_t size) {
  
  edge_snapshot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.graph_nav.DownloadEdgeSnapshotResponse.edge_snapshot_id)
}
inline std::string* DownloadEdgeSnapshotResponse::_internal_mutable_edge_snapshot_id() {
  
  return edge_snapshot_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DownloadEdgeSnapshotResponse::release_edge_snapshot_id() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.DownloadEdgeSnapshotResponse.edge_snapshot_id)
  return edge_snapshot_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DownloadEdgeSnapshotResponse::set_allocated_edge_snapshot_id(std::string* edge_snapshot_id) {
  if (edge_snapshot_id != nullptr) {
    
  } else {
    
  }
  edge_snapshot_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), edge_snapshot_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.DownloadEdgeSnapshotResponse.edge_snapshot_id)
}

// .bosdyn.api.DataChunk chunk = 5;
inline bool DownloadEdgeSnapshotResponse::_internal_has_chunk() const {
  return this != internal_default_instance() && chunk_ != nullptr;
}
inline bool DownloadEdgeSnapshotResponse::has_chunk() const {
  return _internal_has_chunk();
}
inline const ::bosdyn::api::DataChunk& DownloadEdgeSnapshotResponse::_internal_chunk() const {
  const ::bosdyn::api::DataChunk* p = chunk_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::DataChunk*>(
      &::bosdyn::api::_DataChunk_default_instance_);
}
inline const ::bosdyn::api::DataChunk& DownloadEdgeSnapshotResponse::chunk() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.DownloadEdgeSnapshotResponse.chunk)
  return _internal_chunk();
}
inline void DownloadEdgeSnapshotResponse::unsafe_arena_set_allocated_chunk(
    ::bosdyn::api::DataChunk* chunk) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chunk_);
  }
  chunk_ = chunk;
  if (chunk) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.DownloadEdgeSnapshotResponse.chunk)
}
inline ::bosdyn::api::DataChunk* DownloadEdgeSnapshotResponse::release_chunk() {
  
  ::bosdyn::api::DataChunk* temp = chunk_;
  chunk_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::DataChunk* DownloadEdgeSnapshotResponse::unsafe_arena_release_chunk() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.DownloadEdgeSnapshotResponse.chunk)
  
  ::bosdyn::api::DataChunk* temp = chunk_;
  chunk_ = nullptr;
  return temp;
}
inline ::bosdyn::api::DataChunk* DownloadEdgeSnapshotResponse::_internal_mutable_chunk() {
  
  if (chunk_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::DataChunk>(GetArena());
    chunk_ = p;
  }
  return chunk_;
}
inline ::bosdyn::api::DataChunk* DownloadEdgeSnapshotResponse::mutable_chunk() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.DownloadEdgeSnapshotResponse.chunk)
  return _internal_mutable_chunk();
}
inline void DownloadEdgeSnapshotResponse::set_allocated_chunk(::bosdyn::api::DataChunk* chunk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(chunk_);
  }
  if (chunk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chunk)->GetArena();
    if (message_arena != submessage_arena) {
      chunk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chunk, submessage_arena);
    }
    
  } else {
    
  }
  chunk_ = chunk;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.DownloadEdgeSnapshotResponse.chunk)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace graph_nav
}  // namespace api
}  // namespace bosdyn

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bosdyn::api::graph_nav::SetLocalizationRequest_FiducialInit> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::graph_nav::SetLocalizationRequest_FiducialInit>() {
  return ::bosdyn::api::graph_nav::SetLocalizationRequest_FiducialInit_descriptor();
}
template <> struct is_proto_enum< ::bosdyn::api::graph_nav::SetLocalizationResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::graph_nav::SetLocalizationResponse_Status>() {
  return ::bosdyn::api::graph_nav::SetLocalizationResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::bosdyn::api::graph_nav::NavigateToResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::graph_nav::NavigateToResponse_Status>() {
  return ::bosdyn::api::graph_nav::NavigateToResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::bosdyn::api::graph_nav::NavigateRouteResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::graph_nav::NavigateRouteResponse_Status>() {
  return ::bosdyn::api::graph_nav::NavigateRouteResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::bosdyn::api::graph_nav::NavigationFeedbackResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::graph_nav::NavigationFeedbackResponse_Status>() {
  return ::bosdyn::api::graph_nav::NavigationFeedbackResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::bosdyn::api::graph_nav::UploadGraphResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::graph_nav::UploadGraphResponse_Status>() {
  return ::bosdyn::api::graph_nav::UploadGraphResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse_Status>() {
  return ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse_Status>() {
  return ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse_Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto
