// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bosdyn/api/graph_nav/graph_nav_service.proto
// Original file comments:
// Copyright (c) 2020 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).
//
#ifndef GRPC_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_5fservice_2eproto__INCLUDED
#define GRPC_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_5fservice_2eproto__INCLUDED

#include "bosdyn/api/graph_nav/graph_nav_service.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace bosdyn {
namespace api {
namespace graph_nav {

// The GraphNav service service is a place-based localization and locomotion service. The service can
// be used to get/set the localization, upload and download the current graph nav maps, and send navigation
// requests to move around the map.
class GraphNavService final {
 public:
  static constexpr char const* service_full_name() {
    return "bosdyn.api.graph_nav.GraphNavService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Trigger a manual localization. Typically done to provide the initial localization.
    virtual ::grpc::Status SetLocalization(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::SetLocalizationRequest& request, ::bosdyn::api::graph_nav::SetLocalizationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::SetLocalizationResponse>> AsyncSetLocalization(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::SetLocalizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::SetLocalizationResponse>>(AsyncSetLocalizationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::SetLocalizationResponse>> PrepareAsyncSetLocalization(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::SetLocalizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::SetLocalizationResponse>>(PrepareAsyncSetLocalizationRaw(context, request, cq));
    }
    // Tell GraphNav to navigate/traverse a given route.
    virtual ::grpc::Status NavigateRoute(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigateRouteRequest& request, ::bosdyn::api::graph_nav::NavigateRouteResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::NavigateRouteResponse>> AsyncNavigateRoute(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigateRouteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::NavigateRouteResponse>>(AsyncNavigateRouteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::NavigateRouteResponse>> PrepareAsyncNavigateRoute(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigateRouteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::NavigateRouteResponse>>(PrepareAsyncNavigateRouteRaw(context, request, cq));
    }
    // Tell GraphNav to navigate to a waypoint along a route it chooses.
    virtual ::grpc::Status NavigateTo(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigateToRequest& request, ::bosdyn::api::graph_nav::NavigateToResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::NavigateToResponse>> AsyncNavigateTo(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigateToRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::NavigateToResponse>>(AsyncNavigateToRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::NavigateToResponse>> PrepareAsyncNavigateTo(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigateToRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::NavigateToResponse>>(PrepareAsyncNavigateToRaw(context, request, cq));
    }
    // Get feedback on active navigation command.
    virtual ::grpc::Status NavigationFeedback(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigationFeedbackRequest& request, ::bosdyn::api::graph_nav::NavigationFeedbackResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::NavigationFeedbackResponse>> AsyncNavigationFeedback(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigationFeedbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::NavigationFeedbackResponse>>(AsyncNavigationFeedbackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::NavigationFeedbackResponse>> PrepareAsyncNavigationFeedback(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigationFeedbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::NavigationFeedbackResponse>>(PrepareAsyncNavigationFeedbackRaw(context, request, cq));
    }
    // Get the localization status and data.
    virtual ::grpc::Status GetLocalizationState(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::GetLocalizationStateRequest& request, ::bosdyn::api::graph_nav::GetLocalizationStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::GetLocalizationStateResponse>> AsyncGetLocalizationState(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::GetLocalizationStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::GetLocalizationStateResponse>>(AsyncGetLocalizationStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::GetLocalizationStateResponse>> PrepareAsyncGetLocalizationState(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::GetLocalizationStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::GetLocalizationStateResponse>>(PrepareAsyncGetLocalizationStateRaw(context, request, cq));
    }
    // Clears the local graph structure. Also erases any snapshots currently in RAM.
    virtual ::grpc::Status ClearGraph(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::ClearGraphRequest& request, ::bosdyn::api::graph_nav::ClearGraphResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::ClearGraphResponse>> AsyncClearGraph(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::ClearGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::ClearGraphResponse>>(AsyncClearGraphRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::ClearGraphResponse>> PrepareAsyncClearGraph(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::ClearGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::ClearGraphResponse>>(PrepareAsyncClearGraphRaw(context, request, cq));
    }
    // Download the graph structure.
    virtual ::grpc::Status DownloadGraph(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::DownloadGraphRequest& request, ::bosdyn::api::graph_nav::DownloadGraphResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::DownloadGraphResponse>> AsyncDownloadGraph(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::DownloadGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::DownloadGraphResponse>>(AsyncDownloadGraphRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::DownloadGraphResponse>> PrepareAsyncDownloadGraph(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::DownloadGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::DownloadGraphResponse>>(PrepareAsyncDownloadGraphRaw(context, request, cq));
    }
    // Upload the full list of waypoint IDs, graph topology and other small info.
    virtual ::grpc::Status UploadGraph(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::UploadGraphRequest& request, ::bosdyn::api::graph_nav::UploadGraphResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::UploadGraphResponse>> AsyncUploadGraph(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::UploadGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::UploadGraphResponse>>(AsyncUploadGraphRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::UploadGraphResponse>> PrepareAsyncUploadGraph(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::UploadGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::UploadGraphResponse>>(PrepareAsyncUploadGraphRaw(context, request, cq));
    }
    // Uploads large waypoint snapshot as a stream for a particular waypoint.
    std::unique_ptr< ::grpc::ClientWriterInterface< ::bosdyn::api::graph_nav::UploadWaypointSnapshotRequest>> UploadWaypointSnapshot(::grpc::ClientContext* context, ::bosdyn::api::graph_nav::UploadWaypointSnapshotResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::bosdyn::api::graph_nav::UploadWaypointSnapshotRequest>>(UploadWaypointSnapshotRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::bosdyn::api::graph_nav::UploadWaypointSnapshotRequest>> AsyncUploadWaypointSnapshot(::grpc::ClientContext* context, ::bosdyn::api::graph_nav::UploadWaypointSnapshotResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::bosdyn::api::graph_nav::UploadWaypointSnapshotRequest>>(AsyncUploadWaypointSnapshotRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::bosdyn::api::graph_nav::UploadWaypointSnapshotRequest>> PrepareAsyncUploadWaypointSnapshot(::grpc::ClientContext* context, ::bosdyn::api::graph_nav::UploadWaypointSnapshotResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::bosdyn::api::graph_nav::UploadWaypointSnapshotRequest>>(PrepareAsyncUploadWaypointSnapshotRaw(context, response, cq));
    }
    // Uploads large edge snapshot as a stream for a particular edge.
    std::unique_ptr< ::grpc::ClientWriterInterface< ::bosdyn::api::graph_nav::UploadEdgeSnapshotRequest>> UploadEdgeSnapshot(::grpc::ClientContext* context, ::bosdyn::api::graph_nav::UploadEdgeSnapshotResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::bosdyn::api::graph_nav::UploadEdgeSnapshotRequest>>(UploadEdgeSnapshotRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::bosdyn::api::graph_nav::UploadEdgeSnapshotRequest>> AsyncUploadEdgeSnapshot(::grpc::ClientContext* context, ::bosdyn::api::graph_nav::UploadEdgeSnapshotResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::bosdyn::api::graph_nav::UploadEdgeSnapshotRequest>>(AsyncUploadEdgeSnapshotRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::bosdyn::api::graph_nav::UploadEdgeSnapshotRequest>> PrepareAsyncUploadEdgeSnapshot(::grpc::ClientContext* context, ::bosdyn::api::graph_nav::UploadEdgeSnapshotResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::bosdyn::api::graph_nav::UploadEdgeSnapshotRequest>>(PrepareAsyncUploadEdgeSnapshotRaw(context, response, cq));
    }
    // Download waypoint data from the server. If the snapshot exists in disk cache, it will be loaded.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse>> DownloadWaypointSnapshot(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::DownloadWaypointSnapshotRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse>>(DownloadWaypointSnapshotRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse>> AsyncDownloadWaypointSnapshot(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::DownloadWaypointSnapshotRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse>>(AsyncDownloadWaypointSnapshotRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse>> PrepareAsyncDownloadWaypointSnapshot(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::DownloadWaypointSnapshotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse>>(PrepareAsyncDownloadWaypointSnapshotRaw(context, request, cq));
    }
    // Download edge data from the server. If the snapshot exists in disk cache, it will be loaded.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse>> DownloadEdgeSnapshot(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::DownloadEdgeSnapshotRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse>>(DownloadEdgeSnapshotRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse>> AsyncDownloadEdgeSnapshot(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::DownloadEdgeSnapshotRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse>>(AsyncDownloadEdgeSnapshotRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse>> PrepareAsyncDownloadEdgeSnapshot(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::DownloadEdgeSnapshotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse>>(PrepareAsyncDownloadEdgeSnapshotRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Trigger a manual localization. Typically done to provide the initial localization.
      virtual void SetLocalization(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::SetLocalizationRequest* request, ::bosdyn::api::graph_nav::SetLocalizationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetLocalization(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::SetLocalizationResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetLocalization(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::SetLocalizationRequest* request, ::bosdyn::api::graph_nav::SetLocalizationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetLocalization(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::SetLocalizationRequest* request, ::bosdyn::api::graph_nav::SetLocalizationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetLocalization(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::SetLocalizationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetLocalization(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::SetLocalizationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Tell GraphNav to navigate/traverse a given route.
      virtual void NavigateRoute(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigateRouteRequest* request, ::bosdyn::api::graph_nav::NavigateRouteResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NavigateRoute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::NavigateRouteResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void NavigateRoute(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigateRouteRequest* request, ::bosdyn::api::graph_nav::NavigateRouteResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void NavigateRoute(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigateRouteRequest* request, ::bosdyn::api::graph_nav::NavigateRouteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void NavigateRoute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::NavigateRouteResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void NavigateRoute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::NavigateRouteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Tell GraphNav to navigate to a waypoint along a route it chooses.
      virtual void NavigateTo(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigateToRequest* request, ::bosdyn::api::graph_nav::NavigateToResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NavigateTo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::NavigateToResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void NavigateTo(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigateToRequest* request, ::bosdyn::api::graph_nav::NavigateToResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void NavigateTo(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigateToRequest* request, ::bosdyn::api::graph_nav::NavigateToResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void NavigateTo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::NavigateToResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void NavigateTo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::NavigateToResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Get feedback on active navigation command.
      virtual void NavigationFeedback(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigationFeedbackRequest* request, ::bosdyn::api::graph_nav::NavigationFeedbackResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NavigationFeedback(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::NavigationFeedbackResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void NavigationFeedback(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigationFeedbackRequest* request, ::bosdyn::api::graph_nav::NavigationFeedbackResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void NavigationFeedback(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigationFeedbackRequest* request, ::bosdyn::api::graph_nav::NavigationFeedbackResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void NavigationFeedback(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::NavigationFeedbackResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void NavigationFeedback(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::NavigationFeedbackResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Get the localization status and data.
      virtual void GetLocalizationState(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::GetLocalizationStateRequest* request, ::bosdyn::api::graph_nav::GetLocalizationStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetLocalizationState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::GetLocalizationStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetLocalizationState(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::GetLocalizationStateRequest* request, ::bosdyn::api::graph_nav::GetLocalizationStateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetLocalizationState(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::GetLocalizationStateRequest* request, ::bosdyn::api::graph_nav::GetLocalizationStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetLocalizationState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::GetLocalizationStateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetLocalizationState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::GetLocalizationStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Clears the local graph structure. Also erases any snapshots currently in RAM.
      virtual void ClearGraph(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::ClearGraphRequest* request, ::bosdyn::api::graph_nav::ClearGraphResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ClearGraph(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::ClearGraphResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ClearGraph(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::ClearGraphRequest* request, ::bosdyn::api::graph_nav::ClearGraphResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ClearGraph(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::ClearGraphRequest* request, ::bosdyn::api::graph_nav::ClearGraphResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ClearGraph(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::ClearGraphResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ClearGraph(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::ClearGraphResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Download the graph structure.
      virtual void DownloadGraph(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::DownloadGraphRequest* request, ::bosdyn::api::graph_nav::DownloadGraphResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DownloadGraph(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::DownloadGraphResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DownloadGraph(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::DownloadGraphRequest* request, ::bosdyn::api::graph_nav::DownloadGraphResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DownloadGraph(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::DownloadGraphRequest* request, ::bosdyn::api::graph_nav::DownloadGraphResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DownloadGraph(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::DownloadGraphResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DownloadGraph(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::DownloadGraphResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Upload the full list of waypoint IDs, graph topology and other small info.
      virtual void UploadGraph(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::UploadGraphRequest* request, ::bosdyn::api::graph_nav::UploadGraphResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UploadGraph(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::UploadGraphResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UploadGraph(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::UploadGraphRequest* request, ::bosdyn::api::graph_nav::UploadGraphResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UploadGraph(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::UploadGraphRequest* request, ::bosdyn::api::graph_nav::UploadGraphResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UploadGraph(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::UploadGraphResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UploadGraph(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::UploadGraphResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Uploads large waypoint snapshot as a stream for a particular waypoint.
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UploadWaypointSnapshot(::grpc::ClientContext* context, ::bosdyn::api::graph_nav::UploadWaypointSnapshotResponse* response, ::grpc::ClientWriteReactor< ::bosdyn::api::graph_nav::UploadWaypointSnapshotRequest>* reactor) = 0;
      #else
      virtual void UploadWaypointSnapshot(::grpc::ClientContext* context, ::bosdyn::api::graph_nav::UploadWaypointSnapshotResponse* response, ::grpc::experimental::ClientWriteReactor< ::bosdyn::api::graph_nav::UploadWaypointSnapshotRequest>* reactor) = 0;
      #endif
      // Uploads large edge snapshot as a stream for a particular edge.
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UploadEdgeSnapshot(::grpc::ClientContext* context, ::bosdyn::api::graph_nav::UploadEdgeSnapshotResponse* response, ::grpc::ClientWriteReactor< ::bosdyn::api::graph_nav::UploadEdgeSnapshotRequest>* reactor) = 0;
      #else
      virtual void UploadEdgeSnapshot(::grpc::ClientContext* context, ::bosdyn::api::graph_nav::UploadEdgeSnapshotResponse* response, ::grpc::experimental::ClientWriteReactor< ::bosdyn::api::graph_nav::UploadEdgeSnapshotRequest>* reactor) = 0;
      #endif
      // Download waypoint data from the server. If the snapshot exists in disk cache, it will be loaded.
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DownloadWaypointSnapshot(::grpc::ClientContext* context, ::bosdyn::api::graph_nav::DownloadWaypointSnapshotRequest* request, ::grpc::ClientReadReactor< ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse>* reactor) = 0;
      #else
      virtual void DownloadWaypointSnapshot(::grpc::ClientContext* context, ::bosdyn::api::graph_nav::DownloadWaypointSnapshotRequest* request, ::grpc::experimental::ClientReadReactor< ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse>* reactor) = 0;
      #endif
      // Download edge data from the server. If the snapshot exists in disk cache, it will be loaded.
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DownloadEdgeSnapshot(::grpc::ClientContext* context, ::bosdyn::api::graph_nav::DownloadEdgeSnapshotRequest* request, ::grpc::ClientReadReactor< ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse>* reactor) = 0;
      #else
      virtual void DownloadEdgeSnapshot(::grpc::ClientContext* context, ::bosdyn::api::graph_nav::DownloadEdgeSnapshotRequest* request, ::grpc::experimental::ClientReadReactor< ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::SetLocalizationResponse>* AsyncSetLocalizationRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::SetLocalizationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::SetLocalizationResponse>* PrepareAsyncSetLocalizationRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::SetLocalizationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::NavigateRouteResponse>* AsyncNavigateRouteRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigateRouteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::NavigateRouteResponse>* PrepareAsyncNavigateRouteRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigateRouteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::NavigateToResponse>* AsyncNavigateToRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigateToRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::NavigateToResponse>* PrepareAsyncNavigateToRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigateToRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::NavigationFeedbackResponse>* AsyncNavigationFeedbackRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigationFeedbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::NavigationFeedbackResponse>* PrepareAsyncNavigationFeedbackRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigationFeedbackRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::GetLocalizationStateResponse>* AsyncGetLocalizationStateRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::GetLocalizationStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::GetLocalizationStateResponse>* PrepareAsyncGetLocalizationStateRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::GetLocalizationStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::ClearGraphResponse>* AsyncClearGraphRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::ClearGraphRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::ClearGraphResponse>* PrepareAsyncClearGraphRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::ClearGraphRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::DownloadGraphResponse>* AsyncDownloadGraphRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::DownloadGraphRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::DownloadGraphResponse>* PrepareAsyncDownloadGraphRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::DownloadGraphRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::UploadGraphResponse>* AsyncUploadGraphRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::UploadGraphRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::graph_nav::UploadGraphResponse>* PrepareAsyncUploadGraphRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::UploadGraphRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::bosdyn::api::graph_nav::UploadWaypointSnapshotRequest>* UploadWaypointSnapshotRaw(::grpc::ClientContext* context, ::bosdyn::api::graph_nav::UploadWaypointSnapshotResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::bosdyn::api::graph_nav::UploadWaypointSnapshotRequest>* AsyncUploadWaypointSnapshotRaw(::grpc::ClientContext* context, ::bosdyn::api::graph_nav::UploadWaypointSnapshotResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::bosdyn::api::graph_nav::UploadWaypointSnapshotRequest>* PrepareAsyncUploadWaypointSnapshotRaw(::grpc::ClientContext* context, ::bosdyn::api::graph_nav::UploadWaypointSnapshotResponse* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::bosdyn::api::graph_nav::UploadEdgeSnapshotRequest>* UploadEdgeSnapshotRaw(::grpc::ClientContext* context, ::bosdyn::api::graph_nav::UploadEdgeSnapshotResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::bosdyn::api::graph_nav::UploadEdgeSnapshotRequest>* AsyncUploadEdgeSnapshotRaw(::grpc::ClientContext* context, ::bosdyn::api::graph_nav::UploadEdgeSnapshotResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::bosdyn::api::graph_nav::UploadEdgeSnapshotRequest>* PrepareAsyncUploadEdgeSnapshotRaw(::grpc::ClientContext* context, ::bosdyn::api::graph_nav::UploadEdgeSnapshotResponse* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse>* DownloadWaypointSnapshotRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::DownloadWaypointSnapshotRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse>* AsyncDownloadWaypointSnapshotRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::DownloadWaypointSnapshotRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse>* PrepareAsyncDownloadWaypointSnapshotRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::DownloadWaypointSnapshotRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse>* DownloadEdgeSnapshotRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::DownloadEdgeSnapshotRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse>* AsyncDownloadEdgeSnapshotRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::DownloadEdgeSnapshotRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse>* PrepareAsyncDownloadEdgeSnapshotRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::DownloadEdgeSnapshotRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status SetLocalization(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::SetLocalizationRequest& request, ::bosdyn::api::graph_nav::SetLocalizationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::SetLocalizationResponse>> AsyncSetLocalization(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::SetLocalizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::SetLocalizationResponse>>(AsyncSetLocalizationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::SetLocalizationResponse>> PrepareAsyncSetLocalization(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::SetLocalizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::SetLocalizationResponse>>(PrepareAsyncSetLocalizationRaw(context, request, cq));
    }
    ::grpc::Status NavigateRoute(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigateRouteRequest& request, ::bosdyn::api::graph_nav::NavigateRouteResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::NavigateRouteResponse>> AsyncNavigateRoute(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigateRouteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::NavigateRouteResponse>>(AsyncNavigateRouteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::NavigateRouteResponse>> PrepareAsyncNavigateRoute(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigateRouteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::NavigateRouteResponse>>(PrepareAsyncNavigateRouteRaw(context, request, cq));
    }
    ::grpc::Status NavigateTo(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigateToRequest& request, ::bosdyn::api::graph_nav::NavigateToResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::NavigateToResponse>> AsyncNavigateTo(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigateToRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::NavigateToResponse>>(AsyncNavigateToRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::NavigateToResponse>> PrepareAsyncNavigateTo(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigateToRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::NavigateToResponse>>(PrepareAsyncNavigateToRaw(context, request, cq));
    }
    ::grpc::Status NavigationFeedback(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigationFeedbackRequest& request, ::bosdyn::api::graph_nav::NavigationFeedbackResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::NavigationFeedbackResponse>> AsyncNavigationFeedback(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigationFeedbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::NavigationFeedbackResponse>>(AsyncNavigationFeedbackRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::NavigationFeedbackResponse>> PrepareAsyncNavigationFeedback(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigationFeedbackRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::NavigationFeedbackResponse>>(PrepareAsyncNavigationFeedbackRaw(context, request, cq));
    }
    ::grpc::Status GetLocalizationState(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::GetLocalizationStateRequest& request, ::bosdyn::api::graph_nav::GetLocalizationStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::GetLocalizationStateResponse>> AsyncGetLocalizationState(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::GetLocalizationStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::GetLocalizationStateResponse>>(AsyncGetLocalizationStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::GetLocalizationStateResponse>> PrepareAsyncGetLocalizationState(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::GetLocalizationStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::GetLocalizationStateResponse>>(PrepareAsyncGetLocalizationStateRaw(context, request, cq));
    }
    ::grpc::Status ClearGraph(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::ClearGraphRequest& request, ::bosdyn::api::graph_nav::ClearGraphResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::ClearGraphResponse>> AsyncClearGraph(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::ClearGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::ClearGraphResponse>>(AsyncClearGraphRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::ClearGraphResponse>> PrepareAsyncClearGraph(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::ClearGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::ClearGraphResponse>>(PrepareAsyncClearGraphRaw(context, request, cq));
    }
    ::grpc::Status DownloadGraph(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::DownloadGraphRequest& request, ::bosdyn::api::graph_nav::DownloadGraphResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::DownloadGraphResponse>> AsyncDownloadGraph(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::DownloadGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::DownloadGraphResponse>>(AsyncDownloadGraphRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::DownloadGraphResponse>> PrepareAsyncDownloadGraph(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::DownloadGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::DownloadGraphResponse>>(PrepareAsyncDownloadGraphRaw(context, request, cq));
    }
    ::grpc::Status UploadGraph(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::UploadGraphRequest& request, ::bosdyn::api::graph_nav::UploadGraphResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::UploadGraphResponse>> AsyncUploadGraph(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::UploadGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::UploadGraphResponse>>(AsyncUploadGraphRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::UploadGraphResponse>> PrepareAsyncUploadGraph(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::UploadGraphRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::UploadGraphResponse>>(PrepareAsyncUploadGraphRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::bosdyn::api::graph_nav::UploadWaypointSnapshotRequest>> UploadWaypointSnapshot(::grpc::ClientContext* context, ::bosdyn::api::graph_nav::UploadWaypointSnapshotResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::bosdyn::api::graph_nav::UploadWaypointSnapshotRequest>>(UploadWaypointSnapshotRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::bosdyn::api::graph_nav::UploadWaypointSnapshotRequest>> AsyncUploadWaypointSnapshot(::grpc::ClientContext* context, ::bosdyn::api::graph_nav::UploadWaypointSnapshotResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::bosdyn::api::graph_nav::UploadWaypointSnapshotRequest>>(AsyncUploadWaypointSnapshotRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::bosdyn::api::graph_nav::UploadWaypointSnapshotRequest>> PrepareAsyncUploadWaypointSnapshot(::grpc::ClientContext* context, ::bosdyn::api::graph_nav::UploadWaypointSnapshotResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::bosdyn::api::graph_nav::UploadWaypointSnapshotRequest>>(PrepareAsyncUploadWaypointSnapshotRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::bosdyn::api::graph_nav::UploadEdgeSnapshotRequest>> UploadEdgeSnapshot(::grpc::ClientContext* context, ::bosdyn::api::graph_nav::UploadEdgeSnapshotResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::bosdyn::api::graph_nav::UploadEdgeSnapshotRequest>>(UploadEdgeSnapshotRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::bosdyn::api::graph_nav::UploadEdgeSnapshotRequest>> AsyncUploadEdgeSnapshot(::grpc::ClientContext* context, ::bosdyn::api::graph_nav::UploadEdgeSnapshotResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::bosdyn::api::graph_nav::UploadEdgeSnapshotRequest>>(AsyncUploadEdgeSnapshotRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::bosdyn::api::graph_nav::UploadEdgeSnapshotRequest>> PrepareAsyncUploadEdgeSnapshot(::grpc::ClientContext* context, ::bosdyn::api::graph_nav::UploadEdgeSnapshotResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::bosdyn::api::graph_nav::UploadEdgeSnapshotRequest>>(PrepareAsyncUploadEdgeSnapshotRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse>> DownloadWaypointSnapshot(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::DownloadWaypointSnapshotRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse>>(DownloadWaypointSnapshotRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse>> AsyncDownloadWaypointSnapshot(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::DownloadWaypointSnapshotRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse>>(AsyncDownloadWaypointSnapshotRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse>> PrepareAsyncDownloadWaypointSnapshot(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::DownloadWaypointSnapshotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse>>(PrepareAsyncDownloadWaypointSnapshotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse>> DownloadEdgeSnapshot(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::DownloadEdgeSnapshotRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse>>(DownloadEdgeSnapshotRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse>> AsyncDownloadEdgeSnapshot(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::DownloadEdgeSnapshotRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse>>(AsyncDownloadEdgeSnapshotRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse>> PrepareAsyncDownloadEdgeSnapshot(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::DownloadEdgeSnapshotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse>>(PrepareAsyncDownloadEdgeSnapshotRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void SetLocalization(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::SetLocalizationRequest* request, ::bosdyn::api::graph_nav::SetLocalizationResponse* response, std::function<void(::grpc::Status)>) override;
      void SetLocalization(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::SetLocalizationResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetLocalization(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::SetLocalizationRequest* request, ::bosdyn::api::graph_nav::SetLocalizationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetLocalization(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::SetLocalizationRequest* request, ::bosdyn::api::graph_nav::SetLocalizationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetLocalization(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::SetLocalizationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetLocalization(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::SetLocalizationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void NavigateRoute(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigateRouteRequest* request, ::bosdyn::api::graph_nav::NavigateRouteResponse* response, std::function<void(::grpc::Status)>) override;
      void NavigateRoute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::NavigateRouteResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void NavigateRoute(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigateRouteRequest* request, ::bosdyn::api::graph_nav::NavigateRouteResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void NavigateRoute(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigateRouteRequest* request, ::bosdyn::api::graph_nav::NavigateRouteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void NavigateRoute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::NavigateRouteResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void NavigateRoute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::NavigateRouteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void NavigateTo(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigateToRequest* request, ::bosdyn::api::graph_nav::NavigateToResponse* response, std::function<void(::grpc::Status)>) override;
      void NavigateTo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::NavigateToResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void NavigateTo(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigateToRequest* request, ::bosdyn::api::graph_nav::NavigateToResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void NavigateTo(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigateToRequest* request, ::bosdyn::api::graph_nav::NavigateToResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void NavigateTo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::NavigateToResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void NavigateTo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::NavigateToResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void NavigationFeedback(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigationFeedbackRequest* request, ::bosdyn::api::graph_nav::NavigationFeedbackResponse* response, std::function<void(::grpc::Status)>) override;
      void NavigationFeedback(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::NavigationFeedbackResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void NavigationFeedback(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigationFeedbackRequest* request, ::bosdyn::api::graph_nav::NavigationFeedbackResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void NavigationFeedback(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigationFeedbackRequest* request, ::bosdyn::api::graph_nav::NavigationFeedbackResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void NavigationFeedback(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::NavigationFeedbackResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void NavigationFeedback(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::NavigationFeedbackResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetLocalizationState(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::GetLocalizationStateRequest* request, ::bosdyn::api::graph_nav::GetLocalizationStateResponse* response, std::function<void(::grpc::Status)>) override;
      void GetLocalizationState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::GetLocalizationStateResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetLocalizationState(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::GetLocalizationStateRequest* request, ::bosdyn::api::graph_nav::GetLocalizationStateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetLocalizationState(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::GetLocalizationStateRequest* request, ::bosdyn::api::graph_nav::GetLocalizationStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetLocalizationState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::GetLocalizationStateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetLocalizationState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::GetLocalizationStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ClearGraph(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::ClearGraphRequest* request, ::bosdyn::api::graph_nav::ClearGraphResponse* response, std::function<void(::grpc::Status)>) override;
      void ClearGraph(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::ClearGraphResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ClearGraph(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::ClearGraphRequest* request, ::bosdyn::api::graph_nav::ClearGraphResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ClearGraph(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::ClearGraphRequest* request, ::bosdyn::api::graph_nav::ClearGraphResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ClearGraph(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::ClearGraphResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ClearGraph(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::ClearGraphResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DownloadGraph(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::DownloadGraphRequest* request, ::bosdyn::api::graph_nav::DownloadGraphResponse* response, std::function<void(::grpc::Status)>) override;
      void DownloadGraph(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::DownloadGraphResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DownloadGraph(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::DownloadGraphRequest* request, ::bosdyn::api::graph_nav::DownloadGraphResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DownloadGraph(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::DownloadGraphRequest* request, ::bosdyn::api::graph_nav::DownloadGraphResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DownloadGraph(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::DownloadGraphResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DownloadGraph(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::DownloadGraphResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UploadGraph(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::UploadGraphRequest* request, ::bosdyn::api::graph_nav::UploadGraphResponse* response, std::function<void(::grpc::Status)>) override;
      void UploadGraph(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::UploadGraphResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UploadGraph(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::UploadGraphRequest* request, ::bosdyn::api::graph_nav::UploadGraphResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UploadGraph(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::UploadGraphRequest* request, ::bosdyn::api::graph_nav::UploadGraphResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UploadGraph(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::UploadGraphResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UploadGraph(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::UploadGraphResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UploadWaypointSnapshot(::grpc::ClientContext* context, ::bosdyn::api::graph_nav::UploadWaypointSnapshotResponse* response, ::grpc::ClientWriteReactor< ::bosdyn::api::graph_nav::UploadWaypointSnapshotRequest>* reactor) override;
      #else
      void UploadWaypointSnapshot(::grpc::ClientContext* context, ::bosdyn::api::graph_nav::UploadWaypointSnapshotResponse* response, ::grpc::experimental::ClientWriteReactor< ::bosdyn::api::graph_nav::UploadWaypointSnapshotRequest>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UploadEdgeSnapshot(::grpc::ClientContext* context, ::bosdyn::api::graph_nav::UploadEdgeSnapshotResponse* response, ::grpc::ClientWriteReactor< ::bosdyn::api::graph_nav::UploadEdgeSnapshotRequest>* reactor) override;
      #else
      void UploadEdgeSnapshot(::grpc::ClientContext* context, ::bosdyn::api::graph_nav::UploadEdgeSnapshotResponse* response, ::grpc::experimental::ClientWriteReactor< ::bosdyn::api::graph_nav::UploadEdgeSnapshotRequest>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DownloadWaypointSnapshot(::grpc::ClientContext* context, ::bosdyn::api::graph_nav::DownloadWaypointSnapshotRequest* request, ::grpc::ClientReadReactor< ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse>* reactor) override;
      #else
      void DownloadWaypointSnapshot(::grpc::ClientContext* context, ::bosdyn::api::graph_nav::DownloadWaypointSnapshotRequest* request, ::grpc::experimental::ClientReadReactor< ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DownloadEdgeSnapshot(::grpc::ClientContext* context, ::bosdyn::api::graph_nav::DownloadEdgeSnapshotRequest* request, ::grpc::ClientReadReactor< ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse>* reactor) override;
      #else
      void DownloadEdgeSnapshot(::grpc::ClientContext* context, ::bosdyn::api::graph_nav::DownloadEdgeSnapshotRequest* request, ::grpc::experimental::ClientReadReactor< ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::SetLocalizationResponse>* AsyncSetLocalizationRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::SetLocalizationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::SetLocalizationResponse>* PrepareAsyncSetLocalizationRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::SetLocalizationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::NavigateRouteResponse>* AsyncNavigateRouteRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigateRouteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::NavigateRouteResponse>* PrepareAsyncNavigateRouteRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigateRouteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::NavigateToResponse>* AsyncNavigateToRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigateToRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::NavigateToResponse>* PrepareAsyncNavigateToRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigateToRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::NavigationFeedbackResponse>* AsyncNavigationFeedbackRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigationFeedbackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::NavigationFeedbackResponse>* PrepareAsyncNavigationFeedbackRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigationFeedbackRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::GetLocalizationStateResponse>* AsyncGetLocalizationStateRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::GetLocalizationStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::GetLocalizationStateResponse>* PrepareAsyncGetLocalizationStateRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::GetLocalizationStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::ClearGraphResponse>* AsyncClearGraphRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::ClearGraphRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::ClearGraphResponse>* PrepareAsyncClearGraphRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::ClearGraphRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::DownloadGraphResponse>* AsyncDownloadGraphRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::DownloadGraphRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::DownloadGraphResponse>* PrepareAsyncDownloadGraphRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::DownloadGraphRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::UploadGraphResponse>* AsyncUploadGraphRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::UploadGraphRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::UploadGraphResponse>* PrepareAsyncUploadGraphRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::UploadGraphRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::bosdyn::api::graph_nav::UploadWaypointSnapshotRequest>* UploadWaypointSnapshotRaw(::grpc::ClientContext* context, ::bosdyn::api::graph_nav::UploadWaypointSnapshotResponse* response) override;
    ::grpc::ClientAsyncWriter< ::bosdyn::api::graph_nav::UploadWaypointSnapshotRequest>* AsyncUploadWaypointSnapshotRaw(::grpc::ClientContext* context, ::bosdyn::api::graph_nav::UploadWaypointSnapshotResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::bosdyn::api::graph_nav::UploadWaypointSnapshotRequest>* PrepareAsyncUploadWaypointSnapshotRaw(::grpc::ClientContext* context, ::bosdyn::api::graph_nav::UploadWaypointSnapshotResponse* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::bosdyn::api::graph_nav::UploadEdgeSnapshotRequest>* UploadEdgeSnapshotRaw(::grpc::ClientContext* context, ::bosdyn::api::graph_nav::UploadEdgeSnapshotResponse* response) override;
    ::grpc::ClientAsyncWriter< ::bosdyn::api::graph_nav::UploadEdgeSnapshotRequest>* AsyncUploadEdgeSnapshotRaw(::grpc::ClientContext* context, ::bosdyn::api::graph_nav::UploadEdgeSnapshotResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::bosdyn::api::graph_nav::UploadEdgeSnapshotRequest>* PrepareAsyncUploadEdgeSnapshotRaw(::grpc::ClientContext* context, ::bosdyn::api::graph_nav::UploadEdgeSnapshotResponse* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse>* DownloadWaypointSnapshotRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::DownloadWaypointSnapshotRequest& request) override;
    ::grpc::ClientAsyncReader< ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse>* AsyncDownloadWaypointSnapshotRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::DownloadWaypointSnapshotRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse>* PrepareAsyncDownloadWaypointSnapshotRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::DownloadWaypointSnapshotRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse>* DownloadEdgeSnapshotRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::DownloadEdgeSnapshotRequest& request) override;
    ::grpc::ClientAsyncReader< ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse>* AsyncDownloadEdgeSnapshotRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::DownloadEdgeSnapshotRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse>* PrepareAsyncDownloadEdgeSnapshotRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::DownloadEdgeSnapshotRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SetLocalization_;
    const ::grpc::internal::RpcMethod rpcmethod_NavigateRoute_;
    const ::grpc::internal::RpcMethod rpcmethod_NavigateTo_;
    const ::grpc::internal::RpcMethod rpcmethod_NavigationFeedback_;
    const ::grpc::internal::RpcMethod rpcmethod_GetLocalizationState_;
    const ::grpc::internal::RpcMethod rpcmethod_ClearGraph_;
    const ::grpc::internal::RpcMethod rpcmethod_DownloadGraph_;
    const ::grpc::internal::RpcMethod rpcmethod_UploadGraph_;
    const ::grpc::internal::RpcMethod rpcmethod_UploadWaypointSnapshot_;
    const ::grpc::internal::RpcMethod rpcmethod_UploadEdgeSnapshot_;
    const ::grpc::internal::RpcMethod rpcmethod_DownloadWaypointSnapshot_;
    const ::grpc::internal::RpcMethod rpcmethod_DownloadEdgeSnapshot_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Trigger a manual localization. Typically done to provide the initial localization.
    virtual ::grpc::Status SetLocalization(::grpc::ServerContext* context, const ::bosdyn::api::graph_nav::SetLocalizationRequest* request, ::bosdyn::api::graph_nav::SetLocalizationResponse* response);
    // Tell GraphNav to navigate/traverse a given route.
    virtual ::grpc::Status NavigateRoute(::grpc::ServerContext* context, const ::bosdyn::api::graph_nav::NavigateRouteRequest* request, ::bosdyn::api::graph_nav::NavigateRouteResponse* response);
    // Tell GraphNav to navigate to a waypoint along a route it chooses.
    virtual ::grpc::Status NavigateTo(::grpc::ServerContext* context, const ::bosdyn::api::graph_nav::NavigateToRequest* request, ::bosdyn::api::graph_nav::NavigateToResponse* response);
    // Get feedback on active navigation command.
    virtual ::grpc::Status NavigationFeedback(::grpc::ServerContext* context, const ::bosdyn::api::graph_nav::NavigationFeedbackRequest* request, ::bosdyn::api::graph_nav::NavigationFeedbackResponse* response);
    // Get the localization status and data.
    virtual ::grpc::Status GetLocalizationState(::grpc::ServerContext* context, const ::bosdyn::api::graph_nav::GetLocalizationStateRequest* request, ::bosdyn::api::graph_nav::GetLocalizationStateResponse* response);
    // Clears the local graph structure. Also erases any snapshots currently in RAM.
    virtual ::grpc::Status ClearGraph(::grpc::ServerContext* context, const ::bosdyn::api::graph_nav::ClearGraphRequest* request, ::bosdyn::api::graph_nav::ClearGraphResponse* response);
    // Download the graph structure.
    virtual ::grpc::Status DownloadGraph(::grpc::ServerContext* context, const ::bosdyn::api::graph_nav::DownloadGraphRequest* request, ::bosdyn::api::graph_nav::DownloadGraphResponse* response);
    // Upload the full list of waypoint IDs, graph topology and other small info.
    virtual ::grpc::Status UploadGraph(::grpc::ServerContext* context, const ::bosdyn::api::graph_nav::UploadGraphRequest* request, ::bosdyn::api::graph_nav::UploadGraphResponse* response);
    // Uploads large waypoint snapshot as a stream for a particular waypoint.
    virtual ::grpc::Status UploadWaypointSnapshot(::grpc::ServerContext* context, ::grpc::ServerReader< ::bosdyn::api::graph_nav::UploadWaypointSnapshotRequest>* reader, ::bosdyn::api::graph_nav::UploadWaypointSnapshotResponse* response);
    // Uploads large edge snapshot as a stream for a particular edge.
    virtual ::grpc::Status UploadEdgeSnapshot(::grpc::ServerContext* context, ::grpc::ServerReader< ::bosdyn::api::graph_nav::UploadEdgeSnapshotRequest>* reader, ::bosdyn::api::graph_nav::UploadEdgeSnapshotResponse* response);
    // Download waypoint data from the server. If the snapshot exists in disk cache, it will be loaded.
    virtual ::grpc::Status DownloadWaypointSnapshot(::grpc::ServerContext* context, const ::bosdyn::api::graph_nav::DownloadWaypointSnapshotRequest* request, ::grpc::ServerWriter< ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse>* writer);
    // Download edge data from the server. If the snapshot exists in disk cache, it will be loaded.
    virtual ::grpc::Status DownloadEdgeSnapshot(::grpc::ServerContext* context, const ::bosdyn::api::graph_nav::DownloadEdgeSnapshotRequest* request, ::grpc::ServerWriter< ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_SetLocalization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetLocalization() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SetLocalization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLocalization(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::SetLocalizationRequest* /*request*/, ::bosdyn::api::graph_nav::SetLocalizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetLocalization(::grpc::ServerContext* context, ::bosdyn::api::graph_nav::SetLocalizationRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::graph_nav::SetLocalizationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NavigateRoute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NavigateRoute() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_NavigateRoute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NavigateRoute(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::NavigateRouteRequest* /*request*/, ::bosdyn::api::graph_nav::NavigateRouteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNavigateRoute(::grpc::ServerContext* context, ::bosdyn::api::graph_nav::NavigateRouteRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::graph_nav::NavigateRouteResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NavigateTo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NavigateTo() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_NavigateTo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NavigateTo(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::NavigateToRequest* /*request*/, ::bosdyn::api::graph_nav::NavigateToResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNavigateTo(::grpc::ServerContext* context, ::bosdyn::api::graph_nav::NavigateToRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::graph_nav::NavigateToResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NavigationFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NavigationFeedback() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_NavigationFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NavigationFeedback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::NavigationFeedbackRequest* /*request*/, ::bosdyn::api::graph_nav::NavigationFeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNavigationFeedback(::grpc::ServerContext* context, ::bosdyn::api::graph_nav::NavigationFeedbackRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::graph_nav::NavigationFeedbackResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetLocalizationState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetLocalizationState() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetLocalizationState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLocalizationState(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::GetLocalizationStateRequest* /*request*/, ::bosdyn::api::graph_nav::GetLocalizationStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLocalizationState(::grpc::ServerContext* context, ::bosdyn::api::graph_nav::GetLocalizationStateRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::graph_nav::GetLocalizationStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ClearGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ClearGraph() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ClearGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearGraph(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::ClearGraphRequest* /*request*/, ::bosdyn::api::graph_nav::ClearGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClearGraph(::grpc::ServerContext* context, ::bosdyn::api::graph_nav::ClearGraphRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::graph_nav::ClearGraphResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DownloadGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DownloadGraph() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_DownloadGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadGraph(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::DownloadGraphRequest* /*request*/, ::bosdyn::api::graph_nav::DownloadGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDownloadGraph(::grpc::ServerContext* context, ::bosdyn::api::graph_nav::DownloadGraphRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::graph_nav::DownloadGraphResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UploadGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UploadGraph() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_UploadGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadGraph(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::UploadGraphRequest* /*request*/, ::bosdyn::api::graph_nav::UploadGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUploadGraph(::grpc::ServerContext* context, ::bosdyn::api::graph_nav::UploadGraphRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::graph_nav::UploadGraphResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UploadWaypointSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UploadWaypointSnapshot() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_UploadWaypointSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadWaypointSnapshot(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::bosdyn::api::graph_nav::UploadWaypointSnapshotRequest>* /*reader*/, ::bosdyn::api::graph_nav::UploadWaypointSnapshotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUploadWaypointSnapshot(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::bosdyn::api::graph_nav::UploadWaypointSnapshotResponse, ::bosdyn::api::graph_nav::UploadWaypointSnapshotRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(8, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UploadEdgeSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UploadEdgeSnapshot() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_UploadEdgeSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadEdgeSnapshot(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::bosdyn::api::graph_nav::UploadEdgeSnapshotRequest>* /*reader*/, ::bosdyn::api::graph_nav::UploadEdgeSnapshotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUploadEdgeSnapshot(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::bosdyn::api::graph_nav::UploadEdgeSnapshotResponse, ::bosdyn::api::graph_nav::UploadEdgeSnapshotRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(9, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DownloadWaypointSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DownloadWaypointSnapshot() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_DownloadWaypointSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadWaypointSnapshot(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::DownloadWaypointSnapshotRequest* /*request*/, ::grpc::ServerWriter< ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDownloadWaypointSnapshot(::grpc::ServerContext* context, ::bosdyn::api::graph_nav::DownloadWaypointSnapshotRequest* request, ::grpc::ServerAsyncWriter< ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(10, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DownloadEdgeSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DownloadEdgeSnapshot() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_DownloadEdgeSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadEdgeSnapshot(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::DownloadEdgeSnapshotRequest* /*request*/, ::grpc::ServerWriter< ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDownloadEdgeSnapshot(::grpc::ServerContext* context, ::bosdyn::api::graph_nav::DownloadEdgeSnapshotRequest* request, ::grpc::ServerAsyncWriter< ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(11, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SetLocalization<WithAsyncMethod_NavigateRoute<WithAsyncMethod_NavigateTo<WithAsyncMethod_NavigationFeedback<WithAsyncMethod_GetLocalizationState<WithAsyncMethod_ClearGraph<WithAsyncMethod_DownloadGraph<WithAsyncMethod_UploadGraph<WithAsyncMethod_UploadWaypointSnapshot<WithAsyncMethod_UploadEdgeSnapshot<WithAsyncMethod_DownloadWaypointSnapshot<WithAsyncMethod_DownloadEdgeSnapshot<Service > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetLocalization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetLocalization() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::graph_nav::SetLocalizationRequest, ::bosdyn::api::graph_nav::SetLocalizationResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bosdyn::api::graph_nav::SetLocalizationRequest* request, ::bosdyn::api::graph_nav::SetLocalizationResponse* response) { return this->SetLocalization(context, request, response); }));}
    void SetMessageAllocatorFor_SetLocalization(
        ::grpc::experimental::MessageAllocator< ::bosdyn::api::graph_nav::SetLocalizationRequest, ::bosdyn::api::graph_nav::SetLocalizationResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::graph_nav::SetLocalizationRequest, ::bosdyn::api::graph_nav::SetLocalizationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetLocalization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLocalization(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::SetLocalizationRequest* /*request*/, ::bosdyn::api::graph_nav::SetLocalizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetLocalization(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::graph_nav::SetLocalizationRequest* /*request*/, ::bosdyn::api::graph_nav::SetLocalizationResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetLocalization(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bosdyn::api::graph_nav::SetLocalizationRequest* /*request*/, ::bosdyn::api::graph_nav::SetLocalizationResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_NavigateRoute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_NavigateRoute() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::graph_nav::NavigateRouteRequest, ::bosdyn::api::graph_nav::NavigateRouteResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bosdyn::api::graph_nav::NavigateRouteRequest* request, ::bosdyn::api::graph_nav::NavigateRouteResponse* response) { return this->NavigateRoute(context, request, response); }));}
    void SetMessageAllocatorFor_NavigateRoute(
        ::grpc::experimental::MessageAllocator< ::bosdyn::api::graph_nav::NavigateRouteRequest, ::bosdyn::api::graph_nav::NavigateRouteResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::graph_nav::NavigateRouteRequest, ::bosdyn::api::graph_nav::NavigateRouteResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_NavigateRoute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NavigateRoute(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::NavigateRouteRequest* /*request*/, ::bosdyn::api::graph_nav::NavigateRouteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* NavigateRoute(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::graph_nav::NavigateRouteRequest* /*request*/, ::bosdyn::api::graph_nav::NavigateRouteResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* NavigateRoute(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bosdyn::api::graph_nav::NavigateRouteRequest* /*request*/, ::bosdyn::api::graph_nav::NavigateRouteResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_NavigateTo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_NavigateTo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::graph_nav::NavigateToRequest, ::bosdyn::api::graph_nav::NavigateToResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bosdyn::api::graph_nav::NavigateToRequest* request, ::bosdyn::api::graph_nav::NavigateToResponse* response) { return this->NavigateTo(context, request, response); }));}
    void SetMessageAllocatorFor_NavigateTo(
        ::grpc::experimental::MessageAllocator< ::bosdyn::api::graph_nav::NavigateToRequest, ::bosdyn::api::graph_nav::NavigateToResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::graph_nav::NavigateToRequest, ::bosdyn::api::graph_nav::NavigateToResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_NavigateTo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NavigateTo(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::NavigateToRequest* /*request*/, ::bosdyn::api::graph_nav::NavigateToResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* NavigateTo(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::graph_nav::NavigateToRequest* /*request*/, ::bosdyn::api::graph_nav::NavigateToResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* NavigateTo(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bosdyn::api::graph_nav::NavigateToRequest* /*request*/, ::bosdyn::api::graph_nav::NavigateToResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_NavigationFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_NavigationFeedback() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::graph_nav::NavigationFeedbackRequest, ::bosdyn::api::graph_nav::NavigationFeedbackResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bosdyn::api::graph_nav::NavigationFeedbackRequest* request, ::bosdyn::api::graph_nav::NavigationFeedbackResponse* response) { return this->NavigationFeedback(context, request, response); }));}
    void SetMessageAllocatorFor_NavigationFeedback(
        ::grpc::experimental::MessageAllocator< ::bosdyn::api::graph_nav::NavigationFeedbackRequest, ::bosdyn::api::graph_nav::NavigationFeedbackResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::graph_nav::NavigationFeedbackRequest, ::bosdyn::api::graph_nav::NavigationFeedbackResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_NavigationFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NavigationFeedback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::NavigationFeedbackRequest* /*request*/, ::bosdyn::api::graph_nav::NavigationFeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* NavigationFeedback(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::graph_nav::NavigationFeedbackRequest* /*request*/, ::bosdyn::api::graph_nav::NavigationFeedbackResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* NavigationFeedback(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bosdyn::api::graph_nav::NavigationFeedbackRequest* /*request*/, ::bosdyn::api::graph_nav::NavigationFeedbackResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetLocalizationState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetLocalizationState() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::graph_nav::GetLocalizationStateRequest, ::bosdyn::api::graph_nav::GetLocalizationStateResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bosdyn::api::graph_nav::GetLocalizationStateRequest* request, ::bosdyn::api::graph_nav::GetLocalizationStateResponse* response) { return this->GetLocalizationState(context, request, response); }));}
    void SetMessageAllocatorFor_GetLocalizationState(
        ::grpc::experimental::MessageAllocator< ::bosdyn::api::graph_nav::GetLocalizationStateRequest, ::bosdyn::api::graph_nav::GetLocalizationStateResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::graph_nav::GetLocalizationStateRequest, ::bosdyn::api::graph_nav::GetLocalizationStateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetLocalizationState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLocalizationState(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::GetLocalizationStateRequest* /*request*/, ::bosdyn::api::graph_nav::GetLocalizationStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetLocalizationState(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::graph_nav::GetLocalizationStateRequest* /*request*/, ::bosdyn::api::graph_nav::GetLocalizationStateResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetLocalizationState(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bosdyn::api::graph_nav::GetLocalizationStateRequest* /*request*/, ::bosdyn::api::graph_nav::GetLocalizationStateResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ClearGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ClearGraph() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::graph_nav::ClearGraphRequest, ::bosdyn::api::graph_nav::ClearGraphResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bosdyn::api::graph_nav::ClearGraphRequest* request, ::bosdyn::api::graph_nav::ClearGraphResponse* response) { return this->ClearGraph(context, request, response); }));}
    void SetMessageAllocatorFor_ClearGraph(
        ::grpc::experimental::MessageAllocator< ::bosdyn::api::graph_nav::ClearGraphRequest, ::bosdyn::api::graph_nav::ClearGraphResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::graph_nav::ClearGraphRequest, ::bosdyn::api::graph_nav::ClearGraphResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ClearGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearGraph(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::ClearGraphRequest* /*request*/, ::bosdyn::api::graph_nav::ClearGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ClearGraph(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::graph_nav::ClearGraphRequest* /*request*/, ::bosdyn::api::graph_nav::ClearGraphResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ClearGraph(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bosdyn::api::graph_nav::ClearGraphRequest* /*request*/, ::bosdyn::api::graph_nav::ClearGraphResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DownloadGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DownloadGraph() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::graph_nav::DownloadGraphRequest, ::bosdyn::api::graph_nav::DownloadGraphResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bosdyn::api::graph_nav::DownloadGraphRequest* request, ::bosdyn::api::graph_nav::DownloadGraphResponse* response) { return this->DownloadGraph(context, request, response); }));}
    void SetMessageAllocatorFor_DownloadGraph(
        ::grpc::experimental::MessageAllocator< ::bosdyn::api::graph_nav::DownloadGraphRequest, ::bosdyn::api::graph_nav::DownloadGraphResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::graph_nav::DownloadGraphRequest, ::bosdyn::api::graph_nav::DownloadGraphResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DownloadGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadGraph(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::DownloadGraphRequest* /*request*/, ::bosdyn::api::graph_nav::DownloadGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DownloadGraph(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::graph_nav::DownloadGraphRequest* /*request*/, ::bosdyn::api::graph_nav::DownloadGraphResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DownloadGraph(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bosdyn::api::graph_nav::DownloadGraphRequest* /*request*/, ::bosdyn::api::graph_nav::DownloadGraphResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UploadGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UploadGraph() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::graph_nav::UploadGraphRequest, ::bosdyn::api::graph_nav::UploadGraphResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bosdyn::api::graph_nav::UploadGraphRequest* request, ::bosdyn::api::graph_nav::UploadGraphResponse* response) { return this->UploadGraph(context, request, response); }));}
    void SetMessageAllocatorFor_UploadGraph(
        ::grpc::experimental::MessageAllocator< ::bosdyn::api::graph_nav::UploadGraphRequest, ::bosdyn::api::graph_nav::UploadGraphResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(7);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::graph_nav::UploadGraphRequest, ::bosdyn::api::graph_nav::UploadGraphResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UploadGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadGraph(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::UploadGraphRequest* /*request*/, ::bosdyn::api::graph_nav::UploadGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UploadGraph(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::graph_nav::UploadGraphRequest* /*request*/, ::bosdyn::api::graph_nav::UploadGraphResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UploadGraph(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bosdyn::api::graph_nav::UploadGraphRequest* /*request*/, ::bosdyn::api::graph_nav::UploadGraphResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UploadWaypointSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UploadWaypointSnapshot() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(8,
          new ::grpc::internal::CallbackClientStreamingHandler< ::bosdyn::api::graph_nav::UploadWaypointSnapshotRequest, ::bosdyn::api::graph_nav::UploadWaypointSnapshotResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::bosdyn::api::graph_nav::UploadWaypointSnapshotResponse* response) { return this->UploadWaypointSnapshot(context, response); }));
    }
    ~ExperimentalWithCallbackMethod_UploadWaypointSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadWaypointSnapshot(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::bosdyn::api::graph_nav::UploadWaypointSnapshotRequest>* /*reader*/, ::bosdyn::api::graph_nav::UploadWaypointSnapshotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::bosdyn::api::graph_nav::UploadWaypointSnapshotRequest>* UploadWaypointSnapshot(
      ::grpc::CallbackServerContext* /*context*/, ::bosdyn::api::graph_nav::UploadWaypointSnapshotResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::bosdyn::api::graph_nav::UploadWaypointSnapshotRequest>* UploadWaypointSnapshot(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::bosdyn::api::graph_nav::UploadWaypointSnapshotResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UploadEdgeSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UploadEdgeSnapshot() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(9,
          new ::grpc::internal::CallbackClientStreamingHandler< ::bosdyn::api::graph_nav::UploadEdgeSnapshotRequest, ::bosdyn::api::graph_nav::UploadEdgeSnapshotResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::bosdyn::api::graph_nav::UploadEdgeSnapshotResponse* response) { return this->UploadEdgeSnapshot(context, response); }));
    }
    ~ExperimentalWithCallbackMethod_UploadEdgeSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadEdgeSnapshot(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::bosdyn::api::graph_nav::UploadEdgeSnapshotRequest>* /*reader*/, ::bosdyn::api::graph_nav::UploadEdgeSnapshotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::bosdyn::api::graph_nav::UploadEdgeSnapshotRequest>* UploadEdgeSnapshot(
      ::grpc::CallbackServerContext* /*context*/, ::bosdyn::api::graph_nav::UploadEdgeSnapshotResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::bosdyn::api::graph_nav::UploadEdgeSnapshotRequest>* UploadEdgeSnapshot(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::bosdyn::api::graph_nav::UploadEdgeSnapshotResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DownloadWaypointSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DownloadWaypointSnapshot() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(10,
          new ::grpc::internal::CallbackServerStreamingHandler< ::bosdyn::api::graph_nav::DownloadWaypointSnapshotRequest, ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bosdyn::api::graph_nav::DownloadWaypointSnapshotRequest* request) { return this->DownloadWaypointSnapshot(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_DownloadWaypointSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadWaypointSnapshot(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::DownloadWaypointSnapshotRequest* /*request*/, ::grpc::ServerWriter< ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse>* DownloadWaypointSnapshot(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::graph_nav::DownloadWaypointSnapshotRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse>* DownloadWaypointSnapshot(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bosdyn::api::graph_nav::DownloadWaypointSnapshotRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DownloadEdgeSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DownloadEdgeSnapshot() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(11,
          new ::grpc::internal::CallbackServerStreamingHandler< ::bosdyn::api::graph_nav::DownloadEdgeSnapshotRequest, ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bosdyn::api::graph_nav::DownloadEdgeSnapshotRequest* request) { return this->DownloadEdgeSnapshot(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_DownloadEdgeSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadEdgeSnapshot(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::DownloadEdgeSnapshotRequest* /*request*/, ::grpc::ServerWriter< ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse>* DownloadEdgeSnapshot(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::graph_nav::DownloadEdgeSnapshotRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse>* DownloadEdgeSnapshot(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bosdyn::api::graph_nav::DownloadEdgeSnapshotRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_SetLocalization<ExperimentalWithCallbackMethod_NavigateRoute<ExperimentalWithCallbackMethod_NavigateTo<ExperimentalWithCallbackMethod_NavigationFeedback<ExperimentalWithCallbackMethod_GetLocalizationState<ExperimentalWithCallbackMethod_ClearGraph<ExperimentalWithCallbackMethod_DownloadGraph<ExperimentalWithCallbackMethod_UploadGraph<ExperimentalWithCallbackMethod_UploadWaypointSnapshot<ExperimentalWithCallbackMethod_UploadEdgeSnapshot<ExperimentalWithCallbackMethod_DownloadWaypointSnapshot<ExperimentalWithCallbackMethod_DownloadEdgeSnapshot<Service > > > > > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_SetLocalization<ExperimentalWithCallbackMethod_NavigateRoute<ExperimentalWithCallbackMethod_NavigateTo<ExperimentalWithCallbackMethod_NavigationFeedback<ExperimentalWithCallbackMethod_GetLocalizationState<ExperimentalWithCallbackMethod_ClearGraph<ExperimentalWithCallbackMethod_DownloadGraph<ExperimentalWithCallbackMethod_UploadGraph<ExperimentalWithCallbackMethod_UploadWaypointSnapshot<ExperimentalWithCallbackMethod_UploadEdgeSnapshot<ExperimentalWithCallbackMethod_DownloadWaypointSnapshot<ExperimentalWithCallbackMethod_DownloadEdgeSnapshot<Service > > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SetLocalization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetLocalization() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SetLocalization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLocalization(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::SetLocalizationRequest* /*request*/, ::bosdyn::api::graph_nav::SetLocalizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NavigateRoute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NavigateRoute() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_NavigateRoute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NavigateRoute(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::NavigateRouteRequest* /*request*/, ::bosdyn::api::graph_nav::NavigateRouteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NavigateTo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NavigateTo() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_NavigateTo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NavigateTo(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::NavigateToRequest* /*request*/, ::bosdyn::api::graph_nav::NavigateToResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NavigationFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NavigationFeedback() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_NavigationFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NavigationFeedback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::NavigationFeedbackRequest* /*request*/, ::bosdyn::api::graph_nav::NavigationFeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetLocalizationState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetLocalizationState() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetLocalizationState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLocalizationState(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::GetLocalizationStateRequest* /*request*/, ::bosdyn::api::graph_nav::GetLocalizationStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ClearGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ClearGraph() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ClearGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearGraph(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::ClearGraphRequest* /*request*/, ::bosdyn::api::graph_nav::ClearGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DownloadGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DownloadGraph() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_DownloadGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadGraph(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::DownloadGraphRequest* /*request*/, ::bosdyn::api::graph_nav::DownloadGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UploadGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UploadGraph() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_UploadGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadGraph(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::UploadGraphRequest* /*request*/, ::bosdyn::api::graph_nav::UploadGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UploadWaypointSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UploadWaypointSnapshot() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_UploadWaypointSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadWaypointSnapshot(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::bosdyn::api::graph_nav::UploadWaypointSnapshotRequest>* /*reader*/, ::bosdyn::api::graph_nav::UploadWaypointSnapshotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UploadEdgeSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UploadEdgeSnapshot() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_UploadEdgeSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadEdgeSnapshot(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::bosdyn::api::graph_nav::UploadEdgeSnapshotRequest>* /*reader*/, ::bosdyn::api::graph_nav::UploadEdgeSnapshotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DownloadWaypointSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DownloadWaypointSnapshot() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_DownloadWaypointSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadWaypointSnapshot(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::DownloadWaypointSnapshotRequest* /*request*/, ::grpc::ServerWriter< ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DownloadEdgeSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DownloadEdgeSnapshot() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_DownloadEdgeSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadEdgeSnapshot(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::DownloadEdgeSnapshotRequest* /*request*/, ::grpc::ServerWriter< ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetLocalization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetLocalization() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SetLocalization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLocalization(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::SetLocalizationRequest* /*request*/, ::bosdyn::api::graph_nav::SetLocalizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetLocalization(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_NavigateRoute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NavigateRoute() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_NavigateRoute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NavigateRoute(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::NavigateRouteRequest* /*request*/, ::bosdyn::api::graph_nav::NavigateRouteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNavigateRoute(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_NavigateTo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NavigateTo() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_NavigateTo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NavigateTo(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::NavigateToRequest* /*request*/, ::bosdyn::api::graph_nav::NavigateToResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNavigateTo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_NavigationFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NavigationFeedback() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_NavigationFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NavigationFeedback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::NavigationFeedbackRequest* /*request*/, ::bosdyn::api::graph_nav::NavigationFeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNavigationFeedback(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetLocalizationState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetLocalizationState() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetLocalizationState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLocalizationState(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::GetLocalizationStateRequest* /*request*/, ::bosdyn::api::graph_nav::GetLocalizationStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLocalizationState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ClearGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ClearGraph() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_ClearGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearGraph(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::ClearGraphRequest* /*request*/, ::bosdyn::api::graph_nav::ClearGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClearGraph(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DownloadGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DownloadGraph() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_DownloadGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadGraph(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::DownloadGraphRequest* /*request*/, ::bosdyn::api::graph_nav::DownloadGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDownloadGraph(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UploadGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UploadGraph() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_UploadGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadGraph(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::UploadGraphRequest* /*request*/, ::bosdyn::api::graph_nav::UploadGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUploadGraph(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UploadWaypointSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UploadWaypointSnapshot() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_UploadWaypointSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadWaypointSnapshot(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::bosdyn::api::graph_nav::UploadWaypointSnapshotRequest>* /*reader*/, ::bosdyn::api::graph_nav::UploadWaypointSnapshotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUploadWaypointSnapshot(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(8, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UploadEdgeSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UploadEdgeSnapshot() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_UploadEdgeSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadEdgeSnapshot(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::bosdyn::api::graph_nav::UploadEdgeSnapshotRequest>* /*reader*/, ::bosdyn::api::graph_nav::UploadEdgeSnapshotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUploadEdgeSnapshot(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(9, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DownloadWaypointSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DownloadWaypointSnapshot() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_DownloadWaypointSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadWaypointSnapshot(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::DownloadWaypointSnapshotRequest* /*request*/, ::grpc::ServerWriter< ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDownloadWaypointSnapshot(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(10, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DownloadEdgeSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DownloadEdgeSnapshot() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_DownloadEdgeSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadEdgeSnapshot(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::DownloadEdgeSnapshotRequest* /*request*/, ::grpc::ServerWriter< ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDownloadEdgeSnapshot(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(11, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetLocalization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetLocalization() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetLocalization(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetLocalization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLocalization(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::SetLocalizationRequest* /*request*/, ::bosdyn::api::graph_nav::SetLocalizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetLocalization(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetLocalization(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_NavigateRoute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_NavigateRoute() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->NavigateRoute(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_NavigateRoute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NavigateRoute(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::NavigateRouteRequest* /*request*/, ::bosdyn::api::graph_nav::NavigateRouteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* NavigateRoute(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* NavigateRoute(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_NavigateTo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_NavigateTo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->NavigateTo(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_NavigateTo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NavigateTo(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::NavigateToRequest* /*request*/, ::bosdyn::api::graph_nav::NavigateToResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* NavigateTo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* NavigateTo(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_NavigationFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_NavigationFeedback() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->NavigationFeedback(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_NavigationFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NavigationFeedback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::NavigationFeedbackRequest* /*request*/, ::bosdyn::api::graph_nav::NavigationFeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* NavigationFeedback(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* NavigationFeedback(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetLocalizationState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetLocalizationState() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetLocalizationState(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetLocalizationState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLocalizationState(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::GetLocalizationStateRequest* /*request*/, ::bosdyn::api::graph_nav::GetLocalizationStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetLocalizationState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetLocalizationState(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ClearGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ClearGraph() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ClearGraph(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ClearGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearGraph(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::ClearGraphRequest* /*request*/, ::bosdyn::api::graph_nav::ClearGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ClearGraph(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ClearGraph(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DownloadGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DownloadGraph() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DownloadGraph(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DownloadGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadGraph(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::DownloadGraphRequest* /*request*/, ::bosdyn::api::graph_nav::DownloadGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DownloadGraph(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DownloadGraph(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UploadGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UploadGraph() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UploadGraph(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UploadGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadGraph(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::UploadGraphRequest* /*request*/, ::bosdyn::api::graph_nav::UploadGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UploadGraph(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UploadGraph(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UploadWaypointSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UploadWaypointSnapshot() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::grpc::ByteBuffer* response) { return this->UploadWaypointSnapshot(context, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UploadWaypointSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadWaypointSnapshot(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::bosdyn::api::graph_nav::UploadWaypointSnapshotRequest>* /*reader*/, ::bosdyn::api::graph_nav::UploadWaypointSnapshotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* UploadWaypointSnapshot(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer>* UploadWaypointSnapshot(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UploadEdgeSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UploadEdgeSnapshot() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::grpc::ByteBuffer* response) { return this->UploadEdgeSnapshot(context, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UploadEdgeSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadEdgeSnapshot(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::bosdyn::api::graph_nav::UploadEdgeSnapshotRequest>* /*reader*/, ::bosdyn::api::graph_nav::UploadEdgeSnapshotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* UploadEdgeSnapshot(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer>* UploadEdgeSnapshot(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DownloadWaypointSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DownloadWaypointSnapshot() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->DownloadWaypointSnapshot(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_DownloadWaypointSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadWaypointSnapshot(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::DownloadWaypointSnapshotRequest* /*request*/, ::grpc::ServerWriter< ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* DownloadWaypointSnapshot(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* DownloadWaypointSnapshot(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DownloadEdgeSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DownloadEdgeSnapshot() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->DownloadEdgeSnapshot(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_DownloadEdgeSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadEdgeSnapshot(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::DownloadEdgeSnapshotRequest* /*request*/, ::grpc::ServerWriter< ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* DownloadEdgeSnapshot(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* DownloadEdgeSnapshot(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetLocalization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetLocalization() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::graph_nav::SetLocalizationRequest, ::bosdyn::api::graph_nav::SetLocalizationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::graph_nav::SetLocalizationRequest, ::bosdyn::api::graph_nav::SetLocalizationResponse>* streamer) {
                       return this->StreamedSetLocalization(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetLocalization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetLocalization(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::SetLocalizationRequest* /*request*/, ::bosdyn::api::graph_nav::SetLocalizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetLocalization(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::graph_nav::SetLocalizationRequest,::bosdyn::api::graph_nav::SetLocalizationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NavigateRoute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NavigateRoute() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::graph_nav::NavigateRouteRequest, ::bosdyn::api::graph_nav::NavigateRouteResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::graph_nav::NavigateRouteRequest, ::bosdyn::api::graph_nav::NavigateRouteResponse>* streamer) {
                       return this->StreamedNavigateRoute(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_NavigateRoute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NavigateRoute(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::NavigateRouteRequest* /*request*/, ::bosdyn::api::graph_nav::NavigateRouteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNavigateRoute(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::graph_nav::NavigateRouteRequest,::bosdyn::api::graph_nav::NavigateRouteResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NavigateTo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NavigateTo() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::graph_nav::NavigateToRequest, ::bosdyn::api::graph_nav::NavigateToResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::graph_nav::NavigateToRequest, ::bosdyn::api::graph_nav::NavigateToResponse>* streamer) {
                       return this->StreamedNavigateTo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_NavigateTo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NavigateTo(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::NavigateToRequest* /*request*/, ::bosdyn::api::graph_nav::NavigateToResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNavigateTo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::graph_nav::NavigateToRequest,::bosdyn::api::graph_nav::NavigateToResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NavigationFeedback : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NavigationFeedback() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::graph_nav::NavigationFeedbackRequest, ::bosdyn::api::graph_nav::NavigationFeedbackResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::graph_nav::NavigationFeedbackRequest, ::bosdyn::api::graph_nav::NavigationFeedbackResponse>* streamer) {
                       return this->StreamedNavigationFeedback(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_NavigationFeedback() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NavigationFeedback(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::NavigationFeedbackRequest* /*request*/, ::bosdyn::api::graph_nav::NavigationFeedbackResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNavigationFeedback(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::graph_nav::NavigationFeedbackRequest,::bosdyn::api::graph_nav::NavigationFeedbackResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetLocalizationState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetLocalizationState() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::graph_nav::GetLocalizationStateRequest, ::bosdyn::api::graph_nav::GetLocalizationStateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::graph_nav::GetLocalizationStateRequest, ::bosdyn::api::graph_nav::GetLocalizationStateResponse>* streamer) {
                       return this->StreamedGetLocalizationState(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetLocalizationState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetLocalizationState(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::GetLocalizationStateRequest* /*request*/, ::bosdyn::api::graph_nav::GetLocalizationStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetLocalizationState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::graph_nav::GetLocalizationStateRequest,::bosdyn::api::graph_nav::GetLocalizationStateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ClearGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ClearGraph() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::graph_nav::ClearGraphRequest, ::bosdyn::api::graph_nav::ClearGraphResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::graph_nav::ClearGraphRequest, ::bosdyn::api::graph_nav::ClearGraphResponse>* streamer) {
                       return this->StreamedClearGraph(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ClearGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ClearGraph(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::ClearGraphRequest* /*request*/, ::bosdyn::api::graph_nav::ClearGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedClearGraph(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::graph_nav::ClearGraphRequest,::bosdyn::api::graph_nav::ClearGraphResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DownloadGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DownloadGraph() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::graph_nav::DownloadGraphRequest, ::bosdyn::api::graph_nav::DownloadGraphResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::graph_nav::DownloadGraphRequest, ::bosdyn::api::graph_nav::DownloadGraphResponse>* streamer) {
                       return this->StreamedDownloadGraph(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DownloadGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DownloadGraph(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::DownloadGraphRequest* /*request*/, ::bosdyn::api::graph_nav::DownloadGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDownloadGraph(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::graph_nav::DownloadGraphRequest,::bosdyn::api::graph_nav::DownloadGraphResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UploadGraph : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UploadGraph() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::graph_nav::UploadGraphRequest, ::bosdyn::api::graph_nav::UploadGraphResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::graph_nav::UploadGraphRequest, ::bosdyn::api::graph_nav::UploadGraphResponse>* streamer) {
                       return this->StreamedUploadGraph(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UploadGraph() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UploadGraph(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::UploadGraphRequest* /*request*/, ::bosdyn::api::graph_nav::UploadGraphResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUploadGraph(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::graph_nav::UploadGraphRequest,::bosdyn::api::graph_nav::UploadGraphResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SetLocalization<WithStreamedUnaryMethod_NavigateRoute<WithStreamedUnaryMethod_NavigateTo<WithStreamedUnaryMethod_NavigationFeedback<WithStreamedUnaryMethod_GetLocalizationState<WithStreamedUnaryMethod_ClearGraph<WithStreamedUnaryMethod_DownloadGraph<WithStreamedUnaryMethod_UploadGraph<Service > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_DownloadWaypointSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_DownloadWaypointSnapshot() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::bosdyn::api::graph_nav::DownloadWaypointSnapshotRequest, ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::bosdyn::api::graph_nav::DownloadWaypointSnapshotRequest, ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse>* streamer) {
                       return this->StreamedDownloadWaypointSnapshot(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_DownloadWaypointSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DownloadWaypointSnapshot(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::DownloadWaypointSnapshotRequest* /*request*/, ::grpc::ServerWriter< ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedDownloadWaypointSnapshot(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::bosdyn::api::graph_nav::DownloadWaypointSnapshotRequest,::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_DownloadEdgeSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_DownloadEdgeSnapshot() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::bosdyn::api::graph_nav::DownloadEdgeSnapshotRequest, ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::bosdyn::api::graph_nav::DownloadEdgeSnapshotRequest, ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse>* streamer) {
                       return this->StreamedDownloadEdgeSnapshot(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_DownloadEdgeSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DownloadEdgeSnapshot(::grpc::ServerContext* /*context*/, const ::bosdyn::api::graph_nav::DownloadEdgeSnapshotRequest* /*request*/, ::grpc::ServerWriter< ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedDownloadEdgeSnapshot(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::bosdyn::api::graph_nav::DownloadEdgeSnapshotRequest,::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_DownloadWaypointSnapshot<WithSplitStreamingMethod_DownloadEdgeSnapshot<Service > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_SetLocalization<WithStreamedUnaryMethod_NavigateRoute<WithStreamedUnaryMethod_NavigateTo<WithStreamedUnaryMethod_NavigationFeedback<WithStreamedUnaryMethod_GetLocalizationState<WithStreamedUnaryMethod_ClearGraph<WithStreamedUnaryMethod_DownloadGraph<WithStreamedUnaryMethod_UploadGraph<WithSplitStreamingMethod_DownloadWaypointSnapshot<WithSplitStreamingMethod_DownloadEdgeSnapshot<Service > > > > > > > > > > StreamedService;
};

}  // namespace graph_nav
}  // namespace api
}  // namespace bosdyn


#endif  // GRPC_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_5fservice_2eproto__INCLUDED
