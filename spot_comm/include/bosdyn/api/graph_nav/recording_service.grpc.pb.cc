// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bosdyn/api/graph_nav/recording_service.proto

#include "bosdyn/api/graph_nav/recording_service.pb.h"
#include "bosdyn/api/graph_nav/recording_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace bosdyn {
namespace api {
namespace graph_nav {

static const char* GraphNavRecordingService_method_names[] = {
  "/bosdyn.api.graph_nav.GraphNavRecordingService/StartRecording",
  "/bosdyn.api.graph_nav.GraphNavRecordingService/StopRecording",
  "/bosdyn.api.graph_nav.GraphNavRecordingService/CreateWaypoint",
  "/bosdyn.api.graph_nav.GraphNavRecordingService/SetRecordingEnvironment",
  "/bosdyn.api.graph_nav.GraphNavRecordingService/CreateEdge",
  "/bosdyn.api.graph_nav.GraphNavRecordingService/GetRecordStatus",
};

std::unique_ptr< GraphNavRecordingService::Stub> GraphNavRecordingService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< GraphNavRecordingService::Stub> stub(new GraphNavRecordingService::Stub(channel));
  return stub;
}

GraphNavRecordingService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_StartRecording_(GraphNavRecordingService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopRecording_(GraphNavRecordingService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateWaypoint_(GraphNavRecordingService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetRecordingEnvironment_(GraphNavRecordingService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateEdge_(GraphNavRecordingService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRecordStatus_(GraphNavRecordingService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status GraphNavRecordingService::Stub::StartRecording(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::StartRecordingRequest& request, ::bosdyn::api::graph_nav::StartRecordingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StartRecording_, context, request, response);
}

void GraphNavRecordingService::Stub::experimental_async::StartRecording(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::StartRecordingRequest* request, ::bosdyn::api::graph_nav::StartRecordingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StartRecording_, context, request, response, std::move(f));
}

void GraphNavRecordingService::Stub::experimental_async::StartRecording(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::StartRecordingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StartRecording_, context, request, response, std::move(f));
}

void GraphNavRecordingService::Stub::experimental_async::StartRecording(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::StartRecordingRequest* request, ::bosdyn::api::graph_nav::StartRecordingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StartRecording_, context, request, response, reactor);
}

void GraphNavRecordingService::Stub::experimental_async::StartRecording(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::StartRecordingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StartRecording_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::StartRecordingResponse>* GraphNavRecordingService::Stub::AsyncStartRecordingRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::StartRecordingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::graph_nav::StartRecordingResponse>::Create(channel_.get(), cq, rpcmethod_StartRecording_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::StartRecordingResponse>* GraphNavRecordingService::Stub::PrepareAsyncStartRecordingRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::StartRecordingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::graph_nav::StartRecordingResponse>::Create(channel_.get(), cq, rpcmethod_StartRecording_, context, request, false);
}

::grpc::Status GraphNavRecordingService::Stub::StopRecording(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::StopRecordingRequest& request, ::bosdyn::api::graph_nav::StopRecordingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StopRecording_, context, request, response);
}

void GraphNavRecordingService::Stub::experimental_async::StopRecording(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::StopRecordingRequest* request, ::bosdyn::api::graph_nav::StopRecordingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopRecording_, context, request, response, std::move(f));
}

void GraphNavRecordingService::Stub::experimental_async::StopRecording(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::StopRecordingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopRecording_, context, request, response, std::move(f));
}

void GraphNavRecordingService::Stub::experimental_async::StopRecording(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::StopRecordingRequest* request, ::bosdyn::api::graph_nav::StopRecordingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StopRecording_, context, request, response, reactor);
}

void GraphNavRecordingService::Stub::experimental_async::StopRecording(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::StopRecordingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StopRecording_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::StopRecordingResponse>* GraphNavRecordingService::Stub::AsyncStopRecordingRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::StopRecordingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::graph_nav::StopRecordingResponse>::Create(channel_.get(), cq, rpcmethod_StopRecording_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::StopRecordingResponse>* GraphNavRecordingService::Stub::PrepareAsyncStopRecordingRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::StopRecordingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::graph_nav::StopRecordingResponse>::Create(channel_.get(), cq, rpcmethod_StopRecording_, context, request, false);
}

::grpc::Status GraphNavRecordingService::Stub::CreateWaypoint(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::CreateWaypointRequest& request, ::bosdyn::api::graph_nav::CreateWaypointResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateWaypoint_, context, request, response);
}

void GraphNavRecordingService::Stub::experimental_async::CreateWaypoint(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::CreateWaypointRequest* request, ::bosdyn::api::graph_nav::CreateWaypointResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateWaypoint_, context, request, response, std::move(f));
}

void GraphNavRecordingService::Stub::experimental_async::CreateWaypoint(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::CreateWaypointResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateWaypoint_, context, request, response, std::move(f));
}

void GraphNavRecordingService::Stub::experimental_async::CreateWaypoint(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::CreateWaypointRequest* request, ::bosdyn::api::graph_nav::CreateWaypointResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateWaypoint_, context, request, response, reactor);
}

void GraphNavRecordingService::Stub::experimental_async::CreateWaypoint(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::CreateWaypointResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateWaypoint_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::CreateWaypointResponse>* GraphNavRecordingService::Stub::AsyncCreateWaypointRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::CreateWaypointRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::graph_nav::CreateWaypointResponse>::Create(channel_.get(), cq, rpcmethod_CreateWaypoint_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::CreateWaypointResponse>* GraphNavRecordingService::Stub::PrepareAsyncCreateWaypointRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::CreateWaypointRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::graph_nav::CreateWaypointResponse>::Create(channel_.get(), cq, rpcmethod_CreateWaypoint_, context, request, false);
}

::grpc::Status GraphNavRecordingService::Stub::SetRecordingEnvironment(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::SetRecordingEnvironmentRequest& request, ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetRecordingEnvironment_, context, request, response);
}

void GraphNavRecordingService::Stub::experimental_async::SetRecordingEnvironment(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::SetRecordingEnvironmentRequest* request, ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetRecordingEnvironment_, context, request, response, std::move(f));
}

void GraphNavRecordingService::Stub::experimental_async::SetRecordingEnvironment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetRecordingEnvironment_, context, request, response, std::move(f));
}

void GraphNavRecordingService::Stub::experimental_async::SetRecordingEnvironment(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::SetRecordingEnvironmentRequest* request, ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetRecordingEnvironment_, context, request, response, reactor);
}

void GraphNavRecordingService::Stub::experimental_async::SetRecordingEnvironment(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetRecordingEnvironment_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse>* GraphNavRecordingService::Stub::AsyncSetRecordingEnvironmentRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::SetRecordingEnvironmentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse>::Create(channel_.get(), cq, rpcmethod_SetRecordingEnvironment_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse>* GraphNavRecordingService::Stub::PrepareAsyncSetRecordingEnvironmentRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::SetRecordingEnvironmentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse>::Create(channel_.get(), cq, rpcmethod_SetRecordingEnvironment_, context, request, false);
}

::grpc::Status GraphNavRecordingService::Stub::CreateEdge(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::CreateEdgeRequest& request, ::bosdyn::api::graph_nav::CreateEdgeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateEdge_, context, request, response);
}

void GraphNavRecordingService::Stub::experimental_async::CreateEdge(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::CreateEdgeRequest* request, ::bosdyn::api::graph_nav::CreateEdgeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateEdge_, context, request, response, std::move(f));
}

void GraphNavRecordingService::Stub::experimental_async::CreateEdge(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::CreateEdgeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateEdge_, context, request, response, std::move(f));
}

void GraphNavRecordingService::Stub::experimental_async::CreateEdge(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::CreateEdgeRequest* request, ::bosdyn::api::graph_nav::CreateEdgeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateEdge_, context, request, response, reactor);
}

void GraphNavRecordingService::Stub::experimental_async::CreateEdge(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::CreateEdgeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateEdge_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::CreateEdgeResponse>* GraphNavRecordingService::Stub::AsyncCreateEdgeRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::CreateEdgeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::graph_nav::CreateEdgeResponse>::Create(channel_.get(), cq, rpcmethod_CreateEdge_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::CreateEdgeResponse>* GraphNavRecordingService::Stub::PrepareAsyncCreateEdgeRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::CreateEdgeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::graph_nav::CreateEdgeResponse>::Create(channel_.get(), cq, rpcmethod_CreateEdge_, context, request, false);
}

::grpc::Status GraphNavRecordingService::Stub::GetRecordStatus(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::GetRecordStatusRequest& request, ::bosdyn::api::graph_nav::GetRecordStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetRecordStatus_, context, request, response);
}

void GraphNavRecordingService::Stub::experimental_async::GetRecordStatus(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::GetRecordStatusRequest* request, ::bosdyn::api::graph_nav::GetRecordStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRecordStatus_, context, request, response, std::move(f));
}

void GraphNavRecordingService::Stub::experimental_async::GetRecordStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::GetRecordStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRecordStatus_, context, request, response, std::move(f));
}

void GraphNavRecordingService::Stub::experimental_async::GetRecordStatus(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::GetRecordStatusRequest* request, ::bosdyn::api::graph_nav::GetRecordStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRecordStatus_, context, request, response, reactor);
}

void GraphNavRecordingService::Stub::experimental_async::GetRecordStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::GetRecordStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRecordStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::GetRecordStatusResponse>* GraphNavRecordingService::Stub::AsyncGetRecordStatusRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::GetRecordStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::graph_nav::GetRecordStatusResponse>::Create(channel_.get(), cq, rpcmethod_GetRecordStatus_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::GetRecordStatusResponse>* GraphNavRecordingService::Stub::PrepareAsyncGetRecordStatusRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::GetRecordStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::graph_nav::GetRecordStatusResponse>::Create(channel_.get(), cq, rpcmethod_GetRecordStatus_, context, request, false);
}

GraphNavRecordingService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GraphNavRecordingService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GraphNavRecordingService::Service, ::bosdyn::api::graph_nav::StartRecordingRequest, ::bosdyn::api::graph_nav::StartRecordingResponse>(
          [](GraphNavRecordingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::graph_nav::StartRecordingRequest* req,
             ::bosdyn::api::graph_nav::StartRecordingResponse* resp) {
               return service->StartRecording(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GraphNavRecordingService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GraphNavRecordingService::Service, ::bosdyn::api::graph_nav::StopRecordingRequest, ::bosdyn::api::graph_nav::StopRecordingResponse>(
          [](GraphNavRecordingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::graph_nav::StopRecordingRequest* req,
             ::bosdyn::api::graph_nav::StopRecordingResponse* resp) {
               return service->StopRecording(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GraphNavRecordingService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GraphNavRecordingService::Service, ::bosdyn::api::graph_nav::CreateWaypointRequest, ::bosdyn::api::graph_nav::CreateWaypointResponse>(
          [](GraphNavRecordingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::graph_nav::CreateWaypointRequest* req,
             ::bosdyn::api::graph_nav::CreateWaypointResponse* resp) {
               return service->CreateWaypoint(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GraphNavRecordingService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GraphNavRecordingService::Service, ::bosdyn::api::graph_nav::SetRecordingEnvironmentRequest, ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse>(
          [](GraphNavRecordingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::graph_nav::SetRecordingEnvironmentRequest* req,
             ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse* resp) {
               return service->SetRecordingEnvironment(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GraphNavRecordingService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GraphNavRecordingService::Service, ::bosdyn::api::graph_nav::CreateEdgeRequest, ::bosdyn::api::graph_nav::CreateEdgeResponse>(
          [](GraphNavRecordingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::graph_nav::CreateEdgeRequest* req,
             ::bosdyn::api::graph_nav::CreateEdgeResponse* resp) {
               return service->CreateEdge(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GraphNavRecordingService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GraphNavRecordingService::Service, ::bosdyn::api::graph_nav::GetRecordStatusRequest, ::bosdyn::api::graph_nav::GetRecordStatusResponse>(
          [](GraphNavRecordingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::graph_nav::GetRecordStatusRequest* req,
             ::bosdyn::api::graph_nav::GetRecordStatusResponse* resp) {
               return service->GetRecordStatus(ctx, req, resp);
             }, this)));
}

GraphNavRecordingService::Service::~Service() {
}

::grpc::Status GraphNavRecordingService::Service::StartRecording(::grpc::ServerContext* context, const ::bosdyn::api::graph_nav::StartRecordingRequest* request, ::bosdyn::api::graph_nav::StartRecordingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GraphNavRecordingService::Service::StopRecording(::grpc::ServerContext* context, const ::bosdyn::api::graph_nav::StopRecordingRequest* request, ::bosdyn::api::graph_nav::StopRecordingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GraphNavRecordingService::Service::CreateWaypoint(::grpc::ServerContext* context, const ::bosdyn::api::graph_nav::CreateWaypointRequest* request, ::bosdyn::api::graph_nav::CreateWaypointResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GraphNavRecordingService::Service::SetRecordingEnvironment(::grpc::ServerContext* context, const ::bosdyn::api::graph_nav::SetRecordingEnvironmentRequest* request, ::bosdyn::api::graph_nav::SetRecordingEnvironmentResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GraphNavRecordingService::Service::CreateEdge(::grpc::ServerContext* context, const ::bosdyn::api::graph_nav::CreateEdgeRequest* request, ::bosdyn::api::graph_nav::CreateEdgeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GraphNavRecordingService::Service::GetRecordStatus(::grpc::ServerContext* context, const ::bosdyn::api::graph_nav::GetRecordStatusRequest* request, ::bosdyn::api::graph_nav::GetRecordStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace bosdyn
}  // namespace api
}  // namespace graph_nav

