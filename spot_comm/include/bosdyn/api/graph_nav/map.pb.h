// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/graph_nav/map.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "bosdyn/api/geometry.pb.h"
#include "bosdyn/api/image.pb.h"
#include "bosdyn/api/local_grid.pb.h"
#include "bosdyn/api/point_cloud.pb.h"
#include "bosdyn/api/robot_state.pb.h"
#include "bosdyn/api/world_object.pb.h"
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto;
namespace bosdyn {
namespace api {
namespace graph_nav {
class Edge;
class EdgeDefaultTypeInternal;
extern EdgeDefaultTypeInternal _Edge_default_instance_;
class EdgeSnapshot;
class EdgeSnapshotDefaultTypeInternal;
extern EdgeSnapshotDefaultTypeInternal _EdgeSnapshot_default_instance_;
class EdgeSnapshot_Stance;
class EdgeSnapshot_StanceDefaultTypeInternal;
extern EdgeSnapshot_StanceDefaultTypeInternal _EdgeSnapshot_Stance_default_instance_;
class Edge_Annotations;
class Edge_AnnotationsDefaultTypeInternal;
extern Edge_AnnotationsDefaultTypeInternal _Edge_Annotations_default_instance_;
class Edge_Annotations_StairData;
class Edge_Annotations_StairDataDefaultTypeInternal;
extern Edge_Annotations_StairDataDefaultTypeInternal _Edge_Annotations_StairData_default_instance_;
class Edge_Annotations_StairData_StraightStaircase;
class Edge_Annotations_StairData_StraightStaircaseDefaultTypeInternal;
extern Edge_Annotations_StairData_StraightStaircaseDefaultTypeInternal _Edge_Annotations_StairData_StraightStaircase_default_instance_;
class Edge_Annotations_StairData_StraightStaircase_Stair;
class Edge_Annotations_StairData_StraightStaircase_StairDefaultTypeInternal;
extern Edge_Annotations_StairData_StraightStaircase_StairDefaultTypeInternal _Edge_Annotations_StairData_StraightStaircase_Stair_default_instance_;
class Edge_Id;
class Edge_IdDefaultTypeInternal;
extern Edge_IdDefaultTypeInternal _Edge_Id_default_instance_;
class Graph;
class GraphDefaultTypeInternal;
extern GraphDefaultTypeInternal _Graph_default_instance_;
class Waypoint;
class WaypointDefaultTypeInternal;
extern WaypointDefaultTypeInternal _Waypoint_default_instance_;
class WaypointSnapshot;
class WaypointSnapshotDefaultTypeInternal;
extern WaypointSnapshotDefaultTypeInternal _WaypointSnapshot_default_instance_;
class Waypoint_Annotations;
class Waypoint_AnnotationsDefaultTypeInternal;
extern Waypoint_AnnotationsDefaultTypeInternal _Waypoint_Annotations_default_instance_;
class Waypoint_Annotations_LocalizeRegion;
class Waypoint_Annotations_LocalizeRegionDefaultTypeInternal;
extern Waypoint_Annotations_LocalizeRegionDefaultTypeInternal _Waypoint_Annotations_LocalizeRegion_default_instance_;
class Waypoint_Annotations_LocalizeRegion_Circle2D;
class Waypoint_Annotations_LocalizeRegion_Circle2DDefaultTypeInternal;
extern Waypoint_Annotations_LocalizeRegion_Circle2DDefaultTypeInternal _Waypoint_Annotations_LocalizeRegion_Circle2D_default_instance_;
class Waypoint_Annotations_LocalizeRegion_Default;
class Waypoint_Annotations_LocalizeRegion_DefaultDefaultTypeInternal;
extern Waypoint_Annotations_LocalizeRegion_DefaultDefaultTypeInternal _Waypoint_Annotations_LocalizeRegion_Default_default_instance_;
class Waypoint_Annotations_LocalizeRegion_Empty;
class Waypoint_Annotations_LocalizeRegion_EmptyDefaultTypeInternal;
extern Waypoint_Annotations_LocalizeRegion_EmptyDefaultTypeInternal _Waypoint_Annotations_LocalizeRegion_Empty_default_instance_;
}  // namespace graph_nav
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> ::bosdyn::api::graph_nav::Edge* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::Edge>(Arena*);
template<> ::bosdyn::api::graph_nav::EdgeSnapshot* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::EdgeSnapshot>(Arena*);
template<> ::bosdyn::api::graph_nav::EdgeSnapshot_Stance* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::EdgeSnapshot_Stance>(Arena*);
template<> ::bosdyn::api::graph_nav::Edge_Annotations* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::Edge_Annotations>(Arena*);
template<> ::bosdyn::api::graph_nav::Edge_Annotations_StairData* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::Edge_Annotations_StairData>(Arena*);
template<> ::bosdyn::api::graph_nav::Edge_Annotations_StairData_StraightStaircase* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::Edge_Annotations_StairData_StraightStaircase>(Arena*);
template<> ::bosdyn::api::graph_nav::Edge_Annotations_StairData_StraightStaircase_Stair* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::Edge_Annotations_StairData_StraightStaircase_Stair>(Arena*);
template<> ::bosdyn::api::graph_nav::Edge_Id* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::Edge_Id>(Arena*);
template<> ::bosdyn::api::graph_nav::Graph* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::Graph>(Arena*);
template<> ::bosdyn::api::graph_nav::Waypoint* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::Waypoint>(Arena*);
template<> ::bosdyn::api::graph_nav::WaypointSnapshot* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::WaypointSnapshot>(Arena*);
template<> ::bosdyn::api::graph_nav::Waypoint_Annotations* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::Waypoint_Annotations>(Arena*);
template<> ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion>(Arena*);
template<> ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Circle2D* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Circle2D>(Arena*);
template<> ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Default* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Default>(Arena*);
template<> ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Empty* Arena::CreateMaybeMessage<::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Empty>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bosdyn {
namespace api {
namespace graph_nav {

enum Edge_Annotations_DirectionConstraint : int {
  Edge_Annotations_DirectionConstraint_DIRECTION_CONSTRAINT_UNKNOWN = 0,
  Edge_Annotations_DirectionConstraint_DIRECTION_CONSTRAINT_NO_TURN = 1,
  Edge_Annotations_DirectionConstraint_DIRECTION_CONSTRAINT_FORWARD = 2,
  Edge_Annotations_DirectionConstraint_DIRECTION_CONSTRAINT_REVERSE = 3,
  Edge_Annotations_DirectionConstraint_DIRECTION_CONSTRAINT_NONE = 4,
  Edge_Annotations_DirectionConstraint_Edge_Annotations_DirectionConstraint_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Edge_Annotations_DirectionConstraint_Edge_Annotations_DirectionConstraint_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Edge_Annotations_DirectionConstraint_IsValid(int value);
constexpr Edge_Annotations_DirectionConstraint Edge_Annotations_DirectionConstraint_DirectionConstraint_MIN = Edge_Annotations_DirectionConstraint_DIRECTION_CONSTRAINT_UNKNOWN;
constexpr Edge_Annotations_DirectionConstraint Edge_Annotations_DirectionConstraint_DirectionConstraint_MAX = Edge_Annotations_DirectionConstraint_DIRECTION_CONSTRAINT_NONE;
constexpr int Edge_Annotations_DirectionConstraint_DirectionConstraint_ARRAYSIZE = Edge_Annotations_DirectionConstraint_DirectionConstraint_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Edge_Annotations_DirectionConstraint_descriptor();
template<typename T>
inline const std::string& Edge_Annotations_DirectionConstraint_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Edge_Annotations_DirectionConstraint>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Edge_Annotations_DirectionConstraint_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Edge_Annotations_DirectionConstraint_descriptor(), enum_t_value);
}
inline bool Edge_Annotations_DirectionConstraint_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Edge_Annotations_DirectionConstraint* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Edge_Annotations_DirectionConstraint>(
    Edge_Annotations_DirectionConstraint_descriptor(), name, value);
}
enum AnnotationState : int {
  ANNOTATION_STATE_UNKNOWN = 0,
  ANNOTATION_STATE_SET = 1,
  ANNOTATION_STATE_NONE = 2,
  AnnotationState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AnnotationState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AnnotationState_IsValid(int value);
constexpr AnnotationState AnnotationState_MIN = ANNOTATION_STATE_UNKNOWN;
constexpr AnnotationState AnnotationState_MAX = ANNOTATION_STATE_NONE;
constexpr int AnnotationState_ARRAYSIZE = AnnotationState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AnnotationState_descriptor();
template<typename T>
inline const std::string& AnnotationState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AnnotationState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AnnotationState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AnnotationState_descriptor(), enum_t_value);
}
inline bool AnnotationState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AnnotationState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AnnotationState>(
    AnnotationState_descriptor(), name, value);
}
// ===================================================================

class Waypoint_Annotations_LocalizeRegion_Default PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.Default) */ {
 public:
  inline Waypoint_Annotations_LocalizeRegion_Default() : Waypoint_Annotations_LocalizeRegion_Default(nullptr) {}
  virtual ~Waypoint_Annotations_LocalizeRegion_Default();

  Waypoint_Annotations_LocalizeRegion_Default(const Waypoint_Annotations_LocalizeRegion_Default& from);
  Waypoint_Annotations_LocalizeRegion_Default(Waypoint_Annotations_LocalizeRegion_Default&& from) noexcept
    : Waypoint_Annotations_LocalizeRegion_Default() {
    *this = ::std::move(from);
  }

  inline Waypoint_Annotations_LocalizeRegion_Default& operator=(const Waypoint_Annotations_LocalizeRegion_Default& from) {
    CopyFrom(from);
    return *this;
  }
  inline Waypoint_Annotations_LocalizeRegion_Default& operator=(Waypoint_Annotations_LocalizeRegion_Default&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Waypoint_Annotations_LocalizeRegion_Default& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Waypoint_Annotations_LocalizeRegion_Default* internal_default_instance() {
    return reinterpret_cast<const Waypoint_Annotations_LocalizeRegion_Default*>(
               &_Waypoint_Annotations_LocalizeRegion_Default_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Waypoint_Annotations_LocalizeRegion_Default& a, Waypoint_Annotations_LocalizeRegion_Default& b) {
    a.Swap(&b);
  }
  inline void Swap(Waypoint_Annotations_LocalizeRegion_Default* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Waypoint_Annotations_LocalizeRegion_Default* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Waypoint_Annotations_LocalizeRegion_Default* New() const final {
    return CreateMaybeMessage<Waypoint_Annotations_LocalizeRegion_Default>(nullptr);
  }

  Waypoint_Annotations_LocalizeRegion_Default* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Waypoint_Annotations_LocalizeRegion_Default>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Waypoint_Annotations_LocalizeRegion_Default& from);
  void MergeFrom(const Waypoint_Annotations_LocalizeRegion_Default& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Waypoint_Annotations_LocalizeRegion_Default* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.Default";
  }
  protected:
  explicit Waypoint_Annotations_LocalizeRegion_Default(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.Default)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto;
};
// -------------------------------------------------------------------

class Waypoint_Annotations_LocalizeRegion_Empty PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.Empty) */ {
 public:
  inline Waypoint_Annotations_LocalizeRegion_Empty() : Waypoint_Annotations_LocalizeRegion_Empty(nullptr) {}
  virtual ~Waypoint_Annotations_LocalizeRegion_Empty();

  Waypoint_Annotations_LocalizeRegion_Empty(const Waypoint_Annotations_LocalizeRegion_Empty& from);
  Waypoint_Annotations_LocalizeRegion_Empty(Waypoint_Annotations_LocalizeRegion_Empty&& from) noexcept
    : Waypoint_Annotations_LocalizeRegion_Empty() {
    *this = ::std::move(from);
  }

  inline Waypoint_Annotations_LocalizeRegion_Empty& operator=(const Waypoint_Annotations_LocalizeRegion_Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Waypoint_Annotations_LocalizeRegion_Empty& operator=(Waypoint_Annotations_LocalizeRegion_Empty&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Waypoint_Annotations_LocalizeRegion_Empty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Waypoint_Annotations_LocalizeRegion_Empty* internal_default_instance() {
    return reinterpret_cast<const Waypoint_Annotations_LocalizeRegion_Empty*>(
               &_Waypoint_Annotations_LocalizeRegion_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Waypoint_Annotations_LocalizeRegion_Empty& a, Waypoint_Annotations_LocalizeRegion_Empty& b) {
    a.Swap(&b);
  }
  inline void Swap(Waypoint_Annotations_LocalizeRegion_Empty* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Waypoint_Annotations_LocalizeRegion_Empty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Waypoint_Annotations_LocalizeRegion_Empty* New() const final {
    return CreateMaybeMessage<Waypoint_Annotations_LocalizeRegion_Empty>(nullptr);
  }

  Waypoint_Annotations_LocalizeRegion_Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Waypoint_Annotations_LocalizeRegion_Empty>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Waypoint_Annotations_LocalizeRegion_Empty& from);
  void MergeFrom(const Waypoint_Annotations_LocalizeRegion_Empty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Waypoint_Annotations_LocalizeRegion_Empty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.Empty";
  }
  protected:
  explicit Waypoint_Annotations_LocalizeRegion_Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.Empty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto;
};
// -------------------------------------------------------------------

class Waypoint_Annotations_LocalizeRegion_Circle2D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.Circle2D) */ {
 public:
  inline Waypoint_Annotations_LocalizeRegion_Circle2D() : Waypoint_Annotations_LocalizeRegion_Circle2D(nullptr) {}
  virtual ~Waypoint_Annotations_LocalizeRegion_Circle2D();

  Waypoint_Annotations_LocalizeRegion_Circle2D(const Waypoint_Annotations_LocalizeRegion_Circle2D& from);
  Waypoint_Annotations_LocalizeRegion_Circle2D(Waypoint_Annotations_LocalizeRegion_Circle2D&& from) noexcept
    : Waypoint_Annotations_LocalizeRegion_Circle2D() {
    *this = ::std::move(from);
  }

  inline Waypoint_Annotations_LocalizeRegion_Circle2D& operator=(const Waypoint_Annotations_LocalizeRegion_Circle2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Waypoint_Annotations_LocalizeRegion_Circle2D& operator=(Waypoint_Annotations_LocalizeRegion_Circle2D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Waypoint_Annotations_LocalizeRegion_Circle2D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Waypoint_Annotations_LocalizeRegion_Circle2D* internal_default_instance() {
    return reinterpret_cast<const Waypoint_Annotations_LocalizeRegion_Circle2D*>(
               &_Waypoint_Annotations_LocalizeRegion_Circle2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Waypoint_Annotations_LocalizeRegion_Circle2D& a, Waypoint_Annotations_LocalizeRegion_Circle2D& b) {
    a.Swap(&b);
  }
  inline void Swap(Waypoint_Annotations_LocalizeRegion_Circle2D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Waypoint_Annotations_LocalizeRegion_Circle2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Waypoint_Annotations_LocalizeRegion_Circle2D* New() const final {
    return CreateMaybeMessage<Waypoint_Annotations_LocalizeRegion_Circle2D>(nullptr);
  }

  Waypoint_Annotations_LocalizeRegion_Circle2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Waypoint_Annotations_LocalizeRegion_Circle2D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Waypoint_Annotations_LocalizeRegion_Circle2D& from);
  void MergeFrom(const Waypoint_Annotations_LocalizeRegion_Circle2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Waypoint_Annotations_LocalizeRegion_Circle2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.Circle2D";
  }
  protected:
  explicit Waypoint_Annotations_LocalizeRegion_Circle2D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDist2DFieldNumber = 1,
  };
  // double dist_2d = 1;
  void clear_dist_2d();
  double dist_2d() const;
  void set_dist_2d(double value);
  private:
  double _internal_dist_2d() const;
  void _internal_set_dist_2d(double value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.Circle2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double dist_2d_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto;
};
// -------------------------------------------------------------------

class Waypoint_Annotations_LocalizeRegion PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion) */ {
 public:
  inline Waypoint_Annotations_LocalizeRegion() : Waypoint_Annotations_LocalizeRegion(nullptr) {}
  virtual ~Waypoint_Annotations_LocalizeRegion();

  Waypoint_Annotations_LocalizeRegion(const Waypoint_Annotations_LocalizeRegion& from);
  Waypoint_Annotations_LocalizeRegion(Waypoint_Annotations_LocalizeRegion&& from) noexcept
    : Waypoint_Annotations_LocalizeRegion() {
    *this = ::std::move(from);
  }

  inline Waypoint_Annotations_LocalizeRegion& operator=(const Waypoint_Annotations_LocalizeRegion& from) {
    CopyFrom(from);
    return *this;
  }
  inline Waypoint_Annotations_LocalizeRegion& operator=(Waypoint_Annotations_LocalizeRegion&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Waypoint_Annotations_LocalizeRegion& default_instance();

  enum RegionCase {
    kDefaultRegion = 2,
    kEmpty = 3,
    kCircle = 4,
    REGION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Waypoint_Annotations_LocalizeRegion* internal_default_instance() {
    return reinterpret_cast<const Waypoint_Annotations_LocalizeRegion*>(
               &_Waypoint_Annotations_LocalizeRegion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Waypoint_Annotations_LocalizeRegion& a, Waypoint_Annotations_LocalizeRegion& b) {
    a.Swap(&b);
  }
  inline void Swap(Waypoint_Annotations_LocalizeRegion* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Waypoint_Annotations_LocalizeRegion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Waypoint_Annotations_LocalizeRegion* New() const final {
    return CreateMaybeMessage<Waypoint_Annotations_LocalizeRegion>(nullptr);
  }

  Waypoint_Annotations_LocalizeRegion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Waypoint_Annotations_LocalizeRegion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Waypoint_Annotations_LocalizeRegion& from);
  void MergeFrom(const Waypoint_Annotations_LocalizeRegion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Waypoint_Annotations_LocalizeRegion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion";
  }
  protected:
  explicit Waypoint_Annotations_LocalizeRegion(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Waypoint_Annotations_LocalizeRegion_Default Default;
  typedef Waypoint_Annotations_LocalizeRegion_Empty Empty;
  typedef Waypoint_Annotations_LocalizeRegion_Circle2D Circle2D;

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
    kDefaultRegionFieldNumber = 2,
    kEmptyFieldNumber = 3,
    kCircleFieldNumber = 4,
  };
  // .bosdyn.api.graph_nav.AnnotationState state = 1;
  void clear_state();
  ::bosdyn::api::graph_nav::AnnotationState state() const;
  void set_state(::bosdyn::api::graph_nav::AnnotationState value);
  private:
  ::bosdyn::api::graph_nav::AnnotationState _internal_state() const;
  void _internal_set_state(::bosdyn::api::graph_nav::AnnotationState value);
  public:

  // .bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.Default default_region = 2;
  bool has_default_region() const;
  private:
  bool _internal_has_default_region() const;
  public:
  void clear_default_region();
  const ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Default& default_region() const;
  ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Default* release_default_region();
  ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Default* mutable_default_region();
  void set_allocated_default_region(::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Default* default_region);
  private:
  const ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Default& _internal_default_region() const;
  ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Default* _internal_mutable_default_region();
  public:
  void unsafe_arena_set_allocated_default_region(
      ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Default* default_region);
  ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Default* unsafe_arena_release_default_region();

  // .bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.Empty empty = 3;
  bool has_empty() const;
  private:
  bool _internal_has_empty() const;
  public:
  void clear_empty();
  const ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Empty& empty() const;
  ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Empty* release_empty();
  ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Empty* mutable_empty();
  void set_allocated_empty(::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Empty* empty);
  private:
  const ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Empty& _internal_empty() const;
  ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Empty* _internal_mutable_empty();
  public:
  void unsafe_arena_set_allocated_empty(
      ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Empty* empty);
  ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Empty* unsafe_arena_release_empty();

  // .bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.Circle2D circle = 4;
  bool has_circle() const;
  private:
  bool _internal_has_circle() const;
  public:
  void clear_circle();
  const ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Circle2D& circle() const;
  ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Circle2D* release_circle();
  ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Circle2D* mutable_circle();
  void set_allocated_circle(::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Circle2D* circle);
  private:
  const ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Circle2D& _internal_circle() const;
  ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Circle2D* _internal_mutable_circle();
  public:
  void unsafe_arena_set_allocated_circle(
      ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Circle2D* circle);
  ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Circle2D* unsafe_arena_release_circle();

  void clear_region();
  RegionCase region_case() const;
  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion)
 private:
  class _Internal;
  void set_has_default_region();
  void set_has_empty();
  void set_has_circle();

  inline bool has_region() const;
  inline void clear_has_region();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int state_;
  union RegionUnion {
    RegionUnion() {}
    ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Default* default_region_;
    ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Empty* empty_;
    ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Circle2D* circle_;
  } region_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto;
};
// -------------------------------------------------------------------

class Waypoint_Annotations PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.Waypoint.Annotations) */ {
 public:
  inline Waypoint_Annotations() : Waypoint_Annotations(nullptr) {}
  virtual ~Waypoint_Annotations();

  Waypoint_Annotations(const Waypoint_Annotations& from);
  Waypoint_Annotations(Waypoint_Annotations&& from) noexcept
    : Waypoint_Annotations() {
    *this = ::std::move(from);
  }

  inline Waypoint_Annotations& operator=(const Waypoint_Annotations& from) {
    CopyFrom(from);
    return *this;
  }
  inline Waypoint_Annotations& operator=(Waypoint_Annotations&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Waypoint_Annotations& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Waypoint_Annotations* internal_default_instance() {
    return reinterpret_cast<const Waypoint_Annotations*>(
               &_Waypoint_Annotations_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Waypoint_Annotations& a, Waypoint_Annotations& b) {
    a.Swap(&b);
  }
  inline void Swap(Waypoint_Annotations* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Waypoint_Annotations* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Waypoint_Annotations* New() const final {
    return CreateMaybeMessage<Waypoint_Annotations>(nullptr);
  }

  Waypoint_Annotations* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Waypoint_Annotations>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Waypoint_Annotations& from);
  void MergeFrom(const Waypoint_Annotations& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Waypoint_Annotations* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.Waypoint.Annotations";
  }
  protected:
  explicit Waypoint_Annotations(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Waypoint_Annotations_LocalizeRegion LocalizeRegion;

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kIcpVarianceFieldNumber = 2,
    kScanMatchRegionFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .bosdyn.api.SE3Covariance icp_variance = 2;
  bool has_icp_variance() const;
  private:
  bool _internal_has_icp_variance() const;
  public:
  void clear_icp_variance();
  const ::bosdyn::api::SE3Covariance& icp_variance() const;
  ::bosdyn::api::SE3Covariance* release_icp_variance();
  ::bosdyn::api::SE3Covariance* mutable_icp_variance();
  void set_allocated_icp_variance(::bosdyn::api::SE3Covariance* icp_variance);
  private:
  const ::bosdyn::api::SE3Covariance& _internal_icp_variance() const;
  ::bosdyn::api::SE3Covariance* _internal_mutable_icp_variance();
  public:
  void unsafe_arena_set_allocated_icp_variance(
      ::bosdyn::api::SE3Covariance* icp_variance);
  ::bosdyn::api::SE3Covariance* unsafe_arena_release_icp_variance();

  // .bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion scan_match_region = 3;
  bool has_scan_match_region() const;
  private:
  bool _internal_has_scan_match_region() const;
  public:
  void clear_scan_match_region();
  const ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion& scan_match_region() const;
  ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion* release_scan_match_region();
  ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion* mutable_scan_match_region();
  void set_allocated_scan_match_region(::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion* scan_match_region);
  private:
  const ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion& _internal_scan_match_region() const;
  ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion* _internal_mutable_scan_match_region();
  public:
  void unsafe_arena_set_allocated_scan_match_region(
      ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion* scan_match_region);
  ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion* unsafe_arena_release_scan_match_region();

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.Waypoint.Annotations)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::bosdyn::api::SE3Covariance* icp_variance_;
  ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion* scan_match_region_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto;
};
// -------------------------------------------------------------------

class Waypoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.Waypoint) */ {
 public:
  inline Waypoint() : Waypoint(nullptr) {}
  virtual ~Waypoint();

  Waypoint(const Waypoint& from);
  Waypoint(Waypoint&& from) noexcept
    : Waypoint() {
    *this = ::std::move(from);
  }

  inline Waypoint& operator=(const Waypoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline Waypoint& operator=(Waypoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Waypoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Waypoint* internal_default_instance() {
    return reinterpret_cast<const Waypoint*>(
               &_Waypoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Waypoint& a, Waypoint& b) {
    a.Swap(&b);
  }
  inline void Swap(Waypoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Waypoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Waypoint* New() const final {
    return CreateMaybeMessage<Waypoint>(nullptr);
  }

  Waypoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Waypoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Waypoint& from);
  void MergeFrom(const Waypoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Waypoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.Waypoint";
  }
  protected:
  explicit Waypoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Waypoint_Annotations Annotations;

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kSnapshotIdFieldNumber = 2,
    kWaypointTformKoFieldNumber = 3,
    kAnnotationsFieldNumber = 4,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string snapshot_id = 2;
  void clear_snapshot_id();
  const std::string& snapshot_id() const;
  void set_snapshot_id(const std::string& value);
  void set_snapshot_id(std::string&& value);
  void set_snapshot_id(const char* value);
  void set_snapshot_id(const char* value, size_t size);
  std::string* mutable_snapshot_id();
  std::string* release_snapshot_id();
  void set_allocated_snapshot_id(std::string* snapshot_id);
  private:
  const std::string& _internal_snapshot_id() const;
  void _internal_set_snapshot_id(const std::string& value);
  std::string* _internal_mutable_snapshot_id();
  public:

  // .bosdyn.api.SE3Pose waypoint_tform_ko = 3;
  bool has_waypoint_tform_ko() const;
  private:
  bool _internal_has_waypoint_tform_ko() const;
  public:
  void clear_waypoint_tform_ko();
  const ::bosdyn::api::SE3Pose& waypoint_tform_ko() const;
  ::bosdyn::api::SE3Pose* release_waypoint_tform_ko();
  ::bosdyn::api::SE3Pose* mutable_waypoint_tform_ko();
  void set_allocated_waypoint_tform_ko(::bosdyn::api::SE3Pose* waypoint_tform_ko);
  private:
  const ::bosdyn::api::SE3Pose& _internal_waypoint_tform_ko() const;
  ::bosdyn::api::SE3Pose* _internal_mutable_waypoint_tform_ko();
  public:
  void unsafe_arena_set_allocated_waypoint_tform_ko(
      ::bosdyn::api::SE3Pose* waypoint_tform_ko);
  ::bosdyn::api::SE3Pose* unsafe_arena_release_waypoint_tform_ko();

  // .bosdyn.api.graph_nav.Waypoint.Annotations annotations = 4;
  bool has_annotations() const;
  private:
  bool _internal_has_annotations() const;
  public:
  void clear_annotations();
  const ::bosdyn::api::graph_nav::Waypoint_Annotations& annotations() const;
  ::bosdyn::api::graph_nav::Waypoint_Annotations* release_annotations();
  ::bosdyn::api::graph_nav::Waypoint_Annotations* mutable_annotations();
  void set_allocated_annotations(::bosdyn::api::graph_nav::Waypoint_Annotations* annotations);
  private:
  const ::bosdyn::api::graph_nav::Waypoint_Annotations& _internal_annotations() const;
  ::bosdyn::api::graph_nav::Waypoint_Annotations* _internal_mutable_annotations();
  public:
  void unsafe_arena_set_allocated_annotations(
      ::bosdyn::api::graph_nav::Waypoint_Annotations* annotations);
  ::bosdyn::api::graph_nav::Waypoint_Annotations* unsafe_arena_release_annotations();

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.Waypoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snapshot_id_;
  ::bosdyn::api::SE3Pose* waypoint_tform_ko_;
  ::bosdyn::api::graph_nav::Waypoint_Annotations* annotations_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto;
};
// -------------------------------------------------------------------

class WaypointSnapshot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.WaypointSnapshot) */ {
 public:
  inline WaypointSnapshot() : WaypointSnapshot(nullptr) {}
  virtual ~WaypointSnapshot();

  WaypointSnapshot(const WaypointSnapshot& from);
  WaypointSnapshot(WaypointSnapshot&& from) noexcept
    : WaypointSnapshot() {
    *this = ::std::move(from);
  }

  inline WaypointSnapshot& operator=(const WaypointSnapshot& from) {
    CopyFrom(from);
    return *this;
  }
  inline WaypointSnapshot& operator=(WaypointSnapshot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WaypointSnapshot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WaypointSnapshot* internal_default_instance() {
    return reinterpret_cast<const WaypointSnapshot*>(
               &_WaypointSnapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(WaypointSnapshot& a, WaypointSnapshot& b) {
    a.Swap(&b);
  }
  inline void Swap(WaypointSnapshot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WaypointSnapshot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WaypointSnapshot* New() const final {
    return CreateMaybeMessage<WaypointSnapshot>(nullptr);
  }

  WaypointSnapshot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WaypointSnapshot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WaypointSnapshot& from);
  void MergeFrom(const WaypointSnapshot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WaypointSnapshot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.WaypointSnapshot";
  }
  protected:
  explicit WaypointSnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImagesFieldNumber = 2,
    kObjectsFieldNumber = 4,
    kRobotLocalGridsFieldNumber = 6,
    kIdFieldNumber = 1,
    kVersionIdFieldNumber = 9,
    kPointCloudFieldNumber = 3,
    kRobotStateFieldNumber = 5,
    kIsPointCloudProcessedFieldNumber = 8,
  };
  // repeated .bosdyn.api.ImageResponse images = 2;
  int images_size() const;
  private:
  int _internal_images_size() const;
  public:
  void clear_images();
  ::bosdyn::api::ImageResponse* mutable_images(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::ImageResponse >*
      mutable_images();
  private:
  const ::bosdyn::api::ImageResponse& _internal_images(int index) const;
  ::bosdyn::api::ImageResponse* _internal_add_images();
  public:
  const ::bosdyn::api::ImageResponse& images(int index) const;
  ::bosdyn::api::ImageResponse* add_images();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::ImageResponse >&
      images() const;

  // repeated .bosdyn.api.WorldObject objects = 4;
  int objects_size() const;
  private:
  int _internal_objects_size() const;
  public:
  void clear_objects();
  ::bosdyn::api::WorldObject* mutable_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::WorldObject >*
      mutable_objects();
  private:
  const ::bosdyn::api::WorldObject& _internal_objects(int index) const;
  ::bosdyn::api::WorldObject* _internal_add_objects();
  public:
  const ::bosdyn::api::WorldObject& objects(int index) const;
  ::bosdyn::api::WorldObject* add_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::WorldObject >&
      objects() const;

  // repeated .bosdyn.api.LocalGrid robot_local_grids = 6;
  int robot_local_grids_size() const;
  private:
  int _internal_robot_local_grids_size() const;
  public:
  void clear_robot_local_grids();
  ::bosdyn::api::LocalGrid* mutable_robot_local_grids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::LocalGrid >*
      mutable_robot_local_grids();
  private:
  const ::bosdyn::api::LocalGrid& _internal_robot_local_grids(int index) const;
  ::bosdyn::api::LocalGrid* _internal_add_robot_local_grids();
  public:
  const ::bosdyn::api::LocalGrid& robot_local_grids(int index) const;
  ::bosdyn::api::LocalGrid* add_robot_local_grids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::LocalGrid >&
      robot_local_grids() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string version_id = 9;
  void clear_version_id();
  const std::string& version_id() const;
  void set_version_id(const std::string& value);
  void set_version_id(std::string&& value);
  void set_version_id(const char* value);
  void set_version_id(const char* value, size_t size);
  std::string* mutable_version_id();
  std::string* release_version_id();
  void set_allocated_version_id(std::string* version_id);
  private:
  const std::string& _internal_version_id() const;
  void _internal_set_version_id(const std::string& value);
  std::string* _internal_mutable_version_id();
  public:

  // .bosdyn.api.PointCloud point_cloud = 3;
  bool has_point_cloud() const;
  private:
  bool _internal_has_point_cloud() const;
  public:
  void clear_point_cloud();
  const ::bosdyn::api::PointCloud& point_cloud() const;
  ::bosdyn::api::PointCloud* release_point_cloud();
  ::bosdyn::api::PointCloud* mutable_point_cloud();
  void set_allocated_point_cloud(::bosdyn::api::PointCloud* point_cloud);
  private:
  const ::bosdyn::api::PointCloud& _internal_point_cloud() const;
  ::bosdyn::api::PointCloud* _internal_mutable_point_cloud();
  public:
  void unsafe_arena_set_allocated_point_cloud(
      ::bosdyn::api::PointCloud* point_cloud);
  ::bosdyn::api::PointCloud* unsafe_arena_release_point_cloud();

  // .bosdyn.api.RobotState robot_state = 5;
  bool has_robot_state() const;
  private:
  bool _internal_has_robot_state() const;
  public:
  void clear_robot_state();
  const ::bosdyn::api::RobotState& robot_state() const;
  ::bosdyn::api::RobotState* release_robot_state();
  ::bosdyn::api::RobotState* mutable_robot_state();
  void set_allocated_robot_state(::bosdyn::api::RobotState* robot_state);
  private:
  const ::bosdyn::api::RobotState& _internal_robot_state() const;
  ::bosdyn::api::RobotState* _internal_mutable_robot_state();
  public:
  void unsafe_arena_set_allocated_robot_state(
      ::bosdyn::api::RobotState* robot_state);
  ::bosdyn::api::RobotState* unsafe_arena_release_robot_state();

  // bool is_point_cloud_processed = 8;
  void clear_is_point_cloud_processed();
  bool is_point_cloud_processed() const;
  void set_is_point_cloud_processed(bool value);
  private:
  bool _internal_is_point_cloud_processed() const;
  void _internal_set_is_point_cloud_processed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.WaypointSnapshot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::ImageResponse > images_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::WorldObject > objects_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::LocalGrid > robot_local_grids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_id_;
  ::bosdyn::api::PointCloud* point_cloud_;
  ::bosdyn::api::RobotState* robot_state_;
  bool is_point_cloud_processed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto;
};
// -------------------------------------------------------------------

class Edge_Id PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.Edge.Id) */ {
 public:
  inline Edge_Id() : Edge_Id(nullptr) {}
  virtual ~Edge_Id();

  Edge_Id(const Edge_Id& from);
  Edge_Id(Edge_Id&& from) noexcept
    : Edge_Id() {
    *this = ::std::move(from);
  }

  inline Edge_Id& operator=(const Edge_Id& from) {
    CopyFrom(from);
    return *this;
  }
  inline Edge_Id& operator=(Edge_Id&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Edge_Id& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Edge_Id* internal_default_instance() {
    return reinterpret_cast<const Edge_Id*>(
               &_Edge_Id_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Edge_Id& a, Edge_Id& b) {
    a.Swap(&b);
  }
  inline void Swap(Edge_Id* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Edge_Id* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Edge_Id* New() const final {
    return CreateMaybeMessage<Edge_Id>(nullptr);
  }

  Edge_Id* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Edge_Id>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Edge_Id& from);
  void MergeFrom(const Edge_Id& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Edge_Id* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.Edge.Id";
  }
  protected:
  explicit Edge_Id(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromWaypointFieldNumber = 1,
    kToWaypointFieldNumber = 2,
  };
  // string from_waypoint = 1;
  void clear_from_waypoint();
  const std::string& from_waypoint() const;
  void set_from_waypoint(const std::string& value);
  void set_from_waypoint(std::string&& value);
  void set_from_waypoint(const char* value);
  void set_from_waypoint(const char* value, size_t size);
  std::string* mutable_from_waypoint();
  std::string* release_from_waypoint();
  void set_allocated_from_waypoint(std::string* from_waypoint);
  private:
  const std::string& _internal_from_waypoint() const;
  void _internal_set_from_waypoint(const std::string& value);
  std::string* _internal_mutable_from_waypoint();
  public:

  // string to_waypoint = 2;
  void clear_to_waypoint();
  const std::string& to_waypoint() const;
  void set_to_waypoint(const std::string& value);
  void set_to_waypoint(std::string&& value);
  void set_to_waypoint(const char* value);
  void set_to_waypoint(const char* value, size_t size);
  std::string* mutable_to_waypoint();
  std::string* release_to_waypoint();
  void set_allocated_to_waypoint(std::string* to_waypoint);
  private:
  const std::string& _internal_to_waypoint() const;
  void _internal_set_to_waypoint(const std::string& value);
  std::string* _internal_mutable_to_waypoint();
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.Edge.Id)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_waypoint_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_waypoint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto;
};
// -------------------------------------------------------------------

class Edge_Annotations_StairData_StraightStaircase_Stair PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.Edge.Annotations.StairData.StraightStaircase.Stair) */ {
 public:
  inline Edge_Annotations_StairData_StraightStaircase_Stair() : Edge_Annotations_StairData_StraightStaircase_Stair(nullptr) {}
  virtual ~Edge_Annotations_StairData_StraightStaircase_Stair();

  Edge_Annotations_StairData_StraightStaircase_Stair(const Edge_Annotations_StairData_StraightStaircase_Stair& from);
  Edge_Annotations_StairData_StraightStaircase_Stair(Edge_Annotations_StairData_StraightStaircase_Stair&& from) noexcept
    : Edge_Annotations_StairData_StraightStaircase_Stair() {
    *this = ::std::move(from);
  }

  inline Edge_Annotations_StairData_StraightStaircase_Stair& operator=(const Edge_Annotations_StairData_StraightStaircase_Stair& from) {
    CopyFrom(from);
    return *this;
  }
  inline Edge_Annotations_StairData_StraightStaircase_Stair& operator=(Edge_Annotations_StairData_StraightStaircase_Stair&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Edge_Annotations_StairData_StraightStaircase_Stair& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Edge_Annotations_StairData_StraightStaircase_Stair* internal_default_instance() {
    return reinterpret_cast<const Edge_Annotations_StairData_StraightStaircase_Stair*>(
               &_Edge_Annotations_StairData_StraightStaircase_Stair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Edge_Annotations_StairData_StraightStaircase_Stair& a, Edge_Annotations_StairData_StraightStaircase_Stair& b) {
    a.Swap(&b);
  }
  inline void Swap(Edge_Annotations_StairData_StraightStaircase_Stair* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Edge_Annotations_StairData_StraightStaircase_Stair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Edge_Annotations_StairData_StraightStaircase_Stair* New() const final {
    return CreateMaybeMessage<Edge_Annotations_StairData_StraightStaircase_Stair>(nullptr);
  }

  Edge_Annotations_StairData_StraightStaircase_Stair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Edge_Annotations_StairData_StraightStaircase_Stair>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Edge_Annotations_StairData_StraightStaircase_Stair& from);
  void MergeFrom(const Edge_Annotations_StairData_StraightStaircase_Stair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Edge_Annotations_StairData_StraightStaircase_Stair* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.Edge.Annotations.StairData.StraightStaircase.Stair";
  }
  protected:
  explicit Edge_Annotations_StairData_StraightStaircase_Stair(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRiseFieldNumber = 1,
    kRunFieldNumber = 2,
  };
  // float rise = 1;
  void clear_rise();
  float rise() const;
  void set_rise(float value);
  private:
  float _internal_rise() const;
  void _internal_set_rise(float value);
  public:

  // float run = 2;
  void clear_run();
  float run() const;
  void set_run(float value);
  private:
  float _internal_run() const;
  void _internal_set_run(float value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.Edge.Annotations.StairData.StraightStaircase.Stair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float rise_;
  float run_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto;
};
// -------------------------------------------------------------------

class Edge_Annotations_StairData_StraightStaircase PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.Edge.Annotations.StairData.StraightStaircase) */ {
 public:
  inline Edge_Annotations_StairData_StraightStaircase() : Edge_Annotations_StairData_StraightStaircase(nullptr) {}
  virtual ~Edge_Annotations_StairData_StraightStaircase();

  Edge_Annotations_StairData_StraightStaircase(const Edge_Annotations_StairData_StraightStaircase& from);
  Edge_Annotations_StairData_StraightStaircase(Edge_Annotations_StairData_StraightStaircase&& from) noexcept
    : Edge_Annotations_StairData_StraightStaircase() {
    *this = ::std::move(from);
  }

  inline Edge_Annotations_StairData_StraightStaircase& operator=(const Edge_Annotations_StairData_StraightStaircase& from) {
    CopyFrom(from);
    return *this;
  }
  inline Edge_Annotations_StairData_StraightStaircase& operator=(Edge_Annotations_StairData_StraightStaircase&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Edge_Annotations_StairData_StraightStaircase& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Edge_Annotations_StairData_StraightStaircase* internal_default_instance() {
    return reinterpret_cast<const Edge_Annotations_StairData_StraightStaircase*>(
               &_Edge_Annotations_StairData_StraightStaircase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Edge_Annotations_StairData_StraightStaircase& a, Edge_Annotations_StairData_StraightStaircase& b) {
    a.Swap(&b);
  }
  inline void Swap(Edge_Annotations_StairData_StraightStaircase* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Edge_Annotations_StairData_StraightStaircase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Edge_Annotations_StairData_StraightStaircase* New() const final {
    return CreateMaybeMessage<Edge_Annotations_StairData_StraightStaircase>(nullptr);
  }

  Edge_Annotations_StairData_StraightStaircase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Edge_Annotations_StairData_StraightStaircase>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Edge_Annotations_StairData_StraightStaircase& from);
  void MergeFrom(const Edge_Annotations_StairData_StraightStaircase& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Edge_Annotations_StairData_StraightStaircase* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.Edge.Annotations.StairData.StraightStaircase";
  }
  protected:
  explicit Edge_Annotations_StairData_StraightStaircase(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Edge_Annotations_StairData_StraightStaircase_Stair Stair;

  // accessors -------------------------------------------------------

  enum : int {
    kStairsFieldNumber = 2,
    kFromKoTformStairsFieldNumber = 1,
  };
  // repeated .bosdyn.api.graph_nav.Edge.Annotations.StairData.StraightStaircase.Stair stairs = 2;
  int stairs_size() const;
  private:
  int _internal_stairs_size() const;
  public:
  void clear_stairs();
  ::bosdyn::api::graph_nav::Edge_Annotations_StairData_StraightStaircase_Stair* mutable_stairs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::Edge_Annotations_StairData_StraightStaircase_Stair >*
      mutable_stairs();
  private:
  const ::bosdyn::api::graph_nav::Edge_Annotations_StairData_StraightStaircase_Stair& _internal_stairs(int index) const;
  ::bosdyn::api::graph_nav::Edge_Annotations_StairData_StraightStaircase_Stair* _internal_add_stairs();
  public:
  const ::bosdyn::api::graph_nav::Edge_Annotations_StairData_StraightStaircase_Stair& stairs(int index) const;
  ::bosdyn::api::graph_nav::Edge_Annotations_StairData_StraightStaircase_Stair* add_stairs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::Edge_Annotations_StairData_StraightStaircase_Stair >&
      stairs() const;

  // .bosdyn.api.SE3Pose from_ko_tform_stairs = 1;
  bool has_from_ko_tform_stairs() const;
  private:
  bool _internal_has_from_ko_tform_stairs() const;
  public:
  void clear_from_ko_tform_stairs();
  const ::bosdyn::api::SE3Pose& from_ko_tform_stairs() const;
  ::bosdyn::api::SE3Pose* release_from_ko_tform_stairs();
  ::bosdyn::api::SE3Pose* mutable_from_ko_tform_stairs();
  void set_allocated_from_ko_tform_stairs(::bosdyn::api::SE3Pose* from_ko_tform_stairs);
  private:
  const ::bosdyn::api::SE3Pose& _internal_from_ko_tform_stairs() const;
  ::bosdyn::api::SE3Pose* _internal_mutable_from_ko_tform_stairs();
  public:
  void unsafe_arena_set_allocated_from_ko_tform_stairs(
      ::bosdyn::api::SE3Pose* from_ko_tform_stairs);
  ::bosdyn::api::SE3Pose* unsafe_arena_release_from_ko_tform_stairs();

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.Edge.Annotations.StairData.StraightStaircase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::Edge_Annotations_StairData_StraightStaircase_Stair > stairs_;
  ::bosdyn::api::SE3Pose* from_ko_tform_stairs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto;
};
// -------------------------------------------------------------------

class Edge_Annotations_StairData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.Edge.Annotations.StairData) */ {
 public:
  inline Edge_Annotations_StairData() : Edge_Annotations_StairData(nullptr) {}
  virtual ~Edge_Annotations_StairData();

  Edge_Annotations_StairData(const Edge_Annotations_StairData& from);
  Edge_Annotations_StairData(Edge_Annotations_StairData&& from) noexcept
    : Edge_Annotations_StairData() {
    *this = ::std::move(from);
  }

  inline Edge_Annotations_StairData& operator=(const Edge_Annotations_StairData& from) {
    CopyFrom(from);
    return *this;
  }
  inline Edge_Annotations_StairData& operator=(Edge_Annotations_StairData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Edge_Annotations_StairData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Edge_Annotations_StairData* internal_default_instance() {
    return reinterpret_cast<const Edge_Annotations_StairData*>(
               &_Edge_Annotations_StairData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Edge_Annotations_StairData& a, Edge_Annotations_StairData& b) {
    a.Swap(&b);
  }
  inline void Swap(Edge_Annotations_StairData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Edge_Annotations_StairData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Edge_Annotations_StairData* New() const final {
    return CreateMaybeMessage<Edge_Annotations_StairData>(nullptr);
  }

  Edge_Annotations_StairData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Edge_Annotations_StairData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Edge_Annotations_StairData& from);
  void MergeFrom(const Edge_Annotations_StairData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Edge_Annotations_StairData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.Edge.Annotations.StairData";
  }
  protected:
  explicit Edge_Annotations_StairData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Edge_Annotations_StairData_StraightStaircase StraightStaircase;

  // accessors -------------------------------------------------------

  enum : int {
    kStraightStaircaseFieldNumber = 2,
    kStateFieldNumber = 1,
  };
  // .bosdyn.api.graph_nav.Edge.Annotations.StairData.StraightStaircase straight_staircase = 2;
  bool has_straight_staircase() const;
  private:
  bool _internal_has_straight_staircase() const;
  public:
  void clear_straight_staircase();
  const ::bosdyn::api::graph_nav::Edge_Annotations_StairData_StraightStaircase& straight_staircase() const;
  ::bosdyn::api::graph_nav::Edge_Annotations_StairData_StraightStaircase* release_straight_staircase();
  ::bosdyn::api::graph_nav::Edge_Annotations_StairData_StraightStaircase* mutable_straight_staircase();
  void set_allocated_straight_staircase(::bosdyn::api::graph_nav::Edge_Annotations_StairData_StraightStaircase* straight_staircase);
  private:
  const ::bosdyn::api::graph_nav::Edge_Annotations_StairData_StraightStaircase& _internal_straight_staircase() const;
  ::bosdyn::api::graph_nav::Edge_Annotations_StairData_StraightStaircase* _internal_mutable_straight_staircase();
  public:
  void unsafe_arena_set_allocated_straight_staircase(
      ::bosdyn::api::graph_nav::Edge_Annotations_StairData_StraightStaircase* straight_staircase);
  ::bosdyn::api::graph_nav::Edge_Annotations_StairData_StraightStaircase* unsafe_arena_release_straight_staircase();

  // .bosdyn.api.graph_nav.AnnotationState state = 1;
  void clear_state();
  ::bosdyn::api::graph_nav::AnnotationState state() const;
  void set_state(::bosdyn::api::graph_nav::AnnotationState value);
  private:
  ::bosdyn::api::graph_nav::AnnotationState _internal_state() const;
  void _internal_set_state(::bosdyn::api::graph_nav::AnnotationState value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.Edge.Annotations.StairData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::graph_nav::Edge_Annotations_StairData_StraightStaircase* straight_staircase_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto;
};
// -------------------------------------------------------------------

class Edge_Annotations PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.Edge.Annotations) */ {
 public:
  inline Edge_Annotations() : Edge_Annotations(nullptr) {}
  virtual ~Edge_Annotations();

  Edge_Annotations(const Edge_Annotations& from);
  Edge_Annotations(Edge_Annotations&& from) noexcept
    : Edge_Annotations() {
    *this = ::std::move(from);
  }

  inline Edge_Annotations& operator=(const Edge_Annotations& from) {
    CopyFrom(from);
    return *this;
  }
  inline Edge_Annotations& operator=(Edge_Annotations&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Edge_Annotations& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Edge_Annotations* internal_default_instance() {
    return reinterpret_cast<const Edge_Annotations*>(
               &_Edge_Annotations_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Edge_Annotations& a, Edge_Annotations& b) {
    a.Swap(&b);
  }
  inline void Swap(Edge_Annotations* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Edge_Annotations* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Edge_Annotations* New() const final {
    return CreateMaybeMessage<Edge_Annotations>(nullptr);
  }

  Edge_Annotations* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Edge_Annotations>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Edge_Annotations& from);
  void MergeFrom(const Edge_Annotations& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Edge_Annotations* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.Edge.Annotations";
  }
  protected:
  explicit Edge_Annotations(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Edge_Annotations_StairData StairData;

  typedef Edge_Annotations_DirectionConstraint DirectionConstraint;
  static constexpr DirectionConstraint DIRECTION_CONSTRAINT_UNKNOWN =
    Edge_Annotations_DirectionConstraint_DIRECTION_CONSTRAINT_UNKNOWN;
  static constexpr DirectionConstraint DIRECTION_CONSTRAINT_NO_TURN =
    Edge_Annotations_DirectionConstraint_DIRECTION_CONSTRAINT_NO_TURN;
  static constexpr DirectionConstraint DIRECTION_CONSTRAINT_FORWARD =
    Edge_Annotations_DirectionConstraint_DIRECTION_CONSTRAINT_FORWARD;
  static constexpr DirectionConstraint DIRECTION_CONSTRAINT_REVERSE =
    Edge_Annotations_DirectionConstraint_DIRECTION_CONSTRAINT_REVERSE;
  static constexpr DirectionConstraint DIRECTION_CONSTRAINT_NONE =
    Edge_Annotations_DirectionConstraint_DIRECTION_CONSTRAINT_NONE;
  static inline bool DirectionConstraint_IsValid(int value) {
    return Edge_Annotations_DirectionConstraint_IsValid(value);
  }
  static constexpr DirectionConstraint DirectionConstraint_MIN =
    Edge_Annotations_DirectionConstraint_DirectionConstraint_MIN;
  static constexpr DirectionConstraint DirectionConstraint_MAX =
    Edge_Annotations_DirectionConstraint_DirectionConstraint_MAX;
  static constexpr int DirectionConstraint_ARRAYSIZE =
    Edge_Annotations_DirectionConstraint_DirectionConstraint_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DirectionConstraint_descriptor() {
    return Edge_Annotations_DirectionConstraint_descriptor();
  }
  template<typename T>
  static inline const std::string& DirectionConstraint_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DirectionConstraint>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DirectionConstraint_Name.");
    return Edge_Annotations_DirectionConstraint_Name(enum_t_value);
  }
  static inline bool DirectionConstraint_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DirectionConstraint* value) {
    return Edge_Annotations_DirectionConstraint_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kVelLimitFieldNumber = 1,
    kStairsFieldNumber = 2,
    kRequireAlignmentFieldNumber = 5,
    kFlatGroundFieldNumber = 6,
    kGroundMuHintFieldNumber = 7,
    kGratedFloorFieldNumber = 8,
    kDirectionConstraintFieldNumber = 4,
  };
  // .bosdyn.api.SE2VelocityLimit vel_limit = 1;
  bool has_vel_limit() const;
  private:
  bool _internal_has_vel_limit() const;
  public:
  void clear_vel_limit();
  const ::bosdyn::api::SE2VelocityLimit& vel_limit() const;
  ::bosdyn::api::SE2VelocityLimit* release_vel_limit();
  ::bosdyn::api::SE2VelocityLimit* mutable_vel_limit();
  void set_allocated_vel_limit(::bosdyn::api::SE2VelocityLimit* vel_limit);
  private:
  const ::bosdyn::api::SE2VelocityLimit& _internal_vel_limit() const;
  ::bosdyn::api::SE2VelocityLimit* _internal_mutable_vel_limit();
  public:
  void unsafe_arena_set_allocated_vel_limit(
      ::bosdyn::api::SE2VelocityLimit* vel_limit);
  ::bosdyn::api::SE2VelocityLimit* unsafe_arena_release_vel_limit();

  // .bosdyn.api.graph_nav.Edge.Annotations.StairData stairs = 2;
  bool has_stairs() const;
  private:
  bool _internal_has_stairs() const;
  public:
  void clear_stairs();
  const ::bosdyn::api::graph_nav::Edge_Annotations_StairData& stairs() const;
  ::bosdyn::api::graph_nav::Edge_Annotations_StairData* release_stairs();
  ::bosdyn::api::graph_nav::Edge_Annotations_StairData* mutable_stairs();
  void set_allocated_stairs(::bosdyn::api::graph_nav::Edge_Annotations_StairData* stairs);
  private:
  const ::bosdyn::api::graph_nav::Edge_Annotations_StairData& _internal_stairs() const;
  ::bosdyn::api::graph_nav::Edge_Annotations_StairData* _internal_mutable_stairs();
  public:
  void unsafe_arena_set_allocated_stairs(
      ::bosdyn::api::graph_nav::Edge_Annotations_StairData* stairs);
  ::bosdyn::api::graph_nav::Edge_Annotations_StairData* unsafe_arena_release_stairs();

  // .google.protobuf.BoolValue require_alignment = 5;
  bool has_require_alignment() const;
  private:
  bool _internal_has_require_alignment() const;
  public:
  void clear_require_alignment();
  const PROTOBUF_NAMESPACE_ID::BoolValue& require_alignment() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_require_alignment();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_require_alignment();
  void set_allocated_require_alignment(PROTOBUF_NAMESPACE_ID::BoolValue* require_alignment);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_require_alignment() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_require_alignment();
  public:
  void unsafe_arena_set_allocated_require_alignment(
      PROTOBUF_NAMESPACE_ID::BoolValue* require_alignment);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_require_alignment();

  // .google.protobuf.BoolValue flat_ground = 6;
  bool has_flat_ground() const;
  private:
  bool _internal_has_flat_ground() const;
  public:
  void clear_flat_ground();
  const PROTOBUF_NAMESPACE_ID::BoolValue& flat_ground() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_flat_ground();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_flat_ground();
  void set_allocated_flat_ground(PROTOBUF_NAMESPACE_ID::BoolValue* flat_ground);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_flat_ground() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_flat_ground();
  public:
  void unsafe_arena_set_allocated_flat_ground(
      PROTOBUF_NAMESPACE_ID::BoolValue* flat_ground);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_flat_ground();

  // .google.protobuf.DoubleValue ground_mu_hint = 7;
  bool has_ground_mu_hint() const;
  private:
  bool _internal_has_ground_mu_hint() const;
  public:
  void clear_ground_mu_hint();
  const PROTOBUF_NAMESPACE_ID::DoubleValue& ground_mu_hint() const;
  PROTOBUF_NAMESPACE_ID::DoubleValue* release_ground_mu_hint();
  PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_ground_mu_hint();
  void set_allocated_ground_mu_hint(PROTOBUF_NAMESPACE_ID::DoubleValue* ground_mu_hint);
  private:
  const PROTOBUF_NAMESPACE_ID::DoubleValue& _internal_ground_mu_hint() const;
  PROTOBUF_NAMESPACE_ID::DoubleValue* _internal_mutable_ground_mu_hint();
  public:
  void unsafe_arena_set_allocated_ground_mu_hint(
      PROTOBUF_NAMESPACE_ID::DoubleValue* ground_mu_hint);
  PROTOBUF_NAMESPACE_ID::DoubleValue* unsafe_arena_release_ground_mu_hint();

  // .google.protobuf.BoolValue grated_floor = 8;
  bool has_grated_floor() const;
  private:
  bool _internal_has_grated_floor() const;
  public:
  void clear_grated_floor();
  const PROTOBUF_NAMESPACE_ID::BoolValue& grated_floor() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* release_grated_floor();
  PROTOBUF_NAMESPACE_ID::BoolValue* mutable_grated_floor();
  void set_allocated_grated_floor(PROTOBUF_NAMESPACE_ID::BoolValue* grated_floor);
  private:
  const PROTOBUF_NAMESPACE_ID::BoolValue& _internal_grated_floor() const;
  PROTOBUF_NAMESPACE_ID::BoolValue* _internal_mutable_grated_floor();
  public:
  void unsafe_arena_set_allocated_grated_floor(
      PROTOBUF_NAMESPACE_ID::BoolValue* grated_floor);
  PROTOBUF_NAMESPACE_ID::BoolValue* unsafe_arena_release_grated_floor();

  // .bosdyn.api.graph_nav.Edge.Annotations.DirectionConstraint direction_constraint = 4;
  void clear_direction_constraint();
  ::bosdyn::api::graph_nav::Edge_Annotations_DirectionConstraint direction_constraint() const;
  void set_direction_constraint(::bosdyn::api::graph_nav::Edge_Annotations_DirectionConstraint value);
  private:
  ::bosdyn::api::graph_nav::Edge_Annotations_DirectionConstraint _internal_direction_constraint() const;
  void _internal_set_direction_constraint(::bosdyn::api::graph_nav::Edge_Annotations_DirectionConstraint value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.Edge.Annotations)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::SE2VelocityLimit* vel_limit_;
  ::bosdyn::api::graph_nav::Edge_Annotations_StairData* stairs_;
  PROTOBUF_NAMESPACE_ID::BoolValue* require_alignment_;
  PROTOBUF_NAMESPACE_ID::BoolValue* flat_ground_;
  PROTOBUF_NAMESPACE_ID::DoubleValue* ground_mu_hint_;
  PROTOBUF_NAMESPACE_ID::BoolValue* grated_floor_;
  int direction_constraint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto;
};
// -------------------------------------------------------------------

class Edge PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.Edge) */ {
 public:
  inline Edge() : Edge(nullptr) {}
  virtual ~Edge();

  Edge(const Edge& from);
  Edge(Edge&& from) noexcept
    : Edge() {
    *this = ::std::move(from);
  }

  inline Edge& operator=(const Edge& from) {
    CopyFrom(from);
    return *this;
  }
  inline Edge& operator=(Edge&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Edge& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Edge* internal_default_instance() {
    return reinterpret_cast<const Edge*>(
               &_Edge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Edge& a, Edge& b) {
    a.Swap(&b);
  }
  inline void Swap(Edge* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Edge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Edge* New() const final {
    return CreateMaybeMessage<Edge>(nullptr);
  }

  Edge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Edge>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Edge& from);
  void MergeFrom(const Edge& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Edge* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.Edge";
  }
  protected:
  explicit Edge(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Edge_Id Id;
  typedef Edge_Annotations Annotations;

  // accessors -------------------------------------------------------

  enum : int {
    kSnapshotIdFieldNumber = 2,
    kIdFieldNumber = 1,
    kFromTformToFieldNumber = 3,
    kAnnotationsFieldNumber = 4,
  };
  // string snapshot_id = 2;
  void clear_snapshot_id();
  const std::string& snapshot_id() const;
  void set_snapshot_id(const std::string& value);
  void set_snapshot_id(std::string&& value);
  void set_snapshot_id(const char* value);
  void set_snapshot_id(const char* value, size_t size);
  std::string* mutable_snapshot_id();
  std::string* release_snapshot_id();
  void set_allocated_snapshot_id(std::string* snapshot_id);
  private:
  const std::string& _internal_snapshot_id() const;
  void _internal_set_snapshot_id(const std::string& value);
  std::string* _internal_mutable_snapshot_id();
  public:

  // .bosdyn.api.graph_nav.Edge.Id id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::bosdyn::api::graph_nav::Edge_Id& id() const;
  ::bosdyn::api::graph_nav::Edge_Id* release_id();
  ::bosdyn::api::graph_nav::Edge_Id* mutable_id();
  void set_allocated_id(::bosdyn::api::graph_nav::Edge_Id* id);
  private:
  const ::bosdyn::api::graph_nav::Edge_Id& _internal_id() const;
  ::bosdyn::api::graph_nav::Edge_Id* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::bosdyn::api::graph_nav::Edge_Id* id);
  ::bosdyn::api::graph_nav::Edge_Id* unsafe_arena_release_id();

  // .bosdyn.api.SE3Pose from_tform_to = 3;
  bool has_from_tform_to() const;
  private:
  bool _internal_has_from_tform_to() const;
  public:
  void clear_from_tform_to();
  const ::bosdyn::api::SE3Pose& from_tform_to() const;
  ::bosdyn::api::SE3Pose* release_from_tform_to();
  ::bosdyn::api::SE3Pose* mutable_from_tform_to();
  void set_allocated_from_tform_to(::bosdyn::api::SE3Pose* from_tform_to);
  private:
  const ::bosdyn::api::SE3Pose& _internal_from_tform_to() const;
  ::bosdyn::api::SE3Pose* _internal_mutable_from_tform_to();
  public:
  void unsafe_arena_set_allocated_from_tform_to(
      ::bosdyn::api::SE3Pose* from_tform_to);
  ::bosdyn::api::SE3Pose* unsafe_arena_release_from_tform_to();

  // .bosdyn.api.graph_nav.Edge.Annotations annotations = 4;
  bool has_annotations() const;
  private:
  bool _internal_has_annotations() const;
  public:
  void clear_annotations();
  const ::bosdyn::api::graph_nav::Edge_Annotations& annotations() const;
  ::bosdyn::api::graph_nav::Edge_Annotations* release_annotations();
  ::bosdyn::api::graph_nav::Edge_Annotations* mutable_annotations();
  void set_allocated_annotations(::bosdyn::api::graph_nav::Edge_Annotations* annotations);
  private:
  const ::bosdyn::api::graph_nav::Edge_Annotations& _internal_annotations() const;
  ::bosdyn::api::graph_nav::Edge_Annotations* _internal_mutable_annotations();
  public:
  void unsafe_arena_set_allocated_annotations(
      ::bosdyn::api::graph_nav::Edge_Annotations* annotations);
  ::bosdyn::api::graph_nav::Edge_Annotations* unsafe_arena_release_annotations();

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.Edge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snapshot_id_;
  ::bosdyn::api::graph_nav::Edge_Id* id_;
  ::bosdyn::api::SE3Pose* from_tform_to_;
  ::bosdyn::api::graph_nav::Edge_Annotations* annotations_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto;
};
// -------------------------------------------------------------------

class EdgeSnapshot_Stance PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.EdgeSnapshot.Stance) */ {
 public:
  inline EdgeSnapshot_Stance() : EdgeSnapshot_Stance(nullptr) {}
  virtual ~EdgeSnapshot_Stance();

  EdgeSnapshot_Stance(const EdgeSnapshot_Stance& from);
  EdgeSnapshot_Stance(EdgeSnapshot_Stance&& from) noexcept
    : EdgeSnapshot_Stance() {
    *this = ::std::move(from);
  }

  inline EdgeSnapshot_Stance& operator=(const EdgeSnapshot_Stance& from) {
    CopyFrom(from);
    return *this;
  }
  inline EdgeSnapshot_Stance& operator=(EdgeSnapshot_Stance&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EdgeSnapshot_Stance& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EdgeSnapshot_Stance* internal_default_instance() {
    return reinterpret_cast<const EdgeSnapshot_Stance*>(
               &_EdgeSnapshot_Stance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(EdgeSnapshot_Stance& a, EdgeSnapshot_Stance& b) {
    a.Swap(&b);
  }
  inline void Swap(EdgeSnapshot_Stance* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EdgeSnapshot_Stance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EdgeSnapshot_Stance* New() const final {
    return CreateMaybeMessage<EdgeSnapshot_Stance>(nullptr);
  }

  EdgeSnapshot_Stance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EdgeSnapshot_Stance>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EdgeSnapshot_Stance& from);
  void MergeFrom(const EdgeSnapshot_Stance& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EdgeSnapshot_Stance* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.EdgeSnapshot.Stance";
  }
  protected:
  explicit EdgeSnapshot_Stance(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFootStatesFieldNumber = 2,
    kTimestampFieldNumber = 1,
    kKoTformBodyFieldNumber = 3,
  };
  // repeated .bosdyn.api.FootState foot_states = 2;
  int foot_states_size() const;
  private:
  int _internal_foot_states_size() const;
  public:
  void clear_foot_states();
  ::bosdyn::api::FootState* mutable_foot_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::FootState >*
      mutable_foot_states();
  private:
  const ::bosdyn::api::FootState& _internal_foot_states(int index) const;
  ::bosdyn::api::FootState* _internal_add_foot_states();
  public:
  const ::bosdyn::api::FootState& foot_states(int index) const;
  ::bosdyn::api::FootState* add_foot_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::FootState >&
      foot_states() const;

  // .google.protobuf.Timestamp timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // .bosdyn.api.SE3Pose ko_tform_body = 3;
  bool has_ko_tform_body() const;
  private:
  bool _internal_has_ko_tform_body() const;
  public:
  void clear_ko_tform_body();
  const ::bosdyn::api::SE3Pose& ko_tform_body() const;
  ::bosdyn::api::SE3Pose* release_ko_tform_body();
  ::bosdyn::api::SE3Pose* mutable_ko_tform_body();
  void set_allocated_ko_tform_body(::bosdyn::api::SE3Pose* ko_tform_body);
  private:
  const ::bosdyn::api::SE3Pose& _internal_ko_tform_body() const;
  ::bosdyn::api::SE3Pose* _internal_mutable_ko_tform_body();
  public:
  void unsafe_arena_set_allocated_ko_tform_body(
      ::bosdyn::api::SE3Pose* ko_tform_body);
  ::bosdyn::api::SE3Pose* unsafe_arena_release_ko_tform_body();

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.EdgeSnapshot.Stance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::FootState > foot_states_;
  PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  ::bosdyn::api::SE3Pose* ko_tform_body_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto;
};
// -------------------------------------------------------------------

class EdgeSnapshot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.EdgeSnapshot) */ {
 public:
  inline EdgeSnapshot() : EdgeSnapshot(nullptr) {}
  virtual ~EdgeSnapshot();

  EdgeSnapshot(const EdgeSnapshot& from);
  EdgeSnapshot(EdgeSnapshot&& from) noexcept
    : EdgeSnapshot() {
    *this = ::std::move(from);
  }

  inline EdgeSnapshot& operator=(const EdgeSnapshot& from) {
    CopyFrom(from);
    return *this;
  }
  inline EdgeSnapshot& operator=(EdgeSnapshot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EdgeSnapshot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EdgeSnapshot* internal_default_instance() {
    return reinterpret_cast<const EdgeSnapshot*>(
               &_EdgeSnapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(EdgeSnapshot& a, EdgeSnapshot& b) {
    a.Swap(&b);
  }
  inline void Swap(EdgeSnapshot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EdgeSnapshot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EdgeSnapshot* New() const final {
    return CreateMaybeMessage<EdgeSnapshot>(nullptr);
  }

  EdgeSnapshot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EdgeSnapshot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EdgeSnapshot& from);
  void MergeFrom(const EdgeSnapshot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EdgeSnapshot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.EdgeSnapshot";
  }
  protected:
  explicit EdgeSnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef EdgeSnapshot_Stance Stance;

  // accessors -------------------------------------------------------

  enum : int {
    kStancesFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated .bosdyn.api.graph_nav.EdgeSnapshot.Stance stances = 2;
  int stances_size() const;
  private:
  int _internal_stances_size() const;
  public:
  void clear_stances();
  ::bosdyn::api::graph_nav::EdgeSnapshot_Stance* mutable_stances(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::EdgeSnapshot_Stance >*
      mutable_stances();
  private:
  const ::bosdyn::api::graph_nav::EdgeSnapshot_Stance& _internal_stances(int index) const;
  ::bosdyn::api::graph_nav::EdgeSnapshot_Stance* _internal_add_stances();
  public:
  const ::bosdyn::api::graph_nav::EdgeSnapshot_Stance& stances(int index) const;
  ::bosdyn::api::graph_nav::EdgeSnapshot_Stance* add_stances();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::EdgeSnapshot_Stance >&
      stances() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.EdgeSnapshot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::EdgeSnapshot_Stance > stances_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto;
};
// -------------------------------------------------------------------

class Graph PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.graph_nav.Graph) */ {
 public:
  inline Graph() : Graph(nullptr) {}
  virtual ~Graph();

  Graph(const Graph& from);
  Graph(Graph&& from) noexcept
    : Graph() {
    *this = ::std::move(from);
  }

  inline Graph& operator=(const Graph& from) {
    CopyFrom(from);
    return *this;
  }
  inline Graph& operator=(Graph&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Graph& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Graph* internal_default_instance() {
    return reinterpret_cast<const Graph*>(
               &_Graph_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Graph& a, Graph& b) {
    a.Swap(&b);
  }
  inline void Swap(Graph* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Graph* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Graph* New() const final {
    return CreateMaybeMessage<Graph>(nullptr);
  }

  Graph* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Graph>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Graph& from);
  void MergeFrom(const Graph& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Graph* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.graph_nav.Graph";
  }
  protected:
  explicit Graph(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWaypointsFieldNumber = 1,
    kEdgesFieldNumber = 2,
  };
  // repeated .bosdyn.api.graph_nav.Waypoint waypoints = 1;
  int waypoints_size() const;
  private:
  int _internal_waypoints_size() const;
  public:
  void clear_waypoints();
  ::bosdyn::api::graph_nav::Waypoint* mutable_waypoints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::Waypoint >*
      mutable_waypoints();
  private:
  const ::bosdyn::api::graph_nav::Waypoint& _internal_waypoints(int index) const;
  ::bosdyn::api::graph_nav::Waypoint* _internal_add_waypoints();
  public:
  const ::bosdyn::api::graph_nav::Waypoint& waypoints(int index) const;
  ::bosdyn::api::graph_nav::Waypoint* add_waypoints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::Waypoint >&
      waypoints() const;

  // repeated .bosdyn.api.graph_nav.Edge edges = 2;
  int edges_size() const;
  private:
  int _internal_edges_size() const;
  public:
  void clear_edges();
  ::bosdyn::api::graph_nav::Edge* mutable_edges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::Edge >*
      mutable_edges();
  private:
  const ::bosdyn::api::graph_nav::Edge& _internal_edges(int index) const;
  ::bosdyn::api::graph_nav::Edge* _internal_add_edges();
  public:
  const ::bosdyn::api::graph_nav::Edge& edges(int index) const;
  ::bosdyn::api::graph_nav::Edge* add_edges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::Edge >&
      edges() const;

  // @@protoc_insertion_point(class_scope:bosdyn.api.graph_nav.Graph)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::Waypoint > waypoints_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::Edge > edges_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Waypoint_Annotations_LocalizeRegion_Default

// -------------------------------------------------------------------

// Waypoint_Annotations_LocalizeRegion_Empty

// -------------------------------------------------------------------

// Waypoint_Annotations_LocalizeRegion_Circle2D

// double dist_2d = 1;
inline void Waypoint_Annotations_LocalizeRegion_Circle2D::clear_dist_2d() {
  dist_2d_ = 0;
}
inline double Waypoint_Annotations_LocalizeRegion_Circle2D::_internal_dist_2d() const {
  return dist_2d_;
}
inline double Waypoint_Annotations_LocalizeRegion_Circle2D::dist_2d() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.Circle2D.dist_2d)
  return _internal_dist_2d();
}
inline void Waypoint_Annotations_LocalizeRegion_Circle2D::_internal_set_dist_2d(double value) {
  
  dist_2d_ = value;
}
inline void Waypoint_Annotations_LocalizeRegion_Circle2D::set_dist_2d(double value) {
  _internal_set_dist_2d(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.Circle2D.dist_2d)
}

// -------------------------------------------------------------------

// Waypoint_Annotations_LocalizeRegion

// .bosdyn.api.graph_nav.AnnotationState state = 1;
inline void Waypoint_Annotations_LocalizeRegion::clear_state() {
  state_ = 0;
}
inline ::bosdyn::api::graph_nav::AnnotationState Waypoint_Annotations_LocalizeRegion::_internal_state() const {
  return static_cast< ::bosdyn::api::graph_nav::AnnotationState >(state_);
}
inline ::bosdyn::api::graph_nav::AnnotationState Waypoint_Annotations_LocalizeRegion::state() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.state)
  return _internal_state();
}
inline void Waypoint_Annotations_LocalizeRegion::_internal_set_state(::bosdyn::api::graph_nav::AnnotationState value) {
  
  state_ = value;
}
inline void Waypoint_Annotations_LocalizeRegion::set_state(::bosdyn::api::graph_nav::AnnotationState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.state)
}

// .bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.Default default_region = 2;
inline bool Waypoint_Annotations_LocalizeRegion::_internal_has_default_region() const {
  return region_case() == kDefaultRegion;
}
inline bool Waypoint_Annotations_LocalizeRegion::has_default_region() const {
  return _internal_has_default_region();
}
inline void Waypoint_Annotations_LocalizeRegion::set_has_default_region() {
  _oneof_case_[0] = kDefaultRegion;
}
inline void Waypoint_Annotations_LocalizeRegion::clear_default_region() {
  if (_internal_has_default_region()) {
    if (GetArena() == nullptr) {
      delete region_.default_region_;
    }
    clear_has_region();
  }
}
inline ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Default* Waypoint_Annotations_LocalizeRegion::release_default_region() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.default_region)
  if (_internal_has_default_region()) {
    clear_has_region();
      ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Default* temp = region_.default_region_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    region_.default_region_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Default& Waypoint_Annotations_LocalizeRegion::_internal_default_region() const {
  return _internal_has_default_region()
      ? *region_.default_region_
      : *reinterpret_cast< ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Default*>(&::bosdyn::api::graph_nav::_Waypoint_Annotations_LocalizeRegion_Default_default_instance_);
}
inline const ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Default& Waypoint_Annotations_LocalizeRegion::default_region() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.default_region)
  return _internal_default_region();
}
inline ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Default* Waypoint_Annotations_LocalizeRegion::unsafe_arena_release_default_region() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.default_region)
  if (_internal_has_default_region()) {
    clear_has_region();
    ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Default* temp = region_.default_region_;
    region_.default_region_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Waypoint_Annotations_LocalizeRegion::unsafe_arena_set_allocated_default_region(::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Default* default_region) {
  clear_region();
  if (default_region) {
    set_has_default_region();
    region_.default_region_ = default_region;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.default_region)
}
inline ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Default* Waypoint_Annotations_LocalizeRegion::_internal_mutable_default_region() {
  if (!_internal_has_default_region()) {
    clear_region();
    set_has_default_region();
    region_.default_region_ = CreateMaybeMessage< ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Default >(GetArena());
  }
  return region_.default_region_;
}
inline ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Default* Waypoint_Annotations_LocalizeRegion::mutable_default_region() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.default_region)
  return _internal_mutable_default_region();
}

// .bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.Empty empty = 3;
inline bool Waypoint_Annotations_LocalizeRegion::_internal_has_empty() const {
  return region_case() == kEmpty;
}
inline bool Waypoint_Annotations_LocalizeRegion::has_empty() const {
  return _internal_has_empty();
}
inline void Waypoint_Annotations_LocalizeRegion::set_has_empty() {
  _oneof_case_[0] = kEmpty;
}
inline void Waypoint_Annotations_LocalizeRegion::clear_empty() {
  if (_internal_has_empty()) {
    if (GetArena() == nullptr) {
      delete region_.empty_;
    }
    clear_has_region();
  }
}
inline ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Empty* Waypoint_Annotations_LocalizeRegion::release_empty() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.empty)
  if (_internal_has_empty()) {
    clear_has_region();
      ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Empty* temp = region_.empty_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    region_.empty_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Empty& Waypoint_Annotations_LocalizeRegion::_internal_empty() const {
  return _internal_has_empty()
      ? *region_.empty_
      : *reinterpret_cast< ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Empty*>(&::bosdyn::api::graph_nav::_Waypoint_Annotations_LocalizeRegion_Empty_default_instance_);
}
inline const ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Empty& Waypoint_Annotations_LocalizeRegion::empty() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.empty)
  return _internal_empty();
}
inline ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Empty* Waypoint_Annotations_LocalizeRegion::unsafe_arena_release_empty() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.empty)
  if (_internal_has_empty()) {
    clear_has_region();
    ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Empty* temp = region_.empty_;
    region_.empty_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Waypoint_Annotations_LocalizeRegion::unsafe_arena_set_allocated_empty(::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Empty* empty) {
  clear_region();
  if (empty) {
    set_has_empty();
    region_.empty_ = empty;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.empty)
}
inline ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Empty* Waypoint_Annotations_LocalizeRegion::_internal_mutable_empty() {
  if (!_internal_has_empty()) {
    clear_region();
    set_has_empty();
    region_.empty_ = CreateMaybeMessage< ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Empty >(GetArena());
  }
  return region_.empty_;
}
inline ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Empty* Waypoint_Annotations_LocalizeRegion::mutable_empty() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.empty)
  return _internal_mutable_empty();
}

// .bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.Circle2D circle = 4;
inline bool Waypoint_Annotations_LocalizeRegion::_internal_has_circle() const {
  return region_case() == kCircle;
}
inline bool Waypoint_Annotations_LocalizeRegion::has_circle() const {
  return _internal_has_circle();
}
inline void Waypoint_Annotations_LocalizeRegion::set_has_circle() {
  _oneof_case_[0] = kCircle;
}
inline void Waypoint_Annotations_LocalizeRegion::clear_circle() {
  if (_internal_has_circle()) {
    if (GetArena() == nullptr) {
      delete region_.circle_;
    }
    clear_has_region();
  }
}
inline ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Circle2D* Waypoint_Annotations_LocalizeRegion::release_circle() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.circle)
  if (_internal_has_circle()) {
    clear_has_region();
      ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Circle2D* temp = region_.circle_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    region_.circle_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Circle2D& Waypoint_Annotations_LocalizeRegion::_internal_circle() const {
  return _internal_has_circle()
      ? *region_.circle_
      : *reinterpret_cast< ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Circle2D*>(&::bosdyn::api::graph_nav::_Waypoint_Annotations_LocalizeRegion_Circle2D_default_instance_);
}
inline const ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Circle2D& Waypoint_Annotations_LocalizeRegion::circle() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.circle)
  return _internal_circle();
}
inline ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Circle2D* Waypoint_Annotations_LocalizeRegion::unsafe_arena_release_circle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.circle)
  if (_internal_has_circle()) {
    clear_has_region();
    ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Circle2D* temp = region_.circle_;
    region_.circle_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Waypoint_Annotations_LocalizeRegion::unsafe_arena_set_allocated_circle(::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Circle2D* circle) {
  clear_region();
  if (circle) {
    set_has_circle();
    region_.circle_ = circle;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.circle)
}
inline ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Circle2D* Waypoint_Annotations_LocalizeRegion::_internal_mutable_circle() {
  if (!_internal_has_circle()) {
    clear_region();
    set_has_circle();
    region_.circle_ = CreateMaybeMessage< ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Circle2D >(GetArena());
  }
  return region_.circle_;
}
inline ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion_Circle2D* Waypoint_Annotations_LocalizeRegion::mutable_circle() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.circle)
  return _internal_mutable_circle();
}

inline bool Waypoint_Annotations_LocalizeRegion::has_region() const {
  return region_case() != REGION_NOT_SET;
}
inline void Waypoint_Annotations_LocalizeRegion::clear_has_region() {
  _oneof_case_[0] = REGION_NOT_SET;
}
inline Waypoint_Annotations_LocalizeRegion::RegionCase Waypoint_Annotations_LocalizeRegion::region_case() const {
  return Waypoint_Annotations_LocalizeRegion::RegionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Waypoint_Annotations

// string name = 1;
inline void Waypoint_Annotations::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Waypoint_Annotations::name() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Waypoint.Annotations.name)
  return _internal_name();
}
inline void Waypoint_Annotations::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.Waypoint.Annotations.name)
}
inline std::string* Waypoint_Annotations::mutable_name() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Waypoint.Annotations.name)
  return _internal_mutable_name();
}
inline const std::string& Waypoint_Annotations::_internal_name() const {
  return name_.Get();
}
inline void Waypoint_Annotations::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Waypoint_Annotations::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.graph_nav.Waypoint.Annotations.name)
}
inline void Waypoint_Annotations::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.graph_nav.Waypoint.Annotations.name)
}
inline void Waypoint_Annotations::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.graph_nav.Waypoint.Annotations.name)
}
inline std::string* Waypoint_Annotations::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Waypoint_Annotations::release_name() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Waypoint.Annotations.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Waypoint_Annotations::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.Waypoint.Annotations.name)
}

// .bosdyn.api.SE3Covariance icp_variance = 2;
inline bool Waypoint_Annotations::_internal_has_icp_variance() const {
  return this != internal_default_instance() && icp_variance_ != nullptr;
}
inline bool Waypoint_Annotations::has_icp_variance() const {
  return _internal_has_icp_variance();
}
inline const ::bosdyn::api::SE3Covariance& Waypoint_Annotations::_internal_icp_variance() const {
  const ::bosdyn::api::SE3Covariance* p = icp_variance_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::SE3Covariance*>(
      &::bosdyn::api::_SE3Covariance_default_instance_);
}
inline const ::bosdyn::api::SE3Covariance& Waypoint_Annotations::icp_variance() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Waypoint.Annotations.icp_variance)
  return _internal_icp_variance();
}
inline void Waypoint_Annotations::unsafe_arena_set_allocated_icp_variance(
    ::bosdyn::api::SE3Covariance* icp_variance) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(icp_variance_);
  }
  icp_variance_ = icp_variance;
  if (icp_variance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.Waypoint.Annotations.icp_variance)
}
inline ::bosdyn::api::SE3Covariance* Waypoint_Annotations::release_icp_variance() {
  
  ::bosdyn::api::SE3Covariance* temp = icp_variance_;
  icp_variance_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::SE3Covariance* Waypoint_Annotations::unsafe_arena_release_icp_variance() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Waypoint.Annotations.icp_variance)
  
  ::bosdyn::api::SE3Covariance* temp = icp_variance_;
  icp_variance_ = nullptr;
  return temp;
}
inline ::bosdyn::api::SE3Covariance* Waypoint_Annotations::_internal_mutable_icp_variance() {
  
  if (icp_variance_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::SE3Covariance>(GetArena());
    icp_variance_ = p;
  }
  return icp_variance_;
}
inline ::bosdyn::api::SE3Covariance* Waypoint_Annotations::mutable_icp_variance() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Waypoint.Annotations.icp_variance)
  return _internal_mutable_icp_variance();
}
inline void Waypoint_Annotations::set_allocated_icp_variance(::bosdyn::api::SE3Covariance* icp_variance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(icp_variance_);
  }
  if (icp_variance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(icp_variance)->GetArena();
    if (message_arena != submessage_arena) {
      icp_variance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, icp_variance, submessage_arena);
    }
    
  } else {
    
  }
  icp_variance_ = icp_variance;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.Waypoint.Annotations.icp_variance)
}

// .bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion scan_match_region = 3;
inline bool Waypoint_Annotations::_internal_has_scan_match_region() const {
  return this != internal_default_instance() && scan_match_region_ != nullptr;
}
inline bool Waypoint_Annotations::has_scan_match_region() const {
  return _internal_has_scan_match_region();
}
inline void Waypoint_Annotations::clear_scan_match_region() {
  if (GetArena() == nullptr && scan_match_region_ != nullptr) {
    delete scan_match_region_;
  }
  scan_match_region_ = nullptr;
}
inline const ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion& Waypoint_Annotations::_internal_scan_match_region() const {
  const ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion* p = scan_match_region_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion*>(
      &::bosdyn::api::graph_nav::_Waypoint_Annotations_LocalizeRegion_default_instance_);
}
inline const ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion& Waypoint_Annotations::scan_match_region() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Waypoint.Annotations.scan_match_region)
  return _internal_scan_match_region();
}
inline void Waypoint_Annotations::unsafe_arena_set_allocated_scan_match_region(
    ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion* scan_match_region) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scan_match_region_);
  }
  scan_match_region_ = scan_match_region;
  if (scan_match_region) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.Waypoint.Annotations.scan_match_region)
}
inline ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion* Waypoint_Annotations::release_scan_match_region() {
  
  ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion* temp = scan_match_region_;
  scan_match_region_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion* Waypoint_Annotations::unsafe_arena_release_scan_match_region() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Waypoint.Annotations.scan_match_region)
  
  ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion* temp = scan_match_region_;
  scan_match_region_ = nullptr;
  return temp;
}
inline ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion* Waypoint_Annotations::_internal_mutable_scan_match_region() {
  
  if (scan_match_region_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion>(GetArena());
    scan_match_region_ = p;
  }
  return scan_match_region_;
}
inline ::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion* Waypoint_Annotations::mutable_scan_match_region() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Waypoint.Annotations.scan_match_region)
  return _internal_mutable_scan_match_region();
}
inline void Waypoint_Annotations::set_allocated_scan_match_region(::bosdyn::api::graph_nav::Waypoint_Annotations_LocalizeRegion* scan_match_region) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete scan_match_region_;
  }
  if (scan_match_region) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(scan_match_region);
    if (message_arena != submessage_arena) {
      scan_match_region = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scan_match_region, submessage_arena);
    }
    
  } else {
    
  }
  scan_match_region_ = scan_match_region;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.Waypoint.Annotations.scan_match_region)
}

// -------------------------------------------------------------------

// Waypoint

// string id = 1;
inline void Waypoint::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Waypoint::id() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Waypoint.id)
  return _internal_id();
}
inline void Waypoint::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.Waypoint.id)
}
inline std::string* Waypoint::mutable_id() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Waypoint.id)
  return _internal_mutable_id();
}
inline const std::string& Waypoint::_internal_id() const {
  return id_.Get();
}
inline void Waypoint::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Waypoint::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.graph_nav.Waypoint.id)
}
inline void Waypoint::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.graph_nav.Waypoint.id)
}
inline void Waypoint::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.graph_nav.Waypoint.id)
}
inline std::string* Waypoint::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Waypoint::release_id() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Waypoint.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Waypoint::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.Waypoint.id)
}

// string snapshot_id = 2;
inline void Waypoint::clear_snapshot_id() {
  snapshot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Waypoint::snapshot_id() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Waypoint.snapshot_id)
  return _internal_snapshot_id();
}
inline void Waypoint::set_snapshot_id(const std::string& value) {
  _internal_set_snapshot_id(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.Waypoint.snapshot_id)
}
inline std::string* Waypoint::mutable_snapshot_id() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Waypoint.snapshot_id)
  return _internal_mutable_snapshot_id();
}
inline const std::string& Waypoint::_internal_snapshot_id() const {
  return snapshot_id_.Get();
}
inline void Waypoint::_internal_set_snapshot_id(const std::string& value) {
  
  snapshot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Waypoint::set_snapshot_id(std::string&& value) {
  
  snapshot_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.graph_nav.Waypoint.snapshot_id)
}
inline void Waypoint::set_snapshot_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  snapshot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.graph_nav.Waypoint.snapshot_id)
}
inline void Waypoint::set_snapshot_id(const char* value,
    size_t size) {
  
  snapshot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.graph_nav.Waypoint.snapshot_id)
}
inline std::string* Waypoint::_internal_mutable_snapshot_id() {
  
  return snapshot_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Waypoint::release_snapshot_id() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Waypoint.snapshot_id)
  return snapshot_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Waypoint::set_allocated_snapshot_id(std::string* snapshot_id) {
  if (snapshot_id != nullptr) {
    
  } else {
    
  }
  snapshot_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), snapshot_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.Waypoint.snapshot_id)
}

// .bosdyn.api.SE3Pose waypoint_tform_ko = 3;
inline bool Waypoint::_internal_has_waypoint_tform_ko() const {
  return this != internal_default_instance() && waypoint_tform_ko_ != nullptr;
}
inline bool Waypoint::has_waypoint_tform_ko() const {
  return _internal_has_waypoint_tform_ko();
}
inline const ::bosdyn::api::SE3Pose& Waypoint::_internal_waypoint_tform_ko() const {
  const ::bosdyn::api::SE3Pose* p = waypoint_tform_ko_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::SE3Pose*>(
      &::bosdyn::api::_SE3Pose_default_instance_);
}
inline const ::bosdyn::api::SE3Pose& Waypoint::waypoint_tform_ko() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Waypoint.waypoint_tform_ko)
  return _internal_waypoint_tform_ko();
}
inline void Waypoint::unsafe_arena_set_allocated_waypoint_tform_ko(
    ::bosdyn::api::SE3Pose* waypoint_tform_ko) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(waypoint_tform_ko_);
  }
  waypoint_tform_ko_ = waypoint_tform_ko;
  if (waypoint_tform_ko) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.Waypoint.waypoint_tform_ko)
}
inline ::bosdyn::api::SE3Pose* Waypoint::release_waypoint_tform_ko() {
  
  ::bosdyn::api::SE3Pose* temp = waypoint_tform_ko_;
  waypoint_tform_ko_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::SE3Pose* Waypoint::unsafe_arena_release_waypoint_tform_ko() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Waypoint.waypoint_tform_ko)
  
  ::bosdyn::api::SE3Pose* temp = waypoint_tform_ko_;
  waypoint_tform_ko_ = nullptr;
  return temp;
}
inline ::bosdyn::api::SE3Pose* Waypoint::_internal_mutable_waypoint_tform_ko() {
  
  if (waypoint_tform_ko_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::SE3Pose>(GetArena());
    waypoint_tform_ko_ = p;
  }
  return waypoint_tform_ko_;
}
inline ::bosdyn::api::SE3Pose* Waypoint::mutable_waypoint_tform_ko() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Waypoint.waypoint_tform_ko)
  return _internal_mutable_waypoint_tform_ko();
}
inline void Waypoint::set_allocated_waypoint_tform_ko(::bosdyn::api::SE3Pose* waypoint_tform_ko) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(waypoint_tform_ko_);
  }
  if (waypoint_tform_ko) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(waypoint_tform_ko)->GetArena();
    if (message_arena != submessage_arena) {
      waypoint_tform_ko = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, waypoint_tform_ko, submessage_arena);
    }
    
  } else {
    
  }
  waypoint_tform_ko_ = waypoint_tform_ko;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.Waypoint.waypoint_tform_ko)
}

// .bosdyn.api.graph_nav.Waypoint.Annotations annotations = 4;
inline bool Waypoint::_internal_has_annotations() const {
  return this != internal_default_instance() && annotations_ != nullptr;
}
inline bool Waypoint::has_annotations() const {
  return _internal_has_annotations();
}
inline void Waypoint::clear_annotations() {
  if (GetArena() == nullptr && annotations_ != nullptr) {
    delete annotations_;
  }
  annotations_ = nullptr;
}
inline const ::bosdyn::api::graph_nav::Waypoint_Annotations& Waypoint::_internal_annotations() const {
  const ::bosdyn::api::graph_nav::Waypoint_Annotations* p = annotations_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::graph_nav::Waypoint_Annotations*>(
      &::bosdyn::api::graph_nav::_Waypoint_Annotations_default_instance_);
}
inline const ::bosdyn::api::graph_nav::Waypoint_Annotations& Waypoint::annotations() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Waypoint.annotations)
  return _internal_annotations();
}
inline void Waypoint::unsafe_arena_set_allocated_annotations(
    ::bosdyn::api::graph_nav::Waypoint_Annotations* annotations) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(annotations_);
  }
  annotations_ = annotations;
  if (annotations) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.Waypoint.annotations)
}
inline ::bosdyn::api::graph_nav::Waypoint_Annotations* Waypoint::release_annotations() {
  
  ::bosdyn::api::graph_nav::Waypoint_Annotations* temp = annotations_;
  annotations_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::graph_nav::Waypoint_Annotations* Waypoint::unsafe_arena_release_annotations() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Waypoint.annotations)
  
  ::bosdyn::api::graph_nav::Waypoint_Annotations* temp = annotations_;
  annotations_ = nullptr;
  return temp;
}
inline ::bosdyn::api::graph_nav::Waypoint_Annotations* Waypoint::_internal_mutable_annotations() {
  
  if (annotations_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::graph_nav::Waypoint_Annotations>(GetArena());
    annotations_ = p;
  }
  return annotations_;
}
inline ::bosdyn::api::graph_nav::Waypoint_Annotations* Waypoint::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Waypoint.annotations)
  return _internal_mutable_annotations();
}
inline void Waypoint::set_allocated_annotations(::bosdyn::api::graph_nav::Waypoint_Annotations* annotations) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete annotations_;
  }
  if (annotations) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(annotations);
    if (message_arena != submessage_arena) {
      annotations = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, annotations, submessage_arena);
    }
    
  } else {
    
  }
  annotations_ = annotations;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.Waypoint.annotations)
}

// -------------------------------------------------------------------

// WaypointSnapshot

// string id = 1;
inline void WaypointSnapshot::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& WaypointSnapshot::id() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.WaypointSnapshot.id)
  return _internal_id();
}
inline void WaypointSnapshot::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.WaypointSnapshot.id)
}
inline std::string* WaypointSnapshot::mutable_id() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.WaypointSnapshot.id)
  return _internal_mutable_id();
}
inline const std::string& WaypointSnapshot::_internal_id() const {
  return id_.Get();
}
inline void WaypointSnapshot::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WaypointSnapshot::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.graph_nav.WaypointSnapshot.id)
}
inline void WaypointSnapshot::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.graph_nav.WaypointSnapshot.id)
}
inline void WaypointSnapshot::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.graph_nav.WaypointSnapshot.id)
}
inline std::string* WaypointSnapshot::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WaypointSnapshot::release_id() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.WaypointSnapshot.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WaypointSnapshot::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.WaypointSnapshot.id)
}

// repeated .bosdyn.api.ImageResponse images = 2;
inline int WaypointSnapshot::_internal_images_size() const {
  return images_.size();
}
inline int WaypointSnapshot::images_size() const {
  return _internal_images_size();
}
inline ::bosdyn::api::ImageResponse* WaypointSnapshot::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.WaypointSnapshot.images)
  return images_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::ImageResponse >*
WaypointSnapshot::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.graph_nav.WaypointSnapshot.images)
  return &images_;
}
inline const ::bosdyn::api::ImageResponse& WaypointSnapshot::_internal_images(int index) const {
  return images_.Get(index);
}
inline const ::bosdyn::api::ImageResponse& WaypointSnapshot::images(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.WaypointSnapshot.images)
  return _internal_images(index);
}
inline ::bosdyn::api::ImageResponse* WaypointSnapshot::_internal_add_images() {
  return images_.Add();
}
inline ::bosdyn::api::ImageResponse* WaypointSnapshot::add_images() {
  // @@protoc_insertion_point(field_add:bosdyn.api.graph_nav.WaypointSnapshot.images)
  return _internal_add_images();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::ImageResponse >&
WaypointSnapshot::images() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.graph_nav.WaypointSnapshot.images)
  return images_;
}

// .bosdyn.api.PointCloud point_cloud = 3;
inline bool WaypointSnapshot::_internal_has_point_cloud() const {
  return this != internal_default_instance() && point_cloud_ != nullptr;
}
inline bool WaypointSnapshot::has_point_cloud() const {
  return _internal_has_point_cloud();
}
inline const ::bosdyn::api::PointCloud& WaypointSnapshot::_internal_point_cloud() const {
  const ::bosdyn::api::PointCloud* p = point_cloud_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::PointCloud*>(
      &::bosdyn::api::_PointCloud_default_instance_);
}
inline const ::bosdyn::api::PointCloud& WaypointSnapshot::point_cloud() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.WaypointSnapshot.point_cloud)
  return _internal_point_cloud();
}
inline void WaypointSnapshot::unsafe_arena_set_allocated_point_cloud(
    ::bosdyn::api::PointCloud* point_cloud) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(point_cloud_);
  }
  point_cloud_ = point_cloud;
  if (point_cloud) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.WaypointSnapshot.point_cloud)
}
inline ::bosdyn::api::PointCloud* WaypointSnapshot::release_point_cloud() {
  
  ::bosdyn::api::PointCloud* temp = point_cloud_;
  point_cloud_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::PointCloud* WaypointSnapshot::unsafe_arena_release_point_cloud() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.WaypointSnapshot.point_cloud)
  
  ::bosdyn::api::PointCloud* temp = point_cloud_;
  point_cloud_ = nullptr;
  return temp;
}
inline ::bosdyn::api::PointCloud* WaypointSnapshot::_internal_mutable_point_cloud() {
  
  if (point_cloud_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::PointCloud>(GetArena());
    point_cloud_ = p;
  }
  return point_cloud_;
}
inline ::bosdyn::api::PointCloud* WaypointSnapshot::mutable_point_cloud() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.WaypointSnapshot.point_cloud)
  return _internal_mutable_point_cloud();
}
inline void WaypointSnapshot::set_allocated_point_cloud(::bosdyn::api::PointCloud* point_cloud) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(point_cloud_);
  }
  if (point_cloud) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(point_cloud)->GetArena();
    if (message_arena != submessage_arena) {
      point_cloud = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, point_cloud, submessage_arena);
    }
    
  } else {
    
  }
  point_cloud_ = point_cloud;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.WaypointSnapshot.point_cloud)
}

// repeated .bosdyn.api.WorldObject objects = 4;
inline int WaypointSnapshot::_internal_objects_size() const {
  return objects_.size();
}
inline int WaypointSnapshot::objects_size() const {
  return _internal_objects_size();
}
inline ::bosdyn::api::WorldObject* WaypointSnapshot::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.WaypointSnapshot.objects)
  return objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::WorldObject >*
WaypointSnapshot::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.graph_nav.WaypointSnapshot.objects)
  return &objects_;
}
inline const ::bosdyn::api::WorldObject& WaypointSnapshot::_internal_objects(int index) const {
  return objects_.Get(index);
}
inline const ::bosdyn::api::WorldObject& WaypointSnapshot::objects(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.WaypointSnapshot.objects)
  return _internal_objects(index);
}
inline ::bosdyn::api::WorldObject* WaypointSnapshot::_internal_add_objects() {
  return objects_.Add();
}
inline ::bosdyn::api::WorldObject* WaypointSnapshot::add_objects() {
  // @@protoc_insertion_point(field_add:bosdyn.api.graph_nav.WaypointSnapshot.objects)
  return _internal_add_objects();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::WorldObject >&
WaypointSnapshot::objects() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.graph_nav.WaypointSnapshot.objects)
  return objects_;
}

// .bosdyn.api.RobotState robot_state = 5;
inline bool WaypointSnapshot::_internal_has_robot_state() const {
  return this != internal_default_instance() && robot_state_ != nullptr;
}
inline bool WaypointSnapshot::has_robot_state() const {
  return _internal_has_robot_state();
}
inline const ::bosdyn::api::RobotState& WaypointSnapshot::_internal_robot_state() const {
  const ::bosdyn::api::RobotState* p = robot_state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::RobotState*>(
      &::bosdyn::api::_RobotState_default_instance_);
}
inline const ::bosdyn::api::RobotState& WaypointSnapshot::robot_state() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.WaypointSnapshot.robot_state)
  return _internal_robot_state();
}
inline void WaypointSnapshot::unsafe_arena_set_allocated_robot_state(
    ::bosdyn::api::RobotState* robot_state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(robot_state_);
  }
  robot_state_ = robot_state;
  if (robot_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.WaypointSnapshot.robot_state)
}
inline ::bosdyn::api::RobotState* WaypointSnapshot::release_robot_state() {
  
  ::bosdyn::api::RobotState* temp = robot_state_;
  robot_state_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::RobotState* WaypointSnapshot::unsafe_arena_release_robot_state() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.WaypointSnapshot.robot_state)
  
  ::bosdyn::api::RobotState* temp = robot_state_;
  robot_state_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RobotState* WaypointSnapshot::_internal_mutable_robot_state() {
  
  if (robot_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RobotState>(GetArena());
    robot_state_ = p;
  }
  return robot_state_;
}
inline ::bosdyn::api::RobotState* WaypointSnapshot::mutable_robot_state() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.WaypointSnapshot.robot_state)
  return _internal_mutable_robot_state();
}
inline void WaypointSnapshot::set_allocated_robot_state(::bosdyn::api::RobotState* robot_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(robot_state_);
  }
  if (robot_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(robot_state)->GetArena();
    if (message_arena != submessage_arena) {
      robot_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, robot_state, submessage_arena);
    }
    
  } else {
    
  }
  robot_state_ = robot_state;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.WaypointSnapshot.robot_state)
}

// repeated .bosdyn.api.LocalGrid robot_local_grids = 6;
inline int WaypointSnapshot::_internal_robot_local_grids_size() const {
  return robot_local_grids_.size();
}
inline int WaypointSnapshot::robot_local_grids_size() const {
  return _internal_robot_local_grids_size();
}
inline ::bosdyn::api::LocalGrid* WaypointSnapshot::mutable_robot_local_grids(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.WaypointSnapshot.robot_local_grids)
  return robot_local_grids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::LocalGrid >*
WaypointSnapshot::mutable_robot_local_grids() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.graph_nav.WaypointSnapshot.robot_local_grids)
  return &robot_local_grids_;
}
inline const ::bosdyn::api::LocalGrid& WaypointSnapshot::_internal_robot_local_grids(int index) const {
  return robot_local_grids_.Get(index);
}
inline const ::bosdyn::api::LocalGrid& WaypointSnapshot::robot_local_grids(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.WaypointSnapshot.robot_local_grids)
  return _internal_robot_local_grids(index);
}
inline ::bosdyn::api::LocalGrid* WaypointSnapshot::_internal_add_robot_local_grids() {
  return robot_local_grids_.Add();
}
inline ::bosdyn::api::LocalGrid* WaypointSnapshot::add_robot_local_grids() {
  // @@protoc_insertion_point(field_add:bosdyn.api.graph_nav.WaypointSnapshot.robot_local_grids)
  return _internal_add_robot_local_grids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::LocalGrid >&
WaypointSnapshot::robot_local_grids() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.graph_nav.WaypointSnapshot.robot_local_grids)
  return robot_local_grids_;
}

// bool is_point_cloud_processed = 8;
inline void WaypointSnapshot::clear_is_point_cloud_processed() {
  is_point_cloud_processed_ = false;
}
inline bool WaypointSnapshot::_internal_is_point_cloud_processed() const {
  return is_point_cloud_processed_;
}
inline bool WaypointSnapshot::is_point_cloud_processed() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.WaypointSnapshot.is_point_cloud_processed)
  return _internal_is_point_cloud_processed();
}
inline void WaypointSnapshot::_internal_set_is_point_cloud_processed(bool value) {
  
  is_point_cloud_processed_ = value;
}
inline void WaypointSnapshot::set_is_point_cloud_processed(bool value) {
  _internal_set_is_point_cloud_processed(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.WaypointSnapshot.is_point_cloud_processed)
}

// string version_id = 9;
inline void WaypointSnapshot::clear_version_id() {
  version_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& WaypointSnapshot::version_id() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.WaypointSnapshot.version_id)
  return _internal_version_id();
}
inline void WaypointSnapshot::set_version_id(const std::string& value) {
  _internal_set_version_id(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.WaypointSnapshot.version_id)
}
inline std::string* WaypointSnapshot::mutable_version_id() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.WaypointSnapshot.version_id)
  return _internal_mutable_version_id();
}
inline const std::string& WaypointSnapshot::_internal_version_id() const {
  return version_id_.Get();
}
inline void WaypointSnapshot::_internal_set_version_id(const std::string& value) {
  
  version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WaypointSnapshot::set_version_id(std::string&& value) {
  
  version_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.graph_nav.WaypointSnapshot.version_id)
}
inline void WaypointSnapshot::set_version_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.graph_nav.WaypointSnapshot.version_id)
}
inline void WaypointSnapshot::set_version_id(const char* value,
    size_t size) {
  
  version_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.graph_nav.WaypointSnapshot.version_id)
}
inline std::string* WaypointSnapshot::_internal_mutable_version_id() {
  
  return version_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WaypointSnapshot::release_version_id() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.WaypointSnapshot.version_id)
  return version_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WaypointSnapshot::set_allocated_version_id(std::string* version_id) {
  if (version_id != nullptr) {
    
  } else {
    
  }
  version_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.WaypointSnapshot.version_id)
}

// -------------------------------------------------------------------

// Edge_Id

// string from_waypoint = 1;
inline void Edge_Id::clear_from_waypoint() {
  from_waypoint_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Edge_Id::from_waypoint() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Edge.Id.from_waypoint)
  return _internal_from_waypoint();
}
inline void Edge_Id::set_from_waypoint(const std::string& value) {
  _internal_set_from_waypoint(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.Edge.Id.from_waypoint)
}
inline std::string* Edge_Id::mutable_from_waypoint() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Edge.Id.from_waypoint)
  return _internal_mutable_from_waypoint();
}
inline const std::string& Edge_Id::_internal_from_waypoint() const {
  return from_waypoint_.Get();
}
inline void Edge_Id::_internal_set_from_waypoint(const std::string& value) {
  
  from_waypoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Edge_Id::set_from_waypoint(std::string&& value) {
  
  from_waypoint_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.graph_nav.Edge.Id.from_waypoint)
}
inline void Edge_Id::set_from_waypoint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_waypoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.graph_nav.Edge.Id.from_waypoint)
}
inline void Edge_Id::set_from_waypoint(const char* value,
    size_t size) {
  
  from_waypoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.graph_nav.Edge.Id.from_waypoint)
}
inline std::string* Edge_Id::_internal_mutable_from_waypoint() {
  
  return from_waypoint_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Edge_Id::release_from_waypoint() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Edge.Id.from_waypoint)
  return from_waypoint_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Edge_Id::set_allocated_from_waypoint(std::string* from_waypoint) {
  if (from_waypoint != nullptr) {
    
  } else {
    
  }
  from_waypoint_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from_waypoint,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.Edge.Id.from_waypoint)
}

// string to_waypoint = 2;
inline void Edge_Id::clear_to_waypoint() {
  to_waypoint_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Edge_Id::to_waypoint() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Edge.Id.to_waypoint)
  return _internal_to_waypoint();
}
inline void Edge_Id::set_to_waypoint(const std::string& value) {
  _internal_set_to_waypoint(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.Edge.Id.to_waypoint)
}
inline std::string* Edge_Id::mutable_to_waypoint() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Edge.Id.to_waypoint)
  return _internal_mutable_to_waypoint();
}
inline const std::string& Edge_Id::_internal_to_waypoint() const {
  return to_waypoint_.Get();
}
inline void Edge_Id::_internal_set_to_waypoint(const std::string& value) {
  
  to_waypoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Edge_Id::set_to_waypoint(std::string&& value) {
  
  to_waypoint_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.graph_nav.Edge.Id.to_waypoint)
}
inline void Edge_Id::set_to_waypoint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  to_waypoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.graph_nav.Edge.Id.to_waypoint)
}
inline void Edge_Id::set_to_waypoint(const char* value,
    size_t size) {
  
  to_waypoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.graph_nav.Edge.Id.to_waypoint)
}
inline std::string* Edge_Id::_internal_mutable_to_waypoint() {
  
  return to_waypoint_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Edge_Id::release_to_waypoint() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Edge.Id.to_waypoint)
  return to_waypoint_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Edge_Id::set_allocated_to_waypoint(std::string* to_waypoint) {
  if (to_waypoint != nullptr) {
    
  } else {
    
  }
  to_waypoint_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_waypoint,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.Edge.Id.to_waypoint)
}

// -------------------------------------------------------------------

// Edge_Annotations_StairData_StraightStaircase_Stair

// float rise = 1;
inline void Edge_Annotations_StairData_StraightStaircase_Stair::clear_rise() {
  rise_ = 0;
}
inline float Edge_Annotations_StairData_StraightStaircase_Stair::_internal_rise() const {
  return rise_;
}
inline float Edge_Annotations_StairData_StraightStaircase_Stair::rise() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Edge.Annotations.StairData.StraightStaircase.Stair.rise)
  return _internal_rise();
}
inline void Edge_Annotations_StairData_StraightStaircase_Stair::_internal_set_rise(float value) {
  
  rise_ = value;
}
inline void Edge_Annotations_StairData_StraightStaircase_Stair::set_rise(float value) {
  _internal_set_rise(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.Edge.Annotations.StairData.StraightStaircase.Stair.rise)
}

// float run = 2;
inline void Edge_Annotations_StairData_StraightStaircase_Stair::clear_run() {
  run_ = 0;
}
inline float Edge_Annotations_StairData_StraightStaircase_Stair::_internal_run() const {
  return run_;
}
inline float Edge_Annotations_StairData_StraightStaircase_Stair::run() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Edge.Annotations.StairData.StraightStaircase.Stair.run)
  return _internal_run();
}
inline void Edge_Annotations_StairData_StraightStaircase_Stair::_internal_set_run(float value) {
  
  run_ = value;
}
inline void Edge_Annotations_StairData_StraightStaircase_Stair::set_run(float value) {
  _internal_set_run(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.Edge.Annotations.StairData.StraightStaircase.Stair.run)
}

// -------------------------------------------------------------------

// Edge_Annotations_StairData_StraightStaircase

// .bosdyn.api.SE3Pose from_ko_tform_stairs = 1;
inline bool Edge_Annotations_StairData_StraightStaircase::_internal_has_from_ko_tform_stairs() const {
  return this != internal_default_instance() && from_ko_tform_stairs_ != nullptr;
}
inline bool Edge_Annotations_StairData_StraightStaircase::has_from_ko_tform_stairs() const {
  return _internal_has_from_ko_tform_stairs();
}
inline const ::bosdyn::api::SE3Pose& Edge_Annotations_StairData_StraightStaircase::_internal_from_ko_tform_stairs() const {
  const ::bosdyn::api::SE3Pose* p = from_ko_tform_stairs_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::SE3Pose*>(
      &::bosdyn::api::_SE3Pose_default_instance_);
}
inline const ::bosdyn::api::SE3Pose& Edge_Annotations_StairData_StraightStaircase::from_ko_tform_stairs() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Edge.Annotations.StairData.StraightStaircase.from_ko_tform_stairs)
  return _internal_from_ko_tform_stairs();
}
inline void Edge_Annotations_StairData_StraightStaircase::unsafe_arena_set_allocated_from_ko_tform_stairs(
    ::bosdyn::api::SE3Pose* from_ko_tform_stairs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_ko_tform_stairs_);
  }
  from_ko_tform_stairs_ = from_ko_tform_stairs;
  if (from_ko_tform_stairs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.Edge.Annotations.StairData.StraightStaircase.from_ko_tform_stairs)
}
inline ::bosdyn::api::SE3Pose* Edge_Annotations_StairData_StraightStaircase::release_from_ko_tform_stairs() {
  
  ::bosdyn::api::SE3Pose* temp = from_ko_tform_stairs_;
  from_ko_tform_stairs_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::SE3Pose* Edge_Annotations_StairData_StraightStaircase::unsafe_arena_release_from_ko_tform_stairs() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Edge.Annotations.StairData.StraightStaircase.from_ko_tform_stairs)
  
  ::bosdyn::api::SE3Pose* temp = from_ko_tform_stairs_;
  from_ko_tform_stairs_ = nullptr;
  return temp;
}
inline ::bosdyn::api::SE3Pose* Edge_Annotations_StairData_StraightStaircase::_internal_mutable_from_ko_tform_stairs() {
  
  if (from_ko_tform_stairs_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::SE3Pose>(GetArena());
    from_ko_tform_stairs_ = p;
  }
  return from_ko_tform_stairs_;
}
inline ::bosdyn::api::SE3Pose* Edge_Annotations_StairData_StraightStaircase::mutable_from_ko_tform_stairs() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Edge.Annotations.StairData.StraightStaircase.from_ko_tform_stairs)
  return _internal_mutable_from_ko_tform_stairs();
}
inline void Edge_Annotations_StairData_StraightStaircase::set_allocated_from_ko_tform_stairs(::bosdyn::api::SE3Pose* from_ko_tform_stairs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_ko_tform_stairs_);
  }
  if (from_ko_tform_stairs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_ko_tform_stairs)->GetArena();
    if (message_arena != submessage_arena) {
      from_ko_tform_stairs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from_ko_tform_stairs, submessage_arena);
    }
    
  } else {
    
  }
  from_ko_tform_stairs_ = from_ko_tform_stairs;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.Edge.Annotations.StairData.StraightStaircase.from_ko_tform_stairs)
}

// repeated .bosdyn.api.graph_nav.Edge.Annotations.StairData.StraightStaircase.Stair stairs = 2;
inline int Edge_Annotations_StairData_StraightStaircase::_internal_stairs_size() const {
  return stairs_.size();
}
inline int Edge_Annotations_StairData_StraightStaircase::stairs_size() const {
  return _internal_stairs_size();
}
inline void Edge_Annotations_StairData_StraightStaircase::clear_stairs() {
  stairs_.Clear();
}
inline ::bosdyn::api::graph_nav::Edge_Annotations_StairData_StraightStaircase_Stair* Edge_Annotations_StairData_StraightStaircase::mutable_stairs(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Edge.Annotations.StairData.StraightStaircase.stairs)
  return stairs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::Edge_Annotations_StairData_StraightStaircase_Stair >*
Edge_Annotations_StairData_StraightStaircase::mutable_stairs() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.graph_nav.Edge.Annotations.StairData.StraightStaircase.stairs)
  return &stairs_;
}
inline const ::bosdyn::api::graph_nav::Edge_Annotations_StairData_StraightStaircase_Stair& Edge_Annotations_StairData_StraightStaircase::_internal_stairs(int index) const {
  return stairs_.Get(index);
}
inline const ::bosdyn::api::graph_nav::Edge_Annotations_StairData_StraightStaircase_Stair& Edge_Annotations_StairData_StraightStaircase::stairs(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Edge.Annotations.StairData.StraightStaircase.stairs)
  return _internal_stairs(index);
}
inline ::bosdyn::api::graph_nav::Edge_Annotations_StairData_StraightStaircase_Stair* Edge_Annotations_StairData_StraightStaircase::_internal_add_stairs() {
  return stairs_.Add();
}
inline ::bosdyn::api::graph_nav::Edge_Annotations_StairData_StraightStaircase_Stair* Edge_Annotations_StairData_StraightStaircase::add_stairs() {
  // @@protoc_insertion_point(field_add:bosdyn.api.graph_nav.Edge.Annotations.StairData.StraightStaircase.stairs)
  return _internal_add_stairs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::Edge_Annotations_StairData_StraightStaircase_Stair >&
Edge_Annotations_StairData_StraightStaircase::stairs() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.graph_nav.Edge.Annotations.StairData.StraightStaircase.stairs)
  return stairs_;
}

// -------------------------------------------------------------------

// Edge_Annotations_StairData

// .bosdyn.api.graph_nav.AnnotationState state = 1;
inline void Edge_Annotations_StairData::clear_state() {
  state_ = 0;
}
inline ::bosdyn::api::graph_nav::AnnotationState Edge_Annotations_StairData::_internal_state() const {
  return static_cast< ::bosdyn::api::graph_nav::AnnotationState >(state_);
}
inline ::bosdyn::api::graph_nav::AnnotationState Edge_Annotations_StairData::state() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Edge.Annotations.StairData.state)
  return _internal_state();
}
inline void Edge_Annotations_StairData::_internal_set_state(::bosdyn::api::graph_nav::AnnotationState value) {
  
  state_ = value;
}
inline void Edge_Annotations_StairData::set_state(::bosdyn::api::graph_nav::AnnotationState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.Edge.Annotations.StairData.state)
}

// .bosdyn.api.graph_nav.Edge.Annotations.StairData.StraightStaircase straight_staircase = 2;
inline bool Edge_Annotations_StairData::_internal_has_straight_staircase() const {
  return this != internal_default_instance() && straight_staircase_ != nullptr;
}
inline bool Edge_Annotations_StairData::has_straight_staircase() const {
  return _internal_has_straight_staircase();
}
inline void Edge_Annotations_StairData::clear_straight_staircase() {
  if (GetArena() == nullptr && straight_staircase_ != nullptr) {
    delete straight_staircase_;
  }
  straight_staircase_ = nullptr;
}
inline const ::bosdyn::api::graph_nav::Edge_Annotations_StairData_StraightStaircase& Edge_Annotations_StairData::_internal_straight_staircase() const {
  const ::bosdyn::api::graph_nav::Edge_Annotations_StairData_StraightStaircase* p = straight_staircase_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::graph_nav::Edge_Annotations_StairData_StraightStaircase*>(
      &::bosdyn::api::graph_nav::_Edge_Annotations_StairData_StraightStaircase_default_instance_);
}
inline const ::bosdyn::api::graph_nav::Edge_Annotations_StairData_StraightStaircase& Edge_Annotations_StairData::straight_staircase() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Edge.Annotations.StairData.straight_staircase)
  return _internal_straight_staircase();
}
inline void Edge_Annotations_StairData::unsafe_arena_set_allocated_straight_staircase(
    ::bosdyn::api::graph_nav::Edge_Annotations_StairData_StraightStaircase* straight_staircase) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(straight_staircase_);
  }
  straight_staircase_ = straight_staircase;
  if (straight_staircase) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.Edge.Annotations.StairData.straight_staircase)
}
inline ::bosdyn::api::graph_nav::Edge_Annotations_StairData_StraightStaircase* Edge_Annotations_StairData::release_straight_staircase() {
  
  ::bosdyn::api::graph_nav::Edge_Annotations_StairData_StraightStaircase* temp = straight_staircase_;
  straight_staircase_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::graph_nav::Edge_Annotations_StairData_StraightStaircase* Edge_Annotations_StairData::unsafe_arena_release_straight_staircase() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Edge.Annotations.StairData.straight_staircase)
  
  ::bosdyn::api::graph_nav::Edge_Annotations_StairData_StraightStaircase* temp = straight_staircase_;
  straight_staircase_ = nullptr;
  return temp;
}
inline ::bosdyn::api::graph_nav::Edge_Annotations_StairData_StraightStaircase* Edge_Annotations_StairData::_internal_mutable_straight_staircase() {
  
  if (straight_staircase_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::graph_nav::Edge_Annotations_StairData_StraightStaircase>(GetArena());
    straight_staircase_ = p;
  }
  return straight_staircase_;
}
inline ::bosdyn::api::graph_nav::Edge_Annotations_StairData_StraightStaircase* Edge_Annotations_StairData::mutable_straight_staircase() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Edge.Annotations.StairData.straight_staircase)
  return _internal_mutable_straight_staircase();
}
inline void Edge_Annotations_StairData::set_allocated_straight_staircase(::bosdyn::api::graph_nav::Edge_Annotations_StairData_StraightStaircase* straight_staircase) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete straight_staircase_;
  }
  if (straight_staircase) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(straight_staircase);
    if (message_arena != submessage_arena) {
      straight_staircase = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, straight_staircase, submessage_arena);
    }
    
  } else {
    
  }
  straight_staircase_ = straight_staircase;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.Edge.Annotations.StairData.straight_staircase)
}

// -------------------------------------------------------------------

// Edge_Annotations

// .bosdyn.api.SE2VelocityLimit vel_limit = 1;
inline bool Edge_Annotations::_internal_has_vel_limit() const {
  return this != internal_default_instance() && vel_limit_ != nullptr;
}
inline bool Edge_Annotations::has_vel_limit() const {
  return _internal_has_vel_limit();
}
inline const ::bosdyn::api::SE2VelocityLimit& Edge_Annotations::_internal_vel_limit() const {
  const ::bosdyn::api::SE2VelocityLimit* p = vel_limit_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::SE2VelocityLimit*>(
      &::bosdyn::api::_SE2VelocityLimit_default_instance_);
}
inline const ::bosdyn::api::SE2VelocityLimit& Edge_Annotations::vel_limit() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Edge.Annotations.vel_limit)
  return _internal_vel_limit();
}
inline void Edge_Annotations::unsafe_arena_set_allocated_vel_limit(
    ::bosdyn::api::SE2VelocityLimit* vel_limit) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vel_limit_);
  }
  vel_limit_ = vel_limit;
  if (vel_limit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.Edge.Annotations.vel_limit)
}
inline ::bosdyn::api::SE2VelocityLimit* Edge_Annotations::release_vel_limit() {
  
  ::bosdyn::api::SE2VelocityLimit* temp = vel_limit_;
  vel_limit_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::SE2VelocityLimit* Edge_Annotations::unsafe_arena_release_vel_limit() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Edge.Annotations.vel_limit)
  
  ::bosdyn::api::SE2VelocityLimit* temp = vel_limit_;
  vel_limit_ = nullptr;
  return temp;
}
inline ::bosdyn::api::SE2VelocityLimit* Edge_Annotations::_internal_mutable_vel_limit() {
  
  if (vel_limit_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::SE2VelocityLimit>(GetArena());
    vel_limit_ = p;
  }
  return vel_limit_;
}
inline ::bosdyn::api::SE2VelocityLimit* Edge_Annotations::mutable_vel_limit() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Edge.Annotations.vel_limit)
  return _internal_mutable_vel_limit();
}
inline void Edge_Annotations::set_allocated_vel_limit(::bosdyn::api::SE2VelocityLimit* vel_limit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vel_limit_);
  }
  if (vel_limit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vel_limit)->GetArena();
    if (message_arena != submessage_arena) {
      vel_limit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vel_limit, submessage_arena);
    }
    
  } else {
    
  }
  vel_limit_ = vel_limit;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.Edge.Annotations.vel_limit)
}

// .bosdyn.api.graph_nav.Edge.Annotations.StairData stairs = 2;
inline bool Edge_Annotations::_internal_has_stairs() const {
  return this != internal_default_instance() && stairs_ != nullptr;
}
inline bool Edge_Annotations::has_stairs() const {
  return _internal_has_stairs();
}
inline void Edge_Annotations::clear_stairs() {
  if (GetArena() == nullptr && stairs_ != nullptr) {
    delete stairs_;
  }
  stairs_ = nullptr;
}
inline const ::bosdyn::api::graph_nav::Edge_Annotations_StairData& Edge_Annotations::_internal_stairs() const {
  const ::bosdyn::api::graph_nav::Edge_Annotations_StairData* p = stairs_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::graph_nav::Edge_Annotations_StairData*>(
      &::bosdyn::api::graph_nav::_Edge_Annotations_StairData_default_instance_);
}
inline const ::bosdyn::api::graph_nav::Edge_Annotations_StairData& Edge_Annotations::stairs() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Edge.Annotations.stairs)
  return _internal_stairs();
}
inline void Edge_Annotations::unsafe_arena_set_allocated_stairs(
    ::bosdyn::api::graph_nav::Edge_Annotations_StairData* stairs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stairs_);
  }
  stairs_ = stairs;
  if (stairs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.Edge.Annotations.stairs)
}
inline ::bosdyn::api::graph_nav::Edge_Annotations_StairData* Edge_Annotations::release_stairs() {
  
  ::bosdyn::api::graph_nav::Edge_Annotations_StairData* temp = stairs_;
  stairs_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::graph_nav::Edge_Annotations_StairData* Edge_Annotations::unsafe_arena_release_stairs() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Edge.Annotations.stairs)
  
  ::bosdyn::api::graph_nav::Edge_Annotations_StairData* temp = stairs_;
  stairs_ = nullptr;
  return temp;
}
inline ::bosdyn::api::graph_nav::Edge_Annotations_StairData* Edge_Annotations::_internal_mutable_stairs() {
  
  if (stairs_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::graph_nav::Edge_Annotations_StairData>(GetArena());
    stairs_ = p;
  }
  return stairs_;
}
inline ::bosdyn::api::graph_nav::Edge_Annotations_StairData* Edge_Annotations::mutable_stairs() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Edge.Annotations.stairs)
  return _internal_mutable_stairs();
}
inline void Edge_Annotations::set_allocated_stairs(::bosdyn::api::graph_nav::Edge_Annotations_StairData* stairs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete stairs_;
  }
  if (stairs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stairs);
    if (message_arena != submessage_arena) {
      stairs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stairs, submessage_arena);
    }
    
  } else {
    
  }
  stairs_ = stairs;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.Edge.Annotations.stairs)
}

// .bosdyn.api.graph_nav.Edge.Annotations.DirectionConstraint direction_constraint = 4;
inline void Edge_Annotations::clear_direction_constraint() {
  direction_constraint_ = 0;
}
inline ::bosdyn::api::graph_nav::Edge_Annotations_DirectionConstraint Edge_Annotations::_internal_direction_constraint() const {
  return static_cast< ::bosdyn::api::graph_nav::Edge_Annotations_DirectionConstraint >(direction_constraint_);
}
inline ::bosdyn::api::graph_nav::Edge_Annotations_DirectionConstraint Edge_Annotations::direction_constraint() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Edge.Annotations.direction_constraint)
  return _internal_direction_constraint();
}
inline void Edge_Annotations::_internal_set_direction_constraint(::bosdyn::api::graph_nav::Edge_Annotations_DirectionConstraint value) {
  
  direction_constraint_ = value;
}
inline void Edge_Annotations::set_direction_constraint(::bosdyn::api::graph_nav::Edge_Annotations_DirectionConstraint value) {
  _internal_set_direction_constraint(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.Edge.Annotations.direction_constraint)
}

// .google.protobuf.BoolValue require_alignment = 5;
inline bool Edge_Annotations::_internal_has_require_alignment() const {
  return this != internal_default_instance() && require_alignment_ != nullptr;
}
inline bool Edge_Annotations::has_require_alignment() const {
  return _internal_has_require_alignment();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& Edge_Annotations::_internal_require_alignment() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = require_alignment_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue*>(
      &PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& Edge_Annotations::require_alignment() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Edge.Annotations.require_alignment)
  return _internal_require_alignment();
}
inline void Edge_Annotations::unsafe_arena_set_allocated_require_alignment(
    PROTOBUF_NAMESPACE_ID::BoolValue* require_alignment) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(require_alignment_);
  }
  require_alignment_ = require_alignment;
  if (require_alignment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.Edge.Annotations.require_alignment)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* Edge_Annotations::release_require_alignment() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = require_alignment_;
  require_alignment_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* Edge_Annotations::unsafe_arena_release_require_alignment() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Edge.Annotations.require_alignment)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = require_alignment_;
  require_alignment_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* Edge_Annotations::_internal_mutable_require_alignment() {
  
  if (require_alignment_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    require_alignment_ = p;
  }
  return require_alignment_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* Edge_Annotations::mutable_require_alignment() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Edge.Annotations.require_alignment)
  return _internal_mutable_require_alignment();
}
inline void Edge_Annotations::set_allocated_require_alignment(PROTOBUF_NAMESPACE_ID::BoolValue* require_alignment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(require_alignment_);
  }
  if (require_alignment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(require_alignment)->GetArena();
    if (message_arena != submessage_arena) {
      require_alignment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, require_alignment, submessage_arena);
    }
    
  } else {
    
  }
  require_alignment_ = require_alignment;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.Edge.Annotations.require_alignment)
}

// .google.protobuf.BoolValue flat_ground = 6;
inline bool Edge_Annotations::_internal_has_flat_ground() const {
  return this != internal_default_instance() && flat_ground_ != nullptr;
}
inline bool Edge_Annotations::has_flat_ground() const {
  return _internal_has_flat_ground();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& Edge_Annotations::_internal_flat_ground() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = flat_ground_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue*>(
      &PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& Edge_Annotations::flat_ground() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Edge.Annotations.flat_ground)
  return _internal_flat_ground();
}
inline void Edge_Annotations::unsafe_arena_set_allocated_flat_ground(
    PROTOBUF_NAMESPACE_ID::BoolValue* flat_ground) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flat_ground_);
  }
  flat_ground_ = flat_ground;
  if (flat_ground) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.Edge.Annotations.flat_ground)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* Edge_Annotations::release_flat_ground() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = flat_ground_;
  flat_ground_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* Edge_Annotations::unsafe_arena_release_flat_ground() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Edge.Annotations.flat_ground)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = flat_ground_;
  flat_ground_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* Edge_Annotations::_internal_mutable_flat_ground() {
  
  if (flat_ground_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    flat_ground_ = p;
  }
  return flat_ground_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* Edge_Annotations::mutable_flat_ground() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Edge.Annotations.flat_ground)
  return _internal_mutable_flat_ground();
}
inline void Edge_Annotations::set_allocated_flat_ground(PROTOBUF_NAMESPACE_ID::BoolValue* flat_ground) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(flat_ground_);
  }
  if (flat_ground) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flat_ground)->GetArena();
    if (message_arena != submessage_arena) {
      flat_ground = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flat_ground, submessage_arena);
    }
    
  } else {
    
  }
  flat_ground_ = flat_ground;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.Edge.Annotations.flat_ground)
}

// .google.protobuf.DoubleValue ground_mu_hint = 7;
inline bool Edge_Annotations::_internal_has_ground_mu_hint() const {
  return this != internal_default_instance() && ground_mu_hint_ != nullptr;
}
inline bool Edge_Annotations::has_ground_mu_hint() const {
  return _internal_has_ground_mu_hint();
}
inline const PROTOBUF_NAMESPACE_ID::DoubleValue& Edge_Annotations::_internal_ground_mu_hint() const {
  const PROTOBUF_NAMESPACE_ID::DoubleValue* p = ground_mu_hint_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::DoubleValue*>(
      &PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::DoubleValue& Edge_Annotations::ground_mu_hint() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Edge.Annotations.ground_mu_hint)
  return _internal_ground_mu_hint();
}
inline void Edge_Annotations::unsafe_arena_set_allocated_ground_mu_hint(
    PROTOBUF_NAMESPACE_ID::DoubleValue* ground_mu_hint) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ground_mu_hint_);
  }
  ground_mu_hint_ = ground_mu_hint;
  if (ground_mu_hint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.Edge.Annotations.ground_mu_hint)
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* Edge_Annotations::release_ground_mu_hint() {
  
  PROTOBUF_NAMESPACE_ID::DoubleValue* temp = ground_mu_hint_;
  ground_mu_hint_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* Edge_Annotations::unsafe_arena_release_ground_mu_hint() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Edge.Annotations.ground_mu_hint)
  
  PROTOBUF_NAMESPACE_ID::DoubleValue* temp = ground_mu_hint_;
  ground_mu_hint_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* Edge_Annotations::_internal_mutable_ground_mu_hint() {
  
  if (ground_mu_hint_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArena());
    ground_mu_hint_ = p;
  }
  return ground_mu_hint_;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* Edge_Annotations::mutable_ground_mu_hint() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Edge.Annotations.ground_mu_hint)
  return _internal_mutable_ground_mu_hint();
}
inline void Edge_Annotations::set_allocated_ground_mu_hint(PROTOBUF_NAMESPACE_ID::DoubleValue* ground_mu_hint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ground_mu_hint_);
  }
  if (ground_mu_hint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ground_mu_hint)->GetArena();
    if (message_arena != submessage_arena) {
      ground_mu_hint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ground_mu_hint, submessage_arena);
    }
    
  } else {
    
  }
  ground_mu_hint_ = ground_mu_hint;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.Edge.Annotations.ground_mu_hint)
}

// .google.protobuf.BoolValue grated_floor = 8;
inline bool Edge_Annotations::_internal_has_grated_floor() const {
  return this != internal_default_instance() && grated_floor_ != nullptr;
}
inline bool Edge_Annotations::has_grated_floor() const {
  return _internal_has_grated_floor();
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& Edge_Annotations::_internal_grated_floor() const {
  const PROTOBUF_NAMESPACE_ID::BoolValue* p = grated_floor_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::BoolValue*>(
      &PROTOBUF_NAMESPACE_ID::_BoolValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::BoolValue& Edge_Annotations::grated_floor() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Edge.Annotations.grated_floor)
  return _internal_grated_floor();
}
inline void Edge_Annotations::unsafe_arena_set_allocated_grated_floor(
    PROTOBUF_NAMESPACE_ID::BoolValue* grated_floor) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(grated_floor_);
  }
  grated_floor_ = grated_floor;
  if (grated_floor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.Edge.Annotations.grated_floor)
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* Edge_Annotations::release_grated_floor() {
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = grated_floor_;
  grated_floor_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* Edge_Annotations::unsafe_arena_release_grated_floor() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Edge.Annotations.grated_floor)
  
  PROTOBUF_NAMESPACE_ID::BoolValue* temp = grated_floor_;
  grated_floor_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* Edge_Annotations::_internal_mutable_grated_floor() {
  
  if (grated_floor_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::BoolValue>(GetArena());
    grated_floor_ = p;
  }
  return grated_floor_;
}
inline PROTOBUF_NAMESPACE_ID::BoolValue* Edge_Annotations::mutable_grated_floor() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Edge.Annotations.grated_floor)
  return _internal_mutable_grated_floor();
}
inline void Edge_Annotations::set_allocated_grated_floor(PROTOBUF_NAMESPACE_ID::BoolValue* grated_floor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(grated_floor_);
  }
  if (grated_floor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(grated_floor)->GetArena();
    if (message_arena != submessage_arena) {
      grated_floor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, grated_floor, submessage_arena);
    }
    
  } else {
    
  }
  grated_floor_ = grated_floor;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.Edge.Annotations.grated_floor)
}

// -------------------------------------------------------------------

// Edge

// .bosdyn.api.graph_nav.Edge.Id id = 1;
inline bool Edge::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool Edge::has_id() const {
  return _internal_has_id();
}
inline void Edge::clear_id() {
  if (GetArena() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
inline const ::bosdyn::api::graph_nav::Edge_Id& Edge::_internal_id() const {
  const ::bosdyn::api::graph_nav::Edge_Id* p = id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::graph_nav::Edge_Id*>(
      &::bosdyn::api::graph_nav::_Edge_Id_default_instance_);
}
inline const ::bosdyn::api::graph_nav::Edge_Id& Edge::id() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Edge.id)
  return _internal_id();
}
inline void Edge::unsafe_arena_set_allocated_id(
    ::bosdyn::api::graph_nav::Edge_Id* id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.Edge.id)
}
inline ::bosdyn::api::graph_nav::Edge_Id* Edge::release_id() {
  
  ::bosdyn::api::graph_nav::Edge_Id* temp = id_;
  id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::graph_nav::Edge_Id* Edge::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Edge.id)
  
  ::bosdyn::api::graph_nav::Edge_Id* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::bosdyn::api::graph_nav::Edge_Id* Edge::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::graph_nav::Edge_Id>(GetArena());
    id_ = p;
  }
  return id_;
}
inline ::bosdyn::api::graph_nav::Edge_Id* Edge::mutable_id() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Edge.id)
  return _internal_mutable_id();
}
inline void Edge::set_allocated_id(::bosdyn::api::graph_nav::Edge_Id* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete id_;
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(id);
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.Edge.id)
}

// string snapshot_id = 2;
inline void Edge::clear_snapshot_id() {
  snapshot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Edge::snapshot_id() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Edge.snapshot_id)
  return _internal_snapshot_id();
}
inline void Edge::set_snapshot_id(const std::string& value) {
  _internal_set_snapshot_id(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.Edge.snapshot_id)
}
inline std::string* Edge::mutable_snapshot_id() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Edge.snapshot_id)
  return _internal_mutable_snapshot_id();
}
inline const std::string& Edge::_internal_snapshot_id() const {
  return snapshot_id_.Get();
}
inline void Edge::_internal_set_snapshot_id(const std::string& value) {
  
  snapshot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Edge::set_snapshot_id(std::string&& value) {
  
  snapshot_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.graph_nav.Edge.snapshot_id)
}
inline void Edge::set_snapshot_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  snapshot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.graph_nav.Edge.snapshot_id)
}
inline void Edge::set_snapshot_id(const char* value,
    size_t size) {
  
  snapshot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.graph_nav.Edge.snapshot_id)
}
inline std::string* Edge::_internal_mutable_snapshot_id() {
  
  return snapshot_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Edge::release_snapshot_id() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Edge.snapshot_id)
  return snapshot_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Edge::set_allocated_snapshot_id(std::string* snapshot_id) {
  if (snapshot_id != nullptr) {
    
  } else {
    
  }
  snapshot_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), snapshot_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.Edge.snapshot_id)
}

// .bosdyn.api.SE3Pose from_tform_to = 3;
inline bool Edge::_internal_has_from_tform_to() const {
  return this != internal_default_instance() && from_tform_to_ != nullptr;
}
inline bool Edge::has_from_tform_to() const {
  return _internal_has_from_tform_to();
}
inline const ::bosdyn::api::SE3Pose& Edge::_internal_from_tform_to() const {
  const ::bosdyn::api::SE3Pose* p = from_tform_to_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::SE3Pose*>(
      &::bosdyn::api::_SE3Pose_default_instance_);
}
inline const ::bosdyn::api::SE3Pose& Edge::from_tform_to() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Edge.from_tform_to)
  return _internal_from_tform_to();
}
inline void Edge::unsafe_arena_set_allocated_from_tform_to(
    ::bosdyn::api::SE3Pose* from_tform_to) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_tform_to_);
  }
  from_tform_to_ = from_tform_to;
  if (from_tform_to) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.Edge.from_tform_to)
}
inline ::bosdyn::api::SE3Pose* Edge::release_from_tform_to() {
  
  ::bosdyn::api::SE3Pose* temp = from_tform_to_;
  from_tform_to_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::SE3Pose* Edge::unsafe_arena_release_from_tform_to() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Edge.from_tform_to)
  
  ::bosdyn::api::SE3Pose* temp = from_tform_to_;
  from_tform_to_ = nullptr;
  return temp;
}
inline ::bosdyn::api::SE3Pose* Edge::_internal_mutable_from_tform_to() {
  
  if (from_tform_to_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::SE3Pose>(GetArena());
    from_tform_to_ = p;
  }
  return from_tform_to_;
}
inline ::bosdyn::api::SE3Pose* Edge::mutable_from_tform_to() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Edge.from_tform_to)
  return _internal_mutable_from_tform_to();
}
inline void Edge::set_allocated_from_tform_to(::bosdyn::api::SE3Pose* from_tform_to) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_tform_to_);
  }
  if (from_tform_to) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_tform_to)->GetArena();
    if (message_arena != submessage_arena) {
      from_tform_to = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from_tform_to, submessage_arena);
    }
    
  } else {
    
  }
  from_tform_to_ = from_tform_to;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.Edge.from_tform_to)
}

// .bosdyn.api.graph_nav.Edge.Annotations annotations = 4;
inline bool Edge::_internal_has_annotations() const {
  return this != internal_default_instance() && annotations_ != nullptr;
}
inline bool Edge::has_annotations() const {
  return _internal_has_annotations();
}
inline void Edge::clear_annotations() {
  if (GetArena() == nullptr && annotations_ != nullptr) {
    delete annotations_;
  }
  annotations_ = nullptr;
}
inline const ::bosdyn::api::graph_nav::Edge_Annotations& Edge::_internal_annotations() const {
  const ::bosdyn::api::graph_nav::Edge_Annotations* p = annotations_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::graph_nav::Edge_Annotations*>(
      &::bosdyn::api::graph_nav::_Edge_Annotations_default_instance_);
}
inline const ::bosdyn::api::graph_nav::Edge_Annotations& Edge::annotations() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Edge.annotations)
  return _internal_annotations();
}
inline void Edge::unsafe_arena_set_allocated_annotations(
    ::bosdyn::api::graph_nav::Edge_Annotations* annotations) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(annotations_);
  }
  annotations_ = annotations;
  if (annotations) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.Edge.annotations)
}
inline ::bosdyn::api::graph_nav::Edge_Annotations* Edge::release_annotations() {
  
  ::bosdyn::api::graph_nav::Edge_Annotations* temp = annotations_;
  annotations_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::graph_nav::Edge_Annotations* Edge::unsafe_arena_release_annotations() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.Edge.annotations)
  
  ::bosdyn::api::graph_nav::Edge_Annotations* temp = annotations_;
  annotations_ = nullptr;
  return temp;
}
inline ::bosdyn::api::graph_nav::Edge_Annotations* Edge::_internal_mutable_annotations() {
  
  if (annotations_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::graph_nav::Edge_Annotations>(GetArena());
    annotations_ = p;
  }
  return annotations_;
}
inline ::bosdyn::api::graph_nav::Edge_Annotations* Edge::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Edge.annotations)
  return _internal_mutable_annotations();
}
inline void Edge::set_allocated_annotations(::bosdyn::api::graph_nav::Edge_Annotations* annotations) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete annotations_;
  }
  if (annotations) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(annotations);
    if (message_arena != submessage_arena) {
      annotations = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, annotations, submessage_arena);
    }
    
  } else {
    
  }
  annotations_ = annotations;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.Edge.annotations)
}

// -------------------------------------------------------------------

// EdgeSnapshot_Stance

// .google.protobuf.Timestamp timestamp = 1;
inline bool EdgeSnapshot_Stance::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool EdgeSnapshot_Stance::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& EdgeSnapshot_Stance::_internal_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& EdgeSnapshot_Stance::timestamp() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.EdgeSnapshot.Stance.timestamp)
  return _internal_timestamp();
}
inline void EdgeSnapshot_Stance::unsafe_arena_set_allocated_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.EdgeSnapshot.Stance.timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EdgeSnapshot_Stance::release_timestamp() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EdgeSnapshot_Stance::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.EdgeSnapshot.Stance.timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EdgeSnapshot_Stance::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    timestamp_ = p;
  }
  return timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EdgeSnapshot_Stance::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.EdgeSnapshot.Stance.timestamp)
  return _internal_mutable_timestamp();
}
inline void EdgeSnapshot_Stance::set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.EdgeSnapshot.Stance.timestamp)
}

// repeated .bosdyn.api.FootState foot_states = 2;
inline int EdgeSnapshot_Stance::_internal_foot_states_size() const {
  return foot_states_.size();
}
inline int EdgeSnapshot_Stance::foot_states_size() const {
  return _internal_foot_states_size();
}
inline ::bosdyn::api::FootState* EdgeSnapshot_Stance::mutable_foot_states(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.EdgeSnapshot.Stance.foot_states)
  return foot_states_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::FootState >*
EdgeSnapshot_Stance::mutable_foot_states() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.graph_nav.EdgeSnapshot.Stance.foot_states)
  return &foot_states_;
}
inline const ::bosdyn::api::FootState& EdgeSnapshot_Stance::_internal_foot_states(int index) const {
  return foot_states_.Get(index);
}
inline const ::bosdyn::api::FootState& EdgeSnapshot_Stance::foot_states(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.EdgeSnapshot.Stance.foot_states)
  return _internal_foot_states(index);
}
inline ::bosdyn::api::FootState* EdgeSnapshot_Stance::_internal_add_foot_states() {
  return foot_states_.Add();
}
inline ::bosdyn::api::FootState* EdgeSnapshot_Stance::add_foot_states() {
  // @@protoc_insertion_point(field_add:bosdyn.api.graph_nav.EdgeSnapshot.Stance.foot_states)
  return _internal_add_foot_states();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::FootState >&
EdgeSnapshot_Stance::foot_states() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.graph_nav.EdgeSnapshot.Stance.foot_states)
  return foot_states_;
}

// .bosdyn.api.SE3Pose ko_tform_body = 3;
inline bool EdgeSnapshot_Stance::_internal_has_ko_tform_body() const {
  return this != internal_default_instance() && ko_tform_body_ != nullptr;
}
inline bool EdgeSnapshot_Stance::has_ko_tform_body() const {
  return _internal_has_ko_tform_body();
}
inline const ::bosdyn::api::SE3Pose& EdgeSnapshot_Stance::_internal_ko_tform_body() const {
  const ::bosdyn::api::SE3Pose* p = ko_tform_body_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::SE3Pose*>(
      &::bosdyn::api::_SE3Pose_default_instance_);
}
inline const ::bosdyn::api::SE3Pose& EdgeSnapshot_Stance::ko_tform_body() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.EdgeSnapshot.Stance.ko_tform_body)
  return _internal_ko_tform_body();
}
inline void EdgeSnapshot_Stance::unsafe_arena_set_allocated_ko_tform_body(
    ::bosdyn::api::SE3Pose* ko_tform_body) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ko_tform_body_);
  }
  ko_tform_body_ = ko_tform_body;
  if (ko_tform_body) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.graph_nav.EdgeSnapshot.Stance.ko_tform_body)
}
inline ::bosdyn::api::SE3Pose* EdgeSnapshot_Stance::release_ko_tform_body() {
  
  ::bosdyn::api::SE3Pose* temp = ko_tform_body_;
  ko_tform_body_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::SE3Pose* EdgeSnapshot_Stance::unsafe_arena_release_ko_tform_body() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.EdgeSnapshot.Stance.ko_tform_body)
  
  ::bosdyn::api::SE3Pose* temp = ko_tform_body_;
  ko_tform_body_ = nullptr;
  return temp;
}
inline ::bosdyn::api::SE3Pose* EdgeSnapshot_Stance::_internal_mutable_ko_tform_body() {
  
  if (ko_tform_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::SE3Pose>(GetArena());
    ko_tform_body_ = p;
  }
  return ko_tform_body_;
}
inline ::bosdyn::api::SE3Pose* EdgeSnapshot_Stance::mutable_ko_tform_body() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.EdgeSnapshot.Stance.ko_tform_body)
  return _internal_mutable_ko_tform_body();
}
inline void EdgeSnapshot_Stance::set_allocated_ko_tform_body(::bosdyn::api::SE3Pose* ko_tform_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ko_tform_body_);
  }
  if (ko_tform_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ko_tform_body)->GetArena();
    if (message_arena != submessage_arena) {
      ko_tform_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ko_tform_body, submessage_arena);
    }
    
  } else {
    
  }
  ko_tform_body_ = ko_tform_body;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.EdgeSnapshot.Stance.ko_tform_body)
}

// -------------------------------------------------------------------

// EdgeSnapshot

// string id = 1;
inline void EdgeSnapshot::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& EdgeSnapshot::id() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.EdgeSnapshot.id)
  return _internal_id();
}
inline void EdgeSnapshot::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.graph_nav.EdgeSnapshot.id)
}
inline std::string* EdgeSnapshot::mutable_id() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.EdgeSnapshot.id)
  return _internal_mutable_id();
}
inline const std::string& EdgeSnapshot::_internal_id() const {
  return id_.Get();
}
inline void EdgeSnapshot::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void EdgeSnapshot::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.graph_nav.EdgeSnapshot.id)
}
inline void EdgeSnapshot::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.graph_nav.EdgeSnapshot.id)
}
inline void EdgeSnapshot::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.graph_nav.EdgeSnapshot.id)
}
inline std::string* EdgeSnapshot::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* EdgeSnapshot::release_id() {
  // @@protoc_insertion_point(field_release:bosdyn.api.graph_nav.EdgeSnapshot.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EdgeSnapshot::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.graph_nav.EdgeSnapshot.id)
}

// repeated .bosdyn.api.graph_nav.EdgeSnapshot.Stance stances = 2;
inline int EdgeSnapshot::_internal_stances_size() const {
  return stances_.size();
}
inline int EdgeSnapshot::stances_size() const {
  return _internal_stances_size();
}
inline void EdgeSnapshot::clear_stances() {
  stances_.Clear();
}
inline ::bosdyn::api::graph_nav::EdgeSnapshot_Stance* EdgeSnapshot::mutable_stances(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.EdgeSnapshot.stances)
  return stances_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::EdgeSnapshot_Stance >*
EdgeSnapshot::mutable_stances() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.graph_nav.EdgeSnapshot.stances)
  return &stances_;
}
inline const ::bosdyn::api::graph_nav::EdgeSnapshot_Stance& EdgeSnapshot::_internal_stances(int index) const {
  return stances_.Get(index);
}
inline const ::bosdyn::api::graph_nav::EdgeSnapshot_Stance& EdgeSnapshot::stances(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.EdgeSnapshot.stances)
  return _internal_stances(index);
}
inline ::bosdyn::api::graph_nav::EdgeSnapshot_Stance* EdgeSnapshot::_internal_add_stances() {
  return stances_.Add();
}
inline ::bosdyn::api::graph_nav::EdgeSnapshot_Stance* EdgeSnapshot::add_stances() {
  // @@protoc_insertion_point(field_add:bosdyn.api.graph_nav.EdgeSnapshot.stances)
  return _internal_add_stances();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::EdgeSnapshot_Stance >&
EdgeSnapshot::stances() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.graph_nav.EdgeSnapshot.stances)
  return stances_;
}

// -------------------------------------------------------------------

// Graph

// repeated .bosdyn.api.graph_nav.Waypoint waypoints = 1;
inline int Graph::_internal_waypoints_size() const {
  return waypoints_.size();
}
inline int Graph::waypoints_size() const {
  return _internal_waypoints_size();
}
inline void Graph::clear_waypoints() {
  waypoints_.Clear();
}
inline ::bosdyn::api::graph_nav::Waypoint* Graph::mutable_waypoints(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Graph.waypoints)
  return waypoints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::Waypoint >*
Graph::mutable_waypoints() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.graph_nav.Graph.waypoints)
  return &waypoints_;
}
inline const ::bosdyn::api::graph_nav::Waypoint& Graph::_internal_waypoints(int index) const {
  return waypoints_.Get(index);
}
inline const ::bosdyn::api::graph_nav::Waypoint& Graph::waypoints(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Graph.waypoints)
  return _internal_waypoints(index);
}
inline ::bosdyn::api::graph_nav::Waypoint* Graph::_internal_add_waypoints() {
  return waypoints_.Add();
}
inline ::bosdyn::api::graph_nav::Waypoint* Graph::add_waypoints() {
  // @@protoc_insertion_point(field_add:bosdyn.api.graph_nav.Graph.waypoints)
  return _internal_add_waypoints();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::Waypoint >&
Graph::waypoints() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.graph_nav.Graph.waypoints)
  return waypoints_;
}

// repeated .bosdyn.api.graph_nav.Edge edges = 2;
inline int Graph::_internal_edges_size() const {
  return edges_.size();
}
inline int Graph::edges_size() const {
  return _internal_edges_size();
}
inline void Graph::clear_edges() {
  edges_.Clear();
}
inline ::bosdyn::api::graph_nav::Edge* Graph::mutable_edges(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.graph_nav.Graph.edges)
  return edges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::Edge >*
Graph::mutable_edges() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.graph_nav.Graph.edges)
  return &edges_;
}
inline const ::bosdyn::api::graph_nav::Edge& Graph::_internal_edges(int index) const {
  return edges_.Get(index);
}
inline const ::bosdyn::api::graph_nav::Edge& Graph::edges(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.graph_nav.Graph.edges)
  return _internal_edges(index);
}
inline ::bosdyn::api::graph_nav::Edge* Graph::_internal_add_edges() {
  return edges_.Add();
}
inline ::bosdyn::api::graph_nav::Edge* Graph::add_edges() {
  // @@protoc_insertion_point(field_add:bosdyn.api.graph_nav.Graph.edges)
  return _internal_add_edges();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::graph_nav::Edge >&
Graph::edges() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.graph_nav.Graph.edges)
  return edges_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace graph_nav
}  // namespace api
}  // namespace bosdyn

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bosdyn::api::graph_nav::Edge_Annotations_DirectionConstraint> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::graph_nav::Edge_Annotations_DirectionConstraint>() {
  return ::bosdyn::api::graph_nav::Edge_Annotations_DirectionConstraint_descriptor();
}
template <> struct is_proto_enum< ::bosdyn::api::graph_nav::AnnotationState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::graph_nav::AnnotationState>() {
  return ::bosdyn::api::graph_nav::AnnotationState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto
