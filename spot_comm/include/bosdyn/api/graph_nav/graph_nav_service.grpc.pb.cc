// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bosdyn/api/graph_nav/graph_nav_service.proto

#include "bosdyn/api/graph_nav/graph_nav_service.pb.h"
#include "bosdyn/api/graph_nav/graph_nav_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace bosdyn {
namespace api {
namespace graph_nav {

static const char* GraphNavService_method_names[] = {
  "/bosdyn.api.graph_nav.GraphNavService/SetLocalization",
  "/bosdyn.api.graph_nav.GraphNavService/NavigateRoute",
  "/bosdyn.api.graph_nav.GraphNavService/NavigateTo",
  "/bosdyn.api.graph_nav.GraphNavService/NavigationFeedback",
  "/bosdyn.api.graph_nav.GraphNavService/GetLocalizationState",
  "/bosdyn.api.graph_nav.GraphNavService/ClearGraph",
  "/bosdyn.api.graph_nav.GraphNavService/DownloadGraph",
  "/bosdyn.api.graph_nav.GraphNavService/UploadGraph",
  "/bosdyn.api.graph_nav.GraphNavService/UploadWaypointSnapshot",
  "/bosdyn.api.graph_nav.GraphNavService/UploadEdgeSnapshot",
  "/bosdyn.api.graph_nav.GraphNavService/DownloadWaypointSnapshot",
  "/bosdyn.api.graph_nav.GraphNavService/DownloadEdgeSnapshot",
};

std::unique_ptr< GraphNavService::Stub> GraphNavService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< GraphNavService::Stub> stub(new GraphNavService::Stub(channel));
  return stub;
}

GraphNavService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SetLocalization_(GraphNavService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NavigateRoute_(GraphNavService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NavigateTo_(GraphNavService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NavigationFeedback_(GraphNavService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLocalizationState_(GraphNavService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ClearGraph_(GraphNavService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DownloadGraph_(GraphNavService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UploadGraph_(GraphNavService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UploadWaypointSnapshot_(GraphNavService_method_names[8], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_UploadEdgeSnapshot_(GraphNavService_method_names[9], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_DownloadWaypointSnapshot_(GraphNavService_method_names[10], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_DownloadEdgeSnapshot_(GraphNavService_method_names[11], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status GraphNavService::Stub::SetLocalization(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::SetLocalizationRequest& request, ::bosdyn::api::graph_nav::SetLocalizationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetLocalization_, context, request, response);
}

void GraphNavService::Stub::experimental_async::SetLocalization(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::SetLocalizationRequest* request, ::bosdyn::api::graph_nav::SetLocalizationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetLocalization_, context, request, response, std::move(f));
}

void GraphNavService::Stub::experimental_async::SetLocalization(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::SetLocalizationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetLocalization_, context, request, response, std::move(f));
}

void GraphNavService::Stub::experimental_async::SetLocalization(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::SetLocalizationRequest* request, ::bosdyn::api::graph_nav::SetLocalizationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetLocalization_, context, request, response, reactor);
}

void GraphNavService::Stub::experimental_async::SetLocalization(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::SetLocalizationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetLocalization_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::SetLocalizationResponse>* GraphNavService::Stub::AsyncSetLocalizationRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::SetLocalizationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::graph_nav::SetLocalizationResponse>::Create(channel_.get(), cq, rpcmethod_SetLocalization_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::SetLocalizationResponse>* GraphNavService::Stub::PrepareAsyncSetLocalizationRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::SetLocalizationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::graph_nav::SetLocalizationResponse>::Create(channel_.get(), cq, rpcmethod_SetLocalization_, context, request, false);
}

::grpc::Status GraphNavService::Stub::NavigateRoute(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigateRouteRequest& request, ::bosdyn::api::graph_nav::NavigateRouteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_NavigateRoute_, context, request, response);
}

void GraphNavService::Stub::experimental_async::NavigateRoute(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigateRouteRequest* request, ::bosdyn::api::graph_nav::NavigateRouteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_NavigateRoute_, context, request, response, std::move(f));
}

void GraphNavService::Stub::experimental_async::NavigateRoute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::NavigateRouteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_NavigateRoute_, context, request, response, std::move(f));
}

void GraphNavService::Stub::experimental_async::NavigateRoute(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigateRouteRequest* request, ::bosdyn::api::graph_nav::NavigateRouteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_NavigateRoute_, context, request, response, reactor);
}

void GraphNavService::Stub::experimental_async::NavigateRoute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::NavigateRouteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_NavigateRoute_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::NavigateRouteResponse>* GraphNavService::Stub::AsyncNavigateRouteRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigateRouteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::graph_nav::NavigateRouteResponse>::Create(channel_.get(), cq, rpcmethod_NavigateRoute_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::NavigateRouteResponse>* GraphNavService::Stub::PrepareAsyncNavigateRouteRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigateRouteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::graph_nav::NavigateRouteResponse>::Create(channel_.get(), cq, rpcmethod_NavigateRoute_, context, request, false);
}

::grpc::Status GraphNavService::Stub::NavigateTo(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigateToRequest& request, ::bosdyn::api::graph_nav::NavigateToResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_NavigateTo_, context, request, response);
}

void GraphNavService::Stub::experimental_async::NavigateTo(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigateToRequest* request, ::bosdyn::api::graph_nav::NavigateToResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_NavigateTo_, context, request, response, std::move(f));
}

void GraphNavService::Stub::experimental_async::NavigateTo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::NavigateToResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_NavigateTo_, context, request, response, std::move(f));
}

void GraphNavService::Stub::experimental_async::NavigateTo(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigateToRequest* request, ::bosdyn::api::graph_nav::NavigateToResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_NavigateTo_, context, request, response, reactor);
}

void GraphNavService::Stub::experimental_async::NavigateTo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::NavigateToResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_NavigateTo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::NavigateToResponse>* GraphNavService::Stub::AsyncNavigateToRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigateToRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::graph_nav::NavigateToResponse>::Create(channel_.get(), cq, rpcmethod_NavigateTo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::NavigateToResponse>* GraphNavService::Stub::PrepareAsyncNavigateToRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigateToRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::graph_nav::NavigateToResponse>::Create(channel_.get(), cq, rpcmethod_NavigateTo_, context, request, false);
}

::grpc::Status GraphNavService::Stub::NavigationFeedback(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigationFeedbackRequest& request, ::bosdyn::api::graph_nav::NavigationFeedbackResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_NavigationFeedback_, context, request, response);
}

void GraphNavService::Stub::experimental_async::NavigationFeedback(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigationFeedbackRequest* request, ::bosdyn::api::graph_nav::NavigationFeedbackResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_NavigationFeedback_, context, request, response, std::move(f));
}

void GraphNavService::Stub::experimental_async::NavigationFeedback(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::NavigationFeedbackResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_NavigationFeedback_, context, request, response, std::move(f));
}

void GraphNavService::Stub::experimental_async::NavigationFeedback(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigationFeedbackRequest* request, ::bosdyn::api::graph_nav::NavigationFeedbackResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_NavigationFeedback_, context, request, response, reactor);
}

void GraphNavService::Stub::experimental_async::NavigationFeedback(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::NavigationFeedbackResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_NavigationFeedback_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::NavigationFeedbackResponse>* GraphNavService::Stub::AsyncNavigationFeedbackRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigationFeedbackRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::graph_nav::NavigationFeedbackResponse>::Create(channel_.get(), cq, rpcmethod_NavigationFeedback_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::NavigationFeedbackResponse>* GraphNavService::Stub::PrepareAsyncNavigationFeedbackRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::NavigationFeedbackRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::graph_nav::NavigationFeedbackResponse>::Create(channel_.get(), cq, rpcmethod_NavigationFeedback_, context, request, false);
}

::grpc::Status GraphNavService::Stub::GetLocalizationState(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::GetLocalizationStateRequest& request, ::bosdyn::api::graph_nav::GetLocalizationStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetLocalizationState_, context, request, response);
}

void GraphNavService::Stub::experimental_async::GetLocalizationState(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::GetLocalizationStateRequest* request, ::bosdyn::api::graph_nav::GetLocalizationStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetLocalizationState_, context, request, response, std::move(f));
}

void GraphNavService::Stub::experimental_async::GetLocalizationState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::GetLocalizationStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetLocalizationState_, context, request, response, std::move(f));
}

void GraphNavService::Stub::experimental_async::GetLocalizationState(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::GetLocalizationStateRequest* request, ::bosdyn::api::graph_nav::GetLocalizationStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetLocalizationState_, context, request, response, reactor);
}

void GraphNavService::Stub::experimental_async::GetLocalizationState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::GetLocalizationStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetLocalizationState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::GetLocalizationStateResponse>* GraphNavService::Stub::AsyncGetLocalizationStateRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::GetLocalizationStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::graph_nav::GetLocalizationStateResponse>::Create(channel_.get(), cq, rpcmethod_GetLocalizationState_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::GetLocalizationStateResponse>* GraphNavService::Stub::PrepareAsyncGetLocalizationStateRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::GetLocalizationStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::graph_nav::GetLocalizationStateResponse>::Create(channel_.get(), cq, rpcmethod_GetLocalizationState_, context, request, false);
}

::grpc::Status GraphNavService::Stub::ClearGraph(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::ClearGraphRequest& request, ::bosdyn::api::graph_nav::ClearGraphResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ClearGraph_, context, request, response);
}

void GraphNavService::Stub::experimental_async::ClearGraph(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::ClearGraphRequest* request, ::bosdyn::api::graph_nav::ClearGraphResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ClearGraph_, context, request, response, std::move(f));
}

void GraphNavService::Stub::experimental_async::ClearGraph(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::ClearGraphResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ClearGraph_, context, request, response, std::move(f));
}

void GraphNavService::Stub::experimental_async::ClearGraph(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::ClearGraphRequest* request, ::bosdyn::api::graph_nav::ClearGraphResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ClearGraph_, context, request, response, reactor);
}

void GraphNavService::Stub::experimental_async::ClearGraph(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::ClearGraphResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ClearGraph_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::ClearGraphResponse>* GraphNavService::Stub::AsyncClearGraphRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::ClearGraphRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::graph_nav::ClearGraphResponse>::Create(channel_.get(), cq, rpcmethod_ClearGraph_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::ClearGraphResponse>* GraphNavService::Stub::PrepareAsyncClearGraphRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::ClearGraphRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::graph_nav::ClearGraphResponse>::Create(channel_.get(), cq, rpcmethod_ClearGraph_, context, request, false);
}

::grpc::Status GraphNavService::Stub::DownloadGraph(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::DownloadGraphRequest& request, ::bosdyn::api::graph_nav::DownloadGraphResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DownloadGraph_, context, request, response);
}

void GraphNavService::Stub::experimental_async::DownloadGraph(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::DownloadGraphRequest* request, ::bosdyn::api::graph_nav::DownloadGraphResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DownloadGraph_, context, request, response, std::move(f));
}

void GraphNavService::Stub::experimental_async::DownloadGraph(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::DownloadGraphResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DownloadGraph_, context, request, response, std::move(f));
}

void GraphNavService::Stub::experimental_async::DownloadGraph(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::DownloadGraphRequest* request, ::bosdyn::api::graph_nav::DownloadGraphResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DownloadGraph_, context, request, response, reactor);
}

void GraphNavService::Stub::experimental_async::DownloadGraph(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::DownloadGraphResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DownloadGraph_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::DownloadGraphResponse>* GraphNavService::Stub::AsyncDownloadGraphRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::DownloadGraphRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::graph_nav::DownloadGraphResponse>::Create(channel_.get(), cq, rpcmethod_DownloadGraph_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::DownloadGraphResponse>* GraphNavService::Stub::PrepareAsyncDownloadGraphRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::DownloadGraphRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::graph_nav::DownloadGraphResponse>::Create(channel_.get(), cq, rpcmethod_DownloadGraph_, context, request, false);
}

::grpc::Status GraphNavService::Stub::UploadGraph(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::UploadGraphRequest& request, ::bosdyn::api::graph_nav::UploadGraphResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UploadGraph_, context, request, response);
}

void GraphNavService::Stub::experimental_async::UploadGraph(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::UploadGraphRequest* request, ::bosdyn::api::graph_nav::UploadGraphResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UploadGraph_, context, request, response, std::move(f));
}

void GraphNavService::Stub::experimental_async::UploadGraph(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::UploadGraphResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UploadGraph_, context, request, response, std::move(f));
}

void GraphNavService::Stub::experimental_async::UploadGraph(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::UploadGraphRequest* request, ::bosdyn::api::graph_nav::UploadGraphResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UploadGraph_, context, request, response, reactor);
}

void GraphNavService::Stub::experimental_async::UploadGraph(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::graph_nav::UploadGraphResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UploadGraph_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::UploadGraphResponse>* GraphNavService::Stub::AsyncUploadGraphRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::UploadGraphRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::graph_nav::UploadGraphResponse>::Create(channel_.get(), cq, rpcmethod_UploadGraph_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::graph_nav::UploadGraphResponse>* GraphNavService::Stub::PrepareAsyncUploadGraphRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::UploadGraphRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::graph_nav::UploadGraphResponse>::Create(channel_.get(), cq, rpcmethod_UploadGraph_, context, request, false);
}

::grpc::ClientWriter< ::bosdyn::api::graph_nav::UploadWaypointSnapshotRequest>* GraphNavService::Stub::UploadWaypointSnapshotRaw(::grpc::ClientContext* context, ::bosdyn::api::graph_nav::UploadWaypointSnapshotResponse* response) {
  return ::grpc::internal::ClientWriterFactory< ::bosdyn::api::graph_nav::UploadWaypointSnapshotRequest>::Create(channel_.get(), rpcmethod_UploadWaypointSnapshot_, context, response);
}

void GraphNavService::Stub::experimental_async::UploadWaypointSnapshot(::grpc::ClientContext* context, ::bosdyn::api::graph_nav::UploadWaypointSnapshotResponse* response, ::grpc::experimental::ClientWriteReactor< ::bosdyn::api::graph_nav::UploadWaypointSnapshotRequest>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::bosdyn::api::graph_nav::UploadWaypointSnapshotRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_UploadWaypointSnapshot_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::bosdyn::api::graph_nav::UploadWaypointSnapshotRequest>* GraphNavService::Stub::AsyncUploadWaypointSnapshotRaw(::grpc::ClientContext* context, ::bosdyn::api::graph_nav::UploadWaypointSnapshotResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::bosdyn::api::graph_nav::UploadWaypointSnapshotRequest>::Create(channel_.get(), cq, rpcmethod_UploadWaypointSnapshot_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::bosdyn::api::graph_nav::UploadWaypointSnapshotRequest>* GraphNavService::Stub::PrepareAsyncUploadWaypointSnapshotRaw(::grpc::ClientContext* context, ::bosdyn::api::graph_nav::UploadWaypointSnapshotResponse* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::bosdyn::api::graph_nav::UploadWaypointSnapshotRequest>::Create(channel_.get(), cq, rpcmethod_UploadWaypointSnapshot_, context, response, false, nullptr);
}

::grpc::ClientWriter< ::bosdyn::api::graph_nav::UploadEdgeSnapshotRequest>* GraphNavService::Stub::UploadEdgeSnapshotRaw(::grpc::ClientContext* context, ::bosdyn::api::graph_nav::UploadEdgeSnapshotResponse* response) {
  return ::grpc::internal::ClientWriterFactory< ::bosdyn::api::graph_nav::UploadEdgeSnapshotRequest>::Create(channel_.get(), rpcmethod_UploadEdgeSnapshot_, context, response);
}

void GraphNavService::Stub::experimental_async::UploadEdgeSnapshot(::grpc::ClientContext* context, ::bosdyn::api::graph_nav::UploadEdgeSnapshotResponse* response, ::grpc::experimental::ClientWriteReactor< ::bosdyn::api::graph_nav::UploadEdgeSnapshotRequest>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::bosdyn::api::graph_nav::UploadEdgeSnapshotRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_UploadEdgeSnapshot_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::bosdyn::api::graph_nav::UploadEdgeSnapshotRequest>* GraphNavService::Stub::AsyncUploadEdgeSnapshotRaw(::grpc::ClientContext* context, ::bosdyn::api::graph_nav::UploadEdgeSnapshotResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::bosdyn::api::graph_nav::UploadEdgeSnapshotRequest>::Create(channel_.get(), cq, rpcmethod_UploadEdgeSnapshot_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::bosdyn::api::graph_nav::UploadEdgeSnapshotRequest>* GraphNavService::Stub::PrepareAsyncUploadEdgeSnapshotRaw(::grpc::ClientContext* context, ::bosdyn::api::graph_nav::UploadEdgeSnapshotResponse* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::bosdyn::api::graph_nav::UploadEdgeSnapshotRequest>::Create(channel_.get(), cq, rpcmethod_UploadEdgeSnapshot_, context, response, false, nullptr);
}

::grpc::ClientReader< ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse>* GraphNavService::Stub::DownloadWaypointSnapshotRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::DownloadWaypointSnapshotRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse>::Create(channel_.get(), rpcmethod_DownloadWaypointSnapshot_, context, request);
}

void GraphNavService::Stub::experimental_async::DownloadWaypointSnapshot(::grpc::ClientContext* context, ::bosdyn::api::graph_nav::DownloadWaypointSnapshotRequest* request, ::grpc::experimental::ClientReadReactor< ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_DownloadWaypointSnapshot_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse>* GraphNavService::Stub::AsyncDownloadWaypointSnapshotRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::DownloadWaypointSnapshotRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse>::Create(channel_.get(), cq, rpcmethod_DownloadWaypointSnapshot_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse>* GraphNavService::Stub::PrepareAsyncDownloadWaypointSnapshotRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::DownloadWaypointSnapshotRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse>::Create(channel_.get(), cq, rpcmethod_DownloadWaypointSnapshot_, context, request, false, nullptr);
}

::grpc::ClientReader< ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse>* GraphNavService::Stub::DownloadEdgeSnapshotRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::DownloadEdgeSnapshotRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse>::Create(channel_.get(), rpcmethod_DownloadEdgeSnapshot_, context, request);
}

void GraphNavService::Stub::experimental_async::DownloadEdgeSnapshot(::grpc::ClientContext* context, ::bosdyn::api::graph_nav::DownloadEdgeSnapshotRequest* request, ::grpc::experimental::ClientReadReactor< ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_DownloadEdgeSnapshot_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse>* GraphNavService::Stub::AsyncDownloadEdgeSnapshotRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::DownloadEdgeSnapshotRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse>::Create(channel_.get(), cq, rpcmethod_DownloadEdgeSnapshot_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse>* GraphNavService::Stub::PrepareAsyncDownloadEdgeSnapshotRaw(::grpc::ClientContext* context, const ::bosdyn::api::graph_nav::DownloadEdgeSnapshotRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse>::Create(channel_.get(), cq, rpcmethod_DownloadEdgeSnapshot_, context, request, false, nullptr);
}

GraphNavService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GraphNavService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GraphNavService::Service, ::bosdyn::api::graph_nav::SetLocalizationRequest, ::bosdyn::api::graph_nav::SetLocalizationResponse>(
          [](GraphNavService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::graph_nav::SetLocalizationRequest* req,
             ::bosdyn::api::graph_nav::SetLocalizationResponse* resp) {
               return service->SetLocalization(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GraphNavService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GraphNavService::Service, ::bosdyn::api::graph_nav::NavigateRouteRequest, ::bosdyn::api::graph_nav::NavigateRouteResponse>(
          [](GraphNavService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::graph_nav::NavigateRouteRequest* req,
             ::bosdyn::api::graph_nav::NavigateRouteResponse* resp) {
               return service->NavigateRoute(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GraphNavService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GraphNavService::Service, ::bosdyn::api::graph_nav::NavigateToRequest, ::bosdyn::api::graph_nav::NavigateToResponse>(
          [](GraphNavService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::graph_nav::NavigateToRequest* req,
             ::bosdyn::api::graph_nav::NavigateToResponse* resp) {
               return service->NavigateTo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GraphNavService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GraphNavService::Service, ::bosdyn::api::graph_nav::NavigationFeedbackRequest, ::bosdyn::api::graph_nav::NavigationFeedbackResponse>(
          [](GraphNavService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::graph_nav::NavigationFeedbackRequest* req,
             ::bosdyn::api::graph_nav::NavigationFeedbackResponse* resp) {
               return service->NavigationFeedback(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GraphNavService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GraphNavService::Service, ::bosdyn::api::graph_nav::GetLocalizationStateRequest, ::bosdyn::api::graph_nav::GetLocalizationStateResponse>(
          [](GraphNavService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::graph_nav::GetLocalizationStateRequest* req,
             ::bosdyn::api::graph_nav::GetLocalizationStateResponse* resp) {
               return service->GetLocalizationState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GraphNavService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GraphNavService::Service, ::bosdyn::api::graph_nav::ClearGraphRequest, ::bosdyn::api::graph_nav::ClearGraphResponse>(
          [](GraphNavService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::graph_nav::ClearGraphRequest* req,
             ::bosdyn::api::graph_nav::ClearGraphResponse* resp) {
               return service->ClearGraph(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GraphNavService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GraphNavService::Service, ::bosdyn::api::graph_nav::DownloadGraphRequest, ::bosdyn::api::graph_nav::DownloadGraphResponse>(
          [](GraphNavService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::graph_nav::DownloadGraphRequest* req,
             ::bosdyn::api::graph_nav::DownloadGraphResponse* resp) {
               return service->DownloadGraph(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GraphNavService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GraphNavService::Service, ::bosdyn::api::graph_nav::UploadGraphRequest, ::bosdyn::api::graph_nav::UploadGraphResponse>(
          [](GraphNavService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::graph_nav::UploadGraphRequest* req,
             ::bosdyn::api::graph_nav::UploadGraphResponse* resp) {
               return service->UploadGraph(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GraphNavService_method_names[8],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< GraphNavService::Service, ::bosdyn::api::graph_nav::UploadWaypointSnapshotRequest, ::bosdyn::api::graph_nav::UploadWaypointSnapshotResponse>(
          [](GraphNavService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::bosdyn::api::graph_nav::UploadWaypointSnapshotRequest>* reader,
             ::bosdyn::api::graph_nav::UploadWaypointSnapshotResponse* resp) {
               return service->UploadWaypointSnapshot(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GraphNavService_method_names[9],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< GraphNavService::Service, ::bosdyn::api::graph_nav::UploadEdgeSnapshotRequest, ::bosdyn::api::graph_nav::UploadEdgeSnapshotResponse>(
          [](GraphNavService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::bosdyn::api::graph_nav::UploadEdgeSnapshotRequest>* reader,
             ::bosdyn::api::graph_nav::UploadEdgeSnapshotResponse* resp) {
               return service->UploadEdgeSnapshot(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GraphNavService_method_names[10],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< GraphNavService::Service, ::bosdyn::api::graph_nav::DownloadWaypointSnapshotRequest, ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse>(
          [](GraphNavService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::graph_nav::DownloadWaypointSnapshotRequest* req,
             ::grpc::ServerWriter<::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse>* writer) {
               return service->DownloadWaypointSnapshot(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GraphNavService_method_names[11],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< GraphNavService::Service, ::bosdyn::api::graph_nav::DownloadEdgeSnapshotRequest, ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse>(
          [](GraphNavService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::graph_nav::DownloadEdgeSnapshotRequest* req,
             ::grpc::ServerWriter<::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse>* writer) {
               return service->DownloadEdgeSnapshot(ctx, req, writer);
             }, this)));
}

GraphNavService::Service::~Service() {
}

::grpc::Status GraphNavService::Service::SetLocalization(::grpc::ServerContext* context, const ::bosdyn::api::graph_nav::SetLocalizationRequest* request, ::bosdyn::api::graph_nav::SetLocalizationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GraphNavService::Service::NavigateRoute(::grpc::ServerContext* context, const ::bosdyn::api::graph_nav::NavigateRouteRequest* request, ::bosdyn::api::graph_nav::NavigateRouteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GraphNavService::Service::NavigateTo(::grpc::ServerContext* context, const ::bosdyn::api::graph_nav::NavigateToRequest* request, ::bosdyn::api::graph_nav::NavigateToResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GraphNavService::Service::NavigationFeedback(::grpc::ServerContext* context, const ::bosdyn::api::graph_nav::NavigationFeedbackRequest* request, ::bosdyn::api::graph_nav::NavigationFeedbackResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GraphNavService::Service::GetLocalizationState(::grpc::ServerContext* context, const ::bosdyn::api::graph_nav::GetLocalizationStateRequest* request, ::bosdyn::api::graph_nav::GetLocalizationStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GraphNavService::Service::ClearGraph(::grpc::ServerContext* context, const ::bosdyn::api::graph_nav::ClearGraphRequest* request, ::bosdyn::api::graph_nav::ClearGraphResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GraphNavService::Service::DownloadGraph(::grpc::ServerContext* context, const ::bosdyn::api::graph_nav::DownloadGraphRequest* request, ::bosdyn::api::graph_nav::DownloadGraphResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GraphNavService::Service::UploadGraph(::grpc::ServerContext* context, const ::bosdyn::api::graph_nav::UploadGraphRequest* request, ::bosdyn::api::graph_nav::UploadGraphResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GraphNavService::Service::UploadWaypointSnapshot(::grpc::ServerContext* context, ::grpc::ServerReader< ::bosdyn::api::graph_nav::UploadWaypointSnapshotRequest>* reader, ::bosdyn::api::graph_nav::UploadWaypointSnapshotResponse* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GraphNavService::Service::UploadEdgeSnapshot(::grpc::ServerContext* context, ::grpc::ServerReader< ::bosdyn::api::graph_nav::UploadEdgeSnapshotRequest>* reader, ::bosdyn::api::graph_nav::UploadEdgeSnapshotResponse* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GraphNavService::Service::DownloadWaypointSnapshot(::grpc::ServerContext* context, const ::bosdyn::api::graph_nav::DownloadWaypointSnapshotRequest* request, ::grpc::ServerWriter< ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GraphNavService::Service::DownloadEdgeSnapshot(::grpc::ServerContext* context, const ::bosdyn::api::graph_nav::DownloadEdgeSnapshotRequest* request, ::grpc::ServerWriter< ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace bosdyn
}  // namespace api
}  // namespace graph_nav

