// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/graph_nav/graph_nav.proto

#include "bosdyn/api/graph_nav/graph_nav.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fdata_5fchunk_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DataChunk_bosdyn_2fapi_2fdata_5fchunk_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2frobot_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_KinematicState_bosdyn_2fapi_2frobot_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2flease_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Lease_bosdyn_2fapi_2flease_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2flease_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LeaseUseResult_bosdyn_2fapi_2flease_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SE2VelocityLimit_bosdyn_2fapi_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SE3Pose_bosdyn_2fapi_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Edge_Id_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Graph_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgraph_5fnav_2fnav_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Localization_bosdyn_2fapi_2fgraph_5fnav_2fnav_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LostDetectorState_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemotePointCloudStatus_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgraph_5fnav_2fnav_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Route_bosdyn_2fapi_2fgraph_5fnav_2fnav_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouteGenParams_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetLocalizationResponse_SuspectedAmbiguity_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TravelParams_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_WaypointSnapshot_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace bosdyn {
namespace api {
namespace graph_nav {
class SetLocalizationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetLocalizationRequest> _instance;
} _SetLocalizationRequest_default_instance_;
class SetLocalizationResponse_SuspectedAmbiguityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetLocalizationResponse_SuspectedAmbiguity> _instance;
} _SetLocalizationResponse_SuspectedAmbiguity_default_instance_;
class SetLocalizationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetLocalizationResponse> _instance;
} _SetLocalizationResponse_default_instance_;
class RouteGenParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RouteGenParams> _instance;
} _RouteGenParams_default_instance_;
class TravelParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TravelParams> _instance;
} _TravelParams_default_instance_;
class NavigateToRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NavigateToRequest> _instance;
} _NavigateToRequest_default_instance_;
class NavigateToResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NavigateToResponse> _instance;
} _NavigateToResponse_default_instance_;
class NavigateRouteRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NavigateRouteRequest> _instance;
} _NavigateRouteRequest_default_instance_;
class NavigateRouteResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NavigateRouteResponse> _instance;
} _NavigateRouteResponse_default_instance_;
class NavigationFeedbackRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NavigationFeedbackRequest> _instance;
} _NavigationFeedbackRequest_default_instance_;
class NavigationFeedbackResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NavigationFeedbackResponse> _instance;
} _NavigationFeedbackResponse_default_instance_;
class GetLocalizationStateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLocalizationStateRequest> _instance;
} _GetLocalizationStateRequest_default_instance_;
class RemotePointCloudStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemotePointCloudStatus> _instance;
} _RemotePointCloudStatus_default_instance_;
class LostDetectorStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LostDetectorState> _instance;
} _LostDetectorState_default_instance_;
class GetLocalizationStateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLocalizationStateResponse> _instance;
} _GetLocalizationStateResponse_default_instance_;
class ClearGraphRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClearGraphRequest> _instance;
} _ClearGraphRequest_default_instance_;
class ClearGraphResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClearGraphResponse> _instance;
} _ClearGraphResponse_default_instance_;
class UploadGraphRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UploadGraphRequest> _instance;
} _UploadGraphRequest_default_instance_;
class UploadGraphResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UploadGraphResponse> _instance;
} _UploadGraphResponse_default_instance_;
class DownloadGraphRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DownloadGraphRequest> _instance;
} _DownloadGraphRequest_default_instance_;
class DownloadGraphResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DownloadGraphResponse> _instance;
} _DownloadGraphResponse_default_instance_;
class UploadWaypointSnapshotRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UploadWaypointSnapshotRequest> _instance;
} _UploadWaypointSnapshotRequest_default_instance_;
class UploadWaypointSnapshotResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UploadWaypointSnapshotResponse> _instance;
} _UploadWaypointSnapshotResponse_default_instance_;
class UploadEdgeSnapshotRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UploadEdgeSnapshotRequest> _instance;
} _UploadEdgeSnapshotRequest_default_instance_;
class UploadEdgeSnapshotResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UploadEdgeSnapshotResponse> _instance;
} _UploadEdgeSnapshotResponse_default_instance_;
class DownloadWaypointSnapshotRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DownloadWaypointSnapshotRequest> _instance;
} _DownloadWaypointSnapshotRequest_default_instance_;
class DownloadWaypointSnapshotResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DownloadWaypointSnapshotResponse> _instance;
} _DownloadWaypointSnapshotResponse_default_instance_;
class DownloadEdgeSnapshotRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DownloadEdgeSnapshotRequest> _instance;
} _DownloadEdgeSnapshotRequest_default_instance_;
class DownloadEdgeSnapshotResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DownloadEdgeSnapshotResponse> _instance;
} _DownloadEdgeSnapshotResponse_default_instance_;
}  // namespace graph_nav
}  // namespace api
}  // namespace bosdyn
static void InitDefaultsscc_info_ClearGraphRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::graph_nav::_ClearGraphRequest_default_instance_;
    new (ptr) ::bosdyn::api::graph_nav::ClearGraphRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::graph_nav::ClearGraphRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ClearGraphRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ClearGraphRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_Lease_bosdyn_2fapi_2flease_2eproto.base,}};

static void InitDefaultsscc_info_ClearGraphResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::graph_nav::_ClearGraphResponse_default_instance_;
    new (ptr) ::bosdyn::api::graph_nav::ClearGraphResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::graph_nav::ClearGraphResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ClearGraphResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ClearGraphResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_LeaseUseResult_bosdyn_2fapi_2flease_2eproto.base,}};

static void InitDefaultsscc_info_DownloadEdgeSnapshotRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::graph_nav::_DownloadEdgeSnapshotRequest_default_instance_;
    new (ptr) ::bosdyn::api::graph_nav::DownloadEdgeSnapshotRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::graph_nav::DownloadEdgeSnapshotRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DownloadEdgeSnapshotRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DownloadEdgeSnapshotRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_DownloadEdgeSnapshotResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::graph_nav::_DownloadEdgeSnapshotResponse_default_instance_;
    new (ptr) ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DownloadEdgeSnapshotResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DownloadEdgeSnapshotResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_DataChunk_bosdyn_2fapi_2fdata_5fchunk_2eproto.base,}};

static void InitDefaultsscc_info_DownloadGraphRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::graph_nav::_DownloadGraphRequest_default_instance_;
    new (ptr) ::bosdyn::api::graph_nav::DownloadGraphRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::graph_nav::DownloadGraphRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DownloadGraphRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DownloadGraphRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_DownloadGraphResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::graph_nav::_DownloadGraphResponse_default_instance_;
    new (ptr) ::bosdyn::api::graph_nav::DownloadGraphResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::graph_nav::DownloadGraphResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DownloadGraphResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DownloadGraphResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_Graph_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto.base,}};

static void InitDefaultsscc_info_DownloadWaypointSnapshotRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::graph_nav::_DownloadWaypointSnapshotRequest_default_instance_;
    new (ptr) ::bosdyn::api::graph_nav::DownloadWaypointSnapshotRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::graph_nav::DownloadWaypointSnapshotRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DownloadWaypointSnapshotRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DownloadWaypointSnapshotRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_DownloadWaypointSnapshotResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::graph_nav::_DownloadWaypointSnapshotResponse_default_instance_;
    new (ptr) ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DownloadWaypointSnapshotResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DownloadWaypointSnapshotResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_DataChunk_bosdyn_2fapi_2fdata_5fchunk_2eproto.base,}};

static void InitDefaultsscc_info_GetLocalizationStateRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::graph_nav::_GetLocalizationStateRequest_default_instance_;
    new (ptr) ::bosdyn::api::graph_nav::GetLocalizationStateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::graph_nav::GetLocalizationStateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetLocalizationStateRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetLocalizationStateRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_GetLocalizationStateResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::graph_nav::_GetLocalizationStateResponse_default_instance_;
    new (ptr) ::bosdyn::api::graph_nav::GetLocalizationStateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::graph_nav::GetLocalizationStateResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_GetLocalizationStateResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_GetLocalizationStateResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_Localization_bosdyn_2fapi_2fgraph_5fnav_2fnav_2eproto.base,
      &scc_info_KinematicState_bosdyn_2fapi_2frobot_5fstate_2eproto.base,
      &scc_info_RemotePointCloudStatus_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base,
      &scc_info_WaypointSnapshot_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto.base,
      &scc_info_LostDetectorState_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base,}};

static void InitDefaultsscc_info_LostDetectorState_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::graph_nav::_LostDetectorState_default_instance_;
    new (ptr) ::bosdyn::api::graph_nav::LostDetectorState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::graph_nav::LostDetectorState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LostDetectorState_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LostDetectorState_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto}, {}};

static void InitDefaultsscc_info_NavigateRouteRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::graph_nav::_NavigateRouteRequest_default_instance_;
    new (ptr) ::bosdyn::api::graph_nav::NavigateRouteRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::graph_nav::NavigateRouteRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_NavigateRouteRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_NavigateRouteRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_Lease_bosdyn_2fapi_2flease_2eproto.base,
      &scc_info_Route_bosdyn_2fapi_2fgraph_5fnav_2fnav_2eproto.base,
      &scc_info_TravelParams_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_NavigateRouteResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::graph_nav::_NavigateRouteResponse_default_instance_;
    new (ptr) ::bosdyn::api::graph_nav::NavigateRouteResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::graph_nav::NavigateRouteResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_NavigateRouteResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_NavigateRouteResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_LeaseUseResult_bosdyn_2fapi_2flease_2eproto.base,
      &scc_info_Edge_Id_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto.base,}};

static void InitDefaultsscc_info_NavigateToRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::graph_nav::_NavigateToRequest_default_instance_;
    new (ptr) ::bosdyn::api::graph_nav::NavigateToRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::graph_nav::NavigateToRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_NavigateToRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_NavigateToRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_Lease_bosdyn_2fapi_2flease_2eproto.base,
      &scc_info_RouteGenParams_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base,
      &scc_info_TravelParams_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_NavigateToResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::graph_nav::_NavigateToResponse_default_instance_;
    new (ptr) ::bosdyn::api::graph_nav::NavigateToResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::graph_nav::NavigateToResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_NavigateToResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_NavigateToResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_LeaseUseResult_bosdyn_2fapi_2flease_2eproto.base,}};

static void InitDefaultsscc_info_NavigationFeedbackRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::graph_nav::_NavigationFeedbackRequest_default_instance_;
    new (ptr) ::bosdyn::api::graph_nav::NavigationFeedbackRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::graph_nav::NavigationFeedbackRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NavigationFeedbackRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NavigationFeedbackRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_NavigationFeedbackResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::graph_nav::_NavigationFeedbackResponse_default_instance_;
    new (ptr) ::bosdyn::api::graph_nav::NavigationFeedbackResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::graph_nav::NavigationFeedbackResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_NavigationFeedbackResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_NavigationFeedbackResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_Route_bosdyn_2fapi_2fgraph_5fnav_2fnav_2eproto.base,
      &scc_info_SE3Pose_bosdyn_2fapi_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_RemotePointCloudStatus_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::graph_nav::_RemotePointCloudStatus_default_instance_;
    new (ptr) ::bosdyn::api::graph_nav::RemotePointCloudStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::graph_nav::RemotePointCloudStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemotePointCloudStatus_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemotePointCloudStatus_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto}, {}};

static void InitDefaultsscc_info_RouteGenParams_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::graph_nav::_RouteGenParams_default_instance_;
    new (ptr) ::bosdyn::api::graph_nav::RouteGenParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::graph_nav::RouteGenParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouteGenParams_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RouteGenParams_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto}, {}};

static void InitDefaultsscc_info_SetLocalizationRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::graph_nav::_SetLocalizationRequest_default_instance_;
    new (ptr) ::bosdyn::api::graph_nav::SetLocalizationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::graph_nav::SetLocalizationRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SetLocalizationRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SetLocalizationRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_Localization_bosdyn_2fapi_2fgraph_5fnav_2fnav_2eproto.base,
      &scc_info_SE3Pose_bosdyn_2fapi_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_SetLocalizationResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::graph_nav::_SetLocalizationResponse_default_instance_;
    new (ptr) ::bosdyn::api::graph_nav::SetLocalizationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::graph_nav::SetLocalizationResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_SetLocalizationResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_SetLocalizationResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_LeaseUseResult_bosdyn_2fapi_2flease_2eproto.base,
      &scc_info_Localization_bosdyn_2fapi_2fgraph_5fnav_2fnav_2eproto.base,
      &scc_info_SetLocalizationResponse_SuspectedAmbiguity_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base,}};

static void InitDefaultsscc_info_SetLocalizationResponse_SuspectedAmbiguity_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::graph_nav::_SetLocalizationResponse_SuspectedAmbiguity_default_instance_;
    new (ptr) ::bosdyn::api::graph_nav::SetLocalizationResponse_SuspectedAmbiguity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::graph_nav::SetLocalizationResponse_SuspectedAmbiguity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetLocalizationResponse_SuspectedAmbiguity_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetLocalizationResponse_SuspectedAmbiguity_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto}, {
      &scc_info_SE3Pose_bosdyn_2fapi_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_TravelParams_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::graph_nav::_TravelParams_default_instance_;
    new (ptr) ::bosdyn::api::graph_nav::TravelParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::graph_nav::TravelParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TravelParams_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TravelParams_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto}, {
      &scc_info_SE2VelocityLimit_bosdyn_2fapi_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_UploadEdgeSnapshotRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::graph_nav::_UploadEdgeSnapshotRequest_default_instance_;
    new (ptr) ::bosdyn::api::graph_nav::UploadEdgeSnapshotRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::graph_nav::UploadEdgeSnapshotRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_UploadEdgeSnapshotRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_UploadEdgeSnapshotRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_DataChunk_bosdyn_2fapi_2fdata_5fchunk_2eproto.base,
      &scc_info_Lease_bosdyn_2fapi_2flease_2eproto.base,}};

static void InitDefaultsscc_info_UploadEdgeSnapshotResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::graph_nav::_UploadEdgeSnapshotResponse_default_instance_;
    new (ptr) ::bosdyn::api::graph_nav::UploadEdgeSnapshotResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::graph_nav::UploadEdgeSnapshotResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UploadEdgeSnapshotResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_UploadEdgeSnapshotResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_LeaseUseResult_bosdyn_2fapi_2flease_2eproto.base,}};

static void InitDefaultsscc_info_UploadGraphRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::graph_nav::_UploadGraphRequest_default_instance_;
    new (ptr) ::bosdyn::api::graph_nav::UploadGraphRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::graph_nav::UploadGraphRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_UploadGraphRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_UploadGraphRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_Graph_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto.base,
      &scc_info_Lease_bosdyn_2fapi_2flease_2eproto.base,}};

static void InitDefaultsscc_info_UploadGraphResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::graph_nav::_UploadGraphResponse_default_instance_;
    new (ptr) ::bosdyn::api::graph_nav::UploadGraphResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::graph_nav::UploadGraphResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UploadGraphResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_UploadGraphResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_LeaseUseResult_bosdyn_2fapi_2flease_2eproto.base,}};

static void InitDefaultsscc_info_UploadWaypointSnapshotRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::graph_nav::_UploadWaypointSnapshotRequest_default_instance_;
    new (ptr) ::bosdyn::api::graph_nav::UploadWaypointSnapshotRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::graph_nav::UploadWaypointSnapshotRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_UploadWaypointSnapshotRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_UploadWaypointSnapshotRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_DataChunk_bosdyn_2fapi_2fdata_5fchunk_2eproto.base,
      &scc_info_Lease_bosdyn_2fapi_2flease_2eproto.base,}};

static void InitDefaultsscc_info_UploadWaypointSnapshotResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::graph_nav::_UploadWaypointSnapshotResponse_default_instance_;
    new (ptr) ::bosdyn::api::graph_nav::UploadWaypointSnapshotResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::graph_nav::UploadWaypointSnapshotResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UploadWaypointSnapshotResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_UploadWaypointSnapshotResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_LeaseUseResult_bosdyn_2fapi_2flease_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto[29];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::SetLocalizationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::SetLocalizationRequest, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::SetLocalizationRequest, initial_guess_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::SetLocalizationRequest, ko_tform_body_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::SetLocalizationRequest, max_distance_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::SetLocalizationRequest, max_yaw_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::SetLocalizationRequest, fiducial_init_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::SetLocalizationRequest, use_fiducial_id_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::SetLocalizationRequest, refine_fiducial_result_with_icp_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::SetLocalizationRequest, do_ambiguity_check_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::SetLocalizationResponse_SuspectedAmbiguity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::SetLocalizationResponse_SuspectedAmbiguity, alternate_robot_tform_waypoint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::SetLocalizationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::SetLocalizationResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::SetLocalizationResponse, lease_use_result_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::SetLocalizationResponse, status_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::SetLocalizationResponse, error_report_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::SetLocalizationResponse, localization_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::SetLocalizationResponse, suspected_ambiguity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::RouteGenParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::TravelParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::TravelParams, max_distance_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::TravelParams, max_yaw_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::TravelParams, velocity_limit_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::TravelParams, ignore_final_yaw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::NavigateToRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::NavigateToRequest, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::NavigateToRequest, leases_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::NavigateToRequest, destination_waypoint_id_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::NavigateToRequest, route_params_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::NavigateToRequest, travel_params_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::NavigateToRequest, end_time_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::NavigateToRequest, clock_identifier_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::NavigateToResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::NavigateToResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::NavigateToResponse, lease_use_results_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::NavigateToResponse, status_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::NavigateToResponse, command_id_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::NavigateToResponse, error_waypoint_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::NavigateRouteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::NavigateRouteRequest, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::NavigateRouteRequest, leases_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::NavigateRouteRequest, route_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::NavigateRouteRequest, travel_params_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::NavigateRouteRequest, end_time_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::NavigateRouteRequest, clock_identifier_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::NavigateRouteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::NavigateRouteResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::NavigateRouteResponse, lease_use_results_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::NavigateRouteResponse, status_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::NavigateRouteResponse, command_id_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::NavigateRouteResponse, error_waypoint_ids_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::NavigateRouteResponse, error_edge_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::NavigationFeedbackRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::NavigationFeedbackRequest, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::NavigationFeedbackRequest, command_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::NavigationFeedbackResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::NavigationFeedbackResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::NavigationFeedbackResponse, status_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::NavigationFeedbackResponse, remaining_route_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::NavigationFeedbackResponse, command_id_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::NavigationFeedbackResponse, last_ko_tform_goal_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::GetLocalizationStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::GetLocalizationStateRequest, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::GetLocalizationStateRequest, request_live_point_cloud_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::GetLocalizationStateRequest, request_live_images_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::GetLocalizationStateRequest, request_live_terrain_maps_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::GetLocalizationStateRequest, request_live_world_objects_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::GetLocalizationStateRequest, request_live_robot_state_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::GetLocalizationStateRequest, compress_live_point_cloud_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::RemotePointCloudStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::RemotePointCloudStatus, service_name_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::RemotePointCloudStatus, exists_in_directory_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::RemotePointCloudStatus, has_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::LostDetectorState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::LostDetectorState, is_lost_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::GetLocalizationStateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::GetLocalizationStateResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::GetLocalizationStateResponse, localization_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::GetLocalizationStateResponse, robot_kinematics_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::GetLocalizationStateResponse, remote_cloud_status_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::GetLocalizationStateResponse, live_data_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::GetLocalizationStateResponse, lost_detector_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::ClearGraphRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::ClearGraphRequest, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::ClearGraphRequest, lease_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::ClearGraphResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::ClearGraphResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::ClearGraphResponse, lease_use_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::UploadGraphRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::UploadGraphRequest, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::UploadGraphRequest, graph_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::UploadGraphRequest, lease_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::UploadGraphResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::UploadGraphResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::UploadGraphResponse, status_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::UploadGraphResponse, lease_use_result_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::UploadGraphResponse, loaded_waypoint_snapshot_ids_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::UploadGraphResponse, unknown_waypoint_snapshot_ids_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::UploadGraphResponse, loaded_edge_snapshot_ids_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::UploadGraphResponse, unknown_edge_snapshot_ids_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::UploadGraphResponse, license_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::DownloadGraphRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::DownloadGraphRequest, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::DownloadGraphResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::DownloadGraphResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::DownloadGraphResponse, graph_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::UploadWaypointSnapshotRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::UploadWaypointSnapshotRequest, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::UploadWaypointSnapshotRequest, chunk_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::UploadWaypointSnapshotRequest, lease_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::UploadWaypointSnapshotResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::UploadWaypointSnapshotResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::UploadWaypointSnapshotResponse, lease_use_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::UploadEdgeSnapshotRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::UploadEdgeSnapshotRequest, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::UploadEdgeSnapshotRequest, chunk_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::UploadEdgeSnapshotRequest, lease_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::UploadEdgeSnapshotResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::UploadEdgeSnapshotResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::UploadEdgeSnapshotResponse, lease_use_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::DownloadWaypointSnapshotRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::DownloadWaypointSnapshotRequest, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::DownloadWaypointSnapshotRequest, waypoint_snapshot_id_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::DownloadWaypointSnapshotRequest, download_images_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::DownloadWaypointSnapshotRequest, compress_point_cloud_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse, status_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse, waypoint_snapshot_id_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse, chunk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::DownloadEdgeSnapshotRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::DownloadEdgeSnapshotRequest, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::DownloadEdgeSnapshotRequest, edge_snapshot_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse, status_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse, edge_snapshot_id_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse, chunk_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::bosdyn::api::graph_nav::SetLocalizationRequest)},
  { 14, -1, sizeof(::bosdyn::api::graph_nav::SetLocalizationResponse_SuspectedAmbiguity)},
  { 20, -1, sizeof(::bosdyn::api::graph_nav::SetLocalizationResponse)},
  { 31, -1, sizeof(::bosdyn::api::graph_nav::RouteGenParams)},
  { 36, -1, sizeof(::bosdyn::api::graph_nav::TravelParams)},
  { 45, -1, sizeof(::bosdyn::api::graph_nav::NavigateToRequest)},
  { 57, -1, sizeof(::bosdyn::api::graph_nav::NavigateToResponse)},
  { 67, -1, sizeof(::bosdyn::api::graph_nav::NavigateRouteRequest)},
  { 78, -1, sizeof(::bosdyn::api::graph_nav::NavigateRouteResponse)},
  { 89, -1, sizeof(::bosdyn::api::graph_nav::NavigationFeedbackRequest)},
  { 96, -1, sizeof(::bosdyn::api::graph_nav::NavigationFeedbackResponse)},
  { 106, -1, sizeof(::bosdyn::api::graph_nav::GetLocalizationStateRequest)},
  { 118, -1, sizeof(::bosdyn::api::graph_nav::RemotePointCloudStatus)},
  { 126, -1, sizeof(::bosdyn::api::graph_nav::LostDetectorState)},
  { 132, -1, sizeof(::bosdyn::api::graph_nav::GetLocalizationStateResponse)},
  { 143, -1, sizeof(::bosdyn::api::graph_nav::ClearGraphRequest)},
  { 150, -1, sizeof(::bosdyn::api::graph_nav::ClearGraphResponse)},
  { 157, -1, sizeof(::bosdyn::api::graph_nav::UploadGraphRequest)},
  { 165, -1, sizeof(::bosdyn::api::graph_nav::UploadGraphResponse)},
  { 178, -1, sizeof(::bosdyn::api::graph_nav::DownloadGraphRequest)},
  { 184, -1, sizeof(::bosdyn::api::graph_nav::DownloadGraphResponse)},
  { 191, -1, sizeof(::bosdyn::api::graph_nav::UploadWaypointSnapshotRequest)},
  { 199, -1, sizeof(::bosdyn::api::graph_nav::UploadWaypointSnapshotResponse)},
  { 206, -1, sizeof(::bosdyn::api::graph_nav::UploadEdgeSnapshotRequest)},
  { 214, -1, sizeof(::bosdyn::api::graph_nav::UploadEdgeSnapshotResponse)},
  { 221, -1, sizeof(::bosdyn::api::graph_nav::DownloadWaypointSnapshotRequest)},
  { 230, -1, sizeof(::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse)},
  { 239, -1, sizeof(::bosdyn::api::graph_nav::DownloadEdgeSnapshotRequest)},
  { 246, -1, sizeof(::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::graph_nav::_SetLocalizationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::graph_nav::_SetLocalizationResponse_SuspectedAmbiguity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::graph_nav::_SetLocalizationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::graph_nav::_RouteGenParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::graph_nav::_TravelParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::graph_nav::_NavigateToRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::graph_nav::_NavigateToResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::graph_nav::_NavigateRouteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::graph_nav::_NavigateRouteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::graph_nav::_NavigationFeedbackRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::graph_nav::_NavigationFeedbackResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::graph_nav::_GetLocalizationStateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::graph_nav::_RemotePointCloudStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::graph_nav::_LostDetectorState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::graph_nav::_GetLocalizationStateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::graph_nav::_ClearGraphRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::graph_nav::_ClearGraphResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::graph_nav::_UploadGraphRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::graph_nav::_UploadGraphResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::graph_nav::_DownloadGraphRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::graph_nav::_DownloadGraphResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::graph_nav::_UploadWaypointSnapshotRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::graph_nav::_UploadWaypointSnapshotResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::graph_nav::_UploadEdgeSnapshotRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::graph_nav::_UploadEdgeSnapshotResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::graph_nav::_DownloadWaypointSnapshotRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::graph_nav::_DownloadWaypointSnapshotResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::graph_nav::_DownloadEdgeSnapshotRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::graph_nav::_DownloadEdgeSnapshotResponse_default_instance_),
};

const char descriptor_table_protodef_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$bosdyn/api/graph_nav/graph_nav.proto\022\024"
  "bosdyn.api.graph_nav\032\033bosdyn/api/data_ch"
  "unk.proto\032\031bosdyn/api/geometry.proto\032\036bo"
  "sdyn/api/graph_nav/nav.proto\032\036bosdyn/api"
  "/graph_nav/map.proto\032\027bosdyn/api/header."
  "proto\032\026bosdyn/api/lease.proto\032\030bosdyn/ap"
  "i/license.proto\032\034bosdyn/api/robot_state."
  "proto\032\037google/protobuf/timestamp.proto\"\250"
  "\004\n\026SetLocalizationRequest\022)\n\006header\030\001 \001("
  "\0132\031.bosdyn.api.RequestHeader\0229\n\rinitial_"
  "guess\030\003 \001(\0132\".bosdyn.api.graph_nav.Local"
  "ization\022*\n\rko_tform_body\030\004 \001(\0132\023.bosdyn."
  "api.SE3Pose\022\024\n\014max_distance\030\005 \001(\001\022\017\n\007max"
  "_yaw\030\006 \001(\001\022P\n\rfiducial_init\030\007 \001(\01629.bosd"
  "yn.api.graph_nav.SetLocalizationRequest."
  "FiducialInit\022\027\n\017use_fiducial_id\030\010 \001(\005\022\'\n"
  "\037refine_fiducial_result_with_icp\030\t \001(\010\022\032"
  "\n\022do_ambiguity_check\030\n \001(\010\"\244\001\n\014FiducialI"
  "nit\022\031\n\025FIDUCIAL_INIT_UNKNOWN\020\000\022\035\n\031FIDUCI"
  "AL_INIT_NO_FIDUCIAL\020\001\022\031\n\025FIDUCIAL_INIT_N"
  "EAREST\020\002\022#\n\037FIDUCIAL_INIT_NEAREST_AT_TAR"
  "GET\020\003\022\032\n\026FIDUCIAL_INIT_SPECIFIC\020\004\"\320\004\n\027Se"
  "tLocalizationResponse\022*\n\006header\030\001 \001(\0132\032."
  "bosdyn.api.ResponseHeader\0224\n\020lease_use_r"
  "esult\030\002 \001(\0132\032.bosdyn.api.LeaseUseResult\022"
  "D\n\006status\030\003 \001(\01624.bosdyn.api.graph_nav.S"
  "etLocalizationResponse.Status\022\024\n\014error_r"
  "eport\030\004 \001(\t\0228\n\014localization\030\005 \001(\0132\".bosd"
  "yn.api.graph_nav.Localization\022]\n\023suspect"
  "ed_ambiguity\030\007 \001(\0132@.bosdyn.api.graph_na"
  "v.SetLocalizationResponse.SuspectedAmbig"
  "uity\032Q\n\022SuspectedAmbiguity\022;\n\036alternate_"
  "robot_tform_waypoint\030\001 \001(\0132\023.bosdyn.api."
  "SE3Pose\"\212\001\n\006Status\022\022\n\016STATUS_UNKNOWN\020\000\022\r"
  "\n\tSTATUS_OK\020\001\022\031\n\025STATUS_ROBOT_IMPAIRED\020\002"
  "\022\033\n\027STATUS_UNKNOWN_WAYPOINT\020\003\022\022\n\016STATUS_"
  "ABORTED\020\004\022\021\n\rSTATUS_FAILED\020\005\"\020\n\016RouteGen"
  "Params\"\205\001\n\014TravelParams\022\024\n\014max_distance\030"
  "\001 \001(\001\022\017\n\007max_yaw\030\002 \001(\001\0224\n\016velocity_limit"
  "\030\003 \001(\0132\034.bosdyn.api.SE2VelocityLimit\022\030\n\020"
  "ignore_final_yaw\030\004 \001(\010\"\301\002\n\021NavigateToReq"
  "uest\022)\n\006header\030\001 \001(\0132\031.bosdyn.api.Reques"
  "tHeader\022!\n\006leases\030\002 \003(\0132\021.bosdyn.api.Lea"
  "se\022\037\n\027destination_waypoint_id\030\003 \001(\t\022:\n\014r"
  "oute_params\030\004 \001(\0132$.bosdyn.api.graph_nav"
  ".RouteGenParams\0229\n\rtravel_params\030\005 \001(\0132\""
  ".bosdyn.api.graph_nav.TravelParams\022,\n\010en"
  "d_time\030\006 \001(\0132\032.google.protobuf.Timestamp"
  "\022\030\n\020clock_identifier\030\007 \001(\t\"\254\004\n\022NavigateT"
  "oResponse\022*\n\006header\030\001 \001(\0132\032.bosdyn.api.R"
  "esponseHeader\0225\n\021lease_use_results\030\002 \003(\013"
  "2\032.bosdyn.api.LeaseUseResult\022\?\n\006status\030\003"
  " \001(\0162/.bosdyn.api.graph_nav.NavigateToRe"
  "sponse.Status\022\022\n\ncommand_id\030\004 \001(\r\022\032\n\022err"
  "or_waypoint_ids\030\005 \003(\t\"\301\002\n\006Status\022\022\n\016STAT"
  "US_UNKNOWN\020\000\022\r\n\tSTATUS_OK\020\001\022\026\n\022STATUS_NO"
  "_TIMESYNC\020\002\022\022\n\016STATUS_EXPIRED\020\003\022\026\n\022STATU"
  "S_TOO_DISTANT\020\004\022\031\n\025STATUS_ROBOT_IMPAIRED"
  "\020\005\022\024\n\020STATUS_RECORDING\020\006\022\033\n\027STATUS_UNKNO"
  "WN_WAYPOINT\020\007\022\022\n\016STATUS_NO_PATH\020\010\022\031\n\025STA"
  "TUS_FEATURE_DESERT\020\n\022\017\n\013STATUS_LOST\020\013\022\037\n"
  "\033STATUS_NOT_LOCALIZED_TO_MAP\020\r\022!\n\035STATUS"
  "_COULD_NOT_UPDATE_ROUTE\020\014\"\223\002\n\024NavigateRo"
  "uteRequest\022)\n\006header\030\001 \001(\0132\031.bosdyn.api."
  "RequestHeader\022!\n\006leases\030\002 \003(\0132\021.bosdyn.a"
  "pi.Lease\022*\n\005route\030\003 \001(\0132\033.bosdyn.api.gra"
  "ph_nav.Route\0229\n\rtravel_params\030\004 \001(\0132\".bo"
  "sdyn.api.graph_nav.TravelParams\022,\n\010end_t"
  "ime\030\005 \001(\0132\032.google.protobuf.Timestamp\022\030\n"
  "\020clock_identifier\030\006 \001(\t\"\223\005\n\025NavigateRout"
  "eResponse\022*\n\006header\030\001 \001(\0132\032.bosdyn.api.R"
  "esponseHeader\0225\n\021lease_use_results\030\002 \003(\013"
  "2\032.bosdyn.api.LeaseUseResult\022B\n\006status\030\003"
  " \001(\01622.bosdyn.api.graph_nav.NavigateRout"
  "eResponse.Status\022\022\n\ncommand_id\030\004 \001(\r\022\032\n\022"
  "error_waypoint_ids\030\005 \003(\t\0225\n\016error_edge_i"
  "ds\030\006 \003(\0132\035.bosdyn.api.graph_nav.Edge.Id\""
  "\353\002\n\006Status\022\022\n\016STATUS_UNKNOWN\020\000\022\r\n\tSTATUS"
  "_OK\020\001\022\026\n\022STATUS_NO_TIMESYNC\020\002\022\022\n\016STATUS_"
  "EXPIRED\020\003\022\026\n\022STATUS_TOO_DISTANT\020\004\022\031\n\025STA"
  "TUS_ROBOT_IMPAIRED\020\005\022\024\n\020STATUS_RECORDING"
  "\020\006\022!\n\035STATUS_UNKNOWN_ROUTE_ELEMENTS\020\010\022\027\n"
  "\023STATUS_INVALID_EDGE\020\t\022\033\n\027STATUS_CONSTRA"
  "INT_FAULT\020\013\022\031\n\025STATUS_FEATURE_DESERT\020\r\022\017"
  "\n\013STATUS_LOST\020\016\022!\n\035STATUS_NOT_LOCALIZED_"
  "TO_ROUTE\020\020\022!\n\035STATUS_COULD_NOT_UPDATE_RO"
  "UTE\020\017\"Z\n\031NavigationFeedbackRequest\022)\n\006he"
  "ader\030\001 \001(\0132\031.bosdyn.api.RequestHeader\022\022\n"
  "\ncommand_id\030\002 \001(\r\"\344\004\n\032NavigationFeedback"
  "Response\022*\n\006header\030\001 \001(\0132\032.bosdyn.api.Re"
  "sponseHeader\022G\n\006status\030\002 \001(\01627.bosdyn.ap"
  "i.graph_nav.NavigationFeedbackResponse.S"
  "tatus\0224\n\017remaining_route\030\003 \001(\0132\033.bosdyn."
  "api.graph_nav.Route\022\022\n\ncommand_id\030\004 \001(\r\022"
  "/\n\022last_ko_tform_goal\030\005 \001(\0132\023.bosdyn.api"
  ".SE3Pose\"\325\002\n\006Status\022\022\n\016STATUS_UNKNOWN\020\000\022"
  "\032\n\026STATUS_FOLLOWING_ROUTE\020\001\022\027\n\023STATUS_RE"
  "ACHED_GOAL\020\002\022\023\n\017STATUS_NO_ROUTE\020\003\022\032\n\026STA"
  "TUS_NO_LOCALIZATION\020\004\022\017\n\013STATUS_LOST\020\005\022\020"
  "\n\014STATUS_STUCK\020\006\022\034\n\030STATUS_COMMAND_TIMED"
  "_OUT\020\007\022\031\n\025STATUS_ROBOT_IMPAIRED\020\010\022\033\n\027STA"
  "TUS_CONSTRAINT_FAULT\020\013\022\035\n\031STATUS_COMMAND"
  "_OVERRIDDEN\020\014\022!\n\035STATUS_NOT_LOCALIZED_TO"
  "_ROUTE\020\r\022\026\n\022STATUS_LEASE_ERROR\020\016\"\223\002\n\033Get"
  "LocalizationStateRequest\022)\n\006header\030\001 \001(\013"
  "2\031.bosdyn.api.RequestHeader\022 \n\030request_l"
  "ive_point_cloud\030\002 \001(\010\022\033\n\023request_live_im"
  "ages\030\003 \001(\010\022!\n\031request_live_terrain_maps\030"
  "\004 \001(\010\022\"\n\032request_live_world_objects\030\005 \001("
  "\010\022 \n\030request_live_robot_state\030\006 \001(\010\022!\n\031c"
  "ompress_live_point_cloud\030\007 \001(\010\"]\n\026Remote"
  "PointCloudStatus\022\024\n\014service_name\030\001 \001(\t\022\033"
  "\n\023exists_in_directory\030\002 \001(\010\022\020\n\010has_data\030"
  "\003 \001(\010\"$\n\021LostDetectorState\022\017\n\007is_lost\030\001 "
  "\001(\010\"\206\003\n\034GetLocalizationStateResponse\022*\n\006"
  "header\030\001 \001(\0132\032.bosdyn.api.ResponseHeader"
  "\0228\n\014localization\030\002 \001(\0132\".bosdyn.api.grap"
  "h_nav.Localization\0224\n\020robot_kinematics\030\004"
  " \001(\0132\032.bosdyn.api.KinematicState\022I\n\023remo"
  "te_cloud_status\030\005 \003(\0132,.bosdyn.api.graph"
  "_nav.RemotePointCloudStatus\0229\n\tlive_data"
  "\030\006 \001(\0132&.bosdyn.api.graph_nav.WaypointSn"
  "apshot\022D\n\023lost_detector_state\030\007 \001(\0132\'.bo"
  "sdyn.api.graph_nav.LostDetectorState\"`\n\021"
  "ClearGraphRequest\022)\n\006header\030\001 \001(\0132\031.bosd"
  "yn.api.RequestHeader\022 \n\005lease\030\002 \001(\0132\021.bo"
  "sdyn.api.Lease\"v\n\022ClearGraphResponse\022*\n\006"
  "header\030\001 \001(\0132\032.bosdyn.api.ResponseHeader"
  "\0224\n\020lease_use_result\030\002 \001(\0132\032.bosdyn.api."
  "LeaseUseResult\"\215\001\n\022UploadGraphRequest\022)\n"
  "\006header\030\001 \001(\0132\031.bosdyn.api.RequestHeader"
  "\022*\n\005graph\030\002 \001(\0132\033.bosdyn.api.graph_nav.G"
  "raph\022 \n\005lease\030\003 \001(\0132\021.bosdyn.api.Lease\"\322"
  "\003\n\023UploadGraphResponse\022*\n\006header\030\001 \001(\0132\032"
  ".bosdyn.api.ResponseHeader\022@\n\006status\030\010 \001"
  "(\01620.bosdyn.api.graph_nav.UploadGraphRes"
  "ponse.Status\0224\n\020lease_use_result\030\002 \001(\0132\032"
  ".bosdyn.api.LeaseUseResult\022$\n\034loaded_way"
  "point_snapshot_ids\030\003 \003(\t\022%\n\035unknown_wayp"
  "oint_snapshot_ids\030\004 \003(\t\022 \n\030loaded_edge_s"
  "napshot_ids\030\005 \003(\t\022!\n\031unknown_edge_snapsh"
  "ot_ids\030\006 \003(\t\0226\n\016license_status\030\007 \001(\0162\036.b"
  "osdyn.api.LicenseInfo.Status\"M\n\006Status\022\022"
  "\n\016STATUS_UNKNOWN\020\000\022\r\n\tSTATUS_OK\020\001\022 \n\034STA"
  "TUS_MAP_TOO_LARGE_LICENSE\020\003\"A\n\024DownloadG"
  "raphRequest\022)\n\006header\030\001 \001(\0132\031.bosdyn.api"
  ".RequestHeader\"o\n\025DownloadGraphResponse\022"
  "*\n\006header\030\001 \001(\0132\032.bosdyn.api.ResponseHea"
  "der\022*\n\005graph\030\002 \001(\0132\033.bosdyn.api.graph_na"
  "v.Graph\"\222\001\n\035UploadWaypointSnapshotReques"
  "t\022)\n\006header\030\001 \001(\0132\031.bosdyn.api.RequestHe"
  "ader\022$\n\005chunk\030\003 \001(\0132\025.bosdyn.api.DataChu"
  "nk\022 \n\005lease\030\004 \001(\0132\021.bosdyn.api.Lease\"\202\001\n"
  "\036UploadWaypointSnapshotResponse\022*\n\006heade"
  "r\030\001 \001(\0132\032.bosdyn.api.ResponseHeader\0224\n\020l"
  "ease_use_result\030\002 \001(\0132\032.bosdyn.api.Lease"
  "UseResult\"\216\001\n\031UploadEdgeSnapshotRequest\022"
  ")\n\006header\030\001 \001(\0132\031.bosdyn.api.RequestHead"
  "er\022$\n\005chunk\030\004 \001(\0132\025.bosdyn.api.DataChunk"
  "\022 \n\005lease\030\005 \001(\0132\021.bosdyn.api.Lease\"~\n\032Up"
  "loadEdgeSnapshotResponse\022*\n\006header\030\001 \001(\013"
  "2\032.bosdyn.api.ResponseHeader\0224\n\020lease_us"
  "e_result\030\002 \001(\0132\032.bosdyn.api.LeaseUseResu"
  "lt\"\241\001\n\037DownloadWaypointSnapshotRequest\022)"
  "\n\006header\030\001 \001(\0132\031.bosdyn.api.RequestHeade"
  "r\022\034\n\024waypoint_snapshot_id\030\002 \001(\t\022\027\n\017downl"
  "oad_images\030\003 \001(\010\022\034\n\024compress_point_cloud"
  "\030\004 \001(\010\"\262\002\n DownloadWaypointSnapshotRespo"
  "nse\022*\n\006header\030\001 \001(\0132\032.bosdyn.api.Respons"
  "eHeader\022M\n\006status\030\002 \001(\0162=.bosdyn.api.gra"
  "ph_nav.DownloadWaypointSnapshotResponse."
  "Status\022\034\n\024waypoint_snapshot_id\030\004 \001(\t\022$\n\005"
  "chunk\030\005 \001(\0132\025.bosdyn.api.DataChunk\"O\n\006St"
  "atus\022\022\n\016STATUS_UNKNOWN\020\000\022\r\n\tSTATUS_OK\020\001\022"
  "\"\n\036STATUS_SNAPSHOT_DOES_NOT_EXIST\020\002\"b\n\033D"
  "ownloadEdgeSnapshotRequest\022)\n\006header\030\001 \001"
  "(\0132\031.bosdyn.api.RequestHeader\022\030\n\020edge_sn"
  "apshot_id\030\002 \001(\t\"\246\002\n\034DownloadEdgeSnapshot"
  "Response\022*\n\006header\030\001 \001(\0132\032.bosdyn.api.Re"
  "sponseHeader\022I\n\006status\030\002 \001(\01629.bosdyn.ap"
  "i.graph_nav.DownloadEdgeSnapshotResponse"
  ".Status\022\030\n\020edge_snapshot_id\030\004 \001(\t\022$\n\005chu"
  "nk\030\005 \001(\0132\025.bosdyn.api.DataChunk\"O\n\006Statu"
  "s\022\022\n\016STATUS_UNKNOWN\020\000\022\r\n\tSTATUS_OK\020\001\022\"\n\036"
  "STATUS_SNAPSHOT_DOES_NOT_EXIST\020\002B\017B\rGrap"
  "hNavProtob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto_deps[9] = {
  &::descriptor_table_bosdyn_2fapi_2fdata_5fchunk_2eproto,
  &::descriptor_table_bosdyn_2fapi_2fgeometry_2eproto,
  &::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fmap_2eproto,
  &::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fnav_2eproto,
  &::descriptor_table_bosdyn_2fapi_2fheader_2eproto,
  &::descriptor_table_bosdyn_2fapi_2flease_2eproto,
  &::descriptor_table_bosdyn_2fapi_2flicense_2eproto,
  &::descriptor_table_bosdyn_2fapi_2frobot_5fstate_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto_sccs[29] = {
  &scc_info_ClearGraphRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base,
  &scc_info_ClearGraphResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base,
  &scc_info_DownloadEdgeSnapshotRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base,
  &scc_info_DownloadEdgeSnapshotResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base,
  &scc_info_DownloadGraphRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base,
  &scc_info_DownloadGraphResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base,
  &scc_info_DownloadWaypointSnapshotRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base,
  &scc_info_DownloadWaypointSnapshotResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base,
  &scc_info_GetLocalizationStateRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base,
  &scc_info_GetLocalizationStateResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base,
  &scc_info_LostDetectorState_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base,
  &scc_info_NavigateRouteRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base,
  &scc_info_NavigateRouteResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base,
  &scc_info_NavigateToRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base,
  &scc_info_NavigateToResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base,
  &scc_info_NavigationFeedbackRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base,
  &scc_info_NavigationFeedbackResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base,
  &scc_info_RemotePointCloudStatus_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base,
  &scc_info_RouteGenParams_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base,
  &scc_info_SetLocalizationRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base,
  &scc_info_SetLocalizationResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base,
  &scc_info_SetLocalizationResponse_SuspectedAmbiguity_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base,
  &scc_info_TravelParams_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base,
  &scc_info_UploadEdgeSnapshotRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base,
  &scc_info_UploadEdgeSnapshotResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base,
  &scc_info_UploadGraphRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base,
  &scc_info_UploadGraphResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base,
  &scc_info_UploadWaypointSnapshotRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base,
  &scc_info_UploadWaypointSnapshotResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto = {
  false, false, descriptor_table_protodef_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto, "bosdyn/api/graph_nav/graph_nav.proto", 7417,
  &descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto_once, descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto_sccs, descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto_deps, 29, 9,
  schemas, file_default_instances, TableStruct_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto::offsets,
  file_level_metadata_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto, 29, file_level_enum_descriptors_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto, file_level_service_descriptors_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto)), true);
namespace bosdyn {
namespace api {
namespace graph_nav {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SetLocalizationRequest_FiducialInit_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto[0];
}
bool SetLocalizationRequest_FiducialInit_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SetLocalizationRequest_FiducialInit SetLocalizationRequest::FIDUCIAL_INIT_UNKNOWN;
constexpr SetLocalizationRequest_FiducialInit SetLocalizationRequest::FIDUCIAL_INIT_NO_FIDUCIAL;
constexpr SetLocalizationRequest_FiducialInit SetLocalizationRequest::FIDUCIAL_INIT_NEAREST;
constexpr SetLocalizationRequest_FiducialInit SetLocalizationRequest::FIDUCIAL_INIT_NEAREST_AT_TARGET;
constexpr SetLocalizationRequest_FiducialInit SetLocalizationRequest::FIDUCIAL_INIT_SPECIFIC;
constexpr SetLocalizationRequest_FiducialInit SetLocalizationRequest::FiducialInit_MIN;
constexpr SetLocalizationRequest_FiducialInit SetLocalizationRequest::FiducialInit_MAX;
constexpr int SetLocalizationRequest::FiducialInit_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SetLocalizationResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto[1];
}
bool SetLocalizationResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SetLocalizationResponse_Status SetLocalizationResponse::STATUS_UNKNOWN;
constexpr SetLocalizationResponse_Status SetLocalizationResponse::STATUS_OK;
constexpr SetLocalizationResponse_Status SetLocalizationResponse::STATUS_ROBOT_IMPAIRED;
constexpr SetLocalizationResponse_Status SetLocalizationResponse::STATUS_UNKNOWN_WAYPOINT;
constexpr SetLocalizationResponse_Status SetLocalizationResponse::STATUS_ABORTED;
constexpr SetLocalizationResponse_Status SetLocalizationResponse::STATUS_FAILED;
constexpr SetLocalizationResponse_Status SetLocalizationResponse::Status_MIN;
constexpr SetLocalizationResponse_Status SetLocalizationResponse::Status_MAX;
constexpr int SetLocalizationResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NavigateToResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto[2];
}
bool NavigateToResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr NavigateToResponse_Status NavigateToResponse::STATUS_UNKNOWN;
constexpr NavigateToResponse_Status NavigateToResponse::STATUS_OK;
constexpr NavigateToResponse_Status NavigateToResponse::STATUS_NO_TIMESYNC;
constexpr NavigateToResponse_Status NavigateToResponse::STATUS_EXPIRED;
constexpr NavigateToResponse_Status NavigateToResponse::STATUS_TOO_DISTANT;
constexpr NavigateToResponse_Status NavigateToResponse::STATUS_ROBOT_IMPAIRED;
constexpr NavigateToResponse_Status NavigateToResponse::STATUS_RECORDING;
constexpr NavigateToResponse_Status NavigateToResponse::STATUS_UNKNOWN_WAYPOINT;
constexpr NavigateToResponse_Status NavigateToResponse::STATUS_NO_PATH;
constexpr NavigateToResponse_Status NavigateToResponse::STATUS_FEATURE_DESERT;
constexpr NavigateToResponse_Status NavigateToResponse::STATUS_LOST;
constexpr NavigateToResponse_Status NavigateToResponse::STATUS_NOT_LOCALIZED_TO_MAP;
constexpr NavigateToResponse_Status NavigateToResponse::STATUS_COULD_NOT_UPDATE_ROUTE;
constexpr NavigateToResponse_Status NavigateToResponse::Status_MIN;
constexpr NavigateToResponse_Status NavigateToResponse::Status_MAX;
constexpr int NavigateToResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NavigateRouteResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto[3];
}
bool NavigateRouteResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 8:
    case 9:
    case 11:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr NavigateRouteResponse_Status NavigateRouteResponse::STATUS_UNKNOWN;
constexpr NavigateRouteResponse_Status NavigateRouteResponse::STATUS_OK;
constexpr NavigateRouteResponse_Status NavigateRouteResponse::STATUS_NO_TIMESYNC;
constexpr NavigateRouteResponse_Status NavigateRouteResponse::STATUS_EXPIRED;
constexpr NavigateRouteResponse_Status NavigateRouteResponse::STATUS_TOO_DISTANT;
constexpr NavigateRouteResponse_Status NavigateRouteResponse::STATUS_ROBOT_IMPAIRED;
constexpr NavigateRouteResponse_Status NavigateRouteResponse::STATUS_RECORDING;
constexpr NavigateRouteResponse_Status NavigateRouteResponse::STATUS_UNKNOWN_ROUTE_ELEMENTS;
constexpr NavigateRouteResponse_Status NavigateRouteResponse::STATUS_INVALID_EDGE;
constexpr NavigateRouteResponse_Status NavigateRouteResponse::STATUS_CONSTRAINT_FAULT;
constexpr NavigateRouteResponse_Status NavigateRouteResponse::STATUS_FEATURE_DESERT;
constexpr NavigateRouteResponse_Status NavigateRouteResponse::STATUS_LOST;
constexpr NavigateRouteResponse_Status NavigateRouteResponse::STATUS_NOT_LOCALIZED_TO_ROUTE;
constexpr NavigateRouteResponse_Status NavigateRouteResponse::STATUS_COULD_NOT_UPDATE_ROUTE;
constexpr NavigateRouteResponse_Status NavigateRouteResponse::Status_MIN;
constexpr NavigateRouteResponse_Status NavigateRouteResponse::Status_MAX;
constexpr int NavigateRouteResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NavigationFeedbackResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto[4];
}
bool NavigationFeedbackResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr NavigationFeedbackResponse_Status NavigationFeedbackResponse::STATUS_UNKNOWN;
constexpr NavigationFeedbackResponse_Status NavigationFeedbackResponse::STATUS_FOLLOWING_ROUTE;
constexpr NavigationFeedbackResponse_Status NavigationFeedbackResponse::STATUS_REACHED_GOAL;
constexpr NavigationFeedbackResponse_Status NavigationFeedbackResponse::STATUS_NO_ROUTE;
constexpr NavigationFeedbackResponse_Status NavigationFeedbackResponse::STATUS_NO_LOCALIZATION;
constexpr NavigationFeedbackResponse_Status NavigationFeedbackResponse::STATUS_LOST;
constexpr NavigationFeedbackResponse_Status NavigationFeedbackResponse::STATUS_STUCK;
constexpr NavigationFeedbackResponse_Status NavigationFeedbackResponse::STATUS_COMMAND_TIMED_OUT;
constexpr NavigationFeedbackResponse_Status NavigationFeedbackResponse::STATUS_ROBOT_IMPAIRED;
constexpr NavigationFeedbackResponse_Status NavigationFeedbackResponse::STATUS_CONSTRAINT_FAULT;
constexpr NavigationFeedbackResponse_Status NavigationFeedbackResponse::STATUS_COMMAND_OVERRIDDEN;
constexpr NavigationFeedbackResponse_Status NavigationFeedbackResponse::STATUS_NOT_LOCALIZED_TO_ROUTE;
constexpr NavigationFeedbackResponse_Status NavigationFeedbackResponse::STATUS_LEASE_ERROR;
constexpr NavigationFeedbackResponse_Status NavigationFeedbackResponse::Status_MIN;
constexpr NavigationFeedbackResponse_Status NavigationFeedbackResponse::Status_MAX;
constexpr int NavigationFeedbackResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UploadGraphResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto[5];
}
bool UploadGraphResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UploadGraphResponse_Status UploadGraphResponse::STATUS_UNKNOWN;
constexpr UploadGraphResponse_Status UploadGraphResponse::STATUS_OK;
constexpr UploadGraphResponse_Status UploadGraphResponse::STATUS_MAP_TOO_LARGE_LICENSE;
constexpr UploadGraphResponse_Status UploadGraphResponse::Status_MIN;
constexpr UploadGraphResponse_Status UploadGraphResponse::Status_MAX;
constexpr int UploadGraphResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DownloadWaypointSnapshotResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto[6];
}
bool DownloadWaypointSnapshotResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DownloadWaypointSnapshotResponse_Status DownloadWaypointSnapshotResponse::STATUS_UNKNOWN;
constexpr DownloadWaypointSnapshotResponse_Status DownloadWaypointSnapshotResponse::STATUS_OK;
constexpr DownloadWaypointSnapshotResponse_Status DownloadWaypointSnapshotResponse::STATUS_SNAPSHOT_DOES_NOT_EXIST;
constexpr DownloadWaypointSnapshotResponse_Status DownloadWaypointSnapshotResponse::Status_MIN;
constexpr DownloadWaypointSnapshotResponse_Status DownloadWaypointSnapshotResponse::Status_MAX;
constexpr int DownloadWaypointSnapshotResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DownloadEdgeSnapshotResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto[7];
}
bool DownloadEdgeSnapshotResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DownloadEdgeSnapshotResponse_Status DownloadEdgeSnapshotResponse::STATUS_UNKNOWN;
constexpr DownloadEdgeSnapshotResponse_Status DownloadEdgeSnapshotResponse::STATUS_OK;
constexpr DownloadEdgeSnapshotResponse_Status DownloadEdgeSnapshotResponse::STATUS_SNAPSHOT_DOES_NOT_EXIST;
constexpr DownloadEdgeSnapshotResponse_Status DownloadEdgeSnapshotResponse::Status_MIN;
constexpr DownloadEdgeSnapshotResponse_Status DownloadEdgeSnapshotResponse::Status_MAX;
constexpr int DownloadEdgeSnapshotResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void SetLocalizationRequest::InitAsDefaultInstance() {
  ::bosdyn::api::graph_nav::_SetLocalizationRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
  ::bosdyn::api::graph_nav::_SetLocalizationRequest_default_instance_._instance.get_mutable()->initial_guess_ = const_cast< ::bosdyn::api::graph_nav::Localization*>(
      ::bosdyn::api::graph_nav::Localization::internal_default_instance());
  ::bosdyn::api::graph_nav::_SetLocalizationRequest_default_instance_._instance.get_mutable()->ko_tform_body_ = const_cast< ::bosdyn::api::SE3Pose*>(
      ::bosdyn::api::SE3Pose::internal_default_instance());
}
class SetLocalizationRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const SetLocalizationRequest* msg);
  static const ::bosdyn::api::graph_nav::Localization& initial_guess(const SetLocalizationRequest* msg);
  static const ::bosdyn::api::SE3Pose& ko_tform_body(const SetLocalizationRequest* msg);
};

const ::bosdyn::api::RequestHeader&
SetLocalizationRequest::_Internal::header(const SetLocalizationRequest* msg) {
  return *msg->header_;
}
const ::bosdyn::api::graph_nav::Localization&
SetLocalizationRequest::_Internal::initial_guess(const SetLocalizationRequest* msg) {
  return *msg->initial_guess_;
}
const ::bosdyn::api::SE3Pose&
SetLocalizationRequest::_Internal::ko_tform_body(const SetLocalizationRequest* msg) {
  return *msg->ko_tform_body_;
}
void SetLocalizationRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void SetLocalizationRequest::clear_initial_guess() {
  if (GetArena() == nullptr && initial_guess_ != nullptr) {
    delete initial_guess_;
  }
  initial_guess_ = nullptr;
}
void SetLocalizationRequest::clear_ko_tform_body() {
  if (GetArena() == nullptr && ko_tform_body_ != nullptr) {
    delete ko_tform_body_;
  }
  ko_tform_body_ = nullptr;
}
SetLocalizationRequest::SetLocalizationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.graph_nav.SetLocalizationRequest)
}
SetLocalizationRequest::SetLocalizationRequest(const SetLocalizationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_initial_guess()) {
    initial_guess_ = new ::bosdyn::api::graph_nav::Localization(*from.initial_guess_);
  } else {
    initial_guess_ = nullptr;
  }
  if (from._internal_has_ko_tform_body()) {
    ko_tform_body_ = new ::bosdyn::api::SE3Pose(*from.ko_tform_body_);
  } else {
    ko_tform_body_ = nullptr;
  }
  ::memcpy(&max_distance_, &from.max_distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&do_ambiguity_check_) -
    reinterpret_cast<char*>(&max_distance_)) + sizeof(do_ambiguity_check_));
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.graph_nav.SetLocalizationRequest)
}

void SetLocalizationRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetLocalizationRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&do_ambiguity_check_) -
      reinterpret_cast<char*>(&header_)) + sizeof(do_ambiguity_check_));
}

SetLocalizationRequest::~SetLocalizationRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.graph_nav.SetLocalizationRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetLocalizationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete initial_guess_;
  if (this != internal_default_instance()) delete ko_tform_body_;
}

void SetLocalizationRequest::ArenaDtor(void* object) {
  SetLocalizationRequest* _this = reinterpret_cast< SetLocalizationRequest* >(object);
  (void)_this;
}
void SetLocalizationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetLocalizationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetLocalizationRequest& SetLocalizationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetLocalizationRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base);
  return *internal_default_instance();
}


void SetLocalizationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.graph_nav.SetLocalizationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && initial_guess_ != nullptr) {
    delete initial_guess_;
  }
  initial_guess_ = nullptr;
  if (GetArena() == nullptr && ko_tform_body_ != nullptr) {
    delete ko_tform_body_;
  }
  ko_tform_body_ = nullptr;
  ::memset(&max_distance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&do_ambiguity_check_) -
      reinterpret_cast<char*>(&max_distance_)) + sizeof(do_ambiguity_check_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetLocalizationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.graph_nav.Localization initial_guess = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_initial_guess(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.SE3Pose ko_tform_body = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ko_tform_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double max_distance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          max_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double max_yaw = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          max_yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.graph_nav.SetLocalizationRequest.FiducialInit fiducial_init = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_fiducial_init(static_cast<::bosdyn::api::graph_nav::SetLocalizationRequest_FiducialInit>(val));
        } else goto handle_unusual;
        continue;
      // int32 use_fiducial_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          use_fiducial_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool refine_fiducial_result_with_icp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          refine_fiducial_result_with_icp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool do_ambiguity_check = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          do_ambiguity_check_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetLocalizationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.graph_nav.SetLocalizationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.graph_nav.Localization initial_guess = 3;
  if (this->has_initial_guess()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::initial_guess(this), target, stream);
  }

  // .bosdyn.api.SE3Pose ko_tform_body = 4;
  if (this->has_ko_tform_body()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::ko_tform_body(this), target, stream);
  }

  // double max_distance = 5;
  if (!(this->max_distance() <= 0 && this->max_distance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_max_distance(), target);
  }

  // double max_yaw = 6;
  if (!(this->max_yaw() <= 0 && this->max_yaw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_max_yaw(), target);
  }

  // .bosdyn.api.graph_nav.SetLocalizationRequest.FiducialInit fiducial_init = 7;
  if (this->fiducial_init() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_fiducial_init(), target);
  }

  // int32 use_fiducial_id = 8;
  if (this->use_fiducial_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_use_fiducial_id(), target);
  }

  // bool refine_fiducial_result_with_icp = 9;
  if (this->refine_fiducial_result_with_icp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_refine_fiducial_result_with_icp(), target);
  }

  // bool do_ambiguity_check = 10;
  if (this->do_ambiguity_check() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_do_ambiguity_check(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.graph_nav.SetLocalizationRequest)
  return target;
}

size_t SetLocalizationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.graph_nav.SetLocalizationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.graph_nav.Localization initial_guess = 3;
  if (this->has_initial_guess()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *initial_guess_);
  }

  // .bosdyn.api.SE3Pose ko_tform_body = 4;
  if (this->has_ko_tform_body()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ko_tform_body_);
  }

  // double max_distance = 5;
  if (!(this->max_distance() <= 0 && this->max_distance() >= 0)) {
    total_size += 1 + 8;
  }

  // double max_yaw = 6;
  if (!(this->max_yaw() <= 0 && this->max_yaw() >= 0)) {
    total_size += 1 + 8;
  }

  // .bosdyn.api.graph_nav.SetLocalizationRequest.FiducialInit fiducial_init = 7;
  if (this->fiducial_init() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_fiducial_init());
  }

  // int32 use_fiducial_id = 8;
  if (this->use_fiducial_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_use_fiducial_id());
  }

  // bool refine_fiducial_result_with_icp = 9;
  if (this->refine_fiducial_result_with_icp() != 0) {
    total_size += 1 + 1;
  }

  // bool do_ambiguity_check = 10;
  if (this->do_ambiguity_check() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetLocalizationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.graph_nav.SetLocalizationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetLocalizationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetLocalizationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.graph_nav.SetLocalizationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.graph_nav.SetLocalizationRequest)
    MergeFrom(*source);
  }
}

void SetLocalizationRequest::MergeFrom(const SetLocalizationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.graph_nav.SetLocalizationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
  if (from.has_initial_guess()) {
    _internal_mutable_initial_guess()->::bosdyn::api::graph_nav::Localization::MergeFrom(from._internal_initial_guess());
  }
  if (from.has_ko_tform_body()) {
    _internal_mutable_ko_tform_body()->::bosdyn::api::SE3Pose::MergeFrom(from._internal_ko_tform_body());
  }
  if (!(from.max_distance() <= 0 && from.max_distance() >= 0)) {
    _internal_set_max_distance(from._internal_max_distance());
  }
  if (!(from.max_yaw() <= 0 && from.max_yaw() >= 0)) {
    _internal_set_max_yaw(from._internal_max_yaw());
  }
  if (from.fiducial_init() != 0) {
    _internal_set_fiducial_init(from._internal_fiducial_init());
  }
  if (from.use_fiducial_id() != 0) {
    _internal_set_use_fiducial_id(from._internal_use_fiducial_id());
  }
  if (from.refine_fiducial_result_with_icp() != 0) {
    _internal_set_refine_fiducial_result_with_icp(from._internal_refine_fiducial_result_with_icp());
  }
  if (from.do_ambiguity_check() != 0) {
    _internal_set_do_ambiguity_check(from._internal_do_ambiguity_check());
  }
}

void SetLocalizationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.graph_nav.SetLocalizationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetLocalizationRequest::CopyFrom(const SetLocalizationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.graph_nav.SetLocalizationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetLocalizationRequest::IsInitialized() const {
  return true;
}

void SetLocalizationRequest::InternalSwap(SetLocalizationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetLocalizationRequest, do_ambiguity_check_)
      + sizeof(SetLocalizationRequest::do_ambiguity_check_)
      - PROTOBUF_FIELD_OFFSET(SetLocalizationRequest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetLocalizationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetLocalizationResponse_SuspectedAmbiguity::InitAsDefaultInstance() {
  ::bosdyn::api::graph_nav::_SetLocalizationResponse_SuspectedAmbiguity_default_instance_._instance.get_mutable()->alternate_robot_tform_waypoint_ = const_cast< ::bosdyn::api::SE3Pose*>(
      ::bosdyn::api::SE3Pose::internal_default_instance());
}
class SetLocalizationResponse_SuspectedAmbiguity::_Internal {
 public:
  static const ::bosdyn::api::SE3Pose& alternate_robot_tform_waypoint(const SetLocalizationResponse_SuspectedAmbiguity* msg);
};

const ::bosdyn::api::SE3Pose&
SetLocalizationResponse_SuspectedAmbiguity::_Internal::alternate_robot_tform_waypoint(const SetLocalizationResponse_SuspectedAmbiguity* msg) {
  return *msg->alternate_robot_tform_waypoint_;
}
void SetLocalizationResponse_SuspectedAmbiguity::clear_alternate_robot_tform_waypoint() {
  if (GetArena() == nullptr && alternate_robot_tform_waypoint_ != nullptr) {
    delete alternate_robot_tform_waypoint_;
  }
  alternate_robot_tform_waypoint_ = nullptr;
}
SetLocalizationResponse_SuspectedAmbiguity::SetLocalizationResponse_SuspectedAmbiguity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.graph_nav.SetLocalizationResponse.SuspectedAmbiguity)
}
SetLocalizationResponse_SuspectedAmbiguity::SetLocalizationResponse_SuspectedAmbiguity(const SetLocalizationResponse_SuspectedAmbiguity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_alternate_robot_tform_waypoint()) {
    alternate_robot_tform_waypoint_ = new ::bosdyn::api::SE3Pose(*from.alternate_robot_tform_waypoint_);
  } else {
    alternate_robot_tform_waypoint_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.graph_nav.SetLocalizationResponse.SuspectedAmbiguity)
}

void SetLocalizationResponse_SuspectedAmbiguity::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetLocalizationResponse_SuspectedAmbiguity_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base);
  alternate_robot_tform_waypoint_ = nullptr;
}

SetLocalizationResponse_SuspectedAmbiguity::~SetLocalizationResponse_SuspectedAmbiguity() {
  // @@protoc_insertion_point(destructor:bosdyn.api.graph_nav.SetLocalizationResponse.SuspectedAmbiguity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetLocalizationResponse_SuspectedAmbiguity::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete alternate_robot_tform_waypoint_;
}

void SetLocalizationResponse_SuspectedAmbiguity::ArenaDtor(void* object) {
  SetLocalizationResponse_SuspectedAmbiguity* _this = reinterpret_cast< SetLocalizationResponse_SuspectedAmbiguity* >(object);
  (void)_this;
}
void SetLocalizationResponse_SuspectedAmbiguity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetLocalizationResponse_SuspectedAmbiguity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetLocalizationResponse_SuspectedAmbiguity& SetLocalizationResponse_SuspectedAmbiguity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetLocalizationResponse_SuspectedAmbiguity_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base);
  return *internal_default_instance();
}


void SetLocalizationResponse_SuspectedAmbiguity::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.graph_nav.SetLocalizationResponse.SuspectedAmbiguity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && alternate_robot_tform_waypoint_ != nullptr) {
    delete alternate_robot_tform_waypoint_;
  }
  alternate_robot_tform_waypoint_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetLocalizationResponse_SuspectedAmbiguity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.SE3Pose alternate_robot_tform_waypoint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_alternate_robot_tform_waypoint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetLocalizationResponse_SuspectedAmbiguity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.graph_nav.SetLocalizationResponse.SuspectedAmbiguity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.SE3Pose alternate_robot_tform_waypoint = 1;
  if (this->has_alternate_robot_tform_waypoint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::alternate_robot_tform_waypoint(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.graph_nav.SetLocalizationResponse.SuspectedAmbiguity)
  return target;
}

size_t SetLocalizationResponse_SuspectedAmbiguity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.graph_nav.SetLocalizationResponse.SuspectedAmbiguity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.SE3Pose alternate_robot_tform_waypoint = 1;
  if (this->has_alternate_robot_tform_waypoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *alternate_robot_tform_waypoint_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetLocalizationResponse_SuspectedAmbiguity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.graph_nav.SetLocalizationResponse.SuspectedAmbiguity)
  GOOGLE_DCHECK_NE(&from, this);
  const SetLocalizationResponse_SuspectedAmbiguity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetLocalizationResponse_SuspectedAmbiguity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.graph_nav.SetLocalizationResponse.SuspectedAmbiguity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.graph_nav.SetLocalizationResponse.SuspectedAmbiguity)
    MergeFrom(*source);
  }
}

void SetLocalizationResponse_SuspectedAmbiguity::MergeFrom(const SetLocalizationResponse_SuspectedAmbiguity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.graph_nav.SetLocalizationResponse.SuspectedAmbiguity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_alternate_robot_tform_waypoint()) {
    _internal_mutable_alternate_robot_tform_waypoint()->::bosdyn::api::SE3Pose::MergeFrom(from._internal_alternate_robot_tform_waypoint());
  }
}

void SetLocalizationResponse_SuspectedAmbiguity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.graph_nav.SetLocalizationResponse.SuspectedAmbiguity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetLocalizationResponse_SuspectedAmbiguity::CopyFrom(const SetLocalizationResponse_SuspectedAmbiguity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.graph_nav.SetLocalizationResponse.SuspectedAmbiguity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetLocalizationResponse_SuspectedAmbiguity::IsInitialized() const {
  return true;
}

void SetLocalizationResponse_SuspectedAmbiguity::InternalSwap(SetLocalizationResponse_SuspectedAmbiguity* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(alternate_robot_tform_waypoint_, other->alternate_robot_tform_waypoint_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetLocalizationResponse_SuspectedAmbiguity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetLocalizationResponse::InitAsDefaultInstance() {
  ::bosdyn::api::graph_nav::_SetLocalizationResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
  ::bosdyn::api::graph_nav::_SetLocalizationResponse_default_instance_._instance.get_mutable()->lease_use_result_ = const_cast< ::bosdyn::api::LeaseUseResult*>(
      ::bosdyn::api::LeaseUseResult::internal_default_instance());
  ::bosdyn::api::graph_nav::_SetLocalizationResponse_default_instance_._instance.get_mutable()->localization_ = const_cast< ::bosdyn::api::graph_nav::Localization*>(
      ::bosdyn::api::graph_nav::Localization::internal_default_instance());
  ::bosdyn::api::graph_nav::_SetLocalizationResponse_default_instance_._instance.get_mutable()->suspected_ambiguity_ = const_cast< ::bosdyn::api::graph_nav::SetLocalizationResponse_SuspectedAmbiguity*>(
      ::bosdyn::api::graph_nav::SetLocalizationResponse_SuspectedAmbiguity::internal_default_instance());
}
class SetLocalizationResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const SetLocalizationResponse* msg);
  static const ::bosdyn::api::LeaseUseResult& lease_use_result(const SetLocalizationResponse* msg);
  static const ::bosdyn::api::graph_nav::Localization& localization(const SetLocalizationResponse* msg);
  static const ::bosdyn::api::graph_nav::SetLocalizationResponse_SuspectedAmbiguity& suspected_ambiguity(const SetLocalizationResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
SetLocalizationResponse::_Internal::header(const SetLocalizationResponse* msg) {
  return *msg->header_;
}
const ::bosdyn::api::LeaseUseResult&
SetLocalizationResponse::_Internal::lease_use_result(const SetLocalizationResponse* msg) {
  return *msg->lease_use_result_;
}
const ::bosdyn::api::graph_nav::Localization&
SetLocalizationResponse::_Internal::localization(const SetLocalizationResponse* msg) {
  return *msg->localization_;
}
const ::bosdyn::api::graph_nav::SetLocalizationResponse_SuspectedAmbiguity&
SetLocalizationResponse::_Internal::suspected_ambiguity(const SetLocalizationResponse* msg) {
  return *msg->suspected_ambiguity_;
}
void SetLocalizationResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void SetLocalizationResponse::clear_lease_use_result() {
  if (GetArena() == nullptr && lease_use_result_ != nullptr) {
    delete lease_use_result_;
  }
  lease_use_result_ = nullptr;
}
void SetLocalizationResponse::clear_localization() {
  if (GetArena() == nullptr && localization_ != nullptr) {
    delete localization_;
  }
  localization_ = nullptr;
}
SetLocalizationResponse::SetLocalizationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.graph_nav.SetLocalizationResponse)
}
SetLocalizationResponse::SetLocalizationResponse(const SetLocalizationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_report_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error_report().empty()) {
    error_report_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_error_report(),
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_lease_use_result()) {
    lease_use_result_ = new ::bosdyn::api::LeaseUseResult(*from.lease_use_result_);
  } else {
    lease_use_result_ = nullptr;
  }
  if (from._internal_has_localization()) {
    localization_ = new ::bosdyn::api::graph_nav::Localization(*from.localization_);
  } else {
    localization_ = nullptr;
  }
  if (from._internal_has_suspected_ambiguity()) {
    suspected_ambiguity_ = new ::bosdyn::api::graph_nav::SetLocalizationResponse_SuspectedAmbiguity(*from.suspected_ambiguity_);
  } else {
    suspected_ambiguity_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.graph_nav.SetLocalizationResponse)
}

void SetLocalizationResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetLocalizationResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base);
  error_report_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&header_)) + sizeof(status_));
}

SetLocalizationResponse::~SetLocalizationResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.graph_nav.SetLocalizationResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetLocalizationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  error_report_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete lease_use_result_;
  if (this != internal_default_instance()) delete localization_;
  if (this != internal_default_instance()) delete suspected_ambiguity_;
}

void SetLocalizationResponse::ArenaDtor(void* object) {
  SetLocalizationResponse* _this = reinterpret_cast< SetLocalizationResponse* >(object);
  (void)_this;
}
void SetLocalizationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetLocalizationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetLocalizationResponse& SetLocalizationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetLocalizationResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base);
  return *internal_default_instance();
}


void SetLocalizationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.graph_nav.SetLocalizationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_report_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && lease_use_result_ != nullptr) {
    delete lease_use_result_;
  }
  lease_use_result_ = nullptr;
  if (GetArena() == nullptr && localization_ != nullptr) {
    delete localization_;
  }
  localization_ = nullptr;
  if (GetArena() == nullptr && suspected_ambiguity_ != nullptr) {
    delete suspected_ambiguity_;
  }
  suspected_ambiguity_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetLocalizationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.LeaseUseResult lease_use_result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lease_use_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.graph_nav.SetLocalizationResponse.Status status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::bosdyn::api::graph_nav::SetLocalizationResponse_Status>(val));
        } else goto handle_unusual;
        continue;
      // string error_report = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_error_report();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.graph_nav.SetLocalizationResponse.error_report"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.graph_nav.Localization localization = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_localization(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.graph_nav.SetLocalizationResponse.SuspectedAmbiguity suspected_ambiguity = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_suspected_ambiguity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetLocalizationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.graph_nav.SetLocalizationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.LeaseUseResult lease_use_result = 2;
  if (this->has_lease_use_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::lease_use_result(this), target, stream);
  }

  // .bosdyn.api.graph_nav.SetLocalizationResponse.Status status = 3;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_status(), target);
  }

  // string error_report = 4;
  if (this->error_report().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_report().data(), static_cast<int>(this->_internal_error_report().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.graph_nav.SetLocalizationResponse.error_report");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_error_report(), target);
  }

  // .bosdyn.api.graph_nav.Localization localization = 5;
  if (this->has_localization()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::localization(this), target, stream);
  }

  // .bosdyn.api.graph_nav.SetLocalizationResponse.SuspectedAmbiguity suspected_ambiguity = 7;
  if (this->has_suspected_ambiguity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::suspected_ambiguity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.graph_nav.SetLocalizationResponse)
  return target;
}

size_t SetLocalizationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.graph_nav.SetLocalizationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_report = 4;
  if (this->error_report().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_report());
  }

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.LeaseUseResult lease_use_result = 2;
  if (this->has_lease_use_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lease_use_result_);
  }

  // .bosdyn.api.graph_nav.Localization localization = 5;
  if (this->has_localization()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *localization_);
  }

  // .bosdyn.api.graph_nav.SetLocalizationResponse.SuspectedAmbiguity suspected_ambiguity = 7;
  if (this->has_suspected_ambiguity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *suspected_ambiguity_);
  }

  // .bosdyn.api.graph_nav.SetLocalizationResponse.Status status = 3;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetLocalizationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.graph_nav.SetLocalizationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetLocalizationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetLocalizationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.graph_nav.SetLocalizationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.graph_nav.SetLocalizationResponse)
    MergeFrom(*source);
  }
}

void SetLocalizationResponse::MergeFrom(const SetLocalizationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.graph_nav.SetLocalizationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_report().size() > 0) {
    _internal_set_error_report(from._internal_error_report());
  }
  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.has_lease_use_result()) {
    _internal_mutable_lease_use_result()->::bosdyn::api::LeaseUseResult::MergeFrom(from._internal_lease_use_result());
  }
  if (from.has_localization()) {
    _internal_mutable_localization()->::bosdyn::api::graph_nav::Localization::MergeFrom(from._internal_localization());
  }
  if (from.has_suspected_ambiguity()) {
    _internal_mutable_suspected_ambiguity()->::bosdyn::api::graph_nav::SetLocalizationResponse_SuspectedAmbiguity::MergeFrom(from._internal_suspected_ambiguity());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void SetLocalizationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.graph_nav.SetLocalizationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetLocalizationResponse::CopyFrom(const SetLocalizationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.graph_nav.SetLocalizationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetLocalizationResponse::IsInitialized() const {
  return true;
}

void SetLocalizationResponse::InternalSwap(SetLocalizationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  error_report_.Swap(&other->error_report_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetLocalizationResponse, status_)
      + sizeof(SetLocalizationResponse::status_)
      - PROTOBUF_FIELD_OFFSET(SetLocalizationResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetLocalizationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RouteGenParams::InitAsDefaultInstance() {
}
class RouteGenParams::_Internal {
 public:
};

RouteGenParams::RouteGenParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.graph_nav.RouteGenParams)
}
RouteGenParams::RouteGenParams(const RouteGenParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.graph_nav.RouteGenParams)
}

void RouteGenParams::SharedCtor() {
}

RouteGenParams::~RouteGenParams() {
  // @@protoc_insertion_point(destructor:bosdyn.api.graph_nav.RouteGenParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RouteGenParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RouteGenParams::ArenaDtor(void* object) {
  RouteGenParams* _this = reinterpret_cast< RouteGenParams* >(object);
  (void)_this;
}
void RouteGenParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RouteGenParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RouteGenParams& RouteGenParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RouteGenParams_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base);
  return *internal_default_instance();
}


void RouteGenParams::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.graph_nav.RouteGenParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteGenParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouteGenParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.graph_nav.RouteGenParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.graph_nav.RouteGenParams)
  return target;
}

size_t RouteGenParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.graph_nav.RouteGenParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RouteGenParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.graph_nav.RouteGenParams)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteGenParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RouteGenParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.graph_nav.RouteGenParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.graph_nav.RouteGenParams)
    MergeFrom(*source);
  }
}

void RouteGenParams::MergeFrom(const RouteGenParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.graph_nav.RouteGenParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RouteGenParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.graph_nav.RouteGenParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteGenParams::CopyFrom(const RouteGenParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.graph_nav.RouteGenParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteGenParams::IsInitialized() const {
  return true;
}

void RouteGenParams::InternalSwap(RouteGenParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteGenParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TravelParams::InitAsDefaultInstance() {
  ::bosdyn::api::graph_nav::_TravelParams_default_instance_._instance.get_mutable()->velocity_limit_ = const_cast< ::bosdyn::api::SE2VelocityLimit*>(
      ::bosdyn::api::SE2VelocityLimit::internal_default_instance());
}
class TravelParams::_Internal {
 public:
  static const ::bosdyn::api::SE2VelocityLimit& velocity_limit(const TravelParams* msg);
};

const ::bosdyn::api::SE2VelocityLimit&
TravelParams::_Internal::velocity_limit(const TravelParams* msg) {
  return *msg->velocity_limit_;
}
void TravelParams::clear_velocity_limit() {
  if (GetArena() == nullptr && velocity_limit_ != nullptr) {
    delete velocity_limit_;
  }
  velocity_limit_ = nullptr;
}
TravelParams::TravelParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.graph_nav.TravelParams)
}
TravelParams::TravelParams(const TravelParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_velocity_limit()) {
    velocity_limit_ = new ::bosdyn::api::SE2VelocityLimit(*from.velocity_limit_);
  } else {
    velocity_limit_ = nullptr;
  }
  ::memcpy(&max_distance_, &from.max_distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&ignore_final_yaw_) -
    reinterpret_cast<char*>(&max_distance_)) + sizeof(ignore_final_yaw_));
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.graph_nav.TravelParams)
}

void TravelParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TravelParams_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base);
  ::memset(&velocity_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ignore_final_yaw_) -
      reinterpret_cast<char*>(&velocity_limit_)) + sizeof(ignore_final_yaw_));
}

TravelParams::~TravelParams() {
  // @@protoc_insertion_point(destructor:bosdyn.api.graph_nav.TravelParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TravelParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete velocity_limit_;
}

void TravelParams::ArenaDtor(void* object) {
  TravelParams* _this = reinterpret_cast< TravelParams* >(object);
  (void)_this;
}
void TravelParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TravelParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TravelParams& TravelParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TravelParams_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base);
  return *internal_default_instance();
}


void TravelParams::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.graph_nav.TravelParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && velocity_limit_ != nullptr) {
    delete velocity_limit_;
  }
  velocity_limit_ = nullptr;
  ::memset(&max_distance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ignore_final_yaw_) -
      reinterpret_cast<char*>(&max_distance_)) + sizeof(ignore_final_yaw_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TravelParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double max_distance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          max_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double max_yaw = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          max_yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.SE2VelocityLimit velocity_limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity_limit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ignore_final_yaw = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ignore_final_yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TravelParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.graph_nav.TravelParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double max_distance = 1;
  if (!(this->max_distance() <= 0 && this->max_distance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_max_distance(), target);
  }

  // double max_yaw = 2;
  if (!(this->max_yaw() <= 0 && this->max_yaw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_max_yaw(), target);
  }

  // .bosdyn.api.SE2VelocityLimit velocity_limit = 3;
  if (this->has_velocity_limit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::velocity_limit(this), target, stream);
  }

  // bool ignore_final_yaw = 4;
  if (this->ignore_final_yaw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_ignore_final_yaw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.graph_nav.TravelParams)
  return target;
}

size_t TravelParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.graph_nav.TravelParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.SE2VelocityLimit velocity_limit = 3;
  if (this->has_velocity_limit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *velocity_limit_);
  }

  // double max_distance = 1;
  if (!(this->max_distance() <= 0 && this->max_distance() >= 0)) {
    total_size += 1 + 8;
  }

  // double max_yaw = 2;
  if (!(this->max_yaw() <= 0 && this->max_yaw() >= 0)) {
    total_size += 1 + 8;
  }

  // bool ignore_final_yaw = 4;
  if (this->ignore_final_yaw() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TravelParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.graph_nav.TravelParams)
  GOOGLE_DCHECK_NE(&from, this);
  const TravelParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TravelParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.graph_nav.TravelParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.graph_nav.TravelParams)
    MergeFrom(*source);
  }
}

void TravelParams::MergeFrom(const TravelParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.graph_nav.TravelParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_velocity_limit()) {
    _internal_mutable_velocity_limit()->::bosdyn::api::SE2VelocityLimit::MergeFrom(from._internal_velocity_limit());
  }
  if (!(from.max_distance() <= 0 && from.max_distance() >= 0)) {
    _internal_set_max_distance(from._internal_max_distance());
  }
  if (!(from.max_yaw() <= 0 && from.max_yaw() >= 0)) {
    _internal_set_max_yaw(from._internal_max_yaw());
  }
  if (from.ignore_final_yaw() != 0) {
    _internal_set_ignore_final_yaw(from._internal_ignore_final_yaw());
  }
}

void TravelParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.graph_nav.TravelParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TravelParams::CopyFrom(const TravelParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.graph_nav.TravelParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TravelParams::IsInitialized() const {
  return true;
}

void TravelParams::InternalSwap(TravelParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TravelParams, ignore_final_yaw_)
      + sizeof(TravelParams::ignore_final_yaw_)
      - PROTOBUF_FIELD_OFFSET(TravelParams, velocity_limit_)>(
          reinterpret_cast<char*>(&velocity_limit_),
          reinterpret_cast<char*>(&other->velocity_limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TravelParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NavigateToRequest::InitAsDefaultInstance() {
  ::bosdyn::api::graph_nav::_NavigateToRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
  ::bosdyn::api::graph_nav::_NavigateToRequest_default_instance_._instance.get_mutable()->route_params_ = const_cast< ::bosdyn::api::graph_nav::RouteGenParams*>(
      ::bosdyn::api::graph_nav::RouteGenParams::internal_default_instance());
  ::bosdyn::api::graph_nav::_NavigateToRequest_default_instance_._instance.get_mutable()->travel_params_ = const_cast< ::bosdyn::api::graph_nav::TravelParams*>(
      ::bosdyn::api::graph_nav::TravelParams::internal_default_instance());
  ::bosdyn::api::graph_nav::_NavigateToRequest_default_instance_._instance.get_mutable()->end_time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class NavigateToRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const NavigateToRequest* msg);
  static const ::bosdyn::api::graph_nav::RouteGenParams& route_params(const NavigateToRequest* msg);
  static const ::bosdyn::api::graph_nav::TravelParams& travel_params(const NavigateToRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& end_time(const NavigateToRequest* msg);
};

const ::bosdyn::api::RequestHeader&
NavigateToRequest::_Internal::header(const NavigateToRequest* msg) {
  return *msg->header_;
}
const ::bosdyn::api::graph_nav::RouteGenParams&
NavigateToRequest::_Internal::route_params(const NavigateToRequest* msg) {
  return *msg->route_params_;
}
const ::bosdyn::api::graph_nav::TravelParams&
NavigateToRequest::_Internal::travel_params(const NavigateToRequest* msg) {
  return *msg->travel_params_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
NavigateToRequest::_Internal::end_time(const NavigateToRequest* msg) {
  return *msg->end_time_;
}
void NavigateToRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void NavigateToRequest::clear_leases() {
  leases_.Clear();
}
void NavigateToRequest::clear_end_time() {
  if (GetArena() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
}
NavigateToRequest::NavigateToRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  leases_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.graph_nav.NavigateToRequest)
}
NavigateToRequest::NavigateToRequest(const NavigateToRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      leases_(from.leases_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  destination_waypoint_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_destination_waypoint_id().empty()) {
    destination_waypoint_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_destination_waypoint_id(),
      GetArena());
  }
  clock_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clock_identifier().empty()) {
    clock_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_clock_identifier(),
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_route_params()) {
    route_params_ = new ::bosdyn::api::graph_nav::RouteGenParams(*from.route_params_);
  } else {
    route_params_ = nullptr;
  }
  if (from._internal_has_travel_params()) {
    travel_params_ = new ::bosdyn::api::graph_nav::TravelParams(*from.travel_params_);
  } else {
    travel_params_ = nullptr;
  }
  if (from._internal_has_end_time()) {
    end_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.end_time_);
  } else {
    end_time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.graph_nav.NavigateToRequest)
}

void NavigateToRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NavigateToRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base);
  destination_waypoint_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clock_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&header_)) + sizeof(end_time_));
}

NavigateToRequest::~NavigateToRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.graph_nav.NavigateToRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NavigateToRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  destination_waypoint_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clock_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete route_params_;
  if (this != internal_default_instance()) delete travel_params_;
  if (this != internal_default_instance()) delete end_time_;
}

void NavigateToRequest::ArenaDtor(void* object) {
  NavigateToRequest* _this = reinterpret_cast< NavigateToRequest* >(object);
  (void)_this;
}
void NavigateToRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NavigateToRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NavigateToRequest& NavigateToRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NavigateToRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base);
  return *internal_default_instance();
}


void NavigateToRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.graph_nav.NavigateToRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  leases_.Clear();
  destination_waypoint_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  clock_identifier_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && route_params_ != nullptr) {
    delete route_params_;
  }
  route_params_ = nullptr;
  if (GetArena() == nullptr && travel_params_ != nullptr) {
    delete travel_params_;
  }
  travel_params_ = nullptr;
  if (GetArena() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NavigateToRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bosdyn.api.Lease leases = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_leases(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string destination_waypoint_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_destination_waypoint_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.graph_nav.NavigateToRequest.destination_waypoint_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.graph_nav.RouteGenParams route_params = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_route_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.graph_nav.TravelParams travel_params = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_travel_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp end_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string clock_identifier = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_clock_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.graph_nav.NavigateToRequest.clock_identifier"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NavigateToRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.graph_nav.NavigateToRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .bosdyn.api.Lease leases = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_leases_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_leases(i), target, stream);
  }

  // string destination_waypoint_id = 3;
  if (this->destination_waypoint_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_destination_waypoint_id().data(), static_cast<int>(this->_internal_destination_waypoint_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.graph_nav.NavigateToRequest.destination_waypoint_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_destination_waypoint_id(), target);
  }

  // .bosdyn.api.graph_nav.RouteGenParams route_params = 4;
  if (this->has_route_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::route_params(this), target, stream);
  }

  // .bosdyn.api.graph_nav.TravelParams travel_params = 5;
  if (this->has_travel_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::travel_params(this), target, stream);
  }

  // .google.protobuf.Timestamp end_time = 6;
  if (this->has_end_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::end_time(this), target, stream);
  }

  // string clock_identifier = 7;
  if (this->clock_identifier().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clock_identifier().data(), static_cast<int>(this->_internal_clock_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.graph_nav.NavigateToRequest.clock_identifier");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_clock_identifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.graph_nav.NavigateToRequest)
  return target;
}

size_t NavigateToRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.graph_nav.NavigateToRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bosdyn.api.Lease leases = 2;
  total_size += 1UL * this->_internal_leases_size();
  for (const auto& msg : this->leases_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string destination_waypoint_id = 3;
  if (this->destination_waypoint_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_destination_waypoint_id());
  }

  // string clock_identifier = 7;
  if (this->clock_identifier().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clock_identifier());
  }

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.graph_nav.RouteGenParams route_params = 4;
  if (this->has_route_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *route_params_);
  }

  // .bosdyn.api.graph_nav.TravelParams travel_params = 5;
  if (this->has_travel_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *travel_params_);
  }

  // .google.protobuf.Timestamp end_time = 6;
  if (this->has_end_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_time_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NavigateToRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.graph_nav.NavigateToRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NavigateToRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NavigateToRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.graph_nav.NavigateToRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.graph_nav.NavigateToRequest)
    MergeFrom(*source);
  }
}

void NavigateToRequest::MergeFrom(const NavigateToRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.graph_nav.NavigateToRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  leases_.MergeFrom(from.leases_);
  if (from.destination_waypoint_id().size() > 0) {
    _internal_set_destination_waypoint_id(from._internal_destination_waypoint_id());
  }
  if (from.clock_identifier().size() > 0) {
    _internal_set_clock_identifier(from._internal_clock_identifier());
  }
  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
  if (from.has_route_params()) {
    _internal_mutable_route_params()->::bosdyn::api::graph_nav::RouteGenParams::MergeFrom(from._internal_route_params());
  }
  if (from.has_travel_params()) {
    _internal_mutable_travel_params()->::bosdyn::api::graph_nav::TravelParams::MergeFrom(from._internal_travel_params());
  }
  if (from.has_end_time()) {
    _internal_mutable_end_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_end_time());
  }
}

void NavigateToRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.graph_nav.NavigateToRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavigateToRequest::CopyFrom(const NavigateToRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.graph_nav.NavigateToRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigateToRequest::IsInitialized() const {
  return true;
}

void NavigateToRequest::InternalSwap(NavigateToRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  leases_.InternalSwap(&other->leases_);
  destination_waypoint_id_.Swap(&other->destination_waypoint_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  clock_identifier_.Swap(&other->clock_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NavigateToRequest, end_time_)
      + sizeof(NavigateToRequest::end_time_)
      - PROTOBUF_FIELD_OFFSET(NavigateToRequest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NavigateToRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NavigateToResponse::InitAsDefaultInstance() {
  ::bosdyn::api::graph_nav::_NavigateToResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
}
class NavigateToResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const NavigateToResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
NavigateToResponse::_Internal::header(const NavigateToResponse* msg) {
  return *msg->header_;
}
void NavigateToResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void NavigateToResponse::clear_lease_use_results() {
  lease_use_results_.Clear();
}
NavigateToResponse::NavigateToResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  lease_use_results_(arena),
  error_waypoint_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.graph_nav.NavigateToResponse)
}
NavigateToResponse::NavigateToResponse(const NavigateToResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      lease_use_results_(from.lease_use_results_),
      error_waypoint_ids_(from.error_waypoint_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&command_id_) -
    reinterpret_cast<char*>(&status_)) + sizeof(command_id_));
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.graph_nav.NavigateToResponse)
}

void NavigateToResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NavigateToResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&command_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(command_id_));
}

NavigateToResponse::~NavigateToResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.graph_nav.NavigateToResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NavigateToResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void NavigateToResponse::ArenaDtor(void* object) {
  NavigateToResponse* _this = reinterpret_cast< NavigateToResponse* >(object);
  (void)_this;
}
void NavigateToResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NavigateToResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NavigateToResponse& NavigateToResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NavigateToResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base);
  return *internal_default_instance();
}


void NavigateToResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.graph_nav.NavigateToResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lease_use_results_.Clear();
  error_waypoint_ids_.Clear();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&command_id_) -
      reinterpret_cast<char*>(&status_)) + sizeof(command_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NavigateToResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bosdyn.api.LeaseUseResult lease_use_results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lease_use_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.graph_nav.NavigateToResponse.Status status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::bosdyn::api::graph_nav::NavigateToResponse_Status>(val));
        } else goto handle_unusual;
        continue;
      // uint32 command_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          command_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string error_waypoint_ids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_error_waypoint_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.graph_nav.NavigateToResponse.error_waypoint_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NavigateToResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.graph_nav.NavigateToResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .bosdyn.api.LeaseUseResult lease_use_results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lease_use_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_lease_use_results(i), target, stream);
  }

  // .bosdyn.api.graph_nav.NavigateToResponse.Status status = 3;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_status(), target);
  }

  // uint32 command_id = 4;
  if (this->command_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_command_id(), target);
  }

  // repeated string error_waypoint_ids = 5;
  for (int i = 0, n = this->_internal_error_waypoint_ids_size(); i < n; i++) {
    const auto& s = this->_internal_error_waypoint_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.graph_nav.NavigateToResponse.error_waypoint_ids");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.graph_nav.NavigateToResponse)
  return target;
}

size_t NavigateToResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.graph_nav.NavigateToResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bosdyn.api.LeaseUseResult lease_use_results = 2;
  total_size += 1UL * this->_internal_lease_use_results_size();
  for (const auto& msg : this->lease_use_results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string error_waypoint_ids = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(error_waypoint_ids_.size());
  for (int i = 0, n = error_waypoint_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      error_waypoint_ids_.Get(i));
  }

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.graph_nav.NavigateToResponse.Status status = 3;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // uint32 command_id = 4;
  if (this->command_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_command_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NavigateToResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.graph_nav.NavigateToResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NavigateToResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NavigateToResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.graph_nav.NavigateToResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.graph_nav.NavigateToResponse)
    MergeFrom(*source);
  }
}

void NavigateToResponse::MergeFrom(const NavigateToResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.graph_nav.NavigateToResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lease_use_results_.MergeFrom(from.lease_use_results_);
  error_waypoint_ids_.MergeFrom(from.error_waypoint_ids_);
  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.command_id() != 0) {
    _internal_set_command_id(from._internal_command_id());
  }
}

void NavigateToResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.graph_nav.NavigateToResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavigateToResponse::CopyFrom(const NavigateToResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.graph_nav.NavigateToResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigateToResponse::IsInitialized() const {
  return true;
}

void NavigateToResponse::InternalSwap(NavigateToResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  lease_use_results_.InternalSwap(&other->lease_use_results_);
  error_waypoint_ids_.InternalSwap(&other->error_waypoint_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NavigateToResponse, command_id_)
      + sizeof(NavigateToResponse::command_id_)
      - PROTOBUF_FIELD_OFFSET(NavigateToResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NavigateToResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NavigateRouteRequest::InitAsDefaultInstance() {
  ::bosdyn::api::graph_nav::_NavigateRouteRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
  ::bosdyn::api::graph_nav::_NavigateRouteRequest_default_instance_._instance.get_mutable()->route_ = const_cast< ::bosdyn::api::graph_nav::Route*>(
      ::bosdyn::api::graph_nav::Route::internal_default_instance());
  ::bosdyn::api::graph_nav::_NavigateRouteRequest_default_instance_._instance.get_mutable()->travel_params_ = const_cast< ::bosdyn::api::graph_nav::TravelParams*>(
      ::bosdyn::api::graph_nav::TravelParams::internal_default_instance());
  ::bosdyn::api::graph_nav::_NavigateRouteRequest_default_instance_._instance.get_mutable()->end_time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class NavigateRouteRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const NavigateRouteRequest* msg);
  static const ::bosdyn::api::graph_nav::Route& route(const NavigateRouteRequest* msg);
  static const ::bosdyn::api::graph_nav::TravelParams& travel_params(const NavigateRouteRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& end_time(const NavigateRouteRequest* msg);
};

const ::bosdyn::api::RequestHeader&
NavigateRouteRequest::_Internal::header(const NavigateRouteRequest* msg) {
  return *msg->header_;
}
const ::bosdyn::api::graph_nav::Route&
NavigateRouteRequest::_Internal::route(const NavigateRouteRequest* msg) {
  return *msg->route_;
}
const ::bosdyn::api::graph_nav::TravelParams&
NavigateRouteRequest::_Internal::travel_params(const NavigateRouteRequest* msg) {
  return *msg->travel_params_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
NavigateRouteRequest::_Internal::end_time(const NavigateRouteRequest* msg) {
  return *msg->end_time_;
}
void NavigateRouteRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void NavigateRouteRequest::clear_leases() {
  leases_.Clear();
}
void NavigateRouteRequest::clear_route() {
  if (GetArena() == nullptr && route_ != nullptr) {
    delete route_;
  }
  route_ = nullptr;
}
void NavigateRouteRequest::clear_end_time() {
  if (GetArena() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
}
NavigateRouteRequest::NavigateRouteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  leases_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.graph_nav.NavigateRouteRequest)
}
NavigateRouteRequest::NavigateRouteRequest(const NavigateRouteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      leases_(from.leases_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clock_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clock_identifier().empty()) {
    clock_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_clock_identifier(),
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_route()) {
    route_ = new ::bosdyn::api::graph_nav::Route(*from.route_);
  } else {
    route_ = nullptr;
  }
  if (from._internal_has_travel_params()) {
    travel_params_ = new ::bosdyn::api::graph_nav::TravelParams(*from.travel_params_);
  } else {
    travel_params_ = nullptr;
  }
  if (from._internal_has_end_time()) {
    end_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.end_time_);
  } else {
    end_time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.graph_nav.NavigateRouteRequest)
}

void NavigateRouteRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NavigateRouteRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base);
  clock_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&header_)) + sizeof(end_time_));
}

NavigateRouteRequest::~NavigateRouteRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.graph_nav.NavigateRouteRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NavigateRouteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  clock_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete route_;
  if (this != internal_default_instance()) delete travel_params_;
  if (this != internal_default_instance()) delete end_time_;
}

void NavigateRouteRequest::ArenaDtor(void* object) {
  NavigateRouteRequest* _this = reinterpret_cast< NavigateRouteRequest* >(object);
  (void)_this;
}
void NavigateRouteRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NavigateRouteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NavigateRouteRequest& NavigateRouteRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NavigateRouteRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base);
  return *internal_default_instance();
}


void NavigateRouteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.graph_nav.NavigateRouteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  leases_.Clear();
  clock_identifier_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && route_ != nullptr) {
    delete route_;
  }
  route_ = nullptr;
  if (GetArena() == nullptr && travel_params_ != nullptr) {
    delete travel_params_;
  }
  travel_params_ = nullptr;
  if (GetArena() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NavigateRouteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bosdyn.api.Lease leases = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_leases(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.graph_nav.Route route = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_route(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.graph_nav.TravelParams travel_params = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_travel_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp end_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string clock_identifier = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_clock_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.graph_nav.NavigateRouteRequest.clock_identifier"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NavigateRouteRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.graph_nav.NavigateRouteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .bosdyn.api.Lease leases = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_leases_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_leases(i), target, stream);
  }

  // .bosdyn.api.graph_nav.Route route = 3;
  if (this->has_route()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::route(this), target, stream);
  }

  // .bosdyn.api.graph_nav.TravelParams travel_params = 4;
  if (this->has_travel_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::travel_params(this), target, stream);
  }

  // .google.protobuf.Timestamp end_time = 5;
  if (this->has_end_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::end_time(this), target, stream);
  }

  // string clock_identifier = 6;
  if (this->clock_identifier().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clock_identifier().data(), static_cast<int>(this->_internal_clock_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.graph_nav.NavigateRouteRequest.clock_identifier");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_clock_identifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.graph_nav.NavigateRouteRequest)
  return target;
}

size_t NavigateRouteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.graph_nav.NavigateRouteRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bosdyn.api.Lease leases = 2;
  total_size += 1UL * this->_internal_leases_size();
  for (const auto& msg : this->leases_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string clock_identifier = 6;
  if (this->clock_identifier().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clock_identifier());
  }

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.graph_nav.Route route = 3;
  if (this->has_route()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *route_);
  }

  // .bosdyn.api.graph_nav.TravelParams travel_params = 4;
  if (this->has_travel_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *travel_params_);
  }

  // .google.protobuf.Timestamp end_time = 5;
  if (this->has_end_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_time_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NavigateRouteRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.graph_nav.NavigateRouteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NavigateRouteRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NavigateRouteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.graph_nav.NavigateRouteRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.graph_nav.NavigateRouteRequest)
    MergeFrom(*source);
  }
}

void NavigateRouteRequest::MergeFrom(const NavigateRouteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.graph_nav.NavigateRouteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  leases_.MergeFrom(from.leases_);
  if (from.clock_identifier().size() > 0) {
    _internal_set_clock_identifier(from._internal_clock_identifier());
  }
  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
  if (from.has_route()) {
    _internal_mutable_route()->::bosdyn::api::graph_nav::Route::MergeFrom(from._internal_route());
  }
  if (from.has_travel_params()) {
    _internal_mutable_travel_params()->::bosdyn::api::graph_nav::TravelParams::MergeFrom(from._internal_travel_params());
  }
  if (from.has_end_time()) {
    _internal_mutable_end_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_end_time());
  }
}

void NavigateRouteRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.graph_nav.NavigateRouteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavigateRouteRequest::CopyFrom(const NavigateRouteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.graph_nav.NavigateRouteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigateRouteRequest::IsInitialized() const {
  return true;
}

void NavigateRouteRequest::InternalSwap(NavigateRouteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  leases_.InternalSwap(&other->leases_);
  clock_identifier_.Swap(&other->clock_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NavigateRouteRequest, end_time_)
      + sizeof(NavigateRouteRequest::end_time_)
      - PROTOBUF_FIELD_OFFSET(NavigateRouteRequest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NavigateRouteRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NavigateRouteResponse::InitAsDefaultInstance() {
  ::bosdyn::api::graph_nav::_NavigateRouteResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
}
class NavigateRouteResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const NavigateRouteResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
NavigateRouteResponse::_Internal::header(const NavigateRouteResponse* msg) {
  return *msg->header_;
}
void NavigateRouteResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void NavigateRouteResponse::clear_lease_use_results() {
  lease_use_results_.Clear();
}
void NavigateRouteResponse::clear_error_edge_ids() {
  error_edge_ids_.Clear();
}
NavigateRouteResponse::NavigateRouteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  lease_use_results_(arena),
  error_waypoint_ids_(arena),
  error_edge_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.graph_nav.NavigateRouteResponse)
}
NavigateRouteResponse::NavigateRouteResponse(const NavigateRouteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      lease_use_results_(from.lease_use_results_),
      error_waypoint_ids_(from.error_waypoint_ids_),
      error_edge_ids_(from.error_edge_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&command_id_) -
    reinterpret_cast<char*>(&status_)) + sizeof(command_id_));
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.graph_nav.NavigateRouteResponse)
}

void NavigateRouteResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NavigateRouteResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&command_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(command_id_));
}

NavigateRouteResponse::~NavigateRouteResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.graph_nav.NavigateRouteResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NavigateRouteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void NavigateRouteResponse::ArenaDtor(void* object) {
  NavigateRouteResponse* _this = reinterpret_cast< NavigateRouteResponse* >(object);
  (void)_this;
}
void NavigateRouteResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NavigateRouteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NavigateRouteResponse& NavigateRouteResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NavigateRouteResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base);
  return *internal_default_instance();
}


void NavigateRouteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.graph_nav.NavigateRouteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lease_use_results_.Clear();
  error_waypoint_ids_.Clear();
  error_edge_ids_.Clear();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&command_id_) -
      reinterpret_cast<char*>(&status_)) + sizeof(command_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NavigateRouteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bosdyn.api.LeaseUseResult lease_use_results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lease_use_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.graph_nav.NavigateRouteResponse.Status status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::bosdyn::api::graph_nav::NavigateRouteResponse_Status>(val));
        } else goto handle_unusual;
        continue;
      // uint32 command_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          command_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string error_waypoint_ids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_error_waypoint_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.graph_nav.NavigateRouteResponse.error_waypoint_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .bosdyn.api.graph_nav.Edge.Id error_edge_ids = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_error_edge_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NavigateRouteResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.graph_nav.NavigateRouteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .bosdyn.api.LeaseUseResult lease_use_results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lease_use_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_lease_use_results(i), target, stream);
  }

  // .bosdyn.api.graph_nav.NavigateRouteResponse.Status status = 3;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_status(), target);
  }

  // uint32 command_id = 4;
  if (this->command_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_command_id(), target);
  }

  // repeated string error_waypoint_ids = 5;
  for (int i = 0, n = this->_internal_error_waypoint_ids_size(); i < n; i++) {
    const auto& s = this->_internal_error_waypoint_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.graph_nav.NavigateRouteResponse.error_waypoint_ids");
    target = stream->WriteString(5, s, target);
  }

  // repeated .bosdyn.api.graph_nav.Edge.Id error_edge_ids = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_error_edge_ids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_error_edge_ids(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.graph_nav.NavigateRouteResponse)
  return target;
}

size_t NavigateRouteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.graph_nav.NavigateRouteResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bosdyn.api.LeaseUseResult lease_use_results = 2;
  total_size += 1UL * this->_internal_lease_use_results_size();
  for (const auto& msg : this->lease_use_results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string error_waypoint_ids = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(error_waypoint_ids_.size());
  for (int i = 0, n = error_waypoint_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      error_waypoint_ids_.Get(i));
  }

  // repeated .bosdyn.api.graph_nav.Edge.Id error_edge_ids = 6;
  total_size += 1UL * this->_internal_error_edge_ids_size();
  for (const auto& msg : this->error_edge_ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.graph_nav.NavigateRouteResponse.Status status = 3;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // uint32 command_id = 4;
  if (this->command_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_command_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NavigateRouteResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.graph_nav.NavigateRouteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NavigateRouteResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NavigateRouteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.graph_nav.NavigateRouteResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.graph_nav.NavigateRouteResponse)
    MergeFrom(*source);
  }
}

void NavigateRouteResponse::MergeFrom(const NavigateRouteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.graph_nav.NavigateRouteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lease_use_results_.MergeFrom(from.lease_use_results_);
  error_waypoint_ids_.MergeFrom(from.error_waypoint_ids_);
  error_edge_ids_.MergeFrom(from.error_edge_ids_);
  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.command_id() != 0) {
    _internal_set_command_id(from._internal_command_id());
  }
}

void NavigateRouteResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.graph_nav.NavigateRouteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavigateRouteResponse::CopyFrom(const NavigateRouteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.graph_nav.NavigateRouteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigateRouteResponse::IsInitialized() const {
  return true;
}

void NavigateRouteResponse::InternalSwap(NavigateRouteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  lease_use_results_.InternalSwap(&other->lease_use_results_);
  error_waypoint_ids_.InternalSwap(&other->error_waypoint_ids_);
  error_edge_ids_.InternalSwap(&other->error_edge_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NavigateRouteResponse, command_id_)
      + sizeof(NavigateRouteResponse::command_id_)
      - PROTOBUF_FIELD_OFFSET(NavigateRouteResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NavigateRouteResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NavigationFeedbackRequest::InitAsDefaultInstance() {
  ::bosdyn::api::graph_nav::_NavigationFeedbackRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
}
class NavigationFeedbackRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const NavigationFeedbackRequest* msg);
};

const ::bosdyn::api::RequestHeader&
NavigationFeedbackRequest::_Internal::header(const NavigationFeedbackRequest* msg) {
  return *msg->header_;
}
void NavigationFeedbackRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
NavigationFeedbackRequest::NavigationFeedbackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.graph_nav.NavigationFeedbackRequest)
}
NavigationFeedbackRequest::NavigationFeedbackRequest(const NavigationFeedbackRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  command_id_ = from.command_id_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.graph_nav.NavigationFeedbackRequest)
}

void NavigationFeedbackRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NavigationFeedbackRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&command_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(command_id_));
}

NavigationFeedbackRequest::~NavigationFeedbackRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.graph_nav.NavigationFeedbackRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NavigationFeedbackRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void NavigationFeedbackRequest::ArenaDtor(void* object) {
  NavigationFeedbackRequest* _this = reinterpret_cast< NavigationFeedbackRequest* >(object);
  (void)_this;
}
void NavigationFeedbackRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NavigationFeedbackRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NavigationFeedbackRequest& NavigationFeedbackRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NavigationFeedbackRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base);
  return *internal_default_instance();
}


void NavigationFeedbackRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.graph_nav.NavigationFeedbackRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  command_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NavigationFeedbackRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 command_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          command_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NavigationFeedbackRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.graph_nav.NavigationFeedbackRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // uint32 command_id = 2;
  if (this->command_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_command_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.graph_nav.NavigationFeedbackRequest)
  return target;
}

size_t NavigationFeedbackRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.graph_nav.NavigationFeedbackRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // uint32 command_id = 2;
  if (this->command_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_command_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NavigationFeedbackRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.graph_nav.NavigationFeedbackRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NavigationFeedbackRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NavigationFeedbackRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.graph_nav.NavigationFeedbackRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.graph_nav.NavigationFeedbackRequest)
    MergeFrom(*source);
  }
}

void NavigationFeedbackRequest::MergeFrom(const NavigationFeedbackRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.graph_nav.NavigationFeedbackRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
  if (from.command_id() != 0) {
    _internal_set_command_id(from._internal_command_id());
  }
}

void NavigationFeedbackRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.graph_nav.NavigationFeedbackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavigationFeedbackRequest::CopyFrom(const NavigationFeedbackRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.graph_nav.NavigationFeedbackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigationFeedbackRequest::IsInitialized() const {
  return true;
}

void NavigationFeedbackRequest::InternalSwap(NavigationFeedbackRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NavigationFeedbackRequest, command_id_)
      + sizeof(NavigationFeedbackRequest::command_id_)
      - PROTOBUF_FIELD_OFFSET(NavigationFeedbackRequest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NavigationFeedbackRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NavigationFeedbackResponse::InitAsDefaultInstance() {
  ::bosdyn::api::graph_nav::_NavigationFeedbackResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
  ::bosdyn::api::graph_nav::_NavigationFeedbackResponse_default_instance_._instance.get_mutable()->remaining_route_ = const_cast< ::bosdyn::api::graph_nav::Route*>(
      ::bosdyn::api::graph_nav::Route::internal_default_instance());
  ::bosdyn::api::graph_nav::_NavigationFeedbackResponse_default_instance_._instance.get_mutable()->last_ko_tform_goal_ = const_cast< ::bosdyn::api::SE3Pose*>(
      ::bosdyn::api::SE3Pose::internal_default_instance());
}
class NavigationFeedbackResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const NavigationFeedbackResponse* msg);
  static const ::bosdyn::api::graph_nav::Route& remaining_route(const NavigationFeedbackResponse* msg);
  static const ::bosdyn::api::SE3Pose& last_ko_tform_goal(const NavigationFeedbackResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
NavigationFeedbackResponse::_Internal::header(const NavigationFeedbackResponse* msg) {
  return *msg->header_;
}
const ::bosdyn::api::graph_nav::Route&
NavigationFeedbackResponse::_Internal::remaining_route(const NavigationFeedbackResponse* msg) {
  return *msg->remaining_route_;
}
const ::bosdyn::api::SE3Pose&
NavigationFeedbackResponse::_Internal::last_ko_tform_goal(const NavigationFeedbackResponse* msg) {
  return *msg->last_ko_tform_goal_;
}
void NavigationFeedbackResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void NavigationFeedbackResponse::clear_remaining_route() {
  if (GetArena() == nullptr && remaining_route_ != nullptr) {
    delete remaining_route_;
  }
  remaining_route_ = nullptr;
}
void NavigationFeedbackResponse::clear_last_ko_tform_goal() {
  if (GetArena() == nullptr && last_ko_tform_goal_ != nullptr) {
    delete last_ko_tform_goal_;
  }
  last_ko_tform_goal_ = nullptr;
}
NavigationFeedbackResponse::NavigationFeedbackResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.graph_nav.NavigationFeedbackResponse)
}
NavigationFeedbackResponse::NavigationFeedbackResponse(const NavigationFeedbackResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_remaining_route()) {
    remaining_route_ = new ::bosdyn::api::graph_nav::Route(*from.remaining_route_);
  } else {
    remaining_route_ = nullptr;
  }
  if (from._internal_has_last_ko_tform_goal()) {
    last_ko_tform_goal_ = new ::bosdyn::api::SE3Pose(*from.last_ko_tform_goal_);
  } else {
    last_ko_tform_goal_ = nullptr;
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&command_id_) -
    reinterpret_cast<char*>(&status_)) + sizeof(command_id_));
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.graph_nav.NavigationFeedbackResponse)
}

void NavigationFeedbackResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NavigationFeedbackResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&command_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(command_id_));
}

NavigationFeedbackResponse::~NavigationFeedbackResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.graph_nav.NavigationFeedbackResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NavigationFeedbackResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete remaining_route_;
  if (this != internal_default_instance()) delete last_ko_tform_goal_;
}

void NavigationFeedbackResponse::ArenaDtor(void* object) {
  NavigationFeedbackResponse* _this = reinterpret_cast< NavigationFeedbackResponse* >(object);
  (void)_this;
}
void NavigationFeedbackResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NavigationFeedbackResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NavigationFeedbackResponse& NavigationFeedbackResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NavigationFeedbackResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base);
  return *internal_default_instance();
}


void NavigationFeedbackResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.graph_nav.NavigationFeedbackResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && remaining_route_ != nullptr) {
    delete remaining_route_;
  }
  remaining_route_ = nullptr;
  if (GetArena() == nullptr && last_ko_tform_goal_ != nullptr) {
    delete last_ko_tform_goal_;
  }
  last_ko_tform_goal_ = nullptr;
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&command_id_) -
      reinterpret_cast<char*>(&status_)) + sizeof(command_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NavigationFeedbackResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.graph_nav.NavigationFeedbackResponse.Status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::bosdyn::api::graph_nav::NavigationFeedbackResponse_Status>(val));
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.graph_nav.Route remaining_route = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_remaining_route(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 command_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          command_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.SE3Pose last_ko_tform_goal = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_ko_tform_goal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NavigationFeedbackResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.graph_nav.NavigationFeedbackResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.graph_nav.NavigationFeedbackResponse.Status status = 2;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // .bosdyn.api.graph_nav.Route remaining_route = 3;
  if (this->has_remaining_route()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::remaining_route(this), target, stream);
  }

  // uint32 command_id = 4;
  if (this->command_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_command_id(), target);
  }

  // .bosdyn.api.SE3Pose last_ko_tform_goal = 5;
  if (this->has_last_ko_tform_goal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::last_ko_tform_goal(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.graph_nav.NavigationFeedbackResponse)
  return target;
}

size_t NavigationFeedbackResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.graph_nav.NavigationFeedbackResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.graph_nav.Route remaining_route = 3;
  if (this->has_remaining_route()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *remaining_route_);
  }

  // .bosdyn.api.SE3Pose last_ko_tform_goal = 5;
  if (this->has_last_ko_tform_goal()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_ko_tform_goal_);
  }

  // .bosdyn.api.graph_nav.NavigationFeedbackResponse.Status status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // uint32 command_id = 4;
  if (this->command_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_command_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NavigationFeedbackResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.graph_nav.NavigationFeedbackResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NavigationFeedbackResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NavigationFeedbackResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.graph_nav.NavigationFeedbackResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.graph_nav.NavigationFeedbackResponse)
    MergeFrom(*source);
  }
}

void NavigationFeedbackResponse::MergeFrom(const NavigationFeedbackResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.graph_nav.NavigationFeedbackResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.has_remaining_route()) {
    _internal_mutable_remaining_route()->::bosdyn::api::graph_nav::Route::MergeFrom(from._internal_remaining_route());
  }
  if (from.has_last_ko_tform_goal()) {
    _internal_mutable_last_ko_tform_goal()->::bosdyn::api::SE3Pose::MergeFrom(from._internal_last_ko_tform_goal());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.command_id() != 0) {
    _internal_set_command_id(from._internal_command_id());
  }
}

void NavigationFeedbackResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.graph_nav.NavigationFeedbackResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavigationFeedbackResponse::CopyFrom(const NavigationFeedbackResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.graph_nav.NavigationFeedbackResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigationFeedbackResponse::IsInitialized() const {
  return true;
}

void NavigationFeedbackResponse::InternalSwap(NavigationFeedbackResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NavigationFeedbackResponse, command_id_)
      + sizeof(NavigationFeedbackResponse::command_id_)
      - PROTOBUF_FIELD_OFFSET(NavigationFeedbackResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NavigationFeedbackResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetLocalizationStateRequest::InitAsDefaultInstance() {
  ::bosdyn::api::graph_nav::_GetLocalizationStateRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
}
class GetLocalizationStateRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const GetLocalizationStateRequest* msg);
};

const ::bosdyn::api::RequestHeader&
GetLocalizationStateRequest::_Internal::header(const GetLocalizationStateRequest* msg) {
  return *msg->header_;
}
void GetLocalizationStateRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
GetLocalizationStateRequest::GetLocalizationStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.graph_nav.GetLocalizationStateRequest)
}
GetLocalizationStateRequest::GetLocalizationStateRequest(const GetLocalizationStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&request_live_point_cloud_, &from.request_live_point_cloud_,
    static_cast<size_t>(reinterpret_cast<char*>(&compress_live_point_cloud_) -
    reinterpret_cast<char*>(&request_live_point_cloud_)) + sizeof(compress_live_point_cloud_));
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.graph_nav.GetLocalizationStateRequest)
}

void GetLocalizationStateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetLocalizationStateRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compress_live_point_cloud_) -
      reinterpret_cast<char*>(&header_)) + sizeof(compress_live_point_cloud_));
}

GetLocalizationStateRequest::~GetLocalizationStateRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.graph_nav.GetLocalizationStateRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetLocalizationStateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void GetLocalizationStateRequest::ArenaDtor(void* object) {
  GetLocalizationStateRequest* _this = reinterpret_cast< GetLocalizationStateRequest* >(object);
  (void)_this;
}
void GetLocalizationStateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLocalizationStateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLocalizationStateRequest& GetLocalizationStateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLocalizationStateRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base);
  return *internal_default_instance();
}


void GetLocalizationStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.graph_nav.GetLocalizationStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  ::memset(&request_live_point_cloud_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compress_live_point_cloud_) -
      reinterpret_cast<char*>(&request_live_point_cloud_)) + sizeof(compress_live_point_cloud_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLocalizationStateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool request_live_point_cloud = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          request_live_point_cloud_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool request_live_images = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          request_live_images_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool request_live_terrain_maps = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          request_live_terrain_maps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool request_live_world_objects = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          request_live_world_objects_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool request_live_robot_state = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          request_live_robot_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool compress_live_point_cloud = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          compress_live_point_cloud_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLocalizationStateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.graph_nav.GetLocalizationStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // bool request_live_point_cloud = 2;
  if (this->request_live_point_cloud() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_request_live_point_cloud(), target);
  }

  // bool request_live_images = 3;
  if (this->request_live_images() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_request_live_images(), target);
  }

  // bool request_live_terrain_maps = 4;
  if (this->request_live_terrain_maps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_request_live_terrain_maps(), target);
  }

  // bool request_live_world_objects = 5;
  if (this->request_live_world_objects() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_request_live_world_objects(), target);
  }

  // bool request_live_robot_state = 6;
  if (this->request_live_robot_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_request_live_robot_state(), target);
  }

  // bool compress_live_point_cloud = 7;
  if (this->compress_live_point_cloud() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_compress_live_point_cloud(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.graph_nav.GetLocalizationStateRequest)
  return target;
}

size_t GetLocalizationStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.graph_nav.GetLocalizationStateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // bool request_live_point_cloud = 2;
  if (this->request_live_point_cloud() != 0) {
    total_size += 1 + 1;
  }

  // bool request_live_images = 3;
  if (this->request_live_images() != 0) {
    total_size += 1 + 1;
  }

  // bool request_live_terrain_maps = 4;
  if (this->request_live_terrain_maps() != 0) {
    total_size += 1 + 1;
  }

  // bool request_live_world_objects = 5;
  if (this->request_live_world_objects() != 0) {
    total_size += 1 + 1;
  }

  // bool request_live_robot_state = 6;
  if (this->request_live_robot_state() != 0) {
    total_size += 1 + 1;
  }

  // bool compress_live_point_cloud = 7;
  if (this->compress_live_point_cloud() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLocalizationStateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.graph_nav.GetLocalizationStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLocalizationStateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLocalizationStateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.graph_nav.GetLocalizationStateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.graph_nav.GetLocalizationStateRequest)
    MergeFrom(*source);
  }
}

void GetLocalizationStateRequest::MergeFrom(const GetLocalizationStateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.graph_nav.GetLocalizationStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
  if (from.request_live_point_cloud() != 0) {
    _internal_set_request_live_point_cloud(from._internal_request_live_point_cloud());
  }
  if (from.request_live_images() != 0) {
    _internal_set_request_live_images(from._internal_request_live_images());
  }
  if (from.request_live_terrain_maps() != 0) {
    _internal_set_request_live_terrain_maps(from._internal_request_live_terrain_maps());
  }
  if (from.request_live_world_objects() != 0) {
    _internal_set_request_live_world_objects(from._internal_request_live_world_objects());
  }
  if (from.request_live_robot_state() != 0) {
    _internal_set_request_live_robot_state(from._internal_request_live_robot_state());
  }
  if (from.compress_live_point_cloud() != 0) {
    _internal_set_compress_live_point_cloud(from._internal_compress_live_point_cloud());
  }
}

void GetLocalizationStateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.graph_nav.GetLocalizationStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLocalizationStateRequest::CopyFrom(const GetLocalizationStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.graph_nav.GetLocalizationStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLocalizationStateRequest::IsInitialized() const {
  return true;
}

void GetLocalizationStateRequest::InternalSwap(GetLocalizationStateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetLocalizationStateRequest, compress_live_point_cloud_)
      + sizeof(GetLocalizationStateRequest::compress_live_point_cloud_)
      - PROTOBUF_FIELD_OFFSET(GetLocalizationStateRequest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLocalizationStateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemotePointCloudStatus::InitAsDefaultInstance() {
}
class RemotePointCloudStatus::_Internal {
 public:
};

RemotePointCloudStatus::RemotePointCloudStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.graph_nav.RemotePointCloudStatus)
}
RemotePointCloudStatus::RemotePointCloudStatus(const RemotePointCloudStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_service_name().empty()) {
    service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_service_name(),
      GetArena());
  }
  ::memcpy(&exists_in_directory_, &from.exists_in_directory_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_data_) -
    reinterpret_cast<char*>(&exists_in_directory_)) + sizeof(has_data_));
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.graph_nav.RemotePointCloudStatus)
}

void RemotePointCloudStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RemotePointCloudStatus_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&exists_in_directory_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_data_) -
      reinterpret_cast<char*>(&exists_in_directory_)) + sizeof(has_data_));
}

RemotePointCloudStatus::~RemotePointCloudStatus() {
  // @@protoc_insertion_point(destructor:bosdyn.api.graph_nav.RemotePointCloudStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemotePointCloudStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  service_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RemotePointCloudStatus::ArenaDtor(void* object) {
  RemotePointCloudStatus* _this = reinterpret_cast< RemotePointCloudStatus* >(object);
  (void)_this;
}
void RemotePointCloudStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemotePointCloudStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemotePointCloudStatus& RemotePointCloudStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemotePointCloudStatus_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base);
  return *internal_default_instance();
}


void RemotePointCloudStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.graph_nav.RemotePointCloudStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&exists_in_directory_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_data_) -
      reinterpret_cast<char*>(&exists_in_directory_)) + sizeof(has_data_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemotePointCloudStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string service_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_service_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.graph_nav.RemotePointCloudStatus.service_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool exists_in_directory = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          exists_in_directory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool has_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          has_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemotePointCloudStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.graph_nav.RemotePointCloudStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_name().data(), static_cast<int>(this->_internal_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.graph_nav.RemotePointCloudStatus.service_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service_name(), target);
  }

  // bool exists_in_directory = 2;
  if (this->exists_in_directory() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_exists_in_directory(), target);
  }

  // bool has_data = 3;
  if (this->has_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_has_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.graph_nav.RemotePointCloudStatus)
  return target;
}

size_t RemotePointCloudStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.graph_nav.RemotePointCloudStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_name());
  }

  // bool exists_in_directory = 2;
  if (this->exists_in_directory() != 0) {
    total_size += 1 + 1;
  }

  // bool has_data = 3;
  if (this->has_data() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemotePointCloudStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.graph_nav.RemotePointCloudStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const RemotePointCloudStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemotePointCloudStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.graph_nav.RemotePointCloudStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.graph_nav.RemotePointCloudStatus)
    MergeFrom(*source);
  }
}

void RemotePointCloudStatus::MergeFrom(const RemotePointCloudStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.graph_nav.RemotePointCloudStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.service_name().size() > 0) {
    _internal_set_service_name(from._internal_service_name());
  }
  if (from.exists_in_directory() != 0) {
    _internal_set_exists_in_directory(from._internal_exists_in_directory());
  }
  if (from.has_data() != 0) {
    _internal_set_has_data(from._internal_has_data());
  }
}

void RemotePointCloudStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.graph_nav.RemotePointCloudStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemotePointCloudStatus::CopyFrom(const RemotePointCloudStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.graph_nav.RemotePointCloudStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemotePointCloudStatus::IsInitialized() const {
  return true;
}

void RemotePointCloudStatus::InternalSwap(RemotePointCloudStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  service_name_.Swap(&other->service_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemotePointCloudStatus, has_data_)
      + sizeof(RemotePointCloudStatus::has_data_)
      - PROTOBUF_FIELD_OFFSET(RemotePointCloudStatus, exists_in_directory_)>(
          reinterpret_cast<char*>(&exists_in_directory_),
          reinterpret_cast<char*>(&other->exists_in_directory_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RemotePointCloudStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LostDetectorState::InitAsDefaultInstance() {
}
class LostDetectorState::_Internal {
 public:
};

LostDetectorState::LostDetectorState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.graph_nav.LostDetectorState)
}
LostDetectorState::LostDetectorState(const LostDetectorState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_lost_ = from.is_lost_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.graph_nav.LostDetectorState)
}

void LostDetectorState::SharedCtor() {
  is_lost_ = false;
}

LostDetectorState::~LostDetectorState() {
  // @@protoc_insertion_point(destructor:bosdyn.api.graph_nav.LostDetectorState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LostDetectorState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LostDetectorState::ArenaDtor(void* object) {
  LostDetectorState* _this = reinterpret_cast< LostDetectorState* >(object);
  (void)_this;
}
void LostDetectorState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LostDetectorState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LostDetectorState& LostDetectorState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LostDetectorState_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base);
  return *internal_default_instance();
}


void LostDetectorState::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.graph_nav.LostDetectorState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_lost_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LostDetectorState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_lost = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_lost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LostDetectorState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.graph_nav.LostDetectorState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_lost = 1;
  if (this->is_lost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_lost(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.graph_nav.LostDetectorState)
  return target;
}

size_t LostDetectorState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.graph_nav.LostDetectorState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_lost = 1;
  if (this->is_lost() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LostDetectorState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.graph_nav.LostDetectorState)
  GOOGLE_DCHECK_NE(&from, this);
  const LostDetectorState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LostDetectorState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.graph_nav.LostDetectorState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.graph_nav.LostDetectorState)
    MergeFrom(*source);
  }
}

void LostDetectorState::MergeFrom(const LostDetectorState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.graph_nav.LostDetectorState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_lost() != 0) {
    _internal_set_is_lost(from._internal_is_lost());
  }
}

void LostDetectorState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.graph_nav.LostDetectorState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LostDetectorState::CopyFrom(const LostDetectorState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.graph_nav.LostDetectorState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LostDetectorState::IsInitialized() const {
  return true;
}

void LostDetectorState::InternalSwap(LostDetectorState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(is_lost_, other->is_lost_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LostDetectorState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetLocalizationStateResponse::InitAsDefaultInstance() {
  ::bosdyn::api::graph_nav::_GetLocalizationStateResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
  ::bosdyn::api::graph_nav::_GetLocalizationStateResponse_default_instance_._instance.get_mutable()->localization_ = const_cast< ::bosdyn::api::graph_nav::Localization*>(
      ::bosdyn::api::graph_nav::Localization::internal_default_instance());
  ::bosdyn::api::graph_nav::_GetLocalizationStateResponse_default_instance_._instance.get_mutable()->robot_kinematics_ = const_cast< ::bosdyn::api::KinematicState*>(
      ::bosdyn::api::KinematicState::internal_default_instance());
  ::bosdyn::api::graph_nav::_GetLocalizationStateResponse_default_instance_._instance.get_mutable()->live_data_ = const_cast< ::bosdyn::api::graph_nav::WaypointSnapshot*>(
      ::bosdyn::api::graph_nav::WaypointSnapshot::internal_default_instance());
  ::bosdyn::api::graph_nav::_GetLocalizationStateResponse_default_instance_._instance.get_mutable()->lost_detector_state_ = const_cast< ::bosdyn::api::graph_nav::LostDetectorState*>(
      ::bosdyn::api::graph_nav::LostDetectorState::internal_default_instance());
}
class GetLocalizationStateResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const GetLocalizationStateResponse* msg);
  static const ::bosdyn::api::graph_nav::Localization& localization(const GetLocalizationStateResponse* msg);
  static const ::bosdyn::api::KinematicState& robot_kinematics(const GetLocalizationStateResponse* msg);
  static const ::bosdyn::api::graph_nav::WaypointSnapshot& live_data(const GetLocalizationStateResponse* msg);
  static const ::bosdyn::api::graph_nav::LostDetectorState& lost_detector_state(const GetLocalizationStateResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
GetLocalizationStateResponse::_Internal::header(const GetLocalizationStateResponse* msg) {
  return *msg->header_;
}
const ::bosdyn::api::graph_nav::Localization&
GetLocalizationStateResponse::_Internal::localization(const GetLocalizationStateResponse* msg) {
  return *msg->localization_;
}
const ::bosdyn::api::KinematicState&
GetLocalizationStateResponse::_Internal::robot_kinematics(const GetLocalizationStateResponse* msg) {
  return *msg->robot_kinematics_;
}
const ::bosdyn::api::graph_nav::WaypointSnapshot&
GetLocalizationStateResponse::_Internal::live_data(const GetLocalizationStateResponse* msg) {
  return *msg->live_data_;
}
const ::bosdyn::api::graph_nav::LostDetectorState&
GetLocalizationStateResponse::_Internal::lost_detector_state(const GetLocalizationStateResponse* msg) {
  return *msg->lost_detector_state_;
}
void GetLocalizationStateResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void GetLocalizationStateResponse::clear_localization() {
  if (GetArena() == nullptr && localization_ != nullptr) {
    delete localization_;
  }
  localization_ = nullptr;
}
void GetLocalizationStateResponse::clear_robot_kinematics() {
  if (GetArena() == nullptr && robot_kinematics_ != nullptr) {
    delete robot_kinematics_;
  }
  robot_kinematics_ = nullptr;
}
void GetLocalizationStateResponse::clear_live_data() {
  if (GetArena() == nullptr && live_data_ != nullptr) {
    delete live_data_;
  }
  live_data_ = nullptr;
}
GetLocalizationStateResponse::GetLocalizationStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  remote_cloud_status_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.graph_nav.GetLocalizationStateResponse)
}
GetLocalizationStateResponse::GetLocalizationStateResponse(const GetLocalizationStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      remote_cloud_status_(from.remote_cloud_status_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_localization()) {
    localization_ = new ::bosdyn::api::graph_nav::Localization(*from.localization_);
  } else {
    localization_ = nullptr;
  }
  if (from._internal_has_robot_kinematics()) {
    robot_kinematics_ = new ::bosdyn::api::KinematicState(*from.robot_kinematics_);
  } else {
    robot_kinematics_ = nullptr;
  }
  if (from._internal_has_live_data()) {
    live_data_ = new ::bosdyn::api::graph_nav::WaypointSnapshot(*from.live_data_);
  } else {
    live_data_ = nullptr;
  }
  if (from._internal_has_lost_detector_state()) {
    lost_detector_state_ = new ::bosdyn::api::graph_nav::LostDetectorState(*from.lost_detector_state_);
  } else {
    lost_detector_state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.graph_nav.GetLocalizationStateResponse)
}

void GetLocalizationStateResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetLocalizationStateResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lost_detector_state_) -
      reinterpret_cast<char*>(&header_)) + sizeof(lost_detector_state_));
}

GetLocalizationStateResponse::~GetLocalizationStateResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.graph_nav.GetLocalizationStateResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetLocalizationStateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete localization_;
  if (this != internal_default_instance()) delete robot_kinematics_;
  if (this != internal_default_instance()) delete live_data_;
  if (this != internal_default_instance()) delete lost_detector_state_;
}

void GetLocalizationStateResponse::ArenaDtor(void* object) {
  GetLocalizationStateResponse* _this = reinterpret_cast< GetLocalizationStateResponse* >(object);
  (void)_this;
}
void GetLocalizationStateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLocalizationStateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLocalizationStateResponse& GetLocalizationStateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLocalizationStateResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base);
  return *internal_default_instance();
}


void GetLocalizationStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.graph_nav.GetLocalizationStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remote_cloud_status_.Clear();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && localization_ != nullptr) {
    delete localization_;
  }
  localization_ = nullptr;
  if (GetArena() == nullptr && robot_kinematics_ != nullptr) {
    delete robot_kinematics_;
  }
  robot_kinematics_ = nullptr;
  if (GetArena() == nullptr && live_data_ != nullptr) {
    delete live_data_;
  }
  live_data_ = nullptr;
  if (GetArena() == nullptr && lost_detector_state_ != nullptr) {
    delete lost_detector_state_;
  }
  lost_detector_state_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLocalizationStateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.graph_nav.Localization localization = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_localization(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.KinematicState robot_kinematics = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_robot_kinematics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bosdyn.api.graph_nav.RemotePointCloudStatus remote_cloud_status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_remote_cloud_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.graph_nav.WaypointSnapshot live_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_live_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.graph_nav.LostDetectorState lost_detector_state = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_lost_detector_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLocalizationStateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.graph_nav.GetLocalizationStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.graph_nav.Localization localization = 2;
  if (this->has_localization()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::localization(this), target, stream);
  }

  // .bosdyn.api.KinematicState robot_kinematics = 4;
  if (this->has_robot_kinematics()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::robot_kinematics(this), target, stream);
  }

  // repeated .bosdyn.api.graph_nav.RemotePointCloudStatus remote_cloud_status = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_remote_cloud_status_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_remote_cloud_status(i), target, stream);
  }

  // .bosdyn.api.graph_nav.WaypointSnapshot live_data = 6;
  if (this->has_live_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::live_data(this), target, stream);
  }

  // .bosdyn.api.graph_nav.LostDetectorState lost_detector_state = 7;
  if (this->has_lost_detector_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::lost_detector_state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.graph_nav.GetLocalizationStateResponse)
  return target;
}

size_t GetLocalizationStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.graph_nav.GetLocalizationStateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bosdyn.api.graph_nav.RemotePointCloudStatus remote_cloud_status = 5;
  total_size += 1UL * this->_internal_remote_cloud_status_size();
  for (const auto& msg : this->remote_cloud_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.graph_nav.Localization localization = 2;
  if (this->has_localization()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *localization_);
  }

  // .bosdyn.api.KinematicState robot_kinematics = 4;
  if (this->has_robot_kinematics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *robot_kinematics_);
  }

  // .bosdyn.api.graph_nav.WaypointSnapshot live_data = 6;
  if (this->has_live_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *live_data_);
  }

  // .bosdyn.api.graph_nav.LostDetectorState lost_detector_state = 7;
  if (this->has_lost_detector_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lost_detector_state_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLocalizationStateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.graph_nav.GetLocalizationStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLocalizationStateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLocalizationStateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.graph_nav.GetLocalizationStateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.graph_nav.GetLocalizationStateResponse)
    MergeFrom(*source);
  }
}

void GetLocalizationStateResponse::MergeFrom(const GetLocalizationStateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.graph_nav.GetLocalizationStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  remote_cloud_status_.MergeFrom(from.remote_cloud_status_);
  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.has_localization()) {
    _internal_mutable_localization()->::bosdyn::api::graph_nav::Localization::MergeFrom(from._internal_localization());
  }
  if (from.has_robot_kinematics()) {
    _internal_mutable_robot_kinematics()->::bosdyn::api::KinematicState::MergeFrom(from._internal_robot_kinematics());
  }
  if (from.has_live_data()) {
    _internal_mutable_live_data()->::bosdyn::api::graph_nav::WaypointSnapshot::MergeFrom(from._internal_live_data());
  }
  if (from.has_lost_detector_state()) {
    _internal_mutable_lost_detector_state()->::bosdyn::api::graph_nav::LostDetectorState::MergeFrom(from._internal_lost_detector_state());
  }
}

void GetLocalizationStateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.graph_nav.GetLocalizationStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLocalizationStateResponse::CopyFrom(const GetLocalizationStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.graph_nav.GetLocalizationStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLocalizationStateResponse::IsInitialized() const {
  return true;
}

void GetLocalizationStateResponse::InternalSwap(GetLocalizationStateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  remote_cloud_status_.InternalSwap(&other->remote_cloud_status_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetLocalizationStateResponse, lost_detector_state_)
      + sizeof(GetLocalizationStateResponse::lost_detector_state_)
      - PROTOBUF_FIELD_OFFSET(GetLocalizationStateResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLocalizationStateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClearGraphRequest::InitAsDefaultInstance() {
  ::bosdyn::api::graph_nav::_ClearGraphRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
  ::bosdyn::api::graph_nav::_ClearGraphRequest_default_instance_._instance.get_mutable()->lease_ = const_cast< ::bosdyn::api::Lease*>(
      ::bosdyn::api::Lease::internal_default_instance());
}
class ClearGraphRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const ClearGraphRequest* msg);
  static const ::bosdyn::api::Lease& lease(const ClearGraphRequest* msg);
};

const ::bosdyn::api::RequestHeader&
ClearGraphRequest::_Internal::header(const ClearGraphRequest* msg) {
  return *msg->header_;
}
const ::bosdyn::api::Lease&
ClearGraphRequest::_Internal::lease(const ClearGraphRequest* msg) {
  return *msg->lease_;
}
void ClearGraphRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void ClearGraphRequest::clear_lease() {
  if (GetArena() == nullptr && lease_ != nullptr) {
    delete lease_;
  }
  lease_ = nullptr;
}
ClearGraphRequest::ClearGraphRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.graph_nav.ClearGraphRequest)
}
ClearGraphRequest::ClearGraphRequest(const ClearGraphRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_lease()) {
    lease_ = new ::bosdyn::api::Lease(*from.lease_);
  } else {
    lease_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.graph_nav.ClearGraphRequest)
}

void ClearGraphRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClearGraphRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lease_) -
      reinterpret_cast<char*>(&header_)) + sizeof(lease_));
}

ClearGraphRequest::~ClearGraphRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.graph_nav.ClearGraphRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClearGraphRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete lease_;
}

void ClearGraphRequest::ArenaDtor(void* object) {
  ClearGraphRequest* _this = reinterpret_cast< ClearGraphRequest* >(object);
  (void)_this;
}
void ClearGraphRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClearGraphRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClearGraphRequest& ClearGraphRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClearGraphRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base);
  return *internal_default_instance();
}


void ClearGraphRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.graph_nav.ClearGraphRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && lease_ != nullptr) {
    delete lease_;
  }
  lease_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClearGraphRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.Lease lease = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lease(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClearGraphRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.graph_nav.ClearGraphRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.Lease lease = 2;
  if (this->has_lease()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::lease(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.graph_nav.ClearGraphRequest)
  return target;
}

size_t ClearGraphRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.graph_nav.ClearGraphRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.Lease lease = 2;
  if (this->has_lease()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lease_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClearGraphRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.graph_nav.ClearGraphRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ClearGraphRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClearGraphRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.graph_nav.ClearGraphRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.graph_nav.ClearGraphRequest)
    MergeFrom(*source);
  }
}

void ClearGraphRequest::MergeFrom(const ClearGraphRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.graph_nav.ClearGraphRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
  if (from.has_lease()) {
    _internal_mutable_lease()->::bosdyn::api::Lease::MergeFrom(from._internal_lease());
  }
}

void ClearGraphRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.graph_nav.ClearGraphRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClearGraphRequest::CopyFrom(const ClearGraphRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.graph_nav.ClearGraphRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearGraphRequest::IsInitialized() const {
  return true;
}

void ClearGraphRequest::InternalSwap(ClearGraphRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClearGraphRequest, lease_)
      + sizeof(ClearGraphRequest::lease_)
      - PROTOBUF_FIELD_OFFSET(ClearGraphRequest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClearGraphRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClearGraphResponse::InitAsDefaultInstance() {
  ::bosdyn::api::graph_nav::_ClearGraphResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
  ::bosdyn::api::graph_nav::_ClearGraphResponse_default_instance_._instance.get_mutable()->lease_use_result_ = const_cast< ::bosdyn::api::LeaseUseResult*>(
      ::bosdyn::api::LeaseUseResult::internal_default_instance());
}
class ClearGraphResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const ClearGraphResponse* msg);
  static const ::bosdyn::api::LeaseUseResult& lease_use_result(const ClearGraphResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
ClearGraphResponse::_Internal::header(const ClearGraphResponse* msg) {
  return *msg->header_;
}
const ::bosdyn::api::LeaseUseResult&
ClearGraphResponse::_Internal::lease_use_result(const ClearGraphResponse* msg) {
  return *msg->lease_use_result_;
}
void ClearGraphResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void ClearGraphResponse::clear_lease_use_result() {
  if (GetArena() == nullptr && lease_use_result_ != nullptr) {
    delete lease_use_result_;
  }
  lease_use_result_ = nullptr;
}
ClearGraphResponse::ClearGraphResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.graph_nav.ClearGraphResponse)
}
ClearGraphResponse::ClearGraphResponse(const ClearGraphResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_lease_use_result()) {
    lease_use_result_ = new ::bosdyn::api::LeaseUseResult(*from.lease_use_result_);
  } else {
    lease_use_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.graph_nav.ClearGraphResponse)
}

void ClearGraphResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClearGraphResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lease_use_result_) -
      reinterpret_cast<char*>(&header_)) + sizeof(lease_use_result_));
}

ClearGraphResponse::~ClearGraphResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.graph_nav.ClearGraphResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClearGraphResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete lease_use_result_;
}

void ClearGraphResponse::ArenaDtor(void* object) {
  ClearGraphResponse* _this = reinterpret_cast< ClearGraphResponse* >(object);
  (void)_this;
}
void ClearGraphResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClearGraphResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClearGraphResponse& ClearGraphResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClearGraphResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base);
  return *internal_default_instance();
}


void ClearGraphResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.graph_nav.ClearGraphResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && lease_use_result_ != nullptr) {
    delete lease_use_result_;
  }
  lease_use_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClearGraphResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.LeaseUseResult lease_use_result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lease_use_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClearGraphResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.graph_nav.ClearGraphResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.LeaseUseResult lease_use_result = 2;
  if (this->has_lease_use_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::lease_use_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.graph_nav.ClearGraphResponse)
  return target;
}

size_t ClearGraphResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.graph_nav.ClearGraphResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.LeaseUseResult lease_use_result = 2;
  if (this->has_lease_use_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lease_use_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClearGraphResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.graph_nav.ClearGraphResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ClearGraphResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClearGraphResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.graph_nav.ClearGraphResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.graph_nav.ClearGraphResponse)
    MergeFrom(*source);
  }
}

void ClearGraphResponse::MergeFrom(const ClearGraphResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.graph_nav.ClearGraphResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.has_lease_use_result()) {
    _internal_mutable_lease_use_result()->::bosdyn::api::LeaseUseResult::MergeFrom(from._internal_lease_use_result());
  }
}

void ClearGraphResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.graph_nav.ClearGraphResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClearGraphResponse::CopyFrom(const ClearGraphResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.graph_nav.ClearGraphResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearGraphResponse::IsInitialized() const {
  return true;
}

void ClearGraphResponse::InternalSwap(ClearGraphResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClearGraphResponse, lease_use_result_)
      + sizeof(ClearGraphResponse::lease_use_result_)
      - PROTOBUF_FIELD_OFFSET(ClearGraphResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClearGraphResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UploadGraphRequest::InitAsDefaultInstance() {
  ::bosdyn::api::graph_nav::_UploadGraphRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
  ::bosdyn::api::graph_nav::_UploadGraphRequest_default_instance_._instance.get_mutable()->graph_ = const_cast< ::bosdyn::api::graph_nav::Graph*>(
      ::bosdyn::api::graph_nav::Graph::internal_default_instance());
  ::bosdyn::api::graph_nav::_UploadGraphRequest_default_instance_._instance.get_mutable()->lease_ = const_cast< ::bosdyn::api::Lease*>(
      ::bosdyn::api::Lease::internal_default_instance());
}
class UploadGraphRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const UploadGraphRequest* msg);
  static const ::bosdyn::api::graph_nav::Graph& graph(const UploadGraphRequest* msg);
  static const ::bosdyn::api::Lease& lease(const UploadGraphRequest* msg);
};

const ::bosdyn::api::RequestHeader&
UploadGraphRequest::_Internal::header(const UploadGraphRequest* msg) {
  return *msg->header_;
}
const ::bosdyn::api::graph_nav::Graph&
UploadGraphRequest::_Internal::graph(const UploadGraphRequest* msg) {
  return *msg->graph_;
}
const ::bosdyn::api::Lease&
UploadGraphRequest::_Internal::lease(const UploadGraphRequest* msg) {
  return *msg->lease_;
}
void UploadGraphRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void UploadGraphRequest::clear_graph() {
  if (GetArena() == nullptr && graph_ != nullptr) {
    delete graph_;
  }
  graph_ = nullptr;
}
void UploadGraphRequest::clear_lease() {
  if (GetArena() == nullptr && lease_ != nullptr) {
    delete lease_;
  }
  lease_ = nullptr;
}
UploadGraphRequest::UploadGraphRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.graph_nav.UploadGraphRequest)
}
UploadGraphRequest::UploadGraphRequest(const UploadGraphRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_graph()) {
    graph_ = new ::bosdyn::api::graph_nav::Graph(*from.graph_);
  } else {
    graph_ = nullptr;
  }
  if (from._internal_has_lease()) {
    lease_ = new ::bosdyn::api::Lease(*from.lease_);
  } else {
    lease_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.graph_nav.UploadGraphRequest)
}

void UploadGraphRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UploadGraphRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lease_) -
      reinterpret_cast<char*>(&header_)) + sizeof(lease_));
}

UploadGraphRequest::~UploadGraphRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.graph_nav.UploadGraphRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UploadGraphRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete graph_;
  if (this != internal_default_instance()) delete lease_;
}

void UploadGraphRequest::ArenaDtor(void* object) {
  UploadGraphRequest* _this = reinterpret_cast< UploadGraphRequest* >(object);
  (void)_this;
}
void UploadGraphRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UploadGraphRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UploadGraphRequest& UploadGraphRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UploadGraphRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base);
  return *internal_default_instance();
}


void UploadGraphRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.graph_nav.UploadGraphRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && graph_ != nullptr) {
    delete graph_;
  }
  graph_ = nullptr;
  if (GetArena() == nullptr && lease_ != nullptr) {
    delete lease_;
  }
  lease_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UploadGraphRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.graph_nav.Graph graph = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_graph(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.Lease lease = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_lease(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UploadGraphRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.graph_nav.UploadGraphRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.graph_nav.Graph graph = 2;
  if (this->has_graph()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::graph(this), target, stream);
  }

  // .bosdyn.api.Lease lease = 3;
  if (this->has_lease()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::lease(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.graph_nav.UploadGraphRequest)
  return target;
}

size_t UploadGraphRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.graph_nav.UploadGraphRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.graph_nav.Graph graph = 2;
  if (this->has_graph()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *graph_);
  }

  // .bosdyn.api.Lease lease = 3;
  if (this->has_lease()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lease_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UploadGraphRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.graph_nav.UploadGraphRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UploadGraphRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UploadGraphRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.graph_nav.UploadGraphRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.graph_nav.UploadGraphRequest)
    MergeFrom(*source);
  }
}

void UploadGraphRequest::MergeFrom(const UploadGraphRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.graph_nav.UploadGraphRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
  if (from.has_graph()) {
    _internal_mutable_graph()->::bosdyn::api::graph_nav::Graph::MergeFrom(from._internal_graph());
  }
  if (from.has_lease()) {
    _internal_mutable_lease()->::bosdyn::api::Lease::MergeFrom(from._internal_lease());
  }
}

void UploadGraphRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.graph_nav.UploadGraphRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadGraphRequest::CopyFrom(const UploadGraphRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.graph_nav.UploadGraphRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadGraphRequest::IsInitialized() const {
  return true;
}

void UploadGraphRequest::InternalSwap(UploadGraphRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UploadGraphRequest, lease_)
      + sizeof(UploadGraphRequest::lease_)
      - PROTOBUF_FIELD_OFFSET(UploadGraphRequest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UploadGraphRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UploadGraphResponse::InitAsDefaultInstance() {
  ::bosdyn::api::graph_nav::_UploadGraphResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
  ::bosdyn::api::graph_nav::_UploadGraphResponse_default_instance_._instance.get_mutable()->lease_use_result_ = const_cast< ::bosdyn::api::LeaseUseResult*>(
      ::bosdyn::api::LeaseUseResult::internal_default_instance());
}
class UploadGraphResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const UploadGraphResponse* msg);
  static const ::bosdyn::api::LeaseUseResult& lease_use_result(const UploadGraphResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
UploadGraphResponse::_Internal::header(const UploadGraphResponse* msg) {
  return *msg->header_;
}
const ::bosdyn::api::LeaseUseResult&
UploadGraphResponse::_Internal::lease_use_result(const UploadGraphResponse* msg) {
  return *msg->lease_use_result_;
}
void UploadGraphResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void UploadGraphResponse::clear_lease_use_result() {
  if (GetArena() == nullptr && lease_use_result_ != nullptr) {
    delete lease_use_result_;
  }
  lease_use_result_ = nullptr;
}
UploadGraphResponse::UploadGraphResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  loaded_waypoint_snapshot_ids_(arena),
  unknown_waypoint_snapshot_ids_(arena),
  loaded_edge_snapshot_ids_(arena),
  unknown_edge_snapshot_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.graph_nav.UploadGraphResponse)
}
UploadGraphResponse::UploadGraphResponse(const UploadGraphResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      loaded_waypoint_snapshot_ids_(from.loaded_waypoint_snapshot_ids_),
      unknown_waypoint_snapshot_ids_(from.unknown_waypoint_snapshot_ids_),
      loaded_edge_snapshot_ids_(from.loaded_edge_snapshot_ids_),
      unknown_edge_snapshot_ids_(from.unknown_edge_snapshot_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_lease_use_result()) {
    lease_use_result_ = new ::bosdyn::api::LeaseUseResult(*from.lease_use_result_);
  } else {
    lease_use_result_ = nullptr;
  }
  ::memcpy(&license_status_, &from.license_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&license_status_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.graph_nav.UploadGraphResponse)
}

void UploadGraphResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UploadGraphResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&header_)) + sizeof(status_));
}

UploadGraphResponse::~UploadGraphResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.graph_nav.UploadGraphResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UploadGraphResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete lease_use_result_;
}

void UploadGraphResponse::ArenaDtor(void* object) {
  UploadGraphResponse* _this = reinterpret_cast< UploadGraphResponse* >(object);
  (void)_this;
}
void UploadGraphResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UploadGraphResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UploadGraphResponse& UploadGraphResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UploadGraphResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base);
  return *internal_default_instance();
}


void UploadGraphResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.graph_nav.UploadGraphResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  loaded_waypoint_snapshot_ids_.Clear();
  unknown_waypoint_snapshot_ids_.Clear();
  loaded_edge_snapshot_ids_.Clear();
  unknown_edge_snapshot_ids_.Clear();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && lease_use_result_ != nullptr) {
    delete lease_use_result_;
  }
  lease_use_result_ = nullptr;
  ::memset(&license_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&license_status_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UploadGraphResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.LeaseUseResult lease_use_result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lease_use_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string loaded_waypoint_snapshot_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_loaded_waypoint_snapshot_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.graph_nav.UploadGraphResponse.loaded_waypoint_snapshot_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string unknown_waypoint_snapshot_ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_unknown_waypoint_snapshot_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.graph_nav.UploadGraphResponse.unknown_waypoint_snapshot_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string loaded_edge_snapshot_ids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_loaded_edge_snapshot_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.graph_nav.UploadGraphResponse.loaded_edge_snapshot_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string unknown_edge_snapshot_ids = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_unknown_edge_snapshot_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.graph_nav.UploadGraphResponse.unknown_edge_snapshot_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.LicenseInfo.Status license_status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_license_status(static_cast<::bosdyn::api::LicenseInfo_Status>(val));
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.graph_nav.UploadGraphResponse.Status status = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::bosdyn::api::graph_nav::UploadGraphResponse_Status>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UploadGraphResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.graph_nav.UploadGraphResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.LeaseUseResult lease_use_result = 2;
  if (this->has_lease_use_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::lease_use_result(this), target, stream);
  }

  // repeated string loaded_waypoint_snapshot_ids = 3;
  for (int i = 0, n = this->_internal_loaded_waypoint_snapshot_ids_size(); i < n; i++) {
    const auto& s = this->_internal_loaded_waypoint_snapshot_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.graph_nav.UploadGraphResponse.loaded_waypoint_snapshot_ids");
    target = stream->WriteString(3, s, target);
  }

  // repeated string unknown_waypoint_snapshot_ids = 4;
  for (int i = 0, n = this->_internal_unknown_waypoint_snapshot_ids_size(); i < n; i++) {
    const auto& s = this->_internal_unknown_waypoint_snapshot_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.graph_nav.UploadGraphResponse.unknown_waypoint_snapshot_ids");
    target = stream->WriteString(4, s, target);
  }

  // repeated string loaded_edge_snapshot_ids = 5;
  for (int i = 0, n = this->_internal_loaded_edge_snapshot_ids_size(); i < n; i++) {
    const auto& s = this->_internal_loaded_edge_snapshot_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.graph_nav.UploadGraphResponse.loaded_edge_snapshot_ids");
    target = stream->WriteString(5, s, target);
  }

  // repeated string unknown_edge_snapshot_ids = 6;
  for (int i = 0, n = this->_internal_unknown_edge_snapshot_ids_size(); i < n; i++) {
    const auto& s = this->_internal_unknown_edge_snapshot_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.graph_nav.UploadGraphResponse.unknown_edge_snapshot_ids");
    target = stream->WriteString(6, s, target);
  }

  // .bosdyn.api.LicenseInfo.Status license_status = 7;
  if (this->license_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_license_status(), target);
  }

  // .bosdyn.api.graph_nav.UploadGraphResponse.Status status = 8;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.graph_nav.UploadGraphResponse)
  return target;
}

size_t UploadGraphResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.graph_nav.UploadGraphResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string loaded_waypoint_snapshot_ids = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(loaded_waypoint_snapshot_ids_.size());
  for (int i = 0, n = loaded_waypoint_snapshot_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      loaded_waypoint_snapshot_ids_.Get(i));
  }

  // repeated string unknown_waypoint_snapshot_ids = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(unknown_waypoint_snapshot_ids_.size());
  for (int i = 0, n = unknown_waypoint_snapshot_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      unknown_waypoint_snapshot_ids_.Get(i));
  }

  // repeated string loaded_edge_snapshot_ids = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(loaded_edge_snapshot_ids_.size());
  for (int i = 0, n = loaded_edge_snapshot_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      loaded_edge_snapshot_ids_.Get(i));
  }

  // repeated string unknown_edge_snapshot_ids = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(unknown_edge_snapshot_ids_.size());
  for (int i = 0, n = unknown_edge_snapshot_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      unknown_edge_snapshot_ids_.Get(i));
  }

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.LeaseUseResult lease_use_result = 2;
  if (this->has_lease_use_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lease_use_result_);
  }

  // .bosdyn.api.LicenseInfo.Status license_status = 7;
  if (this->license_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_license_status());
  }

  // .bosdyn.api.graph_nav.UploadGraphResponse.Status status = 8;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UploadGraphResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.graph_nav.UploadGraphResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UploadGraphResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UploadGraphResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.graph_nav.UploadGraphResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.graph_nav.UploadGraphResponse)
    MergeFrom(*source);
  }
}

void UploadGraphResponse::MergeFrom(const UploadGraphResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.graph_nav.UploadGraphResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  loaded_waypoint_snapshot_ids_.MergeFrom(from.loaded_waypoint_snapshot_ids_);
  unknown_waypoint_snapshot_ids_.MergeFrom(from.unknown_waypoint_snapshot_ids_);
  loaded_edge_snapshot_ids_.MergeFrom(from.loaded_edge_snapshot_ids_);
  unknown_edge_snapshot_ids_.MergeFrom(from.unknown_edge_snapshot_ids_);
  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.has_lease_use_result()) {
    _internal_mutable_lease_use_result()->::bosdyn::api::LeaseUseResult::MergeFrom(from._internal_lease_use_result());
  }
  if (from.license_status() != 0) {
    _internal_set_license_status(from._internal_license_status());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void UploadGraphResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.graph_nav.UploadGraphResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadGraphResponse::CopyFrom(const UploadGraphResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.graph_nav.UploadGraphResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadGraphResponse::IsInitialized() const {
  return true;
}

void UploadGraphResponse::InternalSwap(UploadGraphResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  loaded_waypoint_snapshot_ids_.InternalSwap(&other->loaded_waypoint_snapshot_ids_);
  unknown_waypoint_snapshot_ids_.InternalSwap(&other->unknown_waypoint_snapshot_ids_);
  loaded_edge_snapshot_ids_.InternalSwap(&other->loaded_edge_snapshot_ids_);
  unknown_edge_snapshot_ids_.InternalSwap(&other->unknown_edge_snapshot_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UploadGraphResponse, status_)
      + sizeof(UploadGraphResponse::status_)
      - PROTOBUF_FIELD_OFFSET(UploadGraphResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UploadGraphResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DownloadGraphRequest::InitAsDefaultInstance() {
  ::bosdyn::api::graph_nav::_DownloadGraphRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
}
class DownloadGraphRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const DownloadGraphRequest* msg);
};

const ::bosdyn::api::RequestHeader&
DownloadGraphRequest::_Internal::header(const DownloadGraphRequest* msg) {
  return *msg->header_;
}
void DownloadGraphRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
DownloadGraphRequest::DownloadGraphRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.graph_nav.DownloadGraphRequest)
}
DownloadGraphRequest::DownloadGraphRequest(const DownloadGraphRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.graph_nav.DownloadGraphRequest)
}

void DownloadGraphRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DownloadGraphRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base);
  header_ = nullptr;
}

DownloadGraphRequest::~DownloadGraphRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.graph_nav.DownloadGraphRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DownloadGraphRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void DownloadGraphRequest::ArenaDtor(void* object) {
  DownloadGraphRequest* _this = reinterpret_cast< DownloadGraphRequest* >(object);
  (void)_this;
}
void DownloadGraphRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DownloadGraphRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DownloadGraphRequest& DownloadGraphRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DownloadGraphRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base);
  return *internal_default_instance();
}


void DownloadGraphRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.graph_nav.DownloadGraphRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DownloadGraphRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DownloadGraphRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.graph_nav.DownloadGraphRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.graph_nav.DownloadGraphRequest)
  return target;
}

size_t DownloadGraphRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.graph_nav.DownloadGraphRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DownloadGraphRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.graph_nav.DownloadGraphRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DownloadGraphRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DownloadGraphRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.graph_nav.DownloadGraphRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.graph_nav.DownloadGraphRequest)
    MergeFrom(*source);
  }
}

void DownloadGraphRequest::MergeFrom(const DownloadGraphRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.graph_nav.DownloadGraphRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
}

void DownloadGraphRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.graph_nav.DownloadGraphRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownloadGraphRequest::CopyFrom(const DownloadGraphRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.graph_nav.DownloadGraphRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadGraphRequest::IsInitialized() const {
  return true;
}

void DownloadGraphRequest::InternalSwap(DownloadGraphRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DownloadGraphRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DownloadGraphResponse::InitAsDefaultInstance() {
  ::bosdyn::api::graph_nav::_DownloadGraphResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
  ::bosdyn::api::graph_nav::_DownloadGraphResponse_default_instance_._instance.get_mutable()->graph_ = const_cast< ::bosdyn::api::graph_nav::Graph*>(
      ::bosdyn::api::graph_nav::Graph::internal_default_instance());
}
class DownloadGraphResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const DownloadGraphResponse* msg);
  static const ::bosdyn::api::graph_nav::Graph& graph(const DownloadGraphResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
DownloadGraphResponse::_Internal::header(const DownloadGraphResponse* msg) {
  return *msg->header_;
}
const ::bosdyn::api::graph_nav::Graph&
DownloadGraphResponse::_Internal::graph(const DownloadGraphResponse* msg) {
  return *msg->graph_;
}
void DownloadGraphResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void DownloadGraphResponse::clear_graph() {
  if (GetArena() == nullptr && graph_ != nullptr) {
    delete graph_;
  }
  graph_ = nullptr;
}
DownloadGraphResponse::DownloadGraphResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.graph_nav.DownloadGraphResponse)
}
DownloadGraphResponse::DownloadGraphResponse(const DownloadGraphResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_graph()) {
    graph_ = new ::bosdyn::api::graph_nav::Graph(*from.graph_);
  } else {
    graph_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.graph_nav.DownloadGraphResponse)
}

void DownloadGraphResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DownloadGraphResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&graph_) -
      reinterpret_cast<char*>(&header_)) + sizeof(graph_));
}

DownloadGraphResponse::~DownloadGraphResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.graph_nav.DownloadGraphResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DownloadGraphResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete graph_;
}

void DownloadGraphResponse::ArenaDtor(void* object) {
  DownloadGraphResponse* _this = reinterpret_cast< DownloadGraphResponse* >(object);
  (void)_this;
}
void DownloadGraphResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DownloadGraphResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DownloadGraphResponse& DownloadGraphResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DownloadGraphResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base);
  return *internal_default_instance();
}


void DownloadGraphResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.graph_nav.DownloadGraphResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && graph_ != nullptr) {
    delete graph_;
  }
  graph_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DownloadGraphResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.graph_nav.Graph graph = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_graph(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DownloadGraphResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.graph_nav.DownloadGraphResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.graph_nav.Graph graph = 2;
  if (this->has_graph()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::graph(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.graph_nav.DownloadGraphResponse)
  return target;
}

size_t DownloadGraphResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.graph_nav.DownloadGraphResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.graph_nav.Graph graph = 2;
  if (this->has_graph()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *graph_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DownloadGraphResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.graph_nav.DownloadGraphResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DownloadGraphResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DownloadGraphResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.graph_nav.DownloadGraphResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.graph_nav.DownloadGraphResponse)
    MergeFrom(*source);
  }
}

void DownloadGraphResponse::MergeFrom(const DownloadGraphResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.graph_nav.DownloadGraphResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.has_graph()) {
    _internal_mutable_graph()->::bosdyn::api::graph_nav::Graph::MergeFrom(from._internal_graph());
  }
}

void DownloadGraphResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.graph_nav.DownloadGraphResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownloadGraphResponse::CopyFrom(const DownloadGraphResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.graph_nav.DownloadGraphResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadGraphResponse::IsInitialized() const {
  return true;
}

void DownloadGraphResponse::InternalSwap(DownloadGraphResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DownloadGraphResponse, graph_)
      + sizeof(DownloadGraphResponse::graph_)
      - PROTOBUF_FIELD_OFFSET(DownloadGraphResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DownloadGraphResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UploadWaypointSnapshotRequest::InitAsDefaultInstance() {
  ::bosdyn::api::graph_nav::_UploadWaypointSnapshotRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
  ::bosdyn::api::graph_nav::_UploadWaypointSnapshotRequest_default_instance_._instance.get_mutable()->chunk_ = const_cast< ::bosdyn::api::DataChunk*>(
      ::bosdyn::api::DataChunk::internal_default_instance());
  ::bosdyn::api::graph_nav::_UploadWaypointSnapshotRequest_default_instance_._instance.get_mutable()->lease_ = const_cast< ::bosdyn::api::Lease*>(
      ::bosdyn::api::Lease::internal_default_instance());
}
class UploadWaypointSnapshotRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const UploadWaypointSnapshotRequest* msg);
  static const ::bosdyn::api::DataChunk& chunk(const UploadWaypointSnapshotRequest* msg);
  static const ::bosdyn::api::Lease& lease(const UploadWaypointSnapshotRequest* msg);
};

const ::bosdyn::api::RequestHeader&
UploadWaypointSnapshotRequest::_Internal::header(const UploadWaypointSnapshotRequest* msg) {
  return *msg->header_;
}
const ::bosdyn::api::DataChunk&
UploadWaypointSnapshotRequest::_Internal::chunk(const UploadWaypointSnapshotRequest* msg) {
  return *msg->chunk_;
}
const ::bosdyn::api::Lease&
UploadWaypointSnapshotRequest::_Internal::lease(const UploadWaypointSnapshotRequest* msg) {
  return *msg->lease_;
}
void UploadWaypointSnapshotRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void UploadWaypointSnapshotRequest::clear_chunk() {
  if (GetArena() == nullptr && chunk_ != nullptr) {
    delete chunk_;
  }
  chunk_ = nullptr;
}
void UploadWaypointSnapshotRequest::clear_lease() {
  if (GetArena() == nullptr && lease_ != nullptr) {
    delete lease_;
  }
  lease_ = nullptr;
}
UploadWaypointSnapshotRequest::UploadWaypointSnapshotRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.graph_nav.UploadWaypointSnapshotRequest)
}
UploadWaypointSnapshotRequest::UploadWaypointSnapshotRequest(const UploadWaypointSnapshotRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_chunk()) {
    chunk_ = new ::bosdyn::api::DataChunk(*from.chunk_);
  } else {
    chunk_ = nullptr;
  }
  if (from._internal_has_lease()) {
    lease_ = new ::bosdyn::api::Lease(*from.lease_);
  } else {
    lease_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.graph_nav.UploadWaypointSnapshotRequest)
}

void UploadWaypointSnapshotRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UploadWaypointSnapshotRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lease_) -
      reinterpret_cast<char*>(&header_)) + sizeof(lease_));
}

UploadWaypointSnapshotRequest::~UploadWaypointSnapshotRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.graph_nav.UploadWaypointSnapshotRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UploadWaypointSnapshotRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete chunk_;
  if (this != internal_default_instance()) delete lease_;
}

void UploadWaypointSnapshotRequest::ArenaDtor(void* object) {
  UploadWaypointSnapshotRequest* _this = reinterpret_cast< UploadWaypointSnapshotRequest* >(object);
  (void)_this;
}
void UploadWaypointSnapshotRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UploadWaypointSnapshotRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UploadWaypointSnapshotRequest& UploadWaypointSnapshotRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UploadWaypointSnapshotRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base);
  return *internal_default_instance();
}


void UploadWaypointSnapshotRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.graph_nav.UploadWaypointSnapshotRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && chunk_ != nullptr) {
    delete chunk_;
  }
  chunk_ = nullptr;
  if (GetArena() == nullptr && lease_ != nullptr) {
    delete lease_;
  }
  lease_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UploadWaypointSnapshotRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.DataChunk chunk = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_chunk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.Lease lease = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_lease(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UploadWaypointSnapshotRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.graph_nav.UploadWaypointSnapshotRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.DataChunk chunk = 3;
  if (this->has_chunk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::chunk(this), target, stream);
  }

  // .bosdyn.api.Lease lease = 4;
  if (this->has_lease()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::lease(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.graph_nav.UploadWaypointSnapshotRequest)
  return target;
}

size_t UploadWaypointSnapshotRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.graph_nav.UploadWaypointSnapshotRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.DataChunk chunk = 3;
  if (this->has_chunk()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *chunk_);
  }

  // .bosdyn.api.Lease lease = 4;
  if (this->has_lease()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lease_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UploadWaypointSnapshotRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.graph_nav.UploadWaypointSnapshotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UploadWaypointSnapshotRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UploadWaypointSnapshotRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.graph_nav.UploadWaypointSnapshotRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.graph_nav.UploadWaypointSnapshotRequest)
    MergeFrom(*source);
  }
}

void UploadWaypointSnapshotRequest::MergeFrom(const UploadWaypointSnapshotRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.graph_nav.UploadWaypointSnapshotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
  if (from.has_chunk()) {
    _internal_mutable_chunk()->::bosdyn::api::DataChunk::MergeFrom(from._internal_chunk());
  }
  if (from.has_lease()) {
    _internal_mutable_lease()->::bosdyn::api::Lease::MergeFrom(from._internal_lease());
  }
}

void UploadWaypointSnapshotRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.graph_nav.UploadWaypointSnapshotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadWaypointSnapshotRequest::CopyFrom(const UploadWaypointSnapshotRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.graph_nav.UploadWaypointSnapshotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadWaypointSnapshotRequest::IsInitialized() const {
  return true;
}

void UploadWaypointSnapshotRequest::InternalSwap(UploadWaypointSnapshotRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UploadWaypointSnapshotRequest, lease_)
      + sizeof(UploadWaypointSnapshotRequest::lease_)
      - PROTOBUF_FIELD_OFFSET(UploadWaypointSnapshotRequest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UploadWaypointSnapshotRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UploadWaypointSnapshotResponse::InitAsDefaultInstance() {
  ::bosdyn::api::graph_nav::_UploadWaypointSnapshotResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
  ::bosdyn::api::graph_nav::_UploadWaypointSnapshotResponse_default_instance_._instance.get_mutable()->lease_use_result_ = const_cast< ::bosdyn::api::LeaseUseResult*>(
      ::bosdyn::api::LeaseUseResult::internal_default_instance());
}
class UploadWaypointSnapshotResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const UploadWaypointSnapshotResponse* msg);
  static const ::bosdyn::api::LeaseUseResult& lease_use_result(const UploadWaypointSnapshotResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
UploadWaypointSnapshotResponse::_Internal::header(const UploadWaypointSnapshotResponse* msg) {
  return *msg->header_;
}
const ::bosdyn::api::LeaseUseResult&
UploadWaypointSnapshotResponse::_Internal::lease_use_result(const UploadWaypointSnapshotResponse* msg) {
  return *msg->lease_use_result_;
}
void UploadWaypointSnapshotResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void UploadWaypointSnapshotResponse::clear_lease_use_result() {
  if (GetArena() == nullptr && lease_use_result_ != nullptr) {
    delete lease_use_result_;
  }
  lease_use_result_ = nullptr;
}
UploadWaypointSnapshotResponse::UploadWaypointSnapshotResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.graph_nav.UploadWaypointSnapshotResponse)
}
UploadWaypointSnapshotResponse::UploadWaypointSnapshotResponse(const UploadWaypointSnapshotResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_lease_use_result()) {
    lease_use_result_ = new ::bosdyn::api::LeaseUseResult(*from.lease_use_result_);
  } else {
    lease_use_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.graph_nav.UploadWaypointSnapshotResponse)
}

void UploadWaypointSnapshotResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UploadWaypointSnapshotResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lease_use_result_) -
      reinterpret_cast<char*>(&header_)) + sizeof(lease_use_result_));
}

UploadWaypointSnapshotResponse::~UploadWaypointSnapshotResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.graph_nav.UploadWaypointSnapshotResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UploadWaypointSnapshotResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete lease_use_result_;
}

void UploadWaypointSnapshotResponse::ArenaDtor(void* object) {
  UploadWaypointSnapshotResponse* _this = reinterpret_cast< UploadWaypointSnapshotResponse* >(object);
  (void)_this;
}
void UploadWaypointSnapshotResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UploadWaypointSnapshotResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UploadWaypointSnapshotResponse& UploadWaypointSnapshotResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UploadWaypointSnapshotResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base);
  return *internal_default_instance();
}


void UploadWaypointSnapshotResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.graph_nav.UploadWaypointSnapshotResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && lease_use_result_ != nullptr) {
    delete lease_use_result_;
  }
  lease_use_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UploadWaypointSnapshotResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.LeaseUseResult lease_use_result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lease_use_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UploadWaypointSnapshotResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.graph_nav.UploadWaypointSnapshotResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.LeaseUseResult lease_use_result = 2;
  if (this->has_lease_use_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::lease_use_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.graph_nav.UploadWaypointSnapshotResponse)
  return target;
}

size_t UploadWaypointSnapshotResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.graph_nav.UploadWaypointSnapshotResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.LeaseUseResult lease_use_result = 2;
  if (this->has_lease_use_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lease_use_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UploadWaypointSnapshotResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.graph_nav.UploadWaypointSnapshotResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UploadWaypointSnapshotResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UploadWaypointSnapshotResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.graph_nav.UploadWaypointSnapshotResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.graph_nav.UploadWaypointSnapshotResponse)
    MergeFrom(*source);
  }
}

void UploadWaypointSnapshotResponse::MergeFrom(const UploadWaypointSnapshotResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.graph_nav.UploadWaypointSnapshotResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.has_lease_use_result()) {
    _internal_mutable_lease_use_result()->::bosdyn::api::LeaseUseResult::MergeFrom(from._internal_lease_use_result());
  }
}

void UploadWaypointSnapshotResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.graph_nav.UploadWaypointSnapshotResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadWaypointSnapshotResponse::CopyFrom(const UploadWaypointSnapshotResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.graph_nav.UploadWaypointSnapshotResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadWaypointSnapshotResponse::IsInitialized() const {
  return true;
}

void UploadWaypointSnapshotResponse::InternalSwap(UploadWaypointSnapshotResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UploadWaypointSnapshotResponse, lease_use_result_)
      + sizeof(UploadWaypointSnapshotResponse::lease_use_result_)
      - PROTOBUF_FIELD_OFFSET(UploadWaypointSnapshotResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UploadWaypointSnapshotResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UploadEdgeSnapshotRequest::InitAsDefaultInstance() {
  ::bosdyn::api::graph_nav::_UploadEdgeSnapshotRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
  ::bosdyn::api::graph_nav::_UploadEdgeSnapshotRequest_default_instance_._instance.get_mutable()->chunk_ = const_cast< ::bosdyn::api::DataChunk*>(
      ::bosdyn::api::DataChunk::internal_default_instance());
  ::bosdyn::api::graph_nav::_UploadEdgeSnapshotRequest_default_instance_._instance.get_mutable()->lease_ = const_cast< ::bosdyn::api::Lease*>(
      ::bosdyn::api::Lease::internal_default_instance());
}
class UploadEdgeSnapshotRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const UploadEdgeSnapshotRequest* msg);
  static const ::bosdyn::api::DataChunk& chunk(const UploadEdgeSnapshotRequest* msg);
  static const ::bosdyn::api::Lease& lease(const UploadEdgeSnapshotRequest* msg);
};

const ::bosdyn::api::RequestHeader&
UploadEdgeSnapshotRequest::_Internal::header(const UploadEdgeSnapshotRequest* msg) {
  return *msg->header_;
}
const ::bosdyn::api::DataChunk&
UploadEdgeSnapshotRequest::_Internal::chunk(const UploadEdgeSnapshotRequest* msg) {
  return *msg->chunk_;
}
const ::bosdyn::api::Lease&
UploadEdgeSnapshotRequest::_Internal::lease(const UploadEdgeSnapshotRequest* msg) {
  return *msg->lease_;
}
void UploadEdgeSnapshotRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void UploadEdgeSnapshotRequest::clear_chunk() {
  if (GetArena() == nullptr && chunk_ != nullptr) {
    delete chunk_;
  }
  chunk_ = nullptr;
}
void UploadEdgeSnapshotRequest::clear_lease() {
  if (GetArena() == nullptr && lease_ != nullptr) {
    delete lease_;
  }
  lease_ = nullptr;
}
UploadEdgeSnapshotRequest::UploadEdgeSnapshotRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.graph_nav.UploadEdgeSnapshotRequest)
}
UploadEdgeSnapshotRequest::UploadEdgeSnapshotRequest(const UploadEdgeSnapshotRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_chunk()) {
    chunk_ = new ::bosdyn::api::DataChunk(*from.chunk_);
  } else {
    chunk_ = nullptr;
  }
  if (from._internal_has_lease()) {
    lease_ = new ::bosdyn::api::Lease(*from.lease_);
  } else {
    lease_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.graph_nav.UploadEdgeSnapshotRequest)
}

void UploadEdgeSnapshotRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UploadEdgeSnapshotRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lease_) -
      reinterpret_cast<char*>(&header_)) + sizeof(lease_));
}

UploadEdgeSnapshotRequest::~UploadEdgeSnapshotRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.graph_nav.UploadEdgeSnapshotRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UploadEdgeSnapshotRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete chunk_;
  if (this != internal_default_instance()) delete lease_;
}

void UploadEdgeSnapshotRequest::ArenaDtor(void* object) {
  UploadEdgeSnapshotRequest* _this = reinterpret_cast< UploadEdgeSnapshotRequest* >(object);
  (void)_this;
}
void UploadEdgeSnapshotRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UploadEdgeSnapshotRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UploadEdgeSnapshotRequest& UploadEdgeSnapshotRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UploadEdgeSnapshotRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base);
  return *internal_default_instance();
}


void UploadEdgeSnapshotRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.graph_nav.UploadEdgeSnapshotRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && chunk_ != nullptr) {
    delete chunk_;
  }
  chunk_ = nullptr;
  if (GetArena() == nullptr && lease_ != nullptr) {
    delete lease_;
  }
  lease_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UploadEdgeSnapshotRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.DataChunk chunk = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_chunk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.Lease lease = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_lease(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UploadEdgeSnapshotRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.graph_nav.UploadEdgeSnapshotRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.DataChunk chunk = 4;
  if (this->has_chunk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::chunk(this), target, stream);
  }

  // .bosdyn.api.Lease lease = 5;
  if (this->has_lease()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::lease(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.graph_nav.UploadEdgeSnapshotRequest)
  return target;
}

size_t UploadEdgeSnapshotRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.graph_nav.UploadEdgeSnapshotRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.DataChunk chunk = 4;
  if (this->has_chunk()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *chunk_);
  }

  // .bosdyn.api.Lease lease = 5;
  if (this->has_lease()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lease_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UploadEdgeSnapshotRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.graph_nav.UploadEdgeSnapshotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UploadEdgeSnapshotRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UploadEdgeSnapshotRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.graph_nav.UploadEdgeSnapshotRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.graph_nav.UploadEdgeSnapshotRequest)
    MergeFrom(*source);
  }
}

void UploadEdgeSnapshotRequest::MergeFrom(const UploadEdgeSnapshotRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.graph_nav.UploadEdgeSnapshotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
  if (from.has_chunk()) {
    _internal_mutable_chunk()->::bosdyn::api::DataChunk::MergeFrom(from._internal_chunk());
  }
  if (from.has_lease()) {
    _internal_mutable_lease()->::bosdyn::api::Lease::MergeFrom(from._internal_lease());
  }
}

void UploadEdgeSnapshotRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.graph_nav.UploadEdgeSnapshotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadEdgeSnapshotRequest::CopyFrom(const UploadEdgeSnapshotRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.graph_nav.UploadEdgeSnapshotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadEdgeSnapshotRequest::IsInitialized() const {
  return true;
}

void UploadEdgeSnapshotRequest::InternalSwap(UploadEdgeSnapshotRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UploadEdgeSnapshotRequest, lease_)
      + sizeof(UploadEdgeSnapshotRequest::lease_)
      - PROTOBUF_FIELD_OFFSET(UploadEdgeSnapshotRequest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UploadEdgeSnapshotRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UploadEdgeSnapshotResponse::InitAsDefaultInstance() {
  ::bosdyn::api::graph_nav::_UploadEdgeSnapshotResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
  ::bosdyn::api::graph_nav::_UploadEdgeSnapshotResponse_default_instance_._instance.get_mutable()->lease_use_result_ = const_cast< ::bosdyn::api::LeaseUseResult*>(
      ::bosdyn::api::LeaseUseResult::internal_default_instance());
}
class UploadEdgeSnapshotResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const UploadEdgeSnapshotResponse* msg);
  static const ::bosdyn::api::LeaseUseResult& lease_use_result(const UploadEdgeSnapshotResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
UploadEdgeSnapshotResponse::_Internal::header(const UploadEdgeSnapshotResponse* msg) {
  return *msg->header_;
}
const ::bosdyn::api::LeaseUseResult&
UploadEdgeSnapshotResponse::_Internal::lease_use_result(const UploadEdgeSnapshotResponse* msg) {
  return *msg->lease_use_result_;
}
void UploadEdgeSnapshotResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void UploadEdgeSnapshotResponse::clear_lease_use_result() {
  if (GetArena() == nullptr && lease_use_result_ != nullptr) {
    delete lease_use_result_;
  }
  lease_use_result_ = nullptr;
}
UploadEdgeSnapshotResponse::UploadEdgeSnapshotResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.graph_nav.UploadEdgeSnapshotResponse)
}
UploadEdgeSnapshotResponse::UploadEdgeSnapshotResponse(const UploadEdgeSnapshotResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_lease_use_result()) {
    lease_use_result_ = new ::bosdyn::api::LeaseUseResult(*from.lease_use_result_);
  } else {
    lease_use_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.graph_nav.UploadEdgeSnapshotResponse)
}

void UploadEdgeSnapshotResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UploadEdgeSnapshotResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lease_use_result_) -
      reinterpret_cast<char*>(&header_)) + sizeof(lease_use_result_));
}

UploadEdgeSnapshotResponse::~UploadEdgeSnapshotResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.graph_nav.UploadEdgeSnapshotResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UploadEdgeSnapshotResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete lease_use_result_;
}

void UploadEdgeSnapshotResponse::ArenaDtor(void* object) {
  UploadEdgeSnapshotResponse* _this = reinterpret_cast< UploadEdgeSnapshotResponse* >(object);
  (void)_this;
}
void UploadEdgeSnapshotResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UploadEdgeSnapshotResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UploadEdgeSnapshotResponse& UploadEdgeSnapshotResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UploadEdgeSnapshotResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base);
  return *internal_default_instance();
}


void UploadEdgeSnapshotResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.graph_nav.UploadEdgeSnapshotResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && lease_use_result_ != nullptr) {
    delete lease_use_result_;
  }
  lease_use_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UploadEdgeSnapshotResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.LeaseUseResult lease_use_result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lease_use_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UploadEdgeSnapshotResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.graph_nav.UploadEdgeSnapshotResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.LeaseUseResult lease_use_result = 2;
  if (this->has_lease_use_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::lease_use_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.graph_nav.UploadEdgeSnapshotResponse)
  return target;
}

size_t UploadEdgeSnapshotResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.graph_nav.UploadEdgeSnapshotResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.LeaseUseResult lease_use_result = 2;
  if (this->has_lease_use_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lease_use_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UploadEdgeSnapshotResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.graph_nav.UploadEdgeSnapshotResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UploadEdgeSnapshotResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UploadEdgeSnapshotResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.graph_nav.UploadEdgeSnapshotResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.graph_nav.UploadEdgeSnapshotResponse)
    MergeFrom(*source);
  }
}

void UploadEdgeSnapshotResponse::MergeFrom(const UploadEdgeSnapshotResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.graph_nav.UploadEdgeSnapshotResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.has_lease_use_result()) {
    _internal_mutable_lease_use_result()->::bosdyn::api::LeaseUseResult::MergeFrom(from._internal_lease_use_result());
  }
}

void UploadEdgeSnapshotResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.graph_nav.UploadEdgeSnapshotResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadEdgeSnapshotResponse::CopyFrom(const UploadEdgeSnapshotResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.graph_nav.UploadEdgeSnapshotResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadEdgeSnapshotResponse::IsInitialized() const {
  return true;
}

void UploadEdgeSnapshotResponse::InternalSwap(UploadEdgeSnapshotResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UploadEdgeSnapshotResponse, lease_use_result_)
      + sizeof(UploadEdgeSnapshotResponse::lease_use_result_)
      - PROTOBUF_FIELD_OFFSET(UploadEdgeSnapshotResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UploadEdgeSnapshotResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DownloadWaypointSnapshotRequest::InitAsDefaultInstance() {
  ::bosdyn::api::graph_nav::_DownloadWaypointSnapshotRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
}
class DownloadWaypointSnapshotRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const DownloadWaypointSnapshotRequest* msg);
};

const ::bosdyn::api::RequestHeader&
DownloadWaypointSnapshotRequest::_Internal::header(const DownloadWaypointSnapshotRequest* msg) {
  return *msg->header_;
}
void DownloadWaypointSnapshotRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
DownloadWaypointSnapshotRequest::DownloadWaypointSnapshotRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.graph_nav.DownloadWaypointSnapshotRequest)
}
DownloadWaypointSnapshotRequest::DownloadWaypointSnapshotRequest(const DownloadWaypointSnapshotRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  waypoint_snapshot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_waypoint_snapshot_id().empty()) {
    waypoint_snapshot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_waypoint_snapshot_id(),
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&download_images_, &from.download_images_,
    static_cast<size_t>(reinterpret_cast<char*>(&compress_point_cloud_) -
    reinterpret_cast<char*>(&download_images_)) + sizeof(compress_point_cloud_));
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.graph_nav.DownloadWaypointSnapshotRequest)
}

void DownloadWaypointSnapshotRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DownloadWaypointSnapshotRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base);
  waypoint_snapshot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compress_point_cloud_) -
      reinterpret_cast<char*>(&header_)) + sizeof(compress_point_cloud_));
}

DownloadWaypointSnapshotRequest::~DownloadWaypointSnapshotRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.graph_nav.DownloadWaypointSnapshotRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DownloadWaypointSnapshotRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  waypoint_snapshot_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void DownloadWaypointSnapshotRequest::ArenaDtor(void* object) {
  DownloadWaypointSnapshotRequest* _this = reinterpret_cast< DownloadWaypointSnapshotRequest* >(object);
  (void)_this;
}
void DownloadWaypointSnapshotRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DownloadWaypointSnapshotRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DownloadWaypointSnapshotRequest& DownloadWaypointSnapshotRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DownloadWaypointSnapshotRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base);
  return *internal_default_instance();
}


void DownloadWaypointSnapshotRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.graph_nav.DownloadWaypointSnapshotRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  waypoint_snapshot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  ::memset(&download_images_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compress_point_cloud_) -
      reinterpret_cast<char*>(&download_images_)) + sizeof(compress_point_cloud_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DownloadWaypointSnapshotRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string waypoint_snapshot_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_waypoint_snapshot_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.graph_nav.DownloadWaypointSnapshotRequest.waypoint_snapshot_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool download_images = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          download_images_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool compress_point_cloud = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          compress_point_cloud_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DownloadWaypointSnapshotRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.graph_nav.DownloadWaypointSnapshotRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // string waypoint_snapshot_id = 2;
  if (this->waypoint_snapshot_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_waypoint_snapshot_id().data(), static_cast<int>(this->_internal_waypoint_snapshot_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.graph_nav.DownloadWaypointSnapshotRequest.waypoint_snapshot_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_waypoint_snapshot_id(), target);
  }

  // bool download_images = 3;
  if (this->download_images() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_download_images(), target);
  }

  // bool compress_point_cloud = 4;
  if (this->compress_point_cloud() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_compress_point_cloud(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.graph_nav.DownloadWaypointSnapshotRequest)
  return target;
}

size_t DownloadWaypointSnapshotRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.graph_nav.DownloadWaypointSnapshotRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string waypoint_snapshot_id = 2;
  if (this->waypoint_snapshot_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_waypoint_snapshot_id());
  }

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // bool download_images = 3;
  if (this->download_images() != 0) {
    total_size += 1 + 1;
  }

  // bool compress_point_cloud = 4;
  if (this->compress_point_cloud() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DownloadWaypointSnapshotRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.graph_nav.DownloadWaypointSnapshotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DownloadWaypointSnapshotRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DownloadWaypointSnapshotRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.graph_nav.DownloadWaypointSnapshotRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.graph_nav.DownloadWaypointSnapshotRequest)
    MergeFrom(*source);
  }
}

void DownloadWaypointSnapshotRequest::MergeFrom(const DownloadWaypointSnapshotRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.graph_nav.DownloadWaypointSnapshotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.waypoint_snapshot_id().size() > 0) {
    _internal_set_waypoint_snapshot_id(from._internal_waypoint_snapshot_id());
  }
  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
  if (from.download_images() != 0) {
    _internal_set_download_images(from._internal_download_images());
  }
  if (from.compress_point_cloud() != 0) {
    _internal_set_compress_point_cloud(from._internal_compress_point_cloud());
  }
}

void DownloadWaypointSnapshotRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.graph_nav.DownloadWaypointSnapshotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownloadWaypointSnapshotRequest::CopyFrom(const DownloadWaypointSnapshotRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.graph_nav.DownloadWaypointSnapshotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadWaypointSnapshotRequest::IsInitialized() const {
  return true;
}

void DownloadWaypointSnapshotRequest::InternalSwap(DownloadWaypointSnapshotRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  waypoint_snapshot_id_.Swap(&other->waypoint_snapshot_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DownloadWaypointSnapshotRequest, compress_point_cloud_)
      + sizeof(DownloadWaypointSnapshotRequest::compress_point_cloud_)
      - PROTOBUF_FIELD_OFFSET(DownloadWaypointSnapshotRequest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DownloadWaypointSnapshotRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DownloadWaypointSnapshotResponse::InitAsDefaultInstance() {
  ::bosdyn::api::graph_nav::_DownloadWaypointSnapshotResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
  ::bosdyn::api::graph_nav::_DownloadWaypointSnapshotResponse_default_instance_._instance.get_mutable()->chunk_ = const_cast< ::bosdyn::api::DataChunk*>(
      ::bosdyn::api::DataChunk::internal_default_instance());
}
class DownloadWaypointSnapshotResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const DownloadWaypointSnapshotResponse* msg);
  static const ::bosdyn::api::DataChunk& chunk(const DownloadWaypointSnapshotResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
DownloadWaypointSnapshotResponse::_Internal::header(const DownloadWaypointSnapshotResponse* msg) {
  return *msg->header_;
}
const ::bosdyn::api::DataChunk&
DownloadWaypointSnapshotResponse::_Internal::chunk(const DownloadWaypointSnapshotResponse* msg) {
  return *msg->chunk_;
}
void DownloadWaypointSnapshotResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void DownloadWaypointSnapshotResponse::clear_chunk() {
  if (GetArena() == nullptr && chunk_ != nullptr) {
    delete chunk_;
  }
  chunk_ = nullptr;
}
DownloadWaypointSnapshotResponse::DownloadWaypointSnapshotResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.graph_nav.DownloadWaypointSnapshotResponse)
}
DownloadWaypointSnapshotResponse::DownloadWaypointSnapshotResponse(const DownloadWaypointSnapshotResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  waypoint_snapshot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_waypoint_snapshot_id().empty()) {
    waypoint_snapshot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_waypoint_snapshot_id(),
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_chunk()) {
    chunk_ = new ::bosdyn::api::DataChunk(*from.chunk_);
  } else {
    chunk_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.graph_nav.DownloadWaypointSnapshotResponse)
}

void DownloadWaypointSnapshotResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DownloadWaypointSnapshotResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base);
  waypoint_snapshot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&header_)) + sizeof(status_));
}

DownloadWaypointSnapshotResponse::~DownloadWaypointSnapshotResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.graph_nav.DownloadWaypointSnapshotResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DownloadWaypointSnapshotResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  waypoint_snapshot_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete chunk_;
}

void DownloadWaypointSnapshotResponse::ArenaDtor(void* object) {
  DownloadWaypointSnapshotResponse* _this = reinterpret_cast< DownloadWaypointSnapshotResponse* >(object);
  (void)_this;
}
void DownloadWaypointSnapshotResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DownloadWaypointSnapshotResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DownloadWaypointSnapshotResponse& DownloadWaypointSnapshotResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DownloadWaypointSnapshotResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base);
  return *internal_default_instance();
}


void DownloadWaypointSnapshotResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.graph_nav.DownloadWaypointSnapshotResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  waypoint_snapshot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && chunk_ != nullptr) {
    delete chunk_;
  }
  chunk_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DownloadWaypointSnapshotResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.graph_nav.DownloadWaypointSnapshotResponse.Status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse_Status>(val));
        } else goto handle_unusual;
        continue;
      // string waypoint_snapshot_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_waypoint_snapshot_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.graph_nav.DownloadWaypointSnapshotResponse.waypoint_snapshot_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.DataChunk chunk = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_chunk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DownloadWaypointSnapshotResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.graph_nav.DownloadWaypointSnapshotResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.graph_nav.DownloadWaypointSnapshotResponse.Status status = 2;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // string waypoint_snapshot_id = 4;
  if (this->waypoint_snapshot_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_waypoint_snapshot_id().data(), static_cast<int>(this->_internal_waypoint_snapshot_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.graph_nav.DownloadWaypointSnapshotResponse.waypoint_snapshot_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_waypoint_snapshot_id(), target);
  }

  // .bosdyn.api.DataChunk chunk = 5;
  if (this->has_chunk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::chunk(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.graph_nav.DownloadWaypointSnapshotResponse)
  return target;
}

size_t DownloadWaypointSnapshotResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.graph_nav.DownloadWaypointSnapshotResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string waypoint_snapshot_id = 4;
  if (this->waypoint_snapshot_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_waypoint_snapshot_id());
  }

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.DataChunk chunk = 5;
  if (this->has_chunk()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *chunk_);
  }

  // .bosdyn.api.graph_nav.DownloadWaypointSnapshotResponse.Status status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DownloadWaypointSnapshotResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.graph_nav.DownloadWaypointSnapshotResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DownloadWaypointSnapshotResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DownloadWaypointSnapshotResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.graph_nav.DownloadWaypointSnapshotResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.graph_nav.DownloadWaypointSnapshotResponse)
    MergeFrom(*source);
  }
}

void DownloadWaypointSnapshotResponse::MergeFrom(const DownloadWaypointSnapshotResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.graph_nav.DownloadWaypointSnapshotResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.waypoint_snapshot_id().size() > 0) {
    _internal_set_waypoint_snapshot_id(from._internal_waypoint_snapshot_id());
  }
  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.has_chunk()) {
    _internal_mutable_chunk()->::bosdyn::api::DataChunk::MergeFrom(from._internal_chunk());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void DownloadWaypointSnapshotResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.graph_nav.DownloadWaypointSnapshotResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownloadWaypointSnapshotResponse::CopyFrom(const DownloadWaypointSnapshotResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.graph_nav.DownloadWaypointSnapshotResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadWaypointSnapshotResponse::IsInitialized() const {
  return true;
}

void DownloadWaypointSnapshotResponse::InternalSwap(DownloadWaypointSnapshotResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  waypoint_snapshot_id_.Swap(&other->waypoint_snapshot_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DownloadWaypointSnapshotResponse, status_)
      + sizeof(DownloadWaypointSnapshotResponse::status_)
      - PROTOBUF_FIELD_OFFSET(DownloadWaypointSnapshotResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DownloadWaypointSnapshotResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DownloadEdgeSnapshotRequest::InitAsDefaultInstance() {
  ::bosdyn::api::graph_nav::_DownloadEdgeSnapshotRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
}
class DownloadEdgeSnapshotRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const DownloadEdgeSnapshotRequest* msg);
};

const ::bosdyn::api::RequestHeader&
DownloadEdgeSnapshotRequest::_Internal::header(const DownloadEdgeSnapshotRequest* msg) {
  return *msg->header_;
}
void DownloadEdgeSnapshotRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
DownloadEdgeSnapshotRequest::DownloadEdgeSnapshotRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.graph_nav.DownloadEdgeSnapshotRequest)
}
DownloadEdgeSnapshotRequest::DownloadEdgeSnapshotRequest(const DownloadEdgeSnapshotRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  edge_snapshot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_edge_snapshot_id().empty()) {
    edge_snapshot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_edge_snapshot_id(),
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.graph_nav.DownloadEdgeSnapshotRequest)
}

void DownloadEdgeSnapshotRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DownloadEdgeSnapshotRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base);
  edge_snapshot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  header_ = nullptr;
}

DownloadEdgeSnapshotRequest::~DownloadEdgeSnapshotRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.graph_nav.DownloadEdgeSnapshotRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DownloadEdgeSnapshotRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  edge_snapshot_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void DownloadEdgeSnapshotRequest::ArenaDtor(void* object) {
  DownloadEdgeSnapshotRequest* _this = reinterpret_cast< DownloadEdgeSnapshotRequest* >(object);
  (void)_this;
}
void DownloadEdgeSnapshotRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DownloadEdgeSnapshotRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DownloadEdgeSnapshotRequest& DownloadEdgeSnapshotRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DownloadEdgeSnapshotRequest_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base);
  return *internal_default_instance();
}


void DownloadEdgeSnapshotRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.graph_nav.DownloadEdgeSnapshotRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  edge_snapshot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DownloadEdgeSnapshotRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string edge_snapshot_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_edge_snapshot_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.graph_nav.DownloadEdgeSnapshotRequest.edge_snapshot_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DownloadEdgeSnapshotRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.graph_nav.DownloadEdgeSnapshotRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // string edge_snapshot_id = 2;
  if (this->edge_snapshot_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_edge_snapshot_id().data(), static_cast<int>(this->_internal_edge_snapshot_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.graph_nav.DownloadEdgeSnapshotRequest.edge_snapshot_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_edge_snapshot_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.graph_nav.DownloadEdgeSnapshotRequest)
  return target;
}

size_t DownloadEdgeSnapshotRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.graph_nav.DownloadEdgeSnapshotRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string edge_snapshot_id = 2;
  if (this->edge_snapshot_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_edge_snapshot_id());
  }

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DownloadEdgeSnapshotRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.graph_nav.DownloadEdgeSnapshotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DownloadEdgeSnapshotRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DownloadEdgeSnapshotRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.graph_nav.DownloadEdgeSnapshotRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.graph_nav.DownloadEdgeSnapshotRequest)
    MergeFrom(*source);
  }
}

void DownloadEdgeSnapshotRequest::MergeFrom(const DownloadEdgeSnapshotRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.graph_nav.DownloadEdgeSnapshotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.edge_snapshot_id().size() > 0) {
    _internal_set_edge_snapshot_id(from._internal_edge_snapshot_id());
  }
  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
}

void DownloadEdgeSnapshotRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.graph_nav.DownloadEdgeSnapshotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownloadEdgeSnapshotRequest::CopyFrom(const DownloadEdgeSnapshotRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.graph_nav.DownloadEdgeSnapshotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadEdgeSnapshotRequest::IsInitialized() const {
  return true;
}

void DownloadEdgeSnapshotRequest::InternalSwap(DownloadEdgeSnapshotRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  edge_snapshot_id_.Swap(&other->edge_snapshot_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DownloadEdgeSnapshotRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DownloadEdgeSnapshotResponse::InitAsDefaultInstance() {
  ::bosdyn::api::graph_nav::_DownloadEdgeSnapshotResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
  ::bosdyn::api::graph_nav::_DownloadEdgeSnapshotResponse_default_instance_._instance.get_mutable()->chunk_ = const_cast< ::bosdyn::api::DataChunk*>(
      ::bosdyn::api::DataChunk::internal_default_instance());
}
class DownloadEdgeSnapshotResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const DownloadEdgeSnapshotResponse* msg);
  static const ::bosdyn::api::DataChunk& chunk(const DownloadEdgeSnapshotResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
DownloadEdgeSnapshotResponse::_Internal::header(const DownloadEdgeSnapshotResponse* msg) {
  return *msg->header_;
}
const ::bosdyn::api::DataChunk&
DownloadEdgeSnapshotResponse::_Internal::chunk(const DownloadEdgeSnapshotResponse* msg) {
  return *msg->chunk_;
}
void DownloadEdgeSnapshotResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void DownloadEdgeSnapshotResponse::clear_chunk() {
  if (GetArena() == nullptr && chunk_ != nullptr) {
    delete chunk_;
  }
  chunk_ = nullptr;
}
DownloadEdgeSnapshotResponse::DownloadEdgeSnapshotResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.graph_nav.DownloadEdgeSnapshotResponse)
}
DownloadEdgeSnapshotResponse::DownloadEdgeSnapshotResponse(const DownloadEdgeSnapshotResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  edge_snapshot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_edge_snapshot_id().empty()) {
    edge_snapshot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_edge_snapshot_id(),
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_chunk()) {
    chunk_ = new ::bosdyn::api::DataChunk(*from.chunk_);
  } else {
    chunk_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.graph_nav.DownloadEdgeSnapshotResponse)
}

void DownloadEdgeSnapshotResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DownloadEdgeSnapshotResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base);
  edge_snapshot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&header_)) + sizeof(status_));
}

DownloadEdgeSnapshotResponse::~DownloadEdgeSnapshotResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.graph_nav.DownloadEdgeSnapshotResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DownloadEdgeSnapshotResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  edge_snapshot_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete chunk_;
}

void DownloadEdgeSnapshotResponse::ArenaDtor(void* object) {
  DownloadEdgeSnapshotResponse* _this = reinterpret_cast< DownloadEdgeSnapshotResponse* >(object);
  (void)_this;
}
void DownloadEdgeSnapshotResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DownloadEdgeSnapshotResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DownloadEdgeSnapshotResponse& DownloadEdgeSnapshotResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DownloadEdgeSnapshotResponse_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base);
  return *internal_default_instance();
}


void DownloadEdgeSnapshotResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.graph_nav.DownloadEdgeSnapshotResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  edge_snapshot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && chunk_ != nullptr) {
    delete chunk_;
  }
  chunk_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DownloadEdgeSnapshotResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.graph_nav.DownloadEdgeSnapshotResponse.Status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse_Status>(val));
        } else goto handle_unusual;
        continue;
      // string edge_snapshot_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_edge_snapshot_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.graph_nav.DownloadEdgeSnapshotResponse.edge_snapshot_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.DataChunk chunk = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_chunk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DownloadEdgeSnapshotResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.graph_nav.DownloadEdgeSnapshotResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.graph_nav.DownloadEdgeSnapshotResponse.Status status = 2;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // string edge_snapshot_id = 4;
  if (this->edge_snapshot_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_edge_snapshot_id().data(), static_cast<int>(this->_internal_edge_snapshot_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.graph_nav.DownloadEdgeSnapshotResponse.edge_snapshot_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_edge_snapshot_id(), target);
  }

  // .bosdyn.api.DataChunk chunk = 5;
  if (this->has_chunk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::chunk(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.graph_nav.DownloadEdgeSnapshotResponse)
  return target;
}

size_t DownloadEdgeSnapshotResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.graph_nav.DownloadEdgeSnapshotResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string edge_snapshot_id = 4;
  if (this->edge_snapshot_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_edge_snapshot_id());
  }

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.DataChunk chunk = 5;
  if (this->has_chunk()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *chunk_);
  }

  // .bosdyn.api.graph_nav.DownloadEdgeSnapshotResponse.Status status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DownloadEdgeSnapshotResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.graph_nav.DownloadEdgeSnapshotResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DownloadEdgeSnapshotResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DownloadEdgeSnapshotResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.graph_nav.DownloadEdgeSnapshotResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.graph_nav.DownloadEdgeSnapshotResponse)
    MergeFrom(*source);
  }
}

void DownloadEdgeSnapshotResponse::MergeFrom(const DownloadEdgeSnapshotResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.graph_nav.DownloadEdgeSnapshotResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.edge_snapshot_id().size() > 0) {
    _internal_set_edge_snapshot_id(from._internal_edge_snapshot_id());
  }
  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.has_chunk()) {
    _internal_mutable_chunk()->::bosdyn::api::DataChunk::MergeFrom(from._internal_chunk());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void DownloadEdgeSnapshotResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.graph_nav.DownloadEdgeSnapshotResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownloadEdgeSnapshotResponse::CopyFrom(const DownloadEdgeSnapshotResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.graph_nav.DownloadEdgeSnapshotResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadEdgeSnapshotResponse::IsInitialized() const {
  return true;
}

void DownloadEdgeSnapshotResponse::InternalSwap(DownloadEdgeSnapshotResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  edge_snapshot_id_.Swap(&other->edge_snapshot_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DownloadEdgeSnapshotResponse, status_)
      + sizeof(DownloadEdgeSnapshotResponse::status_)
      - PROTOBUF_FIELD_OFFSET(DownloadEdgeSnapshotResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DownloadEdgeSnapshotResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace graph_nav
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bosdyn::api::graph_nav::SetLocalizationRequest* Arena::CreateMaybeMessage< ::bosdyn::api::graph_nav::SetLocalizationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::graph_nav::SetLocalizationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::graph_nav::SetLocalizationResponse_SuspectedAmbiguity* Arena::CreateMaybeMessage< ::bosdyn::api::graph_nav::SetLocalizationResponse_SuspectedAmbiguity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::graph_nav::SetLocalizationResponse_SuspectedAmbiguity >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::graph_nav::SetLocalizationResponse* Arena::CreateMaybeMessage< ::bosdyn::api::graph_nav::SetLocalizationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::graph_nav::SetLocalizationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::graph_nav::RouteGenParams* Arena::CreateMaybeMessage< ::bosdyn::api::graph_nav::RouteGenParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::graph_nav::RouteGenParams >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::graph_nav::TravelParams* Arena::CreateMaybeMessage< ::bosdyn::api::graph_nav::TravelParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::graph_nav::TravelParams >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::graph_nav::NavigateToRequest* Arena::CreateMaybeMessage< ::bosdyn::api::graph_nav::NavigateToRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::graph_nav::NavigateToRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::graph_nav::NavigateToResponse* Arena::CreateMaybeMessage< ::bosdyn::api::graph_nav::NavigateToResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::graph_nav::NavigateToResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::graph_nav::NavigateRouteRequest* Arena::CreateMaybeMessage< ::bosdyn::api::graph_nav::NavigateRouteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::graph_nav::NavigateRouteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::graph_nav::NavigateRouteResponse* Arena::CreateMaybeMessage< ::bosdyn::api::graph_nav::NavigateRouteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::graph_nav::NavigateRouteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::graph_nav::NavigationFeedbackRequest* Arena::CreateMaybeMessage< ::bosdyn::api::graph_nav::NavigationFeedbackRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::graph_nav::NavigationFeedbackRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::graph_nav::NavigationFeedbackResponse* Arena::CreateMaybeMessage< ::bosdyn::api::graph_nav::NavigationFeedbackResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::graph_nav::NavigationFeedbackResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::graph_nav::GetLocalizationStateRequest* Arena::CreateMaybeMessage< ::bosdyn::api::graph_nav::GetLocalizationStateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::graph_nav::GetLocalizationStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::graph_nav::RemotePointCloudStatus* Arena::CreateMaybeMessage< ::bosdyn::api::graph_nav::RemotePointCloudStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::graph_nav::RemotePointCloudStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::graph_nav::LostDetectorState* Arena::CreateMaybeMessage< ::bosdyn::api::graph_nav::LostDetectorState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::graph_nav::LostDetectorState >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::graph_nav::GetLocalizationStateResponse* Arena::CreateMaybeMessage< ::bosdyn::api::graph_nav::GetLocalizationStateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::graph_nav::GetLocalizationStateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::graph_nav::ClearGraphRequest* Arena::CreateMaybeMessage< ::bosdyn::api::graph_nav::ClearGraphRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::graph_nav::ClearGraphRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::graph_nav::ClearGraphResponse* Arena::CreateMaybeMessage< ::bosdyn::api::graph_nav::ClearGraphResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::graph_nav::ClearGraphResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::graph_nav::UploadGraphRequest* Arena::CreateMaybeMessage< ::bosdyn::api::graph_nav::UploadGraphRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::graph_nav::UploadGraphRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::graph_nav::UploadGraphResponse* Arena::CreateMaybeMessage< ::bosdyn::api::graph_nav::UploadGraphResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::graph_nav::UploadGraphResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::graph_nav::DownloadGraphRequest* Arena::CreateMaybeMessage< ::bosdyn::api::graph_nav::DownloadGraphRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::graph_nav::DownloadGraphRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::graph_nav::DownloadGraphResponse* Arena::CreateMaybeMessage< ::bosdyn::api::graph_nav::DownloadGraphResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::graph_nav::DownloadGraphResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::graph_nav::UploadWaypointSnapshotRequest* Arena::CreateMaybeMessage< ::bosdyn::api::graph_nav::UploadWaypointSnapshotRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::graph_nav::UploadWaypointSnapshotRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::graph_nav::UploadWaypointSnapshotResponse* Arena::CreateMaybeMessage< ::bosdyn::api::graph_nav::UploadWaypointSnapshotResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::graph_nav::UploadWaypointSnapshotResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::graph_nav::UploadEdgeSnapshotRequest* Arena::CreateMaybeMessage< ::bosdyn::api::graph_nav::UploadEdgeSnapshotRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::graph_nav::UploadEdgeSnapshotRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::graph_nav::UploadEdgeSnapshotResponse* Arena::CreateMaybeMessage< ::bosdyn::api::graph_nav::UploadEdgeSnapshotResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::graph_nav::UploadEdgeSnapshotResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::graph_nav::DownloadWaypointSnapshotRequest* Arena::CreateMaybeMessage< ::bosdyn::api::graph_nav::DownloadWaypointSnapshotRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::graph_nav::DownloadWaypointSnapshotRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse* Arena::CreateMaybeMessage< ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::graph_nav::DownloadWaypointSnapshotResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::graph_nav::DownloadEdgeSnapshotRequest* Arena::CreateMaybeMessage< ::bosdyn::api::graph_nav::DownloadEdgeSnapshotRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::graph_nav::DownloadEdgeSnapshotRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse* Arena::CreateMaybeMessage< ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::graph_nav::DownloadEdgeSnapshotResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
