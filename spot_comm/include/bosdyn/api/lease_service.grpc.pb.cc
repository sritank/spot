// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bosdyn/api/lease_service.proto

#include "bosdyn/api/lease_service.pb.h"
#include "bosdyn/api/lease_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace bosdyn {
namespace api {

static const char* LeaseService_method_names[] = {
  "/bosdyn.api.LeaseService/AcquireLease",
  "/bosdyn.api.LeaseService/TakeLease",
  "/bosdyn.api.LeaseService/ReturnLease",
  "/bosdyn.api.LeaseService/ListLeases",
  "/bosdyn.api.LeaseService/RetainLease",
};

std::unique_ptr< LeaseService::Stub> LeaseService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< LeaseService::Stub> stub(new LeaseService::Stub(channel));
  return stub;
}

LeaseService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_AcquireLease_(LeaseService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TakeLease_(LeaseService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReturnLease_(LeaseService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListLeases_(LeaseService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RetainLease_(LeaseService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status LeaseService::Stub::AcquireLease(::grpc::ClientContext* context, const ::bosdyn::api::AcquireLeaseRequest& request, ::bosdyn::api::AcquireLeaseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AcquireLease_, context, request, response);
}

void LeaseService::Stub::experimental_async::AcquireLease(::grpc::ClientContext* context, const ::bosdyn::api::AcquireLeaseRequest* request, ::bosdyn::api::AcquireLeaseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AcquireLease_, context, request, response, std::move(f));
}

void LeaseService::Stub::experimental_async::AcquireLease(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::AcquireLeaseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AcquireLease_, context, request, response, std::move(f));
}

void LeaseService::Stub::experimental_async::AcquireLease(::grpc::ClientContext* context, const ::bosdyn::api::AcquireLeaseRequest* request, ::bosdyn::api::AcquireLeaseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AcquireLease_, context, request, response, reactor);
}

void LeaseService::Stub::experimental_async::AcquireLease(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::AcquireLeaseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AcquireLease_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::AcquireLeaseResponse>* LeaseService::Stub::AsyncAcquireLeaseRaw(::grpc::ClientContext* context, const ::bosdyn::api::AcquireLeaseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::AcquireLeaseResponse>::Create(channel_.get(), cq, rpcmethod_AcquireLease_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::AcquireLeaseResponse>* LeaseService::Stub::PrepareAsyncAcquireLeaseRaw(::grpc::ClientContext* context, const ::bosdyn::api::AcquireLeaseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::AcquireLeaseResponse>::Create(channel_.get(), cq, rpcmethod_AcquireLease_, context, request, false);
}

::grpc::Status LeaseService::Stub::TakeLease(::grpc::ClientContext* context, const ::bosdyn::api::TakeLeaseRequest& request, ::bosdyn::api::TakeLeaseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_TakeLease_, context, request, response);
}

void LeaseService::Stub::experimental_async::TakeLease(::grpc::ClientContext* context, const ::bosdyn::api::TakeLeaseRequest* request, ::bosdyn::api::TakeLeaseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_TakeLease_, context, request, response, std::move(f));
}

void LeaseService::Stub::experimental_async::TakeLease(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::TakeLeaseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_TakeLease_, context, request, response, std::move(f));
}

void LeaseService::Stub::experimental_async::TakeLease(::grpc::ClientContext* context, const ::bosdyn::api::TakeLeaseRequest* request, ::bosdyn::api::TakeLeaseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_TakeLease_, context, request, response, reactor);
}

void LeaseService::Stub::experimental_async::TakeLease(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::TakeLeaseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_TakeLease_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::TakeLeaseResponse>* LeaseService::Stub::AsyncTakeLeaseRaw(::grpc::ClientContext* context, const ::bosdyn::api::TakeLeaseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::TakeLeaseResponse>::Create(channel_.get(), cq, rpcmethod_TakeLease_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::TakeLeaseResponse>* LeaseService::Stub::PrepareAsyncTakeLeaseRaw(::grpc::ClientContext* context, const ::bosdyn::api::TakeLeaseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::TakeLeaseResponse>::Create(channel_.get(), cq, rpcmethod_TakeLease_, context, request, false);
}

::grpc::Status LeaseService::Stub::ReturnLease(::grpc::ClientContext* context, const ::bosdyn::api::ReturnLeaseRequest& request, ::bosdyn::api::ReturnLeaseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ReturnLease_, context, request, response);
}

void LeaseService::Stub::experimental_async::ReturnLease(::grpc::ClientContext* context, const ::bosdyn::api::ReturnLeaseRequest* request, ::bosdyn::api::ReturnLeaseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ReturnLease_, context, request, response, std::move(f));
}

void LeaseService::Stub::experimental_async::ReturnLease(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::ReturnLeaseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ReturnLease_, context, request, response, std::move(f));
}

void LeaseService::Stub::experimental_async::ReturnLease(::grpc::ClientContext* context, const ::bosdyn::api::ReturnLeaseRequest* request, ::bosdyn::api::ReturnLeaseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ReturnLease_, context, request, response, reactor);
}

void LeaseService::Stub::experimental_async::ReturnLease(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::ReturnLeaseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ReturnLease_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::ReturnLeaseResponse>* LeaseService::Stub::AsyncReturnLeaseRaw(::grpc::ClientContext* context, const ::bosdyn::api::ReturnLeaseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::ReturnLeaseResponse>::Create(channel_.get(), cq, rpcmethod_ReturnLease_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::ReturnLeaseResponse>* LeaseService::Stub::PrepareAsyncReturnLeaseRaw(::grpc::ClientContext* context, const ::bosdyn::api::ReturnLeaseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::ReturnLeaseResponse>::Create(channel_.get(), cq, rpcmethod_ReturnLease_, context, request, false);
}

::grpc::Status LeaseService::Stub::ListLeases(::grpc::ClientContext* context, const ::bosdyn::api::ListLeasesRequest& request, ::bosdyn::api::ListLeasesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListLeases_, context, request, response);
}

void LeaseService::Stub::experimental_async::ListLeases(::grpc::ClientContext* context, const ::bosdyn::api::ListLeasesRequest* request, ::bosdyn::api::ListLeasesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListLeases_, context, request, response, std::move(f));
}

void LeaseService::Stub::experimental_async::ListLeases(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::ListLeasesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListLeases_, context, request, response, std::move(f));
}

void LeaseService::Stub::experimental_async::ListLeases(::grpc::ClientContext* context, const ::bosdyn::api::ListLeasesRequest* request, ::bosdyn::api::ListLeasesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListLeases_, context, request, response, reactor);
}

void LeaseService::Stub::experimental_async::ListLeases(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::ListLeasesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListLeases_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::ListLeasesResponse>* LeaseService::Stub::AsyncListLeasesRaw(::grpc::ClientContext* context, const ::bosdyn::api::ListLeasesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::ListLeasesResponse>::Create(channel_.get(), cq, rpcmethod_ListLeases_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::ListLeasesResponse>* LeaseService::Stub::PrepareAsyncListLeasesRaw(::grpc::ClientContext* context, const ::bosdyn::api::ListLeasesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::ListLeasesResponse>::Create(channel_.get(), cq, rpcmethod_ListLeases_, context, request, false);
}

::grpc::Status LeaseService::Stub::RetainLease(::grpc::ClientContext* context, const ::bosdyn::api::RetainLeaseRequest& request, ::bosdyn::api::RetainLeaseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RetainLease_, context, request, response);
}

void LeaseService::Stub::experimental_async::RetainLease(::grpc::ClientContext* context, const ::bosdyn::api::RetainLeaseRequest* request, ::bosdyn::api::RetainLeaseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RetainLease_, context, request, response, std::move(f));
}

void LeaseService::Stub::experimental_async::RetainLease(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::RetainLeaseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RetainLease_, context, request, response, std::move(f));
}

void LeaseService::Stub::experimental_async::RetainLease(::grpc::ClientContext* context, const ::bosdyn::api::RetainLeaseRequest* request, ::bosdyn::api::RetainLeaseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RetainLease_, context, request, response, reactor);
}

void LeaseService::Stub::experimental_async::RetainLease(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::RetainLeaseResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RetainLease_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::RetainLeaseResponse>* LeaseService::Stub::AsyncRetainLeaseRaw(::grpc::ClientContext* context, const ::bosdyn::api::RetainLeaseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::RetainLeaseResponse>::Create(channel_.get(), cq, rpcmethod_RetainLease_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::RetainLeaseResponse>* LeaseService::Stub::PrepareAsyncRetainLeaseRaw(::grpc::ClientContext* context, const ::bosdyn::api::RetainLeaseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::RetainLeaseResponse>::Create(channel_.get(), cq, rpcmethod_RetainLease_, context, request, false);
}

LeaseService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LeaseService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LeaseService::Service, ::bosdyn::api::AcquireLeaseRequest, ::bosdyn::api::AcquireLeaseResponse>(
          [](LeaseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::AcquireLeaseRequest* req,
             ::bosdyn::api::AcquireLeaseResponse* resp) {
               return service->AcquireLease(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LeaseService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LeaseService::Service, ::bosdyn::api::TakeLeaseRequest, ::bosdyn::api::TakeLeaseResponse>(
          [](LeaseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::TakeLeaseRequest* req,
             ::bosdyn::api::TakeLeaseResponse* resp) {
               return service->TakeLease(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LeaseService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LeaseService::Service, ::bosdyn::api::ReturnLeaseRequest, ::bosdyn::api::ReturnLeaseResponse>(
          [](LeaseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::ReturnLeaseRequest* req,
             ::bosdyn::api::ReturnLeaseResponse* resp) {
               return service->ReturnLease(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LeaseService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LeaseService::Service, ::bosdyn::api::ListLeasesRequest, ::bosdyn::api::ListLeasesResponse>(
          [](LeaseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::ListLeasesRequest* req,
             ::bosdyn::api::ListLeasesResponse* resp) {
               return service->ListLeases(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LeaseService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LeaseService::Service, ::bosdyn::api::RetainLeaseRequest, ::bosdyn::api::RetainLeaseResponse>(
          [](LeaseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::RetainLeaseRequest* req,
             ::bosdyn::api::RetainLeaseResponse* resp) {
               return service->RetainLease(ctx, req, resp);
             }, this)));
}

LeaseService::Service::~Service() {
}

::grpc::Status LeaseService::Service::AcquireLease(::grpc::ServerContext* context, const ::bosdyn::api::AcquireLeaseRequest* request, ::bosdyn::api::AcquireLeaseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LeaseService::Service::TakeLease(::grpc::ServerContext* context, const ::bosdyn::api::TakeLeaseRequest* request, ::bosdyn::api::TakeLeaseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LeaseService::Service::ReturnLease(::grpc::ServerContext* context, const ::bosdyn::api::ReturnLeaseRequest* request, ::bosdyn::api::ReturnLeaseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LeaseService::Service::ListLeases(::grpc::ServerContext* context, const ::bosdyn::api::ListLeasesRequest* request, ::bosdyn::api::ListLeasesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LeaseService::Service::RetainLease(::grpc::ServerContext* context, const ::bosdyn::api::RetainLeaseRequest* request, ::bosdyn::api::RetainLeaseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace bosdyn
}  // namespace api

