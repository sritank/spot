// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bosdyn/api/image_service.proto

#include "bosdyn/api/image_service.pb.h"
#include "bosdyn/api/image_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace bosdyn {
namespace api {

static const char* ImageService_method_names[] = {
  "/bosdyn.api.ImageService/ListImageSources",
  "/bosdyn.api.ImageService/GetImage",
};

std::unique_ptr< ImageService::Stub> ImageService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ImageService::Stub> stub(new ImageService::Stub(channel));
  return stub;
}

ImageService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ListImageSources_(ImageService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetImage_(ImageService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ImageService::Stub::ListImageSources(::grpc::ClientContext* context, const ::bosdyn::api::ListImageSourcesRequest& request, ::bosdyn::api::ListImageSourcesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListImageSources_, context, request, response);
}

void ImageService::Stub::experimental_async::ListImageSources(::grpc::ClientContext* context, const ::bosdyn::api::ListImageSourcesRequest* request, ::bosdyn::api::ListImageSourcesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListImageSources_, context, request, response, std::move(f));
}

void ImageService::Stub::experimental_async::ListImageSources(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::ListImageSourcesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListImageSources_, context, request, response, std::move(f));
}

void ImageService::Stub::experimental_async::ListImageSources(::grpc::ClientContext* context, const ::bosdyn::api::ListImageSourcesRequest* request, ::bosdyn::api::ListImageSourcesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListImageSources_, context, request, response, reactor);
}

void ImageService::Stub::experimental_async::ListImageSources(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::ListImageSourcesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListImageSources_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::ListImageSourcesResponse>* ImageService::Stub::AsyncListImageSourcesRaw(::grpc::ClientContext* context, const ::bosdyn::api::ListImageSourcesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::ListImageSourcesResponse>::Create(channel_.get(), cq, rpcmethod_ListImageSources_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::ListImageSourcesResponse>* ImageService::Stub::PrepareAsyncListImageSourcesRaw(::grpc::ClientContext* context, const ::bosdyn::api::ListImageSourcesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::ListImageSourcesResponse>::Create(channel_.get(), cq, rpcmethod_ListImageSources_, context, request, false);
}

::grpc::Status ImageService::Stub::GetImage(::grpc::ClientContext* context, const ::bosdyn::api::GetImageRequest& request, ::bosdyn::api::GetImageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetImage_, context, request, response);
}

void ImageService::Stub::experimental_async::GetImage(::grpc::ClientContext* context, const ::bosdyn::api::GetImageRequest* request, ::bosdyn::api::GetImageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetImage_, context, request, response, std::move(f));
}

void ImageService::Stub::experimental_async::GetImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::GetImageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetImage_, context, request, response, std::move(f));
}

void ImageService::Stub::experimental_async::GetImage(::grpc::ClientContext* context, const ::bosdyn::api::GetImageRequest* request, ::bosdyn::api::GetImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetImage_, context, request, response, reactor);
}

void ImageService::Stub::experimental_async::GetImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::GetImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetImage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::GetImageResponse>* ImageService::Stub::AsyncGetImageRaw(::grpc::ClientContext* context, const ::bosdyn::api::GetImageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::GetImageResponse>::Create(channel_.get(), cq, rpcmethod_GetImage_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::GetImageResponse>* ImageService::Stub::PrepareAsyncGetImageRaw(::grpc::ClientContext* context, const ::bosdyn::api::GetImageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::GetImageResponse>::Create(channel_.get(), cq, rpcmethod_GetImage_, context, request, false);
}

ImageService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ImageService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ImageService::Service, ::bosdyn::api::ListImageSourcesRequest, ::bosdyn::api::ListImageSourcesResponse>(
          [](ImageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::ListImageSourcesRequest* req,
             ::bosdyn::api::ListImageSourcesResponse* resp) {
               return service->ListImageSources(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ImageService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ImageService::Service, ::bosdyn::api::GetImageRequest, ::bosdyn::api::GetImageResponse>(
          [](ImageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::GetImageRequest* req,
             ::bosdyn::api::GetImageResponse* resp) {
               return service->GetImage(ctx, req, resp);
             }, this)));
}

ImageService::Service::~Service() {
}

::grpc::Status ImageService::Service::ListImageSources(::grpc::ServerContext* context, const ::bosdyn::api::ListImageSourcesRequest* request, ::bosdyn::api::ListImageSourcesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ImageService::Service::GetImage(::grpc::ServerContext* context, const ::bosdyn::api::GetImageRequest* request, ::bosdyn::api::GetImageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace bosdyn
}  // namespace api

