// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/mission/mission.proto

#include "bosdyn/api/mission/mission.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2flease_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Lease_bosdyn_2fapi_2flease_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2flease_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LeaseUseResult_bosdyn_2fapi_2flease_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SE2VelocityLimit_bosdyn_2fapi_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fmission_2fmission_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FailedNode_bosdyn_2fapi_2fmission_2fmission_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fmission_2fmission_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MissionInfo_bosdyn_2fapi_2fmission_2fmission_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fmission_2fnodes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Node_bosdyn_2fapi_2fmission_2fnodes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fmission_2fmission_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NodeInfo_bosdyn_2fapi_2fmission_2fmission_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fmission_2fmission_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlaySettings_bosdyn_2fapi_2fmission_2fmission_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fmission_2fnodes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Prompt_Option_bosdyn_2fapi_2fmission_2fnodes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fmission_2fmission_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Question_bosdyn_2fapi_2fmission_2fmission_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fmission_2fmission_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_State_bosdyn_2fapi_2fmission_2fmission_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fmission_2fmission_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_State_AnsweredQuestion_bosdyn_2fapi_2fmission_2fmission_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fmission_2fmission_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_State_NodeStatesAtTick_bosdyn_2fapi_2fmission_2fmission_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fmission_2fmission_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_State_NodeStatesAtTick_NodeState_bosdyn_2fapi_2fmission_2fmission_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fmission_2futil_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserData_bosdyn_2fapi_2fmission_2futil_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Int64Value_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace bosdyn {
namespace api {
namespace mission {
class GetStateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetStateRequest> _instance;
  ::PROTOBUF_NAMESPACE_ID::int64 history_lower_tick_bound_;
  ::PROTOBUF_NAMESPACE_ID::int64 history_past_ticks_;
} _GetStateRequest_default_instance_;
class GetStateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetStateResponse> _instance;
} _GetStateResponse_default_instance_;
class State_AnsweredQuestionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<State_AnsweredQuestion> _instance;
} _State_AnsweredQuestion_default_instance_;
class State_NodeStatesAtTick_NodeStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<State_NodeStatesAtTick_NodeState> _instance;
} _State_NodeStatesAtTick_NodeState_default_instance_;
class State_NodeStatesAtTickDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<State_NodeStatesAtTick> _instance;
} _State_NodeStatesAtTick_default_instance_;
class StateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<State> _instance;
} _State_default_instance_;
class QuestionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Question> _instance;
} _Question_default_instance_;
class AnswerQuestionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnswerQuestionRequest> _instance;
} _AnswerQuestionRequest_default_instance_;
class AnswerQuestionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AnswerQuestionResponse> _instance;
} _AnswerQuestionResponse_default_instance_;
class MissionInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MissionInfo> _instance;
} _MissionInfo_default_instance_;
class NodeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeInfo> _instance;
} _NodeInfo_default_instance_;
class FailedNodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FailedNode> _instance;
} _FailedNode_default_instance_;
class PlayMissionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayMissionRequest> _instance;
} _PlayMissionRequest_default_instance_;
class PlaySettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlaySettings> _instance;
} _PlaySettings_default_instance_;
class PlayMissionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlayMissionResponse> _instance;
} _PlayMissionResponse_default_instance_;
class RestartMissionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RestartMissionRequest> _instance;
} _RestartMissionRequest_default_instance_;
class RestartMissionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RestartMissionResponse> _instance;
} _RestartMissionResponse_default_instance_;
class LoadMissionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadMissionRequest> _instance;
} _LoadMissionRequest_default_instance_;
class LoadMissionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadMissionResponse> _instance;
} _LoadMissionResponse_default_instance_;
class GetInfoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetInfoRequest> _instance;
} _GetInfoRequest_default_instance_;
class GetInfoResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetInfoResponse> _instance;
} _GetInfoResponse_default_instance_;
class PauseMissionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PauseMissionRequest> _instance;
} _PauseMissionRequest_default_instance_;
class PauseMissionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PauseMissionResponse> _instance;
} _PauseMissionResponse_default_instance_;
class GetMissionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetMissionRequest> _instance;
} _GetMissionRequest_default_instance_;
class GetMissionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetMissionResponse> _instance;
} _GetMissionResponse_default_instance_;
}  // namespace mission
}  // namespace api
}  // namespace bosdyn
static void InitDefaultsscc_info_AnswerQuestionRequest_bosdyn_2fapi_2fmission_2fmission_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::mission::_AnswerQuestionRequest_default_instance_;
    new (ptr) ::bosdyn::api::mission::AnswerQuestionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::mission::AnswerQuestionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AnswerQuestionRequest_bosdyn_2fapi_2fmission_2fmission_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AnswerQuestionRequest_bosdyn_2fapi_2fmission_2fmission_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_AnswerQuestionResponse_bosdyn_2fapi_2fmission_2fmission_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::mission::_AnswerQuestionResponse_default_instance_;
    new (ptr) ::bosdyn::api::mission::AnswerQuestionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::mission::AnswerQuestionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AnswerQuestionResponse_bosdyn_2fapi_2fmission_2fmission_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AnswerQuestionResponse_bosdyn_2fapi_2fmission_2fmission_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_FailedNode_bosdyn_2fapi_2fmission_2fmission_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::mission::_FailedNode_default_instance_;
    new (ptr) ::bosdyn::api::mission::FailedNode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::mission::FailedNode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FailedNode_bosdyn_2fapi_2fmission_2fmission_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FailedNode_bosdyn_2fapi_2fmission_2fmission_2eproto}, {}};

static void InitDefaultsscc_info_GetInfoRequest_bosdyn_2fapi_2fmission_2fmission_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::mission::_GetInfoRequest_default_instance_;
    new (ptr) ::bosdyn::api::mission::GetInfoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::mission::GetInfoRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetInfoRequest_bosdyn_2fapi_2fmission_2fmission_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetInfoRequest_bosdyn_2fapi_2fmission_2fmission_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_GetInfoResponse_bosdyn_2fapi_2fmission_2fmission_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::mission::_GetInfoResponse_default_instance_;
    new (ptr) ::bosdyn::api::mission::GetInfoResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::mission::GetInfoResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetInfoResponse_bosdyn_2fapi_2fmission_2fmission_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetInfoResponse_bosdyn_2fapi_2fmission_2fmission_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_MissionInfo_bosdyn_2fapi_2fmission_2fmission_2eproto.base,}};

static void InitDefaultsscc_info_GetMissionRequest_bosdyn_2fapi_2fmission_2fmission_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::mission::_GetMissionRequest_default_instance_;
    new (ptr) ::bosdyn::api::mission::GetMissionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::mission::GetMissionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetMissionRequest_bosdyn_2fapi_2fmission_2fmission_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetMissionRequest_bosdyn_2fapi_2fmission_2fmission_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_GetMissionResponse_bosdyn_2fapi_2fmission_2fmission_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::mission::_GetMissionResponse_default_instance_;
    new (ptr) ::bosdyn::api::mission::GetMissionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::mission::GetMissionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetMissionResponse_bosdyn_2fapi_2fmission_2fmission_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetMissionResponse_bosdyn_2fapi_2fmission_2fmission_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_Node_bosdyn_2fapi_2fmission_2fnodes_2eproto.base,}};

static void InitDefaultsscc_info_GetStateRequest_bosdyn_2fapi_2fmission_2fmission_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::mission::_GetStateRequest_default_instance_;
    new (ptr) ::bosdyn::api::mission::GetStateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::mission::GetStateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetStateRequest_bosdyn_2fapi_2fmission_2fmission_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetStateRequest_bosdyn_2fapi_2fmission_2fmission_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_Int64Value_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_GetStateResponse_bosdyn_2fapi_2fmission_2fmission_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::mission::_GetStateResponse_default_instance_;
    new (ptr) ::bosdyn::api::mission::GetStateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::mission::GetStateResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetStateResponse_bosdyn_2fapi_2fmission_2fmission_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetStateResponse_bosdyn_2fapi_2fmission_2fmission_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_State_bosdyn_2fapi_2fmission_2fmission_2eproto.base,}};

static void InitDefaultsscc_info_LoadMissionRequest_bosdyn_2fapi_2fmission_2fmission_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::mission::_LoadMissionRequest_default_instance_;
    new (ptr) ::bosdyn::api::mission::LoadMissionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::mission::LoadMissionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_LoadMissionRequest_bosdyn_2fapi_2fmission_2fmission_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_LoadMissionRequest_bosdyn_2fapi_2fmission_2fmission_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_Node_bosdyn_2fapi_2fmission_2fnodes_2eproto.base,
      &scc_info_Lease_bosdyn_2fapi_2flease_2eproto.base,}};

static void InitDefaultsscc_info_LoadMissionResponse_bosdyn_2fapi_2fmission_2fmission_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::mission::_LoadMissionResponse_default_instance_;
    new (ptr) ::bosdyn::api::mission::LoadMissionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::mission::LoadMissionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_LoadMissionResponse_bosdyn_2fapi_2fmission_2fmission_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_LoadMissionResponse_bosdyn_2fapi_2fmission_2fmission_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_LeaseUseResult_bosdyn_2fapi_2flease_2eproto.base,
      &scc_info_MissionInfo_bosdyn_2fapi_2fmission_2fmission_2eproto.base,
      &scc_info_FailedNode_bosdyn_2fapi_2fmission_2fmission_2eproto.base,}};

static void InitDefaultsscc_info_MissionInfo_bosdyn_2fapi_2fmission_2fmission_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::mission::_MissionInfo_default_instance_;
    new (ptr) ::bosdyn::api::mission::MissionInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::mission::MissionInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MissionInfo_bosdyn_2fapi_2fmission_2fmission_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MissionInfo_bosdyn_2fapi_2fmission_2fmission_2eproto}, {
      &scc_info_NodeInfo_bosdyn_2fapi_2fmission_2fmission_2eproto.base,}};

static void InitDefaultsscc_info_NodeInfo_bosdyn_2fapi_2fmission_2fmission_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::mission::_NodeInfo_default_instance_;
    new (ptr) ::bosdyn::api::mission::NodeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::mission::NodeInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NodeInfo_bosdyn_2fapi_2fmission_2fmission_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NodeInfo_bosdyn_2fapi_2fmission_2fmission_2eproto}, {
      &scc_info_UserData_bosdyn_2fapi_2fmission_2futil_2eproto.base,}};

static void InitDefaultsscc_info_PauseMissionRequest_bosdyn_2fapi_2fmission_2fmission_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::mission::_PauseMissionRequest_default_instance_;
    new (ptr) ::bosdyn::api::mission::PauseMissionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::mission::PauseMissionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PauseMissionRequest_bosdyn_2fapi_2fmission_2fmission_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PauseMissionRequest_bosdyn_2fapi_2fmission_2fmission_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_Lease_bosdyn_2fapi_2flease_2eproto.base,}};

static void InitDefaultsscc_info_PauseMissionResponse_bosdyn_2fapi_2fmission_2fmission_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::mission::_PauseMissionResponse_default_instance_;
    new (ptr) ::bosdyn::api::mission::PauseMissionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::mission::PauseMissionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PauseMissionResponse_bosdyn_2fapi_2fmission_2fmission_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PauseMissionResponse_bosdyn_2fapi_2fmission_2fmission_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_LeaseUseResult_bosdyn_2fapi_2flease_2eproto.base,}};

static void InitDefaultsscc_info_PlayMissionRequest_bosdyn_2fapi_2fmission_2fmission_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::mission::_PlayMissionRequest_default_instance_;
    new (ptr) ::bosdyn::api::mission::PlayMissionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::mission::PlayMissionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_PlayMissionRequest_bosdyn_2fapi_2fmission_2fmission_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_PlayMissionRequest_bosdyn_2fapi_2fmission_2fmission_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_Lease_bosdyn_2fapi_2flease_2eproto.base,
      &scc_info_PlaySettings_bosdyn_2fapi_2fmission_2fmission_2eproto.base,}};

static void InitDefaultsscc_info_PlayMissionResponse_bosdyn_2fapi_2fmission_2fmission_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::mission::_PlayMissionResponse_default_instance_;
    new (ptr) ::bosdyn::api::mission::PlayMissionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::mission::PlayMissionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PlayMissionResponse_bosdyn_2fapi_2fmission_2fmission_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PlayMissionResponse_bosdyn_2fapi_2fmission_2fmission_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_LeaseUseResult_bosdyn_2fapi_2flease_2eproto.base,}};

static void InitDefaultsscc_info_PlaySettings_bosdyn_2fapi_2fmission_2fmission_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::mission::_PlaySettings_default_instance_;
    new (ptr) ::bosdyn::api::mission::PlaySettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::mission::PlaySettings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlaySettings_bosdyn_2fapi_2fmission_2fmission_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PlaySettings_bosdyn_2fapi_2fmission_2fmission_2eproto}, {
      &scc_info_SE2VelocityLimit_bosdyn_2fapi_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_Question_bosdyn_2fapi_2fmission_2fmission_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::mission::_Question_default_instance_;
    new (ptr) ::bosdyn::api::mission::Question();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::mission::Question::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Question_bosdyn_2fapi_2fmission_2fmission_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Question_bosdyn_2fapi_2fmission_2fmission_2eproto}, {
      &scc_info_Prompt_Option_bosdyn_2fapi_2fmission_2fnodes_2eproto.base,}};

static void InitDefaultsscc_info_RestartMissionRequest_bosdyn_2fapi_2fmission_2fmission_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::mission::_RestartMissionRequest_default_instance_;
    new (ptr) ::bosdyn::api::mission::RestartMissionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::mission::RestartMissionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_RestartMissionRequest_bosdyn_2fapi_2fmission_2fmission_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_RestartMissionRequest_bosdyn_2fapi_2fmission_2fmission_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_Lease_bosdyn_2fapi_2flease_2eproto.base,
      &scc_info_PlaySettings_bosdyn_2fapi_2fmission_2fmission_2eproto.base,}};

static void InitDefaultsscc_info_RestartMissionResponse_bosdyn_2fapi_2fmission_2fmission_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::mission::_RestartMissionResponse_default_instance_;
    new (ptr) ::bosdyn::api::mission::RestartMissionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::mission::RestartMissionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RestartMissionResponse_bosdyn_2fapi_2fmission_2fmission_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_RestartMissionResponse_bosdyn_2fapi_2fmission_2fmission_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_LeaseUseResult_bosdyn_2fapi_2flease_2eproto.base,
      &scc_info_FailedNode_bosdyn_2fapi_2fmission_2fmission_2eproto.base,}};

static void InitDefaultsscc_info_State_bosdyn_2fapi_2fmission_2fmission_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::mission::_State_default_instance_;
    new (ptr) ::bosdyn::api::mission::State();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::mission::State::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_State_bosdyn_2fapi_2fmission_2fmission_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_State_bosdyn_2fapi_2fmission_2fmission_2eproto}, {
      &scc_info_Question_bosdyn_2fapi_2fmission_2fmission_2eproto.base,
      &scc_info_State_AnsweredQuestion_bosdyn_2fapi_2fmission_2fmission_2eproto.base,
      &scc_info_State_NodeStatesAtTick_bosdyn_2fapi_2fmission_2fmission_2eproto.base,}};

static void InitDefaultsscc_info_State_AnsweredQuestion_bosdyn_2fapi_2fmission_2fmission_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::mission::_State_AnsweredQuestion_default_instance_;
    new (ptr) ::bosdyn::api::mission::State_AnsweredQuestion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::mission::State_AnsweredQuestion::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_State_AnsweredQuestion_bosdyn_2fapi_2fmission_2fmission_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_State_AnsweredQuestion_bosdyn_2fapi_2fmission_2fmission_2eproto}, {
      &scc_info_Question_bosdyn_2fapi_2fmission_2fmission_2eproto.base,}};

static void InitDefaultsscc_info_State_NodeStatesAtTick_bosdyn_2fapi_2fmission_2fmission_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::mission::_State_NodeStatesAtTick_default_instance_;
    new (ptr) ::bosdyn::api::mission::State_NodeStatesAtTick();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::mission::State_NodeStatesAtTick::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_State_NodeStatesAtTick_bosdyn_2fapi_2fmission_2fmission_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_State_NodeStatesAtTick_bosdyn_2fapi_2fmission_2fmission_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_State_NodeStatesAtTick_NodeState_bosdyn_2fapi_2fmission_2fmission_2eproto.base,}};

static void InitDefaultsscc_info_State_NodeStatesAtTick_NodeState_bosdyn_2fapi_2fmission_2fmission_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::mission::_State_NodeStatesAtTick_NodeState_default_instance_;
    new (ptr) ::bosdyn::api::mission::State_NodeStatesAtTick_NodeState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::mission::State_NodeStatesAtTick_NodeState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_State_NodeStatesAtTick_NodeState_bosdyn_2fapi_2fmission_2fmission_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_State_NodeStatesAtTick_NodeState_bosdyn_2fapi_2fmission_2fmission_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bosdyn_2fapi_2fmission_2fmission_2eproto[25];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_bosdyn_2fapi_2fmission_2fmission_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bosdyn_2fapi_2fmission_2fmission_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bosdyn_2fapi_2fmission_2fmission_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::GetStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::GetStateRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::GetStateRequest, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::GetStateRequest, history_upper_tick_bound_),
  offsetof(::bosdyn::api::mission::GetStateRequestDefaultTypeInternal, history_lower_tick_bound_),
  offsetof(::bosdyn::api::mission::GetStateRequestDefaultTypeInternal, history_past_ticks_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::GetStateRequest, lower_bound_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::GetStateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::GetStateResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::GetStateResponse, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::State_AnsweredQuestion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::State_AnsweredQuestion, question_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::State_AnsweredQuestion, accepted_answer_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::State_NodeStatesAtTick_NodeState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::State_NodeStatesAtTick_NodeState, result_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::State_NodeStatesAtTick_NodeState, error_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::State_NodeStatesAtTick_NodeState, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::State_NodeStatesAtTick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::State_NodeStatesAtTick, tick_counter_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::State_NodeStatesAtTick, tick_start_timestamp_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::State_NodeStatesAtTick, node_states_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::State, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::State, questions_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::State, answered_questions_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::State, history_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::State, status_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::State, error_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::State, tick_counter_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::State, mission_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::Question, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::Question, id_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::Question, source_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::Question, text_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::Question, options_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::Question, for_autonomous_processing_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::AnswerQuestionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::AnswerQuestionRequest, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::AnswerQuestionRequest, question_id_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::AnswerQuestionRequest, code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::AnswerQuestionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::AnswerQuestionResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::AnswerQuestionResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::MissionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::MissionInfo, id_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::MissionInfo, root_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::NodeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::NodeInfo, id_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::NodeInfo, name_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::NodeInfo, user_data_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::NodeInfo, children_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::FailedNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::FailedNode, name_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::FailedNode, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::PlayMissionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::PlayMissionRequest, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::PlayMissionRequest, pause_time_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::PlayMissionRequest, leases_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::PlayMissionRequest, settings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::PlaySettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::PlaySettings, velocity_limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::PlayMissionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::PlayMissionResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::PlayMissionResponse, status_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::PlayMissionResponse, lease_use_results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::RestartMissionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::RestartMissionRequest, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::RestartMissionRequest, pause_time_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::RestartMissionRequest, leases_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::RestartMissionRequest, settings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::RestartMissionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::RestartMissionResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::RestartMissionResponse, status_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::RestartMissionResponse, lease_use_results_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::RestartMissionResponse, failed_nodes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::LoadMissionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::LoadMissionRequest, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::LoadMissionRequest, root_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::LoadMissionRequest, leases_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::LoadMissionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::LoadMissionResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::LoadMissionResponse, status_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::LoadMissionResponse, lease_use_results_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::LoadMissionResponse, mission_info_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::LoadMissionResponse, failed_nodes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::GetInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::GetInfoRequest, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::GetInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::GetInfoResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::GetInfoResponse, mission_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::PauseMissionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::PauseMissionRequest, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::PauseMissionRequest, lease_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::PauseMissionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::PauseMissionResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::PauseMissionResponse, status_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::PauseMissionResponse, lease_use_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::GetMissionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::GetMissionRequest, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::GetMissionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::GetMissionResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::GetMissionResponse, root_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::GetMissionResponse, id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::bosdyn::api::mission::GetStateRequest)},
  { 10, -1, sizeof(::bosdyn::api::mission::GetStateResponse)},
  { 17, -1, sizeof(::bosdyn::api::mission::State_AnsweredQuestion)},
  { 24, -1, sizeof(::bosdyn::api::mission::State_NodeStatesAtTick_NodeState)},
  { 32, -1, sizeof(::bosdyn::api::mission::State_NodeStatesAtTick)},
  { 40, -1, sizeof(::bosdyn::api::mission::State)},
  { 52, -1, sizeof(::bosdyn::api::mission::Question)},
  { 62, -1, sizeof(::bosdyn::api::mission::AnswerQuestionRequest)},
  { 70, -1, sizeof(::bosdyn::api::mission::AnswerQuestionResponse)},
  { 77, -1, sizeof(::bosdyn::api::mission::MissionInfo)},
  { 84, -1, sizeof(::bosdyn::api::mission::NodeInfo)},
  { 93, -1, sizeof(::bosdyn::api::mission::FailedNode)},
  { 100, -1, sizeof(::bosdyn::api::mission::PlayMissionRequest)},
  { 109, -1, sizeof(::bosdyn::api::mission::PlaySettings)},
  { 115, -1, sizeof(::bosdyn::api::mission::PlayMissionResponse)},
  { 123, -1, sizeof(::bosdyn::api::mission::RestartMissionRequest)},
  { 132, -1, sizeof(::bosdyn::api::mission::RestartMissionResponse)},
  { 141, -1, sizeof(::bosdyn::api::mission::LoadMissionRequest)},
  { 149, -1, sizeof(::bosdyn::api::mission::LoadMissionResponse)},
  { 159, -1, sizeof(::bosdyn::api::mission::GetInfoRequest)},
  { 165, -1, sizeof(::bosdyn::api::mission::GetInfoResponse)},
  { 172, -1, sizeof(::bosdyn::api::mission::PauseMissionRequest)},
  { 179, -1, sizeof(::bosdyn::api::mission::PauseMissionResponse)},
  { 187, -1, sizeof(::bosdyn::api::mission::GetMissionRequest)},
  { 193, -1, sizeof(::bosdyn::api::mission::GetMissionResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::mission::_GetStateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::mission::_GetStateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::mission::_State_AnsweredQuestion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::mission::_State_NodeStatesAtTick_NodeState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::mission::_State_NodeStatesAtTick_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::mission::_State_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::mission::_Question_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::mission::_AnswerQuestionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::mission::_AnswerQuestionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::mission::_MissionInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::mission::_NodeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::mission::_FailedNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::mission::_PlayMissionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::mission::_PlaySettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::mission::_PlayMissionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::mission::_RestartMissionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::mission::_RestartMissionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::mission::_LoadMissionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::mission::_LoadMissionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::mission::_GetInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::mission::_GetInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::mission::_PauseMissionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::mission::_PauseMissionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::mission::_GetMissionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::mission::_GetMissionResponse_default_instance_),
};

const char descriptor_table_protodef_bosdyn_2fapi_2fmission_2fmission_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n bosdyn/api/mission/mission.proto\022\022bosd"
  "yn.api.mission\032\031bosdyn/api/geometry.prot"
  "o\032\027bosdyn/api/header.proto\032\026bosdyn/api/l"
  "ease.proto\032\036bosdyn/api/mission/nodes.pro"
  "to\032\035bosdyn/api/mission/util.proto\032\037googl"
  "e/protobuf/timestamp.proto\032\036google/proto"
  "buf/wrappers.proto\"\314\001\n\017GetStateRequest\022)"
  "\n\006header\030\001 \001(\0132\031.bosdyn.api.RequestHeade"
  "r\022=\n\030history_upper_tick_bound\030\002 \001(\0132\033.go"
  "ogle.protobuf.Int64Value\022\"\n\030history_lowe"
  "r_tick_bound\030\003 \001(\003H\000\022\034\n\022history_past_tic"
  "ks\030\004 \001(\003H\000B\r\n\013lower_bound\"h\n\020GetStateRes"
  "ponse\022*\n\006header\030\001 \001(\0132\032.bosdyn.api.Respo"
  "nseHeader\022(\n\005state\030\002 \001(\0132\031.bosdyn.api.mi"
  "ssion.State\"\237\006\n\005State\022/\n\tquestions\030\001 \003(\013"
  "2\034.bosdyn.api.mission.Question\022F\n\022answer"
  "ed_questions\030\002 \003(\0132*.bosdyn.api.mission."
  "State.AnsweredQuestion\022;\n\007history\030\003 \003(\0132"
  "*.bosdyn.api.mission.State.NodeStatesAtT"
  "ick\0220\n\006status\030\004 \001(\0162 .bosdyn.api.mission"
  ".State.Status\022\r\n\005error\030\005 \001(\t\022\024\n\014tick_cou"
  "nter\030\006 \001(\003\022\022\n\nmission_id\030\007 \001(\003\032`\n\020Answer"
  "edQuestion\022.\n\010question\030\001 \001(\0132\034.bosdyn.ap"
  "i.mission.Question\022\034\n\024accepted_answer_co"
  "de\030\002 \001(\003\032\201\002\n\020NodeStatesAtTick\022\024\n\014tick_co"
  "unter\030\001 \001(\003\0228\n\024tick_start_timestamp\030\002 \001("
  "\0132\032.google.protobuf.Timestamp\022I\n\013node_st"
  "ates\030\003 \003(\01324.bosdyn.api.mission.State.No"
  "deStatesAtTick.NodeState\032R\n\tNodeState\022*\n"
  "\006result\030\001 \001(\0162\032.bosdyn.api.mission.Resul"
  "t\022\r\n\005error\030\002 \001(\t\022\n\n\002id\030\003 \001(\003\"\216\001\n\006Status\022"
  "\022\n\016STATUS_UNKNOWN\020\000\022\022\n\016STATUS_FAILURE\020\001\022"
  "\022\n\016STATUS_RUNNING\020\002\022\022\n\016STATUS_SUCCESS\020\003\022"
  "\021\n\rSTATUS_PAUSED\020\004\022\020\n\014STATUS_ERROR\020\005\022\017\n\013"
  "STATUS_NONE\020\006\"\213\001\n\010Question\022\n\n\002id\030\001 \001(\003\022\016"
  "\n\006source\030\002 \001(\t\022\014\n\004text\030\003 \001(\t\0222\n\007options\030"
  "\004 \003(\0132!.bosdyn.api.mission.Prompt.Option"
  "\022!\n\031for_autonomous_processing\030\005 \001(\010\"e\n\025A"
  "nswerQuestionRequest\022)\n\006header\030\001 \001(\0132\031.b"
  "osdyn.api.RequestHeader\022\023\n\013question_id\030\002"
  " \001(\003\022\014\n\004code\030\003 \001(\003\"\213\002\n\026AnswerQuestionRes"
  "ponse\022*\n\006header\030\001 \001(\0132\032.bosdyn.api.Respo"
  "nseHeader\022A\n\006status\030\002 \001(\01621.bosdyn.api.m"
  "ission.AnswerQuestionResponse.Status\"\201\001\n"
  "\006Status\022\022\n\016STATUS_UNKNOWN\020\000\022\r\n\tSTATUS_OK"
  "\020\001\022\036\n\032STATUS_INVALID_QUESTION_ID\020\002\022\027\n\023ST"
  "ATUS_INVALID_CODE\020\003\022\033\n\027STATUS_ALREADY_AN"
  "SWERED\020\004\"E\n\013MissionInfo\022\n\n\002id\030\001 \001(\003\022*\n\004r"
  "oot\030\002 \001(\0132\034.bosdyn.api.mission.NodeInfo\""
  "\205\001\n\010NodeInfo\022\n\n\002id\030\001 \001(\003\022\014\n\004name\030\002 \001(\t\022/"
  "\n\tuser_data\030\003 \001(\0132\034.bosdyn.api.mission.U"
  "serData\022.\n\010children\030\004 \003(\0132\034.bosdyn.api.m"
  "ission.NodeInfo\")\n\nFailedNode\022\014\n\004name\030\001 "
  "\001(\t\022\r\n\005error\030\002 \001(\t\"\306\001\n\022PlayMissionReques"
  "t\022)\n\006header\030\001 \001(\0132\031.bosdyn.api.RequestHe"
  "ader\022.\n\npause_time\030\003 \001(\0132\032.google.protob"
  "uf.Timestamp\022!\n\006leases\030\004 \003(\0132\021.bosdyn.ap"
  "i.Lease\0222\n\010settings\030\005 \001(\0132 .bosdyn.api.m"
  "ission.PlaySettings\"D\n\014PlaySettings\0224\n\016v"
  "elocity_limit\030\001 \001(\0132\034.bosdyn.api.SE2Velo"
  "cityLimit\"\374\001\n\023PlayMissionResponse\022*\n\006hea"
  "der\030\001 \001(\0132\032.bosdyn.api.ResponseHeader\022>\n"
  "\006status\030\002 \001(\0162..bosdyn.api.mission.PlayM"
  "issionResponse.Status\0225\n\021lease_use_resul"
  "ts\030\003 \003(\0132\032.bosdyn.api.LeaseUseResult\"B\n\006"
  "Status\022\022\n\016STATUS_UNKNOWN\020\000\022\r\n\tSTATUS_OK\020"
  "\001\022\025\n\021STATUS_NO_MISSION\020\002\"\311\001\n\025RestartMiss"
  "ionRequest\022)\n\006header\030\001 \001(\0132\031.bosdyn.api."
  "RequestHeader\022.\n\npause_time\030\002 \001(\0132\032.goog"
  "le.protobuf.Timestamp\022!\n\006leases\030\003 \003(\0132\021."
  "bosdyn.api.Lease\0222\n\010settings\030\004 \001(\0132 .bos"
  "dyn.api.mission.PlaySettings\"\323\002\n\026Restart"
  "MissionResponse\022*\n\006header\030\001 \001(\0132\032.bosdyn"
  ".api.ResponseHeader\022A\n\006status\030\002 \001(\01621.bo"
  "sdyn.api.mission.RestartMissionResponse."
  "Status\0225\n\021lease_use_results\030\003 \003(\0132\032.bosd"
  "yn.api.LeaseUseResult\0224\n\014failed_nodes\030\004 "
  "\003(\0132\036.bosdyn.api.mission.FailedNode\"]\n\006S"
  "tatus\022\022\n\016STATUS_UNKNOWN\020\000\022\r\n\tSTATUS_OK\020\001"
  "\022\025\n\021STATUS_NO_MISSION\020\002\022\031\n\025STATUS_VALIDA"
  "TE_ERROR\020\003\"\212\001\n\022LoadMissionRequest\022)\n\006hea"
  "der\030\001 \001(\0132\031.bosdyn.api.RequestHeader\022&\n\004"
  "root\030\002 \001(\0132\030.bosdyn.api.mission.Node\022!\n\006"
  "leases\030\003 \003(\0132\021.bosdyn.api.Lease\"\207\003\n\023Load"
  "MissionResponse\022*\n\006header\030\001 \001(\0132\032.bosdyn"
  ".api.ResponseHeader\022>\n\006status\030\002 \001(\0162..bo"
  "sdyn.api.mission.LoadMissionResponse.Sta"
  "tus\0225\n\021lease_use_results\030\003 \003(\0132\032.bosdyn."
  "api.LeaseUseResult\0225\n\014mission_info\030\004 \001(\013"
  "2\037.bosdyn.api.mission.MissionInfo\0224\n\014fai"
  "led_nodes\030\005 \003(\0132\036.bosdyn.api.mission.Fai"
  "ledNode\"`\n\006Status\022\022\n\016STATUS_UNKNOWN\020\000\022\r\n"
  "\tSTATUS_OK\020\001\022\030\n\024STATUS_COMPILE_ERROR\020\002\022\031"
  "\n\025STATUS_VALIDATE_ERROR\020\003\";\n\016GetInfoRequ"
  "est\022)\n\006header\030\001 \001(\0132\031.bosdyn.api.Request"
  "Header\"t\n\017GetInfoResponse\022*\n\006header\030\001 \001("
  "\0132\032.bosdyn.api.ResponseHeader\0225\n\014mission"
  "_info\030\002 \001(\0132\037.bosdyn.api.mission.Mission"
  "Info\"b\n\023PauseMissionRequest\022)\n\006header\030\001 "
  "\001(\0132\031.bosdyn.api.RequestHeader\022 \n\005lease\030"
  "\002 \001(\0132\021.bosdyn.api.Lease\"\205\002\n\024PauseMissio"
  "nResponse\022*\n\006header\030\001 \001(\0132\032.bosdyn.api.R"
  "esponseHeader\022\?\n\006status\030\002 \001(\0162/.bosdyn.a"
  "pi.mission.PauseMissionResponse.Status\0224"
  "\n\020lease_use_result\030\003 \001(\0132\032.bosdyn.api.Le"
  "aseUseResult\"J\n\006Status\022\022\n\016STATUS_UNKNOWN"
  "\020\000\022\r\n\tSTATUS_OK\020\001\022\035\n\031STATUS_NO_MISSION_P"
  "LAYING\020\002\">\n\021GetMissionRequest\022)\n\006header\030"
  "\001 \001(\0132\031.bosdyn.api.RequestHeader\"t\n\022GetM"
  "issionResponse\022*\n\006header\030\001 \001(\0132\032.bosdyn."
  "api.ResponseHeader\022&\n\004root\030\002 \001(\0132\030.bosdy"
  "n.api.mission.Node\022\n\n\002id\030\003 \001(\003B\016B\014Missio"
  "nProtob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bosdyn_2fapi_2fmission_2fmission_2eproto_deps[7] = {
  &::descriptor_table_bosdyn_2fapi_2fgeometry_2eproto,
  &::descriptor_table_bosdyn_2fapi_2fheader_2eproto,
  &::descriptor_table_bosdyn_2fapi_2flease_2eproto,
  &::descriptor_table_bosdyn_2fapi_2fmission_2fnodes_2eproto,
  &::descriptor_table_bosdyn_2fapi_2fmission_2futil_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bosdyn_2fapi_2fmission_2fmission_2eproto_sccs[25] = {
  &scc_info_AnswerQuestionRequest_bosdyn_2fapi_2fmission_2fmission_2eproto.base,
  &scc_info_AnswerQuestionResponse_bosdyn_2fapi_2fmission_2fmission_2eproto.base,
  &scc_info_FailedNode_bosdyn_2fapi_2fmission_2fmission_2eproto.base,
  &scc_info_GetInfoRequest_bosdyn_2fapi_2fmission_2fmission_2eproto.base,
  &scc_info_GetInfoResponse_bosdyn_2fapi_2fmission_2fmission_2eproto.base,
  &scc_info_GetMissionRequest_bosdyn_2fapi_2fmission_2fmission_2eproto.base,
  &scc_info_GetMissionResponse_bosdyn_2fapi_2fmission_2fmission_2eproto.base,
  &scc_info_GetStateRequest_bosdyn_2fapi_2fmission_2fmission_2eproto.base,
  &scc_info_GetStateResponse_bosdyn_2fapi_2fmission_2fmission_2eproto.base,
  &scc_info_LoadMissionRequest_bosdyn_2fapi_2fmission_2fmission_2eproto.base,
  &scc_info_LoadMissionResponse_bosdyn_2fapi_2fmission_2fmission_2eproto.base,
  &scc_info_MissionInfo_bosdyn_2fapi_2fmission_2fmission_2eproto.base,
  &scc_info_NodeInfo_bosdyn_2fapi_2fmission_2fmission_2eproto.base,
  &scc_info_PauseMissionRequest_bosdyn_2fapi_2fmission_2fmission_2eproto.base,
  &scc_info_PauseMissionResponse_bosdyn_2fapi_2fmission_2fmission_2eproto.base,
  &scc_info_PlayMissionRequest_bosdyn_2fapi_2fmission_2fmission_2eproto.base,
  &scc_info_PlayMissionResponse_bosdyn_2fapi_2fmission_2fmission_2eproto.base,
  &scc_info_PlaySettings_bosdyn_2fapi_2fmission_2fmission_2eproto.base,
  &scc_info_Question_bosdyn_2fapi_2fmission_2fmission_2eproto.base,
  &scc_info_RestartMissionRequest_bosdyn_2fapi_2fmission_2fmission_2eproto.base,
  &scc_info_RestartMissionResponse_bosdyn_2fapi_2fmission_2fmission_2eproto.base,
  &scc_info_State_bosdyn_2fapi_2fmission_2fmission_2eproto.base,
  &scc_info_State_AnsweredQuestion_bosdyn_2fapi_2fmission_2fmission_2eproto.base,
  &scc_info_State_NodeStatesAtTick_bosdyn_2fapi_2fmission_2fmission_2eproto.base,
  &scc_info_State_NodeStatesAtTick_NodeState_bosdyn_2fapi_2fmission_2fmission_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bosdyn_2fapi_2fmission_2fmission_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fmission_2fmission_2eproto = {
  false, false, descriptor_table_protodef_bosdyn_2fapi_2fmission_2fmission_2eproto, "bosdyn/api/mission/mission.proto", 4494,
  &descriptor_table_bosdyn_2fapi_2fmission_2fmission_2eproto_once, descriptor_table_bosdyn_2fapi_2fmission_2fmission_2eproto_sccs, descriptor_table_bosdyn_2fapi_2fmission_2fmission_2eproto_deps, 25, 7,
  schemas, file_default_instances, TableStruct_bosdyn_2fapi_2fmission_2fmission_2eproto::offsets,
  file_level_metadata_bosdyn_2fapi_2fmission_2fmission_2eproto, 25, file_level_enum_descriptors_bosdyn_2fapi_2fmission_2fmission_2eproto, file_level_service_descriptors_bosdyn_2fapi_2fmission_2fmission_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bosdyn_2fapi_2fmission_2fmission_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bosdyn_2fapi_2fmission_2fmission_2eproto)), true);
namespace bosdyn {
namespace api {
namespace mission {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* State_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2fmission_2fmission_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2fmission_2fmission_2eproto[0];
}
bool State_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr State_Status State::STATUS_UNKNOWN;
constexpr State_Status State::STATUS_FAILURE;
constexpr State_Status State::STATUS_RUNNING;
constexpr State_Status State::STATUS_SUCCESS;
constexpr State_Status State::STATUS_PAUSED;
constexpr State_Status State::STATUS_ERROR;
constexpr State_Status State::STATUS_NONE;
constexpr State_Status State::Status_MIN;
constexpr State_Status State::Status_MAX;
constexpr int State::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AnswerQuestionResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2fmission_2fmission_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2fmission_2fmission_2eproto[1];
}
bool AnswerQuestionResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AnswerQuestionResponse_Status AnswerQuestionResponse::STATUS_UNKNOWN;
constexpr AnswerQuestionResponse_Status AnswerQuestionResponse::STATUS_OK;
constexpr AnswerQuestionResponse_Status AnswerQuestionResponse::STATUS_INVALID_QUESTION_ID;
constexpr AnswerQuestionResponse_Status AnswerQuestionResponse::STATUS_INVALID_CODE;
constexpr AnswerQuestionResponse_Status AnswerQuestionResponse::STATUS_ALREADY_ANSWERED;
constexpr AnswerQuestionResponse_Status AnswerQuestionResponse::Status_MIN;
constexpr AnswerQuestionResponse_Status AnswerQuestionResponse::Status_MAX;
constexpr int AnswerQuestionResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlayMissionResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2fmission_2fmission_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2fmission_2fmission_2eproto[2];
}
bool PlayMissionResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PlayMissionResponse_Status PlayMissionResponse::STATUS_UNKNOWN;
constexpr PlayMissionResponse_Status PlayMissionResponse::STATUS_OK;
constexpr PlayMissionResponse_Status PlayMissionResponse::STATUS_NO_MISSION;
constexpr PlayMissionResponse_Status PlayMissionResponse::Status_MIN;
constexpr PlayMissionResponse_Status PlayMissionResponse::Status_MAX;
constexpr int PlayMissionResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RestartMissionResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2fmission_2fmission_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2fmission_2fmission_2eproto[3];
}
bool RestartMissionResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RestartMissionResponse_Status RestartMissionResponse::STATUS_UNKNOWN;
constexpr RestartMissionResponse_Status RestartMissionResponse::STATUS_OK;
constexpr RestartMissionResponse_Status RestartMissionResponse::STATUS_NO_MISSION;
constexpr RestartMissionResponse_Status RestartMissionResponse::STATUS_VALIDATE_ERROR;
constexpr RestartMissionResponse_Status RestartMissionResponse::Status_MIN;
constexpr RestartMissionResponse_Status RestartMissionResponse::Status_MAX;
constexpr int RestartMissionResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LoadMissionResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2fmission_2fmission_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2fmission_2fmission_2eproto[4];
}
bool LoadMissionResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LoadMissionResponse_Status LoadMissionResponse::STATUS_UNKNOWN;
constexpr LoadMissionResponse_Status LoadMissionResponse::STATUS_OK;
constexpr LoadMissionResponse_Status LoadMissionResponse::STATUS_COMPILE_ERROR;
constexpr LoadMissionResponse_Status LoadMissionResponse::STATUS_VALIDATE_ERROR;
constexpr LoadMissionResponse_Status LoadMissionResponse::Status_MIN;
constexpr LoadMissionResponse_Status LoadMissionResponse::Status_MAX;
constexpr int LoadMissionResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PauseMissionResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2fmission_2fmission_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2fmission_2fmission_2eproto[5];
}
bool PauseMissionResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PauseMissionResponse_Status PauseMissionResponse::STATUS_UNKNOWN;
constexpr PauseMissionResponse_Status PauseMissionResponse::STATUS_OK;
constexpr PauseMissionResponse_Status PauseMissionResponse::STATUS_NO_MISSION_PLAYING;
constexpr PauseMissionResponse_Status PauseMissionResponse::Status_MIN;
constexpr PauseMissionResponse_Status PauseMissionResponse::Status_MAX;
constexpr int PauseMissionResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void GetStateRequest::InitAsDefaultInstance() {
  ::bosdyn::api::mission::_GetStateRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
  ::bosdyn::api::mission::_GetStateRequest_default_instance_._instance.get_mutable()->history_upper_tick_bound_ = const_cast< PROTOBUF_NAMESPACE_ID::Int64Value*>(
      PROTOBUF_NAMESPACE_ID::Int64Value::internal_default_instance());
  ::bosdyn::api::mission::_GetStateRequest_default_instance_.history_lower_tick_bound_ = PROTOBUF_LONGLONG(0);
  ::bosdyn::api::mission::_GetStateRequest_default_instance_.history_past_ticks_ = PROTOBUF_LONGLONG(0);
}
class GetStateRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const GetStateRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::Int64Value& history_upper_tick_bound(const GetStateRequest* msg);
};

const ::bosdyn::api::RequestHeader&
GetStateRequest::_Internal::header(const GetStateRequest* msg) {
  return *msg->header_;
}
const PROTOBUF_NAMESPACE_ID::Int64Value&
GetStateRequest::_Internal::history_upper_tick_bound(const GetStateRequest* msg) {
  return *msg->history_upper_tick_bound_;
}
void GetStateRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void GetStateRequest::clear_history_upper_tick_bound() {
  if (GetArena() == nullptr && history_upper_tick_bound_ != nullptr) {
    delete history_upper_tick_bound_;
  }
  history_upper_tick_bound_ = nullptr;
}
GetStateRequest::GetStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.mission.GetStateRequest)
}
GetStateRequest::GetStateRequest(const GetStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_history_upper_tick_bound()) {
    history_upper_tick_bound_ = new PROTOBUF_NAMESPACE_ID::Int64Value(*from.history_upper_tick_bound_);
  } else {
    history_upper_tick_bound_ = nullptr;
  }
  clear_has_lower_bound();
  switch (from.lower_bound_case()) {
    case kHistoryLowerTickBound: {
      _internal_set_history_lower_tick_bound(from._internal_history_lower_tick_bound());
      break;
    }
    case kHistoryPastTicks: {
      _internal_set_history_past_ticks(from._internal_history_past_ticks());
      break;
    }
    case LOWER_BOUND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.mission.GetStateRequest)
}

void GetStateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetStateRequest_bosdyn_2fapi_2fmission_2fmission_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&history_upper_tick_bound_) -
      reinterpret_cast<char*>(&header_)) + sizeof(history_upper_tick_bound_));
  clear_has_lower_bound();
}

GetStateRequest::~GetStateRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.mission.GetStateRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetStateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete history_upper_tick_bound_;
  if (has_lower_bound()) {
    clear_lower_bound();
  }
}

void GetStateRequest::ArenaDtor(void* object) {
  GetStateRequest* _this = reinterpret_cast< GetStateRequest* >(object);
  (void)_this;
}
void GetStateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetStateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetStateRequest& GetStateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetStateRequest_bosdyn_2fapi_2fmission_2fmission_2eproto.base);
  return *internal_default_instance();
}


void GetStateRequest::clear_lower_bound() {
// @@protoc_insertion_point(one_of_clear_start:bosdyn.api.mission.GetStateRequest)
  switch (lower_bound_case()) {
    case kHistoryLowerTickBound: {
      // No need to clear
      break;
    }
    case kHistoryPastTicks: {
      // No need to clear
      break;
    }
    case LOWER_BOUND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LOWER_BOUND_NOT_SET;
}


void GetStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.mission.GetStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && history_upper_tick_bound_ != nullptr) {
    delete history_upper_tick_bound_;
  }
  history_upper_tick_bound_ = nullptr;
  clear_lower_bound();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetStateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Int64Value history_upper_tick_bound = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_history_upper_tick_bound(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 history_lower_tick_bound = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_history_lower_tick_bound(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 history_past_ticks = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _internal_set_history_past_ticks(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetStateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.mission.GetStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .google.protobuf.Int64Value history_upper_tick_bound = 2;
  if (this->has_history_upper_tick_bound()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::history_upper_tick_bound(this), target, stream);
  }

  // int64 history_lower_tick_bound = 3;
  if (_internal_has_history_lower_tick_bound()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_history_lower_tick_bound(), target);
  }

  // int64 history_past_ticks = 4;
  if (_internal_has_history_past_ticks()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_history_past_ticks(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.mission.GetStateRequest)
  return target;
}

size_t GetStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.mission.GetStateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .google.protobuf.Int64Value history_upper_tick_bound = 2;
  if (this->has_history_upper_tick_bound()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *history_upper_tick_bound_);
  }

  switch (lower_bound_case()) {
    // int64 history_lower_tick_bound = 3;
    case kHistoryLowerTickBound: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_history_lower_tick_bound());
      break;
    }
    // int64 history_past_ticks = 4;
    case kHistoryPastTicks: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_history_past_ticks());
      break;
    }
    case LOWER_BOUND_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetStateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.mission.GetStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetStateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.mission.GetStateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.mission.GetStateRequest)
    MergeFrom(*source);
  }
}

void GetStateRequest::MergeFrom(const GetStateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.mission.GetStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
  if (from.has_history_upper_tick_bound()) {
    _internal_mutable_history_upper_tick_bound()->PROTOBUF_NAMESPACE_ID::Int64Value::MergeFrom(from._internal_history_upper_tick_bound());
  }
  switch (from.lower_bound_case()) {
    case kHistoryLowerTickBound: {
      _internal_set_history_lower_tick_bound(from._internal_history_lower_tick_bound());
      break;
    }
    case kHistoryPastTicks: {
      _internal_set_history_past_ticks(from._internal_history_past_ticks());
      break;
    }
    case LOWER_BOUND_NOT_SET: {
      break;
    }
  }
}

void GetStateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.mission.GetStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStateRequest::CopyFrom(const GetStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.mission.GetStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStateRequest::IsInitialized() const {
  return true;
}

void GetStateRequest::InternalSwap(GetStateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetStateRequest, history_upper_tick_bound_)
      + sizeof(GetStateRequest::history_upper_tick_bound_)
      - PROTOBUF_FIELD_OFFSET(GetStateRequest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
  swap(lower_bound_, other->lower_bound_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetStateResponse::InitAsDefaultInstance() {
  ::bosdyn::api::mission::_GetStateResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
  ::bosdyn::api::mission::_GetStateResponse_default_instance_._instance.get_mutable()->state_ = const_cast< ::bosdyn::api::mission::State*>(
      ::bosdyn::api::mission::State::internal_default_instance());
}
class GetStateResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const GetStateResponse* msg);
  static const ::bosdyn::api::mission::State& state(const GetStateResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
GetStateResponse::_Internal::header(const GetStateResponse* msg) {
  return *msg->header_;
}
const ::bosdyn::api::mission::State&
GetStateResponse::_Internal::state(const GetStateResponse* msg) {
  return *msg->state_;
}
void GetStateResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
GetStateResponse::GetStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.mission.GetStateResponse)
}
GetStateResponse::GetStateResponse(const GetStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new ::bosdyn::api::mission::State(*from.state_);
  } else {
    state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.mission.GetStateResponse)
}

void GetStateResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetStateResponse_bosdyn_2fapi_2fmission_2fmission_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&header_)) + sizeof(state_));
}

GetStateResponse::~GetStateResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.mission.GetStateResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetStateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete state_;
}

void GetStateResponse::ArenaDtor(void* object) {
  GetStateResponse* _this = reinterpret_cast< GetStateResponse* >(object);
  (void)_this;
}
void GetStateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetStateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetStateResponse& GetStateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetStateResponse_bosdyn_2fapi_2fmission_2fmission_2eproto.base);
  return *internal_default_instance();
}


void GetStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.mission.GetStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetStateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.mission.State state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetStateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.mission.GetStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.mission.State state = 2;
  if (this->has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.mission.GetStateResponse)
  return target;
}

size_t GetStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.mission.GetStateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.mission.State state = 2;
  if (this->has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetStateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.mission.GetStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetStateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.mission.GetStateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.mission.GetStateResponse)
    MergeFrom(*source);
  }
}

void GetStateResponse::MergeFrom(const GetStateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.mission.GetStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.has_state()) {
    _internal_mutable_state()->::bosdyn::api::mission::State::MergeFrom(from._internal_state());
  }
}

void GetStateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.mission.GetStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStateResponse::CopyFrom(const GetStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.mission.GetStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStateResponse::IsInitialized() const {
  return true;
}

void GetStateResponse::InternalSwap(GetStateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetStateResponse, state_)
      + sizeof(GetStateResponse::state_)
      - PROTOBUF_FIELD_OFFSET(GetStateResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void State_AnsweredQuestion::InitAsDefaultInstance() {
  ::bosdyn::api::mission::_State_AnsweredQuestion_default_instance_._instance.get_mutable()->question_ = const_cast< ::bosdyn::api::mission::Question*>(
      ::bosdyn::api::mission::Question::internal_default_instance());
}
class State_AnsweredQuestion::_Internal {
 public:
  static const ::bosdyn::api::mission::Question& question(const State_AnsweredQuestion* msg);
};

const ::bosdyn::api::mission::Question&
State_AnsweredQuestion::_Internal::question(const State_AnsweredQuestion* msg) {
  return *msg->question_;
}
State_AnsweredQuestion::State_AnsweredQuestion(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.mission.State.AnsweredQuestion)
}
State_AnsweredQuestion::State_AnsweredQuestion(const State_AnsweredQuestion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_question()) {
    question_ = new ::bosdyn::api::mission::Question(*from.question_);
  } else {
    question_ = nullptr;
  }
  accepted_answer_code_ = from.accepted_answer_code_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.mission.State.AnsweredQuestion)
}

void State_AnsweredQuestion::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_State_AnsweredQuestion_bosdyn_2fapi_2fmission_2fmission_2eproto.base);
  ::memset(&question_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&accepted_answer_code_) -
      reinterpret_cast<char*>(&question_)) + sizeof(accepted_answer_code_));
}

State_AnsweredQuestion::~State_AnsweredQuestion() {
  // @@protoc_insertion_point(destructor:bosdyn.api.mission.State.AnsweredQuestion)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void State_AnsweredQuestion::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete question_;
}

void State_AnsweredQuestion::ArenaDtor(void* object) {
  State_AnsweredQuestion* _this = reinterpret_cast< State_AnsweredQuestion* >(object);
  (void)_this;
}
void State_AnsweredQuestion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void State_AnsweredQuestion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const State_AnsweredQuestion& State_AnsweredQuestion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_State_AnsweredQuestion_bosdyn_2fapi_2fmission_2fmission_2eproto.base);
  return *internal_default_instance();
}


void State_AnsweredQuestion::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.mission.State.AnsweredQuestion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && question_ != nullptr) {
    delete question_;
  }
  question_ = nullptr;
  accepted_answer_code_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* State_AnsweredQuestion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.mission.Question question = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_question(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 accepted_answer_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          accepted_answer_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* State_AnsweredQuestion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.mission.State.AnsweredQuestion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.mission.Question question = 1;
  if (this->has_question()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::question(this), target, stream);
  }

  // int64 accepted_answer_code = 2;
  if (this->accepted_answer_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_accepted_answer_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.mission.State.AnsweredQuestion)
  return target;
}

size_t State_AnsweredQuestion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.mission.State.AnsweredQuestion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.mission.Question question = 1;
  if (this->has_question()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *question_);
  }

  // int64 accepted_answer_code = 2;
  if (this->accepted_answer_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_accepted_answer_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void State_AnsweredQuestion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.mission.State.AnsweredQuestion)
  GOOGLE_DCHECK_NE(&from, this);
  const State_AnsweredQuestion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<State_AnsweredQuestion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.mission.State.AnsweredQuestion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.mission.State.AnsweredQuestion)
    MergeFrom(*source);
  }
}

void State_AnsweredQuestion::MergeFrom(const State_AnsweredQuestion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.mission.State.AnsweredQuestion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_question()) {
    _internal_mutable_question()->::bosdyn::api::mission::Question::MergeFrom(from._internal_question());
  }
  if (from.accepted_answer_code() != 0) {
    _internal_set_accepted_answer_code(from._internal_accepted_answer_code());
  }
}

void State_AnsweredQuestion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.mission.State.AnsweredQuestion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void State_AnsweredQuestion::CopyFrom(const State_AnsweredQuestion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.mission.State.AnsweredQuestion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool State_AnsweredQuestion::IsInitialized() const {
  return true;
}

void State_AnsweredQuestion::InternalSwap(State_AnsweredQuestion* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(State_AnsweredQuestion, accepted_answer_code_)
      + sizeof(State_AnsweredQuestion::accepted_answer_code_)
      - PROTOBUF_FIELD_OFFSET(State_AnsweredQuestion, question_)>(
          reinterpret_cast<char*>(&question_),
          reinterpret_cast<char*>(&other->question_));
}

::PROTOBUF_NAMESPACE_ID::Metadata State_AnsweredQuestion::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void State_NodeStatesAtTick_NodeState::InitAsDefaultInstance() {
}
class State_NodeStatesAtTick_NodeState::_Internal {
 public:
};

State_NodeStatesAtTick_NodeState::State_NodeStatesAtTick_NodeState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.mission.State.NodeStatesAtTick.NodeState)
}
State_NodeStatesAtTick_NodeState::State_NodeStatesAtTick_NodeState(const State_NodeStatesAtTick_NodeState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error().empty()) {
    error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_error(),
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&id_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.mission.State.NodeStatesAtTick.NodeState)
}

void State_NodeStatesAtTick_NodeState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_State_NodeStatesAtTick_NodeState_bosdyn_2fapi_2fmission_2fmission_2eproto.base);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&id_)) + sizeof(result_));
}

State_NodeStatesAtTick_NodeState::~State_NodeStatesAtTick_NodeState() {
  // @@protoc_insertion_point(destructor:bosdyn.api.mission.State.NodeStatesAtTick.NodeState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void State_NodeStatesAtTick_NodeState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void State_NodeStatesAtTick_NodeState::ArenaDtor(void* object) {
  State_NodeStatesAtTick_NodeState* _this = reinterpret_cast< State_NodeStatesAtTick_NodeState* >(object);
  (void)_this;
}
void State_NodeStatesAtTick_NodeState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void State_NodeStatesAtTick_NodeState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const State_NodeStatesAtTick_NodeState& State_NodeStatesAtTick_NodeState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_State_NodeStatesAtTick_NodeState_bosdyn_2fapi_2fmission_2fmission_2eproto.base);
  return *internal_default_instance();
}


void State_NodeStatesAtTick_NodeState::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.mission.State.NodeStatesAtTick.NodeState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&id_)) + sizeof(result_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* State_NodeStatesAtTick_NodeState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.mission.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::bosdyn::api::mission::Result>(val));
        } else goto handle_unusual;
        continue;
      // string error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.mission.State.NodeStatesAtTick.NodeState.error"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* State_NodeStatesAtTick_NodeState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.mission.State.NodeStatesAtTick.NodeState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.mission.Result result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // string error = 2;
  if (this->error().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.mission.State.NodeStatesAtTick.NodeState.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  // int64 id = 3;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.mission.State.NodeStatesAtTick.NodeState)
  return target;
}

size_t State_NodeStatesAtTick_NodeState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.mission.State.NodeStatesAtTick.NodeState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error = 2;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  // int64 id = 3;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // .bosdyn.api.mission.Result result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void State_NodeStatesAtTick_NodeState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.mission.State.NodeStatesAtTick.NodeState)
  GOOGLE_DCHECK_NE(&from, this);
  const State_NodeStatesAtTick_NodeState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<State_NodeStatesAtTick_NodeState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.mission.State.NodeStatesAtTick.NodeState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.mission.State.NodeStatesAtTick.NodeState)
    MergeFrom(*source);
  }
}

void State_NodeStatesAtTick_NodeState::MergeFrom(const State_NodeStatesAtTick_NodeState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.mission.State.NodeStatesAtTick.NodeState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error().size() > 0) {
    _internal_set_error(from._internal_error());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void State_NodeStatesAtTick_NodeState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.mission.State.NodeStatesAtTick.NodeState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void State_NodeStatesAtTick_NodeState::CopyFrom(const State_NodeStatesAtTick_NodeState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.mission.State.NodeStatesAtTick.NodeState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool State_NodeStatesAtTick_NodeState::IsInitialized() const {
  return true;
}

void State_NodeStatesAtTick_NodeState::InternalSwap(State_NodeStatesAtTick_NodeState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  error_.Swap(&other->error_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(State_NodeStatesAtTick_NodeState, result_)
      + sizeof(State_NodeStatesAtTick_NodeState::result_)
      - PROTOBUF_FIELD_OFFSET(State_NodeStatesAtTick_NodeState, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata State_NodeStatesAtTick_NodeState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void State_NodeStatesAtTick::InitAsDefaultInstance() {
  ::bosdyn::api::mission::_State_NodeStatesAtTick_default_instance_._instance.get_mutable()->tick_start_timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class State_NodeStatesAtTick::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& tick_start_timestamp(const State_NodeStatesAtTick* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
State_NodeStatesAtTick::_Internal::tick_start_timestamp(const State_NodeStatesAtTick* msg) {
  return *msg->tick_start_timestamp_;
}
void State_NodeStatesAtTick::clear_tick_start_timestamp() {
  if (GetArena() == nullptr && tick_start_timestamp_ != nullptr) {
    delete tick_start_timestamp_;
  }
  tick_start_timestamp_ = nullptr;
}
State_NodeStatesAtTick::State_NodeStatesAtTick(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  node_states_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.mission.State.NodeStatesAtTick)
}
State_NodeStatesAtTick::State_NodeStatesAtTick(const State_NodeStatesAtTick& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      node_states_(from.node_states_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tick_start_timestamp()) {
    tick_start_timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.tick_start_timestamp_);
  } else {
    tick_start_timestamp_ = nullptr;
  }
  tick_counter_ = from.tick_counter_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.mission.State.NodeStatesAtTick)
}

void State_NodeStatesAtTick::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_State_NodeStatesAtTick_bosdyn_2fapi_2fmission_2fmission_2eproto.base);
  ::memset(&tick_start_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tick_counter_) -
      reinterpret_cast<char*>(&tick_start_timestamp_)) + sizeof(tick_counter_));
}

State_NodeStatesAtTick::~State_NodeStatesAtTick() {
  // @@protoc_insertion_point(destructor:bosdyn.api.mission.State.NodeStatesAtTick)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void State_NodeStatesAtTick::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete tick_start_timestamp_;
}

void State_NodeStatesAtTick::ArenaDtor(void* object) {
  State_NodeStatesAtTick* _this = reinterpret_cast< State_NodeStatesAtTick* >(object);
  (void)_this;
}
void State_NodeStatesAtTick::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void State_NodeStatesAtTick::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const State_NodeStatesAtTick& State_NodeStatesAtTick::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_State_NodeStatesAtTick_bosdyn_2fapi_2fmission_2fmission_2eproto.base);
  return *internal_default_instance();
}


void State_NodeStatesAtTick::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.mission.State.NodeStatesAtTick)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_states_.Clear();
  if (GetArena() == nullptr && tick_start_timestamp_ != nullptr) {
    delete tick_start_timestamp_;
  }
  tick_start_timestamp_ = nullptr;
  tick_counter_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* State_NodeStatesAtTick::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 tick_counter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          tick_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp tick_start_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tick_start_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bosdyn.api.mission.State.NodeStatesAtTick.NodeState node_states = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_node_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* State_NodeStatesAtTick::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.mission.State.NodeStatesAtTick)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 tick_counter = 1;
  if (this->tick_counter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_tick_counter(), target);
  }

  // .google.protobuf.Timestamp tick_start_timestamp = 2;
  if (this->has_tick_start_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::tick_start_timestamp(this), target, stream);
  }

  // repeated .bosdyn.api.mission.State.NodeStatesAtTick.NodeState node_states = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_node_states_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_node_states(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.mission.State.NodeStatesAtTick)
  return target;
}

size_t State_NodeStatesAtTick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.mission.State.NodeStatesAtTick)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bosdyn.api.mission.State.NodeStatesAtTick.NodeState node_states = 3;
  total_size += 1UL * this->_internal_node_states_size();
  for (const auto& msg : this->node_states_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.Timestamp tick_start_timestamp = 2;
  if (this->has_tick_start_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tick_start_timestamp_);
  }

  // int64 tick_counter = 1;
  if (this->tick_counter() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_tick_counter());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void State_NodeStatesAtTick::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.mission.State.NodeStatesAtTick)
  GOOGLE_DCHECK_NE(&from, this);
  const State_NodeStatesAtTick* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<State_NodeStatesAtTick>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.mission.State.NodeStatesAtTick)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.mission.State.NodeStatesAtTick)
    MergeFrom(*source);
  }
}

void State_NodeStatesAtTick::MergeFrom(const State_NodeStatesAtTick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.mission.State.NodeStatesAtTick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  node_states_.MergeFrom(from.node_states_);
  if (from.has_tick_start_timestamp()) {
    _internal_mutable_tick_start_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_tick_start_timestamp());
  }
  if (from.tick_counter() != 0) {
    _internal_set_tick_counter(from._internal_tick_counter());
  }
}

void State_NodeStatesAtTick::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.mission.State.NodeStatesAtTick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void State_NodeStatesAtTick::CopyFrom(const State_NodeStatesAtTick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.mission.State.NodeStatesAtTick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool State_NodeStatesAtTick::IsInitialized() const {
  return true;
}

void State_NodeStatesAtTick::InternalSwap(State_NodeStatesAtTick* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  node_states_.InternalSwap(&other->node_states_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(State_NodeStatesAtTick, tick_counter_)
      + sizeof(State_NodeStatesAtTick::tick_counter_)
      - PROTOBUF_FIELD_OFFSET(State_NodeStatesAtTick, tick_start_timestamp_)>(
          reinterpret_cast<char*>(&tick_start_timestamp_),
          reinterpret_cast<char*>(&other->tick_start_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata State_NodeStatesAtTick::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void State::InitAsDefaultInstance() {
}
class State::_Internal {
 public:
};

State::State(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  questions_(arena),
  answered_questions_(arena),
  history_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.mission.State)
}
State::State(const State& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      questions_(from.questions_),
      answered_questions_(from.answered_questions_),
      history_(from.history_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error().empty()) {
    error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_error(),
      GetArena());
  }
  ::memcpy(&tick_counter_, &from.tick_counter_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&tick_counter_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.mission.State)
}

void State::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_State_bosdyn_2fapi_2fmission_2fmission_2eproto.base);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tick_counter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&tick_counter_)) + sizeof(status_));
}

State::~State() {
  // @@protoc_insertion_point(destructor:bosdyn.api.mission.State)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void State::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void State::ArenaDtor(void* object) {
  State* _this = reinterpret_cast< State* >(object);
  (void)_this;
}
void State::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void State::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const State& State::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_State_bosdyn_2fapi_2fmission_2fmission_2eproto.base);
  return *internal_default_instance();
}


void State::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.mission.State)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  questions_.Clear();
  answered_questions_.Clear();
  history_.Clear();
  error_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&tick_counter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&tick_counter_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* State::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bosdyn.api.mission.Question questions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_questions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .bosdyn.api.mission.State.AnsweredQuestion answered_questions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_answered_questions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .bosdyn.api.mission.State.NodeStatesAtTick history = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_history(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.mission.State.Status status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::bosdyn::api::mission::State_Status>(val));
        } else goto handle_unusual;
        continue;
      // string error = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.mission.State.error"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 tick_counter = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          tick_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 mission_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          mission_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* State::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.mission.State)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bosdyn.api.mission.Question questions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_questions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_questions(i), target, stream);
  }

  // repeated .bosdyn.api.mission.State.AnsweredQuestion answered_questions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_answered_questions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_answered_questions(i), target, stream);
  }

  // repeated .bosdyn.api.mission.State.NodeStatesAtTick history = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_history_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_history(i), target, stream);
  }

  // .bosdyn.api.mission.State.Status status = 4;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_status(), target);
  }

  // string error = 5;
  if (this->error().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.mission.State.error");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_error(), target);
  }

  // int64 tick_counter = 6;
  if (this->tick_counter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_tick_counter(), target);
  }

  // int64 mission_id = 7;
  if (this->mission_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_mission_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.mission.State)
  return target;
}

size_t State::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.mission.State)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bosdyn.api.mission.Question questions = 1;
  total_size += 1UL * this->_internal_questions_size();
  for (const auto& msg : this->questions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .bosdyn.api.mission.State.AnsweredQuestion answered_questions = 2;
  total_size += 1UL * this->_internal_answered_questions_size();
  for (const auto& msg : this->answered_questions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .bosdyn.api.mission.State.NodeStatesAtTick history = 3;
  total_size += 1UL * this->_internal_history_size();
  for (const auto& msg : this->history_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string error = 5;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  // int64 tick_counter = 6;
  if (this->tick_counter() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_tick_counter());
  }

  // int64 mission_id = 7;
  if (this->mission_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_mission_id());
  }

  // .bosdyn.api.mission.State.Status status = 4;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void State::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.mission.State)
  GOOGLE_DCHECK_NE(&from, this);
  const State* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<State>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.mission.State)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.mission.State)
    MergeFrom(*source);
  }
}

void State::MergeFrom(const State& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.mission.State)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  questions_.MergeFrom(from.questions_);
  answered_questions_.MergeFrom(from.answered_questions_);
  history_.MergeFrom(from.history_);
  if (from.error().size() > 0) {
    _internal_set_error(from._internal_error());
  }
  if (from.tick_counter() != 0) {
    _internal_set_tick_counter(from._internal_tick_counter());
  }
  if (from.mission_id() != 0) {
    _internal_set_mission_id(from._internal_mission_id());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void State::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.mission.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void State::CopyFrom(const State& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.mission.State)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool State::IsInitialized() const {
  return true;
}

void State::InternalSwap(State* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  questions_.InternalSwap(&other->questions_);
  answered_questions_.InternalSwap(&other->answered_questions_);
  history_.InternalSwap(&other->history_);
  error_.Swap(&other->error_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(State, status_)
      + sizeof(State::status_)
      - PROTOBUF_FIELD_OFFSET(State, tick_counter_)>(
          reinterpret_cast<char*>(&tick_counter_),
          reinterpret_cast<char*>(&other->tick_counter_));
}

::PROTOBUF_NAMESPACE_ID::Metadata State::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Question::InitAsDefaultInstance() {
}
class Question::_Internal {
 public:
};

void Question::clear_options() {
  options_.Clear();
}
Question::Question(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  options_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.mission.Question)
}
Question::Question(const Question& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      options_(from.options_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source().empty()) {
    source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_source(),
      GetArena());
  }
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text().empty()) {
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_text(),
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&for_autonomous_processing_) -
    reinterpret_cast<char*>(&id_)) + sizeof(for_autonomous_processing_));
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.mission.Question)
}

void Question::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Question_bosdyn_2fapi_2fmission_2fmission_2eproto.base);
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&for_autonomous_processing_) -
      reinterpret_cast<char*>(&id_)) + sizeof(for_autonomous_processing_));
}

Question::~Question() {
  // @@protoc_insertion_point(destructor:bosdyn.api.mission.Question)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Question::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  source_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Question::ArenaDtor(void* object) {
  Question* _this = reinterpret_cast< Question* >(object);
  (void)_this;
}
void Question::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Question::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Question& Question::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Question_bosdyn_2fapi_2fmission_2fmission_2eproto.base);
  return *internal_default_instance();
}


void Question::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.mission.Question)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  options_.Clear();
  source_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&for_autonomous_processing_) -
      reinterpret_cast<char*>(&id_)) + sizeof(for_autonomous_processing_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Question::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_source();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.mission.Question.source"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.mission.Question.text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bosdyn.api.mission.Prompt.Option options = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_options(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // bool for_autonomous_processing = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          for_autonomous_processing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Question::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.mission.Question)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string source = 2;
  if (this->source().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source().data(), static_cast<int>(this->_internal_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.mission.Question.source");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_source(), target);
  }

  // string text = 3;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.mission.Question.text");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_text(), target);
  }

  // repeated .bosdyn.api.mission.Prompt.Option options = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_options_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_options(i), target, stream);
  }

  // bool for_autonomous_processing = 5;
  if (this->for_autonomous_processing() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_for_autonomous_processing(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.mission.Question)
  return target;
}

size_t Question::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.mission.Question)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bosdyn.api.mission.Prompt.Option options = 4;
  total_size += 1UL * this->_internal_options_size();
  for (const auto& msg : this->options_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string source = 2;
  if (this->source().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source());
  }

  // string text = 3;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // bool for_autonomous_processing = 5;
  if (this->for_autonomous_processing() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Question::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.mission.Question)
  GOOGLE_DCHECK_NE(&from, this);
  const Question* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Question>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.mission.Question)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.mission.Question)
    MergeFrom(*source);
  }
}

void Question::MergeFrom(const Question& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.mission.Question)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  options_.MergeFrom(from.options_);
  if (from.source().size() > 0) {
    _internal_set_source(from._internal_source());
  }
  if (from.text().size() > 0) {
    _internal_set_text(from._internal_text());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.for_autonomous_processing() != 0) {
    _internal_set_for_autonomous_processing(from._internal_for_autonomous_processing());
  }
}

void Question::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.mission.Question)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Question::CopyFrom(const Question& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.mission.Question)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Question::IsInitialized() const {
  return true;
}

void Question::InternalSwap(Question* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  options_.InternalSwap(&other->options_);
  source_.Swap(&other->source_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Question, for_autonomous_processing_)
      + sizeof(Question::for_autonomous_processing_)
      - PROTOBUF_FIELD_OFFSET(Question, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Question::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AnswerQuestionRequest::InitAsDefaultInstance() {
  ::bosdyn::api::mission::_AnswerQuestionRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
}
class AnswerQuestionRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const AnswerQuestionRequest* msg);
};

const ::bosdyn::api::RequestHeader&
AnswerQuestionRequest::_Internal::header(const AnswerQuestionRequest* msg) {
  return *msg->header_;
}
void AnswerQuestionRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
AnswerQuestionRequest::AnswerQuestionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.mission.AnswerQuestionRequest)
}
AnswerQuestionRequest::AnswerQuestionRequest(const AnswerQuestionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&question_id_, &from.question_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&question_id_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.mission.AnswerQuestionRequest)
}

void AnswerQuestionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnswerQuestionRequest_bosdyn_2fapi_2fmission_2fmission_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&header_)) + sizeof(code_));
}

AnswerQuestionRequest::~AnswerQuestionRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.mission.AnswerQuestionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AnswerQuestionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void AnswerQuestionRequest::ArenaDtor(void* object) {
  AnswerQuestionRequest* _this = reinterpret_cast< AnswerQuestionRequest* >(object);
  (void)_this;
}
void AnswerQuestionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnswerQuestionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnswerQuestionRequest& AnswerQuestionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnswerQuestionRequest_bosdyn_2fapi_2fmission_2fmission_2eproto.base);
  return *internal_default_instance();
}


void AnswerQuestionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.mission.AnswerQuestionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  ::memset(&question_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&question_id_)) + sizeof(code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnswerQuestionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 question_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          question_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnswerQuestionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.mission.AnswerQuestionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // int64 question_id = 2;
  if (this->question_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_question_id(), target);
  }

  // int64 code = 3;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.mission.AnswerQuestionRequest)
  return target;
}

size_t AnswerQuestionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.mission.AnswerQuestionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // int64 question_id = 2;
  if (this->question_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_question_id());
  }

  // int64 code = 3;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnswerQuestionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.mission.AnswerQuestionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AnswerQuestionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnswerQuestionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.mission.AnswerQuestionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.mission.AnswerQuestionRequest)
    MergeFrom(*source);
  }
}

void AnswerQuestionRequest::MergeFrom(const AnswerQuestionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.mission.AnswerQuestionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
  if (from.question_id() != 0) {
    _internal_set_question_id(from._internal_question_id());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void AnswerQuestionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.mission.AnswerQuestionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnswerQuestionRequest::CopyFrom(const AnswerQuestionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.mission.AnswerQuestionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnswerQuestionRequest::IsInitialized() const {
  return true;
}

void AnswerQuestionRequest::InternalSwap(AnswerQuestionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnswerQuestionRequest, code_)
      + sizeof(AnswerQuestionRequest::code_)
      - PROTOBUF_FIELD_OFFSET(AnswerQuestionRequest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AnswerQuestionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AnswerQuestionResponse::InitAsDefaultInstance() {
  ::bosdyn::api::mission::_AnswerQuestionResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
}
class AnswerQuestionResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const AnswerQuestionResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
AnswerQuestionResponse::_Internal::header(const AnswerQuestionResponse* msg) {
  return *msg->header_;
}
void AnswerQuestionResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
AnswerQuestionResponse::AnswerQuestionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.mission.AnswerQuestionResponse)
}
AnswerQuestionResponse::AnswerQuestionResponse(const AnswerQuestionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.mission.AnswerQuestionResponse)
}

void AnswerQuestionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AnswerQuestionResponse_bosdyn_2fapi_2fmission_2fmission_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&header_)) + sizeof(status_));
}

AnswerQuestionResponse::~AnswerQuestionResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.mission.AnswerQuestionResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AnswerQuestionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void AnswerQuestionResponse::ArenaDtor(void* object) {
  AnswerQuestionResponse* _this = reinterpret_cast< AnswerQuestionResponse* >(object);
  (void)_this;
}
void AnswerQuestionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AnswerQuestionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AnswerQuestionResponse& AnswerQuestionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AnswerQuestionResponse_bosdyn_2fapi_2fmission_2fmission_2eproto.base);
  return *internal_default_instance();
}


void AnswerQuestionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.mission.AnswerQuestionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnswerQuestionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.mission.AnswerQuestionResponse.Status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::bosdyn::api::mission::AnswerQuestionResponse_Status>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AnswerQuestionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.mission.AnswerQuestionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.mission.AnswerQuestionResponse.Status status = 2;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.mission.AnswerQuestionResponse)
  return target;
}

size_t AnswerQuestionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.mission.AnswerQuestionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.mission.AnswerQuestionResponse.Status status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnswerQuestionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.mission.AnswerQuestionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AnswerQuestionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AnswerQuestionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.mission.AnswerQuestionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.mission.AnswerQuestionResponse)
    MergeFrom(*source);
  }
}

void AnswerQuestionResponse::MergeFrom(const AnswerQuestionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.mission.AnswerQuestionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void AnswerQuestionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.mission.AnswerQuestionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnswerQuestionResponse::CopyFrom(const AnswerQuestionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.mission.AnswerQuestionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnswerQuestionResponse::IsInitialized() const {
  return true;
}

void AnswerQuestionResponse::InternalSwap(AnswerQuestionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnswerQuestionResponse, status_)
      + sizeof(AnswerQuestionResponse::status_)
      - PROTOBUF_FIELD_OFFSET(AnswerQuestionResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AnswerQuestionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MissionInfo::InitAsDefaultInstance() {
  ::bosdyn::api::mission::_MissionInfo_default_instance_._instance.get_mutable()->root_ = const_cast< ::bosdyn::api::mission::NodeInfo*>(
      ::bosdyn::api::mission::NodeInfo::internal_default_instance());
}
class MissionInfo::_Internal {
 public:
  static const ::bosdyn::api::mission::NodeInfo& root(const MissionInfo* msg);
};

const ::bosdyn::api::mission::NodeInfo&
MissionInfo::_Internal::root(const MissionInfo* msg) {
  return *msg->root_;
}
MissionInfo::MissionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.mission.MissionInfo)
}
MissionInfo::MissionInfo(const MissionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_root()) {
    root_ = new ::bosdyn::api::mission::NodeInfo(*from.root_);
  } else {
    root_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.mission.MissionInfo)
}

void MissionInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MissionInfo_bosdyn_2fapi_2fmission_2fmission_2eproto.base);
  ::memset(&root_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&root_)) + sizeof(id_));
}

MissionInfo::~MissionInfo() {
  // @@protoc_insertion_point(destructor:bosdyn.api.mission.MissionInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MissionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete root_;
}

void MissionInfo::ArenaDtor(void* object) {
  MissionInfo* _this = reinterpret_cast< MissionInfo* >(object);
  (void)_this;
}
void MissionInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MissionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MissionInfo& MissionInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MissionInfo_bosdyn_2fapi_2fmission_2fmission_2eproto.base);
  return *internal_default_instance();
}


void MissionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.mission.MissionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && root_ != nullptr) {
    delete root_;
  }
  root_ = nullptr;
  id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MissionInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.mission.NodeInfo root = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_root(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MissionInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.mission.MissionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // .bosdyn.api.mission.NodeInfo root = 2;
  if (this->has_root()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::root(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.mission.MissionInfo)
  return target;
}

size_t MissionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.mission.MissionInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.mission.NodeInfo root = 2;
  if (this->has_root()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *root_);
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MissionInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.mission.MissionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MissionInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MissionInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.mission.MissionInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.mission.MissionInfo)
    MergeFrom(*source);
  }
}

void MissionInfo::MergeFrom(const MissionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.mission.MissionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_root()) {
    _internal_mutable_root()->::bosdyn::api::mission::NodeInfo::MergeFrom(from._internal_root());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void MissionInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.mission.MissionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MissionInfo::CopyFrom(const MissionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.mission.MissionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionInfo::IsInitialized() const {
  return true;
}

void MissionInfo::InternalSwap(MissionInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MissionInfo, id_)
      + sizeof(MissionInfo::id_)
      - PROTOBUF_FIELD_OFFSET(MissionInfo, root_)>(
          reinterpret_cast<char*>(&root_),
          reinterpret_cast<char*>(&other->root_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MissionInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NodeInfo::InitAsDefaultInstance() {
  ::bosdyn::api::mission::_NodeInfo_default_instance_._instance.get_mutable()->user_data_ = const_cast< ::bosdyn::api::mission::UserData*>(
      ::bosdyn::api::mission::UserData::internal_default_instance());
}
class NodeInfo::_Internal {
 public:
  static const ::bosdyn::api::mission::UserData& user_data(const NodeInfo* msg);
};

const ::bosdyn::api::mission::UserData&
NodeInfo::_Internal::user_data(const NodeInfo* msg) {
  return *msg->user_data_;
}
void NodeInfo::clear_user_data() {
  if (GetArena() == nullptr && user_data_ != nullptr) {
    delete user_data_;
  }
  user_data_ = nullptr;
}
NodeInfo::NodeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  children_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.mission.NodeInfo)
}
NodeInfo::NodeInfo(const NodeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      children_(from.children_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_user_data()) {
    user_data_ = new ::bosdyn::api::mission::UserData(*from.user_data_);
  } else {
    user_data_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.mission.NodeInfo)
}

void NodeInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NodeInfo_bosdyn_2fapi_2fmission_2fmission_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&user_data_)) + sizeof(id_));
}

NodeInfo::~NodeInfo() {
  // @@protoc_insertion_point(destructor:bosdyn.api.mission.NodeInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_data_;
}

void NodeInfo::ArenaDtor(void* object) {
  NodeInfo* _this = reinterpret_cast< NodeInfo* >(object);
  (void)_this;
}
void NodeInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeInfo& NodeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodeInfo_bosdyn_2fapi_2fmission_2fmission_2eproto.base);
  return *internal_default_instance();
}


void NodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.mission.NodeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  children_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && user_data_ != nullptr) {
    delete user_data_;
  }
  user_data_ = nullptr;
  id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.mission.NodeInfo.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.mission.UserData user_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bosdyn.api.mission.NodeInfo children = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_children(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.mission.NodeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.mission.NodeInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .bosdyn.api.mission.UserData user_data = 3;
  if (this->has_user_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::user_data(this), target, stream);
  }

  // repeated .bosdyn.api.mission.NodeInfo children = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_children_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_children(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.mission.NodeInfo)
  return target;
}

size_t NodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.mission.NodeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bosdyn.api.mission.NodeInfo children = 4;
  total_size += 1UL * this->_internal_children_size();
  for (const auto& msg : this->children_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .bosdyn.api.mission.UserData user_data = 3;
  if (this->has_user_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_data_);
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.mission.NodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.mission.NodeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.mission.NodeInfo)
    MergeFrom(*source);
  }
}

void NodeInfo::MergeFrom(const NodeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.mission.NodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  children_.MergeFrom(from.children_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_user_data()) {
    _internal_mutable_user_data()->::bosdyn::api::mission::UserData::MergeFrom(from._internal_user_data());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void NodeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.mission.NodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeInfo::CopyFrom(const NodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.mission.NodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfo::IsInitialized() const {
  return true;
}

void NodeInfo::InternalSwap(NodeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  children_.InternalSwap(&other->children_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NodeInfo, id_)
      + sizeof(NodeInfo::id_)
      - PROTOBUF_FIELD_OFFSET(NodeInfo, user_data_)>(
          reinterpret_cast<char*>(&user_data_),
          reinterpret_cast<char*>(&other->user_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FailedNode::InitAsDefaultInstance() {
}
class FailedNode::_Internal {
 public:
};

FailedNode::FailedNode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.mission.FailedNode)
}
FailedNode::FailedNode(const FailedNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error().empty()) {
    error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_error(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.mission.FailedNode)
}

void FailedNode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FailedNode_bosdyn_2fapi_2fmission_2fmission_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FailedNode::~FailedNode() {
  // @@protoc_insertion_point(destructor:bosdyn.api.mission.FailedNode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FailedNode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FailedNode::ArenaDtor(void* object) {
  FailedNode* _this = reinterpret_cast< FailedNode* >(object);
  (void)_this;
}
void FailedNode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FailedNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FailedNode& FailedNode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FailedNode_bosdyn_2fapi_2fmission_2fmission_2eproto.base);
  return *internal_default_instance();
}


void FailedNode::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.mission.FailedNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  error_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FailedNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.mission.FailedNode.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.mission.FailedNode.error"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FailedNode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.mission.FailedNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.mission.FailedNode.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string error = 2;
  if (this->error().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.mission.FailedNode.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.mission.FailedNode)
  return target;
}

size_t FailedNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.mission.FailedNode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string error = 2;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FailedNode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.mission.FailedNode)
  GOOGLE_DCHECK_NE(&from, this);
  const FailedNode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FailedNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.mission.FailedNode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.mission.FailedNode)
    MergeFrom(*source);
  }
}

void FailedNode::MergeFrom(const FailedNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.mission.FailedNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.error().size() > 0) {
    _internal_set_error(from._internal_error());
  }
}

void FailedNode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.mission.FailedNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FailedNode::CopyFrom(const FailedNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.mission.FailedNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FailedNode::IsInitialized() const {
  return true;
}

void FailedNode::InternalSwap(FailedNode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  error_.Swap(&other->error_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata FailedNode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlayMissionRequest::InitAsDefaultInstance() {
  ::bosdyn::api::mission::_PlayMissionRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
  ::bosdyn::api::mission::_PlayMissionRequest_default_instance_._instance.get_mutable()->pause_time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::bosdyn::api::mission::_PlayMissionRequest_default_instance_._instance.get_mutable()->settings_ = const_cast< ::bosdyn::api::mission::PlaySettings*>(
      ::bosdyn::api::mission::PlaySettings::internal_default_instance());
}
class PlayMissionRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const PlayMissionRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& pause_time(const PlayMissionRequest* msg);
  static const ::bosdyn::api::mission::PlaySettings& settings(const PlayMissionRequest* msg);
};

const ::bosdyn::api::RequestHeader&
PlayMissionRequest::_Internal::header(const PlayMissionRequest* msg) {
  return *msg->header_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
PlayMissionRequest::_Internal::pause_time(const PlayMissionRequest* msg) {
  return *msg->pause_time_;
}
const ::bosdyn::api::mission::PlaySettings&
PlayMissionRequest::_Internal::settings(const PlayMissionRequest* msg) {
  return *msg->settings_;
}
void PlayMissionRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void PlayMissionRequest::clear_pause_time() {
  if (GetArena() == nullptr && pause_time_ != nullptr) {
    delete pause_time_;
  }
  pause_time_ = nullptr;
}
void PlayMissionRequest::clear_leases() {
  leases_.Clear();
}
PlayMissionRequest::PlayMissionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  leases_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.mission.PlayMissionRequest)
}
PlayMissionRequest::PlayMissionRequest(const PlayMissionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      leases_(from.leases_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_pause_time()) {
    pause_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.pause_time_);
  } else {
    pause_time_ = nullptr;
  }
  if (from._internal_has_settings()) {
    settings_ = new ::bosdyn::api::mission::PlaySettings(*from.settings_);
  } else {
    settings_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.mission.PlayMissionRequest)
}

void PlayMissionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayMissionRequest_bosdyn_2fapi_2fmission_2fmission_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&settings_) -
      reinterpret_cast<char*>(&header_)) + sizeof(settings_));
}

PlayMissionRequest::~PlayMissionRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.mission.PlayMissionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlayMissionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete pause_time_;
  if (this != internal_default_instance()) delete settings_;
}

void PlayMissionRequest::ArenaDtor(void* object) {
  PlayMissionRequest* _this = reinterpret_cast< PlayMissionRequest* >(object);
  (void)_this;
}
void PlayMissionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayMissionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayMissionRequest& PlayMissionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayMissionRequest_bosdyn_2fapi_2fmission_2fmission_2eproto.base);
  return *internal_default_instance();
}


void PlayMissionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.mission.PlayMissionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  leases_.Clear();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && pause_time_ != nullptr) {
    delete pause_time_;
  }
  pause_time_ = nullptr;
  if (GetArena() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayMissionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp pause_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pause_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bosdyn.api.Lease leases = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_leases(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.mission.PlaySettings settings = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayMissionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.mission.PlayMissionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .google.protobuf.Timestamp pause_time = 3;
  if (this->has_pause_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pause_time(this), target, stream);
  }

  // repeated .bosdyn.api.Lease leases = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_leases_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_leases(i), target, stream);
  }

  // .bosdyn.api.mission.PlaySettings settings = 5;
  if (this->has_settings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::settings(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.mission.PlayMissionRequest)
  return target;
}

size_t PlayMissionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.mission.PlayMissionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bosdyn.api.Lease leases = 4;
  total_size += 1UL * this->_internal_leases_size();
  for (const auto& msg : this->leases_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .google.protobuf.Timestamp pause_time = 3;
  if (this->has_pause_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pause_time_);
  }

  // .bosdyn.api.mission.PlaySettings settings = 5;
  if (this->has_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *settings_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayMissionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.mission.PlayMissionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayMissionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayMissionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.mission.PlayMissionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.mission.PlayMissionRequest)
    MergeFrom(*source);
  }
}

void PlayMissionRequest::MergeFrom(const PlayMissionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.mission.PlayMissionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  leases_.MergeFrom(from.leases_);
  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
  if (from.has_pause_time()) {
    _internal_mutable_pause_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_pause_time());
  }
  if (from.has_settings()) {
    _internal_mutable_settings()->::bosdyn::api::mission::PlaySettings::MergeFrom(from._internal_settings());
  }
}

void PlayMissionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.mission.PlayMissionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayMissionRequest::CopyFrom(const PlayMissionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.mission.PlayMissionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayMissionRequest::IsInitialized() const {
  return true;
}

void PlayMissionRequest::InternalSwap(PlayMissionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  leases_.InternalSwap(&other->leases_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayMissionRequest, settings_)
      + sizeof(PlayMissionRequest::settings_)
      - PROTOBUF_FIELD_OFFSET(PlayMissionRequest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayMissionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlaySettings::InitAsDefaultInstance() {
  ::bosdyn::api::mission::_PlaySettings_default_instance_._instance.get_mutable()->velocity_limit_ = const_cast< ::bosdyn::api::SE2VelocityLimit*>(
      ::bosdyn::api::SE2VelocityLimit::internal_default_instance());
}
class PlaySettings::_Internal {
 public:
  static const ::bosdyn::api::SE2VelocityLimit& velocity_limit(const PlaySettings* msg);
};

const ::bosdyn::api::SE2VelocityLimit&
PlaySettings::_Internal::velocity_limit(const PlaySettings* msg) {
  return *msg->velocity_limit_;
}
void PlaySettings::clear_velocity_limit() {
  if (GetArena() == nullptr && velocity_limit_ != nullptr) {
    delete velocity_limit_;
  }
  velocity_limit_ = nullptr;
}
PlaySettings::PlaySettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.mission.PlaySettings)
}
PlaySettings::PlaySettings(const PlaySettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_velocity_limit()) {
    velocity_limit_ = new ::bosdyn::api::SE2VelocityLimit(*from.velocity_limit_);
  } else {
    velocity_limit_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.mission.PlaySettings)
}

void PlaySettings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlaySettings_bosdyn_2fapi_2fmission_2fmission_2eproto.base);
  velocity_limit_ = nullptr;
}

PlaySettings::~PlaySettings() {
  // @@protoc_insertion_point(destructor:bosdyn.api.mission.PlaySettings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlaySettings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete velocity_limit_;
}

void PlaySettings::ArenaDtor(void* object) {
  PlaySettings* _this = reinterpret_cast< PlaySettings* >(object);
  (void)_this;
}
void PlaySettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlaySettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlaySettings& PlaySettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlaySettings_bosdyn_2fapi_2fmission_2fmission_2eproto.base);
  return *internal_default_instance();
}


void PlaySettings::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.mission.PlaySettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && velocity_limit_ != nullptr) {
    delete velocity_limit_;
  }
  velocity_limit_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlaySettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.SE2VelocityLimit velocity_limit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity_limit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlaySettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.mission.PlaySettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.SE2VelocityLimit velocity_limit = 1;
  if (this->has_velocity_limit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::velocity_limit(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.mission.PlaySettings)
  return target;
}

size_t PlaySettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.mission.PlaySettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.SE2VelocityLimit velocity_limit = 1;
  if (this->has_velocity_limit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *velocity_limit_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlaySettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.mission.PlaySettings)
  GOOGLE_DCHECK_NE(&from, this);
  const PlaySettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlaySettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.mission.PlaySettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.mission.PlaySettings)
    MergeFrom(*source);
  }
}

void PlaySettings::MergeFrom(const PlaySettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.mission.PlaySettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_velocity_limit()) {
    _internal_mutable_velocity_limit()->::bosdyn::api::SE2VelocityLimit::MergeFrom(from._internal_velocity_limit());
  }
}

void PlaySettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.mission.PlaySettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaySettings::CopyFrom(const PlaySettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.mission.PlaySettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaySettings::IsInitialized() const {
  return true;
}

void PlaySettings::InternalSwap(PlaySettings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(velocity_limit_, other->velocity_limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaySettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlayMissionResponse::InitAsDefaultInstance() {
  ::bosdyn::api::mission::_PlayMissionResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
}
class PlayMissionResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const PlayMissionResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
PlayMissionResponse::_Internal::header(const PlayMissionResponse* msg) {
  return *msg->header_;
}
void PlayMissionResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void PlayMissionResponse::clear_lease_use_results() {
  lease_use_results_.Clear();
}
PlayMissionResponse::PlayMissionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  lease_use_results_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.mission.PlayMissionResponse)
}
PlayMissionResponse::PlayMissionResponse(const PlayMissionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      lease_use_results_(from.lease_use_results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.mission.PlayMissionResponse)
}

void PlayMissionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlayMissionResponse_bosdyn_2fapi_2fmission_2fmission_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&header_)) + sizeof(status_));
}

PlayMissionResponse::~PlayMissionResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.mission.PlayMissionResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlayMissionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void PlayMissionResponse::ArenaDtor(void* object) {
  PlayMissionResponse* _this = reinterpret_cast< PlayMissionResponse* >(object);
  (void)_this;
}
void PlayMissionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayMissionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlayMissionResponse& PlayMissionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlayMissionResponse_bosdyn_2fapi_2fmission_2fmission_2eproto.base);
  return *internal_default_instance();
}


void PlayMissionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.mission.PlayMissionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lease_use_results_.Clear();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayMissionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.mission.PlayMissionResponse.Status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::bosdyn::api::mission::PlayMissionResponse_Status>(val));
        } else goto handle_unusual;
        continue;
      // repeated .bosdyn.api.LeaseUseResult lease_use_results = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lease_use_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayMissionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.mission.PlayMissionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.mission.PlayMissionResponse.Status status = 2;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // repeated .bosdyn.api.LeaseUseResult lease_use_results = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lease_use_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_lease_use_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.mission.PlayMissionResponse)
  return target;
}

size_t PlayMissionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.mission.PlayMissionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bosdyn.api.LeaseUseResult lease_use_results = 3;
  total_size += 1UL * this->_internal_lease_use_results_size();
  for (const auto& msg : this->lease_use_results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.mission.PlayMissionResponse.Status status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayMissionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.mission.PlayMissionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayMissionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayMissionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.mission.PlayMissionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.mission.PlayMissionResponse)
    MergeFrom(*source);
  }
}

void PlayMissionResponse::MergeFrom(const PlayMissionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.mission.PlayMissionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lease_use_results_.MergeFrom(from.lease_use_results_);
  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void PlayMissionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.mission.PlayMissionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayMissionResponse::CopyFrom(const PlayMissionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.mission.PlayMissionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayMissionResponse::IsInitialized() const {
  return true;
}

void PlayMissionResponse::InternalSwap(PlayMissionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  lease_use_results_.InternalSwap(&other->lease_use_results_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayMissionResponse, status_)
      + sizeof(PlayMissionResponse::status_)
      - PROTOBUF_FIELD_OFFSET(PlayMissionResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayMissionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RestartMissionRequest::InitAsDefaultInstance() {
  ::bosdyn::api::mission::_RestartMissionRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
  ::bosdyn::api::mission::_RestartMissionRequest_default_instance_._instance.get_mutable()->pause_time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::bosdyn::api::mission::_RestartMissionRequest_default_instance_._instance.get_mutable()->settings_ = const_cast< ::bosdyn::api::mission::PlaySettings*>(
      ::bosdyn::api::mission::PlaySettings::internal_default_instance());
}
class RestartMissionRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const RestartMissionRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& pause_time(const RestartMissionRequest* msg);
  static const ::bosdyn::api::mission::PlaySettings& settings(const RestartMissionRequest* msg);
};

const ::bosdyn::api::RequestHeader&
RestartMissionRequest::_Internal::header(const RestartMissionRequest* msg) {
  return *msg->header_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
RestartMissionRequest::_Internal::pause_time(const RestartMissionRequest* msg) {
  return *msg->pause_time_;
}
const ::bosdyn::api::mission::PlaySettings&
RestartMissionRequest::_Internal::settings(const RestartMissionRequest* msg) {
  return *msg->settings_;
}
void RestartMissionRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void RestartMissionRequest::clear_pause_time() {
  if (GetArena() == nullptr && pause_time_ != nullptr) {
    delete pause_time_;
  }
  pause_time_ = nullptr;
}
void RestartMissionRequest::clear_leases() {
  leases_.Clear();
}
RestartMissionRequest::RestartMissionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  leases_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.mission.RestartMissionRequest)
}
RestartMissionRequest::RestartMissionRequest(const RestartMissionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      leases_(from.leases_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_pause_time()) {
    pause_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.pause_time_);
  } else {
    pause_time_ = nullptr;
  }
  if (from._internal_has_settings()) {
    settings_ = new ::bosdyn::api::mission::PlaySettings(*from.settings_);
  } else {
    settings_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.mission.RestartMissionRequest)
}

void RestartMissionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RestartMissionRequest_bosdyn_2fapi_2fmission_2fmission_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&settings_) -
      reinterpret_cast<char*>(&header_)) + sizeof(settings_));
}

RestartMissionRequest::~RestartMissionRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.mission.RestartMissionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RestartMissionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete pause_time_;
  if (this != internal_default_instance()) delete settings_;
}

void RestartMissionRequest::ArenaDtor(void* object) {
  RestartMissionRequest* _this = reinterpret_cast< RestartMissionRequest* >(object);
  (void)_this;
}
void RestartMissionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RestartMissionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RestartMissionRequest& RestartMissionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RestartMissionRequest_bosdyn_2fapi_2fmission_2fmission_2eproto.base);
  return *internal_default_instance();
}


void RestartMissionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.mission.RestartMissionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  leases_.Clear();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && pause_time_ != nullptr) {
    delete pause_time_;
  }
  pause_time_ = nullptr;
  if (GetArena() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RestartMissionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp pause_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pause_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bosdyn.api.Lease leases = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_leases(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.mission.PlaySettings settings = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RestartMissionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.mission.RestartMissionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .google.protobuf.Timestamp pause_time = 2;
  if (this->has_pause_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pause_time(this), target, stream);
  }

  // repeated .bosdyn.api.Lease leases = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_leases_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_leases(i), target, stream);
  }

  // .bosdyn.api.mission.PlaySettings settings = 4;
  if (this->has_settings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::settings(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.mission.RestartMissionRequest)
  return target;
}

size_t RestartMissionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.mission.RestartMissionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bosdyn.api.Lease leases = 3;
  total_size += 1UL * this->_internal_leases_size();
  for (const auto& msg : this->leases_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .google.protobuf.Timestamp pause_time = 2;
  if (this->has_pause_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pause_time_);
  }

  // .bosdyn.api.mission.PlaySettings settings = 4;
  if (this->has_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *settings_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RestartMissionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.mission.RestartMissionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RestartMissionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RestartMissionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.mission.RestartMissionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.mission.RestartMissionRequest)
    MergeFrom(*source);
  }
}

void RestartMissionRequest::MergeFrom(const RestartMissionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.mission.RestartMissionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  leases_.MergeFrom(from.leases_);
  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
  if (from.has_pause_time()) {
    _internal_mutable_pause_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_pause_time());
  }
  if (from.has_settings()) {
    _internal_mutable_settings()->::bosdyn::api::mission::PlaySettings::MergeFrom(from._internal_settings());
  }
}

void RestartMissionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.mission.RestartMissionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RestartMissionRequest::CopyFrom(const RestartMissionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.mission.RestartMissionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestartMissionRequest::IsInitialized() const {
  return true;
}

void RestartMissionRequest::InternalSwap(RestartMissionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  leases_.InternalSwap(&other->leases_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RestartMissionRequest, settings_)
      + sizeof(RestartMissionRequest::settings_)
      - PROTOBUF_FIELD_OFFSET(RestartMissionRequest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RestartMissionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RestartMissionResponse::InitAsDefaultInstance() {
  ::bosdyn::api::mission::_RestartMissionResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
}
class RestartMissionResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const RestartMissionResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
RestartMissionResponse::_Internal::header(const RestartMissionResponse* msg) {
  return *msg->header_;
}
void RestartMissionResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void RestartMissionResponse::clear_lease_use_results() {
  lease_use_results_.Clear();
}
RestartMissionResponse::RestartMissionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  lease_use_results_(arena),
  failed_nodes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.mission.RestartMissionResponse)
}
RestartMissionResponse::RestartMissionResponse(const RestartMissionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      lease_use_results_(from.lease_use_results_),
      failed_nodes_(from.failed_nodes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.mission.RestartMissionResponse)
}

void RestartMissionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RestartMissionResponse_bosdyn_2fapi_2fmission_2fmission_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&header_)) + sizeof(status_));
}

RestartMissionResponse::~RestartMissionResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.mission.RestartMissionResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RestartMissionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void RestartMissionResponse::ArenaDtor(void* object) {
  RestartMissionResponse* _this = reinterpret_cast< RestartMissionResponse* >(object);
  (void)_this;
}
void RestartMissionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RestartMissionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RestartMissionResponse& RestartMissionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RestartMissionResponse_bosdyn_2fapi_2fmission_2fmission_2eproto.base);
  return *internal_default_instance();
}


void RestartMissionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.mission.RestartMissionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lease_use_results_.Clear();
  failed_nodes_.Clear();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RestartMissionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.mission.RestartMissionResponse.Status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::bosdyn::api::mission::RestartMissionResponse_Status>(val));
        } else goto handle_unusual;
        continue;
      // repeated .bosdyn.api.LeaseUseResult lease_use_results = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lease_use_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .bosdyn.api.mission.FailedNode failed_nodes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_failed_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RestartMissionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.mission.RestartMissionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.mission.RestartMissionResponse.Status status = 2;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // repeated .bosdyn.api.LeaseUseResult lease_use_results = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lease_use_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_lease_use_results(i), target, stream);
  }

  // repeated .bosdyn.api.mission.FailedNode failed_nodes = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_failed_nodes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_failed_nodes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.mission.RestartMissionResponse)
  return target;
}

size_t RestartMissionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.mission.RestartMissionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bosdyn.api.LeaseUseResult lease_use_results = 3;
  total_size += 1UL * this->_internal_lease_use_results_size();
  for (const auto& msg : this->lease_use_results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .bosdyn.api.mission.FailedNode failed_nodes = 4;
  total_size += 1UL * this->_internal_failed_nodes_size();
  for (const auto& msg : this->failed_nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.mission.RestartMissionResponse.Status status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RestartMissionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.mission.RestartMissionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RestartMissionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RestartMissionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.mission.RestartMissionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.mission.RestartMissionResponse)
    MergeFrom(*source);
  }
}

void RestartMissionResponse::MergeFrom(const RestartMissionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.mission.RestartMissionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lease_use_results_.MergeFrom(from.lease_use_results_);
  failed_nodes_.MergeFrom(from.failed_nodes_);
  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void RestartMissionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.mission.RestartMissionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RestartMissionResponse::CopyFrom(const RestartMissionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.mission.RestartMissionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestartMissionResponse::IsInitialized() const {
  return true;
}

void RestartMissionResponse::InternalSwap(RestartMissionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  lease_use_results_.InternalSwap(&other->lease_use_results_);
  failed_nodes_.InternalSwap(&other->failed_nodes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RestartMissionResponse, status_)
      + sizeof(RestartMissionResponse::status_)
      - PROTOBUF_FIELD_OFFSET(RestartMissionResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RestartMissionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoadMissionRequest::InitAsDefaultInstance() {
  ::bosdyn::api::mission::_LoadMissionRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
  ::bosdyn::api::mission::_LoadMissionRequest_default_instance_._instance.get_mutable()->root_ = const_cast< ::bosdyn::api::mission::Node*>(
      ::bosdyn::api::mission::Node::internal_default_instance());
}
class LoadMissionRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const LoadMissionRequest* msg);
  static const ::bosdyn::api::mission::Node& root(const LoadMissionRequest* msg);
};

const ::bosdyn::api::RequestHeader&
LoadMissionRequest::_Internal::header(const LoadMissionRequest* msg) {
  return *msg->header_;
}
const ::bosdyn::api::mission::Node&
LoadMissionRequest::_Internal::root(const LoadMissionRequest* msg) {
  return *msg->root_;
}
void LoadMissionRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void LoadMissionRequest::clear_root() {
  if (GetArena() == nullptr && root_ != nullptr) {
    delete root_;
  }
  root_ = nullptr;
}
void LoadMissionRequest::clear_leases() {
  leases_.Clear();
}
LoadMissionRequest::LoadMissionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  leases_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.mission.LoadMissionRequest)
}
LoadMissionRequest::LoadMissionRequest(const LoadMissionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      leases_(from.leases_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_root()) {
    root_ = new ::bosdyn::api::mission::Node(*from.root_);
  } else {
    root_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.mission.LoadMissionRequest)
}

void LoadMissionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoadMissionRequest_bosdyn_2fapi_2fmission_2fmission_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&root_) -
      reinterpret_cast<char*>(&header_)) + sizeof(root_));
}

LoadMissionRequest::~LoadMissionRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.mission.LoadMissionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoadMissionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete root_;
}

void LoadMissionRequest::ArenaDtor(void* object) {
  LoadMissionRequest* _this = reinterpret_cast< LoadMissionRequest* >(object);
  (void)_this;
}
void LoadMissionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadMissionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadMissionRequest& LoadMissionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadMissionRequest_bosdyn_2fapi_2fmission_2fmission_2eproto.base);
  return *internal_default_instance();
}


void LoadMissionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.mission.LoadMissionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  leases_.Clear();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && root_ != nullptr) {
    delete root_;
  }
  root_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadMissionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.mission.Node root = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_root(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bosdyn.api.Lease leases = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_leases(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadMissionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.mission.LoadMissionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.mission.Node root = 2;
  if (this->has_root()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::root(this), target, stream);
  }

  // repeated .bosdyn.api.Lease leases = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_leases_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_leases(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.mission.LoadMissionRequest)
  return target;
}

size_t LoadMissionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.mission.LoadMissionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bosdyn.api.Lease leases = 3;
  total_size += 1UL * this->_internal_leases_size();
  for (const auto& msg : this->leases_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.mission.Node root = 2;
  if (this->has_root()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *root_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadMissionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.mission.LoadMissionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadMissionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadMissionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.mission.LoadMissionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.mission.LoadMissionRequest)
    MergeFrom(*source);
  }
}

void LoadMissionRequest::MergeFrom(const LoadMissionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.mission.LoadMissionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  leases_.MergeFrom(from.leases_);
  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
  if (from.has_root()) {
    _internal_mutable_root()->::bosdyn::api::mission::Node::MergeFrom(from._internal_root());
  }
}

void LoadMissionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.mission.LoadMissionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadMissionRequest::CopyFrom(const LoadMissionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.mission.LoadMissionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadMissionRequest::IsInitialized() const {
  return true;
}

void LoadMissionRequest::InternalSwap(LoadMissionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  leases_.InternalSwap(&other->leases_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoadMissionRequest, root_)
      + sizeof(LoadMissionRequest::root_)
      - PROTOBUF_FIELD_OFFSET(LoadMissionRequest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadMissionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoadMissionResponse::InitAsDefaultInstance() {
  ::bosdyn::api::mission::_LoadMissionResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
  ::bosdyn::api::mission::_LoadMissionResponse_default_instance_._instance.get_mutable()->mission_info_ = const_cast< ::bosdyn::api::mission::MissionInfo*>(
      ::bosdyn::api::mission::MissionInfo::internal_default_instance());
}
class LoadMissionResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const LoadMissionResponse* msg);
  static const ::bosdyn::api::mission::MissionInfo& mission_info(const LoadMissionResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
LoadMissionResponse::_Internal::header(const LoadMissionResponse* msg) {
  return *msg->header_;
}
const ::bosdyn::api::mission::MissionInfo&
LoadMissionResponse::_Internal::mission_info(const LoadMissionResponse* msg) {
  return *msg->mission_info_;
}
void LoadMissionResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void LoadMissionResponse::clear_lease_use_results() {
  lease_use_results_.Clear();
}
LoadMissionResponse::LoadMissionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  lease_use_results_(arena),
  failed_nodes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.mission.LoadMissionResponse)
}
LoadMissionResponse::LoadMissionResponse(const LoadMissionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      lease_use_results_(from.lease_use_results_),
      failed_nodes_(from.failed_nodes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_mission_info()) {
    mission_info_ = new ::bosdyn::api::mission::MissionInfo(*from.mission_info_);
  } else {
    mission_info_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.mission.LoadMissionResponse)
}

void LoadMissionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoadMissionResponse_bosdyn_2fapi_2fmission_2fmission_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&header_)) + sizeof(status_));
}

LoadMissionResponse::~LoadMissionResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.mission.LoadMissionResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoadMissionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete mission_info_;
}

void LoadMissionResponse::ArenaDtor(void* object) {
  LoadMissionResponse* _this = reinterpret_cast< LoadMissionResponse* >(object);
  (void)_this;
}
void LoadMissionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadMissionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadMissionResponse& LoadMissionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadMissionResponse_bosdyn_2fapi_2fmission_2fmission_2eproto.base);
  return *internal_default_instance();
}


void LoadMissionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.mission.LoadMissionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lease_use_results_.Clear();
  failed_nodes_.Clear();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && mission_info_ != nullptr) {
    delete mission_info_;
  }
  mission_info_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadMissionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.mission.LoadMissionResponse.Status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::bosdyn::api::mission::LoadMissionResponse_Status>(val));
        } else goto handle_unusual;
        continue;
      // repeated .bosdyn.api.LeaseUseResult lease_use_results = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lease_use_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.mission.MissionInfo mission_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_mission_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bosdyn.api.mission.FailedNode failed_nodes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_failed_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadMissionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.mission.LoadMissionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.mission.LoadMissionResponse.Status status = 2;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // repeated .bosdyn.api.LeaseUseResult lease_use_results = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lease_use_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_lease_use_results(i), target, stream);
  }

  // .bosdyn.api.mission.MissionInfo mission_info = 4;
  if (this->has_mission_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::mission_info(this), target, stream);
  }

  // repeated .bosdyn.api.mission.FailedNode failed_nodes = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_failed_nodes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_failed_nodes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.mission.LoadMissionResponse)
  return target;
}

size_t LoadMissionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.mission.LoadMissionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bosdyn.api.LeaseUseResult lease_use_results = 3;
  total_size += 1UL * this->_internal_lease_use_results_size();
  for (const auto& msg : this->lease_use_results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .bosdyn.api.mission.FailedNode failed_nodes = 5;
  total_size += 1UL * this->_internal_failed_nodes_size();
  for (const auto& msg : this->failed_nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.mission.MissionInfo mission_info = 4;
  if (this->has_mission_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mission_info_);
  }

  // .bosdyn.api.mission.LoadMissionResponse.Status status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadMissionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.mission.LoadMissionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadMissionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadMissionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.mission.LoadMissionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.mission.LoadMissionResponse)
    MergeFrom(*source);
  }
}

void LoadMissionResponse::MergeFrom(const LoadMissionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.mission.LoadMissionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lease_use_results_.MergeFrom(from.lease_use_results_);
  failed_nodes_.MergeFrom(from.failed_nodes_);
  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.has_mission_info()) {
    _internal_mutable_mission_info()->::bosdyn::api::mission::MissionInfo::MergeFrom(from._internal_mission_info());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void LoadMissionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.mission.LoadMissionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadMissionResponse::CopyFrom(const LoadMissionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.mission.LoadMissionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadMissionResponse::IsInitialized() const {
  return true;
}

void LoadMissionResponse::InternalSwap(LoadMissionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  lease_use_results_.InternalSwap(&other->lease_use_results_);
  failed_nodes_.InternalSwap(&other->failed_nodes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoadMissionResponse, status_)
      + sizeof(LoadMissionResponse::status_)
      - PROTOBUF_FIELD_OFFSET(LoadMissionResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadMissionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetInfoRequest::InitAsDefaultInstance() {
  ::bosdyn::api::mission::_GetInfoRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
}
class GetInfoRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const GetInfoRequest* msg);
};

const ::bosdyn::api::RequestHeader&
GetInfoRequest::_Internal::header(const GetInfoRequest* msg) {
  return *msg->header_;
}
void GetInfoRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
GetInfoRequest::GetInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.mission.GetInfoRequest)
}
GetInfoRequest::GetInfoRequest(const GetInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.mission.GetInfoRequest)
}

void GetInfoRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetInfoRequest_bosdyn_2fapi_2fmission_2fmission_2eproto.base);
  header_ = nullptr;
}

GetInfoRequest::~GetInfoRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.mission.GetInfoRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void GetInfoRequest::ArenaDtor(void* object) {
  GetInfoRequest* _this = reinterpret_cast< GetInfoRequest* >(object);
  (void)_this;
}
void GetInfoRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetInfoRequest& GetInfoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetInfoRequest_bosdyn_2fapi_2fmission_2fmission_2eproto.base);
  return *internal_default_instance();
}


void GetInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.mission.GetInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.mission.GetInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.mission.GetInfoRequest)
  return target;
}

size_t GetInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.mission.GetInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.mission.GetInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.mission.GetInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.mission.GetInfoRequest)
    MergeFrom(*source);
  }
}

void GetInfoRequest::MergeFrom(const GetInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.mission.GetInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
}

void GetInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.mission.GetInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInfoRequest::CopyFrom(const GetInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.mission.GetInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInfoRequest::IsInitialized() const {
  return true;
}

void GetInfoRequest::InternalSwap(GetInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetInfoResponse::InitAsDefaultInstance() {
  ::bosdyn::api::mission::_GetInfoResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
  ::bosdyn::api::mission::_GetInfoResponse_default_instance_._instance.get_mutable()->mission_info_ = const_cast< ::bosdyn::api::mission::MissionInfo*>(
      ::bosdyn::api::mission::MissionInfo::internal_default_instance());
}
class GetInfoResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const GetInfoResponse* msg);
  static const ::bosdyn::api::mission::MissionInfo& mission_info(const GetInfoResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
GetInfoResponse::_Internal::header(const GetInfoResponse* msg) {
  return *msg->header_;
}
const ::bosdyn::api::mission::MissionInfo&
GetInfoResponse::_Internal::mission_info(const GetInfoResponse* msg) {
  return *msg->mission_info_;
}
void GetInfoResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
GetInfoResponse::GetInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.mission.GetInfoResponse)
}
GetInfoResponse::GetInfoResponse(const GetInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_mission_info()) {
    mission_info_ = new ::bosdyn::api::mission::MissionInfo(*from.mission_info_);
  } else {
    mission_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.mission.GetInfoResponse)
}

void GetInfoResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetInfoResponse_bosdyn_2fapi_2fmission_2fmission_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mission_info_) -
      reinterpret_cast<char*>(&header_)) + sizeof(mission_info_));
}

GetInfoResponse::~GetInfoResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.mission.GetInfoResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete mission_info_;
}

void GetInfoResponse::ArenaDtor(void* object) {
  GetInfoResponse* _this = reinterpret_cast< GetInfoResponse* >(object);
  (void)_this;
}
void GetInfoResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetInfoResponse& GetInfoResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetInfoResponse_bosdyn_2fapi_2fmission_2fmission_2eproto.base);
  return *internal_default_instance();
}


void GetInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.mission.GetInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && mission_info_ != nullptr) {
    delete mission_info_;
  }
  mission_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.mission.MissionInfo mission_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mission_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.mission.GetInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.mission.MissionInfo mission_info = 2;
  if (this->has_mission_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::mission_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.mission.GetInfoResponse)
  return target;
}

size_t GetInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.mission.GetInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.mission.MissionInfo mission_info = 2;
  if (this->has_mission_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mission_info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetInfoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.mission.GetInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetInfoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.mission.GetInfoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.mission.GetInfoResponse)
    MergeFrom(*source);
  }
}

void GetInfoResponse::MergeFrom(const GetInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.mission.GetInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.has_mission_info()) {
    _internal_mutable_mission_info()->::bosdyn::api::mission::MissionInfo::MergeFrom(from._internal_mission_info());
  }
}

void GetInfoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.mission.GetInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInfoResponse::CopyFrom(const GetInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.mission.GetInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInfoResponse::IsInitialized() const {
  return true;
}

void GetInfoResponse::InternalSwap(GetInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetInfoResponse, mission_info_)
      + sizeof(GetInfoResponse::mission_info_)
      - PROTOBUF_FIELD_OFFSET(GetInfoResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInfoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PauseMissionRequest::InitAsDefaultInstance() {
  ::bosdyn::api::mission::_PauseMissionRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
  ::bosdyn::api::mission::_PauseMissionRequest_default_instance_._instance.get_mutable()->lease_ = const_cast< ::bosdyn::api::Lease*>(
      ::bosdyn::api::Lease::internal_default_instance());
}
class PauseMissionRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const PauseMissionRequest* msg);
  static const ::bosdyn::api::Lease& lease(const PauseMissionRequest* msg);
};

const ::bosdyn::api::RequestHeader&
PauseMissionRequest::_Internal::header(const PauseMissionRequest* msg) {
  return *msg->header_;
}
const ::bosdyn::api::Lease&
PauseMissionRequest::_Internal::lease(const PauseMissionRequest* msg) {
  return *msg->lease_;
}
void PauseMissionRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void PauseMissionRequest::clear_lease() {
  if (GetArena() == nullptr && lease_ != nullptr) {
    delete lease_;
  }
  lease_ = nullptr;
}
PauseMissionRequest::PauseMissionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.mission.PauseMissionRequest)
}
PauseMissionRequest::PauseMissionRequest(const PauseMissionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_lease()) {
    lease_ = new ::bosdyn::api::Lease(*from.lease_);
  } else {
    lease_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.mission.PauseMissionRequest)
}

void PauseMissionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PauseMissionRequest_bosdyn_2fapi_2fmission_2fmission_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lease_) -
      reinterpret_cast<char*>(&header_)) + sizeof(lease_));
}

PauseMissionRequest::~PauseMissionRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.mission.PauseMissionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PauseMissionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete lease_;
}

void PauseMissionRequest::ArenaDtor(void* object) {
  PauseMissionRequest* _this = reinterpret_cast< PauseMissionRequest* >(object);
  (void)_this;
}
void PauseMissionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PauseMissionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PauseMissionRequest& PauseMissionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PauseMissionRequest_bosdyn_2fapi_2fmission_2fmission_2eproto.base);
  return *internal_default_instance();
}


void PauseMissionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.mission.PauseMissionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && lease_ != nullptr) {
    delete lease_;
  }
  lease_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PauseMissionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.Lease lease = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lease(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PauseMissionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.mission.PauseMissionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.Lease lease = 2;
  if (this->has_lease()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::lease(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.mission.PauseMissionRequest)
  return target;
}

size_t PauseMissionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.mission.PauseMissionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.Lease lease = 2;
  if (this->has_lease()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lease_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PauseMissionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.mission.PauseMissionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PauseMissionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PauseMissionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.mission.PauseMissionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.mission.PauseMissionRequest)
    MergeFrom(*source);
  }
}

void PauseMissionRequest::MergeFrom(const PauseMissionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.mission.PauseMissionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
  if (from.has_lease()) {
    _internal_mutable_lease()->::bosdyn::api::Lease::MergeFrom(from._internal_lease());
  }
}

void PauseMissionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.mission.PauseMissionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PauseMissionRequest::CopyFrom(const PauseMissionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.mission.PauseMissionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PauseMissionRequest::IsInitialized() const {
  return true;
}

void PauseMissionRequest::InternalSwap(PauseMissionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PauseMissionRequest, lease_)
      + sizeof(PauseMissionRequest::lease_)
      - PROTOBUF_FIELD_OFFSET(PauseMissionRequest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PauseMissionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PauseMissionResponse::InitAsDefaultInstance() {
  ::bosdyn::api::mission::_PauseMissionResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
  ::bosdyn::api::mission::_PauseMissionResponse_default_instance_._instance.get_mutable()->lease_use_result_ = const_cast< ::bosdyn::api::LeaseUseResult*>(
      ::bosdyn::api::LeaseUseResult::internal_default_instance());
}
class PauseMissionResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const PauseMissionResponse* msg);
  static const ::bosdyn::api::LeaseUseResult& lease_use_result(const PauseMissionResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
PauseMissionResponse::_Internal::header(const PauseMissionResponse* msg) {
  return *msg->header_;
}
const ::bosdyn::api::LeaseUseResult&
PauseMissionResponse::_Internal::lease_use_result(const PauseMissionResponse* msg) {
  return *msg->lease_use_result_;
}
void PauseMissionResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void PauseMissionResponse::clear_lease_use_result() {
  if (GetArena() == nullptr && lease_use_result_ != nullptr) {
    delete lease_use_result_;
  }
  lease_use_result_ = nullptr;
}
PauseMissionResponse::PauseMissionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.mission.PauseMissionResponse)
}
PauseMissionResponse::PauseMissionResponse(const PauseMissionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_lease_use_result()) {
    lease_use_result_ = new ::bosdyn::api::LeaseUseResult(*from.lease_use_result_);
  } else {
    lease_use_result_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.mission.PauseMissionResponse)
}

void PauseMissionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PauseMissionResponse_bosdyn_2fapi_2fmission_2fmission_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&header_)) + sizeof(status_));
}

PauseMissionResponse::~PauseMissionResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.mission.PauseMissionResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PauseMissionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete lease_use_result_;
}

void PauseMissionResponse::ArenaDtor(void* object) {
  PauseMissionResponse* _this = reinterpret_cast< PauseMissionResponse* >(object);
  (void)_this;
}
void PauseMissionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PauseMissionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PauseMissionResponse& PauseMissionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PauseMissionResponse_bosdyn_2fapi_2fmission_2fmission_2eproto.base);
  return *internal_default_instance();
}


void PauseMissionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.mission.PauseMissionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && lease_use_result_ != nullptr) {
    delete lease_use_result_;
  }
  lease_use_result_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PauseMissionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.mission.PauseMissionResponse.Status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::bosdyn::api::mission::PauseMissionResponse_Status>(val));
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.LeaseUseResult lease_use_result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_lease_use_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PauseMissionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.mission.PauseMissionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.mission.PauseMissionResponse.Status status = 2;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // .bosdyn.api.LeaseUseResult lease_use_result = 3;
  if (this->has_lease_use_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::lease_use_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.mission.PauseMissionResponse)
  return target;
}

size_t PauseMissionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.mission.PauseMissionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.LeaseUseResult lease_use_result = 3;
  if (this->has_lease_use_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lease_use_result_);
  }

  // .bosdyn.api.mission.PauseMissionResponse.Status status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PauseMissionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.mission.PauseMissionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PauseMissionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PauseMissionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.mission.PauseMissionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.mission.PauseMissionResponse)
    MergeFrom(*source);
  }
}

void PauseMissionResponse::MergeFrom(const PauseMissionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.mission.PauseMissionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.has_lease_use_result()) {
    _internal_mutable_lease_use_result()->::bosdyn::api::LeaseUseResult::MergeFrom(from._internal_lease_use_result());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void PauseMissionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.mission.PauseMissionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PauseMissionResponse::CopyFrom(const PauseMissionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.mission.PauseMissionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PauseMissionResponse::IsInitialized() const {
  return true;
}

void PauseMissionResponse::InternalSwap(PauseMissionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PauseMissionResponse, status_)
      + sizeof(PauseMissionResponse::status_)
      - PROTOBUF_FIELD_OFFSET(PauseMissionResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PauseMissionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetMissionRequest::InitAsDefaultInstance() {
  ::bosdyn::api::mission::_GetMissionRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
}
class GetMissionRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const GetMissionRequest* msg);
};

const ::bosdyn::api::RequestHeader&
GetMissionRequest::_Internal::header(const GetMissionRequest* msg) {
  return *msg->header_;
}
void GetMissionRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
GetMissionRequest::GetMissionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.mission.GetMissionRequest)
}
GetMissionRequest::GetMissionRequest(const GetMissionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.mission.GetMissionRequest)
}

void GetMissionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetMissionRequest_bosdyn_2fapi_2fmission_2fmission_2eproto.base);
  header_ = nullptr;
}

GetMissionRequest::~GetMissionRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.mission.GetMissionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetMissionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void GetMissionRequest::ArenaDtor(void* object) {
  GetMissionRequest* _this = reinterpret_cast< GetMissionRequest* >(object);
  (void)_this;
}
void GetMissionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetMissionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetMissionRequest& GetMissionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetMissionRequest_bosdyn_2fapi_2fmission_2fmission_2eproto.base);
  return *internal_default_instance();
}


void GetMissionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.mission.GetMissionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMissionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMissionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.mission.GetMissionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.mission.GetMissionRequest)
  return target;
}

size_t GetMissionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.mission.GetMissionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMissionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.mission.GetMissionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMissionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetMissionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.mission.GetMissionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.mission.GetMissionRequest)
    MergeFrom(*source);
  }
}

void GetMissionRequest::MergeFrom(const GetMissionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.mission.GetMissionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
}

void GetMissionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.mission.GetMissionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMissionRequest::CopyFrom(const GetMissionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.mission.GetMissionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMissionRequest::IsInitialized() const {
  return true;
}

void GetMissionRequest::InternalSwap(GetMissionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMissionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetMissionResponse::InitAsDefaultInstance() {
  ::bosdyn::api::mission::_GetMissionResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
  ::bosdyn::api::mission::_GetMissionResponse_default_instance_._instance.get_mutable()->root_ = const_cast< ::bosdyn::api::mission::Node*>(
      ::bosdyn::api::mission::Node::internal_default_instance());
}
class GetMissionResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const GetMissionResponse* msg);
  static const ::bosdyn::api::mission::Node& root(const GetMissionResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
GetMissionResponse::_Internal::header(const GetMissionResponse* msg) {
  return *msg->header_;
}
const ::bosdyn::api::mission::Node&
GetMissionResponse::_Internal::root(const GetMissionResponse* msg) {
  return *msg->root_;
}
void GetMissionResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void GetMissionResponse::clear_root() {
  if (GetArena() == nullptr && root_ != nullptr) {
    delete root_;
  }
  root_ = nullptr;
}
GetMissionResponse::GetMissionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.mission.GetMissionResponse)
}
GetMissionResponse::GetMissionResponse(const GetMissionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_root()) {
    root_ = new ::bosdyn::api::mission::Node(*from.root_);
  } else {
    root_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.mission.GetMissionResponse)
}

void GetMissionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetMissionResponse_bosdyn_2fapi_2fmission_2fmission_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(id_));
}

GetMissionResponse::~GetMissionResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.mission.GetMissionResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetMissionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete root_;
}

void GetMissionResponse::ArenaDtor(void* object) {
  GetMissionResponse* _this = reinterpret_cast< GetMissionResponse* >(object);
  (void)_this;
}
void GetMissionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetMissionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetMissionResponse& GetMissionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetMissionResponse_bosdyn_2fapi_2fmission_2fmission_2eproto.base);
  return *internal_default_instance();
}


void GetMissionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.mission.GetMissionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && root_ != nullptr) {
    delete root_;
  }
  root_ = nullptr;
  id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMissionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.mission.Node root = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_root(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMissionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.mission.GetMissionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.mission.Node root = 2;
  if (this->has_root()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::root(this), target, stream);
  }

  // int64 id = 3;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.mission.GetMissionResponse)
  return target;
}

size_t GetMissionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.mission.GetMissionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.mission.Node root = 2;
  if (this->has_root()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *root_);
  }

  // int64 id = 3;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMissionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.mission.GetMissionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMissionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetMissionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.mission.GetMissionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.mission.GetMissionResponse)
    MergeFrom(*source);
  }
}

void GetMissionResponse::MergeFrom(const GetMissionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.mission.GetMissionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.has_root()) {
    _internal_mutable_root()->::bosdyn::api::mission::Node::MergeFrom(from._internal_root());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void GetMissionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.mission.GetMissionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMissionResponse::CopyFrom(const GetMissionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.mission.GetMissionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMissionResponse::IsInitialized() const {
  return true;
}

void GetMissionResponse::InternalSwap(GetMissionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetMissionResponse, id_)
      + sizeof(GetMissionResponse::id_)
      - PROTOBUF_FIELD_OFFSET(GetMissionResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMissionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mission
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bosdyn::api::mission::GetStateRequest* Arena::CreateMaybeMessage< ::bosdyn::api::mission::GetStateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::mission::GetStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::mission::GetStateResponse* Arena::CreateMaybeMessage< ::bosdyn::api::mission::GetStateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::mission::GetStateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::mission::State_AnsweredQuestion* Arena::CreateMaybeMessage< ::bosdyn::api::mission::State_AnsweredQuestion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::mission::State_AnsweredQuestion >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::mission::State_NodeStatesAtTick_NodeState* Arena::CreateMaybeMessage< ::bosdyn::api::mission::State_NodeStatesAtTick_NodeState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::mission::State_NodeStatesAtTick_NodeState >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::mission::State_NodeStatesAtTick* Arena::CreateMaybeMessage< ::bosdyn::api::mission::State_NodeStatesAtTick >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::mission::State_NodeStatesAtTick >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::mission::State* Arena::CreateMaybeMessage< ::bosdyn::api::mission::State >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::mission::State >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::mission::Question* Arena::CreateMaybeMessage< ::bosdyn::api::mission::Question >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::mission::Question >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::mission::AnswerQuestionRequest* Arena::CreateMaybeMessage< ::bosdyn::api::mission::AnswerQuestionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::mission::AnswerQuestionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::mission::AnswerQuestionResponse* Arena::CreateMaybeMessage< ::bosdyn::api::mission::AnswerQuestionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::mission::AnswerQuestionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::mission::MissionInfo* Arena::CreateMaybeMessage< ::bosdyn::api::mission::MissionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::mission::MissionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::mission::NodeInfo* Arena::CreateMaybeMessage< ::bosdyn::api::mission::NodeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::mission::NodeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::mission::FailedNode* Arena::CreateMaybeMessage< ::bosdyn::api::mission::FailedNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::mission::FailedNode >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::mission::PlayMissionRequest* Arena::CreateMaybeMessage< ::bosdyn::api::mission::PlayMissionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::mission::PlayMissionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::mission::PlaySettings* Arena::CreateMaybeMessage< ::bosdyn::api::mission::PlaySettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::mission::PlaySettings >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::mission::PlayMissionResponse* Arena::CreateMaybeMessage< ::bosdyn::api::mission::PlayMissionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::mission::PlayMissionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::mission::RestartMissionRequest* Arena::CreateMaybeMessage< ::bosdyn::api::mission::RestartMissionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::mission::RestartMissionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::mission::RestartMissionResponse* Arena::CreateMaybeMessage< ::bosdyn::api::mission::RestartMissionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::mission::RestartMissionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::mission::LoadMissionRequest* Arena::CreateMaybeMessage< ::bosdyn::api::mission::LoadMissionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::mission::LoadMissionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::mission::LoadMissionResponse* Arena::CreateMaybeMessage< ::bosdyn::api::mission::LoadMissionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::mission::LoadMissionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::mission::GetInfoRequest* Arena::CreateMaybeMessage< ::bosdyn::api::mission::GetInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::mission::GetInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::mission::GetInfoResponse* Arena::CreateMaybeMessage< ::bosdyn::api::mission::GetInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::mission::GetInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::mission::PauseMissionRequest* Arena::CreateMaybeMessage< ::bosdyn::api::mission::PauseMissionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::mission::PauseMissionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::mission::PauseMissionResponse* Arena::CreateMaybeMessage< ::bosdyn::api::mission::PauseMissionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::mission::PauseMissionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::mission::GetMissionRequest* Arena::CreateMaybeMessage< ::bosdyn::api::mission::GetMissionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::mission::GetMissionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::mission::GetMissionResponse* Arena::CreateMaybeMessage< ::bosdyn::api::mission::GetMissionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::mission::GetMissionResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
