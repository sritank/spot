// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/mission/nodes.proto

#include "bosdyn/api/mission/nodes.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2frobot_5fcommand_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RobotCommand_bosdyn_2fapi_2frobot_5fcommand_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouteGenParams_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TravelParams_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fmission_2fnodes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Condition_Operand_bosdyn_2fapi_2fmission_2fnodes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fmission_2futil_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConstantValue_bosdyn_2fapi_2fmission_2futil_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fmission_2futil_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_KeyValue_bosdyn_2fapi_2fmission_2futil_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fmission_2fnodes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Node_bosdyn_2fapi_2fmission_2fnodes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fmission_2fnodes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Prompt_Option_bosdyn_2fapi_2fmission_2fnodes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fmission_2futil_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserData_bosdyn_2fapi_2fmission_2futil_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fmission_2futil_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VariableDeclaration_bosdyn_2fapi_2fmission_2futil_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Camera_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Any_google_2fprotobuf_2fany_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fduration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Duration_google_2fprotobuf_2fduration_2eproto;
namespace bosdyn {
namespace api {
namespace mission {
class NodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Node> _instance;
  const PROTOBUF_NAMESPACE_ID::Any* impl_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_reference_;
} _Node_default_instance_;
class SequenceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Sequence> _instance;
} _Sequence_default_instance_;
class SelectorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Selector> _instance;
} _Selector_default_instance_;
class RepeatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Repeat> _instance;
} _Repeat_default_instance_;
class RetryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Retry> _instance;
} _Retry_default_instance_;
class ForDurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ForDuration> _instance;
} _ForDuration_default_instance_;
class SimpleParallelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimpleParallel> _instance;
} _SimpleParallel_default_instance_;
class Condition_OperandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Condition_Operand> _instance;
  const ::bosdyn::api::mission::VariableDeclaration* var_;
  const ::bosdyn::api::mission::ConstantValue* const__;
} _Condition_Operand_default_instance_;
class ConditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Condition> _instance;
} _Condition_default_instance_;
class BosdynRobotStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BosdynRobotState> _instance;
} _BosdynRobotState_default_instance_;
class BosdynRobotCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BosdynRobotCommand> _instance;
} _BosdynRobotCommand_default_instance_;
class BosdynPowerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BosdynPowerRequest> _instance;
} _BosdynPowerRequest_default_instance_;
class BosdynNavigateToDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BosdynNavigateTo> _instance;
} _BosdynNavigateTo_default_instance_;
class BosdynGraphNavStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BosdynGraphNavState> _instance;
} _BosdynGraphNavState_default_instance_;
class BosdynGraphNavLocalizeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BosdynGraphNavLocalize> _instance;
} _BosdynGraphNavLocalize_default_instance_;
class RemoteGrpcDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoteGrpc> _instance;
} _RemoteGrpc_default_instance_;
class SleepDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Sleep> _instance;
} _Sleep_default_instance_;
class Prompt_OptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Prompt_Option> _instance;
} _Prompt_Option_default_instance_;
class PromptDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Prompt> _instance;
} _Prompt_default_instance_;
class SpotCamStoreMediaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpotCamStoreMedia> _instance;
} _SpotCamStoreMedia_default_instance_;
class DefineBlackboardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DefineBlackboard> _instance;
} _DefineBlackboard_default_instance_;
class SetBlackboardDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetBlackboard> _instance;
} _SetBlackboard_default_instance_;
class ConstantResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConstantResult> _instance;
} _ConstantResult_default_instance_;
}  // namespace mission
}  // namespace api
}  // namespace bosdyn
static void InitDefaultsscc_info_BosdynGraphNavLocalize_bosdyn_2fapi_2fmission_2fnodes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::mission::_BosdynGraphNavLocalize_default_instance_;
    new (ptr) ::bosdyn::api::mission::BosdynGraphNavLocalize();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::mission::BosdynGraphNavLocalize::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BosdynGraphNavLocalize_bosdyn_2fapi_2fmission_2fnodes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BosdynGraphNavLocalize_bosdyn_2fapi_2fmission_2fnodes_2eproto}, {}};

static void InitDefaultsscc_info_BosdynGraphNavState_bosdyn_2fapi_2fmission_2fnodes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::mission::_BosdynGraphNavState_default_instance_;
    new (ptr) ::bosdyn::api::mission::BosdynGraphNavState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::mission::BosdynGraphNavState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BosdynGraphNavState_bosdyn_2fapi_2fmission_2fnodes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BosdynGraphNavState_bosdyn_2fapi_2fmission_2fnodes_2eproto}, {
      &scc_info_Node_bosdyn_2fapi_2fmission_2fnodes_2eproto.base,}};

static void InitDefaultsscc_info_BosdynNavigateTo_bosdyn_2fapi_2fmission_2fnodes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::mission::_BosdynNavigateTo_default_instance_;
    new (ptr) ::bosdyn::api::mission::BosdynNavigateTo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::mission::BosdynNavigateTo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BosdynNavigateTo_bosdyn_2fapi_2fmission_2fnodes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BosdynNavigateTo_bosdyn_2fapi_2fmission_2fnodes_2eproto}, {
      &scc_info_RouteGenParams_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base,
      &scc_info_TravelParams_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto.base,}};

static void InitDefaultsscc_info_BosdynPowerRequest_bosdyn_2fapi_2fmission_2fnodes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::mission::_BosdynPowerRequest_default_instance_;
    new (ptr) ::bosdyn::api::mission::BosdynPowerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::mission::BosdynPowerRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BosdynPowerRequest_bosdyn_2fapi_2fmission_2fnodes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BosdynPowerRequest_bosdyn_2fapi_2fmission_2fnodes_2eproto}, {}};

static void InitDefaultsscc_info_BosdynRobotCommand_bosdyn_2fapi_2fmission_2fnodes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::mission::_BosdynRobotCommand_default_instance_;
    new (ptr) ::bosdyn::api::mission::BosdynRobotCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::mission::BosdynRobotCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BosdynRobotCommand_bosdyn_2fapi_2fmission_2fnodes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BosdynRobotCommand_bosdyn_2fapi_2fmission_2fnodes_2eproto}, {
      &scc_info_RobotCommand_bosdyn_2fapi_2frobot_5fcommand_2eproto.base,}};

static void InitDefaultsscc_info_BosdynRobotState_bosdyn_2fapi_2fmission_2fnodes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::mission::_BosdynRobotState_default_instance_;
    new (ptr) ::bosdyn::api::mission::BosdynRobotState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::mission::BosdynRobotState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BosdynRobotState_bosdyn_2fapi_2fmission_2fnodes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BosdynRobotState_bosdyn_2fapi_2fmission_2fnodes_2eproto}, {
      &scc_info_Node_bosdyn_2fapi_2fmission_2fnodes_2eproto.base,}};

static void InitDefaultsscc_info_Condition_bosdyn_2fapi_2fmission_2fnodes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::mission::_Condition_default_instance_;
    new (ptr) ::bosdyn::api::mission::Condition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::mission::Condition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Condition_bosdyn_2fapi_2fmission_2fnodes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Condition_bosdyn_2fapi_2fmission_2fnodes_2eproto}, {
      &scc_info_Condition_Operand_bosdyn_2fapi_2fmission_2fnodes_2eproto.base,}};

static void InitDefaultsscc_info_Condition_Operand_bosdyn_2fapi_2fmission_2fnodes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::mission::_Condition_Operand_default_instance_;
    new (ptr) ::bosdyn::api::mission::Condition_Operand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::mission::Condition_Operand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Condition_Operand_bosdyn_2fapi_2fmission_2fnodes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Condition_Operand_bosdyn_2fapi_2fmission_2fnodes_2eproto}, {
      &scc_info_VariableDeclaration_bosdyn_2fapi_2fmission_2futil_2eproto.base,
      &scc_info_ConstantValue_bosdyn_2fapi_2fmission_2futil_2eproto.base,}};

static void InitDefaultsscc_info_ConstantResult_bosdyn_2fapi_2fmission_2fnodes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::mission::_ConstantResult_default_instance_;
    new (ptr) ::bosdyn::api::mission::ConstantResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::mission::ConstantResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConstantResult_bosdyn_2fapi_2fmission_2fnodes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConstantResult_bosdyn_2fapi_2fmission_2fnodes_2eproto}, {}};

static void InitDefaultsscc_info_DefineBlackboard_bosdyn_2fapi_2fmission_2fnodes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::mission::_DefineBlackboard_default_instance_;
    new (ptr) ::bosdyn::api::mission::DefineBlackboard();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::mission::DefineBlackboard::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DefineBlackboard_bosdyn_2fapi_2fmission_2fnodes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DefineBlackboard_bosdyn_2fapi_2fmission_2fnodes_2eproto}, {
      &scc_info_KeyValue_bosdyn_2fapi_2fmission_2futil_2eproto.base,
      &scc_info_Node_bosdyn_2fapi_2fmission_2fnodes_2eproto.base,}};

static void InitDefaultsscc_info_ForDuration_bosdyn_2fapi_2fmission_2fnodes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::mission::_ForDuration_default_instance_;
    new (ptr) ::bosdyn::api::mission::ForDuration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::mission::ForDuration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ForDuration_bosdyn_2fapi_2fmission_2fnodes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ForDuration_bosdyn_2fapi_2fmission_2fnodes_2eproto}, {
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,
      &scc_info_Node_bosdyn_2fapi_2fmission_2fnodes_2eproto.base,}};

static void InitDefaultsscc_info_Node_bosdyn_2fapi_2fmission_2fnodes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::mission::_Node_default_instance_;
    new (ptr) ::bosdyn::api::mission::Node();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::mission::Node::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Node_bosdyn_2fapi_2fmission_2fnodes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Node_bosdyn_2fapi_2fmission_2fnodes_2eproto}, {
      &scc_info_UserData_bosdyn_2fapi_2fmission_2futil_2eproto.base,
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,
      &scc_info_KeyValue_bosdyn_2fapi_2fmission_2futil_2eproto.base,
      &scc_info_VariableDeclaration_bosdyn_2fapi_2fmission_2futil_2eproto.base,}};

static void InitDefaultsscc_info_Prompt_bosdyn_2fapi_2fmission_2fnodes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::mission::_Prompt_default_instance_;
    new (ptr) ::bosdyn::api::mission::Prompt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::mission::Prompt::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Prompt_bosdyn_2fapi_2fmission_2fnodes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Prompt_bosdyn_2fapi_2fmission_2fnodes_2eproto}, {
      &scc_info_Prompt_Option_bosdyn_2fapi_2fmission_2fnodes_2eproto.base,
      &scc_info_Node_bosdyn_2fapi_2fmission_2fnodes_2eproto.base,}};

static void InitDefaultsscc_info_Prompt_Option_bosdyn_2fapi_2fmission_2fnodes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::mission::_Prompt_Option_default_instance_;
    new (ptr) ::bosdyn::api::mission::Prompt_Option();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::mission::Prompt_Option::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Prompt_Option_bosdyn_2fapi_2fmission_2fnodes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Prompt_Option_bosdyn_2fapi_2fmission_2fnodes_2eproto}, {}};

static void InitDefaultsscc_info_RemoteGrpc_bosdyn_2fapi_2fmission_2fnodes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::mission::_RemoteGrpc_default_instance_;
    new (ptr) ::bosdyn::api::mission::RemoteGrpc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::mission::RemoteGrpc::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RemoteGrpc_bosdyn_2fapi_2fmission_2fnodes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RemoteGrpc_bosdyn_2fapi_2fmission_2fnodes_2eproto}, {
      &scc_info_KeyValue_bosdyn_2fapi_2fmission_2futil_2eproto.base,}};

static void InitDefaultsscc_info_Repeat_bosdyn_2fapi_2fmission_2fnodes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::mission::_Repeat_default_instance_;
    new (ptr) ::bosdyn::api::mission::Repeat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::mission::Repeat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Repeat_bosdyn_2fapi_2fmission_2fnodes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Repeat_bosdyn_2fapi_2fmission_2fnodes_2eproto}, {
      &scc_info_Node_bosdyn_2fapi_2fmission_2fnodes_2eproto.base,}};

static void InitDefaultsscc_info_Retry_bosdyn_2fapi_2fmission_2fnodes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::mission::_Retry_default_instance_;
    new (ptr) ::bosdyn::api::mission::Retry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::mission::Retry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Retry_bosdyn_2fapi_2fmission_2fnodes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Retry_bosdyn_2fapi_2fmission_2fnodes_2eproto}, {
      &scc_info_Node_bosdyn_2fapi_2fmission_2fnodes_2eproto.base,}};

static void InitDefaultsscc_info_Selector_bosdyn_2fapi_2fmission_2fnodes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::mission::_Selector_default_instance_;
    new (ptr) ::bosdyn::api::mission::Selector();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::mission::Selector::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Selector_bosdyn_2fapi_2fmission_2fnodes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Selector_bosdyn_2fapi_2fmission_2fnodes_2eproto}, {
      &scc_info_Node_bosdyn_2fapi_2fmission_2fnodes_2eproto.base,}};

static void InitDefaultsscc_info_Sequence_bosdyn_2fapi_2fmission_2fnodes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::mission::_Sequence_default_instance_;
    new (ptr) ::bosdyn::api::mission::Sequence();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::mission::Sequence::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Sequence_bosdyn_2fapi_2fmission_2fnodes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Sequence_bosdyn_2fapi_2fmission_2fnodes_2eproto}, {
      &scc_info_Node_bosdyn_2fapi_2fmission_2fnodes_2eproto.base,}};

static void InitDefaultsscc_info_SetBlackboard_bosdyn_2fapi_2fmission_2fnodes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::mission::_SetBlackboard_default_instance_;
    new (ptr) ::bosdyn::api::mission::SetBlackboard();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::mission::SetBlackboard::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetBlackboard_bosdyn_2fapi_2fmission_2fnodes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetBlackboard_bosdyn_2fapi_2fmission_2fnodes_2eproto}, {
      &scc_info_KeyValue_bosdyn_2fapi_2fmission_2futil_2eproto.base,}};

static void InitDefaultsscc_info_SimpleParallel_bosdyn_2fapi_2fmission_2fnodes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::mission::_SimpleParallel_default_instance_;
    new (ptr) ::bosdyn::api::mission::SimpleParallel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::mission::SimpleParallel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SimpleParallel_bosdyn_2fapi_2fmission_2fnodes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SimpleParallel_bosdyn_2fapi_2fmission_2fnodes_2eproto}, {
      &scc_info_Node_bosdyn_2fapi_2fmission_2fnodes_2eproto.base,}};

static void InitDefaultsscc_info_Sleep_bosdyn_2fapi_2fmission_2fnodes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::mission::_Sleep_default_instance_;
    new (ptr) ::bosdyn::api::mission::Sleep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::mission::Sleep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Sleep_bosdyn_2fapi_2fmission_2fnodes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Sleep_bosdyn_2fapi_2fmission_2fnodes_2eproto}, {}};

static void InitDefaultsscc_info_SpotCamStoreMedia_bosdyn_2fapi_2fmission_2fnodes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::mission::_SpotCamStoreMedia_default_instance_;
    new (ptr) ::bosdyn::api::mission::SpotCamStoreMedia();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::mission::SpotCamStoreMedia::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpotCamStoreMedia_bosdyn_2fapi_2fmission_2fnodes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SpotCamStoreMedia_bosdyn_2fapi_2fmission_2fnodes_2eproto}, {
      &scc_info_Camera_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bosdyn_2fapi_2fmission_2fnodes_2eproto[23];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_bosdyn_2fapi_2fmission_2fnodes_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bosdyn_2fapi_2fmission_2fnodes_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bosdyn_2fapi_2fmission_2fnodes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::Node, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::Node, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::Node, name_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::Node, user_data_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::Node, reference_id_),
  offsetof(::bosdyn::api::mission::NodeDefaultTypeInternal, impl_),
  offsetof(::bosdyn::api::mission::NodeDefaultTypeInternal, node_reference_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::Node, parameter_values_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::Node, overrides_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::Node, parameters_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::Node, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::Sequence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::Sequence, always_restart_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::Sequence, children_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::Selector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::Selector, always_restart_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::Selector, children_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::Repeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::Repeat, max_starts_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::Repeat, child_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::Retry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::Retry, max_attempts_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::Retry, child_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::ForDuration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::ForDuration, duration_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::ForDuration, child_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::SimpleParallel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::SimpleParallel, primary_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::SimpleParallel, secondary_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::Condition_Operand, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::Condition_Operand, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::bosdyn::api::mission::Condition_OperandDefaultTypeInternal, var_),
  offsetof(::bosdyn::api::mission::Condition_OperandDefaultTypeInternal, const__),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::Condition_Operand, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::Condition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::Condition, lhs_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::Condition, rhs_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::Condition, operation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::BosdynRobotState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::BosdynRobotState, service_name_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::BosdynRobotState, host_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::BosdynRobotState, child_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::BosdynRobotState, state_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::BosdynRobotCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::BosdynRobotCommand, service_name_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::BosdynRobotCommand, host_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::BosdynRobotCommand, command_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::BosdynPowerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::BosdynPowerRequest, service_name_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::BosdynPowerRequest, host_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::BosdynPowerRequest, request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::BosdynNavigateTo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::BosdynNavigateTo, service_name_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::BosdynNavigateTo, host_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::BosdynNavigateTo, destination_waypoint_id_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::BosdynNavigateTo, route_gen_params_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::BosdynNavigateTo, travel_params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::BosdynGraphNavState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::BosdynGraphNavState, service_name_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::BosdynGraphNavState, host_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::BosdynGraphNavState, child_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::BosdynGraphNavState, state_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::BosdynGraphNavLocalize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::BosdynGraphNavLocalize, service_name_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::BosdynGraphNavLocalize, host_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::RemoteGrpc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::RemoteGrpc, host_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::RemoteGrpc, service_name_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::RemoteGrpc, timeout_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::RemoteGrpc, lease_resources_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::RemoteGrpc, inputs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::Sleep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::Sleep, seconds_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::Sleep, restart_after_stop_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::Prompt_Option, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::Prompt_Option, text_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::Prompt_Option, answer_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::Prompt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::Prompt, always_reprompt_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::Prompt, text_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::Prompt, source_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::Prompt, options_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::Prompt, child_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::Prompt, for_autonomous_processing_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::SpotCamStoreMedia, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::SpotCamStoreMedia, service_name_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::SpotCamStoreMedia, host_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::SpotCamStoreMedia, camera_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::SpotCamStoreMedia, type_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::SpotCamStoreMedia, tag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::DefineBlackboard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::DefineBlackboard, blackboard_variables_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::DefineBlackboard, child_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::SetBlackboard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::SetBlackboard, blackboard_variables_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::ConstantResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::mission::ConstantResult, result_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::bosdyn::api::mission::Node)},
  { 14, -1, sizeof(::bosdyn::api::mission::Sequence)},
  { 21, -1, sizeof(::bosdyn::api::mission::Selector)},
  { 28, -1, sizeof(::bosdyn::api::mission::Repeat)},
  { 35, -1, sizeof(::bosdyn::api::mission::Retry)},
  { 42, -1, sizeof(::bosdyn::api::mission::ForDuration)},
  { 49, -1, sizeof(::bosdyn::api::mission::SimpleParallel)},
  { 56, -1, sizeof(::bosdyn::api::mission::Condition_Operand)},
  { 64, -1, sizeof(::bosdyn::api::mission::Condition)},
  { 72, -1, sizeof(::bosdyn::api::mission::BosdynRobotState)},
  { 81, -1, sizeof(::bosdyn::api::mission::BosdynRobotCommand)},
  { 89, -1, sizeof(::bosdyn::api::mission::BosdynPowerRequest)},
  { 97, -1, sizeof(::bosdyn::api::mission::BosdynNavigateTo)},
  { 107, -1, sizeof(::bosdyn::api::mission::BosdynGraphNavState)},
  { 116, -1, sizeof(::bosdyn::api::mission::BosdynGraphNavLocalize)},
  { 123, -1, sizeof(::bosdyn::api::mission::RemoteGrpc)},
  { 133, -1, sizeof(::bosdyn::api::mission::Sleep)},
  { 140, -1, sizeof(::bosdyn::api::mission::Prompt_Option)},
  { 147, -1, sizeof(::bosdyn::api::mission::Prompt)},
  { 158, -1, sizeof(::bosdyn::api::mission::SpotCamStoreMedia)},
  { 168, -1, sizeof(::bosdyn::api::mission::DefineBlackboard)},
  { 175, -1, sizeof(::bosdyn::api::mission::SetBlackboard)},
  { 181, -1, sizeof(::bosdyn::api::mission::ConstantResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::mission::_Node_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::mission::_Sequence_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::mission::_Selector_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::mission::_Repeat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::mission::_Retry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::mission::_ForDuration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::mission::_SimpleParallel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::mission::_Condition_Operand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::mission::_Condition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::mission::_BosdynRobotState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::mission::_BosdynRobotCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::mission::_BosdynPowerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::mission::_BosdynNavigateTo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::mission::_BosdynGraphNavState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::mission::_BosdynGraphNavLocalize_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::mission::_RemoteGrpc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::mission::_Sleep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::mission::_Prompt_Option_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::mission::_Prompt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::mission::_SpotCamStoreMedia_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::mission::_DefineBlackboard_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::mission::_SetBlackboard_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::mission::_ConstantResult_default_instance_),
};

const char descriptor_table_protodef_bosdyn_2fapi_2fmission_2fnodes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036bosdyn/api/mission/nodes.proto\022\022bosdyn"
  ".api.mission\032\031google/protobuf/any.proto\032"
  "\036google/protobuf/duration.proto\032 bosdyn/"
  "api/spot_cam/camera.proto\032!bosdyn/api/sp"
  "ot_cam/logging.proto\032\036bosdyn/api/robot_c"
  "ommand.proto\032\026bosdyn/api/power.proto\032$bo"
  "sdyn/api/graph_nav/graph_nav.proto\032\035bosd"
  "yn/api/mission/util.proto\"\311\002\n\004Node\022\014\n\004na"
  "me\030\001 \001(\t\022/\n\tuser_data\030\002 \001(\0132\034.bosdyn.api"
  ".mission.UserData\022\024\n\014reference_id\030\003 \001(\t\022"
  "$\n\004impl\030\004 \001(\0132\024.google.protobuf.AnyH\000\022\030\n"
  "\016node_reference\030\005 \001(\tH\000\0226\n\020parameter_val"
  "ues\030\006 \003(\0132\034.bosdyn.api.mission.KeyValue\022"
  "/\n\toverrides\030\007 \003(\0132\034.bosdyn.api.mission."
  "KeyValue\022;\n\nparameters\030\010 \003(\0132\'.bosdyn.ap"
  "i.mission.VariableDeclarationB\006\n\004type\"N\n"
  "\010Sequence\022\026\n\016always_restart\030\001 \001(\010\022*\n\010chi"
  "ldren\030\002 \003(\0132\030.bosdyn.api.mission.Node\"N\n"
  "\010Selector\022\026\n\016always_restart\030\001 \001(\010\022*\n\010chi"
  "ldren\030\002 \003(\0132\030.bosdyn.api.mission.Node\"E\n"
  "\006Repeat\022\022\n\nmax_starts\030\001 \001(\005\022\'\n\005child\030\004 \001"
  "(\0132\030.bosdyn.api.mission.Node\"F\n\005Retry\022\024\n"
  "\014max_attempts\030\001 \001(\005\022\'\n\005child\030\002 \001(\0132\030.bos"
  "dyn.api.mission.Node\"c\n\013ForDuration\022+\n\010d"
  "uration\030\001 \001(\0132\031.google.protobuf.Duration"
  "\022\'\n\005child\030\002 \001(\0132\030.bosdyn.api.mission.Nod"
  "e\"h\n\016SimpleParallel\022)\n\007primary\030\001 \001(\0132\030.b"
  "osdyn.api.mission.Node\022+\n\tsecondary\030\002 \001("
  "\0132\030.bosdyn.api.mission.Node\"\254\003\n\tConditio"
  "n\0222\n\003lhs\030\001 \001(\0132%.bosdyn.api.mission.Cond"
  "ition.Operand\0222\n\003rhs\030\002 \001(\0132%.bosdyn.api."
  "mission.Condition.Operand\0228\n\toperation\030\005"
  " \001(\0162%.bosdyn.api.mission.Condition.Comp"
  "are\032}\n\007Operand\0226\n\003var\030\001 \001(\0132\'.bosdyn.api"
  ".mission.VariableDeclarationH\000\0222\n\005const\030"
  "\002 \001(\0132!.bosdyn.api.mission.ConstantValue"
  "H\000B\006\n\004type\"~\n\007Compare\022\023\n\017COMPARE_UNKNOWN"
  "\020\000\022\016\n\nCOMPARE_EQ\020\001\022\016\n\nCOMPARE_NE\020\002\022\016\n\nCO"
  "MPARE_LT\020\003\022\016\n\nCOMPARE_GT\020\004\022\016\n\nCOMPARE_LE"
  "\020\005\022\016\n\nCOMPARE_GE\020\006\"s\n\020BosdynRobotState\022\024"
  "\n\014service_name\030\001 \001(\t\022\014\n\004host\030\002 \001(\t\022\'\n\005ch"
  "ild\030\003 \001(\0132\030.bosdyn.api.mission.Node\022\022\n\ns"
  "tate_name\030\004 \001(\t\"c\n\022BosdynRobotCommand\022\024\n"
  "\014service_name\030\001 \001(\t\022\014\n\004host\030\002 \001(\t\022)\n\007com"
  "mand\030\003 \001(\0132\030.bosdyn.api.RobotCommand\"r\n\022"
  "BosdynPowerRequest\022\024\n\014service_name\030\001 \001(\t"
  "\022\014\n\004host\030\002 \001(\t\0228\n\007request\030\004 \001(\0162\'.bosdyn"
  ".api.PowerCommandRequest.Request\"\322\001\n\020Bos"
  "dynNavigateTo\022\024\n\014service_name\030\001 \001(\t\022\014\n\004h"
  "ost\030\002 \001(\t\022\037\n\027destination_waypoint_id\030\003 \001"
  "(\t\022>\n\020route_gen_params\030\004 \001(\0132$.bosdyn.ap"
  "i.graph_nav.RouteGenParams\0229\n\rtravel_par"
  "ams\030\005 \001(\0132\".bosdyn.api.graph_nav.TravelP"
  "arams\"v\n\023BosdynGraphNavState\022\024\n\014service_"
  "name\030\001 \001(\t\022\014\n\004host\030\002 \001(\t\022\'\n\005child\030\003 \001(\0132"
  "\030.bosdyn.api.mission.Node\022\022\n\nstate_name\030"
  "\004 \001(\t\"<\n\026BosdynGraphNavLocalize\022\024\n\014servi"
  "ce_name\030\001 \001(\t\022\014\n\004host\030\002 \001(\t\"\210\001\n\nRemoteGr"
  "pc\022\014\n\004host\030\001 \001(\t\022\024\n\014service_name\030\003 \001(\t\022\017"
  "\n\007timeout\030\004 \001(\002\022\027\n\017lease_resources\030\005 \003(\t"
  "\022,\n\006inputs\030\006 \003(\0132\034.bosdyn.api.mission.Ke"
  "yValue\"4\n\005Sleep\022\017\n\007seconds\030\001 \001(\002\022\032\n\022rest"
  "art_after_stop\030\002 \001(\010\"\354\001\n\006Prompt\022\027\n\017alway"
  "s_reprompt\030\001 \001(\010\022\014\n\004text\030\002 \001(\t\022\016\n\006source"
  "\030\003 \001(\t\0222\n\007options\030\004 \003(\0132!.bosdyn.api.mis"
  "sion.Prompt.Option\022\'\n\005child\030\005 \001(\0132\030.bosd"
  "yn.api.mission.Node\022!\n\031for_autonomous_pr"
  "ocessing\030\006 \001(\010\032+\n\006Option\022\014\n\004text\030\001 \001(\t\022\023"
  "\n\013answer_code\030\002 \001(\003\"\251\001\n\021SpotCamStoreMedi"
  "a\022\024\n\014service_name\030\001 \001(\t\022\014\n\004host\030\002 \001(\t\022+\n"
  "\006camera\030\003 \001(\0132\033.bosdyn.api.spot_cam.Came"
  "ra\0226\n\004type\030\004 \001(\0162(.bosdyn.api.spot_cam.L"
  "ogpoint.RecordType\022\013\n\003tag\030\005 \001(\t\"w\n\020Defin"
  "eBlackboard\022:\n\024blackboard_variables\030\001 \003("
  "\0132\034.bosdyn.api.mission.KeyValue\022\'\n\005child"
  "\030\002 \001(\0132\030.bosdyn.api.mission.Node\"K\n\rSetB"
  "lackboard\022:\n\024blackboard_variables\030\001 \003(\0132"
  "\034.bosdyn.api.mission.KeyValue\"<\n\016Constan"
  "tResult\022*\n\006result\030\001 \001(\0162\032.bosdyn.api.mis"
  "sion.ResultB\014B\nNodesProtob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bosdyn_2fapi_2fmission_2fnodes_2eproto_deps[8] = {
  &::descriptor_table_bosdyn_2fapi_2fgraph_5fnav_2fgraph_5fnav_2eproto,
  &::descriptor_table_bosdyn_2fapi_2fmission_2futil_2eproto,
  &::descriptor_table_bosdyn_2fapi_2fpower_2eproto,
  &::descriptor_table_bosdyn_2fapi_2frobot_5fcommand_2eproto,
  &::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2fcamera_2eproto,
  &::descriptor_table_bosdyn_2fapi_2fspot_5fcam_2flogging_2eproto,
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bosdyn_2fapi_2fmission_2fnodes_2eproto_sccs[23] = {
  &scc_info_BosdynGraphNavLocalize_bosdyn_2fapi_2fmission_2fnodes_2eproto.base,
  &scc_info_BosdynGraphNavState_bosdyn_2fapi_2fmission_2fnodes_2eproto.base,
  &scc_info_BosdynNavigateTo_bosdyn_2fapi_2fmission_2fnodes_2eproto.base,
  &scc_info_BosdynPowerRequest_bosdyn_2fapi_2fmission_2fnodes_2eproto.base,
  &scc_info_BosdynRobotCommand_bosdyn_2fapi_2fmission_2fnodes_2eproto.base,
  &scc_info_BosdynRobotState_bosdyn_2fapi_2fmission_2fnodes_2eproto.base,
  &scc_info_Condition_bosdyn_2fapi_2fmission_2fnodes_2eproto.base,
  &scc_info_Condition_Operand_bosdyn_2fapi_2fmission_2fnodes_2eproto.base,
  &scc_info_ConstantResult_bosdyn_2fapi_2fmission_2fnodes_2eproto.base,
  &scc_info_DefineBlackboard_bosdyn_2fapi_2fmission_2fnodes_2eproto.base,
  &scc_info_ForDuration_bosdyn_2fapi_2fmission_2fnodes_2eproto.base,
  &scc_info_Node_bosdyn_2fapi_2fmission_2fnodes_2eproto.base,
  &scc_info_Prompt_bosdyn_2fapi_2fmission_2fnodes_2eproto.base,
  &scc_info_Prompt_Option_bosdyn_2fapi_2fmission_2fnodes_2eproto.base,
  &scc_info_RemoteGrpc_bosdyn_2fapi_2fmission_2fnodes_2eproto.base,
  &scc_info_Repeat_bosdyn_2fapi_2fmission_2fnodes_2eproto.base,
  &scc_info_Retry_bosdyn_2fapi_2fmission_2fnodes_2eproto.base,
  &scc_info_Selector_bosdyn_2fapi_2fmission_2fnodes_2eproto.base,
  &scc_info_Sequence_bosdyn_2fapi_2fmission_2fnodes_2eproto.base,
  &scc_info_SetBlackboard_bosdyn_2fapi_2fmission_2fnodes_2eproto.base,
  &scc_info_SimpleParallel_bosdyn_2fapi_2fmission_2fnodes_2eproto.base,
  &scc_info_Sleep_bosdyn_2fapi_2fmission_2fnodes_2eproto.base,
  &scc_info_SpotCamStoreMedia_bosdyn_2fapi_2fmission_2fnodes_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bosdyn_2fapi_2fmission_2fnodes_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fmission_2fnodes_2eproto = {
  false, false, descriptor_table_protodef_bosdyn_2fapi_2fmission_2fnodes_2eproto, "bosdyn/api/mission/nodes.proto", 3193,
  &descriptor_table_bosdyn_2fapi_2fmission_2fnodes_2eproto_once, descriptor_table_bosdyn_2fapi_2fmission_2fnodes_2eproto_sccs, descriptor_table_bosdyn_2fapi_2fmission_2fnodes_2eproto_deps, 23, 8,
  schemas, file_default_instances, TableStruct_bosdyn_2fapi_2fmission_2fnodes_2eproto::offsets,
  file_level_metadata_bosdyn_2fapi_2fmission_2fnodes_2eproto, 23, file_level_enum_descriptors_bosdyn_2fapi_2fmission_2fnodes_2eproto, file_level_service_descriptors_bosdyn_2fapi_2fmission_2fnodes_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bosdyn_2fapi_2fmission_2fnodes_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bosdyn_2fapi_2fmission_2fnodes_2eproto)), true);
namespace bosdyn {
namespace api {
namespace mission {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Condition_Compare_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2fmission_2fnodes_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2fmission_2fnodes_2eproto[0];
}
bool Condition_Compare_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Condition_Compare Condition::COMPARE_UNKNOWN;
constexpr Condition_Compare Condition::COMPARE_EQ;
constexpr Condition_Compare Condition::COMPARE_NE;
constexpr Condition_Compare Condition::COMPARE_LT;
constexpr Condition_Compare Condition::COMPARE_GT;
constexpr Condition_Compare Condition::COMPARE_LE;
constexpr Condition_Compare Condition::COMPARE_GE;
constexpr Condition_Compare Condition::Compare_MIN;
constexpr Condition_Compare Condition::Compare_MAX;
constexpr int Condition::Compare_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Node::InitAsDefaultInstance() {
  ::bosdyn::api::mission::_Node_default_instance_._instance.get_mutable()->user_data_ = const_cast< ::bosdyn::api::mission::UserData*>(
      ::bosdyn::api::mission::UserData::internal_default_instance());
  ::bosdyn::api::mission::_Node_default_instance_.impl_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
  ::bosdyn::api::mission::_Node_default_instance_.node_reference_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
class Node::_Internal {
 public:
  static const ::bosdyn::api::mission::UserData& user_data(const Node* msg);
  static const PROTOBUF_NAMESPACE_ID::Any& impl(const Node* msg);
};

const ::bosdyn::api::mission::UserData&
Node::_Internal::user_data(const Node* msg) {
  return *msg->user_data_;
}
const PROTOBUF_NAMESPACE_ID::Any&
Node::_Internal::impl(const Node* msg) {
  return *msg->type_.impl_;
}
void Node::clear_user_data() {
  if (GetArena() == nullptr && user_data_ != nullptr) {
    delete user_data_;
  }
  user_data_ = nullptr;
}
void Node::set_allocated_impl(PROTOBUF_NAMESPACE_ID::Any* impl) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_type();
  if (impl) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(impl)->GetArena();
    if (message_arena != submessage_arena) {
      impl = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, impl, submessage_arena);
    }
    set_has_impl();
    type_.impl_ = impl;
  }
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.mission.Node.impl)
}
void Node::clear_impl() {
  if (_internal_has_impl()) {
    if (GetArena() == nullptr) {
      delete type_.impl_;
    }
    clear_has_type();
  }
}
void Node::clear_parameter_values() {
  parameter_values_.Clear();
}
void Node::clear_overrides() {
  overrides_.Clear();
}
void Node::clear_parameters() {
  parameters_.Clear();
}
Node::Node(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  parameter_values_(arena),
  overrides_(arena),
  parameters_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.mission.Node)
}
Node::Node(const Node& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      parameter_values_(from.parameter_values_),
      overrides_(from.overrides_),
      parameters_(from.parameters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  reference_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reference_id().empty()) {
    reference_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_reference_id(),
      GetArena());
  }
  if (from._internal_has_user_data()) {
    user_data_ = new ::bosdyn::api::mission::UserData(*from.user_data_);
  } else {
    user_data_ = nullptr;
  }
  clear_has_type();
  switch (from.type_case()) {
    case kImpl: {
      _internal_mutable_impl()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_impl());
      break;
    }
    case kNodeReference: {
      _internal_set_node_reference(from._internal_node_reference());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.mission.Node)
}

void Node::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Node_bosdyn_2fapi_2fmission_2fnodes_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_data_ = nullptr;
  clear_has_type();
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:bosdyn.api.mission.Node)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Node::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_data_;
  if (has_type()) {
    clear_type();
  }
}

void Node::ArenaDtor(void* object) {
  Node* _this = reinterpret_cast< Node* >(object);
  (void)_this;
}
void Node::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Node::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Node& Node::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Node_bosdyn_2fapi_2fmission_2fnodes_2eproto.base);
  return *internal_default_instance();
}


void Node::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:bosdyn.api.mission.Node)
  switch (type_case()) {
    case kImpl: {
      if (GetArena() == nullptr) {
        delete type_.impl_;
      }
      break;
    }
    case kNodeReference: {
      type_.node_reference_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.mission.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parameter_values_.Clear();
  overrides_.Clear();
  parameters_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reference_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && user_data_ != nullptr) {
    delete user_data_;
  }
  user_data_ = nullptr;
  clear_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Node::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.mission.Node.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.mission.UserData user_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reference_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_reference_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.mission.Node.reference_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any impl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_impl(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string node_reference = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_node_reference();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.mission.Node.node_reference"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bosdyn.api.mission.KeyValue parameter_values = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parameter_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .bosdyn.api.mission.KeyValue overrides = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_overrides(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .bosdyn.api.mission.VariableDeclaration parameters = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parameters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Node::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.mission.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.mission.Node.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .bosdyn.api.mission.UserData user_data = 2;
  if (this->has_user_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::user_data(this), target, stream);
  }

  // string reference_id = 3;
  if (this->reference_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reference_id().data(), static_cast<int>(this->_internal_reference_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.mission.Node.reference_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_reference_id(), target);
  }

  // .google.protobuf.Any impl = 4;
  if (_internal_has_impl()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::impl(this), target, stream);
  }

  // string node_reference = 5;
  if (_internal_has_node_reference()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_reference().data(), static_cast<int>(this->_internal_node_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.mission.Node.node_reference");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_node_reference(), target);
  }

  // repeated .bosdyn.api.mission.KeyValue parameter_values = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_parameter_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_parameter_values(i), target, stream);
  }

  // repeated .bosdyn.api.mission.KeyValue overrides = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_overrides_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_overrides(i), target, stream);
  }

  // repeated .bosdyn.api.mission.VariableDeclaration parameters = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_parameters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_parameters(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.mission.Node)
  return target;
}

size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.mission.Node)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bosdyn.api.mission.KeyValue parameter_values = 6;
  total_size += 1UL * this->_internal_parameter_values_size();
  for (const auto& msg : this->parameter_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .bosdyn.api.mission.KeyValue overrides = 7;
  total_size += 1UL * this->_internal_overrides_size();
  for (const auto& msg : this->overrides_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .bosdyn.api.mission.VariableDeclaration parameters = 8;
  total_size += 1UL * this->_internal_parameters_size();
  for (const auto& msg : this->parameters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string reference_id = 3;
  if (this->reference_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reference_id());
  }

  // .bosdyn.api.mission.UserData user_data = 2;
  if (this->has_user_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_data_);
  }

  switch (type_case()) {
    // .google.protobuf.Any impl = 4;
    case kImpl: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.impl_);
      break;
    }
    // string node_reference = 5;
    case kNodeReference: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_node_reference());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Node::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.mission.Node)
  GOOGLE_DCHECK_NE(&from, this);
  const Node* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Node>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.mission.Node)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.mission.Node)
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.mission.Node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  parameter_values_.MergeFrom(from.parameter_values_);
  overrides_.MergeFrom(from.overrides_);
  parameters_.MergeFrom(from.parameters_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.reference_id().size() > 0) {
    _internal_set_reference_id(from._internal_reference_id());
  }
  if (from.has_user_data()) {
    _internal_mutable_user_data()->::bosdyn::api::mission::UserData::MergeFrom(from._internal_user_data());
  }
  switch (from.type_case()) {
    case kImpl: {
      _internal_mutable_impl()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_impl());
      break;
    }
    case kNodeReference: {
      _internal_set_node_reference(from._internal_node_reference());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void Node::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.mission.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.mission.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  return true;
}

void Node::InternalSwap(Node* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  parameter_values_.InternalSwap(&other->parameter_values_);
  overrides_.InternalSwap(&other->overrides_);
  parameters_.InternalSwap(&other->parameters_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  reference_id_.Swap(&other->reference_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(user_data_, other->user_data_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Node::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Sequence::InitAsDefaultInstance() {
}
class Sequence::_Internal {
 public:
};

Sequence::Sequence(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  children_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.mission.Sequence)
}
Sequence::Sequence(const Sequence& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      children_(from.children_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  always_restart_ = from.always_restart_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.mission.Sequence)
}

void Sequence::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Sequence_bosdyn_2fapi_2fmission_2fnodes_2eproto.base);
  always_restart_ = false;
}

Sequence::~Sequence() {
  // @@protoc_insertion_point(destructor:bosdyn.api.mission.Sequence)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Sequence::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Sequence::ArenaDtor(void* object) {
  Sequence* _this = reinterpret_cast< Sequence* >(object);
  (void)_this;
}
void Sequence::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Sequence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Sequence& Sequence::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Sequence_bosdyn_2fapi_2fmission_2fnodes_2eproto.base);
  return *internal_default_instance();
}


void Sequence::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.mission.Sequence)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  children_.Clear();
  always_restart_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Sequence::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool always_restart = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          always_restart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bosdyn.api.mission.Node children = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_children(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Sequence::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.mission.Sequence)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool always_restart = 1;
  if (this->always_restart() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_always_restart(), target);
  }

  // repeated .bosdyn.api.mission.Node children = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_children_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_children(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.mission.Sequence)
  return target;
}

size_t Sequence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.mission.Sequence)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bosdyn.api.mission.Node children = 2;
  total_size += 1UL * this->_internal_children_size();
  for (const auto& msg : this->children_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool always_restart = 1;
  if (this->always_restart() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sequence::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.mission.Sequence)
  GOOGLE_DCHECK_NE(&from, this);
  const Sequence* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Sequence>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.mission.Sequence)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.mission.Sequence)
    MergeFrom(*source);
  }
}

void Sequence::MergeFrom(const Sequence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.mission.Sequence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  children_.MergeFrom(from.children_);
  if (from.always_restart() != 0) {
    _internal_set_always_restart(from._internal_always_restart());
  }
}

void Sequence::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.mission.Sequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sequence::CopyFrom(const Sequence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.mission.Sequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sequence::IsInitialized() const {
  return true;
}

void Sequence::InternalSwap(Sequence* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  children_.InternalSwap(&other->children_);
  swap(always_restart_, other->always_restart_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Sequence::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Selector::InitAsDefaultInstance() {
}
class Selector::_Internal {
 public:
};

Selector::Selector(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  children_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.mission.Selector)
}
Selector::Selector(const Selector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      children_(from.children_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  always_restart_ = from.always_restart_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.mission.Selector)
}

void Selector::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Selector_bosdyn_2fapi_2fmission_2fnodes_2eproto.base);
  always_restart_ = false;
}

Selector::~Selector() {
  // @@protoc_insertion_point(destructor:bosdyn.api.mission.Selector)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Selector::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Selector::ArenaDtor(void* object) {
  Selector* _this = reinterpret_cast< Selector* >(object);
  (void)_this;
}
void Selector::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Selector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Selector& Selector::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Selector_bosdyn_2fapi_2fmission_2fnodes_2eproto.base);
  return *internal_default_instance();
}


void Selector::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.mission.Selector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  children_.Clear();
  always_restart_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Selector::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool always_restart = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          always_restart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bosdyn.api.mission.Node children = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_children(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Selector::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.mission.Selector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool always_restart = 1;
  if (this->always_restart() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_always_restart(), target);
  }

  // repeated .bosdyn.api.mission.Node children = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_children_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_children(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.mission.Selector)
  return target;
}

size_t Selector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.mission.Selector)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bosdyn.api.mission.Node children = 2;
  total_size += 1UL * this->_internal_children_size();
  for (const auto& msg : this->children_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool always_restart = 1;
  if (this->always_restart() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Selector::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.mission.Selector)
  GOOGLE_DCHECK_NE(&from, this);
  const Selector* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Selector>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.mission.Selector)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.mission.Selector)
    MergeFrom(*source);
  }
}

void Selector::MergeFrom(const Selector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.mission.Selector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  children_.MergeFrom(from.children_);
  if (from.always_restart() != 0) {
    _internal_set_always_restart(from._internal_always_restart());
  }
}

void Selector::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.mission.Selector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Selector::CopyFrom(const Selector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.mission.Selector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Selector::IsInitialized() const {
  return true;
}

void Selector::InternalSwap(Selector* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  children_.InternalSwap(&other->children_);
  swap(always_restart_, other->always_restart_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Selector::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Repeat::InitAsDefaultInstance() {
  ::bosdyn::api::mission::_Repeat_default_instance_._instance.get_mutable()->child_ = const_cast< ::bosdyn::api::mission::Node*>(
      ::bosdyn::api::mission::Node::internal_default_instance());
}
class Repeat::_Internal {
 public:
  static const ::bosdyn::api::mission::Node& child(const Repeat* msg);
};

const ::bosdyn::api::mission::Node&
Repeat::_Internal::child(const Repeat* msg) {
  return *msg->child_;
}
Repeat::Repeat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.mission.Repeat)
}
Repeat::Repeat(const Repeat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_child()) {
    child_ = new ::bosdyn::api::mission::Node(*from.child_);
  } else {
    child_ = nullptr;
  }
  max_starts_ = from.max_starts_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.mission.Repeat)
}

void Repeat::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Repeat_bosdyn_2fapi_2fmission_2fnodes_2eproto.base);
  ::memset(&child_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_starts_) -
      reinterpret_cast<char*>(&child_)) + sizeof(max_starts_));
}

Repeat::~Repeat() {
  // @@protoc_insertion_point(destructor:bosdyn.api.mission.Repeat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Repeat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete child_;
}

void Repeat::ArenaDtor(void* object) {
  Repeat* _this = reinterpret_cast< Repeat* >(object);
  (void)_this;
}
void Repeat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Repeat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Repeat& Repeat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Repeat_bosdyn_2fapi_2fmission_2fnodes_2eproto.base);
  return *internal_default_instance();
}


void Repeat::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.mission.Repeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && child_ != nullptr) {
    delete child_;
  }
  child_ = nullptr;
  max_starts_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Repeat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 max_starts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          max_starts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.mission.Node child = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_child(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Repeat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.mission.Repeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_starts = 1;
  if (this->max_starts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_max_starts(), target);
  }

  // .bosdyn.api.mission.Node child = 4;
  if (this->has_child()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::child(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.mission.Repeat)
  return target;
}

size_t Repeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.mission.Repeat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.mission.Node child = 4;
  if (this->has_child()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *child_);
  }

  // int32 max_starts = 1;
  if (this->max_starts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_starts());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Repeat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.mission.Repeat)
  GOOGLE_DCHECK_NE(&from, this);
  const Repeat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Repeat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.mission.Repeat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.mission.Repeat)
    MergeFrom(*source);
  }
}

void Repeat::MergeFrom(const Repeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.mission.Repeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_child()) {
    _internal_mutable_child()->::bosdyn::api::mission::Node::MergeFrom(from._internal_child());
  }
  if (from.max_starts() != 0) {
    _internal_set_max_starts(from._internal_max_starts());
  }
}

void Repeat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.mission.Repeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Repeat::CopyFrom(const Repeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.mission.Repeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Repeat::IsInitialized() const {
  return true;
}

void Repeat::InternalSwap(Repeat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Repeat, max_starts_)
      + sizeof(Repeat::max_starts_)
      - PROTOBUF_FIELD_OFFSET(Repeat, child_)>(
          reinterpret_cast<char*>(&child_),
          reinterpret_cast<char*>(&other->child_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Repeat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Retry::InitAsDefaultInstance() {
  ::bosdyn::api::mission::_Retry_default_instance_._instance.get_mutable()->child_ = const_cast< ::bosdyn::api::mission::Node*>(
      ::bosdyn::api::mission::Node::internal_default_instance());
}
class Retry::_Internal {
 public:
  static const ::bosdyn::api::mission::Node& child(const Retry* msg);
};

const ::bosdyn::api::mission::Node&
Retry::_Internal::child(const Retry* msg) {
  return *msg->child_;
}
Retry::Retry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.mission.Retry)
}
Retry::Retry(const Retry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_child()) {
    child_ = new ::bosdyn::api::mission::Node(*from.child_);
  } else {
    child_ = nullptr;
  }
  max_attempts_ = from.max_attempts_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.mission.Retry)
}

void Retry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Retry_bosdyn_2fapi_2fmission_2fnodes_2eproto.base);
  ::memset(&child_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_attempts_) -
      reinterpret_cast<char*>(&child_)) + sizeof(max_attempts_));
}

Retry::~Retry() {
  // @@protoc_insertion_point(destructor:bosdyn.api.mission.Retry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Retry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete child_;
}

void Retry::ArenaDtor(void* object) {
  Retry* _this = reinterpret_cast< Retry* >(object);
  (void)_this;
}
void Retry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Retry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Retry& Retry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Retry_bosdyn_2fapi_2fmission_2fnodes_2eproto.base);
  return *internal_default_instance();
}


void Retry::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.mission.Retry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && child_ != nullptr) {
    delete child_;
  }
  child_ = nullptr;
  max_attempts_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Retry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 max_attempts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          max_attempts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.mission.Node child = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_child(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Retry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.mission.Retry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_attempts = 1;
  if (this->max_attempts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_max_attempts(), target);
  }

  // .bosdyn.api.mission.Node child = 2;
  if (this->has_child()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::child(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.mission.Retry)
  return target;
}

size_t Retry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.mission.Retry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.mission.Node child = 2;
  if (this->has_child()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *child_);
  }

  // int32 max_attempts = 1;
  if (this->max_attempts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_attempts());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Retry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.mission.Retry)
  GOOGLE_DCHECK_NE(&from, this);
  const Retry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Retry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.mission.Retry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.mission.Retry)
    MergeFrom(*source);
  }
}

void Retry::MergeFrom(const Retry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.mission.Retry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_child()) {
    _internal_mutable_child()->::bosdyn::api::mission::Node::MergeFrom(from._internal_child());
  }
  if (from.max_attempts() != 0) {
    _internal_set_max_attempts(from._internal_max_attempts());
  }
}

void Retry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.mission.Retry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Retry::CopyFrom(const Retry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.mission.Retry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Retry::IsInitialized() const {
  return true;
}

void Retry::InternalSwap(Retry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Retry, max_attempts_)
      + sizeof(Retry::max_attempts_)
      - PROTOBUF_FIELD_OFFSET(Retry, child_)>(
          reinterpret_cast<char*>(&child_),
          reinterpret_cast<char*>(&other->child_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Retry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ForDuration::InitAsDefaultInstance() {
  ::bosdyn::api::mission::_ForDuration_default_instance_._instance.get_mutable()->duration_ = const_cast< PROTOBUF_NAMESPACE_ID::Duration*>(
      PROTOBUF_NAMESPACE_ID::Duration::internal_default_instance());
  ::bosdyn::api::mission::_ForDuration_default_instance_._instance.get_mutable()->child_ = const_cast< ::bosdyn::api::mission::Node*>(
      ::bosdyn::api::mission::Node::internal_default_instance());
}
class ForDuration::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Duration& duration(const ForDuration* msg);
  static const ::bosdyn::api::mission::Node& child(const ForDuration* msg);
};

const PROTOBUF_NAMESPACE_ID::Duration&
ForDuration::_Internal::duration(const ForDuration* msg) {
  return *msg->duration_;
}
const ::bosdyn::api::mission::Node&
ForDuration::_Internal::child(const ForDuration* msg) {
  return *msg->child_;
}
void ForDuration::clear_duration() {
  if (GetArena() == nullptr && duration_ != nullptr) {
    delete duration_;
  }
  duration_ = nullptr;
}
ForDuration::ForDuration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.mission.ForDuration)
}
ForDuration::ForDuration(const ForDuration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_duration()) {
    duration_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.duration_);
  } else {
    duration_ = nullptr;
  }
  if (from._internal_has_child()) {
    child_ = new ::bosdyn::api::mission::Node(*from.child_);
  } else {
    child_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.mission.ForDuration)
}

void ForDuration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ForDuration_bosdyn_2fapi_2fmission_2fnodes_2eproto.base);
  ::memset(&duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&child_) -
      reinterpret_cast<char*>(&duration_)) + sizeof(child_));
}

ForDuration::~ForDuration() {
  // @@protoc_insertion_point(destructor:bosdyn.api.mission.ForDuration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ForDuration::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete duration_;
  if (this != internal_default_instance()) delete child_;
}

void ForDuration::ArenaDtor(void* object) {
  ForDuration* _this = reinterpret_cast< ForDuration* >(object);
  (void)_this;
}
void ForDuration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ForDuration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ForDuration& ForDuration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ForDuration_bosdyn_2fapi_2fmission_2fnodes_2eproto.base);
  return *internal_default_instance();
}


void ForDuration::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.mission.ForDuration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && duration_ != nullptr) {
    delete duration_;
  }
  duration_ = nullptr;
  if (GetArena() == nullptr && child_ != nullptr) {
    delete child_;
  }
  child_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ForDuration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Duration duration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_duration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.mission.Node child = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_child(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ForDuration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.mission.ForDuration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration duration = 1;
  if (this->has_duration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::duration(this), target, stream);
  }

  // .bosdyn.api.mission.Node child = 2;
  if (this->has_child()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::child(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.mission.ForDuration)
  return target;
}

size_t ForDuration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.mission.ForDuration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Duration duration = 1;
  if (this->has_duration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *duration_);
  }

  // .bosdyn.api.mission.Node child = 2;
  if (this->has_child()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *child_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ForDuration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.mission.ForDuration)
  GOOGLE_DCHECK_NE(&from, this);
  const ForDuration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ForDuration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.mission.ForDuration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.mission.ForDuration)
    MergeFrom(*source);
  }
}

void ForDuration::MergeFrom(const ForDuration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.mission.ForDuration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_duration()) {
    _internal_mutable_duration()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_duration());
  }
  if (from.has_child()) {
    _internal_mutable_child()->::bosdyn::api::mission::Node::MergeFrom(from._internal_child());
  }
}

void ForDuration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.mission.ForDuration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForDuration::CopyFrom(const ForDuration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.mission.ForDuration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForDuration::IsInitialized() const {
  return true;
}

void ForDuration::InternalSwap(ForDuration* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ForDuration, child_)
      + sizeof(ForDuration::child_)
      - PROTOBUF_FIELD_OFFSET(ForDuration, duration_)>(
          reinterpret_cast<char*>(&duration_),
          reinterpret_cast<char*>(&other->duration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ForDuration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SimpleParallel::InitAsDefaultInstance() {
  ::bosdyn::api::mission::_SimpleParallel_default_instance_._instance.get_mutable()->primary_ = const_cast< ::bosdyn::api::mission::Node*>(
      ::bosdyn::api::mission::Node::internal_default_instance());
  ::bosdyn::api::mission::_SimpleParallel_default_instance_._instance.get_mutable()->secondary_ = const_cast< ::bosdyn::api::mission::Node*>(
      ::bosdyn::api::mission::Node::internal_default_instance());
}
class SimpleParallel::_Internal {
 public:
  static const ::bosdyn::api::mission::Node& primary(const SimpleParallel* msg);
  static const ::bosdyn::api::mission::Node& secondary(const SimpleParallel* msg);
};

const ::bosdyn::api::mission::Node&
SimpleParallel::_Internal::primary(const SimpleParallel* msg) {
  return *msg->primary_;
}
const ::bosdyn::api::mission::Node&
SimpleParallel::_Internal::secondary(const SimpleParallel* msg) {
  return *msg->secondary_;
}
SimpleParallel::SimpleParallel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.mission.SimpleParallel)
}
SimpleParallel::SimpleParallel(const SimpleParallel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_primary()) {
    primary_ = new ::bosdyn::api::mission::Node(*from.primary_);
  } else {
    primary_ = nullptr;
  }
  if (from._internal_has_secondary()) {
    secondary_ = new ::bosdyn::api::mission::Node(*from.secondary_);
  } else {
    secondary_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.mission.SimpleParallel)
}

void SimpleParallel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimpleParallel_bosdyn_2fapi_2fmission_2fnodes_2eproto.base);
  ::memset(&primary_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&secondary_) -
      reinterpret_cast<char*>(&primary_)) + sizeof(secondary_));
}

SimpleParallel::~SimpleParallel() {
  // @@protoc_insertion_point(destructor:bosdyn.api.mission.SimpleParallel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SimpleParallel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete primary_;
  if (this != internal_default_instance()) delete secondary_;
}

void SimpleParallel::ArenaDtor(void* object) {
  SimpleParallel* _this = reinterpret_cast< SimpleParallel* >(object);
  (void)_this;
}
void SimpleParallel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimpleParallel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimpleParallel& SimpleParallel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimpleParallel_bosdyn_2fapi_2fmission_2fnodes_2eproto.base);
  return *internal_default_instance();
}


void SimpleParallel::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.mission.SimpleParallel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && primary_ != nullptr) {
    delete primary_;
  }
  primary_ = nullptr;
  if (GetArena() == nullptr && secondary_ != nullptr) {
    delete secondary_;
  }
  secondary_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimpleParallel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.mission.Node primary = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_primary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.mission.Node secondary = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_secondary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimpleParallel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.mission.SimpleParallel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.mission.Node primary = 1;
  if (this->has_primary()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::primary(this), target, stream);
  }

  // .bosdyn.api.mission.Node secondary = 2;
  if (this->has_secondary()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::secondary(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.mission.SimpleParallel)
  return target;
}

size_t SimpleParallel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.mission.SimpleParallel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.mission.Node primary = 1;
  if (this->has_primary()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *primary_);
  }

  // .bosdyn.api.mission.Node secondary = 2;
  if (this->has_secondary()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *secondary_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimpleParallel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.mission.SimpleParallel)
  GOOGLE_DCHECK_NE(&from, this);
  const SimpleParallel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimpleParallel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.mission.SimpleParallel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.mission.SimpleParallel)
    MergeFrom(*source);
  }
}

void SimpleParallel::MergeFrom(const SimpleParallel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.mission.SimpleParallel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_primary()) {
    _internal_mutable_primary()->::bosdyn::api::mission::Node::MergeFrom(from._internal_primary());
  }
  if (from.has_secondary()) {
    _internal_mutable_secondary()->::bosdyn::api::mission::Node::MergeFrom(from._internal_secondary());
  }
}

void SimpleParallel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.mission.SimpleParallel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleParallel::CopyFrom(const SimpleParallel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.mission.SimpleParallel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleParallel::IsInitialized() const {
  return true;
}

void SimpleParallel::InternalSwap(SimpleParallel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimpleParallel, secondary_)
      + sizeof(SimpleParallel::secondary_)
      - PROTOBUF_FIELD_OFFSET(SimpleParallel, primary_)>(
          reinterpret_cast<char*>(&primary_),
          reinterpret_cast<char*>(&other->primary_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpleParallel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Condition_Operand::InitAsDefaultInstance() {
  ::bosdyn::api::mission::_Condition_Operand_default_instance_.var_ = const_cast< ::bosdyn::api::mission::VariableDeclaration*>(
      ::bosdyn::api::mission::VariableDeclaration::internal_default_instance());
  ::bosdyn::api::mission::_Condition_Operand_default_instance_.const__ = const_cast< ::bosdyn::api::mission::ConstantValue*>(
      ::bosdyn::api::mission::ConstantValue::internal_default_instance());
}
class Condition_Operand::_Internal {
 public:
  static const ::bosdyn::api::mission::VariableDeclaration& var(const Condition_Operand* msg);
  static const ::bosdyn::api::mission::ConstantValue& const_(const Condition_Operand* msg);
};

const ::bosdyn::api::mission::VariableDeclaration&
Condition_Operand::_Internal::var(const Condition_Operand* msg) {
  return *msg->type_.var_;
}
const ::bosdyn::api::mission::ConstantValue&
Condition_Operand::_Internal::const_(const Condition_Operand* msg) {
  return *msg->type_.const__;
}
void Condition_Operand::set_allocated_var(::bosdyn::api::mission::VariableDeclaration* var) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_type();
  if (var) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(var)->GetArena();
    if (message_arena != submessage_arena) {
      var = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, var, submessage_arena);
    }
    set_has_var();
    type_.var_ = var;
  }
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.mission.Condition.Operand.var)
}
void Condition_Operand::clear_var() {
  if (_internal_has_var()) {
    if (GetArena() == nullptr) {
      delete type_.var_;
    }
    clear_has_type();
  }
}
void Condition_Operand::set_allocated_const_(::bosdyn::api::mission::ConstantValue* const_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_type();
  if (const_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(const_)->GetArena();
    if (message_arena != submessage_arena) {
      const_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, const_, submessage_arena);
    }
    set_has_const_();
    type_.const__ = const_;
  }
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.mission.Condition.Operand.const)
}
void Condition_Operand::clear_const_() {
  if (_internal_has_const_()) {
    if (GetArena() == nullptr) {
      delete type_.const__;
    }
    clear_has_type();
  }
}
Condition_Operand::Condition_Operand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.mission.Condition.Operand)
}
Condition_Operand::Condition_Operand(const Condition_Operand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kVar: {
      _internal_mutable_var()->::bosdyn::api::mission::VariableDeclaration::MergeFrom(from._internal_var());
      break;
    }
    case kConst: {
      _internal_mutable_const_()->::bosdyn::api::mission::ConstantValue::MergeFrom(from._internal_const_());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.mission.Condition.Operand)
}

void Condition_Operand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Condition_Operand_bosdyn_2fapi_2fmission_2fnodes_2eproto.base);
  clear_has_type();
}

Condition_Operand::~Condition_Operand() {
  // @@protoc_insertion_point(destructor:bosdyn.api.mission.Condition.Operand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Condition_Operand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_type()) {
    clear_type();
  }
}

void Condition_Operand::ArenaDtor(void* object) {
  Condition_Operand* _this = reinterpret_cast< Condition_Operand* >(object);
  (void)_this;
}
void Condition_Operand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Condition_Operand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Condition_Operand& Condition_Operand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Condition_Operand_bosdyn_2fapi_2fmission_2fnodes_2eproto.base);
  return *internal_default_instance();
}


void Condition_Operand::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:bosdyn.api.mission.Condition.Operand)
  switch (type_case()) {
    case kVar: {
      if (GetArena() == nullptr) {
        delete type_.var_;
      }
      break;
    }
    case kConst: {
      if (GetArena() == nullptr) {
        delete type_.const__;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void Condition_Operand::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.mission.Condition.Operand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Condition_Operand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.mission.VariableDeclaration var = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_var(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.mission.ConstantValue const = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_const_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Condition_Operand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.mission.Condition.Operand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.mission.VariableDeclaration var = 1;
  if (_internal_has_var()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::var(this), target, stream);
  }

  // .bosdyn.api.mission.ConstantValue const = 2;
  if (_internal_has_const_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::const_(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.mission.Condition.Operand)
  return target;
}

size_t Condition_Operand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.mission.Condition.Operand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_case()) {
    // .bosdyn.api.mission.VariableDeclaration var = 1;
    case kVar: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.var_);
      break;
    }
    // .bosdyn.api.mission.ConstantValue const = 2;
    case kConst: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.const__);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Condition_Operand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.mission.Condition.Operand)
  GOOGLE_DCHECK_NE(&from, this);
  const Condition_Operand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Condition_Operand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.mission.Condition.Operand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.mission.Condition.Operand)
    MergeFrom(*source);
  }
}

void Condition_Operand::MergeFrom(const Condition_Operand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.mission.Condition.Operand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kVar: {
      _internal_mutable_var()->::bosdyn::api::mission::VariableDeclaration::MergeFrom(from._internal_var());
      break;
    }
    case kConst: {
      _internal_mutable_const_()->::bosdyn::api::mission::ConstantValue::MergeFrom(from._internal_const_());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void Condition_Operand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.mission.Condition.Operand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Condition_Operand::CopyFrom(const Condition_Operand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.mission.Condition.Operand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Condition_Operand::IsInitialized() const {
  return true;
}

void Condition_Operand::InternalSwap(Condition_Operand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Condition_Operand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Condition::InitAsDefaultInstance() {
  ::bosdyn::api::mission::_Condition_default_instance_._instance.get_mutable()->lhs_ = const_cast< ::bosdyn::api::mission::Condition_Operand*>(
      ::bosdyn::api::mission::Condition_Operand::internal_default_instance());
  ::bosdyn::api::mission::_Condition_default_instance_._instance.get_mutable()->rhs_ = const_cast< ::bosdyn::api::mission::Condition_Operand*>(
      ::bosdyn::api::mission::Condition_Operand::internal_default_instance());
}
class Condition::_Internal {
 public:
  static const ::bosdyn::api::mission::Condition_Operand& lhs(const Condition* msg);
  static const ::bosdyn::api::mission::Condition_Operand& rhs(const Condition* msg);
};

const ::bosdyn::api::mission::Condition_Operand&
Condition::_Internal::lhs(const Condition* msg) {
  return *msg->lhs_;
}
const ::bosdyn::api::mission::Condition_Operand&
Condition::_Internal::rhs(const Condition* msg) {
  return *msg->rhs_;
}
Condition::Condition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.mission.Condition)
}
Condition::Condition(const Condition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_lhs()) {
    lhs_ = new ::bosdyn::api::mission::Condition_Operand(*from.lhs_);
  } else {
    lhs_ = nullptr;
  }
  if (from._internal_has_rhs()) {
    rhs_ = new ::bosdyn::api::mission::Condition_Operand(*from.rhs_);
  } else {
    rhs_ = nullptr;
  }
  operation_ = from.operation_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.mission.Condition)
}

void Condition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Condition_bosdyn_2fapi_2fmission_2fnodes_2eproto.base);
  ::memset(&lhs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operation_) -
      reinterpret_cast<char*>(&lhs_)) + sizeof(operation_));
}

Condition::~Condition() {
  // @@protoc_insertion_point(destructor:bosdyn.api.mission.Condition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Condition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete lhs_;
  if (this != internal_default_instance()) delete rhs_;
}

void Condition::ArenaDtor(void* object) {
  Condition* _this = reinterpret_cast< Condition* >(object);
  (void)_this;
}
void Condition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Condition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Condition& Condition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Condition_bosdyn_2fapi_2fmission_2fnodes_2eproto.base);
  return *internal_default_instance();
}


void Condition::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.mission.Condition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && lhs_ != nullptr) {
    delete lhs_;
  }
  lhs_ = nullptr;
  if (GetArena() == nullptr && rhs_ != nullptr) {
    delete rhs_;
  }
  rhs_ = nullptr;
  operation_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Condition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.mission.Condition.Operand lhs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lhs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.mission.Condition.Operand rhs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rhs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.mission.Condition.Compare operation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_operation(static_cast<::bosdyn::api::mission::Condition_Compare>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Condition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.mission.Condition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.mission.Condition.Operand lhs = 1;
  if (this->has_lhs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::lhs(this), target, stream);
  }

  // .bosdyn.api.mission.Condition.Operand rhs = 2;
  if (this->has_rhs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rhs(this), target, stream);
  }

  // .bosdyn.api.mission.Condition.Compare operation = 5;
  if (this->operation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_operation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.mission.Condition)
  return target;
}

size_t Condition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.mission.Condition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.mission.Condition.Operand lhs = 1;
  if (this->has_lhs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lhs_);
  }

  // .bosdyn.api.mission.Condition.Operand rhs = 2;
  if (this->has_rhs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rhs_);
  }

  // .bosdyn.api.mission.Condition.Compare operation = 5;
  if (this->operation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_operation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Condition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.mission.Condition)
  GOOGLE_DCHECK_NE(&from, this);
  const Condition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Condition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.mission.Condition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.mission.Condition)
    MergeFrom(*source);
  }
}

void Condition::MergeFrom(const Condition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.mission.Condition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_lhs()) {
    _internal_mutable_lhs()->::bosdyn::api::mission::Condition_Operand::MergeFrom(from._internal_lhs());
  }
  if (from.has_rhs()) {
    _internal_mutable_rhs()->::bosdyn::api::mission::Condition_Operand::MergeFrom(from._internal_rhs());
  }
  if (from.operation() != 0) {
    _internal_set_operation(from._internal_operation());
  }
}

void Condition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.mission.Condition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Condition::CopyFrom(const Condition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.mission.Condition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Condition::IsInitialized() const {
  return true;
}

void Condition::InternalSwap(Condition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Condition, operation_)
      + sizeof(Condition::operation_)
      - PROTOBUF_FIELD_OFFSET(Condition, lhs_)>(
          reinterpret_cast<char*>(&lhs_),
          reinterpret_cast<char*>(&other->lhs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Condition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BosdynRobotState::InitAsDefaultInstance() {
  ::bosdyn::api::mission::_BosdynRobotState_default_instance_._instance.get_mutable()->child_ = const_cast< ::bosdyn::api::mission::Node*>(
      ::bosdyn::api::mission::Node::internal_default_instance());
}
class BosdynRobotState::_Internal {
 public:
  static const ::bosdyn::api::mission::Node& child(const BosdynRobotState* msg);
};

const ::bosdyn::api::mission::Node&
BosdynRobotState::_Internal::child(const BosdynRobotState* msg) {
  return *msg->child_;
}
BosdynRobotState::BosdynRobotState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.mission.BosdynRobotState)
}
BosdynRobotState::BosdynRobotState(const BosdynRobotState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_service_name().empty()) {
    service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_service_name(),
      GetArena());
  }
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_host().empty()) {
    host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_host(),
      GetArena());
  }
  state_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_state_name().empty()) {
    state_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_state_name(),
      GetArena());
  }
  if (from._internal_has_child()) {
    child_ = new ::bosdyn::api::mission::Node(*from.child_);
  } else {
    child_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.mission.BosdynRobotState)
}

void BosdynRobotState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BosdynRobotState_bosdyn_2fapi_2fmission_2fnodes_2eproto.base);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  child_ = nullptr;
}

BosdynRobotState::~BosdynRobotState() {
  // @@protoc_insertion_point(destructor:bosdyn.api.mission.BosdynRobotState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BosdynRobotState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  service_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete child_;
}

void BosdynRobotState::ArenaDtor(void* object) {
  BosdynRobotState* _this = reinterpret_cast< BosdynRobotState* >(object);
  (void)_this;
}
void BosdynRobotState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BosdynRobotState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BosdynRobotState& BosdynRobotState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BosdynRobotState_bosdyn_2fapi_2fmission_2fnodes_2eproto.base);
  return *internal_default_instance();
}


void BosdynRobotState::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.mission.BosdynRobotState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  host_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  state_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && child_ != nullptr) {
    delete child_;
  }
  child_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BosdynRobotState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string service_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_service_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.mission.BosdynRobotState.service_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string host = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_host();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.mission.BosdynRobotState.host"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.mission.Node child = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_child(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string state_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_state_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.mission.BosdynRobotState.state_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BosdynRobotState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.mission.BosdynRobotState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_name().data(), static_cast<int>(this->_internal_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.mission.BosdynRobotState.service_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service_name(), target);
  }

  // string host = 2;
  if (this->host().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.mission.BosdynRobotState.host");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_host(), target);
  }

  // .bosdyn.api.mission.Node child = 3;
  if (this->has_child()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::child(this), target, stream);
  }

  // string state_name = 4;
  if (this->state_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_state_name().data(), static_cast<int>(this->_internal_state_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.mission.BosdynRobotState.state_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_state_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.mission.BosdynRobotState)
  return target;
}

size_t BosdynRobotState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.mission.BosdynRobotState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_name());
  }

  // string host = 2;
  if (this->host().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host());
  }

  // string state_name = 4;
  if (this->state_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_state_name());
  }

  // .bosdyn.api.mission.Node child = 3;
  if (this->has_child()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *child_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BosdynRobotState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.mission.BosdynRobotState)
  GOOGLE_DCHECK_NE(&from, this);
  const BosdynRobotState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BosdynRobotState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.mission.BosdynRobotState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.mission.BosdynRobotState)
    MergeFrom(*source);
  }
}

void BosdynRobotState::MergeFrom(const BosdynRobotState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.mission.BosdynRobotState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.service_name().size() > 0) {
    _internal_set_service_name(from._internal_service_name());
  }
  if (from.host().size() > 0) {
    _internal_set_host(from._internal_host());
  }
  if (from.state_name().size() > 0) {
    _internal_set_state_name(from._internal_state_name());
  }
  if (from.has_child()) {
    _internal_mutable_child()->::bosdyn::api::mission::Node::MergeFrom(from._internal_child());
  }
}

void BosdynRobotState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.mission.BosdynRobotState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BosdynRobotState::CopyFrom(const BosdynRobotState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.mission.BosdynRobotState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BosdynRobotState::IsInitialized() const {
  return true;
}

void BosdynRobotState::InternalSwap(BosdynRobotState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  service_name_.Swap(&other->service_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  host_.Swap(&other->host_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  state_name_.Swap(&other->state_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(child_, other->child_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BosdynRobotState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BosdynRobotCommand::InitAsDefaultInstance() {
  ::bosdyn::api::mission::_BosdynRobotCommand_default_instance_._instance.get_mutable()->command_ = const_cast< ::bosdyn::api::RobotCommand*>(
      ::bosdyn::api::RobotCommand::internal_default_instance());
}
class BosdynRobotCommand::_Internal {
 public:
  static const ::bosdyn::api::RobotCommand& command(const BosdynRobotCommand* msg);
};

const ::bosdyn::api::RobotCommand&
BosdynRobotCommand::_Internal::command(const BosdynRobotCommand* msg) {
  return *msg->command_;
}
void BosdynRobotCommand::clear_command() {
  if (GetArena() == nullptr && command_ != nullptr) {
    delete command_;
  }
  command_ = nullptr;
}
BosdynRobotCommand::BosdynRobotCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.mission.BosdynRobotCommand)
}
BosdynRobotCommand::BosdynRobotCommand(const BosdynRobotCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_service_name().empty()) {
    service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_service_name(),
      GetArena());
  }
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_host().empty()) {
    host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_host(),
      GetArena());
  }
  if (from._internal_has_command()) {
    command_ = new ::bosdyn::api::RobotCommand(*from.command_);
  } else {
    command_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.mission.BosdynRobotCommand)
}

void BosdynRobotCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BosdynRobotCommand_bosdyn_2fapi_2fmission_2fnodes_2eproto.base);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  command_ = nullptr;
}

BosdynRobotCommand::~BosdynRobotCommand() {
  // @@protoc_insertion_point(destructor:bosdyn.api.mission.BosdynRobotCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BosdynRobotCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  service_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete command_;
}

void BosdynRobotCommand::ArenaDtor(void* object) {
  BosdynRobotCommand* _this = reinterpret_cast< BosdynRobotCommand* >(object);
  (void)_this;
}
void BosdynRobotCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BosdynRobotCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BosdynRobotCommand& BosdynRobotCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BosdynRobotCommand_bosdyn_2fapi_2fmission_2fnodes_2eproto.base);
  return *internal_default_instance();
}


void BosdynRobotCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.mission.BosdynRobotCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  host_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && command_ != nullptr) {
    delete command_;
  }
  command_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BosdynRobotCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string service_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_service_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.mission.BosdynRobotCommand.service_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string host = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_host();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.mission.BosdynRobotCommand.host"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.RobotCommand command = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BosdynRobotCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.mission.BosdynRobotCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_name().data(), static_cast<int>(this->_internal_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.mission.BosdynRobotCommand.service_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service_name(), target);
  }

  // string host = 2;
  if (this->host().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.mission.BosdynRobotCommand.host");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_host(), target);
  }

  // .bosdyn.api.RobotCommand command = 3;
  if (this->has_command()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::command(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.mission.BosdynRobotCommand)
  return target;
}

size_t BosdynRobotCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.mission.BosdynRobotCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_name());
  }

  // string host = 2;
  if (this->host().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host());
  }

  // .bosdyn.api.RobotCommand command = 3;
  if (this->has_command()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *command_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BosdynRobotCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.mission.BosdynRobotCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const BosdynRobotCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BosdynRobotCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.mission.BosdynRobotCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.mission.BosdynRobotCommand)
    MergeFrom(*source);
  }
}

void BosdynRobotCommand::MergeFrom(const BosdynRobotCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.mission.BosdynRobotCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.service_name().size() > 0) {
    _internal_set_service_name(from._internal_service_name());
  }
  if (from.host().size() > 0) {
    _internal_set_host(from._internal_host());
  }
  if (from.has_command()) {
    _internal_mutable_command()->::bosdyn::api::RobotCommand::MergeFrom(from._internal_command());
  }
}

void BosdynRobotCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.mission.BosdynRobotCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BosdynRobotCommand::CopyFrom(const BosdynRobotCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.mission.BosdynRobotCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BosdynRobotCommand::IsInitialized() const {
  return true;
}

void BosdynRobotCommand::InternalSwap(BosdynRobotCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  service_name_.Swap(&other->service_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  host_.Swap(&other->host_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(command_, other->command_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BosdynRobotCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BosdynPowerRequest::InitAsDefaultInstance() {
}
class BosdynPowerRequest::_Internal {
 public:
};

BosdynPowerRequest::BosdynPowerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.mission.BosdynPowerRequest)
}
BosdynPowerRequest::BosdynPowerRequest(const BosdynPowerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_service_name().empty()) {
    service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_service_name(),
      GetArena());
  }
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_host().empty()) {
    host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_host(),
      GetArena());
  }
  request_ = from.request_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.mission.BosdynPowerRequest)
}

void BosdynPowerRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BosdynPowerRequest_bosdyn_2fapi_2fmission_2fnodes_2eproto.base);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  request_ = 0;
}

BosdynPowerRequest::~BosdynPowerRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.mission.BosdynPowerRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BosdynPowerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  service_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BosdynPowerRequest::ArenaDtor(void* object) {
  BosdynPowerRequest* _this = reinterpret_cast< BosdynPowerRequest* >(object);
  (void)_this;
}
void BosdynPowerRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BosdynPowerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BosdynPowerRequest& BosdynPowerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BosdynPowerRequest_bosdyn_2fapi_2fmission_2fnodes_2eproto.base);
  return *internal_default_instance();
}


void BosdynPowerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.mission.BosdynPowerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  host_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  request_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BosdynPowerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string service_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_service_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.mission.BosdynPowerRequest.service_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string host = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_host();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.mission.BosdynPowerRequest.host"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.PowerCommandRequest.Request request = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_request(static_cast<::bosdyn::api::PowerCommandRequest_Request>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BosdynPowerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.mission.BosdynPowerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_name().data(), static_cast<int>(this->_internal_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.mission.BosdynPowerRequest.service_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service_name(), target);
  }

  // string host = 2;
  if (this->host().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.mission.BosdynPowerRequest.host");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_host(), target);
  }

  // .bosdyn.api.PowerCommandRequest.Request request = 4;
  if (this->request() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_request(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.mission.BosdynPowerRequest)
  return target;
}

size_t BosdynPowerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.mission.BosdynPowerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_name());
  }

  // string host = 2;
  if (this->host().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host());
  }

  // .bosdyn.api.PowerCommandRequest.Request request = 4;
  if (this->request() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_request());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BosdynPowerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.mission.BosdynPowerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BosdynPowerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BosdynPowerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.mission.BosdynPowerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.mission.BosdynPowerRequest)
    MergeFrom(*source);
  }
}

void BosdynPowerRequest::MergeFrom(const BosdynPowerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.mission.BosdynPowerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.service_name().size() > 0) {
    _internal_set_service_name(from._internal_service_name());
  }
  if (from.host().size() > 0) {
    _internal_set_host(from._internal_host());
  }
  if (from.request() != 0) {
    _internal_set_request(from._internal_request());
  }
}

void BosdynPowerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.mission.BosdynPowerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BosdynPowerRequest::CopyFrom(const BosdynPowerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.mission.BosdynPowerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BosdynPowerRequest::IsInitialized() const {
  return true;
}

void BosdynPowerRequest::InternalSwap(BosdynPowerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  service_name_.Swap(&other->service_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  host_.Swap(&other->host_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(request_, other->request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BosdynPowerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BosdynNavigateTo::InitAsDefaultInstance() {
  ::bosdyn::api::mission::_BosdynNavigateTo_default_instance_._instance.get_mutable()->route_gen_params_ = const_cast< ::bosdyn::api::graph_nav::RouteGenParams*>(
      ::bosdyn::api::graph_nav::RouteGenParams::internal_default_instance());
  ::bosdyn::api::mission::_BosdynNavigateTo_default_instance_._instance.get_mutable()->travel_params_ = const_cast< ::bosdyn::api::graph_nav::TravelParams*>(
      ::bosdyn::api::graph_nav::TravelParams::internal_default_instance());
}
class BosdynNavigateTo::_Internal {
 public:
  static const ::bosdyn::api::graph_nav::RouteGenParams& route_gen_params(const BosdynNavigateTo* msg);
  static const ::bosdyn::api::graph_nav::TravelParams& travel_params(const BosdynNavigateTo* msg);
};

const ::bosdyn::api::graph_nav::RouteGenParams&
BosdynNavigateTo::_Internal::route_gen_params(const BosdynNavigateTo* msg) {
  return *msg->route_gen_params_;
}
const ::bosdyn::api::graph_nav::TravelParams&
BosdynNavigateTo::_Internal::travel_params(const BosdynNavigateTo* msg) {
  return *msg->travel_params_;
}
void BosdynNavigateTo::clear_route_gen_params() {
  if (GetArena() == nullptr && route_gen_params_ != nullptr) {
    delete route_gen_params_;
  }
  route_gen_params_ = nullptr;
}
void BosdynNavigateTo::clear_travel_params() {
  if (GetArena() == nullptr && travel_params_ != nullptr) {
    delete travel_params_;
  }
  travel_params_ = nullptr;
}
BosdynNavigateTo::BosdynNavigateTo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.mission.BosdynNavigateTo)
}
BosdynNavigateTo::BosdynNavigateTo(const BosdynNavigateTo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_service_name().empty()) {
    service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_service_name(),
      GetArena());
  }
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_host().empty()) {
    host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_host(),
      GetArena());
  }
  destination_waypoint_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_destination_waypoint_id().empty()) {
    destination_waypoint_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_destination_waypoint_id(),
      GetArena());
  }
  if (from._internal_has_route_gen_params()) {
    route_gen_params_ = new ::bosdyn::api::graph_nav::RouteGenParams(*from.route_gen_params_);
  } else {
    route_gen_params_ = nullptr;
  }
  if (from._internal_has_travel_params()) {
    travel_params_ = new ::bosdyn::api::graph_nav::TravelParams(*from.travel_params_);
  } else {
    travel_params_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.mission.BosdynNavigateTo)
}

void BosdynNavigateTo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BosdynNavigateTo_bosdyn_2fapi_2fmission_2fnodes_2eproto.base);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  destination_waypoint_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&route_gen_params_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&travel_params_) -
      reinterpret_cast<char*>(&route_gen_params_)) + sizeof(travel_params_));
}

BosdynNavigateTo::~BosdynNavigateTo() {
  // @@protoc_insertion_point(destructor:bosdyn.api.mission.BosdynNavigateTo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BosdynNavigateTo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  service_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  destination_waypoint_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete route_gen_params_;
  if (this != internal_default_instance()) delete travel_params_;
}

void BosdynNavigateTo::ArenaDtor(void* object) {
  BosdynNavigateTo* _this = reinterpret_cast< BosdynNavigateTo* >(object);
  (void)_this;
}
void BosdynNavigateTo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BosdynNavigateTo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BosdynNavigateTo& BosdynNavigateTo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BosdynNavigateTo_bosdyn_2fapi_2fmission_2fnodes_2eproto.base);
  return *internal_default_instance();
}


void BosdynNavigateTo::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.mission.BosdynNavigateTo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  host_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  destination_waypoint_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && route_gen_params_ != nullptr) {
    delete route_gen_params_;
  }
  route_gen_params_ = nullptr;
  if (GetArena() == nullptr && travel_params_ != nullptr) {
    delete travel_params_;
  }
  travel_params_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BosdynNavigateTo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string service_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_service_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.mission.BosdynNavigateTo.service_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string host = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_host();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.mission.BosdynNavigateTo.host"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string destination_waypoint_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_destination_waypoint_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.mission.BosdynNavigateTo.destination_waypoint_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.graph_nav.RouteGenParams route_gen_params = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_route_gen_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.graph_nav.TravelParams travel_params = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_travel_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BosdynNavigateTo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.mission.BosdynNavigateTo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_name().data(), static_cast<int>(this->_internal_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.mission.BosdynNavigateTo.service_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service_name(), target);
  }

  // string host = 2;
  if (this->host().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.mission.BosdynNavigateTo.host");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_host(), target);
  }

  // string destination_waypoint_id = 3;
  if (this->destination_waypoint_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_destination_waypoint_id().data(), static_cast<int>(this->_internal_destination_waypoint_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.mission.BosdynNavigateTo.destination_waypoint_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_destination_waypoint_id(), target);
  }

  // .bosdyn.api.graph_nav.RouteGenParams route_gen_params = 4;
  if (this->has_route_gen_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::route_gen_params(this), target, stream);
  }

  // .bosdyn.api.graph_nav.TravelParams travel_params = 5;
  if (this->has_travel_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::travel_params(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.mission.BosdynNavigateTo)
  return target;
}

size_t BosdynNavigateTo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.mission.BosdynNavigateTo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_name());
  }

  // string host = 2;
  if (this->host().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host());
  }

  // string destination_waypoint_id = 3;
  if (this->destination_waypoint_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_destination_waypoint_id());
  }

  // .bosdyn.api.graph_nav.RouteGenParams route_gen_params = 4;
  if (this->has_route_gen_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *route_gen_params_);
  }

  // .bosdyn.api.graph_nav.TravelParams travel_params = 5;
  if (this->has_travel_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *travel_params_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BosdynNavigateTo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.mission.BosdynNavigateTo)
  GOOGLE_DCHECK_NE(&from, this);
  const BosdynNavigateTo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BosdynNavigateTo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.mission.BosdynNavigateTo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.mission.BosdynNavigateTo)
    MergeFrom(*source);
  }
}

void BosdynNavigateTo::MergeFrom(const BosdynNavigateTo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.mission.BosdynNavigateTo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.service_name().size() > 0) {
    _internal_set_service_name(from._internal_service_name());
  }
  if (from.host().size() > 0) {
    _internal_set_host(from._internal_host());
  }
  if (from.destination_waypoint_id().size() > 0) {
    _internal_set_destination_waypoint_id(from._internal_destination_waypoint_id());
  }
  if (from.has_route_gen_params()) {
    _internal_mutable_route_gen_params()->::bosdyn::api::graph_nav::RouteGenParams::MergeFrom(from._internal_route_gen_params());
  }
  if (from.has_travel_params()) {
    _internal_mutable_travel_params()->::bosdyn::api::graph_nav::TravelParams::MergeFrom(from._internal_travel_params());
  }
}

void BosdynNavigateTo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.mission.BosdynNavigateTo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BosdynNavigateTo::CopyFrom(const BosdynNavigateTo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.mission.BosdynNavigateTo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BosdynNavigateTo::IsInitialized() const {
  return true;
}

void BosdynNavigateTo::InternalSwap(BosdynNavigateTo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  service_name_.Swap(&other->service_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  host_.Swap(&other->host_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  destination_waypoint_id_.Swap(&other->destination_waypoint_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BosdynNavigateTo, travel_params_)
      + sizeof(BosdynNavigateTo::travel_params_)
      - PROTOBUF_FIELD_OFFSET(BosdynNavigateTo, route_gen_params_)>(
          reinterpret_cast<char*>(&route_gen_params_),
          reinterpret_cast<char*>(&other->route_gen_params_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BosdynNavigateTo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BosdynGraphNavState::InitAsDefaultInstance() {
  ::bosdyn::api::mission::_BosdynGraphNavState_default_instance_._instance.get_mutable()->child_ = const_cast< ::bosdyn::api::mission::Node*>(
      ::bosdyn::api::mission::Node::internal_default_instance());
}
class BosdynGraphNavState::_Internal {
 public:
  static const ::bosdyn::api::mission::Node& child(const BosdynGraphNavState* msg);
};

const ::bosdyn::api::mission::Node&
BosdynGraphNavState::_Internal::child(const BosdynGraphNavState* msg) {
  return *msg->child_;
}
BosdynGraphNavState::BosdynGraphNavState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.mission.BosdynGraphNavState)
}
BosdynGraphNavState::BosdynGraphNavState(const BosdynGraphNavState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_service_name().empty()) {
    service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_service_name(),
      GetArena());
  }
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_host().empty()) {
    host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_host(),
      GetArena());
  }
  state_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_state_name().empty()) {
    state_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_state_name(),
      GetArena());
  }
  if (from._internal_has_child()) {
    child_ = new ::bosdyn::api::mission::Node(*from.child_);
  } else {
    child_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.mission.BosdynGraphNavState)
}

void BosdynGraphNavState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BosdynGraphNavState_bosdyn_2fapi_2fmission_2fnodes_2eproto.base);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  child_ = nullptr;
}

BosdynGraphNavState::~BosdynGraphNavState() {
  // @@protoc_insertion_point(destructor:bosdyn.api.mission.BosdynGraphNavState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BosdynGraphNavState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  service_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete child_;
}

void BosdynGraphNavState::ArenaDtor(void* object) {
  BosdynGraphNavState* _this = reinterpret_cast< BosdynGraphNavState* >(object);
  (void)_this;
}
void BosdynGraphNavState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BosdynGraphNavState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BosdynGraphNavState& BosdynGraphNavState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BosdynGraphNavState_bosdyn_2fapi_2fmission_2fnodes_2eproto.base);
  return *internal_default_instance();
}


void BosdynGraphNavState::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.mission.BosdynGraphNavState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  host_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  state_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && child_ != nullptr) {
    delete child_;
  }
  child_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BosdynGraphNavState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string service_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_service_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.mission.BosdynGraphNavState.service_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string host = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_host();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.mission.BosdynGraphNavState.host"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.mission.Node child = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_child(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string state_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_state_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.mission.BosdynGraphNavState.state_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BosdynGraphNavState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.mission.BosdynGraphNavState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_name().data(), static_cast<int>(this->_internal_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.mission.BosdynGraphNavState.service_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service_name(), target);
  }

  // string host = 2;
  if (this->host().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.mission.BosdynGraphNavState.host");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_host(), target);
  }

  // .bosdyn.api.mission.Node child = 3;
  if (this->has_child()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::child(this), target, stream);
  }

  // string state_name = 4;
  if (this->state_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_state_name().data(), static_cast<int>(this->_internal_state_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.mission.BosdynGraphNavState.state_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_state_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.mission.BosdynGraphNavState)
  return target;
}

size_t BosdynGraphNavState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.mission.BosdynGraphNavState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_name());
  }

  // string host = 2;
  if (this->host().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host());
  }

  // string state_name = 4;
  if (this->state_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_state_name());
  }

  // .bosdyn.api.mission.Node child = 3;
  if (this->has_child()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *child_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BosdynGraphNavState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.mission.BosdynGraphNavState)
  GOOGLE_DCHECK_NE(&from, this);
  const BosdynGraphNavState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BosdynGraphNavState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.mission.BosdynGraphNavState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.mission.BosdynGraphNavState)
    MergeFrom(*source);
  }
}

void BosdynGraphNavState::MergeFrom(const BosdynGraphNavState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.mission.BosdynGraphNavState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.service_name().size() > 0) {
    _internal_set_service_name(from._internal_service_name());
  }
  if (from.host().size() > 0) {
    _internal_set_host(from._internal_host());
  }
  if (from.state_name().size() > 0) {
    _internal_set_state_name(from._internal_state_name());
  }
  if (from.has_child()) {
    _internal_mutable_child()->::bosdyn::api::mission::Node::MergeFrom(from._internal_child());
  }
}

void BosdynGraphNavState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.mission.BosdynGraphNavState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BosdynGraphNavState::CopyFrom(const BosdynGraphNavState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.mission.BosdynGraphNavState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BosdynGraphNavState::IsInitialized() const {
  return true;
}

void BosdynGraphNavState::InternalSwap(BosdynGraphNavState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  service_name_.Swap(&other->service_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  host_.Swap(&other->host_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  state_name_.Swap(&other->state_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(child_, other->child_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BosdynGraphNavState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BosdynGraphNavLocalize::InitAsDefaultInstance() {
}
class BosdynGraphNavLocalize::_Internal {
 public:
};

BosdynGraphNavLocalize::BosdynGraphNavLocalize(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.mission.BosdynGraphNavLocalize)
}
BosdynGraphNavLocalize::BosdynGraphNavLocalize(const BosdynGraphNavLocalize& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_service_name().empty()) {
    service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_service_name(),
      GetArena());
  }
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_host().empty()) {
    host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_host(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.mission.BosdynGraphNavLocalize)
}

void BosdynGraphNavLocalize::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BosdynGraphNavLocalize_bosdyn_2fapi_2fmission_2fnodes_2eproto.base);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BosdynGraphNavLocalize::~BosdynGraphNavLocalize() {
  // @@protoc_insertion_point(destructor:bosdyn.api.mission.BosdynGraphNavLocalize)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BosdynGraphNavLocalize::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  service_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BosdynGraphNavLocalize::ArenaDtor(void* object) {
  BosdynGraphNavLocalize* _this = reinterpret_cast< BosdynGraphNavLocalize* >(object);
  (void)_this;
}
void BosdynGraphNavLocalize::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BosdynGraphNavLocalize::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BosdynGraphNavLocalize& BosdynGraphNavLocalize::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BosdynGraphNavLocalize_bosdyn_2fapi_2fmission_2fnodes_2eproto.base);
  return *internal_default_instance();
}


void BosdynGraphNavLocalize::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.mission.BosdynGraphNavLocalize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  host_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BosdynGraphNavLocalize::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string service_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_service_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.mission.BosdynGraphNavLocalize.service_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string host = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_host();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.mission.BosdynGraphNavLocalize.host"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BosdynGraphNavLocalize::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.mission.BosdynGraphNavLocalize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_name().data(), static_cast<int>(this->_internal_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.mission.BosdynGraphNavLocalize.service_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service_name(), target);
  }

  // string host = 2;
  if (this->host().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.mission.BosdynGraphNavLocalize.host");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_host(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.mission.BosdynGraphNavLocalize)
  return target;
}

size_t BosdynGraphNavLocalize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.mission.BosdynGraphNavLocalize)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_name());
  }

  // string host = 2;
  if (this->host().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BosdynGraphNavLocalize::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.mission.BosdynGraphNavLocalize)
  GOOGLE_DCHECK_NE(&from, this);
  const BosdynGraphNavLocalize* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BosdynGraphNavLocalize>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.mission.BosdynGraphNavLocalize)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.mission.BosdynGraphNavLocalize)
    MergeFrom(*source);
  }
}

void BosdynGraphNavLocalize::MergeFrom(const BosdynGraphNavLocalize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.mission.BosdynGraphNavLocalize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.service_name().size() > 0) {
    _internal_set_service_name(from._internal_service_name());
  }
  if (from.host().size() > 0) {
    _internal_set_host(from._internal_host());
  }
}

void BosdynGraphNavLocalize::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.mission.BosdynGraphNavLocalize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BosdynGraphNavLocalize::CopyFrom(const BosdynGraphNavLocalize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.mission.BosdynGraphNavLocalize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BosdynGraphNavLocalize::IsInitialized() const {
  return true;
}

void BosdynGraphNavLocalize::InternalSwap(BosdynGraphNavLocalize* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  service_name_.Swap(&other->service_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  host_.Swap(&other->host_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata BosdynGraphNavLocalize::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoteGrpc::InitAsDefaultInstance() {
}
class RemoteGrpc::_Internal {
 public:
};

void RemoteGrpc::clear_inputs() {
  inputs_.Clear();
}
RemoteGrpc::RemoteGrpc(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  lease_resources_(arena),
  inputs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.mission.RemoteGrpc)
}
RemoteGrpc::RemoteGrpc(const RemoteGrpc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      lease_resources_(from.lease_resources_),
      inputs_(from.inputs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_host().empty()) {
    host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_host(),
      GetArena());
  }
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_service_name().empty()) {
    service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_service_name(),
      GetArena());
  }
  timeout_ = from.timeout_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.mission.RemoteGrpc)
}

void RemoteGrpc::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RemoteGrpc_bosdyn_2fapi_2fmission_2fnodes_2eproto.base);
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timeout_ = 0;
}

RemoteGrpc::~RemoteGrpc() {
  // @@protoc_insertion_point(destructor:bosdyn.api.mission.RemoteGrpc)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoteGrpc::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RemoteGrpc::ArenaDtor(void* object) {
  RemoteGrpc* _this = reinterpret_cast< RemoteGrpc* >(object);
  (void)_this;
}
void RemoteGrpc::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoteGrpc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoteGrpc& RemoteGrpc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoteGrpc_bosdyn_2fapi_2fmission_2fnodes_2eproto.base);
  return *internal_default_instance();
}


void RemoteGrpc::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.mission.RemoteGrpc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lease_resources_.Clear();
  inputs_.Clear();
  host_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  service_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  timeout_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoteGrpc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string host = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_host();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.mission.RemoteGrpc.host"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string service_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_service_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.mission.RemoteGrpc.service_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float timeout = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated string lease_resources = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_lease_resources();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.mission.RemoteGrpc.lease_resources"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .bosdyn.api.mission.KeyValue inputs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoteGrpc::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.mission.RemoteGrpc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string host = 1;
  if (this->host().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.mission.RemoteGrpc.host");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_host(), target);
  }

  // string service_name = 3;
  if (this->service_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_name().data(), static_cast<int>(this->_internal_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.mission.RemoteGrpc.service_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_service_name(), target);
  }

  // float timeout = 4;
  if (!(this->timeout() <= 0 && this->timeout() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_timeout(), target);
  }

  // repeated string lease_resources = 5;
  for (int i = 0, n = this->_internal_lease_resources_size(); i < n; i++) {
    const auto& s = this->_internal_lease_resources(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.mission.RemoteGrpc.lease_resources");
    target = stream->WriteString(5, s, target);
  }

  // repeated .bosdyn.api.mission.KeyValue inputs = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_inputs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.mission.RemoteGrpc)
  return target;
}

size_t RemoteGrpc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.mission.RemoteGrpc)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string lease_resources = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(lease_resources_.size());
  for (int i = 0, n = lease_resources_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      lease_resources_.Get(i));
  }

  // repeated .bosdyn.api.mission.KeyValue inputs = 6;
  total_size += 1UL * this->_internal_inputs_size();
  for (const auto& msg : this->inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string host = 1;
  if (this->host().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host());
  }

  // string service_name = 3;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_name());
  }

  // float timeout = 4;
  if (!(this->timeout() <= 0 && this->timeout() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteGrpc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.mission.RemoteGrpc)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoteGrpc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoteGrpc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.mission.RemoteGrpc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.mission.RemoteGrpc)
    MergeFrom(*source);
  }
}

void RemoteGrpc::MergeFrom(const RemoteGrpc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.mission.RemoteGrpc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lease_resources_.MergeFrom(from.lease_resources_);
  inputs_.MergeFrom(from.inputs_);
  if (from.host().size() > 0) {
    _internal_set_host(from._internal_host());
  }
  if (from.service_name().size() > 0) {
    _internal_set_service_name(from._internal_service_name());
  }
  if (!(from.timeout() <= 0 && from.timeout() >= 0)) {
    _internal_set_timeout(from._internal_timeout());
  }
}

void RemoteGrpc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.mission.RemoteGrpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteGrpc::CopyFrom(const RemoteGrpc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.mission.RemoteGrpc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteGrpc::IsInitialized() const {
  return true;
}

void RemoteGrpc::InternalSwap(RemoteGrpc* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  lease_resources_.InternalSwap(&other->lease_resources_);
  inputs_.InternalSwap(&other->inputs_);
  host_.Swap(&other->host_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  service_name_.Swap(&other->service_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(timeout_, other->timeout_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteGrpc::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Sleep::InitAsDefaultInstance() {
}
class Sleep::_Internal {
 public:
};

Sleep::Sleep(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.mission.Sleep)
}
Sleep::Sleep(const Sleep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&seconds_, &from.seconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&restart_after_stop_) -
    reinterpret_cast<char*>(&seconds_)) + sizeof(restart_after_stop_));
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.mission.Sleep)
}

void Sleep::SharedCtor() {
  ::memset(&seconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&restart_after_stop_) -
      reinterpret_cast<char*>(&seconds_)) + sizeof(restart_after_stop_));
}

Sleep::~Sleep() {
  // @@protoc_insertion_point(destructor:bosdyn.api.mission.Sleep)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Sleep::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Sleep::ArenaDtor(void* object) {
  Sleep* _this = reinterpret_cast< Sleep* >(object);
  (void)_this;
}
void Sleep::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Sleep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Sleep& Sleep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Sleep_bosdyn_2fapi_2fmission_2fnodes_2eproto.base);
  return *internal_default_instance();
}


void Sleep::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.mission.Sleep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&seconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&restart_after_stop_) -
      reinterpret_cast<char*>(&seconds_)) + sizeof(restart_after_stop_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Sleep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float seconds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool restart_after_stop = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          restart_after_stop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Sleep::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.mission.Sleep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float seconds = 1;
  if (!(this->seconds() <= 0 && this->seconds() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_seconds(), target);
  }

  // bool restart_after_stop = 2;
  if (this->restart_after_stop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_restart_after_stop(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.mission.Sleep)
  return target;
}

size_t Sleep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.mission.Sleep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float seconds = 1;
  if (!(this->seconds() <= 0 && this->seconds() >= 0)) {
    total_size += 1 + 4;
  }

  // bool restart_after_stop = 2;
  if (this->restart_after_stop() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sleep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.mission.Sleep)
  GOOGLE_DCHECK_NE(&from, this);
  const Sleep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Sleep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.mission.Sleep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.mission.Sleep)
    MergeFrom(*source);
  }
}

void Sleep::MergeFrom(const Sleep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.mission.Sleep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.seconds() <= 0 && from.seconds() >= 0)) {
    _internal_set_seconds(from._internal_seconds());
  }
  if (from.restart_after_stop() != 0) {
    _internal_set_restart_after_stop(from._internal_restart_after_stop());
  }
}

void Sleep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.mission.Sleep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sleep::CopyFrom(const Sleep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.mission.Sleep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sleep::IsInitialized() const {
  return true;
}

void Sleep::InternalSwap(Sleep* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Sleep, restart_after_stop_)
      + sizeof(Sleep::restart_after_stop_)
      - PROTOBUF_FIELD_OFFSET(Sleep, seconds_)>(
          reinterpret_cast<char*>(&seconds_),
          reinterpret_cast<char*>(&other->seconds_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Sleep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Prompt_Option::InitAsDefaultInstance() {
}
class Prompt_Option::_Internal {
 public:
};

Prompt_Option::Prompt_Option(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.mission.Prompt.Option)
}
Prompt_Option::Prompt_Option(const Prompt_Option& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text().empty()) {
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_text(),
      GetArena());
  }
  answer_code_ = from.answer_code_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.mission.Prompt.Option)
}

void Prompt_Option::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Prompt_Option_bosdyn_2fapi_2fmission_2fnodes_2eproto.base);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  answer_code_ = PROTOBUF_LONGLONG(0);
}

Prompt_Option::~Prompt_Option() {
  // @@protoc_insertion_point(destructor:bosdyn.api.mission.Prompt.Option)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Prompt_Option::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Prompt_Option::ArenaDtor(void* object) {
  Prompt_Option* _this = reinterpret_cast< Prompt_Option* >(object);
  (void)_this;
}
void Prompt_Option::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Prompt_Option::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Prompt_Option& Prompt_Option::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Prompt_Option_bosdyn_2fapi_2fmission_2fnodes_2eproto.base);
  return *internal_default_instance();
}


void Prompt_Option::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.mission.Prompt.Option)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  answer_code_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Prompt_Option::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.mission.Prompt.Option.text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 answer_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          answer_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Prompt_Option::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.mission.Prompt.Option)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.mission.Prompt.Option.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  // int64 answer_code = 2;
  if (this->answer_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_answer_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.mission.Prompt.Option)
  return target;
}

size_t Prompt_Option::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.mission.Prompt.Option)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // int64 answer_code = 2;
  if (this->answer_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_answer_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Prompt_Option::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.mission.Prompt.Option)
  GOOGLE_DCHECK_NE(&from, this);
  const Prompt_Option* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Prompt_Option>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.mission.Prompt.Option)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.mission.Prompt.Option)
    MergeFrom(*source);
  }
}

void Prompt_Option::MergeFrom(const Prompt_Option& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.mission.Prompt.Option)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {
    _internal_set_text(from._internal_text());
  }
  if (from.answer_code() != 0) {
    _internal_set_answer_code(from._internal_answer_code());
  }
}

void Prompt_Option::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.mission.Prompt.Option)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Prompt_Option::CopyFrom(const Prompt_Option& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.mission.Prompt.Option)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Prompt_Option::IsInitialized() const {
  return true;
}

void Prompt_Option::InternalSwap(Prompt_Option* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(answer_code_, other->answer_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Prompt_Option::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Prompt::InitAsDefaultInstance() {
  ::bosdyn::api::mission::_Prompt_default_instance_._instance.get_mutable()->child_ = const_cast< ::bosdyn::api::mission::Node*>(
      ::bosdyn::api::mission::Node::internal_default_instance());
}
class Prompt::_Internal {
 public:
  static const ::bosdyn::api::mission::Node& child(const Prompt* msg);
};

const ::bosdyn::api::mission::Node&
Prompt::_Internal::child(const Prompt* msg) {
  return *msg->child_;
}
Prompt::Prompt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  options_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.mission.Prompt)
}
Prompt::Prompt(const Prompt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      options_(from.options_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text().empty()) {
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_text(),
      GetArena());
  }
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source().empty()) {
    source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_source(),
      GetArena());
  }
  if (from._internal_has_child()) {
    child_ = new ::bosdyn::api::mission::Node(*from.child_);
  } else {
    child_ = nullptr;
  }
  ::memcpy(&always_reprompt_, &from.always_reprompt_,
    static_cast<size_t>(reinterpret_cast<char*>(&for_autonomous_processing_) -
    reinterpret_cast<char*>(&always_reprompt_)) + sizeof(for_autonomous_processing_));
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.mission.Prompt)
}

void Prompt::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Prompt_bosdyn_2fapi_2fmission_2fnodes_2eproto.base);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&child_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&for_autonomous_processing_) -
      reinterpret_cast<char*>(&child_)) + sizeof(for_autonomous_processing_));
}

Prompt::~Prompt() {
  // @@protoc_insertion_point(destructor:bosdyn.api.mission.Prompt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Prompt::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete child_;
}

void Prompt::ArenaDtor(void* object) {
  Prompt* _this = reinterpret_cast< Prompt* >(object);
  (void)_this;
}
void Prompt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Prompt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Prompt& Prompt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Prompt_bosdyn_2fapi_2fmission_2fnodes_2eproto.base);
  return *internal_default_instance();
}


void Prompt::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.mission.Prompt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  options_.Clear();
  text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  source_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && child_ != nullptr) {
    delete child_;
  }
  child_ = nullptr;
  ::memset(&always_reprompt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&for_autonomous_processing_) -
      reinterpret_cast<char*>(&always_reprompt_)) + sizeof(for_autonomous_processing_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Prompt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool always_reprompt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          always_reprompt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.mission.Prompt.text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string source = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_source();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.mission.Prompt.source"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bosdyn.api.mission.Prompt.Option options = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_options(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.mission.Node child = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_child(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool for_autonomous_processing = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          for_autonomous_processing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Prompt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.mission.Prompt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool always_reprompt = 1;
  if (this->always_reprompt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_always_reprompt(), target);
  }

  // string text = 2;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.mission.Prompt.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  // string source = 3;
  if (this->source().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source().data(), static_cast<int>(this->_internal_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.mission.Prompt.source");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_source(), target);
  }

  // repeated .bosdyn.api.mission.Prompt.Option options = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_options_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_options(i), target, stream);
  }

  // .bosdyn.api.mission.Node child = 5;
  if (this->has_child()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::child(this), target, stream);
  }

  // bool for_autonomous_processing = 6;
  if (this->for_autonomous_processing() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_for_autonomous_processing(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.mission.Prompt)
  return target;
}

size_t Prompt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.mission.Prompt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bosdyn.api.mission.Prompt.Option options = 4;
  total_size += 1UL * this->_internal_options_size();
  for (const auto& msg : this->options_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string text = 2;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // string source = 3;
  if (this->source().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source());
  }

  // .bosdyn.api.mission.Node child = 5;
  if (this->has_child()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *child_);
  }

  // bool always_reprompt = 1;
  if (this->always_reprompt() != 0) {
    total_size += 1 + 1;
  }

  // bool for_autonomous_processing = 6;
  if (this->for_autonomous_processing() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Prompt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.mission.Prompt)
  GOOGLE_DCHECK_NE(&from, this);
  const Prompt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Prompt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.mission.Prompt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.mission.Prompt)
    MergeFrom(*source);
  }
}

void Prompt::MergeFrom(const Prompt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.mission.Prompt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  options_.MergeFrom(from.options_);
  if (from.text().size() > 0) {
    _internal_set_text(from._internal_text());
  }
  if (from.source().size() > 0) {
    _internal_set_source(from._internal_source());
  }
  if (from.has_child()) {
    _internal_mutable_child()->::bosdyn::api::mission::Node::MergeFrom(from._internal_child());
  }
  if (from.always_reprompt() != 0) {
    _internal_set_always_reprompt(from._internal_always_reprompt());
  }
  if (from.for_autonomous_processing() != 0) {
    _internal_set_for_autonomous_processing(from._internal_for_autonomous_processing());
  }
}

void Prompt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.mission.Prompt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Prompt::CopyFrom(const Prompt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.mission.Prompt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Prompt::IsInitialized() const {
  return true;
}

void Prompt::InternalSwap(Prompt* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  options_.InternalSwap(&other->options_);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  source_.Swap(&other->source_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Prompt, for_autonomous_processing_)
      + sizeof(Prompt::for_autonomous_processing_)
      - PROTOBUF_FIELD_OFFSET(Prompt, child_)>(
          reinterpret_cast<char*>(&child_),
          reinterpret_cast<char*>(&other->child_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Prompt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpotCamStoreMedia::InitAsDefaultInstance() {
  ::bosdyn::api::mission::_SpotCamStoreMedia_default_instance_._instance.get_mutable()->camera_ = const_cast< ::bosdyn::api::spot_cam::Camera*>(
      ::bosdyn::api::spot_cam::Camera::internal_default_instance());
}
class SpotCamStoreMedia::_Internal {
 public:
  static const ::bosdyn::api::spot_cam::Camera& camera(const SpotCamStoreMedia* msg);
};

const ::bosdyn::api::spot_cam::Camera&
SpotCamStoreMedia::_Internal::camera(const SpotCamStoreMedia* msg) {
  return *msg->camera_;
}
void SpotCamStoreMedia::clear_camera() {
  if (GetArena() == nullptr && camera_ != nullptr) {
    delete camera_;
  }
  camera_ = nullptr;
}
SpotCamStoreMedia::SpotCamStoreMedia(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.mission.SpotCamStoreMedia)
}
SpotCamStoreMedia::SpotCamStoreMedia(const SpotCamStoreMedia& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_service_name().empty()) {
    service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_service_name(),
      GetArena());
  }
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_host().empty()) {
    host_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_host(),
      GetArena());
  }
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tag().empty()) {
    tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tag(),
      GetArena());
  }
  if (from._internal_has_camera()) {
    camera_ = new ::bosdyn::api::spot_cam::Camera(*from.camera_);
  } else {
    camera_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.mission.SpotCamStoreMedia)
}

void SpotCamStoreMedia::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpotCamStoreMedia_bosdyn_2fapi_2fmission_2fnodes_2eproto.base);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&camera_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&camera_)) + sizeof(type_));
}

SpotCamStoreMedia::~SpotCamStoreMedia() {
  // @@protoc_insertion_point(destructor:bosdyn.api.mission.SpotCamStoreMedia)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpotCamStoreMedia::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  service_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete camera_;
}

void SpotCamStoreMedia::ArenaDtor(void* object) {
  SpotCamStoreMedia* _this = reinterpret_cast< SpotCamStoreMedia* >(object);
  (void)_this;
}
void SpotCamStoreMedia::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpotCamStoreMedia::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpotCamStoreMedia& SpotCamStoreMedia::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpotCamStoreMedia_bosdyn_2fapi_2fmission_2fnodes_2eproto.base);
  return *internal_default_instance();
}


void SpotCamStoreMedia::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.mission.SpotCamStoreMedia)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  host_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tag_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && camera_ != nullptr) {
    delete camera_;
  }
  camera_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpotCamStoreMedia::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string service_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_service_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.mission.SpotCamStoreMedia.service_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string host = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_host();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.mission.SpotCamStoreMedia.host"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.spot_cam.Camera camera = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_camera(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.spot_cam.Logpoint.RecordType type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::bosdyn::api::spot_cam::Logpoint_RecordType>(val));
        } else goto handle_unusual;
        continue;
      // string tag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.mission.SpotCamStoreMedia.tag"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpotCamStoreMedia::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.mission.SpotCamStoreMedia)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_name().data(), static_cast<int>(this->_internal_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.mission.SpotCamStoreMedia.service_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service_name(), target);
  }

  // string host = 2;
  if (this->host().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.mission.SpotCamStoreMedia.host");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_host(), target);
  }

  // .bosdyn.api.spot_cam.Camera camera = 3;
  if (this->has_camera()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::camera(this), target, stream);
  }

  // .bosdyn.api.spot_cam.Logpoint.RecordType type = 4;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  // string tag = 5;
  if (this->tag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.mission.SpotCamStoreMedia.tag");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_tag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.mission.SpotCamStoreMedia)
  return target;
}

size_t SpotCamStoreMedia::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.mission.SpotCamStoreMedia)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_name());
  }

  // string host = 2;
  if (this->host().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host());
  }

  // string tag = 5;
  if (this->tag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  // .bosdyn.api.spot_cam.Camera camera = 3;
  if (this->has_camera()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *camera_);
  }

  // .bosdyn.api.spot_cam.Logpoint.RecordType type = 4;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpotCamStoreMedia::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.mission.SpotCamStoreMedia)
  GOOGLE_DCHECK_NE(&from, this);
  const SpotCamStoreMedia* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpotCamStoreMedia>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.mission.SpotCamStoreMedia)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.mission.SpotCamStoreMedia)
    MergeFrom(*source);
  }
}

void SpotCamStoreMedia::MergeFrom(const SpotCamStoreMedia& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.mission.SpotCamStoreMedia)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.service_name().size() > 0) {
    _internal_set_service_name(from._internal_service_name());
  }
  if (from.host().size() > 0) {
    _internal_set_host(from._internal_host());
  }
  if (from.tag().size() > 0) {
    _internal_set_tag(from._internal_tag());
  }
  if (from.has_camera()) {
    _internal_mutable_camera()->::bosdyn::api::spot_cam::Camera::MergeFrom(from._internal_camera());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void SpotCamStoreMedia::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.mission.SpotCamStoreMedia)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpotCamStoreMedia::CopyFrom(const SpotCamStoreMedia& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.mission.SpotCamStoreMedia)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpotCamStoreMedia::IsInitialized() const {
  return true;
}

void SpotCamStoreMedia::InternalSwap(SpotCamStoreMedia* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  service_name_.Swap(&other->service_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  host_.Swap(&other->host_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpotCamStoreMedia, type_)
      + sizeof(SpotCamStoreMedia::type_)
      - PROTOBUF_FIELD_OFFSET(SpotCamStoreMedia, camera_)>(
          reinterpret_cast<char*>(&camera_),
          reinterpret_cast<char*>(&other->camera_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpotCamStoreMedia::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DefineBlackboard::InitAsDefaultInstance() {
  ::bosdyn::api::mission::_DefineBlackboard_default_instance_._instance.get_mutable()->child_ = const_cast< ::bosdyn::api::mission::Node*>(
      ::bosdyn::api::mission::Node::internal_default_instance());
}
class DefineBlackboard::_Internal {
 public:
  static const ::bosdyn::api::mission::Node& child(const DefineBlackboard* msg);
};

const ::bosdyn::api::mission::Node&
DefineBlackboard::_Internal::child(const DefineBlackboard* msg) {
  return *msg->child_;
}
void DefineBlackboard::clear_blackboard_variables() {
  blackboard_variables_.Clear();
}
DefineBlackboard::DefineBlackboard(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  blackboard_variables_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.mission.DefineBlackboard)
}
DefineBlackboard::DefineBlackboard(const DefineBlackboard& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      blackboard_variables_(from.blackboard_variables_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_child()) {
    child_ = new ::bosdyn::api::mission::Node(*from.child_);
  } else {
    child_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.mission.DefineBlackboard)
}

void DefineBlackboard::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DefineBlackboard_bosdyn_2fapi_2fmission_2fnodes_2eproto.base);
  child_ = nullptr;
}

DefineBlackboard::~DefineBlackboard() {
  // @@protoc_insertion_point(destructor:bosdyn.api.mission.DefineBlackboard)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DefineBlackboard::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete child_;
}

void DefineBlackboard::ArenaDtor(void* object) {
  DefineBlackboard* _this = reinterpret_cast< DefineBlackboard* >(object);
  (void)_this;
}
void DefineBlackboard::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DefineBlackboard::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DefineBlackboard& DefineBlackboard::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DefineBlackboard_bosdyn_2fapi_2fmission_2fnodes_2eproto.base);
  return *internal_default_instance();
}


void DefineBlackboard::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.mission.DefineBlackboard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blackboard_variables_.Clear();
  if (GetArena() == nullptr && child_ != nullptr) {
    delete child_;
  }
  child_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DefineBlackboard::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bosdyn.api.mission.KeyValue blackboard_variables = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blackboard_variables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.mission.Node child = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_child(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DefineBlackboard::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.mission.DefineBlackboard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bosdyn.api.mission.KeyValue blackboard_variables = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_blackboard_variables_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_blackboard_variables(i), target, stream);
  }

  // .bosdyn.api.mission.Node child = 2;
  if (this->has_child()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::child(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.mission.DefineBlackboard)
  return target;
}

size_t DefineBlackboard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.mission.DefineBlackboard)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bosdyn.api.mission.KeyValue blackboard_variables = 1;
  total_size += 1UL * this->_internal_blackboard_variables_size();
  for (const auto& msg : this->blackboard_variables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .bosdyn.api.mission.Node child = 2;
  if (this->has_child()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *child_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DefineBlackboard::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.mission.DefineBlackboard)
  GOOGLE_DCHECK_NE(&from, this);
  const DefineBlackboard* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DefineBlackboard>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.mission.DefineBlackboard)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.mission.DefineBlackboard)
    MergeFrom(*source);
  }
}

void DefineBlackboard::MergeFrom(const DefineBlackboard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.mission.DefineBlackboard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  blackboard_variables_.MergeFrom(from.blackboard_variables_);
  if (from.has_child()) {
    _internal_mutable_child()->::bosdyn::api::mission::Node::MergeFrom(from._internal_child());
  }
}

void DefineBlackboard::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.mission.DefineBlackboard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DefineBlackboard::CopyFrom(const DefineBlackboard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.mission.DefineBlackboard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DefineBlackboard::IsInitialized() const {
  return true;
}

void DefineBlackboard::InternalSwap(DefineBlackboard* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  blackboard_variables_.InternalSwap(&other->blackboard_variables_);
  swap(child_, other->child_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DefineBlackboard::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetBlackboard::InitAsDefaultInstance() {
}
class SetBlackboard::_Internal {
 public:
};

void SetBlackboard::clear_blackboard_variables() {
  blackboard_variables_.Clear();
}
SetBlackboard::SetBlackboard(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  blackboard_variables_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.mission.SetBlackboard)
}
SetBlackboard::SetBlackboard(const SetBlackboard& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      blackboard_variables_(from.blackboard_variables_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.mission.SetBlackboard)
}

void SetBlackboard::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetBlackboard_bosdyn_2fapi_2fmission_2fnodes_2eproto.base);
}

SetBlackboard::~SetBlackboard() {
  // @@protoc_insertion_point(destructor:bosdyn.api.mission.SetBlackboard)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetBlackboard::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetBlackboard::ArenaDtor(void* object) {
  SetBlackboard* _this = reinterpret_cast< SetBlackboard* >(object);
  (void)_this;
}
void SetBlackboard::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetBlackboard::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetBlackboard& SetBlackboard::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetBlackboard_bosdyn_2fapi_2fmission_2fnodes_2eproto.base);
  return *internal_default_instance();
}


void SetBlackboard::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.mission.SetBlackboard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blackboard_variables_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetBlackboard::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bosdyn.api.mission.KeyValue blackboard_variables = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blackboard_variables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetBlackboard::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.mission.SetBlackboard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bosdyn.api.mission.KeyValue blackboard_variables = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_blackboard_variables_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_blackboard_variables(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.mission.SetBlackboard)
  return target;
}

size_t SetBlackboard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.mission.SetBlackboard)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bosdyn.api.mission.KeyValue blackboard_variables = 1;
  total_size += 1UL * this->_internal_blackboard_variables_size();
  for (const auto& msg : this->blackboard_variables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetBlackboard::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.mission.SetBlackboard)
  GOOGLE_DCHECK_NE(&from, this);
  const SetBlackboard* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetBlackboard>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.mission.SetBlackboard)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.mission.SetBlackboard)
    MergeFrom(*source);
  }
}

void SetBlackboard::MergeFrom(const SetBlackboard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.mission.SetBlackboard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  blackboard_variables_.MergeFrom(from.blackboard_variables_);
}

void SetBlackboard::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.mission.SetBlackboard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetBlackboard::CopyFrom(const SetBlackboard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.mission.SetBlackboard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetBlackboard::IsInitialized() const {
  return true;
}

void SetBlackboard::InternalSwap(SetBlackboard* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  blackboard_variables_.InternalSwap(&other->blackboard_variables_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetBlackboard::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConstantResult::InitAsDefaultInstance() {
}
class ConstantResult::_Internal {
 public:
};

ConstantResult::ConstantResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.mission.ConstantResult)
}
ConstantResult::ConstantResult(const ConstantResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.mission.ConstantResult)
}

void ConstantResult::SharedCtor() {
  result_ = 0;
}

ConstantResult::~ConstantResult() {
  // @@protoc_insertion_point(destructor:bosdyn.api.mission.ConstantResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConstantResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ConstantResult::ArenaDtor(void* object) {
  ConstantResult* _this = reinterpret_cast< ConstantResult* >(object);
  (void)_this;
}
void ConstantResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConstantResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConstantResult& ConstantResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConstantResult_bosdyn_2fapi_2fmission_2fnodes_2eproto.base);
  return *internal_default_instance();
}


void ConstantResult::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.mission.ConstantResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConstantResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.mission.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::bosdyn::api::mission::Result>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConstantResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.mission.ConstantResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.mission.Result result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.mission.ConstantResult)
  return target;
}

size_t ConstantResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.mission.ConstantResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.mission.Result result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConstantResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.mission.ConstantResult)
  GOOGLE_DCHECK_NE(&from, this);
  const ConstantResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConstantResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.mission.ConstantResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.mission.ConstantResult)
    MergeFrom(*source);
  }
}

void ConstantResult::MergeFrom(const ConstantResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.mission.ConstantResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void ConstantResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.mission.ConstantResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConstantResult::CopyFrom(const ConstantResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.mission.ConstantResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConstantResult::IsInitialized() const {
  return true;
}

void ConstantResult::InternalSwap(ConstantResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConstantResult::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mission
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bosdyn::api::mission::Node* Arena::CreateMaybeMessage< ::bosdyn::api::mission::Node >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::mission::Node >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::mission::Sequence* Arena::CreateMaybeMessage< ::bosdyn::api::mission::Sequence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::mission::Sequence >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::mission::Selector* Arena::CreateMaybeMessage< ::bosdyn::api::mission::Selector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::mission::Selector >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::mission::Repeat* Arena::CreateMaybeMessage< ::bosdyn::api::mission::Repeat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::mission::Repeat >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::mission::Retry* Arena::CreateMaybeMessage< ::bosdyn::api::mission::Retry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::mission::Retry >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::mission::ForDuration* Arena::CreateMaybeMessage< ::bosdyn::api::mission::ForDuration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::mission::ForDuration >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::mission::SimpleParallel* Arena::CreateMaybeMessage< ::bosdyn::api::mission::SimpleParallel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::mission::SimpleParallel >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::mission::Condition_Operand* Arena::CreateMaybeMessage< ::bosdyn::api::mission::Condition_Operand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::mission::Condition_Operand >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::mission::Condition* Arena::CreateMaybeMessage< ::bosdyn::api::mission::Condition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::mission::Condition >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::mission::BosdynRobotState* Arena::CreateMaybeMessage< ::bosdyn::api::mission::BosdynRobotState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::mission::BosdynRobotState >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::mission::BosdynRobotCommand* Arena::CreateMaybeMessage< ::bosdyn::api::mission::BosdynRobotCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::mission::BosdynRobotCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::mission::BosdynPowerRequest* Arena::CreateMaybeMessage< ::bosdyn::api::mission::BosdynPowerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::mission::BosdynPowerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::mission::BosdynNavigateTo* Arena::CreateMaybeMessage< ::bosdyn::api::mission::BosdynNavigateTo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::mission::BosdynNavigateTo >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::mission::BosdynGraphNavState* Arena::CreateMaybeMessage< ::bosdyn::api::mission::BosdynGraphNavState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::mission::BosdynGraphNavState >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::mission::BosdynGraphNavLocalize* Arena::CreateMaybeMessage< ::bosdyn::api::mission::BosdynGraphNavLocalize >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::mission::BosdynGraphNavLocalize >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::mission::RemoteGrpc* Arena::CreateMaybeMessage< ::bosdyn::api::mission::RemoteGrpc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::mission::RemoteGrpc >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::mission::Sleep* Arena::CreateMaybeMessage< ::bosdyn::api::mission::Sleep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::mission::Sleep >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::mission::Prompt_Option* Arena::CreateMaybeMessage< ::bosdyn::api::mission::Prompt_Option >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::mission::Prompt_Option >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::mission::Prompt* Arena::CreateMaybeMessage< ::bosdyn::api::mission::Prompt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::mission::Prompt >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::mission::SpotCamStoreMedia* Arena::CreateMaybeMessage< ::bosdyn::api::mission::SpotCamStoreMedia >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::mission::SpotCamStoreMedia >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::mission::DefineBlackboard* Arena::CreateMaybeMessage< ::bosdyn::api::mission::DefineBlackboard >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::mission::DefineBlackboard >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::mission::SetBlackboard* Arena::CreateMaybeMessage< ::bosdyn::api::mission::SetBlackboard >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::mission::SetBlackboard >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::mission::ConstantResult* Arena::CreateMaybeMessage< ::bosdyn::api::mission::ConstantResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::mission::ConstantResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
