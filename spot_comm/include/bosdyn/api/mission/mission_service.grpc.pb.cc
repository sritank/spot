// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bosdyn/api/mission/mission_service.proto

#include "bosdyn/api/mission/mission_service.pb.h"
#include "bosdyn/api/mission/mission_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace bosdyn {
namespace api {
namespace mission {

static const char* MissionService_method_names[] = {
  "/bosdyn.api.mission.MissionService/LoadMission",
  "/bosdyn.api.mission.MissionService/PlayMission",
  "/bosdyn.api.mission.MissionService/PauseMission",
  "/bosdyn.api.mission.MissionService/RestartMission",
  "/bosdyn.api.mission.MissionService/GetState",
  "/bosdyn.api.mission.MissionService/GetInfo",
  "/bosdyn.api.mission.MissionService/GetMission",
  "/bosdyn.api.mission.MissionService/AnswerQuestion",
};

std::unique_ptr< MissionService::Stub> MissionService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MissionService::Stub> stub(new MissionService::Stub(channel));
  return stub;
}

MissionService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_LoadMission_(MissionService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PlayMission_(MissionService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PauseMission_(MissionService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RestartMission_(MissionService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetState_(MissionService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetInfo_(MissionService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMission_(MissionService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AnswerQuestion_(MissionService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MissionService::Stub::LoadMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::LoadMissionRequest& request, ::bosdyn::api::mission::LoadMissionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_LoadMission_, context, request, response);
}

void MissionService::Stub::experimental_async::LoadMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::LoadMissionRequest* request, ::bosdyn::api::mission::LoadMissionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LoadMission_, context, request, response, std::move(f));
}

void MissionService::Stub::experimental_async::LoadMission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::mission::LoadMissionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LoadMission_, context, request, response, std::move(f));
}

void MissionService::Stub::experimental_async::LoadMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::LoadMissionRequest* request, ::bosdyn::api::mission::LoadMissionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_LoadMission_, context, request, response, reactor);
}

void MissionService::Stub::experimental_async::LoadMission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::mission::LoadMissionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_LoadMission_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::LoadMissionResponse>* MissionService::Stub::AsyncLoadMissionRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::LoadMissionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::mission::LoadMissionResponse>::Create(channel_.get(), cq, rpcmethod_LoadMission_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::LoadMissionResponse>* MissionService::Stub::PrepareAsyncLoadMissionRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::LoadMissionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::mission::LoadMissionResponse>::Create(channel_.get(), cq, rpcmethod_LoadMission_, context, request, false);
}

::grpc::Status MissionService::Stub::PlayMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::PlayMissionRequest& request, ::bosdyn::api::mission::PlayMissionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PlayMission_, context, request, response);
}

void MissionService::Stub::experimental_async::PlayMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::PlayMissionRequest* request, ::bosdyn::api::mission::PlayMissionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PlayMission_, context, request, response, std::move(f));
}

void MissionService::Stub::experimental_async::PlayMission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::mission::PlayMissionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PlayMission_, context, request, response, std::move(f));
}

void MissionService::Stub::experimental_async::PlayMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::PlayMissionRequest* request, ::bosdyn::api::mission::PlayMissionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PlayMission_, context, request, response, reactor);
}

void MissionService::Stub::experimental_async::PlayMission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::mission::PlayMissionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PlayMission_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::PlayMissionResponse>* MissionService::Stub::AsyncPlayMissionRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::PlayMissionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::mission::PlayMissionResponse>::Create(channel_.get(), cq, rpcmethod_PlayMission_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::PlayMissionResponse>* MissionService::Stub::PrepareAsyncPlayMissionRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::PlayMissionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::mission::PlayMissionResponse>::Create(channel_.get(), cq, rpcmethod_PlayMission_, context, request, false);
}

::grpc::Status MissionService::Stub::PauseMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::PauseMissionRequest& request, ::bosdyn::api::mission::PauseMissionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PauseMission_, context, request, response);
}

void MissionService::Stub::experimental_async::PauseMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::PauseMissionRequest* request, ::bosdyn::api::mission::PauseMissionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PauseMission_, context, request, response, std::move(f));
}

void MissionService::Stub::experimental_async::PauseMission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::mission::PauseMissionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PauseMission_, context, request, response, std::move(f));
}

void MissionService::Stub::experimental_async::PauseMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::PauseMissionRequest* request, ::bosdyn::api::mission::PauseMissionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PauseMission_, context, request, response, reactor);
}

void MissionService::Stub::experimental_async::PauseMission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::mission::PauseMissionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PauseMission_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::PauseMissionResponse>* MissionService::Stub::AsyncPauseMissionRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::PauseMissionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::mission::PauseMissionResponse>::Create(channel_.get(), cq, rpcmethod_PauseMission_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::PauseMissionResponse>* MissionService::Stub::PrepareAsyncPauseMissionRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::PauseMissionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::mission::PauseMissionResponse>::Create(channel_.get(), cq, rpcmethod_PauseMission_, context, request, false);
}

::grpc::Status MissionService::Stub::RestartMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::RestartMissionRequest& request, ::bosdyn::api::mission::RestartMissionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RestartMission_, context, request, response);
}

void MissionService::Stub::experimental_async::RestartMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::RestartMissionRequest* request, ::bosdyn::api::mission::RestartMissionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RestartMission_, context, request, response, std::move(f));
}

void MissionService::Stub::experimental_async::RestartMission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::mission::RestartMissionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RestartMission_, context, request, response, std::move(f));
}

void MissionService::Stub::experimental_async::RestartMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::RestartMissionRequest* request, ::bosdyn::api::mission::RestartMissionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RestartMission_, context, request, response, reactor);
}

void MissionService::Stub::experimental_async::RestartMission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::mission::RestartMissionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RestartMission_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::RestartMissionResponse>* MissionService::Stub::AsyncRestartMissionRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::RestartMissionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::mission::RestartMissionResponse>::Create(channel_.get(), cq, rpcmethod_RestartMission_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::RestartMissionResponse>* MissionService::Stub::PrepareAsyncRestartMissionRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::RestartMissionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::mission::RestartMissionResponse>::Create(channel_.get(), cq, rpcmethod_RestartMission_, context, request, false);
}

::grpc::Status MissionService::Stub::GetState(::grpc::ClientContext* context, const ::bosdyn::api::mission::GetStateRequest& request, ::bosdyn::api::mission::GetStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetState_, context, request, response);
}

void MissionService::Stub::experimental_async::GetState(::grpc::ClientContext* context, const ::bosdyn::api::mission::GetStateRequest* request, ::bosdyn::api::mission::GetStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetState_, context, request, response, std::move(f));
}

void MissionService::Stub::experimental_async::GetState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::mission::GetStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetState_, context, request, response, std::move(f));
}

void MissionService::Stub::experimental_async::GetState(::grpc::ClientContext* context, const ::bosdyn::api::mission::GetStateRequest* request, ::bosdyn::api::mission::GetStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetState_, context, request, response, reactor);
}

void MissionService::Stub::experimental_async::GetState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::mission::GetStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::GetStateResponse>* MissionService::Stub::AsyncGetStateRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::GetStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::mission::GetStateResponse>::Create(channel_.get(), cq, rpcmethod_GetState_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::GetStateResponse>* MissionService::Stub::PrepareAsyncGetStateRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::GetStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::mission::GetStateResponse>::Create(channel_.get(), cq, rpcmethod_GetState_, context, request, false);
}

::grpc::Status MissionService::Stub::GetInfo(::grpc::ClientContext* context, const ::bosdyn::api::mission::GetInfoRequest& request, ::bosdyn::api::mission::GetInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetInfo_, context, request, response);
}

void MissionService::Stub::experimental_async::GetInfo(::grpc::ClientContext* context, const ::bosdyn::api::mission::GetInfoRequest* request, ::bosdyn::api::mission::GetInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetInfo_, context, request, response, std::move(f));
}

void MissionService::Stub::experimental_async::GetInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::mission::GetInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetInfo_, context, request, response, std::move(f));
}

void MissionService::Stub::experimental_async::GetInfo(::grpc::ClientContext* context, const ::bosdyn::api::mission::GetInfoRequest* request, ::bosdyn::api::mission::GetInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetInfo_, context, request, response, reactor);
}

void MissionService::Stub::experimental_async::GetInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::mission::GetInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::GetInfoResponse>* MissionService::Stub::AsyncGetInfoRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::GetInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::mission::GetInfoResponse>::Create(channel_.get(), cq, rpcmethod_GetInfo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::GetInfoResponse>* MissionService::Stub::PrepareAsyncGetInfoRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::GetInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::mission::GetInfoResponse>::Create(channel_.get(), cq, rpcmethod_GetInfo_, context, request, false);
}

::grpc::Status MissionService::Stub::GetMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::GetMissionRequest& request, ::bosdyn::api::mission::GetMissionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetMission_, context, request, response);
}

void MissionService::Stub::experimental_async::GetMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::GetMissionRequest* request, ::bosdyn::api::mission::GetMissionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMission_, context, request, response, std::move(f));
}

void MissionService::Stub::experimental_async::GetMission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::mission::GetMissionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMission_, context, request, response, std::move(f));
}

void MissionService::Stub::experimental_async::GetMission(::grpc::ClientContext* context, const ::bosdyn::api::mission::GetMissionRequest* request, ::bosdyn::api::mission::GetMissionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMission_, context, request, response, reactor);
}

void MissionService::Stub::experimental_async::GetMission(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::mission::GetMissionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMission_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::GetMissionResponse>* MissionService::Stub::AsyncGetMissionRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::GetMissionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::mission::GetMissionResponse>::Create(channel_.get(), cq, rpcmethod_GetMission_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::GetMissionResponse>* MissionService::Stub::PrepareAsyncGetMissionRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::GetMissionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::mission::GetMissionResponse>::Create(channel_.get(), cq, rpcmethod_GetMission_, context, request, false);
}

::grpc::Status MissionService::Stub::AnswerQuestion(::grpc::ClientContext* context, const ::bosdyn::api::mission::AnswerQuestionRequest& request, ::bosdyn::api::mission::AnswerQuestionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AnswerQuestion_, context, request, response);
}

void MissionService::Stub::experimental_async::AnswerQuestion(::grpc::ClientContext* context, const ::bosdyn::api::mission::AnswerQuestionRequest* request, ::bosdyn::api::mission::AnswerQuestionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AnswerQuestion_, context, request, response, std::move(f));
}

void MissionService::Stub::experimental_async::AnswerQuestion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::mission::AnswerQuestionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AnswerQuestion_, context, request, response, std::move(f));
}

void MissionService::Stub::experimental_async::AnswerQuestion(::grpc::ClientContext* context, const ::bosdyn::api::mission::AnswerQuestionRequest* request, ::bosdyn::api::mission::AnswerQuestionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AnswerQuestion_, context, request, response, reactor);
}

void MissionService::Stub::experimental_async::AnswerQuestion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::mission::AnswerQuestionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AnswerQuestion_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::AnswerQuestionResponse>* MissionService::Stub::AsyncAnswerQuestionRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::AnswerQuestionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::mission::AnswerQuestionResponse>::Create(channel_.get(), cq, rpcmethod_AnswerQuestion_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::mission::AnswerQuestionResponse>* MissionService::Stub::PrepareAsyncAnswerQuestionRaw(::grpc::ClientContext* context, const ::bosdyn::api::mission::AnswerQuestionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::mission::AnswerQuestionResponse>::Create(channel_.get(), cq, rpcmethod_AnswerQuestion_, context, request, false);
}

MissionService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MissionService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MissionService::Service, ::bosdyn::api::mission::LoadMissionRequest, ::bosdyn::api::mission::LoadMissionResponse>(
          [](MissionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::mission::LoadMissionRequest* req,
             ::bosdyn::api::mission::LoadMissionResponse* resp) {
               return service->LoadMission(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MissionService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MissionService::Service, ::bosdyn::api::mission::PlayMissionRequest, ::bosdyn::api::mission::PlayMissionResponse>(
          [](MissionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::mission::PlayMissionRequest* req,
             ::bosdyn::api::mission::PlayMissionResponse* resp) {
               return service->PlayMission(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MissionService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MissionService::Service, ::bosdyn::api::mission::PauseMissionRequest, ::bosdyn::api::mission::PauseMissionResponse>(
          [](MissionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::mission::PauseMissionRequest* req,
             ::bosdyn::api::mission::PauseMissionResponse* resp) {
               return service->PauseMission(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MissionService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MissionService::Service, ::bosdyn::api::mission::RestartMissionRequest, ::bosdyn::api::mission::RestartMissionResponse>(
          [](MissionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::mission::RestartMissionRequest* req,
             ::bosdyn::api::mission::RestartMissionResponse* resp) {
               return service->RestartMission(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MissionService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MissionService::Service, ::bosdyn::api::mission::GetStateRequest, ::bosdyn::api::mission::GetStateResponse>(
          [](MissionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::mission::GetStateRequest* req,
             ::bosdyn::api::mission::GetStateResponse* resp) {
               return service->GetState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MissionService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MissionService::Service, ::bosdyn::api::mission::GetInfoRequest, ::bosdyn::api::mission::GetInfoResponse>(
          [](MissionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::mission::GetInfoRequest* req,
             ::bosdyn::api::mission::GetInfoResponse* resp) {
               return service->GetInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MissionService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MissionService::Service, ::bosdyn::api::mission::GetMissionRequest, ::bosdyn::api::mission::GetMissionResponse>(
          [](MissionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::mission::GetMissionRequest* req,
             ::bosdyn::api::mission::GetMissionResponse* resp) {
               return service->GetMission(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MissionService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MissionService::Service, ::bosdyn::api::mission::AnswerQuestionRequest, ::bosdyn::api::mission::AnswerQuestionResponse>(
          [](MissionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::mission::AnswerQuestionRequest* req,
             ::bosdyn::api::mission::AnswerQuestionResponse* resp) {
               return service->AnswerQuestion(ctx, req, resp);
             }, this)));
}

MissionService::Service::~Service() {
}

::grpc::Status MissionService::Service::LoadMission(::grpc::ServerContext* context, const ::bosdyn::api::mission::LoadMissionRequest* request, ::bosdyn::api::mission::LoadMissionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MissionService::Service::PlayMission(::grpc::ServerContext* context, const ::bosdyn::api::mission::PlayMissionRequest* request, ::bosdyn::api::mission::PlayMissionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MissionService::Service::PauseMission(::grpc::ServerContext* context, const ::bosdyn::api::mission::PauseMissionRequest* request, ::bosdyn::api::mission::PauseMissionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MissionService::Service::RestartMission(::grpc::ServerContext* context, const ::bosdyn::api::mission::RestartMissionRequest* request, ::bosdyn::api::mission::RestartMissionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MissionService::Service::GetState(::grpc::ServerContext* context, const ::bosdyn::api::mission::GetStateRequest* request, ::bosdyn::api::mission::GetStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MissionService::Service::GetInfo(::grpc::ServerContext* context, const ::bosdyn::api::mission::GetInfoRequest* request, ::bosdyn::api::mission::GetInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MissionService::Service::GetMission(::grpc::ServerContext* context, const ::bosdyn::api::mission::GetMissionRequest* request, ::bosdyn::api::mission::GetMissionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MissionService::Service::AnswerQuestion(::grpc::ServerContext* context, const ::bosdyn::api::mission::AnswerQuestionRequest* request, ::bosdyn::api::mission::AnswerQuestionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace bosdyn
}  // namespace api
}  // namespace mission

