// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/mission/util.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fmission_2futil_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fmission_2futil_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fmission_2futil_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bosdyn_2fapi_2fmission_2futil_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fmission_2futil_2eproto;
namespace bosdyn {
namespace api {
namespace mission {
class ConstantValue;
class ConstantValueDefaultTypeInternal;
extern ConstantValueDefaultTypeInternal _ConstantValue_default_instance_;
class KeyValue;
class KeyValueDefaultTypeInternal;
extern KeyValueDefaultTypeInternal _KeyValue_default_instance_;
class UserData;
class UserDataDefaultTypeInternal;
extern UserDataDefaultTypeInternal _UserData_default_instance_;
class Value;
class ValueDefaultTypeInternal;
extern ValueDefaultTypeInternal _Value_default_instance_;
class VariableDeclaration;
class VariableDeclarationDefaultTypeInternal;
extern VariableDeclarationDefaultTypeInternal _VariableDeclaration_default_instance_;
}  // namespace mission
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> ::bosdyn::api::mission::ConstantValue* Arena::CreateMaybeMessage<::bosdyn::api::mission::ConstantValue>(Arena*);
template<> ::bosdyn::api::mission::KeyValue* Arena::CreateMaybeMessage<::bosdyn::api::mission::KeyValue>(Arena*);
template<> ::bosdyn::api::mission::UserData* Arena::CreateMaybeMessage<::bosdyn::api::mission::UserData>(Arena*);
template<> ::bosdyn::api::mission::Value* Arena::CreateMaybeMessage<::bosdyn::api::mission::Value>(Arena*);
template<> ::bosdyn::api::mission::VariableDeclaration* Arena::CreateMaybeMessage<::bosdyn::api::mission::VariableDeclaration>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bosdyn {
namespace api {
namespace mission {

enum VariableDeclaration_Type : int {
  VariableDeclaration_Type_TYPE_UNKNOWN = 0,
  VariableDeclaration_Type_TYPE_FLOAT = 1,
  VariableDeclaration_Type_TYPE_STRING = 2,
  VariableDeclaration_Type_TYPE_INT = 3,
  VariableDeclaration_Type_TYPE_BOOL = 4,
  VariableDeclaration_Type_TYPE_MESSAGE = 5,
  VariableDeclaration_Type_VariableDeclaration_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  VariableDeclaration_Type_VariableDeclaration_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool VariableDeclaration_Type_IsValid(int value);
constexpr VariableDeclaration_Type VariableDeclaration_Type_Type_MIN = VariableDeclaration_Type_TYPE_UNKNOWN;
constexpr VariableDeclaration_Type VariableDeclaration_Type_Type_MAX = VariableDeclaration_Type_TYPE_MESSAGE;
constexpr int VariableDeclaration_Type_Type_ARRAYSIZE = VariableDeclaration_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VariableDeclaration_Type_descriptor();
template<typename T>
inline const std::string& VariableDeclaration_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VariableDeclaration_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VariableDeclaration_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VariableDeclaration_Type_descriptor(), enum_t_value);
}
inline bool VariableDeclaration_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VariableDeclaration_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VariableDeclaration_Type>(
    VariableDeclaration_Type_descriptor(), name, value);
}
enum Result : int {
  RESULT_UNKNOWN = 0,
  RESULT_FAILURE = 1,
  RESULT_RUNNING = 2,
  RESULT_SUCCESS = 3,
  RESULT_ERROR = 4,
  Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Result_IsValid(int value);
constexpr Result Result_MIN = RESULT_UNKNOWN;
constexpr Result Result_MAX = RESULT_ERROR;
constexpr int Result_ARRAYSIZE = Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Result_descriptor();
template<typename T>
inline const std::string& Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Result_descriptor(), enum_t_value);
}
inline bool Result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Result>(
    Result_descriptor(), name, value);
}
// ===================================================================

class KeyValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.mission.KeyValue) */ {
 public:
  inline KeyValue() : KeyValue(nullptr) {}
  virtual ~KeyValue();

  KeyValue(const KeyValue& from);
  KeyValue(KeyValue&& from) noexcept
    : KeyValue() {
    *this = ::std::move(from);
  }

  inline KeyValue& operator=(const KeyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyValue& operator=(KeyValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyValue* internal_default_instance() {
    return reinterpret_cast<const KeyValue*>(
               &_KeyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KeyValue& a, KeyValue& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyValue* New() const final {
    return CreateMaybeMessage<KeyValue>(nullptr);
  }

  KeyValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyValue& from);
  void MergeFrom(const KeyValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.mission.KeyValue";
  }
  protected:
  explicit KeyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fmission_2futil_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fmission_2futil_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // .bosdyn.api.mission.Value value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::bosdyn::api::mission::Value& value() const;
  ::bosdyn::api::mission::Value* release_value();
  ::bosdyn::api::mission::Value* mutable_value();
  void set_allocated_value(::bosdyn::api::mission::Value* value);
  private:
  const ::bosdyn::api::mission::Value& _internal_value() const;
  ::bosdyn::api::mission::Value* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::bosdyn::api::mission::Value* value);
  ::bosdyn::api::mission::Value* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:bosdyn.api.mission.KeyValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::bosdyn::api::mission::Value* value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fmission_2futil_2eproto;
};
// -------------------------------------------------------------------

class Value PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.mission.Value) */ {
 public:
  inline Value() : Value(nullptr) {}
  virtual ~Value();

  Value(const Value& from);
  Value(Value&& from) noexcept
    : Value() {
    *this = ::std::move(from);
  }

  inline Value& operator=(const Value& from) {
    CopyFrom(from);
    return *this;
  }
  inline Value& operator=(Value&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Value& default_instance();

  enum SourceCase {
    kConstant = 2,
    kRuntimeVar = 3,
    kParameter = 4,
    SOURCE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Value* internal_default_instance() {
    return reinterpret_cast<const Value*>(
               &_Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Value& a, Value& b) {
    a.Swap(&b);
  }
  inline void Swap(Value* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Value* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Value* New() const final {
    return CreateMaybeMessage<Value>(nullptr);
  }

  Value* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Value>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Value& from);
  void MergeFrom(const Value& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Value* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.mission.Value";
  }
  protected:
  explicit Value(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fmission_2futil_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fmission_2futil_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConstantFieldNumber = 2,
    kRuntimeVarFieldNumber = 3,
    kParameterFieldNumber = 4,
  };
  // .bosdyn.api.mission.ConstantValue constant = 2;
  bool has_constant() const;
  private:
  bool _internal_has_constant() const;
  public:
  void clear_constant();
  const ::bosdyn::api::mission::ConstantValue& constant() const;
  ::bosdyn::api::mission::ConstantValue* release_constant();
  ::bosdyn::api::mission::ConstantValue* mutable_constant();
  void set_allocated_constant(::bosdyn::api::mission::ConstantValue* constant);
  private:
  const ::bosdyn::api::mission::ConstantValue& _internal_constant() const;
  ::bosdyn::api::mission::ConstantValue* _internal_mutable_constant();
  public:
  void unsafe_arena_set_allocated_constant(
      ::bosdyn::api::mission::ConstantValue* constant);
  ::bosdyn::api::mission::ConstantValue* unsafe_arena_release_constant();

  // .bosdyn.api.mission.VariableDeclaration runtime_var = 3;
  bool has_runtime_var() const;
  private:
  bool _internal_has_runtime_var() const;
  public:
  void clear_runtime_var();
  const ::bosdyn::api::mission::VariableDeclaration& runtime_var() const;
  ::bosdyn::api::mission::VariableDeclaration* release_runtime_var();
  ::bosdyn::api::mission::VariableDeclaration* mutable_runtime_var();
  void set_allocated_runtime_var(::bosdyn::api::mission::VariableDeclaration* runtime_var);
  private:
  const ::bosdyn::api::mission::VariableDeclaration& _internal_runtime_var() const;
  ::bosdyn::api::mission::VariableDeclaration* _internal_mutable_runtime_var();
  public:
  void unsafe_arena_set_allocated_runtime_var(
      ::bosdyn::api::mission::VariableDeclaration* runtime_var);
  ::bosdyn::api::mission::VariableDeclaration* unsafe_arena_release_runtime_var();

  // .bosdyn.api.mission.VariableDeclaration parameter = 4;
  bool has_parameter() const;
  private:
  bool _internal_has_parameter() const;
  public:
  void clear_parameter();
  const ::bosdyn::api::mission::VariableDeclaration& parameter() const;
  ::bosdyn::api::mission::VariableDeclaration* release_parameter();
  ::bosdyn::api::mission::VariableDeclaration* mutable_parameter();
  void set_allocated_parameter(::bosdyn::api::mission::VariableDeclaration* parameter);
  private:
  const ::bosdyn::api::mission::VariableDeclaration& _internal_parameter() const;
  ::bosdyn::api::mission::VariableDeclaration* _internal_mutable_parameter();
  public:
  void unsafe_arena_set_allocated_parameter(
      ::bosdyn::api::mission::VariableDeclaration* parameter);
  ::bosdyn::api::mission::VariableDeclaration* unsafe_arena_release_parameter();

  void clear_source();
  SourceCase source_case() const;
  // @@protoc_insertion_point(class_scope:bosdyn.api.mission.Value)
 private:
  class _Internal;
  void set_has_constant();
  void set_has_runtime_var();
  void set_has_parameter();

  inline bool has_source() const;
  inline void clear_has_source();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union SourceUnion {
    SourceUnion() {}
    ::bosdyn::api::mission::ConstantValue* constant_;
    ::bosdyn::api::mission::VariableDeclaration* runtime_var_;
    ::bosdyn::api::mission::VariableDeclaration* parameter_;
  } source_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_bosdyn_2fapi_2fmission_2futil_2eproto;
};
// -------------------------------------------------------------------

class VariableDeclaration PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.mission.VariableDeclaration) */ {
 public:
  inline VariableDeclaration() : VariableDeclaration(nullptr) {}
  virtual ~VariableDeclaration();

  VariableDeclaration(const VariableDeclaration& from);
  VariableDeclaration(VariableDeclaration&& from) noexcept
    : VariableDeclaration() {
    *this = ::std::move(from);
  }

  inline VariableDeclaration& operator=(const VariableDeclaration& from) {
    CopyFrom(from);
    return *this;
  }
  inline VariableDeclaration& operator=(VariableDeclaration&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VariableDeclaration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VariableDeclaration* internal_default_instance() {
    return reinterpret_cast<const VariableDeclaration*>(
               &_VariableDeclaration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VariableDeclaration& a, VariableDeclaration& b) {
    a.Swap(&b);
  }
  inline void Swap(VariableDeclaration* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VariableDeclaration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VariableDeclaration* New() const final {
    return CreateMaybeMessage<VariableDeclaration>(nullptr);
  }

  VariableDeclaration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VariableDeclaration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VariableDeclaration& from);
  void MergeFrom(const VariableDeclaration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VariableDeclaration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.mission.VariableDeclaration";
  }
  protected:
  explicit VariableDeclaration(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fmission_2futil_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fmission_2futil_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef VariableDeclaration_Type Type;
  static constexpr Type TYPE_UNKNOWN =
    VariableDeclaration_Type_TYPE_UNKNOWN;
  static constexpr Type TYPE_FLOAT =
    VariableDeclaration_Type_TYPE_FLOAT;
  static constexpr Type TYPE_STRING =
    VariableDeclaration_Type_TYPE_STRING;
  static constexpr Type TYPE_INT =
    VariableDeclaration_Type_TYPE_INT;
  static constexpr Type TYPE_BOOL =
    VariableDeclaration_Type_TYPE_BOOL;
  static constexpr Type TYPE_MESSAGE =
    VariableDeclaration_Type_TYPE_MESSAGE;
  static inline bool Type_IsValid(int value) {
    return VariableDeclaration_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    VariableDeclaration_Type_Type_MIN;
  static constexpr Type Type_MAX =
    VariableDeclaration_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    VariableDeclaration_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return VariableDeclaration_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return VariableDeclaration_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return VariableDeclaration_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .bosdyn.api.mission.VariableDeclaration.Type type = 2;
  void clear_type();
  ::bosdyn::api::mission::VariableDeclaration_Type type() const;
  void set_type(::bosdyn::api::mission::VariableDeclaration_Type value);
  private:
  ::bosdyn::api::mission::VariableDeclaration_Type _internal_type() const;
  void _internal_set_type(::bosdyn::api::mission::VariableDeclaration_Type value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.mission.VariableDeclaration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fmission_2futil_2eproto;
};
// -------------------------------------------------------------------

class ConstantValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.mission.ConstantValue) */ {
 public:
  inline ConstantValue() : ConstantValue(nullptr) {}
  virtual ~ConstantValue();

  ConstantValue(const ConstantValue& from);
  ConstantValue(ConstantValue&& from) noexcept
    : ConstantValue() {
    *this = ::std::move(from);
  }

  inline ConstantValue& operator=(const ConstantValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConstantValue& operator=(ConstantValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConstantValue& default_instance();

  enum ValueCase {
    kFloatValue = 1,
    kStringValue = 2,
    kIntValue = 3,
    kBoolValue = 4,
    kMsgValue = 5,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConstantValue* internal_default_instance() {
    return reinterpret_cast<const ConstantValue*>(
               &_ConstantValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ConstantValue& a, ConstantValue& b) {
    a.Swap(&b);
  }
  inline void Swap(ConstantValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConstantValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConstantValue* New() const final {
    return CreateMaybeMessage<ConstantValue>(nullptr);
  }

  ConstantValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConstantValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConstantValue& from);
  void MergeFrom(const ConstantValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConstantValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.mission.ConstantValue";
  }
  protected:
  explicit ConstantValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fmission_2futil_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fmission_2futil_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFloatValueFieldNumber = 1,
    kStringValueFieldNumber = 2,
    kIntValueFieldNumber = 3,
    kBoolValueFieldNumber = 4,
    kMsgValueFieldNumber = 5,
  };
  // double float_value = 1;
  private:
  bool _internal_has_float_value() const;
  public:
  void clear_float_value();
  double float_value() const;
  void set_float_value(double value);
  private:
  double _internal_float_value() const;
  void _internal_set_float_value(double value);
  public:

  // string string_value = 2;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  void set_string_value(const std::string& value);
  void set_string_value(std::string&& value);
  void set_string_value(const char* value);
  void set_string_value(const char* value, size_t size);
  std::string* mutable_string_value();
  std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  // int64 int_value = 3;
  private:
  bool _internal_has_int_value() const;
  public:
  void clear_int_value();
  ::PROTOBUF_NAMESPACE_ID::int64 int_value() const;
  void set_int_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_int_value() const;
  void _internal_set_int_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool bool_value = 4;
  private:
  bool _internal_has_bool_value() const;
  public:
  void clear_bool_value();
  bool bool_value() const;
  void set_bool_value(bool value);
  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);
  public:

  // .google.protobuf.Any msg_value = 5;
  bool has_msg_value() const;
  private:
  bool _internal_has_msg_value() const;
  public:
  void clear_msg_value();
  const PROTOBUF_NAMESPACE_ID::Any& msg_value() const;
  PROTOBUF_NAMESPACE_ID::Any* release_msg_value();
  PROTOBUF_NAMESPACE_ID::Any* mutable_msg_value();
  void set_allocated_msg_value(PROTOBUF_NAMESPACE_ID::Any* msg_value);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_msg_value() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_msg_value();
  public:
  void unsafe_arena_set_allocated_msg_value(
      PROTOBUF_NAMESPACE_ID::Any* msg_value);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_msg_value();

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:bosdyn.api.mission.ConstantValue)
 private:
  class _Internal;
  void set_has_float_value();
  void set_has_string_value();
  void set_has_int_value();
  void set_has_bool_value();
  void set_has_msg_value();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ValueUnion {
    ValueUnion() {}
    double float_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
    ::PROTOBUF_NAMESPACE_ID::int64 int_value_;
    bool bool_value_;
    PROTOBUF_NAMESPACE_ID::Any* msg_value_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_bosdyn_2fapi_2fmission_2futil_2eproto;
};
// -------------------------------------------------------------------

class UserData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.mission.UserData) */ {
 public:
  inline UserData() : UserData(nullptr) {}
  virtual ~UserData();

  UserData(const UserData& from);
  UserData(UserData&& from) noexcept
    : UserData() {
    *this = ::std::move(from);
  }

  inline UserData& operator=(const UserData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserData& operator=(UserData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserData* internal_default_instance() {
    return reinterpret_cast<const UserData*>(
               &_UserData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UserData& a, UserData& b) {
    a.Swap(&b);
  }
  inline void Swap(UserData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserData* New() const final {
    return CreateMaybeMessage<UserData>(nullptr);
  }

  UserData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserData& from);
  void MergeFrom(const UserData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.mission.UserData";
  }
  protected:
  explicit UserData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fmission_2futil_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fmission_2futil_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kBytestringFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // bytes bytestring = 3;
  void clear_bytestring();
  const std::string& bytestring() const;
  void set_bytestring(const std::string& value);
  void set_bytestring(std::string&& value);
  void set_bytestring(const char* value);
  void set_bytestring(const void* value, size_t size);
  std::string* mutable_bytestring();
  std::string* release_bytestring();
  void set_allocated_bytestring(std::string* bytestring);
  private:
  const std::string& _internal_bytestring() const;
  void _internal_set_bytestring(const std::string& value);
  std::string* _internal_mutable_bytestring();
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.mission.UserData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytestring_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fmission_2futil_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KeyValue

// string key = 1;
inline void KeyValue::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& KeyValue::key() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.mission.KeyValue.key)
  return _internal_key();
}
inline void KeyValue::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.mission.KeyValue.key)
}
inline std::string* KeyValue::mutable_key() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.mission.KeyValue.key)
  return _internal_mutable_key();
}
inline const std::string& KeyValue::_internal_key() const {
  return key_.Get();
}
inline void KeyValue::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KeyValue::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.mission.KeyValue.key)
}
inline void KeyValue::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.mission.KeyValue.key)
}
inline void KeyValue::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.mission.KeyValue.key)
}
inline std::string* KeyValue::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KeyValue::release_key() {
  // @@protoc_insertion_point(field_release:bosdyn.api.mission.KeyValue.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KeyValue::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.mission.KeyValue.key)
}

// .bosdyn.api.mission.Value value = 2;
inline bool KeyValue::_internal_has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline bool KeyValue::has_value() const {
  return _internal_has_value();
}
inline void KeyValue::clear_value() {
  if (GetArena() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
inline const ::bosdyn::api::mission::Value& KeyValue::_internal_value() const {
  const ::bosdyn::api::mission::Value* p = value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::mission::Value*>(
      &::bosdyn::api::mission::_Value_default_instance_);
}
inline const ::bosdyn::api::mission::Value& KeyValue::value() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.mission.KeyValue.value)
  return _internal_value();
}
inline void KeyValue::unsafe_arena_set_allocated_value(
    ::bosdyn::api::mission::Value* value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.mission.KeyValue.value)
}
inline ::bosdyn::api::mission::Value* KeyValue::release_value() {
  
  ::bosdyn::api::mission::Value* temp = value_;
  value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::mission::Value* KeyValue::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:bosdyn.api.mission.KeyValue.value)
  
  ::bosdyn::api::mission::Value* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::bosdyn::api::mission::Value* KeyValue::_internal_mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::mission::Value>(GetArena());
    value_ = p;
  }
  return value_;
}
inline ::bosdyn::api::mission::Value* KeyValue::mutable_value() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.mission.KeyValue.value)
  return _internal_mutable_value();
}
inline void KeyValue::set_allocated_value(::bosdyn::api::mission::Value* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.mission.KeyValue.value)
}

// -------------------------------------------------------------------

// Value

// .bosdyn.api.mission.ConstantValue constant = 2;
inline bool Value::_internal_has_constant() const {
  return source_case() == kConstant;
}
inline bool Value::has_constant() const {
  return _internal_has_constant();
}
inline void Value::set_has_constant() {
  _oneof_case_[0] = kConstant;
}
inline void Value::clear_constant() {
  if (_internal_has_constant()) {
    if (GetArena() == nullptr) {
      delete source_.constant_;
    }
    clear_has_source();
  }
}
inline ::bosdyn::api::mission::ConstantValue* Value::release_constant() {
  // @@protoc_insertion_point(field_release:bosdyn.api.mission.Value.constant)
  if (_internal_has_constant()) {
    clear_has_source();
      ::bosdyn::api::mission::ConstantValue* temp = source_.constant_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    source_.constant_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::mission::ConstantValue& Value::_internal_constant() const {
  return _internal_has_constant()
      ? *source_.constant_
      : *reinterpret_cast< ::bosdyn::api::mission::ConstantValue*>(&::bosdyn::api::mission::_ConstantValue_default_instance_);
}
inline const ::bosdyn::api::mission::ConstantValue& Value::constant() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.mission.Value.constant)
  return _internal_constant();
}
inline ::bosdyn::api::mission::ConstantValue* Value::unsafe_arena_release_constant() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.mission.Value.constant)
  if (_internal_has_constant()) {
    clear_has_source();
    ::bosdyn::api::mission::ConstantValue* temp = source_.constant_;
    source_.constant_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Value::unsafe_arena_set_allocated_constant(::bosdyn::api::mission::ConstantValue* constant) {
  clear_source();
  if (constant) {
    set_has_constant();
    source_.constant_ = constant;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.mission.Value.constant)
}
inline ::bosdyn::api::mission::ConstantValue* Value::_internal_mutable_constant() {
  if (!_internal_has_constant()) {
    clear_source();
    set_has_constant();
    source_.constant_ = CreateMaybeMessage< ::bosdyn::api::mission::ConstantValue >(GetArena());
  }
  return source_.constant_;
}
inline ::bosdyn::api::mission::ConstantValue* Value::mutable_constant() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.mission.Value.constant)
  return _internal_mutable_constant();
}

// .bosdyn.api.mission.VariableDeclaration runtime_var = 3;
inline bool Value::_internal_has_runtime_var() const {
  return source_case() == kRuntimeVar;
}
inline bool Value::has_runtime_var() const {
  return _internal_has_runtime_var();
}
inline void Value::set_has_runtime_var() {
  _oneof_case_[0] = kRuntimeVar;
}
inline void Value::clear_runtime_var() {
  if (_internal_has_runtime_var()) {
    if (GetArena() == nullptr) {
      delete source_.runtime_var_;
    }
    clear_has_source();
  }
}
inline ::bosdyn::api::mission::VariableDeclaration* Value::release_runtime_var() {
  // @@protoc_insertion_point(field_release:bosdyn.api.mission.Value.runtime_var)
  if (_internal_has_runtime_var()) {
    clear_has_source();
      ::bosdyn::api::mission::VariableDeclaration* temp = source_.runtime_var_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    source_.runtime_var_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::mission::VariableDeclaration& Value::_internal_runtime_var() const {
  return _internal_has_runtime_var()
      ? *source_.runtime_var_
      : *reinterpret_cast< ::bosdyn::api::mission::VariableDeclaration*>(&::bosdyn::api::mission::_VariableDeclaration_default_instance_);
}
inline const ::bosdyn::api::mission::VariableDeclaration& Value::runtime_var() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.mission.Value.runtime_var)
  return _internal_runtime_var();
}
inline ::bosdyn::api::mission::VariableDeclaration* Value::unsafe_arena_release_runtime_var() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.mission.Value.runtime_var)
  if (_internal_has_runtime_var()) {
    clear_has_source();
    ::bosdyn::api::mission::VariableDeclaration* temp = source_.runtime_var_;
    source_.runtime_var_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Value::unsafe_arena_set_allocated_runtime_var(::bosdyn::api::mission::VariableDeclaration* runtime_var) {
  clear_source();
  if (runtime_var) {
    set_has_runtime_var();
    source_.runtime_var_ = runtime_var;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.mission.Value.runtime_var)
}
inline ::bosdyn::api::mission::VariableDeclaration* Value::_internal_mutable_runtime_var() {
  if (!_internal_has_runtime_var()) {
    clear_source();
    set_has_runtime_var();
    source_.runtime_var_ = CreateMaybeMessage< ::bosdyn::api::mission::VariableDeclaration >(GetArena());
  }
  return source_.runtime_var_;
}
inline ::bosdyn::api::mission::VariableDeclaration* Value::mutable_runtime_var() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.mission.Value.runtime_var)
  return _internal_mutable_runtime_var();
}

// .bosdyn.api.mission.VariableDeclaration parameter = 4;
inline bool Value::_internal_has_parameter() const {
  return source_case() == kParameter;
}
inline bool Value::has_parameter() const {
  return _internal_has_parameter();
}
inline void Value::set_has_parameter() {
  _oneof_case_[0] = kParameter;
}
inline void Value::clear_parameter() {
  if (_internal_has_parameter()) {
    if (GetArena() == nullptr) {
      delete source_.parameter_;
    }
    clear_has_source();
  }
}
inline ::bosdyn::api::mission::VariableDeclaration* Value::release_parameter() {
  // @@protoc_insertion_point(field_release:bosdyn.api.mission.Value.parameter)
  if (_internal_has_parameter()) {
    clear_has_source();
      ::bosdyn::api::mission::VariableDeclaration* temp = source_.parameter_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    source_.parameter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::mission::VariableDeclaration& Value::_internal_parameter() const {
  return _internal_has_parameter()
      ? *source_.parameter_
      : *reinterpret_cast< ::bosdyn::api::mission::VariableDeclaration*>(&::bosdyn::api::mission::_VariableDeclaration_default_instance_);
}
inline const ::bosdyn::api::mission::VariableDeclaration& Value::parameter() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.mission.Value.parameter)
  return _internal_parameter();
}
inline ::bosdyn::api::mission::VariableDeclaration* Value::unsafe_arena_release_parameter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.mission.Value.parameter)
  if (_internal_has_parameter()) {
    clear_has_source();
    ::bosdyn::api::mission::VariableDeclaration* temp = source_.parameter_;
    source_.parameter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Value::unsafe_arena_set_allocated_parameter(::bosdyn::api::mission::VariableDeclaration* parameter) {
  clear_source();
  if (parameter) {
    set_has_parameter();
    source_.parameter_ = parameter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.mission.Value.parameter)
}
inline ::bosdyn::api::mission::VariableDeclaration* Value::_internal_mutable_parameter() {
  if (!_internal_has_parameter()) {
    clear_source();
    set_has_parameter();
    source_.parameter_ = CreateMaybeMessage< ::bosdyn::api::mission::VariableDeclaration >(GetArena());
  }
  return source_.parameter_;
}
inline ::bosdyn::api::mission::VariableDeclaration* Value::mutable_parameter() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.mission.Value.parameter)
  return _internal_mutable_parameter();
}

inline bool Value::has_source() const {
  return source_case() != SOURCE_NOT_SET;
}
inline void Value::clear_has_source() {
  _oneof_case_[0] = SOURCE_NOT_SET;
}
inline Value::SourceCase Value::source_case() const {
  return Value::SourceCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// VariableDeclaration

// string name = 1;
inline void VariableDeclaration::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& VariableDeclaration::name() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.mission.VariableDeclaration.name)
  return _internal_name();
}
inline void VariableDeclaration::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.mission.VariableDeclaration.name)
}
inline std::string* VariableDeclaration::mutable_name() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.mission.VariableDeclaration.name)
  return _internal_mutable_name();
}
inline const std::string& VariableDeclaration::_internal_name() const {
  return name_.Get();
}
inline void VariableDeclaration::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VariableDeclaration::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.mission.VariableDeclaration.name)
}
inline void VariableDeclaration::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.mission.VariableDeclaration.name)
}
inline void VariableDeclaration::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.mission.VariableDeclaration.name)
}
inline std::string* VariableDeclaration::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VariableDeclaration::release_name() {
  // @@protoc_insertion_point(field_release:bosdyn.api.mission.VariableDeclaration.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VariableDeclaration::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.mission.VariableDeclaration.name)
}

// .bosdyn.api.mission.VariableDeclaration.Type type = 2;
inline void VariableDeclaration::clear_type() {
  type_ = 0;
}
inline ::bosdyn::api::mission::VariableDeclaration_Type VariableDeclaration::_internal_type() const {
  return static_cast< ::bosdyn::api::mission::VariableDeclaration_Type >(type_);
}
inline ::bosdyn::api::mission::VariableDeclaration_Type VariableDeclaration::type() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.mission.VariableDeclaration.type)
  return _internal_type();
}
inline void VariableDeclaration::_internal_set_type(::bosdyn::api::mission::VariableDeclaration_Type value) {
  
  type_ = value;
}
inline void VariableDeclaration::set_type(::bosdyn::api::mission::VariableDeclaration_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.mission.VariableDeclaration.type)
}

// -------------------------------------------------------------------

// ConstantValue

// double float_value = 1;
inline bool ConstantValue::_internal_has_float_value() const {
  return value_case() == kFloatValue;
}
inline void ConstantValue::set_has_float_value() {
  _oneof_case_[0] = kFloatValue;
}
inline void ConstantValue::clear_float_value() {
  if (_internal_has_float_value()) {
    value_.float_value_ = 0;
    clear_has_value();
  }
}
inline double ConstantValue::_internal_float_value() const {
  if (_internal_has_float_value()) {
    return value_.float_value_;
  }
  return 0;
}
inline void ConstantValue::_internal_set_float_value(double value) {
  if (!_internal_has_float_value()) {
    clear_value();
    set_has_float_value();
  }
  value_.float_value_ = value;
}
inline double ConstantValue::float_value() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.mission.ConstantValue.float_value)
  return _internal_float_value();
}
inline void ConstantValue::set_float_value(double value) {
  _internal_set_float_value(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.mission.ConstantValue.float_value)
}

// string string_value = 2;
inline bool ConstantValue::_internal_has_string_value() const {
  return value_case() == kStringValue;
}
inline void ConstantValue::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
inline void ConstantValue::clear_string_value() {
  if (_internal_has_string_value()) {
    value_.string_value_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_value();
  }
}
inline const std::string& ConstantValue::string_value() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.mission.ConstantValue.string_value)
  return _internal_string_value();
}
inline void ConstantValue::set_string_value(const std::string& value) {
  _internal_set_string_value(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.mission.ConstantValue.string_value)
}
inline std::string* ConstantValue::mutable_string_value() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.mission.ConstantValue.string_value)
  return _internal_mutable_string_value();
}
inline const std::string& ConstantValue::_internal_string_value() const {
  if (_internal_has_string_value()) {
    return value_.string_value_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ConstantValue::_internal_set_string_value(const std::string& value) {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConstantValue::set_string_value(std::string&& value) {
  // @@protoc_insertion_point(field_set:bosdyn.api.mission.ConstantValue.string_value)
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.mission.ConstantValue.string_value)
}
inline void ConstantValue::set_string_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.mission.ConstantValue.string_value)
}
inline void ConstantValue::set_string_value(const char* value,
                             size_t size) {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.mission.ConstantValue.string_value)
}
inline std::string* ConstantValue::_internal_mutable_string_value() {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_.string_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConstantValue::release_string_value() {
  // @@protoc_insertion_point(field_release:bosdyn.api.mission.ConstantValue.string_value)
  if (_internal_has_string_value()) {
    clear_has_value();
    return value_.string_value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void ConstantValue::set_allocated_string_value(std::string* string_value) {
  if (has_value()) {
    clear_value();
  }
  if (string_value != nullptr) {
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(string_value);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(string_value);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.mission.ConstantValue.string_value)
}

// int64 int_value = 3;
inline bool ConstantValue::_internal_has_int_value() const {
  return value_case() == kIntValue;
}
inline void ConstantValue::set_has_int_value() {
  _oneof_case_[0] = kIntValue;
}
inline void ConstantValue::clear_int_value() {
  if (_internal_has_int_value()) {
    value_.int_value_ = PROTOBUF_LONGLONG(0);
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ConstantValue::_internal_int_value() const {
  if (_internal_has_int_value()) {
    return value_.int_value_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void ConstantValue::_internal_set_int_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_int_value()) {
    clear_value();
    set_has_int_value();
  }
  value_.int_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ConstantValue::int_value() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.mission.ConstantValue.int_value)
  return _internal_int_value();
}
inline void ConstantValue::set_int_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_int_value(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.mission.ConstantValue.int_value)
}

// bool bool_value = 4;
inline bool ConstantValue::_internal_has_bool_value() const {
  return value_case() == kBoolValue;
}
inline void ConstantValue::set_has_bool_value() {
  _oneof_case_[0] = kBoolValue;
}
inline void ConstantValue::clear_bool_value() {
  if (_internal_has_bool_value()) {
    value_.bool_value_ = false;
    clear_has_value();
  }
}
inline bool ConstantValue::_internal_bool_value() const {
  if (_internal_has_bool_value()) {
    return value_.bool_value_;
  }
  return false;
}
inline void ConstantValue::_internal_set_bool_value(bool value) {
  if (!_internal_has_bool_value()) {
    clear_value();
    set_has_bool_value();
  }
  value_.bool_value_ = value;
}
inline bool ConstantValue::bool_value() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.mission.ConstantValue.bool_value)
  return _internal_bool_value();
}
inline void ConstantValue::set_bool_value(bool value) {
  _internal_set_bool_value(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.mission.ConstantValue.bool_value)
}

// .google.protobuf.Any msg_value = 5;
inline bool ConstantValue::_internal_has_msg_value() const {
  return value_case() == kMsgValue;
}
inline bool ConstantValue::has_msg_value() const {
  return _internal_has_msg_value();
}
inline void ConstantValue::set_has_msg_value() {
  _oneof_case_[0] = kMsgValue;
}
inline PROTOBUF_NAMESPACE_ID::Any* ConstantValue::release_msg_value() {
  // @@protoc_insertion_point(field_release:bosdyn.api.mission.ConstantValue.msg_value)
  if (_internal_has_msg_value()) {
    clear_has_value();
      PROTOBUF_NAMESPACE_ID::Any* temp = value_.msg_value_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.msg_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Any& ConstantValue::_internal_msg_value() const {
  return _internal_has_msg_value()
      ? *value_.msg_value_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Any*>(&PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& ConstantValue::msg_value() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.mission.ConstantValue.msg_value)
  return _internal_msg_value();
}
inline PROTOBUF_NAMESPACE_ID::Any* ConstantValue::unsafe_arena_release_msg_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.mission.ConstantValue.msg_value)
  if (_internal_has_msg_value()) {
    clear_has_value();
    PROTOBUF_NAMESPACE_ID::Any* temp = value_.msg_value_;
    value_.msg_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ConstantValue::unsafe_arena_set_allocated_msg_value(PROTOBUF_NAMESPACE_ID::Any* msg_value) {
  clear_value();
  if (msg_value) {
    set_has_msg_value();
    value_.msg_value_ = msg_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.mission.ConstantValue.msg_value)
}
inline PROTOBUF_NAMESPACE_ID::Any* ConstantValue::_internal_mutable_msg_value() {
  if (!_internal_has_msg_value()) {
    clear_value();
    set_has_msg_value();
    value_.msg_value_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Any >(GetArena());
  }
  return value_.msg_value_;
}
inline PROTOBUF_NAMESPACE_ID::Any* ConstantValue::mutable_msg_value() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.mission.ConstantValue.msg_value)
  return _internal_mutable_msg_value();
}

inline bool ConstantValue::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void ConstantValue::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline ConstantValue::ValueCase ConstantValue::value_case() const {
  return ConstantValue::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// UserData

// string id = 1;
inline void UserData::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserData::id() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.mission.UserData.id)
  return _internal_id();
}
inline void UserData::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.mission.UserData.id)
}
inline std::string* UserData::mutable_id() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.mission.UserData.id)
  return _internal_mutable_id();
}
inline const std::string& UserData::_internal_id() const {
  return id_.Get();
}
inline void UserData::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserData::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.mission.UserData.id)
}
inline void UserData::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.mission.UserData.id)
}
inline void UserData::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.mission.UserData.id)
}
inline std::string* UserData::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserData::release_id() {
  // @@protoc_insertion_point(field_release:bosdyn.api.mission.UserData.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserData::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.mission.UserData.id)
}

// bytes bytestring = 3;
inline void UserData::clear_bytestring() {
  bytestring_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserData::bytestring() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.mission.UserData.bytestring)
  return _internal_bytestring();
}
inline void UserData::set_bytestring(const std::string& value) {
  _internal_set_bytestring(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.mission.UserData.bytestring)
}
inline std::string* UserData::mutable_bytestring() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.mission.UserData.bytestring)
  return _internal_mutable_bytestring();
}
inline const std::string& UserData::_internal_bytestring() const {
  return bytestring_.Get();
}
inline void UserData::_internal_set_bytestring(const std::string& value) {
  
  bytestring_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserData::set_bytestring(std::string&& value) {
  
  bytestring_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.mission.UserData.bytestring)
}
inline void UserData::set_bytestring(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bytestring_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.mission.UserData.bytestring)
}
inline void UserData::set_bytestring(const void* value,
    size_t size) {
  
  bytestring_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.mission.UserData.bytestring)
}
inline std::string* UserData::_internal_mutable_bytestring() {
  
  return bytestring_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserData::release_bytestring() {
  // @@protoc_insertion_point(field_release:bosdyn.api.mission.UserData.bytestring)
  return bytestring_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserData::set_allocated_bytestring(std::string* bytestring) {
  if (bytestring != nullptr) {
    
  } else {
    
  }
  bytestring_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bytestring,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.mission.UserData.bytestring)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mission
}  // namespace api
}  // namespace bosdyn

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bosdyn::api::mission::VariableDeclaration_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::mission::VariableDeclaration_Type>() {
  return ::bosdyn::api::mission::VariableDeclaration_Type_descriptor();
}
template <> struct is_proto_enum< ::bosdyn::api::mission::Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::mission::Result>() {
  return ::bosdyn::api::mission::Result_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fmission_2futil_2eproto
