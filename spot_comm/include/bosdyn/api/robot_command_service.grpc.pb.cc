// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bosdyn/api/robot_command_service.proto

#include "bosdyn/api/robot_command_service.pb.h"
#include "bosdyn/api/robot_command_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace bosdyn {
namespace api {

static const char* RobotCommandService_method_names[] = {
  "/bosdyn.api.RobotCommandService/RobotCommand",
  "/bosdyn.api.RobotCommandService/RobotCommandFeedback",
  "/bosdyn.api.RobotCommandService/ClearBehaviorFault",
};

std::unique_ptr< RobotCommandService::Stub> RobotCommandService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RobotCommandService::Stub> stub(new RobotCommandService::Stub(channel));
  return stub;
}

RobotCommandService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_RobotCommand_(RobotCommandService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RobotCommandFeedback_(RobotCommandService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ClearBehaviorFault_(RobotCommandService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RobotCommandService::Stub::RobotCommand(::grpc::ClientContext* context, const ::bosdyn::api::RobotCommandRequest& request, ::bosdyn::api::RobotCommandResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RobotCommand_, context, request, response);
}

void RobotCommandService::Stub::experimental_async::RobotCommand(::grpc::ClientContext* context, const ::bosdyn::api::RobotCommandRequest* request, ::bosdyn::api::RobotCommandResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RobotCommand_, context, request, response, std::move(f));
}

void RobotCommandService::Stub::experimental_async::RobotCommand(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::RobotCommandResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RobotCommand_, context, request, response, std::move(f));
}

void RobotCommandService::Stub::experimental_async::RobotCommand(::grpc::ClientContext* context, const ::bosdyn::api::RobotCommandRequest* request, ::bosdyn::api::RobotCommandResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RobotCommand_, context, request, response, reactor);
}

void RobotCommandService::Stub::experimental_async::RobotCommand(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::RobotCommandResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RobotCommand_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::RobotCommandResponse>* RobotCommandService::Stub::AsyncRobotCommandRaw(::grpc::ClientContext* context, const ::bosdyn::api::RobotCommandRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::RobotCommandResponse>::Create(channel_.get(), cq, rpcmethod_RobotCommand_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::RobotCommandResponse>* RobotCommandService::Stub::PrepareAsyncRobotCommandRaw(::grpc::ClientContext* context, const ::bosdyn::api::RobotCommandRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::RobotCommandResponse>::Create(channel_.get(), cq, rpcmethod_RobotCommand_, context, request, false);
}

::grpc::Status RobotCommandService::Stub::RobotCommandFeedback(::grpc::ClientContext* context, const ::bosdyn::api::RobotCommandFeedbackRequest& request, ::bosdyn::api::RobotCommandFeedbackResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RobotCommandFeedback_, context, request, response);
}

void RobotCommandService::Stub::experimental_async::RobotCommandFeedback(::grpc::ClientContext* context, const ::bosdyn::api::RobotCommandFeedbackRequest* request, ::bosdyn::api::RobotCommandFeedbackResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RobotCommandFeedback_, context, request, response, std::move(f));
}

void RobotCommandService::Stub::experimental_async::RobotCommandFeedback(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::RobotCommandFeedbackResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RobotCommandFeedback_, context, request, response, std::move(f));
}

void RobotCommandService::Stub::experimental_async::RobotCommandFeedback(::grpc::ClientContext* context, const ::bosdyn::api::RobotCommandFeedbackRequest* request, ::bosdyn::api::RobotCommandFeedbackResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RobotCommandFeedback_, context, request, response, reactor);
}

void RobotCommandService::Stub::experimental_async::RobotCommandFeedback(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::RobotCommandFeedbackResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RobotCommandFeedback_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::RobotCommandFeedbackResponse>* RobotCommandService::Stub::AsyncRobotCommandFeedbackRaw(::grpc::ClientContext* context, const ::bosdyn::api::RobotCommandFeedbackRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::RobotCommandFeedbackResponse>::Create(channel_.get(), cq, rpcmethod_RobotCommandFeedback_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::RobotCommandFeedbackResponse>* RobotCommandService::Stub::PrepareAsyncRobotCommandFeedbackRaw(::grpc::ClientContext* context, const ::bosdyn::api::RobotCommandFeedbackRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::RobotCommandFeedbackResponse>::Create(channel_.get(), cq, rpcmethod_RobotCommandFeedback_, context, request, false);
}

::grpc::Status RobotCommandService::Stub::ClearBehaviorFault(::grpc::ClientContext* context, const ::bosdyn::api::ClearBehaviorFaultRequest& request, ::bosdyn::api::ClearBehaviorFaultResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ClearBehaviorFault_, context, request, response);
}

void RobotCommandService::Stub::experimental_async::ClearBehaviorFault(::grpc::ClientContext* context, const ::bosdyn::api::ClearBehaviorFaultRequest* request, ::bosdyn::api::ClearBehaviorFaultResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ClearBehaviorFault_, context, request, response, std::move(f));
}

void RobotCommandService::Stub::experimental_async::ClearBehaviorFault(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::ClearBehaviorFaultResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ClearBehaviorFault_, context, request, response, std::move(f));
}

void RobotCommandService::Stub::experimental_async::ClearBehaviorFault(::grpc::ClientContext* context, const ::bosdyn::api::ClearBehaviorFaultRequest* request, ::bosdyn::api::ClearBehaviorFaultResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ClearBehaviorFault_, context, request, response, reactor);
}

void RobotCommandService::Stub::experimental_async::ClearBehaviorFault(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::ClearBehaviorFaultResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ClearBehaviorFault_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::ClearBehaviorFaultResponse>* RobotCommandService::Stub::AsyncClearBehaviorFaultRaw(::grpc::ClientContext* context, const ::bosdyn::api::ClearBehaviorFaultRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::ClearBehaviorFaultResponse>::Create(channel_.get(), cq, rpcmethod_ClearBehaviorFault_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::ClearBehaviorFaultResponse>* RobotCommandService::Stub::PrepareAsyncClearBehaviorFaultRaw(::grpc::ClientContext* context, const ::bosdyn::api::ClearBehaviorFaultRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::ClearBehaviorFaultResponse>::Create(channel_.get(), cq, rpcmethod_ClearBehaviorFault_, context, request, false);
}

RobotCommandService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotCommandService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotCommandService::Service, ::bosdyn::api::RobotCommandRequest, ::bosdyn::api::RobotCommandResponse>(
          [](RobotCommandService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::RobotCommandRequest* req,
             ::bosdyn::api::RobotCommandResponse* resp) {
               return service->RobotCommand(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotCommandService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotCommandService::Service, ::bosdyn::api::RobotCommandFeedbackRequest, ::bosdyn::api::RobotCommandFeedbackResponse>(
          [](RobotCommandService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::RobotCommandFeedbackRequest* req,
             ::bosdyn::api::RobotCommandFeedbackResponse* resp) {
               return service->RobotCommandFeedback(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotCommandService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotCommandService::Service, ::bosdyn::api::ClearBehaviorFaultRequest, ::bosdyn::api::ClearBehaviorFaultResponse>(
          [](RobotCommandService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::ClearBehaviorFaultRequest* req,
             ::bosdyn::api::ClearBehaviorFaultResponse* resp) {
               return service->ClearBehaviorFault(ctx, req, resp);
             }, this)));
}

RobotCommandService::Service::~Service() {
}

::grpc::Status RobotCommandService::Service::RobotCommand(::grpc::ServerContext* context, const ::bosdyn::api::RobotCommandRequest* request, ::bosdyn::api::RobotCommandResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RobotCommandService::Service::RobotCommandFeedback(::grpc::ServerContext* context, const ::bosdyn::api::RobotCommandFeedbackRequest* request, ::bosdyn::api::RobotCommandFeedbackResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RobotCommandService::Service::ClearBehaviorFault(::grpc::ServerContext* context, const ::bosdyn::api::ClearBehaviorFaultRequest* request, ::bosdyn::api::ClearBehaviorFaultResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace bosdyn
}  // namespace api

