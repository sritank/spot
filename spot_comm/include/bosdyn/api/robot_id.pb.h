// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/robot_id.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2frobot_5fid_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2frobot_5fid_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "bosdyn/api/header.pb.h"
#include "bosdyn/api/parameter.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2frobot_5fid_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bosdyn_2fapi_2frobot_5fid_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2frobot_5fid_2eproto;
namespace bosdyn {
namespace api {
class RobotId;
class RobotIdDefaultTypeInternal;
extern RobotIdDefaultTypeInternal _RobotId_default_instance_;
class RobotIdRequest;
class RobotIdRequestDefaultTypeInternal;
extern RobotIdRequestDefaultTypeInternal _RobotIdRequest_default_instance_;
class RobotIdResponse;
class RobotIdResponseDefaultTypeInternal;
extern RobotIdResponseDefaultTypeInternal _RobotIdResponse_default_instance_;
class RobotSoftwareRelease;
class RobotSoftwareReleaseDefaultTypeInternal;
extern RobotSoftwareReleaseDefaultTypeInternal _RobotSoftwareRelease_default_instance_;
class SoftwareVersion;
class SoftwareVersionDefaultTypeInternal;
extern SoftwareVersionDefaultTypeInternal _SoftwareVersion_default_instance_;
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> ::bosdyn::api::RobotId* Arena::CreateMaybeMessage<::bosdyn::api::RobotId>(Arena*);
template<> ::bosdyn::api::RobotIdRequest* Arena::CreateMaybeMessage<::bosdyn::api::RobotIdRequest>(Arena*);
template<> ::bosdyn::api::RobotIdResponse* Arena::CreateMaybeMessage<::bosdyn::api::RobotIdResponse>(Arena*);
template<> ::bosdyn::api::RobotSoftwareRelease* Arena::CreateMaybeMessage<::bosdyn::api::RobotSoftwareRelease>(Arena*);
template<> ::bosdyn::api::SoftwareVersion* Arena::CreateMaybeMessage<::bosdyn::api::SoftwareVersion>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bosdyn {
namespace api {

// ===================================================================

class RobotId PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.RobotId) */ {
 public:
  inline RobotId() : RobotId(nullptr) {}
  virtual ~RobotId();

  RobotId(const RobotId& from);
  RobotId(RobotId&& from) noexcept
    : RobotId() {
    *this = ::std::move(from);
  }

  inline RobotId& operator=(const RobotId& from) {
    CopyFrom(from);
    return *this;
  }
  inline RobotId& operator=(RobotId&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RobotId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RobotId* internal_default_instance() {
    return reinterpret_cast<const RobotId*>(
               &_RobotId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RobotId& a, RobotId& b) {
    a.Swap(&b);
  }
  inline void Swap(RobotId* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RobotId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RobotId* New() const final {
    return CreateMaybeMessage<RobotId>(nullptr);
  }

  RobotId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RobotId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RobotId& from);
  void MergeFrom(const RobotId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RobotId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.RobotId";
  }
  protected:
  explicit RobotId(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2frobot_5fid_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2frobot_5fid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSerialNumberFieldNumber = 1,
    kSpeciesFieldNumber = 2,
    kVersionFieldNumber = 3,
    kNicknameFieldNumber = 5,
    kComputerSerialNumberFieldNumber = 6,
    kSoftwareReleaseFieldNumber = 4,
  };
  // string serial_number = 1;
  void clear_serial_number();
  const std::string& serial_number() const;
  void set_serial_number(const std::string& value);
  void set_serial_number(std::string&& value);
  void set_serial_number(const char* value);
  void set_serial_number(const char* value, size_t size);
  std::string* mutable_serial_number();
  std::string* release_serial_number();
  void set_allocated_serial_number(std::string* serial_number);
  private:
  const std::string& _internal_serial_number() const;
  void _internal_set_serial_number(const std::string& value);
  std::string* _internal_mutable_serial_number();
  public:

  // string species = 2;
  void clear_species();
  const std::string& species() const;
  void set_species(const std::string& value);
  void set_species(std::string&& value);
  void set_species(const char* value);
  void set_species(const char* value, size_t size);
  std::string* mutable_species();
  std::string* release_species();
  void set_allocated_species(std::string* species);
  private:
  const std::string& _internal_species() const;
  void _internal_set_species(const std::string& value);
  std::string* _internal_mutable_species();
  public:

  // string version = 3;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string nickname = 5;
  void clear_nickname();
  const std::string& nickname() const;
  void set_nickname(const std::string& value);
  void set_nickname(std::string&& value);
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  std::string* mutable_nickname();
  std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string computer_serial_number = 6;
  void clear_computer_serial_number();
  const std::string& computer_serial_number() const;
  void set_computer_serial_number(const std::string& value);
  void set_computer_serial_number(std::string&& value);
  void set_computer_serial_number(const char* value);
  void set_computer_serial_number(const char* value, size_t size);
  std::string* mutable_computer_serial_number();
  std::string* release_computer_serial_number();
  void set_allocated_computer_serial_number(std::string* computer_serial_number);
  private:
  const std::string& _internal_computer_serial_number() const;
  void _internal_set_computer_serial_number(const std::string& value);
  std::string* _internal_mutable_computer_serial_number();
  public:

  // .bosdyn.api.RobotSoftwareRelease software_release = 4;
  bool has_software_release() const;
  private:
  bool _internal_has_software_release() const;
  public:
  void clear_software_release();
  const ::bosdyn::api::RobotSoftwareRelease& software_release() const;
  ::bosdyn::api::RobotSoftwareRelease* release_software_release();
  ::bosdyn::api::RobotSoftwareRelease* mutable_software_release();
  void set_allocated_software_release(::bosdyn::api::RobotSoftwareRelease* software_release);
  private:
  const ::bosdyn::api::RobotSoftwareRelease& _internal_software_release() const;
  ::bosdyn::api::RobotSoftwareRelease* _internal_mutable_software_release();
  public:
  void unsafe_arena_set_allocated_software_release(
      ::bosdyn::api::RobotSoftwareRelease* software_release);
  ::bosdyn::api::RobotSoftwareRelease* unsafe_arena_release_software_release();

  // @@protoc_insertion_point(class_scope:bosdyn.api.RobotId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serial_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr species_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr computer_serial_number_;
  ::bosdyn::api::RobotSoftwareRelease* software_release_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2frobot_5fid_2eproto;
};
// -------------------------------------------------------------------

class SoftwareVersion PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.SoftwareVersion) */ {
 public:
  inline SoftwareVersion() : SoftwareVersion(nullptr) {}
  virtual ~SoftwareVersion();

  SoftwareVersion(const SoftwareVersion& from);
  SoftwareVersion(SoftwareVersion&& from) noexcept
    : SoftwareVersion() {
    *this = ::std::move(from);
  }

  inline SoftwareVersion& operator=(const SoftwareVersion& from) {
    CopyFrom(from);
    return *this;
  }
  inline SoftwareVersion& operator=(SoftwareVersion&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SoftwareVersion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SoftwareVersion* internal_default_instance() {
    return reinterpret_cast<const SoftwareVersion*>(
               &_SoftwareVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SoftwareVersion& a, SoftwareVersion& b) {
    a.Swap(&b);
  }
  inline void Swap(SoftwareVersion* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SoftwareVersion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SoftwareVersion* New() const final {
    return CreateMaybeMessage<SoftwareVersion>(nullptr);
  }

  SoftwareVersion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SoftwareVersion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SoftwareVersion& from);
  void MergeFrom(const SoftwareVersion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SoftwareVersion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.SoftwareVersion";
  }
  protected:
  explicit SoftwareVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2frobot_5fid_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2frobot_5fid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMajorVersionFieldNumber = 1,
    kMinorVersionFieldNumber = 2,
    kPatchLevelFieldNumber = 3,
  };
  // int32 major_version = 1;
  void clear_major_version();
  ::PROTOBUF_NAMESPACE_ID::int32 major_version() const;
  void set_major_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_major_version() const;
  void _internal_set_major_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 minor_version = 2;
  void clear_minor_version();
  ::PROTOBUF_NAMESPACE_ID::int32 minor_version() const;
  void set_minor_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_minor_version() const;
  void _internal_set_minor_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 patch_level = 3;
  void clear_patch_level();
  ::PROTOBUF_NAMESPACE_ID::int32 patch_level() const;
  void set_patch_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_patch_level() const;
  void _internal_set_patch_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.SoftwareVersion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 major_version_;
  ::PROTOBUF_NAMESPACE_ID::int32 minor_version_;
  ::PROTOBUF_NAMESPACE_ID::int32 patch_level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2frobot_5fid_2eproto;
};
// -------------------------------------------------------------------

class RobotSoftwareRelease PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.RobotSoftwareRelease) */ {
 public:
  inline RobotSoftwareRelease() : RobotSoftwareRelease(nullptr) {}
  virtual ~RobotSoftwareRelease();

  RobotSoftwareRelease(const RobotSoftwareRelease& from);
  RobotSoftwareRelease(RobotSoftwareRelease&& from) noexcept
    : RobotSoftwareRelease() {
    *this = ::std::move(from);
  }

  inline RobotSoftwareRelease& operator=(const RobotSoftwareRelease& from) {
    CopyFrom(from);
    return *this;
  }
  inline RobotSoftwareRelease& operator=(RobotSoftwareRelease&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RobotSoftwareRelease& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RobotSoftwareRelease* internal_default_instance() {
    return reinterpret_cast<const RobotSoftwareRelease*>(
               &_RobotSoftwareRelease_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RobotSoftwareRelease& a, RobotSoftwareRelease& b) {
    a.Swap(&b);
  }
  inline void Swap(RobotSoftwareRelease* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RobotSoftwareRelease* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RobotSoftwareRelease* New() const final {
    return CreateMaybeMessage<RobotSoftwareRelease>(nullptr);
  }

  RobotSoftwareRelease* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RobotSoftwareRelease>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RobotSoftwareRelease& from);
  void MergeFrom(const RobotSoftwareRelease& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RobotSoftwareRelease* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.RobotSoftwareRelease";
  }
  protected:
  explicit RobotSoftwareRelease(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2frobot_5fid_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2frobot_5fid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParametersFieldNumber = 9,
    kNameFieldNumber = 2,
    kTypeFieldNumber = 3,
    kChangesetFieldNumber = 5,
    kApiVersionFieldNumber = 6,
    kBuildInformationFieldNumber = 7,
    kVersionFieldNumber = 1,
    kChangesetDateFieldNumber = 4,
    kInstallDateFieldNumber = 8,
  };
  // repeated .bosdyn.api.Parameter parameters = 9;
  int parameters_size() const;
  private:
  int _internal_parameters_size() const;
  public:
  void clear_parameters();
  ::bosdyn::api::Parameter* mutable_parameters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::Parameter >*
      mutable_parameters();
  private:
  const ::bosdyn::api::Parameter& _internal_parameters(int index) const;
  ::bosdyn::api::Parameter* _internal_add_parameters();
  public:
  const ::bosdyn::api::Parameter& parameters(int index) const;
  ::bosdyn::api::Parameter* add_parameters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::Parameter >&
      parameters() const;

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string type = 3;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string changeset = 5;
  void clear_changeset();
  const std::string& changeset() const;
  void set_changeset(const std::string& value);
  void set_changeset(std::string&& value);
  void set_changeset(const char* value);
  void set_changeset(const char* value, size_t size);
  std::string* mutable_changeset();
  std::string* release_changeset();
  void set_allocated_changeset(std::string* changeset);
  private:
  const std::string& _internal_changeset() const;
  void _internal_set_changeset(const std::string& value);
  std::string* _internal_mutable_changeset();
  public:

  // string api_version = 6;
  void clear_api_version();
  const std::string& api_version() const;
  void set_api_version(const std::string& value);
  void set_api_version(std::string&& value);
  void set_api_version(const char* value);
  void set_api_version(const char* value, size_t size);
  std::string* mutable_api_version();
  std::string* release_api_version();
  void set_allocated_api_version(std::string* api_version);
  private:
  const std::string& _internal_api_version() const;
  void _internal_set_api_version(const std::string& value);
  std::string* _internal_mutable_api_version();
  public:

  // string build_information = 7;
  void clear_build_information();
  const std::string& build_information() const;
  void set_build_information(const std::string& value);
  void set_build_information(std::string&& value);
  void set_build_information(const char* value);
  void set_build_information(const char* value, size_t size);
  std::string* mutable_build_information();
  std::string* release_build_information();
  void set_allocated_build_information(std::string* build_information);
  private:
  const std::string& _internal_build_information() const;
  void _internal_set_build_information(const std::string& value);
  std::string* _internal_mutable_build_information();
  public:

  // .bosdyn.api.SoftwareVersion version = 1;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const ::bosdyn::api::SoftwareVersion& version() const;
  ::bosdyn::api::SoftwareVersion* release_version();
  ::bosdyn::api::SoftwareVersion* mutable_version();
  void set_allocated_version(::bosdyn::api::SoftwareVersion* version);
  private:
  const ::bosdyn::api::SoftwareVersion& _internal_version() const;
  ::bosdyn::api::SoftwareVersion* _internal_mutable_version();
  public:
  void unsafe_arena_set_allocated_version(
      ::bosdyn::api::SoftwareVersion* version);
  ::bosdyn::api::SoftwareVersion* unsafe_arena_release_version();

  // .google.protobuf.Timestamp changeset_date = 4;
  bool has_changeset_date() const;
  private:
  bool _internal_has_changeset_date() const;
  public:
  void clear_changeset_date();
  const PROTOBUF_NAMESPACE_ID::Timestamp& changeset_date() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_changeset_date();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_changeset_date();
  void set_allocated_changeset_date(PROTOBUF_NAMESPACE_ID::Timestamp* changeset_date);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_changeset_date() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_changeset_date();
  public:
  void unsafe_arena_set_allocated_changeset_date(
      PROTOBUF_NAMESPACE_ID::Timestamp* changeset_date);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_changeset_date();

  // .google.protobuf.Timestamp install_date = 8;
  bool has_install_date() const;
  private:
  bool _internal_has_install_date() const;
  public:
  void clear_install_date();
  const PROTOBUF_NAMESPACE_ID::Timestamp& install_date() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_install_date();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_install_date();
  void set_allocated_install_date(PROTOBUF_NAMESPACE_ID::Timestamp* install_date);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_install_date() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_install_date();
  public:
  void unsafe_arena_set_allocated_install_date(
      PROTOBUF_NAMESPACE_ID::Timestamp* install_date);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_install_date();

  // @@protoc_insertion_point(class_scope:bosdyn.api.RobotSoftwareRelease)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::Parameter > parameters_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr changeset_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr api_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr build_information_;
  ::bosdyn::api::SoftwareVersion* version_;
  PROTOBUF_NAMESPACE_ID::Timestamp* changeset_date_;
  PROTOBUF_NAMESPACE_ID::Timestamp* install_date_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2frobot_5fid_2eproto;
};
// -------------------------------------------------------------------

class RobotIdRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.RobotIdRequest) */ {
 public:
  inline RobotIdRequest() : RobotIdRequest(nullptr) {}
  virtual ~RobotIdRequest();

  RobotIdRequest(const RobotIdRequest& from);
  RobotIdRequest(RobotIdRequest&& from) noexcept
    : RobotIdRequest() {
    *this = ::std::move(from);
  }

  inline RobotIdRequest& operator=(const RobotIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RobotIdRequest& operator=(RobotIdRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RobotIdRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RobotIdRequest* internal_default_instance() {
    return reinterpret_cast<const RobotIdRequest*>(
               &_RobotIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RobotIdRequest& a, RobotIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RobotIdRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RobotIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RobotIdRequest* New() const final {
    return CreateMaybeMessage<RobotIdRequest>(nullptr);
  }

  RobotIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RobotIdRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RobotIdRequest& from);
  void MergeFrom(const RobotIdRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RobotIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.RobotIdRequest";
  }
  protected:
  explicit RobotIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2frobot_5fid_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2frobot_5fid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.RobotIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::RequestHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2frobot_5fid_2eproto;
};
// -------------------------------------------------------------------

class RobotIdResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.RobotIdResponse) */ {
 public:
  inline RobotIdResponse() : RobotIdResponse(nullptr) {}
  virtual ~RobotIdResponse();

  RobotIdResponse(const RobotIdResponse& from);
  RobotIdResponse(RobotIdResponse&& from) noexcept
    : RobotIdResponse() {
    *this = ::std::move(from);
  }

  inline RobotIdResponse& operator=(const RobotIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RobotIdResponse& operator=(RobotIdResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RobotIdResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RobotIdResponse* internal_default_instance() {
    return reinterpret_cast<const RobotIdResponse*>(
               &_RobotIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RobotIdResponse& a, RobotIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RobotIdResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RobotIdResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RobotIdResponse* New() const final {
    return CreateMaybeMessage<RobotIdResponse>(nullptr);
  }

  RobotIdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RobotIdResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RobotIdResponse& from);
  void MergeFrom(const RobotIdResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RobotIdResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.RobotIdResponse";
  }
  protected:
  explicit RobotIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2frobot_5fid_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2frobot_5fid_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kRobotIdFieldNumber = 2,
  };
  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // .bosdyn.api.RobotId robot_id = 2;
  bool has_robot_id() const;
  private:
  bool _internal_has_robot_id() const;
  public:
  void clear_robot_id();
  const ::bosdyn::api::RobotId& robot_id() const;
  ::bosdyn::api::RobotId* release_robot_id();
  ::bosdyn::api::RobotId* mutable_robot_id();
  void set_allocated_robot_id(::bosdyn::api::RobotId* robot_id);
  private:
  const ::bosdyn::api::RobotId& _internal_robot_id() const;
  ::bosdyn::api::RobotId* _internal_mutable_robot_id();
  public:
  void unsafe_arena_set_allocated_robot_id(
      ::bosdyn::api::RobotId* robot_id);
  ::bosdyn::api::RobotId* unsafe_arena_release_robot_id();

  // @@protoc_insertion_point(class_scope:bosdyn.api.RobotIdResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::ResponseHeader* header_;
  ::bosdyn::api::RobotId* robot_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2frobot_5fid_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RobotId

// string serial_number = 1;
inline void RobotId::clear_serial_number() {
  serial_number_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RobotId::serial_number() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.RobotId.serial_number)
  return _internal_serial_number();
}
inline void RobotId::set_serial_number(const std::string& value) {
  _internal_set_serial_number(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.RobotId.serial_number)
}
inline std::string* RobotId::mutable_serial_number() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.RobotId.serial_number)
  return _internal_mutable_serial_number();
}
inline const std::string& RobotId::_internal_serial_number() const {
  return serial_number_.Get();
}
inline void RobotId::_internal_set_serial_number(const std::string& value) {
  
  serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RobotId::set_serial_number(std::string&& value) {
  
  serial_number_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.RobotId.serial_number)
}
inline void RobotId::set_serial_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.RobotId.serial_number)
}
inline void RobotId::set_serial_number(const char* value,
    size_t size) {
  
  serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.RobotId.serial_number)
}
inline std::string* RobotId::_internal_mutable_serial_number() {
  
  return serial_number_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RobotId::release_serial_number() {
  // @@protoc_insertion_point(field_release:bosdyn.api.RobotId.serial_number)
  return serial_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RobotId::set_allocated_serial_number(std::string* serial_number) {
  if (serial_number != nullptr) {
    
  } else {
    
  }
  serial_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serial_number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.RobotId.serial_number)
}

// string species = 2;
inline void RobotId::clear_species() {
  species_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RobotId::species() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.RobotId.species)
  return _internal_species();
}
inline void RobotId::set_species(const std::string& value) {
  _internal_set_species(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.RobotId.species)
}
inline std::string* RobotId::mutable_species() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.RobotId.species)
  return _internal_mutable_species();
}
inline const std::string& RobotId::_internal_species() const {
  return species_.Get();
}
inline void RobotId::_internal_set_species(const std::string& value) {
  
  species_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RobotId::set_species(std::string&& value) {
  
  species_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.RobotId.species)
}
inline void RobotId::set_species(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  species_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.RobotId.species)
}
inline void RobotId::set_species(const char* value,
    size_t size) {
  
  species_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.RobotId.species)
}
inline std::string* RobotId::_internal_mutable_species() {
  
  return species_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RobotId::release_species() {
  // @@protoc_insertion_point(field_release:bosdyn.api.RobotId.species)
  return species_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RobotId::set_allocated_species(std::string* species) {
  if (species != nullptr) {
    
  } else {
    
  }
  species_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), species,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.RobotId.species)
}

// string version = 3;
inline void RobotId::clear_version() {
  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RobotId::version() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.RobotId.version)
  return _internal_version();
}
inline void RobotId::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.RobotId.version)
}
inline std::string* RobotId::mutable_version() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.RobotId.version)
  return _internal_mutable_version();
}
inline const std::string& RobotId::_internal_version() const {
  return version_.Get();
}
inline void RobotId::_internal_set_version(const std::string& value) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RobotId::set_version(std::string&& value) {
  
  version_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.RobotId.version)
}
inline void RobotId::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.RobotId.version)
}
inline void RobotId::set_version(const char* value,
    size_t size) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.RobotId.version)
}
inline std::string* RobotId::_internal_mutable_version() {
  
  return version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RobotId::release_version() {
  // @@protoc_insertion_point(field_release:bosdyn.api.RobotId.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RobotId::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.RobotId.version)
}

// .bosdyn.api.RobotSoftwareRelease software_release = 4;
inline bool RobotId::_internal_has_software_release() const {
  return this != internal_default_instance() && software_release_ != nullptr;
}
inline bool RobotId::has_software_release() const {
  return _internal_has_software_release();
}
inline void RobotId::clear_software_release() {
  if (GetArena() == nullptr && software_release_ != nullptr) {
    delete software_release_;
  }
  software_release_ = nullptr;
}
inline const ::bosdyn::api::RobotSoftwareRelease& RobotId::_internal_software_release() const {
  const ::bosdyn::api::RobotSoftwareRelease* p = software_release_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::RobotSoftwareRelease*>(
      &::bosdyn::api::_RobotSoftwareRelease_default_instance_);
}
inline const ::bosdyn::api::RobotSoftwareRelease& RobotId::software_release() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.RobotId.software_release)
  return _internal_software_release();
}
inline void RobotId::unsafe_arena_set_allocated_software_release(
    ::bosdyn::api::RobotSoftwareRelease* software_release) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(software_release_);
  }
  software_release_ = software_release;
  if (software_release) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.RobotId.software_release)
}
inline ::bosdyn::api::RobotSoftwareRelease* RobotId::release_software_release() {
  
  ::bosdyn::api::RobotSoftwareRelease* temp = software_release_;
  software_release_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::RobotSoftwareRelease* RobotId::unsafe_arena_release_software_release() {
  // @@protoc_insertion_point(field_release:bosdyn.api.RobotId.software_release)
  
  ::bosdyn::api::RobotSoftwareRelease* temp = software_release_;
  software_release_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RobotSoftwareRelease* RobotId::_internal_mutable_software_release() {
  
  if (software_release_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RobotSoftwareRelease>(GetArena());
    software_release_ = p;
  }
  return software_release_;
}
inline ::bosdyn::api::RobotSoftwareRelease* RobotId::mutable_software_release() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.RobotId.software_release)
  return _internal_mutable_software_release();
}
inline void RobotId::set_allocated_software_release(::bosdyn::api::RobotSoftwareRelease* software_release) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete software_release_;
  }
  if (software_release) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(software_release);
    if (message_arena != submessage_arena) {
      software_release = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, software_release, submessage_arena);
    }
    
  } else {
    
  }
  software_release_ = software_release;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.RobotId.software_release)
}

// string nickname = 5;
inline void RobotId::clear_nickname() {
  nickname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RobotId::nickname() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.RobotId.nickname)
  return _internal_nickname();
}
inline void RobotId::set_nickname(const std::string& value) {
  _internal_set_nickname(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.RobotId.nickname)
}
inline std::string* RobotId::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.RobotId.nickname)
  return _internal_mutable_nickname();
}
inline const std::string& RobotId::_internal_nickname() const {
  return nickname_.Get();
}
inline void RobotId::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RobotId::set_nickname(std::string&& value) {
  
  nickname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.RobotId.nickname)
}
inline void RobotId::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.RobotId.nickname)
}
inline void RobotId::set_nickname(const char* value,
    size_t size) {
  
  nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.RobotId.nickname)
}
inline std::string* RobotId::_internal_mutable_nickname() {
  
  return nickname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RobotId::release_nickname() {
  // @@protoc_insertion_point(field_release:bosdyn.api.RobotId.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RobotId::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.RobotId.nickname)
}

// string computer_serial_number = 6;
inline void RobotId::clear_computer_serial_number() {
  computer_serial_number_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RobotId::computer_serial_number() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.RobotId.computer_serial_number)
  return _internal_computer_serial_number();
}
inline void RobotId::set_computer_serial_number(const std::string& value) {
  _internal_set_computer_serial_number(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.RobotId.computer_serial_number)
}
inline std::string* RobotId::mutable_computer_serial_number() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.RobotId.computer_serial_number)
  return _internal_mutable_computer_serial_number();
}
inline const std::string& RobotId::_internal_computer_serial_number() const {
  return computer_serial_number_.Get();
}
inline void RobotId::_internal_set_computer_serial_number(const std::string& value) {
  
  computer_serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RobotId::set_computer_serial_number(std::string&& value) {
  
  computer_serial_number_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.RobotId.computer_serial_number)
}
inline void RobotId::set_computer_serial_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  computer_serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.RobotId.computer_serial_number)
}
inline void RobotId::set_computer_serial_number(const char* value,
    size_t size) {
  
  computer_serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.RobotId.computer_serial_number)
}
inline std::string* RobotId::_internal_mutable_computer_serial_number() {
  
  return computer_serial_number_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RobotId::release_computer_serial_number() {
  // @@protoc_insertion_point(field_release:bosdyn.api.RobotId.computer_serial_number)
  return computer_serial_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RobotId::set_allocated_computer_serial_number(std::string* computer_serial_number) {
  if (computer_serial_number != nullptr) {
    
  } else {
    
  }
  computer_serial_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), computer_serial_number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.RobotId.computer_serial_number)
}

// -------------------------------------------------------------------

// SoftwareVersion

// int32 major_version = 1;
inline void SoftwareVersion::clear_major_version() {
  major_version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SoftwareVersion::_internal_major_version() const {
  return major_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SoftwareVersion::major_version() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.SoftwareVersion.major_version)
  return _internal_major_version();
}
inline void SoftwareVersion::_internal_set_major_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  major_version_ = value;
}
inline void SoftwareVersion::set_major_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_major_version(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.SoftwareVersion.major_version)
}

// int32 minor_version = 2;
inline void SoftwareVersion::clear_minor_version() {
  minor_version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SoftwareVersion::_internal_minor_version() const {
  return minor_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SoftwareVersion::minor_version() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.SoftwareVersion.minor_version)
  return _internal_minor_version();
}
inline void SoftwareVersion::_internal_set_minor_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  minor_version_ = value;
}
inline void SoftwareVersion::set_minor_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_minor_version(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.SoftwareVersion.minor_version)
}

// int32 patch_level = 3;
inline void SoftwareVersion::clear_patch_level() {
  patch_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SoftwareVersion::_internal_patch_level() const {
  return patch_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SoftwareVersion::patch_level() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.SoftwareVersion.patch_level)
  return _internal_patch_level();
}
inline void SoftwareVersion::_internal_set_patch_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  patch_level_ = value;
}
inline void SoftwareVersion::set_patch_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_patch_level(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.SoftwareVersion.patch_level)
}

// -------------------------------------------------------------------

// RobotSoftwareRelease

// .bosdyn.api.SoftwareVersion version = 1;
inline bool RobotSoftwareRelease::_internal_has_version() const {
  return this != internal_default_instance() && version_ != nullptr;
}
inline bool RobotSoftwareRelease::has_version() const {
  return _internal_has_version();
}
inline void RobotSoftwareRelease::clear_version() {
  if (GetArena() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
}
inline const ::bosdyn::api::SoftwareVersion& RobotSoftwareRelease::_internal_version() const {
  const ::bosdyn::api::SoftwareVersion* p = version_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::SoftwareVersion*>(
      &::bosdyn::api::_SoftwareVersion_default_instance_);
}
inline const ::bosdyn::api::SoftwareVersion& RobotSoftwareRelease::version() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.RobotSoftwareRelease.version)
  return _internal_version();
}
inline void RobotSoftwareRelease::unsafe_arena_set_allocated_version(
    ::bosdyn::api::SoftwareVersion* version) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(version_);
  }
  version_ = version;
  if (version) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.RobotSoftwareRelease.version)
}
inline ::bosdyn::api::SoftwareVersion* RobotSoftwareRelease::release_version() {
  
  ::bosdyn::api::SoftwareVersion* temp = version_;
  version_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::SoftwareVersion* RobotSoftwareRelease::unsafe_arena_release_version() {
  // @@protoc_insertion_point(field_release:bosdyn.api.RobotSoftwareRelease.version)
  
  ::bosdyn::api::SoftwareVersion* temp = version_;
  version_ = nullptr;
  return temp;
}
inline ::bosdyn::api::SoftwareVersion* RobotSoftwareRelease::_internal_mutable_version() {
  
  if (version_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::SoftwareVersion>(GetArena());
    version_ = p;
  }
  return version_;
}
inline ::bosdyn::api::SoftwareVersion* RobotSoftwareRelease::mutable_version() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.RobotSoftwareRelease.version)
  return _internal_mutable_version();
}
inline void RobotSoftwareRelease::set_allocated_version(::bosdyn::api::SoftwareVersion* version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete version_;
  }
  if (version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(version);
    if (message_arena != submessage_arena) {
      version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, version, submessage_arena);
    }
    
  } else {
    
  }
  version_ = version;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.RobotSoftwareRelease.version)
}

// string name = 2;
inline void RobotSoftwareRelease::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RobotSoftwareRelease::name() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.RobotSoftwareRelease.name)
  return _internal_name();
}
inline void RobotSoftwareRelease::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.RobotSoftwareRelease.name)
}
inline std::string* RobotSoftwareRelease::mutable_name() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.RobotSoftwareRelease.name)
  return _internal_mutable_name();
}
inline const std::string& RobotSoftwareRelease::_internal_name() const {
  return name_.Get();
}
inline void RobotSoftwareRelease::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RobotSoftwareRelease::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.RobotSoftwareRelease.name)
}
inline void RobotSoftwareRelease::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.RobotSoftwareRelease.name)
}
inline void RobotSoftwareRelease::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.RobotSoftwareRelease.name)
}
inline std::string* RobotSoftwareRelease::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RobotSoftwareRelease::release_name() {
  // @@protoc_insertion_point(field_release:bosdyn.api.RobotSoftwareRelease.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RobotSoftwareRelease::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.RobotSoftwareRelease.name)
}

// string type = 3;
inline void RobotSoftwareRelease::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RobotSoftwareRelease::type() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.RobotSoftwareRelease.type)
  return _internal_type();
}
inline void RobotSoftwareRelease::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.RobotSoftwareRelease.type)
}
inline std::string* RobotSoftwareRelease::mutable_type() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.RobotSoftwareRelease.type)
  return _internal_mutable_type();
}
inline const std::string& RobotSoftwareRelease::_internal_type() const {
  return type_.Get();
}
inline void RobotSoftwareRelease::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RobotSoftwareRelease::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.RobotSoftwareRelease.type)
}
inline void RobotSoftwareRelease::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.RobotSoftwareRelease.type)
}
inline void RobotSoftwareRelease::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.RobotSoftwareRelease.type)
}
inline std::string* RobotSoftwareRelease::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RobotSoftwareRelease::release_type() {
  // @@protoc_insertion_point(field_release:bosdyn.api.RobotSoftwareRelease.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RobotSoftwareRelease::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.RobotSoftwareRelease.type)
}

// .google.protobuf.Timestamp changeset_date = 4;
inline bool RobotSoftwareRelease::_internal_has_changeset_date() const {
  return this != internal_default_instance() && changeset_date_ != nullptr;
}
inline bool RobotSoftwareRelease::has_changeset_date() const {
  return _internal_has_changeset_date();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& RobotSoftwareRelease::_internal_changeset_date() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = changeset_date_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& RobotSoftwareRelease::changeset_date() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.RobotSoftwareRelease.changeset_date)
  return _internal_changeset_date();
}
inline void RobotSoftwareRelease::unsafe_arena_set_allocated_changeset_date(
    PROTOBUF_NAMESPACE_ID::Timestamp* changeset_date) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(changeset_date_);
  }
  changeset_date_ = changeset_date;
  if (changeset_date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.RobotSoftwareRelease.changeset_date)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* RobotSoftwareRelease::release_changeset_date() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = changeset_date_;
  changeset_date_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* RobotSoftwareRelease::unsafe_arena_release_changeset_date() {
  // @@protoc_insertion_point(field_release:bosdyn.api.RobotSoftwareRelease.changeset_date)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = changeset_date_;
  changeset_date_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* RobotSoftwareRelease::_internal_mutable_changeset_date() {
  
  if (changeset_date_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    changeset_date_ = p;
  }
  return changeset_date_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* RobotSoftwareRelease::mutable_changeset_date() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.RobotSoftwareRelease.changeset_date)
  return _internal_mutable_changeset_date();
}
inline void RobotSoftwareRelease::set_allocated_changeset_date(PROTOBUF_NAMESPACE_ID::Timestamp* changeset_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(changeset_date_);
  }
  if (changeset_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(changeset_date)->GetArena();
    if (message_arena != submessage_arena) {
      changeset_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, changeset_date, submessage_arena);
    }
    
  } else {
    
  }
  changeset_date_ = changeset_date;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.RobotSoftwareRelease.changeset_date)
}

// string changeset = 5;
inline void RobotSoftwareRelease::clear_changeset() {
  changeset_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RobotSoftwareRelease::changeset() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.RobotSoftwareRelease.changeset)
  return _internal_changeset();
}
inline void RobotSoftwareRelease::set_changeset(const std::string& value) {
  _internal_set_changeset(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.RobotSoftwareRelease.changeset)
}
inline std::string* RobotSoftwareRelease::mutable_changeset() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.RobotSoftwareRelease.changeset)
  return _internal_mutable_changeset();
}
inline const std::string& RobotSoftwareRelease::_internal_changeset() const {
  return changeset_.Get();
}
inline void RobotSoftwareRelease::_internal_set_changeset(const std::string& value) {
  
  changeset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RobotSoftwareRelease::set_changeset(std::string&& value) {
  
  changeset_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.RobotSoftwareRelease.changeset)
}
inline void RobotSoftwareRelease::set_changeset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  changeset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.RobotSoftwareRelease.changeset)
}
inline void RobotSoftwareRelease::set_changeset(const char* value,
    size_t size) {
  
  changeset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.RobotSoftwareRelease.changeset)
}
inline std::string* RobotSoftwareRelease::_internal_mutable_changeset() {
  
  return changeset_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RobotSoftwareRelease::release_changeset() {
  // @@protoc_insertion_point(field_release:bosdyn.api.RobotSoftwareRelease.changeset)
  return changeset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RobotSoftwareRelease::set_allocated_changeset(std::string* changeset) {
  if (changeset != nullptr) {
    
  } else {
    
  }
  changeset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), changeset,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.RobotSoftwareRelease.changeset)
}

// string api_version = 6;
inline void RobotSoftwareRelease::clear_api_version() {
  api_version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RobotSoftwareRelease::api_version() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.RobotSoftwareRelease.api_version)
  return _internal_api_version();
}
inline void RobotSoftwareRelease::set_api_version(const std::string& value) {
  _internal_set_api_version(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.RobotSoftwareRelease.api_version)
}
inline std::string* RobotSoftwareRelease::mutable_api_version() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.RobotSoftwareRelease.api_version)
  return _internal_mutable_api_version();
}
inline const std::string& RobotSoftwareRelease::_internal_api_version() const {
  return api_version_.Get();
}
inline void RobotSoftwareRelease::_internal_set_api_version(const std::string& value) {
  
  api_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RobotSoftwareRelease::set_api_version(std::string&& value) {
  
  api_version_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.RobotSoftwareRelease.api_version)
}
inline void RobotSoftwareRelease::set_api_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  api_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.RobotSoftwareRelease.api_version)
}
inline void RobotSoftwareRelease::set_api_version(const char* value,
    size_t size) {
  
  api_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.RobotSoftwareRelease.api_version)
}
inline std::string* RobotSoftwareRelease::_internal_mutable_api_version() {
  
  return api_version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RobotSoftwareRelease::release_api_version() {
  // @@protoc_insertion_point(field_release:bosdyn.api.RobotSoftwareRelease.api_version)
  return api_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RobotSoftwareRelease::set_allocated_api_version(std::string* api_version) {
  if (api_version != nullptr) {
    
  } else {
    
  }
  api_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), api_version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.RobotSoftwareRelease.api_version)
}

// string build_information = 7;
inline void RobotSoftwareRelease::clear_build_information() {
  build_information_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RobotSoftwareRelease::build_information() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.RobotSoftwareRelease.build_information)
  return _internal_build_information();
}
inline void RobotSoftwareRelease::set_build_information(const std::string& value) {
  _internal_set_build_information(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.RobotSoftwareRelease.build_information)
}
inline std::string* RobotSoftwareRelease::mutable_build_information() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.RobotSoftwareRelease.build_information)
  return _internal_mutable_build_information();
}
inline const std::string& RobotSoftwareRelease::_internal_build_information() const {
  return build_information_.Get();
}
inline void RobotSoftwareRelease::_internal_set_build_information(const std::string& value) {
  
  build_information_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RobotSoftwareRelease::set_build_information(std::string&& value) {
  
  build_information_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.RobotSoftwareRelease.build_information)
}
inline void RobotSoftwareRelease::set_build_information(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  build_information_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.RobotSoftwareRelease.build_information)
}
inline void RobotSoftwareRelease::set_build_information(const char* value,
    size_t size) {
  
  build_information_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.RobotSoftwareRelease.build_information)
}
inline std::string* RobotSoftwareRelease::_internal_mutable_build_information() {
  
  return build_information_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RobotSoftwareRelease::release_build_information() {
  // @@protoc_insertion_point(field_release:bosdyn.api.RobotSoftwareRelease.build_information)
  return build_information_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RobotSoftwareRelease::set_allocated_build_information(std::string* build_information) {
  if (build_information != nullptr) {
    
  } else {
    
  }
  build_information_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), build_information,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.RobotSoftwareRelease.build_information)
}

// .google.protobuf.Timestamp install_date = 8;
inline bool RobotSoftwareRelease::_internal_has_install_date() const {
  return this != internal_default_instance() && install_date_ != nullptr;
}
inline bool RobotSoftwareRelease::has_install_date() const {
  return _internal_has_install_date();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& RobotSoftwareRelease::_internal_install_date() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = install_date_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& RobotSoftwareRelease::install_date() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.RobotSoftwareRelease.install_date)
  return _internal_install_date();
}
inline void RobotSoftwareRelease::unsafe_arena_set_allocated_install_date(
    PROTOBUF_NAMESPACE_ID::Timestamp* install_date) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(install_date_);
  }
  install_date_ = install_date;
  if (install_date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.RobotSoftwareRelease.install_date)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* RobotSoftwareRelease::release_install_date() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = install_date_;
  install_date_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* RobotSoftwareRelease::unsafe_arena_release_install_date() {
  // @@protoc_insertion_point(field_release:bosdyn.api.RobotSoftwareRelease.install_date)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = install_date_;
  install_date_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* RobotSoftwareRelease::_internal_mutable_install_date() {
  
  if (install_date_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    install_date_ = p;
  }
  return install_date_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* RobotSoftwareRelease::mutable_install_date() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.RobotSoftwareRelease.install_date)
  return _internal_mutable_install_date();
}
inline void RobotSoftwareRelease::set_allocated_install_date(PROTOBUF_NAMESPACE_ID::Timestamp* install_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(install_date_);
  }
  if (install_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(install_date)->GetArena();
    if (message_arena != submessage_arena) {
      install_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, install_date, submessage_arena);
    }
    
  } else {
    
  }
  install_date_ = install_date;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.RobotSoftwareRelease.install_date)
}

// repeated .bosdyn.api.Parameter parameters = 9;
inline int RobotSoftwareRelease::_internal_parameters_size() const {
  return parameters_.size();
}
inline int RobotSoftwareRelease::parameters_size() const {
  return _internal_parameters_size();
}
inline ::bosdyn::api::Parameter* RobotSoftwareRelease::mutable_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.RobotSoftwareRelease.parameters)
  return parameters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::Parameter >*
RobotSoftwareRelease::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.RobotSoftwareRelease.parameters)
  return &parameters_;
}
inline const ::bosdyn::api::Parameter& RobotSoftwareRelease::_internal_parameters(int index) const {
  return parameters_.Get(index);
}
inline const ::bosdyn::api::Parameter& RobotSoftwareRelease::parameters(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.RobotSoftwareRelease.parameters)
  return _internal_parameters(index);
}
inline ::bosdyn::api::Parameter* RobotSoftwareRelease::_internal_add_parameters() {
  return parameters_.Add();
}
inline ::bosdyn::api::Parameter* RobotSoftwareRelease::add_parameters() {
  // @@protoc_insertion_point(field_add:bosdyn.api.RobotSoftwareRelease.parameters)
  return _internal_add_parameters();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::Parameter >&
RobotSoftwareRelease::parameters() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.RobotSoftwareRelease.parameters)
  return parameters_;
}

// -------------------------------------------------------------------

// RobotIdRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool RobotIdRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool RobotIdRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& RobotIdRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::RequestHeader*>(
      &::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& RobotIdRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.RobotIdRequest.header)
  return _internal_header();
}
inline void RobotIdRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.RobotIdRequest.header)
}
inline ::bosdyn::api::RequestHeader* RobotIdRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::RequestHeader* RobotIdRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.RobotIdRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* RobotIdRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::RequestHeader* RobotIdRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.RobotIdRequest.header)
  return _internal_mutable_header();
}
inline void RobotIdRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.RobotIdRequest.header)
}

// -------------------------------------------------------------------

// RobotIdResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool RobotIdResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool RobotIdResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& RobotIdResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::ResponseHeader*>(
      &::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& RobotIdResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.RobotIdResponse.header)
  return _internal_header();
}
inline void RobotIdResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.RobotIdResponse.header)
}
inline ::bosdyn::api::ResponseHeader* RobotIdResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::ResponseHeader* RobotIdResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.RobotIdResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* RobotIdResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::ResponseHeader* RobotIdResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.RobotIdResponse.header)
  return _internal_mutable_header();
}
inline void RobotIdResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.RobotIdResponse.header)
}

// .bosdyn.api.RobotId robot_id = 2;
inline bool RobotIdResponse::_internal_has_robot_id() const {
  return this != internal_default_instance() && robot_id_ != nullptr;
}
inline bool RobotIdResponse::has_robot_id() const {
  return _internal_has_robot_id();
}
inline void RobotIdResponse::clear_robot_id() {
  if (GetArena() == nullptr && robot_id_ != nullptr) {
    delete robot_id_;
  }
  robot_id_ = nullptr;
}
inline const ::bosdyn::api::RobotId& RobotIdResponse::_internal_robot_id() const {
  const ::bosdyn::api::RobotId* p = robot_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::RobotId*>(
      &::bosdyn::api::_RobotId_default_instance_);
}
inline const ::bosdyn::api::RobotId& RobotIdResponse::robot_id() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.RobotIdResponse.robot_id)
  return _internal_robot_id();
}
inline void RobotIdResponse::unsafe_arena_set_allocated_robot_id(
    ::bosdyn::api::RobotId* robot_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(robot_id_);
  }
  robot_id_ = robot_id;
  if (robot_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.RobotIdResponse.robot_id)
}
inline ::bosdyn::api::RobotId* RobotIdResponse::release_robot_id() {
  
  ::bosdyn::api::RobotId* temp = robot_id_;
  robot_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::RobotId* RobotIdResponse::unsafe_arena_release_robot_id() {
  // @@protoc_insertion_point(field_release:bosdyn.api.RobotIdResponse.robot_id)
  
  ::bosdyn::api::RobotId* temp = robot_id_;
  robot_id_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RobotId* RobotIdResponse::_internal_mutable_robot_id() {
  
  if (robot_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RobotId>(GetArena());
    robot_id_ = p;
  }
  return robot_id_;
}
inline ::bosdyn::api::RobotId* RobotIdResponse::mutable_robot_id() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.RobotIdResponse.robot_id)
  return _internal_mutable_robot_id();
}
inline void RobotIdResponse::set_allocated_robot_id(::bosdyn::api::RobotId* robot_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete robot_id_;
  }
  if (robot_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(robot_id);
    if (message_arena != submessage_arena) {
      robot_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, robot_id, submessage_arena);
    }
    
  } else {
    
  }
  robot_id_ = robot_id;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.RobotIdResponse.robot_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace bosdyn

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2frobot_5fid_2eproto
