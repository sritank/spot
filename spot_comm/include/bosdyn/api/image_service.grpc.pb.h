// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bosdyn/api/image_service.proto
// Original file comments:
// Copyright (c) 2020 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).
//
#ifndef GRPC_bosdyn_2fapi_2fimage_5fservice_2eproto__INCLUDED
#define GRPC_bosdyn_2fapi_2fimage_5fservice_2eproto__INCLUDED

#include "bosdyn/api/image_service.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace bosdyn {
namespace api {

// An Image service provides access to one or more images, for example from cameras. It
// supports querying for the list of available images provided by the service and then
// supports requesting a latest given image by source name.
class ImageService final {
 public:
  static constexpr char const* service_full_name() {
    return "bosdyn.api.ImageService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Obtain the list of ImageSources.
    // The name field keys access to individual images when calling GetImage.
    virtual ::grpc::Status ListImageSources(::grpc::ClientContext* context, const ::bosdyn::api::ListImageSourcesRequest& request, ::bosdyn::api::ListImageSourcesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::ListImageSourcesResponse>> AsyncListImageSources(::grpc::ClientContext* context, const ::bosdyn::api::ListImageSourcesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::ListImageSourcesResponse>>(AsyncListImageSourcesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::ListImageSourcesResponse>> PrepareAsyncListImageSources(::grpc::ClientContext* context, const ::bosdyn::api::ListImageSourcesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::ListImageSourcesResponse>>(PrepareAsyncListImageSourcesRaw(context, request, cq));
    }
    // Request an image by name, with optional parameters for requesting image quality level.
    virtual ::grpc::Status GetImage(::grpc::ClientContext* context, const ::bosdyn::api::GetImageRequest& request, ::bosdyn::api::GetImageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::GetImageResponse>> AsyncGetImage(::grpc::ClientContext* context, const ::bosdyn::api::GetImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::GetImageResponse>>(AsyncGetImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::GetImageResponse>> PrepareAsyncGetImage(::grpc::ClientContext* context, const ::bosdyn::api::GetImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::GetImageResponse>>(PrepareAsyncGetImageRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Obtain the list of ImageSources.
      // The name field keys access to individual images when calling GetImage.
      virtual void ListImageSources(::grpc::ClientContext* context, const ::bosdyn::api::ListImageSourcesRequest* request, ::bosdyn::api::ListImageSourcesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListImageSources(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::ListImageSourcesResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListImageSources(::grpc::ClientContext* context, const ::bosdyn::api::ListImageSourcesRequest* request, ::bosdyn::api::ListImageSourcesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListImageSources(::grpc::ClientContext* context, const ::bosdyn::api::ListImageSourcesRequest* request, ::bosdyn::api::ListImageSourcesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListImageSources(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::ListImageSourcesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListImageSources(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::ListImageSourcesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Request an image by name, with optional parameters for requesting image quality level.
      virtual void GetImage(::grpc::ClientContext* context, const ::bosdyn::api::GetImageRequest* request, ::bosdyn::api::GetImageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::GetImageResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetImage(::grpc::ClientContext* context, const ::bosdyn::api::GetImageRequest* request, ::bosdyn::api::GetImageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetImage(::grpc::ClientContext* context, const ::bosdyn::api::GetImageRequest* request, ::bosdyn::api::GetImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::GetImageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::GetImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::ListImageSourcesResponse>* AsyncListImageSourcesRaw(::grpc::ClientContext* context, const ::bosdyn::api::ListImageSourcesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::ListImageSourcesResponse>* PrepareAsyncListImageSourcesRaw(::grpc::ClientContext* context, const ::bosdyn::api::ListImageSourcesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::GetImageResponse>* AsyncGetImageRaw(::grpc::ClientContext* context, const ::bosdyn::api::GetImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::GetImageResponse>* PrepareAsyncGetImageRaw(::grpc::ClientContext* context, const ::bosdyn::api::GetImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ListImageSources(::grpc::ClientContext* context, const ::bosdyn::api::ListImageSourcesRequest& request, ::bosdyn::api::ListImageSourcesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::ListImageSourcesResponse>> AsyncListImageSources(::grpc::ClientContext* context, const ::bosdyn::api::ListImageSourcesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::ListImageSourcesResponse>>(AsyncListImageSourcesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::ListImageSourcesResponse>> PrepareAsyncListImageSources(::grpc::ClientContext* context, const ::bosdyn::api::ListImageSourcesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::ListImageSourcesResponse>>(PrepareAsyncListImageSourcesRaw(context, request, cq));
    }
    ::grpc::Status GetImage(::grpc::ClientContext* context, const ::bosdyn::api::GetImageRequest& request, ::bosdyn::api::GetImageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::GetImageResponse>> AsyncGetImage(::grpc::ClientContext* context, const ::bosdyn::api::GetImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::GetImageResponse>>(AsyncGetImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::GetImageResponse>> PrepareAsyncGetImage(::grpc::ClientContext* context, const ::bosdyn::api::GetImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::GetImageResponse>>(PrepareAsyncGetImageRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void ListImageSources(::grpc::ClientContext* context, const ::bosdyn::api::ListImageSourcesRequest* request, ::bosdyn::api::ListImageSourcesResponse* response, std::function<void(::grpc::Status)>) override;
      void ListImageSources(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::ListImageSourcesResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListImageSources(::grpc::ClientContext* context, const ::bosdyn::api::ListImageSourcesRequest* request, ::bosdyn::api::ListImageSourcesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListImageSources(::grpc::ClientContext* context, const ::bosdyn::api::ListImageSourcesRequest* request, ::bosdyn::api::ListImageSourcesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListImageSources(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::ListImageSourcesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListImageSources(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::ListImageSourcesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetImage(::grpc::ClientContext* context, const ::bosdyn::api::GetImageRequest* request, ::bosdyn::api::GetImageResponse* response, std::function<void(::grpc::Status)>) override;
      void GetImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::GetImageResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetImage(::grpc::ClientContext* context, const ::bosdyn::api::GetImageRequest* request, ::bosdyn::api::GetImageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetImage(::grpc::ClientContext* context, const ::bosdyn::api::GetImageRequest* request, ::bosdyn::api::GetImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::GetImageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::GetImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::ListImageSourcesResponse>* AsyncListImageSourcesRaw(::grpc::ClientContext* context, const ::bosdyn::api::ListImageSourcesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::ListImageSourcesResponse>* PrepareAsyncListImageSourcesRaw(::grpc::ClientContext* context, const ::bosdyn::api::ListImageSourcesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::GetImageResponse>* AsyncGetImageRaw(::grpc::ClientContext* context, const ::bosdyn::api::GetImageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::GetImageResponse>* PrepareAsyncGetImageRaw(::grpc::ClientContext* context, const ::bosdyn::api::GetImageRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ListImageSources_;
    const ::grpc::internal::RpcMethod rpcmethod_GetImage_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Obtain the list of ImageSources.
    // The name field keys access to individual images when calling GetImage.
    virtual ::grpc::Status ListImageSources(::grpc::ServerContext* context, const ::bosdyn::api::ListImageSourcesRequest* request, ::bosdyn::api::ListImageSourcesResponse* response);
    // Request an image by name, with optional parameters for requesting image quality level.
    virtual ::grpc::Status GetImage(::grpc::ServerContext* context, const ::bosdyn::api::GetImageRequest* request, ::bosdyn::api::GetImageResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListImageSources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListImageSources() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListImageSources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListImageSources(::grpc::ServerContext* /*context*/, const ::bosdyn::api::ListImageSourcesRequest* /*request*/, ::bosdyn::api::ListImageSourcesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListImageSources(::grpc::ServerContext* context, ::bosdyn::api::ListImageSourcesRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::ListImageSourcesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetImage() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImage(::grpc::ServerContext* /*context*/, const ::bosdyn::api::GetImageRequest* /*request*/, ::bosdyn::api::GetImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetImage(::grpc::ServerContext* context, ::bosdyn::api::GetImageRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::GetImageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListImageSources<WithAsyncMethod_GetImage<Service > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListImageSources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListImageSources() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::ListImageSourcesRequest, ::bosdyn::api::ListImageSourcesResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bosdyn::api::ListImageSourcesRequest* request, ::bosdyn::api::ListImageSourcesResponse* response) { return this->ListImageSources(context, request, response); }));}
    void SetMessageAllocatorFor_ListImageSources(
        ::grpc::experimental::MessageAllocator< ::bosdyn::api::ListImageSourcesRequest, ::bosdyn::api::ListImageSourcesResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::ListImageSourcesRequest, ::bosdyn::api::ListImageSourcesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListImageSources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListImageSources(::grpc::ServerContext* /*context*/, const ::bosdyn::api::ListImageSourcesRequest* /*request*/, ::bosdyn::api::ListImageSourcesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListImageSources(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::ListImageSourcesRequest* /*request*/, ::bosdyn::api::ListImageSourcesResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListImageSources(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bosdyn::api::ListImageSourcesRequest* /*request*/, ::bosdyn::api::ListImageSourcesResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetImage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::GetImageRequest, ::bosdyn::api::GetImageResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bosdyn::api::GetImageRequest* request, ::bosdyn::api::GetImageResponse* response) { return this->GetImage(context, request, response); }));}
    void SetMessageAllocatorFor_GetImage(
        ::grpc::experimental::MessageAllocator< ::bosdyn::api::GetImageRequest, ::bosdyn::api::GetImageResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::GetImageRequest, ::bosdyn::api::GetImageResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImage(::grpc::ServerContext* /*context*/, const ::bosdyn::api::GetImageRequest* /*request*/, ::bosdyn::api::GetImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetImage(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::GetImageRequest* /*request*/, ::bosdyn::api::GetImageResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetImage(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bosdyn::api::GetImageRequest* /*request*/, ::bosdyn::api::GetImageResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_ListImageSources<ExperimentalWithCallbackMethod_GetImage<Service > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_ListImageSources<ExperimentalWithCallbackMethod_GetImage<Service > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ListImageSources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListImageSources() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListImageSources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListImageSources(::grpc::ServerContext* /*context*/, const ::bosdyn::api::ListImageSourcesRequest* /*request*/, ::bosdyn::api::ListImageSourcesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetImage() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImage(::grpc::ServerContext* /*context*/, const ::bosdyn::api::GetImageRequest* /*request*/, ::bosdyn::api::GetImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListImageSources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListImageSources() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ListImageSources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListImageSources(::grpc::ServerContext* /*context*/, const ::bosdyn::api::ListImageSourcesRequest* /*request*/, ::bosdyn::api::ListImageSourcesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListImageSources(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetImage() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImage(::grpc::ServerContext* /*context*/, const ::bosdyn::api::GetImageRequest* /*request*/, ::bosdyn::api::GetImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetImage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListImageSources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListImageSources() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListImageSources(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListImageSources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListImageSources(::grpc::ServerContext* /*context*/, const ::bosdyn::api::ListImageSourcesRequest* /*request*/, ::bosdyn::api::ListImageSourcesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListImageSources(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListImageSources(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetImage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetImage(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetImage(::grpc::ServerContext* /*context*/, const ::bosdyn::api::GetImageRequest* /*request*/, ::bosdyn::api::GetImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetImage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetImage(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListImageSources : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListImageSources() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::ListImageSourcesRequest, ::bosdyn::api::ListImageSourcesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::ListImageSourcesRequest, ::bosdyn::api::ListImageSourcesResponse>* streamer) {
                       return this->StreamedListImageSources(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListImageSources() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListImageSources(::grpc::ServerContext* /*context*/, const ::bosdyn::api::ListImageSourcesRequest* /*request*/, ::bosdyn::api::ListImageSourcesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListImageSources(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::ListImageSourcesRequest,::bosdyn::api::ListImageSourcesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetImage() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::GetImageRequest, ::bosdyn::api::GetImageResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::GetImageRequest, ::bosdyn::api::GetImageResponse>* streamer) {
                       return this->StreamedGetImage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetImage(::grpc::ServerContext* /*context*/, const ::bosdyn::api::GetImageRequest* /*request*/, ::bosdyn::api::GetImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetImage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::GetImageRequest,::bosdyn::api::GetImageResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ListImageSources<WithStreamedUnaryMethod_GetImage<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ListImageSources<WithStreamedUnaryMethod_GetImage<Service > > StreamedService;
};

}  // namespace api
}  // namespace bosdyn


#endif  // GRPC_bosdyn_2fapi_2fimage_5fservice_2eproto__INCLUDED
