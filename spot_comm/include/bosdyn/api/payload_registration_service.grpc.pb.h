// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bosdyn/api/payload_registration_service.proto
// Original file comments:
// Copyright (c) 2020 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).
//
#ifndef GRPC_bosdyn_2fapi_2fpayload_5fregistration_5fservice_2eproto__INCLUDED
#define GRPC_bosdyn_2fapi_2fpayload_5fregistration_5fservice_2eproto__INCLUDED

#include "bosdyn/api/payload_registration_service.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace bosdyn {
namespace api {

// This service provides a way to register new payloads.
class PayloadRegistrationService final {
 public:
  static constexpr char const* service_full_name() {
    return "bosdyn.api.PayloadRegistrationService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Register a payload with the directory.
    virtual ::grpc::Status RegisterPayload(::grpc::ClientContext* context, const ::bosdyn::api::RegisterPayloadRequest& request, ::bosdyn::api::RegisterPayloadResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RegisterPayloadResponse>> AsyncRegisterPayload(::grpc::ClientContext* context, const ::bosdyn::api::RegisterPayloadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RegisterPayloadResponse>>(AsyncRegisterPayloadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RegisterPayloadResponse>> PrepareAsyncRegisterPayload(::grpc::ClientContext* context, const ::bosdyn::api::RegisterPayloadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RegisterPayloadResponse>>(PrepareAsyncRegisterPayloadRaw(context, request, cq));
    }
    // Update the version for the registered payload.
    virtual ::grpc::Status UpdatePayloadVersion(::grpc::ClientContext* context, const ::bosdyn::api::UpdatePayloadVersionRequest& request, ::bosdyn::api::UpdatePayloadVersionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::UpdatePayloadVersionResponse>> AsyncUpdatePayloadVersion(::grpc::ClientContext* context, const ::bosdyn::api::UpdatePayloadVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::UpdatePayloadVersionResponse>>(AsyncUpdatePayloadVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::UpdatePayloadVersionResponse>> PrepareAsyncUpdatePayloadVersion(::grpc::ClientContext* context, const ::bosdyn::api::UpdatePayloadVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::UpdatePayloadVersionResponse>>(PrepareAsyncUpdatePayloadVersionRaw(context, request, cq));
    }
    // Get the authentication token information associated with a given payload.
    virtual ::grpc::Status GetPayloadAuthToken(::grpc::ClientContext* context, const ::bosdyn::api::GetPayloadAuthTokenRequest& request, ::bosdyn::api::GetPayloadAuthTokenResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::GetPayloadAuthTokenResponse>> AsyncGetPayloadAuthToken(::grpc::ClientContext* context, const ::bosdyn::api::GetPayloadAuthTokenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::GetPayloadAuthTokenResponse>>(AsyncGetPayloadAuthTokenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::GetPayloadAuthTokenResponse>> PrepareAsyncGetPayloadAuthToken(::grpc::ClientContext* context, const ::bosdyn::api::GetPayloadAuthTokenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::GetPayloadAuthTokenResponse>>(PrepareAsyncGetPayloadAuthTokenRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Register a payload with the directory.
      virtual void RegisterPayload(::grpc::ClientContext* context, const ::bosdyn::api::RegisterPayloadRequest* request, ::bosdyn::api::RegisterPayloadResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegisterPayload(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::RegisterPayloadResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RegisterPayload(::grpc::ClientContext* context, const ::bosdyn::api::RegisterPayloadRequest* request, ::bosdyn::api::RegisterPayloadResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RegisterPayload(::grpc::ClientContext* context, const ::bosdyn::api::RegisterPayloadRequest* request, ::bosdyn::api::RegisterPayloadResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RegisterPayload(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::RegisterPayloadResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RegisterPayload(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::RegisterPayloadResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Update the version for the registered payload.
      virtual void UpdatePayloadVersion(::grpc::ClientContext* context, const ::bosdyn::api::UpdatePayloadVersionRequest* request, ::bosdyn::api::UpdatePayloadVersionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdatePayloadVersion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::UpdatePayloadVersionResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdatePayloadVersion(::grpc::ClientContext* context, const ::bosdyn::api::UpdatePayloadVersionRequest* request, ::bosdyn::api::UpdatePayloadVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdatePayloadVersion(::grpc::ClientContext* context, const ::bosdyn::api::UpdatePayloadVersionRequest* request, ::bosdyn::api::UpdatePayloadVersionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdatePayloadVersion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::UpdatePayloadVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdatePayloadVersion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::UpdatePayloadVersionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Get the authentication token information associated with a given payload.
      virtual void GetPayloadAuthToken(::grpc::ClientContext* context, const ::bosdyn::api::GetPayloadAuthTokenRequest* request, ::bosdyn::api::GetPayloadAuthTokenResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPayloadAuthToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::GetPayloadAuthTokenResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetPayloadAuthToken(::grpc::ClientContext* context, const ::bosdyn::api::GetPayloadAuthTokenRequest* request, ::bosdyn::api::GetPayloadAuthTokenResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetPayloadAuthToken(::grpc::ClientContext* context, const ::bosdyn::api::GetPayloadAuthTokenRequest* request, ::bosdyn::api::GetPayloadAuthTokenResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetPayloadAuthToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::GetPayloadAuthTokenResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetPayloadAuthToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::GetPayloadAuthTokenResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RegisterPayloadResponse>* AsyncRegisterPayloadRaw(::grpc::ClientContext* context, const ::bosdyn::api::RegisterPayloadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RegisterPayloadResponse>* PrepareAsyncRegisterPayloadRaw(::grpc::ClientContext* context, const ::bosdyn::api::RegisterPayloadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::UpdatePayloadVersionResponse>* AsyncUpdatePayloadVersionRaw(::grpc::ClientContext* context, const ::bosdyn::api::UpdatePayloadVersionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::UpdatePayloadVersionResponse>* PrepareAsyncUpdatePayloadVersionRaw(::grpc::ClientContext* context, const ::bosdyn::api::UpdatePayloadVersionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::GetPayloadAuthTokenResponse>* AsyncGetPayloadAuthTokenRaw(::grpc::ClientContext* context, const ::bosdyn::api::GetPayloadAuthTokenRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::GetPayloadAuthTokenResponse>* PrepareAsyncGetPayloadAuthTokenRaw(::grpc::ClientContext* context, const ::bosdyn::api::GetPayloadAuthTokenRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status RegisterPayload(::grpc::ClientContext* context, const ::bosdyn::api::RegisterPayloadRequest& request, ::bosdyn::api::RegisterPayloadResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RegisterPayloadResponse>> AsyncRegisterPayload(::grpc::ClientContext* context, const ::bosdyn::api::RegisterPayloadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RegisterPayloadResponse>>(AsyncRegisterPayloadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RegisterPayloadResponse>> PrepareAsyncRegisterPayload(::grpc::ClientContext* context, const ::bosdyn::api::RegisterPayloadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RegisterPayloadResponse>>(PrepareAsyncRegisterPayloadRaw(context, request, cq));
    }
    ::grpc::Status UpdatePayloadVersion(::grpc::ClientContext* context, const ::bosdyn::api::UpdatePayloadVersionRequest& request, ::bosdyn::api::UpdatePayloadVersionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::UpdatePayloadVersionResponse>> AsyncUpdatePayloadVersion(::grpc::ClientContext* context, const ::bosdyn::api::UpdatePayloadVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::UpdatePayloadVersionResponse>>(AsyncUpdatePayloadVersionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::UpdatePayloadVersionResponse>> PrepareAsyncUpdatePayloadVersion(::grpc::ClientContext* context, const ::bosdyn::api::UpdatePayloadVersionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::UpdatePayloadVersionResponse>>(PrepareAsyncUpdatePayloadVersionRaw(context, request, cq));
    }
    ::grpc::Status GetPayloadAuthToken(::grpc::ClientContext* context, const ::bosdyn::api::GetPayloadAuthTokenRequest& request, ::bosdyn::api::GetPayloadAuthTokenResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::GetPayloadAuthTokenResponse>> AsyncGetPayloadAuthToken(::grpc::ClientContext* context, const ::bosdyn::api::GetPayloadAuthTokenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::GetPayloadAuthTokenResponse>>(AsyncGetPayloadAuthTokenRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::GetPayloadAuthTokenResponse>> PrepareAsyncGetPayloadAuthToken(::grpc::ClientContext* context, const ::bosdyn::api::GetPayloadAuthTokenRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::GetPayloadAuthTokenResponse>>(PrepareAsyncGetPayloadAuthTokenRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void RegisterPayload(::grpc::ClientContext* context, const ::bosdyn::api::RegisterPayloadRequest* request, ::bosdyn::api::RegisterPayloadResponse* response, std::function<void(::grpc::Status)>) override;
      void RegisterPayload(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::RegisterPayloadResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RegisterPayload(::grpc::ClientContext* context, const ::bosdyn::api::RegisterPayloadRequest* request, ::bosdyn::api::RegisterPayloadResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RegisterPayload(::grpc::ClientContext* context, const ::bosdyn::api::RegisterPayloadRequest* request, ::bosdyn::api::RegisterPayloadResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RegisterPayload(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::RegisterPayloadResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RegisterPayload(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::RegisterPayloadResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UpdatePayloadVersion(::grpc::ClientContext* context, const ::bosdyn::api::UpdatePayloadVersionRequest* request, ::bosdyn::api::UpdatePayloadVersionResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdatePayloadVersion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::UpdatePayloadVersionResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdatePayloadVersion(::grpc::ClientContext* context, const ::bosdyn::api::UpdatePayloadVersionRequest* request, ::bosdyn::api::UpdatePayloadVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdatePayloadVersion(::grpc::ClientContext* context, const ::bosdyn::api::UpdatePayloadVersionRequest* request, ::bosdyn::api::UpdatePayloadVersionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdatePayloadVersion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::UpdatePayloadVersionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdatePayloadVersion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::UpdatePayloadVersionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetPayloadAuthToken(::grpc::ClientContext* context, const ::bosdyn::api::GetPayloadAuthTokenRequest* request, ::bosdyn::api::GetPayloadAuthTokenResponse* response, std::function<void(::grpc::Status)>) override;
      void GetPayloadAuthToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::GetPayloadAuthTokenResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetPayloadAuthToken(::grpc::ClientContext* context, const ::bosdyn::api::GetPayloadAuthTokenRequest* request, ::bosdyn::api::GetPayloadAuthTokenResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetPayloadAuthToken(::grpc::ClientContext* context, const ::bosdyn::api::GetPayloadAuthTokenRequest* request, ::bosdyn::api::GetPayloadAuthTokenResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetPayloadAuthToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::GetPayloadAuthTokenResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetPayloadAuthToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::GetPayloadAuthTokenResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RegisterPayloadResponse>* AsyncRegisterPayloadRaw(::grpc::ClientContext* context, const ::bosdyn::api::RegisterPayloadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RegisterPayloadResponse>* PrepareAsyncRegisterPayloadRaw(::grpc::ClientContext* context, const ::bosdyn::api::RegisterPayloadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::UpdatePayloadVersionResponse>* AsyncUpdatePayloadVersionRaw(::grpc::ClientContext* context, const ::bosdyn::api::UpdatePayloadVersionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::UpdatePayloadVersionResponse>* PrepareAsyncUpdatePayloadVersionRaw(::grpc::ClientContext* context, const ::bosdyn::api::UpdatePayloadVersionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::GetPayloadAuthTokenResponse>* AsyncGetPayloadAuthTokenRaw(::grpc::ClientContext* context, const ::bosdyn::api::GetPayloadAuthTokenRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::GetPayloadAuthTokenResponse>* PrepareAsyncGetPayloadAuthTokenRaw(::grpc::ClientContext* context, const ::bosdyn::api::GetPayloadAuthTokenRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterPayload_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdatePayloadVersion_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPayloadAuthToken_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Register a payload with the directory.
    virtual ::grpc::Status RegisterPayload(::grpc::ServerContext* context, const ::bosdyn::api::RegisterPayloadRequest* request, ::bosdyn::api::RegisterPayloadResponse* response);
    // Update the version for the registered payload.
    virtual ::grpc::Status UpdatePayloadVersion(::grpc::ServerContext* context, const ::bosdyn::api::UpdatePayloadVersionRequest* request, ::bosdyn::api::UpdatePayloadVersionResponse* response);
    // Get the authentication token information associated with a given payload.
    virtual ::grpc::Status GetPayloadAuthToken(::grpc::ServerContext* context, const ::bosdyn::api::GetPayloadAuthTokenRequest* request, ::bosdyn::api::GetPayloadAuthTokenResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterPayload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterPayload() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RegisterPayload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterPayload(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RegisterPayloadRequest* /*request*/, ::bosdyn::api::RegisterPayloadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterPayload(::grpc::ServerContext* context, ::bosdyn::api::RegisterPayloadRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::RegisterPayloadResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdatePayloadVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdatePayloadVersion() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_UpdatePayloadVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePayloadVersion(::grpc::ServerContext* /*context*/, const ::bosdyn::api::UpdatePayloadVersionRequest* /*request*/, ::bosdyn::api::UpdatePayloadVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdatePayloadVersion(::grpc::ServerContext* context, ::bosdyn::api::UpdatePayloadVersionRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::UpdatePayloadVersionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPayloadAuthToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPayloadAuthToken() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetPayloadAuthToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPayloadAuthToken(::grpc::ServerContext* /*context*/, const ::bosdyn::api::GetPayloadAuthTokenRequest* /*request*/, ::bosdyn::api::GetPayloadAuthTokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPayloadAuthToken(::grpc::ServerContext* context, ::bosdyn::api::GetPayloadAuthTokenRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::GetPayloadAuthTokenResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RegisterPayload<WithAsyncMethod_UpdatePayloadVersion<WithAsyncMethod_GetPayloadAuthToken<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RegisterPayload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RegisterPayload() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::RegisterPayloadRequest, ::bosdyn::api::RegisterPayloadResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bosdyn::api::RegisterPayloadRequest* request, ::bosdyn::api::RegisterPayloadResponse* response) { return this->RegisterPayload(context, request, response); }));}
    void SetMessageAllocatorFor_RegisterPayload(
        ::grpc::experimental::MessageAllocator< ::bosdyn::api::RegisterPayloadRequest, ::bosdyn::api::RegisterPayloadResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::RegisterPayloadRequest, ::bosdyn::api::RegisterPayloadResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RegisterPayload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterPayload(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RegisterPayloadRequest* /*request*/, ::bosdyn::api::RegisterPayloadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RegisterPayload(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::RegisterPayloadRequest* /*request*/, ::bosdyn::api::RegisterPayloadResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RegisterPayload(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bosdyn::api::RegisterPayloadRequest* /*request*/, ::bosdyn::api::RegisterPayloadResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdatePayloadVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdatePayloadVersion() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::UpdatePayloadVersionRequest, ::bosdyn::api::UpdatePayloadVersionResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bosdyn::api::UpdatePayloadVersionRequest* request, ::bosdyn::api::UpdatePayloadVersionResponse* response) { return this->UpdatePayloadVersion(context, request, response); }));}
    void SetMessageAllocatorFor_UpdatePayloadVersion(
        ::grpc::experimental::MessageAllocator< ::bosdyn::api::UpdatePayloadVersionRequest, ::bosdyn::api::UpdatePayloadVersionResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::UpdatePayloadVersionRequest, ::bosdyn::api::UpdatePayloadVersionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdatePayloadVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePayloadVersion(::grpc::ServerContext* /*context*/, const ::bosdyn::api::UpdatePayloadVersionRequest* /*request*/, ::bosdyn::api::UpdatePayloadVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdatePayloadVersion(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::UpdatePayloadVersionRequest* /*request*/, ::bosdyn::api::UpdatePayloadVersionResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdatePayloadVersion(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bosdyn::api::UpdatePayloadVersionRequest* /*request*/, ::bosdyn::api::UpdatePayloadVersionResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetPayloadAuthToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetPayloadAuthToken() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::GetPayloadAuthTokenRequest, ::bosdyn::api::GetPayloadAuthTokenResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bosdyn::api::GetPayloadAuthTokenRequest* request, ::bosdyn::api::GetPayloadAuthTokenResponse* response) { return this->GetPayloadAuthToken(context, request, response); }));}
    void SetMessageAllocatorFor_GetPayloadAuthToken(
        ::grpc::experimental::MessageAllocator< ::bosdyn::api::GetPayloadAuthTokenRequest, ::bosdyn::api::GetPayloadAuthTokenResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::GetPayloadAuthTokenRequest, ::bosdyn::api::GetPayloadAuthTokenResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetPayloadAuthToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPayloadAuthToken(::grpc::ServerContext* /*context*/, const ::bosdyn::api::GetPayloadAuthTokenRequest* /*request*/, ::bosdyn::api::GetPayloadAuthTokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetPayloadAuthToken(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::GetPayloadAuthTokenRequest* /*request*/, ::bosdyn::api::GetPayloadAuthTokenResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetPayloadAuthToken(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bosdyn::api::GetPayloadAuthTokenRequest* /*request*/, ::bosdyn::api::GetPayloadAuthTokenResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_RegisterPayload<ExperimentalWithCallbackMethod_UpdatePayloadVersion<ExperimentalWithCallbackMethod_GetPayloadAuthToken<Service > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_RegisterPayload<ExperimentalWithCallbackMethod_UpdatePayloadVersion<ExperimentalWithCallbackMethod_GetPayloadAuthToken<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RegisterPayload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterPayload() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RegisterPayload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterPayload(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RegisterPayloadRequest* /*request*/, ::bosdyn::api::RegisterPayloadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdatePayloadVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdatePayloadVersion() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_UpdatePayloadVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePayloadVersion(::grpc::ServerContext* /*context*/, const ::bosdyn::api::UpdatePayloadVersionRequest* /*request*/, ::bosdyn::api::UpdatePayloadVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPayloadAuthToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPayloadAuthToken() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetPayloadAuthToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPayloadAuthToken(::grpc::ServerContext* /*context*/, const ::bosdyn::api::GetPayloadAuthTokenRequest* /*request*/, ::bosdyn::api::GetPayloadAuthTokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterPayload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterPayload() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RegisterPayload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterPayload(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RegisterPayloadRequest* /*request*/, ::bosdyn::api::RegisterPayloadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterPayload(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdatePayloadVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdatePayloadVersion() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_UpdatePayloadVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePayloadVersion(::grpc::ServerContext* /*context*/, const ::bosdyn::api::UpdatePayloadVersionRequest* /*request*/, ::bosdyn::api::UpdatePayloadVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdatePayloadVersion(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPayloadAuthToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPayloadAuthToken() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetPayloadAuthToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPayloadAuthToken(::grpc::ServerContext* /*context*/, const ::bosdyn::api::GetPayloadAuthTokenRequest* /*request*/, ::bosdyn::api::GetPayloadAuthTokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPayloadAuthToken(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RegisterPayload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RegisterPayload() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegisterPayload(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RegisterPayload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterPayload(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RegisterPayloadRequest* /*request*/, ::bosdyn::api::RegisterPayloadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RegisterPayload(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RegisterPayload(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdatePayloadVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdatePayloadVersion() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdatePayloadVersion(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdatePayloadVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePayloadVersion(::grpc::ServerContext* /*context*/, const ::bosdyn::api::UpdatePayloadVersionRequest* /*request*/, ::bosdyn::api::UpdatePayloadVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdatePayloadVersion(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdatePayloadVersion(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetPayloadAuthToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetPayloadAuthToken() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPayloadAuthToken(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetPayloadAuthToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPayloadAuthToken(::grpc::ServerContext* /*context*/, const ::bosdyn::api::GetPayloadAuthTokenRequest* /*request*/, ::bosdyn::api::GetPayloadAuthTokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetPayloadAuthToken(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetPayloadAuthToken(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterPayload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisterPayload() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::RegisterPayloadRequest, ::bosdyn::api::RegisterPayloadResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::RegisterPayloadRequest, ::bosdyn::api::RegisterPayloadResponse>* streamer) {
                       return this->StreamedRegisterPayload(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RegisterPayload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterPayload(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RegisterPayloadRequest* /*request*/, ::bosdyn::api::RegisterPayloadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterPayload(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::RegisterPayloadRequest,::bosdyn::api::RegisterPayloadResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdatePayloadVersion : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdatePayloadVersion() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::UpdatePayloadVersionRequest, ::bosdyn::api::UpdatePayloadVersionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::UpdatePayloadVersionRequest, ::bosdyn::api::UpdatePayloadVersionResponse>* streamer) {
                       return this->StreamedUpdatePayloadVersion(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdatePayloadVersion() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdatePayloadVersion(::grpc::ServerContext* /*context*/, const ::bosdyn::api::UpdatePayloadVersionRequest* /*request*/, ::bosdyn::api::UpdatePayloadVersionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdatePayloadVersion(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::UpdatePayloadVersionRequest,::bosdyn::api::UpdatePayloadVersionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPayloadAuthToken : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPayloadAuthToken() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::GetPayloadAuthTokenRequest, ::bosdyn::api::GetPayloadAuthTokenResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::GetPayloadAuthTokenRequest, ::bosdyn::api::GetPayloadAuthTokenResponse>* streamer) {
                       return this->StreamedGetPayloadAuthToken(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPayloadAuthToken() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPayloadAuthToken(::grpc::ServerContext* /*context*/, const ::bosdyn::api::GetPayloadAuthTokenRequest* /*request*/, ::bosdyn::api::GetPayloadAuthTokenResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPayloadAuthToken(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::GetPayloadAuthTokenRequest,::bosdyn::api::GetPayloadAuthTokenResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RegisterPayload<WithStreamedUnaryMethod_UpdatePayloadVersion<WithStreamedUnaryMethod_GetPayloadAuthToken<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_RegisterPayload<WithStreamedUnaryMethod_UpdatePayloadVersion<WithStreamedUnaryMethod_GetPayloadAuthToken<Service > > > StreamedService;
};

}  // namespace api
}  // namespace bosdyn


#endif  // GRPC_bosdyn_2fapi_2fpayload_5fregistration_5fservice_2eproto__INCLUDED
