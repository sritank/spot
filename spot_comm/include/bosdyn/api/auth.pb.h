// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/auth.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fauth_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fauth_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "bosdyn/api/header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fauth_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bosdyn_2fapi_2fauth_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fauth_2eproto;
namespace bosdyn {
namespace api {
class GetAuthTokenRequest;
class GetAuthTokenRequestDefaultTypeInternal;
extern GetAuthTokenRequestDefaultTypeInternal _GetAuthTokenRequest_default_instance_;
class GetAuthTokenResponse;
class GetAuthTokenResponseDefaultTypeInternal;
extern GetAuthTokenResponseDefaultTypeInternal _GetAuthTokenResponse_default_instance_;
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> ::bosdyn::api::GetAuthTokenRequest* Arena::CreateMaybeMessage<::bosdyn::api::GetAuthTokenRequest>(Arena*);
template<> ::bosdyn::api::GetAuthTokenResponse* Arena::CreateMaybeMessage<::bosdyn::api::GetAuthTokenResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bosdyn {
namespace api {

enum GetAuthTokenResponse_Status : int {
  GetAuthTokenResponse_Status_STATUS_UNKNOWN = 0,
  GetAuthTokenResponse_Status_STATUS_OK = 1,
  GetAuthTokenResponse_Status_STATUS_INVALID_LOGIN = 2,
  GetAuthTokenResponse_Status_STATUS_INVALID_TOKEN = 3,
  GetAuthTokenResponse_Status_STATUS_TEMPORARILY_LOCKED_OUT = 4,
  GetAuthTokenResponse_Status_STATUS_INVALID_APPLICATION_TOKEN = 5,
  GetAuthTokenResponse_Status_STATUS_EXPIRED_APPLICATION_TOKEN = 6,
  GetAuthTokenResponse_Status_GetAuthTokenResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GetAuthTokenResponse_Status_GetAuthTokenResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GetAuthTokenResponse_Status_IsValid(int value);
constexpr GetAuthTokenResponse_Status GetAuthTokenResponse_Status_Status_MIN = GetAuthTokenResponse_Status_STATUS_UNKNOWN;
constexpr GetAuthTokenResponse_Status GetAuthTokenResponse_Status_Status_MAX = GetAuthTokenResponse_Status_STATUS_EXPIRED_APPLICATION_TOKEN;
constexpr int GetAuthTokenResponse_Status_Status_ARRAYSIZE = GetAuthTokenResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetAuthTokenResponse_Status_descriptor();
template<typename T>
inline const std::string& GetAuthTokenResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GetAuthTokenResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GetAuthTokenResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GetAuthTokenResponse_Status_descriptor(), enum_t_value);
}
inline bool GetAuthTokenResponse_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GetAuthTokenResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GetAuthTokenResponse_Status>(
    GetAuthTokenResponse_Status_descriptor(), name, value);
}
// ===================================================================

class GetAuthTokenRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.GetAuthTokenRequest) */ {
 public:
  inline GetAuthTokenRequest() : GetAuthTokenRequest(nullptr) {}
  virtual ~GetAuthTokenRequest();

  GetAuthTokenRequest(const GetAuthTokenRequest& from);
  GetAuthTokenRequest(GetAuthTokenRequest&& from) noexcept
    : GetAuthTokenRequest() {
    *this = ::std::move(from);
  }

  inline GetAuthTokenRequest& operator=(const GetAuthTokenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAuthTokenRequest& operator=(GetAuthTokenRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAuthTokenRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAuthTokenRequest* internal_default_instance() {
    return reinterpret_cast<const GetAuthTokenRequest*>(
               &_GetAuthTokenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetAuthTokenRequest& a, GetAuthTokenRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAuthTokenRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAuthTokenRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAuthTokenRequest* New() const final {
    return CreateMaybeMessage<GetAuthTokenRequest>(nullptr);
  }

  GetAuthTokenRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAuthTokenRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAuthTokenRequest& from);
  void MergeFrom(const GetAuthTokenRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAuthTokenRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.GetAuthTokenRequest";
  }
  protected:
  explicit GetAuthTokenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fauth_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fauth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 2,
    kPasswordFieldNumber = 3,
    kTokenFieldNumber = 4,
    kApplicationTokenFieldNumber = 5,
    kHeaderFieldNumber = 1,
  };
  // string username = 2;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string password = 3;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // string token = 4;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string application_token = 5 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_application_token();
  PROTOBUF_DEPRECATED const std::string& application_token() const;
  PROTOBUF_DEPRECATED void set_application_token(const std::string& value);
  PROTOBUF_DEPRECATED void set_application_token(std::string&& value);
  PROTOBUF_DEPRECATED void set_application_token(const char* value);
  PROTOBUF_DEPRECATED void set_application_token(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_application_token();
  PROTOBUF_DEPRECATED std::string* release_application_token();
  PROTOBUF_DEPRECATED void set_allocated_application_token(std::string* application_token);
  private:
  const std::string& _internal_application_token() const;
  void _internal_set_application_token(const std::string& value);
  std::string* _internal_mutable_application_token();
  public:

  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.GetAuthTokenRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr application_token_;
  ::bosdyn::api::RequestHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fauth_2eproto;
};
// -------------------------------------------------------------------

class GetAuthTokenResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.GetAuthTokenResponse) */ {
 public:
  inline GetAuthTokenResponse() : GetAuthTokenResponse(nullptr) {}
  virtual ~GetAuthTokenResponse();

  GetAuthTokenResponse(const GetAuthTokenResponse& from);
  GetAuthTokenResponse(GetAuthTokenResponse&& from) noexcept
    : GetAuthTokenResponse() {
    *this = ::std::move(from);
  }

  inline GetAuthTokenResponse& operator=(const GetAuthTokenResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAuthTokenResponse& operator=(GetAuthTokenResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAuthTokenResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAuthTokenResponse* internal_default_instance() {
    return reinterpret_cast<const GetAuthTokenResponse*>(
               &_GetAuthTokenResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetAuthTokenResponse& a, GetAuthTokenResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAuthTokenResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAuthTokenResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAuthTokenResponse* New() const final {
    return CreateMaybeMessage<GetAuthTokenResponse>(nullptr);
  }

  GetAuthTokenResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAuthTokenResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAuthTokenResponse& from);
  void MergeFrom(const GetAuthTokenResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAuthTokenResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.GetAuthTokenResponse";
  }
  protected:
  explicit GetAuthTokenResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fauth_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fauth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetAuthTokenResponse_Status Status;
  static constexpr Status STATUS_UNKNOWN =
    GetAuthTokenResponse_Status_STATUS_UNKNOWN;
  static constexpr Status STATUS_OK =
    GetAuthTokenResponse_Status_STATUS_OK;
  static constexpr Status STATUS_INVALID_LOGIN =
    GetAuthTokenResponse_Status_STATUS_INVALID_LOGIN;
  static constexpr Status STATUS_INVALID_TOKEN =
    GetAuthTokenResponse_Status_STATUS_INVALID_TOKEN;
  static constexpr Status STATUS_TEMPORARILY_LOCKED_OUT =
    GetAuthTokenResponse_Status_STATUS_TEMPORARILY_LOCKED_OUT;
  static constexpr Status STATUS_INVALID_APPLICATION_TOKEN =
    GetAuthTokenResponse_Status_STATUS_INVALID_APPLICATION_TOKEN;
  static constexpr Status STATUS_EXPIRED_APPLICATION_TOKEN =
    GetAuthTokenResponse_Status_STATUS_EXPIRED_APPLICATION_TOKEN;
  static inline bool Status_IsValid(int value) {
    return GetAuthTokenResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    GetAuthTokenResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    GetAuthTokenResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    GetAuthTokenResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return GetAuthTokenResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return GetAuthTokenResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return GetAuthTokenResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // string token = 3;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // .bosdyn.api.GetAuthTokenResponse.Status status = 2;
  void clear_status();
  ::bosdyn::api::GetAuthTokenResponse_Status status() const;
  void set_status(::bosdyn::api::GetAuthTokenResponse_Status value);
  private:
  ::bosdyn::api::GetAuthTokenResponse_Status _internal_status() const;
  void _internal_set_status(::bosdyn::api::GetAuthTokenResponse_Status value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.GetAuthTokenResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::bosdyn::api::ResponseHeader* header_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fauth_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetAuthTokenRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool GetAuthTokenRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool GetAuthTokenRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& GetAuthTokenRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::RequestHeader*>(
      &::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& GetAuthTokenRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GetAuthTokenRequest.header)
  return _internal_header();
}
inline void GetAuthTokenRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.GetAuthTokenRequest.header)
}
inline ::bosdyn::api::RequestHeader* GetAuthTokenRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::RequestHeader* GetAuthTokenRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.GetAuthTokenRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* GetAuthTokenRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::RequestHeader* GetAuthTokenRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GetAuthTokenRequest.header)
  return _internal_mutable_header();
}
inline void GetAuthTokenRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.GetAuthTokenRequest.header)
}

// string username = 2;
inline void GetAuthTokenRequest::clear_username() {
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetAuthTokenRequest::username() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GetAuthTokenRequest.username)
  return _internal_username();
}
inline void GetAuthTokenRequest::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.GetAuthTokenRequest.username)
}
inline std::string* GetAuthTokenRequest::mutable_username() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GetAuthTokenRequest.username)
  return _internal_mutable_username();
}
inline const std::string& GetAuthTokenRequest::_internal_username() const {
  return username_.Get();
}
inline void GetAuthTokenRequest::_internal_set_username(const std::string& value) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetAuthTokenRequest::set_username(std::string&& value) {
  
  username_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.GetAuthTokenRequest.username)
}
inline void GetAuthTokenRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.GetAuthTokenRequest.username)
}
inline void GetAuthTokenRequest::set_username(const char* value,
    size_t size) {
  
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.GetAuthTokenRequest.username)
}
inline std::string* GetAuthTokenRequest::_internal_mutable_username() {
  
  return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetAuthTokenRequest::release_username() {
  // @@protoc_insertion_point(field_release:bosdyn.api.GetAuthTokenRequest.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetAuthTokenRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.GetAuthTokenRequest.username)
}

// string password = 3;
inline void GetAuthTokenRequest::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetAuthTokenRequest::password() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GetAuthTokenRequest.password)
  return _internal_password();
}
inline void GetAuthTokenRequest::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.GetAuthTokenRequest.password)
}
inline std::string* GetAuthTokenRequest::mutable_password() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GetAuthTokenRequest.password)
  return _internal_mutable_password();
}
inline const std::string& GetAuthTokenRequest::_internal_password() const {
  return password_.Get();
}
inline void GetAuthTokenRequest::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetAuthTokenRequest::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.GetAuthTokenRequest.password)
}
inline void GetAuthTokenRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.GetAuthTokenRequest.password)
}
inline void GetAuthTokenRequest::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.GetAuthTokenRequest.password)
}
inline std::string* GetAuthTokenRequest::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetAuthTokenRequest::release_password() {
  // @@protoc_insertion_point(field_release:bosdyn.api.GetAuthTokenRequest.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetAuthTokenRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.GetAuthTokenRequest.password)
}

// string token = 4;
inline void GetAuthTokenRequest::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetAuthTokenRequest::token() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GetAuthTokenRequest.token)
  return _internal_token();
}
inline void GetAuthTokenRequest::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.GetAuthTokenRequest.token)
}
inline std::string* GetAuthTokenRequest::mutable_token() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GetAuthTokenRequest.token)
  return _internal_mutable_token();
}
inline const std::string& GetAuthTokenRequest::_internal_token() const {
  return token_.Get();
}
inline void GetAuthTokenRequest::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetAuthTokenRequest::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.GetAuthTokenRequest.token)
}
inline void GetAuthTokenRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.GetAuthTokenRequest.token)
}
inline void GetAuthTokenRequest::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.GetAuthTokenRequest.token)
}
inline std::string* GetAuthTokenRequest::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetAuthTokenRequest::release_token() {
  // @@protoc_insertion_point(field_release:bosdyn.api.GetAuthTokenRequest.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetAuthTokenRequest::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.GetAuthTokenRequest.token)
}

// string application_token = 5 [deprecated = true];
inline void GetAuthTokenRequest::clear_application_token() {
  application_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetAuthTokenRequest::application_token() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GetAuthTokenRequest.application_token)
  return _internal_application_token();
}
inline void GetAuthTokenRequest::set_application_token(const std::string& value) {
  _internal_set_application_token(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.GetAuthTokenRequest.application_token)
}
inline std::string* GetAuthTokenRequest::mutable_application_token() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GetAuthTokenRequest.application_token)
  return _internal_mutable_application_token();
}
inline const std::string& GetAuthTokenRequest::_internal_application_token() const {
  return application_token_.Get();
}
inline void GetAuthTokenRequest::_internal_set_application_token(const std::string& value) {
  
  application_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetAuthTokenRequest::set_application_token(std::string&& value) {
  
  application_token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.GetAuthTokenRequest.application_token)
}
inline void GetAuthTokenRequest::set_application_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  application_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.GetAuthTokenRequest.application_token)
}
inline void GetAuthTokenRequest::set_application_token(const char* value,
    size_t size) {
  
  application_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.GetAuthTokenRequest.application_token)
}
inline std::string* GetAuthTokenRequest::_internal_mutable_application_token() {
  
  return application_token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetAuthTokenRequest::release_application_token() {
  // @@protoc_insertion_point(field_release:bosdyn.api.GetAuthTokenRequest.application_token)
  return application_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetAuthTokenRequest::set_allocated_application_token(std::string* application_token) {
  if (application_token != nullptr) {
    
  } else {
    
  }
  application_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), application_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.GetAuthTokenRequest.application_token)
}

// -------------------------------------------------------------------

// GetAuthTokenResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool GetAuthTokenResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool GetAuthTokenResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& GetAuthTokenResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::ResponseHeader*>(
      &::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& GetAuthTokenResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GetAuthTokenResponse.header)
  return _internal_header();
}
inline void GetAuthTokenResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.GetAuthTokenResponse.header)
}
inline ::bosdyn::api::ResponseHeader* GetAuthTokenResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::ResponseHeader* GetAuthTokenResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.GetAuthTokenResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* GetAuthTokenResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::ResponseHeader* GetAuthTokenResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GetAuthTokenResponse.header)
  return _internal_mutable_header();
}
inline void GetAuthTokenResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.GetAuthTokenResponse.header)
}

// .bosdyn.api.GetAuthTokenResponse.Status status = 2;
inline void GetAuthTokenResponse::clear_status() {
  status_ = 0;
}
inline ::bosdyn::api::GetAuthTokenResponse_Status GetAuthTokenResponse::_internal_status() const {
  return static_cast< ::bosdyn::api::GetAuthTokenResponse_Status >(status_);
}
inline ::bosdyn::api::GetAuthTokenResponse_Status GetAuthTokenResponse::status() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GetAuthTokenResponse.status)
  return _internal_status();
}
inline void GetAuthTokenResponse::_internal_set_status(::bosdyn::api::GetAuthTokenResponse_Status value) {
  
  status_ = value;
}
inline void GetAuthTokenResponse::set_status(::bosdyn::api::GetAuthTokenResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.GetAuthTokenResponse.status)
}

// string token = 3;
inline void GetAuthTokenResponse::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetAuthTokenResponse::token() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GetAuthTokenResponse.token)
  return _internal_token();
}
inline void GetAuthTokenResponse::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.GetAuthTokenResponse.token)
}
inline std::string* GetAuthTokenResponse::mutable_token() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GetAuthTokenResponse.token)
  return _internal_mutable_token();
}
inline const std::string& GetAuthTokenResponse::_internal_token() const {
  return token_.Get();
}
inline void GetAuthTokenResponse::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetAuthTokenResponse::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.GetAuthTokenResponse.token)
}
inline void GetAuthTokenResponse::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.GetAuthTokenResponse.token)
}
inline void GetAuthTokenResponse::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.GetAuthTokenResponse.token)
}
inline std::string* GetAuthTokenResponse::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetAuthTokenResponse::release_token() {
  // @@protoc_insertion_point(field_release:bosdyn.api.GetAuthTokenResponse.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetAuthTokenResponse::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.GetAuthTokenResponse.token)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace bosdyn

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bosdyn::api::GetAuthTokenResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::GetAuthTokenResponse_Status>() {
  return ::bosdyn::api::GetAuthTokenResponse_Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fauth_2eproto
