// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/payload.proto

#include "bosdyn/api/payload.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Box3WithFrame_bosdyn_2fapi_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fpayload_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JointLimits_bosdyn_2fapi_2fpayload_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fpayload_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MomentOfIntertia_bosdyn_2fapi_2fpayload_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fpayload_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Payload_bosdyn_2fapi_2fpayload_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fpayload_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_PayloadMassVolumeProperties_bosdyn_2fapi_2fpayload_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fpayload_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PayloadPreset_bosdyn_2fapi_2fpayload_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SE3Pose_bosdyn_2fapi_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2frobot_5fid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SoftwareVersion_bosdyn_2fapi_2frobot_5fid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec3_bosdyn_2fapi_2fgeometry_2eproto;
namespace bosdyn {
namespace api {
class PayloadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Payload> _instance;
} _Payload_default_instance_;
class PayloadPresetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PayloadPreset> _instance;
} _PayloadPreset_default_instance_;
class PayloadMassVolumePropertiesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PayloadMassVolumeProperties> _instance;
} _PayloadMassVolumeProperties_default_instance_;
class MomentOfIntertiaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MomentOfIntertia> _instance;
} _MomentOfIntertia_default_instance_;
class JointLimitsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JointLimits> _instance;
} _JointLimits_default_instance_;
class ListPayloadsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListPayloadsRequest> _instance;
} _ListPayloadsRequest_default_instance_;
class ListPayloadsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListPayloadsResponse> _instance;
} _ListPayloadsResponse_default_instance_;
}  // namespace api
}  // namespace bosdyn
static void InitDefaultsscc_info_JointLimits_bosdyn_2fapi_2fpayload_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_JointLimits_default_instance_;
    new (ptr) ::bosdyn::api::JointLimits();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::JointLimits::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JointLimits_bosdyn_2fapi_2fpayload_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_JointLimits_bosdyn_2fapi_2fpayload_2eproto}, {}};

static void InitDefaultsscc_info_ListPayloadsRequest_bosdyn_2fapi_2fpayload_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_ListPayloadsRequest_default_instance_;
    new (ptr) ::bosdyn::api::ListPayloadsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::ListPayloadsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListPayloadsRequest_bosdyn_2fapi_2fpayload_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListPayloadsRequest_bosdyn_2fapi_2fpayload_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_ListPayloadsResponse_bosdyn_2fapi_2fpayload_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_ListPayloadsResponse_default_instance_;
    new (ptr) ::bosdyn::api::ListPayloadsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::ListPayloadsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ListPayloadsResponse_bosdyn_2fapi_2fpayload_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ListPayloadsResponse_bosdyn_2fapi_2fpayload_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_Payload_bosdyn_2fapi_2fpayload_2eproto.base,}};

static void InitDefaultsscc_info_MomentOfIntertia_bosdyn_2fapi_2fpayload_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_MomentOfIntertia_default_instance_;
    new (ptr) ::bosdyn::api::MomentOfIntertia();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::MomentOfIntertia::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MomentOfIntertia_bosdyn_2fapi_2fpayload_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MomentOfIntertia_bosdyn_2fapi_2fpayload_2eproto}, {}};

static void InitDefaultsscc_info_Payload_bosdyn_2fapi_2fpayload_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_Payload_default_instance_;
    new (ptr) ::bosdyn::api::Payload();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::Payload::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Payload_bosdyn_2fapi_2fpayload_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Payload_bosdyn_2fapi_2fpayload_2eproto}, {
      &scc_info_SoftwareVersion_bosdyn_2fapi_2frobot_5fid_2eproto.base,
      &scc_info_SE3Pose_bosdyn_2fapi_2fgeometry_2eproto.base,
      &scc_info_PayloadMassVolumeProperties_bosdyn_2fapi_2fpayload_2eproto.base,
      &scc_info_PayloadPreset_bosdyn_2fapi_2fpayload_2eproto.base,}};

static void InitDefaultsscc_info_PayloadMassVolumeProperties_bosdyn_2fapi_2fpayload_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_PayloadMassVolumeProperties_default_instance_;
    new (ptr) ::bosdyn::api::PayloadMassVolumeProperties();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::PayloadMassVolumeProperties::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_PayloadMassVolumeProperties_bosdyn_2fapi_2fpayload_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_PayloadMassVolumeProperties_bosdyn_2fapi_2fpayload_2eproto}, {
      &scc_info_Vec3_bosdyn_2fapi_2fgeometry_2eproto.base,
      &scc_info_MomentOfIntertia_bosdyn_2fapi_2fpayload_2eproto.base,
      &scc_info_Box3WithFrame_bosdyn_2fapi_2fgeometry_2eproto.base,
      &scc_info_JointLimits_bosdyn_2fapi_2fpayload_2eproto.base,}};

static void InitDefaultsscc_info_PayloadPreset_bosdyn_2fapi_2fpayload_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_PayloadPreset_default_instance_;
    new (ptr) ::bosdyn::api::PayloadPreset();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::PayloadPreset::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PayloadPreset_bosdyn_2fapi_2fpayload_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PayloadPreset_bosdyn_2fapi_2fpayload_2eproto}, {
      &scc_info_SE3Pose_bosdyn_2fapi_2fgeometry_2eproto.base,
      &scc_info_PayloadMassVolumeProperties_bosdyn_2fapi_2fpayload_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bosdyn_2fapi_2fpayload_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_bosdyn_2fapi_2fpayload_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bosdyn_2fapi_2fpayload_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bosdyn_2fapi_2fpayload_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Payload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Payload, guid_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Payload, name_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Payload, description_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Payload, label_prefix_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Payload, is_authorized_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Payload, is_enabled_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Payload, is_noncompute_payload_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Payload, version_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Payload, body_tform_payload_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Payload, mount_tform_payload_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Payload, mass_volume_properties_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Payload, preset_configurations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::PayloadPreset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::PayloadPreset, preset_name_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::PayloadPreset, description_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::PayloadPreset, mount_tform_payload_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::PayloadPreset, mass_volume_properties_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::PayloadPreset, label_prefix_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::PayloadMassVolumeProperties, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::PayloadMassVolumeProperties, total_mass_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::PayloadMassVolumeProperties, com_pos_rt_payload_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::PayloadMassVolumeProperties, moi_tensor_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::PayloadMassVolumeProperties, bounding_box_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::PayloadMassVolumeProperties, joint_limits_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::MomentOfIntertia, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::MomentOfIntertia, xx_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::MomentOfIntertia, yy_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::MomentOfIntertia, zz_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::MomentOfIntertia, xy_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::MomentOfIntertia, xz_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::MomentOfIntertia, yz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::JointLimits, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::JointLimits, label_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::JointLimits, hy_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::JointLimits, hx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::ListPayloadsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::ListPayloadsRequest, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::ListPayloadsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::ListPayloadsResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::ListPayloadsResponse, payloads_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::bosdyn::api::Payload)},
  { 17, -1, sizeof(::bosdyn::api::PayloadPreset)},
  { 27, -1, sizeof(::bosdyn::api::PayloadMassVolumeProperties)},
  { 37, -1, sizeof(::bosdyn::api::MomentOfIntertia)},
  { 48, -1, sizeof(::bosdyn::api::JointLimits)},
  { 56, -1, sizeof(::bosdyn::api::ListPayloadsRequest)},
  { 62, -1, sizeof(::bosdyn::api::ListPayloadsResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_Payload_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_PayloadPreset_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_PayloadMassVolumeProperties_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_MomentOfIntertia_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_JointLimits_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_ListPayloadsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_ListPayloadsResponse_default_instance_),
};

const char descriptor_table_protodef_bosdyn_2fapi_2fpayload_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030bosdyn/api/payload.proto\022\nbosdyn.api\032\031"
  "bosdyn/api/geometry.proto\032\027bosdyn/api/he"
  "ader.proto\032\031bosdyn/api/robot_id.proto\"\256\003"
  "\n\007Payload\022\014\n\004GUID\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\023\n"
  "\013description\030\003 \001(\t\022\024\n\014label_prefix\030\t \003(\t"
  "\022\025\n\ris_authorized\030\004 \001(\010\022\022\n\nis_enabled\030\005 "
  "\001(\010\022\035\n\025is_noncompute_payload\030\006 \001(\010\022,\n\007ve"
  "rsion\030\014 \001(\0132\033.bosdyn.api.SoftwareVersion"
  "\022/\n\022body_tform_payload\030\007 \001(\0132\023.bosdyn.ap"
  "i.SE3Pose\0220\n\023mount_tform_payload\030\010 \001(\0132\023"
  ".bosdyn.api.SE3Pose\022G\n\026mass_volume_prope"
  "rties\030\n \001(\0132\'.bosdyn.api.PayloadMassVolu"
  "meProperties\0228\n\025preset_configurations\030\013 "
  "\003(\0132\031.bosdyn.api.PayloadPreset\"\312\001\n\rPaylo"
  "adPreset\022\023\n\013preset_name\030\001 \001(\t\022\023\n\013descrip"
  "tion\030\002 \001(\t\0220\n\023mount_tform_payload\030\003 \001(\0132"
  "\023.bosdyn.api.SE3Pose\022G\n\026mass_volume_prop"
  "erties\030\004 \001(\0132\'.bosdyn.api.PayloadMassVol"
  "umeProperties\022\024\n\014label_prefix\030\005 \003(\t\"\361\001\n\033"
  "PayloadMassVolumeProperties\022\022\n\ntotal_mas"
  "s\030\002 \001(\002\022,\n\022com_pos_rt_payload\030\003 \001(\0132\020.bo"
  "sdyn.api.Vec3\0220\n\nmoi_tensor\030\004 \001(\0132\034.bosd"
  "yn.api.MomentOfIntertia\022/\n\014bounding_box\030"
  "\005 \003(\0132\031.bosdyn.api.Box3WithFrame\022-\n\014join"
  "t_limits\030\006 \003(\0132\027.bosdyn.api.JointLimits\""
  "Z\n\020MomentOfIntertia\022\n\n\002xx\030\002 \001(\002\022\n\n\002yy\030\003 "
  "\001(\002\022\n\n\002zz\030\004 \001(\002\022\n\n\002xy\030\005 \001(\002\022\n\n\002xz\030\006 \001(\002\022"
  "\n\n\002yz\030\007 \001(\002\"4\n\013JointLimits\022\r\n\005label\030\002 \001("
  "\t\022\n\n\002hy\030\003 \003(\002\022\n\n\002hx\030\004 \003(\002\"@\n\023ListPayload"
  "sRequest\022)\n\006header\030\001 \001(\0132\031.bosdyn.api.Re"
  "questHeader\"i\n\024ListPayloadsResponse\022*\n\006h"
  "eader\030\001 \001(\0132\032.bosdyn.api.ResponseHeader\022"
  "%\n\010payloads\030\002 \003(\0132\023.bosdyn.api.PayloadB\016"
  "B\014PayloadProtob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bosdyn_2fapi_2fpayload_2eproto_deps[3] = {
  &::descriptor_table_bosdyn_2fapi_2fgeometry_2eproto,
  &::descriptor_table_bosdyn_2fapi_2fheader_2eproto,
  &::descriptor_table_bosdyn_2fapi_2frobot_5fid_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bosdyn_2fapi_2fpayload_2eproto_sccs[7] = {
  &scc_info_JointLimits_bosdyn_2fapi_2fpayload_2eproto.base,
  &scc_info_ListPayloadsRequest_bosdyn_2fapi_2fpayload_2eproto.base,
  &scc_info_ListPayloadsResponse_bosdyn_2fapi_2fpayload_2eproto.base,
  &scc_info_MomentOfIntertia_bosdyn_2fapi_2fpayload_2eproto.base,
  &scc_info_Payload_bosdyn_2fapi_2fpayload_2eproto.base,
  &scc_info_PayloadMassVolumeProperties_bosdyn_2fapi_2fpayload_2eproto.base,
  &scc_info_PayloadPreset_bosdyn_2fapi_2fpayload_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bosdyn_2fapi_2fpayload_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fpayload_2eproto = {
  false, false, descriptor_table_protodef_bosdyn_2fapi_2fpayload_2eproto, "bosdyn/api/payload.proto", 1342,
  &descriptor_table_bosdyn_2fapi_2fpayload_2eproto_once, descriptor_table_bosdyn_2fapi_2fpayload_2eproto_sccs, descriptor_table_bosdyn_2fapi_2fpayload_2eproto_deps, 7, 3,
  schemas, file_default_instances, TableStruct_bosdyn_2fapi_2fpayload_2eproto::offsets,
  file_level_metadata_bosdyn_2fapi_2fpayload_2eproto, 7, file_level_enum_descriptors_bosdyn_2fapi_2fpayload_2eproto, file_level_service_descriptors_bosdyn_2fapi_2fpayload_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bosdyn_2fapi_2fpayload_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bosdyn_2fapi_2fpayload_2eproto)), true);
namespace bosdyn {
namespace api {

// ===================================================================

void Payload::InitAsDefaultInstance() {
  ::bosdyn::api::_Payload_default_instance_._instance.get_mutable()->version_ = const_cast< ::bosdyn::api::SoftwareVersion*>(
      ::bosdyn::api::SoftwareVersion::internal_default_instance());
  ::bosdyn::api::_Payload_default_instance_._instance.get_mutable()->body_tform_payload_ = const_cast< ::bosdyn::api::SE3Pose*>(
      ::bosdyn::api::SE3Pose::internal_default_instance());
  ::bosdyn::api::_Payload_default_instance_._instance.get_mutable()->mount_tform_payload_ = const_cast< ::bosdyn::api::SE3Pose*>(
      ::bosdyn::api::SE3Pose::internal_default_instance());
  ::bosdyn::api::_Payload_default_instance_._instance.get_mutable()->mass_volume_properties_ = const_cast< ::bosdyn::api::PayloadMassVolumeProperties*>(
      ::bosdyn::api::PayloadMassVolumeProperties::internal_default_instance());
}
class Payload::_Internal {
 public:
  static const ::bosdyn::api::SoftwareVersion& version(const Payload* msg);
  static const ::bosdyn::api::SE3Pose& body_tform_payload(const Payload* msg);
  static const ::bosdyn::api::SE3Pose& mount_tform_payload(const Payload* msg);
  static const ::bosdyn::api::PayloadMassVolumeProperties& mass_volume_properties(const Payload* msg);
};

const ::bosdyn::api::SoftwareVersion&
Payload::_Internal::version(const Payload* msg) {
  return *msg->version_;
}
const ::bosdyn::api::SE3Pose&
Payload::_Internal::body_tform_payload(const Payload* msg) {
  return *msg->body_tform_payload_;
}
const ::bosdyn::api::SE3Pose&
Payload::_Internal::mount_tform_payload(const Payload* msg) {
  return *msg->mount_tform_payload_;
}
const ::bosdyn::api::PayloadMassVolumeProperties&
Payload::_Internal::mass_volume_properties(const Payload* msg) {
  return *msg->mass_volume_properties_;
}
void Payload::clear_version() {
  if (GetArena() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
}
void Payload::clear_body_tform_payload() {
  if (GetArena() == nullptr && body_tform_payload_ != nullptr) {
    delete body_tform_payload_;
  }
  body_tform_payload_ = nullptr;
}
void Payload::clear_mount_tform_payload() {
  if (GetArena() == nullptr && mount_tform_payload_ != nullptr) {
    delete mount_tform_payload_;
  }
  mount_tform_payload_ = nullptr;
}
Payload::Payload(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  label_prefix_(arena),
  preset_configurations_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.Payload)
}
Payload::Payload(const Payload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      label_prefix_(from.label_prefix_),
      preset_configurations_(from.preset_configurations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  guid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_guid().empty()) {
    guid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_guid(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_description(),
      GetArena());
  }
  if (from._internal_has_body_tform_payload()) {
    body_tform_payload_ = new ::bosdyn::api::SE3Pose(*from.body_tform_payload_);
  } else {
    body_tform_payload_ = nullptr;
  }
  if (from._internal_has_mount_tform_payload()) {
    mount_tform_payload_ = new ::bosdyn::api::SE3Pose(*from.mount_tform_payload_);
  } else {
    mount_tform_payload_ = nullptr;
  }
  if (from._internal_has_mass_volume_properties()) {
    mass_volume_properties_ = new ::bosdyn::api::PayloadMassVolumeProperties(*from.mass_volume_properties_);
  } else {
    mass_volume_properties_ = nullptr;
  }
  if (from._internal_has_version()) {
    version_ = new ::bosdyn::api::SoftwareVersion(*from.version_);
  } else {
    version_ = nullptr;
  }
  ::memcpy(&is_authorized_, &from.is_authorized_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_noncompute_payload_) -
    reinterpret_cast<char*>(&is_authorized_)) + sizeof(is_noncompute_payload_));
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.Payload)
}

void Payload::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Payload_bosdyn_2fapi_2fpayload_2eproto.base);
  guid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&body_tform_payload_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_noncompute_payload_) -
      reinterpret_cast<char*>(&body_tform_payload_)) + sizeof(is_noncompute_payload_));
}

Payload::~Payload() {
  // @@protoc_insertion_point(destructor:bosdyn.api.Payload)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Payload::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  guid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete body_tform_payload_;
  if (this != internal_default_instance()) delete mount_tform_payload_;
  if (this != internal_default_instance()) delete mass_volume_properties_;
  if (this != internal_default_instance()) delete version_;
}

void Payload::ArenaDtor(void* object) {
  Payload* _this = reinterpret_cast< Payload* >(object);
  (void)_this;
}
void Payload::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Payload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Payload& Payload::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Payload_bosdyn_2fapi_2fpayload_2eproto.base);
  return *internal_default_instance();
}


void Payload::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.Payload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  label_prefix_.Clear();
  preset_configurations_.Clear();
  guid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && body_tform_payload_ != nullptr) {
    delete body_tform_payload_;
  }
  body_tform_payload_ = nullptr;
  if (GetArena() == nullptr && mount_tform_payload_ != nullptr) {
    delete mount_tform_payload_;
  }
  mount_tform_payload_ = nullptr;
  if (GetArena() == nullptr && mass_volume_properties_ != nullptr) {
    delete mass_volume_properties_;
  }
  mass_volume_properties_ = nullptr;
  if (GetArena() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
  ::memset(&is_authorized_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_noncompute_payload_) -
      reinterpret_cast<char*>(&is_authorized_)) + sizeof(is_noncompute_payload_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Payload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string GUID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_guid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.Payload.GUID"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.Payload.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.Payload.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_authorized = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          is_authorized_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_enabled = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          is_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_noncompute_payload = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          is_noncompute_payload_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.SE3Pose body_tform_payload = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_body_tform_payload(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.SE3Pose mount_tform_payload = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_mount_tform_payload(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string label_prefix = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_label_prefix();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.Payload.label_prefix"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.PayloadMassVolumeProperties mass_volume_properties = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_mass_volume_properties(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bosdyn.api.PayloadPreset preset_configurations = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_preset_configurations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.SoftwareVersion version = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_version(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Payload::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.Payload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string GUID = 1;
  if (this->guid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_guid().data(), static_cast<int>(this->_internal_guid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.Payload.GUID");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_guid(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.Payload.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.Payload.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // bool is_authorized = 4;
  if (this->is_authorized() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_authorized(), target);
  }

  // bool is_enabled = 5;
  if (this->is_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_enabled(), target);
  }

  // bool is_noncompute_payload = 6;
  if (this->is_noncompute_payload() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_noncompute_payload(), target);
  }

  // .bosdyn.api.SE3Pose body_tform_payload = 7;
  if (this->has_body_tform_payload()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::body_tform_payload(this), target, stream);
  }

  // .bosdyn.api.SE3Pose mount_tform_payload = 8;
  if (this->has_mount_tform_payload()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::mount_tform_payload(this), target, stream);
  }

  // repeated string label_prefix = 9;
  for (int i = 0, n = this->_internal_label_prefix_size(); i < n; i++) {
    const auto& s = this->_internal_label_prefix(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.Payload.label_prefix");
    target = stream->WriteString(9, s, target);
  }

  // .bosdyn.api.PayloadMassVolumeProperties mass_volume_properties = 10;
  if (this->has_mass_volume_properties()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::mass_volume_properties(this), target, stream);
  }

  // repeated .bosdyn.api.PayloadPreset preset_configurations = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_preset_configurations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_preset_configurations(i), target, stream);
  }

  // .bosdyn.api.SoftwareVersion version = 12;
  if (this->has_version()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::version(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.Payload)
  return target;
}

size_t Payload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.Payload)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string label_prefix = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(label_prefix_.size());
  for (int i = 0, n = label_prefix_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      label_prefix_.Get(i));
  }

  // repeated .bosdyn.api.PayloadPreset preset_configurations = 11;
  total_size += 1UL * this->_internal_preset_configurations_size();
  for (const auto& msg : this->preset_configurations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string GUID = 1;
  if (this->guid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_guid());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 3;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .bosdyn.api.SE3Pose body_tform_payload = 7;
  if (this->has_body_tform_payload()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *body_tform_payload_);
  }

  // .bosdyn.api.SE3Pose mount_tform_payload = 8;
  if (this->has_mount_tform_payload()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mount_tform_payload_);
  }

  // .bosdyn.api.PayloadMassVolumeProperties mass_volume_properties = 10;
  if (this->has_mass_volume_properties()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mass_volume_properties_);
  }

  // .bosdyn.api.SoftwareVersion version = 12;
  if (this->has_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *version_);
  }

  // bool is_authorized = 4;
  if (this->is_authorized() != 0) {
    total_size += 1 + 1;
  }

  // bool is_enabled = 5;
  if (this->is_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool is_noncompute_payload = 6;
  if (this->is_noncompute_payload() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Payload::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.Payload)
  GOOGLE_DCHECK_NE(&from, this);
  const Payload* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Payload>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.Payload)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.Payload)
    MergeFrom(*source);
  }
}

void Payload::MergeFrom(const Payload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.Payload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  label_prefix_.MergeFrom(from.label_prefix_);
  preset_configurations_.MergeFrom(from.preset_configurations_);
  if (from.guid().size() > 0) {
    _internal_set_guid(from._internal_guid());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.has_body_tform_payload()) {
    _internal_mutable_body_tform_payload()->::bosdyn::api::SE3Pose::MergeFrom(from._internal_body_tform_payload());
  }
  if (from.has_mount_tform_payload()) {
    _internal_mutable_mount_tform_payload()->::bosdyn::api::SE3Pose::MergeFrom(from._internal_mount_tform_payload());
  }
  if (from.has_mass_volume_properties()) {
    _internal_mutable_mass_volume_properties()->::bosdyn::api::PayloadMassVolumeProperties::MergeFrom(from._internal_mass_volume_properties());
  }
  if (from.has_version()) {
    _internal_mutable_version()->::bosdyn::api::SoftwareVersion::MergeFrom(from._internal_version());
  }
  if (from.is_authorized() != 0) {
    _internal_set_is_authorized(from._internal_is_authorized());
  }
  if (from.is_enabled() != 0) {
    _internal_set_is_enabled(from._internal_is_enabled());
  }
  if (from.is_noncompute_payload() != 0) {
    _internal_set_is_noncompute_payload(from._internal_is_noncompute_payload());
  }
}

void Payload::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.Payload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Payload::CopyFrom(const Payload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.Payload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Payload::IsInitialized() const {
  return true;
}

void Payload::InternalSwap(Payload* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  label_prefix_.InternalSwap(&other->label_prefix_);
  preset_configurations_.InternalSwap(&other->preset_configurations_);
  guid_.Swap(&other->guid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Payload, is_noncompute_payload_)
      + sizeof(Payload::is_noncompute_payload_)
      - PROTOBUF_FIELD_OFFSET(Payload, body_tform_payload_)>(
          reinterpret_cast<char*>(&body_tform_payload_),
          reinterpret_cast<char*>(&other->body_tform_payload_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Payload::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PayloadPreset::InitAsDefaultInstance() {
  ::bosdyn::api::_PayloadPreset_default_instance_._instance.get_mutable()->mount_tform_payload_ = const_cast< ::bosdyn::api::SE3Pose*>(
      ::bosdyn::api::SE3Pose::internal_default_instance());
  ::bosdyn::api::_PayloadPreset_default_instance_._instance.get_mutable()->mass_volume_properties_ = const_cast< ::bosdyn::api::PayloadMassVolumeProperties*>(
      ::bosdyn::api::PayloadMassVolumeProperties::internal_default_instance());
}
class PayloadPreset::_Internal {
 public:
  static const ::bosdyn::api::SE3Pose& mount_tform_payload(const PayloadPreset* msg);
  static const ::bosdyn::api::PayloadMassVolumeProperties& mass_volume_properties(const PayloadPreset* msg);
};

const ::bosdyn::api::SE3Pose&
PayloadPreset::_Internal::mount_tform_payload(const PayloadPreset* msg) {
  return *msg->mount_tform_payload_;
}
const ::bosdyn::api::PayloadMassVolumeProperties&
PayloadPreset::_Internal::mass_volume_properties(const PayloadPreset* msg) {
  return *msg->mass_volume_properties_;
}
void PayloadPreset::clear_mount_tform_payload() {
  if (GetArena() == nullptr && mount_tform_payload_ != nullptr) {
    delete mount_tform_payload_;
  }
  mount_tform_payload_ = nullptr;
}
PayloadPreset::PayloadPreset(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  label_prefix_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.PayloadPreset)
}
PayloadPreset::PayloadPreset(const PayloadPreset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      label_prefix_(from.label_prefix_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  preset_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_preset_name().empty()) {
    preset_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_preset_name(),
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_description(),
      GetArena());
  }
  if (from._internal_has_mount_tform_payload()) {
    mount_tform_payload_ = new ::bosdyn::api::SE3Pose(*from.mount_tform_payload_);
  } else {
    mount_tform_payload_ = nullptr;
  }
  if (from._internal_has_mass_volume_properties()) {
    mass_volume_properties_ = new ::bosdyn::api::PayloadMassVolumeProperties(*from.mass_volume_properties_);
  } else {
    mass_volume_properties_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.PayloadPreset)
}

void PayloadPreset::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PayloadPreset_bosdyn_2fapi_2fpayload_2eproto.base);
  preset_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&mount_tform_payload_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mass_volume_properties_) -
      reinterpret_cast<char*>(&mount_tform_payload_)) + sizeof(mass_volume_properties_));
}

PayloadPreset::~PayloadPreset() {
  // @@protoc_insertion_point(destructor:bosdyn.api.PayloadPreset)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PayloadPreset::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  preset_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete mount_tform_payload_;
  if (this != internal_default_instance()) delete mass_volume_properties_;
}

void PayloadPreset::ArenaDtor(void* object) {
  PayloadPreset* _this = reinterpret_cast< PayloadPreset* >(object);
  (void)_this;
}
void PayloadPreset::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PayloadPreset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PayloadPreset& PayloadPreset::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PayloadPreset_bosdyn_2fapi_2fpayload_2eproto.base);
  return *internal_default_instance();
}


void PayloadPreset::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.PayloadPreset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  label_prefix_.Clear();
  preset_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && mount_tform_payload_ != nullptr) {
    delete mount_tform_payload_;
  }
  mount_tform_payload_ = nullptr;
  if (GetArena() == nullptr && mass_volume_properties_ != nullptr) {
    delete mass_volume_properties_;
  }
  mass_volume_properties_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PayloadPreset::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string preset_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_preset_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.PayloadPreset.preset_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.PayloadPreset.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.SE3Pose mount_tform_payload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mount_tform_payload(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.PayloadMassVolumeProperties mass_volume_properties = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_mass_volume_properties(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string label_prefix = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_label_prefix();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.PayloadPreset.label_prefix"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PayloadPreset::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.PayloadPreset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string preset_name = 1;
  if (this->preset_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_preset_name().data(), static_cast<int>(this->_internal_preset_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.PayloadPreset.preset_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_preset_name(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.PayloadPreset.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // .bosdyn.api.SE3Pose mount_tform_payload = 3;
  if (this->has_mount_tform_payload()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::mount_tform_payload(this), target, stream);
  }

  // .bosdyn.api.PayloadMassVolumeProperties mass_volume_properties = 4;
  if (this->has_mass_volume_properties()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::mass_volume_properties(this), target, stream);
  }

  // repeated string label_prefix = 5;
  for (int i = 0, n = this->_internal_label_prefix_size(); i < n; i++) {
    const auto& s = this->_internal_label_prefix(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.PayloadPreset.label_prefix");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.PayloadPreset)
  return target;
}

size_t PayloadPreset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.PayloadPreset)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string label_prefix = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(label_prefix_.size());
  for (int i = 0, n = label_prefix_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      label_prefix_.Get(i));
  }

  // string preset_name = 1;
  if (this->preset_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_preset_name());
  }

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .bosdyn.api.SE3Pose mount_tform_payload = 3;
  if (this->has_mount_tform_payload()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mount_tform_payload_);
  }

  // .bosdyn.api.PayloadMassVolumeProperties mass_volume_properties = 4;
  if (this->has_mass_volume_properties()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mass_volume_properties_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PayloadPreset::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.PayloadPreset)
  GOOGLE_DCHECK_NE(&from, this);
  const PayloadPreset* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PayloadPreset>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.PayloadPreset)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.PayloadPreset)
    MergeFrom(*source);
  }
}

void PayloadPreset::MergeFrom(const PayloadPreset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.PayloadPreset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  label_prefix_.MergeFrom(from.label_prefix_);
  if (from.preset_name().size() > 0) {
    _internal_set_preset_name(from._internal_preset_name());
  }
  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.has_mount_tform_payload()) {
    _internal_mutable_mount_tform_payload()->::bosdyn::api::SE3Pose::MergeFrom(from._internal_mount_tform_payload());
  }
  if (from.has_mass_volume_properties()) {
    _internal_mutable_mass_volume_properties()->::bosdyn::api::PayloadMassVolumeProperties::MergeFrom(from._internal_mass_volume_properties());
  }
}

void PayloadPreset::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.PayloadPreset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PayloadPreset::CopyFrom(const PayloadPreset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.PayloadPreset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PayloadPreset::IsInitialized() const {
  return true;
}

void PayloadPreset::InternalSwap(PayloadPreset* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  label_prefix_.InternalSwap(&other->label_prefix_);
  preset_name_.Swap(&other->preset_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PayloadPreset, mass_volume_properties_)
      + sizeof(PayloadPreset::mass_volume_properties_)
      - PROTOBUF_FIELD_OFFSET(PayloadPreset, mount_tform_payload_)>(
          reinterpret_cast<char*>(&mount_tform_payload_),
          reinterpret_cast<char*>(&other->mount_tform_payload_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PayloadPreset::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PayloadMassVolumeProperties::InitAsDefaultInstance() {
  ::bosdyn::api::_PayloadMassVolumeProperties_default_instance_._instance.get_mutable()->com_pos_rt_payload_ = const_cast< ::bosdyn::api::Vec3*>(
      ::bosdyn::api::Vec3::internal_default_instance());
  ::bosdyn::api::_PayloadMassVolumeProperties_default_instance_._instance.get_mutable()->moi_tensor_ = const_cast< ::bosdyn::api::MomentOfIntertia*>(
      ::bosdyn::api::MomentOfIntertia::internal_default_instance());
}
class PayloadMassVolumeProperties::_Internal {
 public:
  static const ::bosdyn::api::Vec3& com_pos_rt_payload(const PayloadMassVolumeProperties* msg);
  static const ::bosdyn::api::MomentOfIntertia& moi_tensor(const PayloadMassVolumeProperties* msg);
};

const ::bosdyn::api::Vec3&
PayloadMassVolumeProperties::_Internal::com_pos_rt_payload(const PayloadMassVolumeProperties* msg) {
  return *msg->com_pos_rt_payload_;
}
const ::bosdyn::api::MomentOfIntertia&
PayloadMassVolumeProperties::_Internal::moi_tensor(const PayloadMassVolumeProperties* msg) {
  return *msg->moi_tensor_;
}
void PayloadMassVolumeProperties::clear_com_pos_rt_payload() {
  if (GetArena() == nullptr && com_pos_rt_payload_ != nullptr) {
    delete com_pos_rt_payload_;
  }
  com_pos_rt_payload_ = nullptr;
}
void PayloadMassVolumeProperties::clear_bounding_box() {
  bounding_box_.Clear();
}
PayloadMassVolumeProperties::PayloadMassVolumeProperties(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bounding_box_(arena),
  joint_limits_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.PayloadMassVolumeProperties)
}
PayloadMassVolumeProperties::PayloadMassVolumeProperties(const PayloadMassVolumeProperties& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bounding_box_(from.bounding_box_),
      joint_limits_(from.joint_limits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_com_pos_rt_payload()) {
    com_pos_rt_payload_ = new ::bosdyn::api::Vec3(*from.com_pos_rt_payload_);
  } else {
    com_pos_rt_payload_ = nullptr;
  }
  if (from._internal_has_moi_tensor()) {
    moi_tensor_ = new ::bosdyn::api::MomentOfIntertia(*from.moi_tensor_);
  } else {
    moi_tensor_ = nullptr;
  }
  total_mass_ = from.total_mass_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.PayloadMassVolumeProperties)
}

void PayloadMassVolumeProperties::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PayloadMassVolumeProperties_bosdyn_2fapi_2fpayload_2eproto.base);
  ::memset(&com_pos_rt_payload_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_mass_) -
      reinterpret_cast<char*>(&com_pos_rt_payload_)) + sizeof(total_mass_));
}

PayloadMassVolumeProperties::~PayloadMassVolumeProperties() {
  // @@protoc_insertion_point(destructor:bosdyn.api.PayloadMassVolumeProperties)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PayloadMassVolumeProperties::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete com_pos_rt_payload_;
  if (this != internal_default_instance()) delete moi_tensor_;
}

void PayloadMassVolumeProperties::ArenaDtor(void* object) {
  PayloadMassVolumeProperties* _this = reinterpret_cast< PayloadMassVolumeProperties* >(object);
  (void)_this;
}
void PayloadMassVolumeProperties::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PayloadMassVolumeProperties::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PayloadMassVolumeProperties& PayloadMassVolumeProperties::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PayloadMassVolumeProperties_bosdyn_2fapi_2fpayload_2eproto.base);
  return *internal_default_instance();
}


void PayloadMassVolumeProperties::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.PayloadMassVolumeProperties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bounding_box_.Clear();
  joint_limits_.Clear();
  if (GetArena() == nullptr && com_pos_rt_payload_ != nullptr) {
    delete com_pos_rt_payload_;
  }
  com_pos_rt_payload_ = nullptr;
  if (GetArena() == nullptr && moi_tensor_ != nullptr) {
    delete moi_tensor_;
  }
  moi_tensor_ = nullptr;
  total_mass_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PayloadMassVolumeProperties::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float total_mass = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          total_mass_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.Vec3 com_pos_rt_payload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_com_pos_rt_payload(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.MomentOfIntertia moi_tensor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_moi_tensor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bosdyn.api.Box3WithFrame bounding_box = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bounding_box(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .bosdyn.api.JointLimits joint_limits = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_joint_limits(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PayloadMassVolumeProperties::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.PayloadMassVolumeProperties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float total_mass = 2;
  if (!(this->total_mass() <= 0 && this->total_mass() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_total_mass(), target);
  }

  // .bosdyn.api.Vec3 com_pos_rt_payload = 3;
  if (this->has_com_pos_rt_payload()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::com_pos_rt_payload(this), target, stream);
  }

  // .bosdyn.api.MomentOfIntertia moi_tensor = 4;
  if (this->has_moi_tensor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::moi_tensor(this), target, stream);
  }

  // repeated .bosdyn.api.Box3WithFrame bounding_box = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bounding_box_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_bounding_box(i), target, stream);
  }

  // repeated .bosdyn.api.JointLimits joint_limits = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_joint_limits_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_joint_limits(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.PayloadMassVolumeProperties)
  return target;
}

size_t PayloadMassVolumeProperties::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.PayloadMassVolumeProperties)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bosdyn.api.Box3WithFrame bounding_box = 5;
  total_size += 1UL * this->_internal_bounding_box_size();
  for (const auto& msg : this->bounding_box_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .bosdyn.api.JointLimits joint_limits = 6;
  total_size += 1UL * this->_internal_joint_limits_size();
  for (const auto& msg : this->joint_limits_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .bosdyn.api.Vec3 com_pos_rt_payload = 3;
  if (this->has_com_pos_rt_payload()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *com_pos_rt_payload_);
  }

  // .bosdyn.api.MomentOfIntertia moi_tensor = 4;
  if (this->has_moi_tensor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *moi_tensor_);
  }

  // float total_mass = 2;
  if (!(this->total_mass() <= 0 && this->total_mass() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PayloadMassVolumeProperties::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.PayloadMassVolumeProperties)
  GOOGLE_DCHECK_NE(&from, this);
  const PayloadMassVolumeProperties* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PayloadMassVolumeProperties>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.PayloadMassVolumeProperties)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.PayloadMassVolumeProperties)
    MergeFrom(*source);
  }
}

void PayloadMassVolumeProperties::MergeFrom(const PayloadMassVolumeProperties& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.PayloadMassVolumeProperties)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bounding_box_.MergeFrom(from.bounding_box_);
  joint_limits_.MergeFrom(from.joint_limits_);
  if (from.has_com_pos_rt_payload()) {
    _internal_mutable_com_pos_rt_payload()->::bosdyn::api::Vec3::MergeFrom(from._internal_com_pos_rt_payload());
  }
  if (from.has_moi_tensor()) {
    _internal_mutable_moi_tensor()->::bosdyn::api::MomentOfIntertia::MergeFrom(from._internal_moi_tensor());
  }
  if (!(from.total_mass() <= 0 && from.total_mass() >= 0)) {
    _internal_set_total_mass(from._internal_total_mass());
  }
}

void PayloadMassVolumeProperties::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.PayloadMassVolumeProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PayloadMassVolumeProperties::CopyFrom(const PayloadMassVolumeProperties& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.PayloadMassVolumeProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PayloadMassVolumeProperties::IsInitialized() const {
  return true;
}

void PayloadMassVolumeProperties::InternalSwap(PayloadMassVolumeProperties* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  bounding_box_.InternalSwap(&other->bounding_box_);
  joint_limits_.InternalSwap(&other->joint_limits_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PayloadMassVolumeProperties, total_mass_)
      + sizeof(PayloadMassVolumeProperties::total_mass_)
      - PROTOBUF_FIELD_OFFSET(PayloadMassVolumeProperties, com_pos_rt_payload_)>(
          reinterpret_cast<char*>(&com_pos_rt_payload_),
          reinterpret_cast<char*>(&other->com_pos_rt_payload_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PayloadMassVolumeProperties::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MomentOfIntertia::InitAsDefaultInstance() {
}
class MomentOfIntertia::_Internal {
 public:
};

MomentOfIntertia::MomentOfIntertia(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.MomentOfIntertia)
}
MomentOfIntertia::MomentOfIntertia(const MomentOfIntertia& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&xx_, &from.xx_,
    static_cast<size_t>(reinterpret_cast<char*>(&yz_) -
    reinterpret_cast<char*>(&xx_)) + sizeof(yz_));
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.MomentOfIntertia)
}

void MomentOfIntertia::SharedCtor() {
  ::memset(&xx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yz_) -
      reinterpret_cast<char*>(&xx_)) + sizeof(yz_));
}

MomentOfIntertia::~MomentOfIntertia() {
  // @@protoc_insertion_point(destructor:bosdyn.api.MomentOfIntertia)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MomentOfIntertia::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MomentOfIntertia::ArenaDtor(void* object) {
  MomentOfIntertia* _this = reinterpret_cast< MomentOfIntertia* >(object);
  (void)_this;
}
void MomentOfIntertia::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MomentOfIntertia::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MomentOfIntertia& MomentOfIntertia::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MomentOfIntertia_bosdyn_2fapi_2fpayload_2eproto.base);
  return *internal_default_instance();
}


void MomentOfIntertia::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.MomentOfIntertia)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&xx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yz_) -
      reinterpret_cast<char*>(&xx_)) + sizeof(yz_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MomentOfIntertia::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float xx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          xx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float yy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          yy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float zz = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          zz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float xy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          xy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float xz = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          xz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float yz = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          yz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MomentOfIntertia::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.MomentOfIntertia)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float xx = 2;
  if (!(this->xx() <= 0 && this->xx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_xx(), target);
  }

  // float yy = 3;
  if (!(this->yy() <= 0 && this->yy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_yy(), target);
  }

  // float zz = 4;
  if (!(this->zz() <= 0 && this->zz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_zz(), target);
  }

  // float xy = 5;
  if (!(this->xy() <= 0 && this->xy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_xy(), target);
  }

  // float xz = 6;
  if (!(this->xz() <= 0 && this->xz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_xz(), target);
  }

  // float yz = 7;
  if (!(this->yz() <= 0 && this->yz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_yz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.MomentOfIntertia)
  return target;
}

size_t MomentOfIntertia::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.MomentOfIntertia)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float xx = 2;
  if (!(this->xx() <= 0 && this->xx() >= 0)) {
    total_size += 1 + 4;
  }

  // float yy = 3;
  if (!(this->yy() <= 0 && this->yy() >= 0)) {
    total_size += 1 + 4;
  }

  // float zz = 4;
  if (!(this->zz() <= 0 && this->zz() >= 0)) {
    total_size += 1 + 4;
  }

  // float xy = 5;
  if (!(this->xy() <= 0 && this->xy() >= 0)) {
    total_size += 1 + 4;
  }

  // float xz = 6;
  if (!(this->xz() <= 0 && this->xz() >= 0)) {
    total_size += 1 + 4;
  }

  // float yz = 7;
  if (!(this->yz() <= 0 && this->yz() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MomentOfIntertia::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.MomentOfIntertia)
  GOOGLE_DCHECK_NE(&from, this);
  const MomentOfIntertia* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MomentOfIntertia>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.MomentOfIntertia)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.MomentOfIntertia)
    MergeFrom(*source);
  }
}

void MomentOfIntertia::MergeFrom(const MomentOfIntertia& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.MomentOfIntertia)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.xx() <= 0 && from.xx() >= 0)) {
    _internal_set_xx(from._internal_xx());
  }
  if (!(from.yy() <= 0 && from.yy() >= 0)) {
    _internal_set_yy(from._internal_yy());
  }
  if (!(from.zz() <= 0 && from.zz() >= 0)) {
    _internal_set_zz(from._internal_zz());
  }
  if (!(from.xy() <= 0 && from.xy() >= 0)) {
    _internal_set_xy(from._internal_xy());
  }
  if (!(from.xz() <= 0 && from.xz() >= 0)) {
    _internal_set_xz(from._internal_xz());
  }
  if (!(from.yz() <= 0 && from.yz() >= 0)) {
    _internal_set_yz(from._internal_yz());
  }
}

void MomentOfIntertia::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.MomentOfIntertia)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MomentOfIntertia::CopyFrom(const MomentOfIntertia& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.MomentOfIntertia)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MomentOfIntertia::IsInitialized() const {
  return true;
}

void MomentOfIntertia::InternalSwap(MomentOfIntertia* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MomentOfIntertia, yz_)
      + sizeof(MomentOfIntertia::yz_)
      - PROTOBUF_FIELD_OFFSET(MomentOfIntertia, xx_)>(
          reinterpret_cast<char*>(&xx_),
          reinterpret_cast<char*>(&other->xx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MomentOfIntertia::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JointLimits::InitAsDefaultInstance() {
}
class JointLimits::_Internal {
 public:
};

JointLimits::JointLimits(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  hy_(arena),
  hx_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.JointLimits)
}
JointLimits::JointLimits(const JointLimits& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      hy_(from.hy_),
      hx_(from.hx_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_label().empty()) {
    label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_label(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.JointLimits)
}

void JointLimits::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JointLimits_bosdyn_2fapi_2fpayload_2eproto.base);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

JointLimits::~JointLimits() {
  // @@protoc_insertion_point(destructor:bosdyn.api.JointLimits)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JointLimits::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void JointLimits::ArenaDtor(void* object) {
  JointLimits* _this = reinterpret_cast< JointLimits* >(object);
  (void)_this;
}
void JointLimits::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JointLimits::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JointLimits& JointLimits::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JointLimits_bosdyn_2fapi_2fpayload_2eproto.base);
  return *internal_default_instance();
}


void JointLimits::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.JointLimits)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hy_.Clear();
  hx_.Clear();
  label_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JointLimits::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string label = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.JointLimits.label"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float hy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_hy(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          _internal_add_hy(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float hx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_hx(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          _internal_add_hx(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JointLimits::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.JointLimits)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string label = 2;
  if (this->label().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.JointLimits.label");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_label(), target);
  }

  // repeated float hy = 3;
  if (this->_internal_hy_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_hy(), target);
  }

  // repeated float hx = 4;
  if (this->_internal_hx_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_hx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.JointLimits)
  return target;
}

size_t JointLimits::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.JointLimits)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float hy = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_hy_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _hy_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float hx = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_hx_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _hx_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string label = 2;
  if (this->label().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JointLimits::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.JointLimits)
  GOOGLE_DCHECK_NE(&from, this);
  const JointLimits* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JointLimits>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.JointLimits)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.JointLimits)
    MergeFrom(*source);
  }
}

void JointLimits::MergeFrom(const JointLimits& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.JointLimits)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hy_.MergeFrom(from.hy_);
  hx_.MergeFrom(from.hx_);
  if (from.label().size() > 0) {
    _internal_set_label(from._internal_label());
  }
}

void JointLimits::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.JointLimits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JointLimits::CopyFrom(const JointLimits& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.JointLimits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointLimits::IsInitialized() const {
  return true;
}

void JointLimits::InternalSwap(JointLimits* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hy_.InternalSwap(&other->hy_);
  hx_.InternalSwap(&other->hx_);
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata JointLimits::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListPayloadsRequest::InitAsDefaultInstance() {
  ::bosdyn::api::_ListPayloadsRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
}
class ListPayloadsRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const ListPayloadsRequest* msg);
};

const ::bosdyn::api::RequestHeader&
ListPayloadsRequest::_Internal::header(const ListPayloadsRequest* msg) {
  return *msg->header_;
}
void ListPayloadsRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
ListPayloadsRequest::ListPayloadsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.ListPayloadsRequest)
}
ListPayloadsRequest::ListPayloadsRequest(const ListPayloadsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.ListPayloadsRequest)
}

void ListPayloadsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListPayloadsRequest_bosdyn_2fapi_2fpayload_2eproto.base);
  header_ = nullptr;
}

ListPayloadsRequest::~ListPayloadsRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.ListPayloadsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListPayloadsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void ListPayloadsRequest::ArenaDtor(void* object) {
  ListPayloadsRequest* _this = reinterpret_cast< ListPayloadsRequest* >(object);
  (void)_this;
}
void ListPayloadsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListPayloadsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListPayloadsRequest& ListPayloadsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListPayloadsRequest_bosdyn_2fapi_2fpayload_2eproto.base);
  return *internal_default_instance();
}


void ListPayloadsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.ListPayloadsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListPayloadsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListPayloadsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.ListPayloadsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.ListPayloadsRequest)
  return target;
}

size_t ListPayloadsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.ListPayloadsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListPayloadsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.ListPayloadsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListPayloadsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListPayloadsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.ListPayloadsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.ListPayloadsRequest)
    MergeFrom(*source);
  }
}

void ListPayloadsRequest::MergeFrom(const ListPayloadsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.ListPayloadsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
}

void ListPayloadsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.ListPayloadsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListPayloadsRequest::CopyFrom(const ListPayloadsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.ListPayloadsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPayloadsRequest::IsInitialized() const {
  return true;
}

void ListPayloadsRequest::InternalSwap(ListPayloadsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPayloadsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListPayloadsResponse::InitAsDefaultInstance() {
  ::bosdyn::api::_ListPayloadsResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
}
class ListPayloadsResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const ListPayloadsResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
ListPayloadsResponse::_Internal::header(const ListPayloadsResponse* msg) {
  return *msg->header_;
}
void ListPayloadsResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
ListPayloadsResponse::ListPayloadsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  payloads_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.ListPayloadsResponse)
}
ListPayloadsResponse::ListPayloadsResponse(const ListPayloadsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      payloads_(from.payloads_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.ListPayloadsResponse)
}

void ListPayloadsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListPayloadsResponse_bosdyn_2fapi_2fpayload_2eproto.base);
  header_ = nullptr;
}

ListPayloadsResponse::~ListPayloadsResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.ListPayloadsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListPayloadsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void ListPayloadsResponse::ArenaDtor(void* object) {
  ListPayloadsResponse* _this = reinterpret_cast< ListPayloadsResponse* >(object);
  (void)_this;
}
void ListPayloadsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListPayloadsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListPayloadsResponse& ListPayloadsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListPayloadsResponse_bosdyn_2fapi_2fpayload_2eproto.base);
  return *internal_default_instance();
}


void ListPayloadsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.ListPayloadsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payloads_.Clear();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListPayloadsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bosdyn.api.Payload payloads = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_payloads(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListPayloadsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.ListPayloadsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .bosdyn.api.Payload payloads = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_payloads_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_payloads(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.ListPayloadsResponse)
  return target;
}

size_t ListPayloadsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.ListPayloadsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bosdyn.api.Payload payloads = 2;
  total_size += 1UL * this->_internal_payloads_size();
  for (const auto& msg : this->payloads_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListPayloadsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.ListPayloadsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListPayloadsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListPayloadsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.ListPayloadsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.ListPayloadsResponse)
    MergeFrom(*source);
  }
}

void ListPayloadsResponse::MergeFrom(const ListPayloadsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.ListPayloadsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  payloads_.MergeFrom(from.payloads_);
  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
}

void ListPayloadsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.ListPayloadsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListPayloadsResponse::CopyFrom(const ListPayloadsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.ListPayloadsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPayloadsResponse::IsInitialized() const {
  return true;
}

void ListPayloadsResponse::InternalSwap(ListPayloadsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  payloads_.InternalSwap(&other->payloads_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPayloadsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bosdyn::api::Payload* Arena::CreateMaybeMessage< ::bosdyn::api::Payload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::Payload >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::PayloadPreset* Arena::CreateMaybeMessage< ::bosdyn::api::PayloadPreset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::PayloadPreset >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::PayloadMassVolumeProperties* Arena::CreateMaybeMessage< ::bosdyn::api::PayloadMassVolumeProperties >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::PayloadMassVolumeProperties >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::MomentOfIntertia* Arena::CreateMaybeMessage< ::bosdyn::api::MomentOfIntertia >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::MomentOfIntertia >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::JointLimits* Arena::CreateMaybeMessage< ::bosdyn::api::JointLimits >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::JointLimits >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::ListPayloadsRequest* Arena::CreateMaybeMessage< ::bosdyn::api::ListPayloadsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::ListPayloadsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::ListPayloadsResponse* Arena::CreateMaybeMessage< ::bosdyn::api::ListPayloadsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::ListPayloadsResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
