// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/payload_registration.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fpayload_5fregistration_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fpayload_5fregistration_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "bosdyn/api/payload.pb.h"
#include "bosdyn/api/header.pb.h"
#include "bosdyn/api/robot_id.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fpayload_5fregistration_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bosdyn_2fapi_2fpayload_5fregistration_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fpayload_5fregistration_2eproto;
namespace bosdyn {
namespace api {
class GetPayloadAuthTokenRequest;
class GetPayloadAuthTokenRequestDefaultTypeInternal;
extern GetPayloadAuthTokenRequestDefaultTypeInternal _GetPayloadAuthTokenRequest_default_instance_;
class GetPayloadAuthTokenResponse;
class GetPayloadAuthTokenResponseDefaultTypeInternal;
extern GetPayloadAuthTokenResponseDefaultTypeInternal _GetPayloadAuthTokenResponse_default_instance_;
class RegisterPayloadRequest;
class RegisterPayloadRequestDefaultTypeInternal;
extern RegisterPayloadRequestDefaultTypeInternal _RegisterPayloadRequest_default_instance_;
class RegisterPayloadResponse;
class RegisterPayloadResponseDefaultTypeInternal;
extern RegisterPayloadResponseDefaultTypeInternal _RegisterPayloadResponse_default_instance_;
class UpdatePayloadVersionRequest;
class UpdatePayloadVersionRequestDefaultTypeInternal;
extern UpdatePayloadVersionRequestDefaultTypeInternal _UpdatePayloadVersionRequest_default_instance_;
class UpdatePayloadVersionResponse;
class UpdatePayloadVersionResponseDefaultTypeInternal;
extern UpdatePayloadVersionResponseDefaultTypeInternal _UpdatePayloadVersionResponse_default_instance_;
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> ::bosdyn::api::GetPayloadAuthTokenRequest* Arena::CreateMaybeMessage<::bosdyn::api::GetPayloadAuthTokenRequest>(Arena*);
template<> ::bosdyn::api::GetPayloadAuthTokenResponse* Arena::CreateMaybeMessage<::bosdyn::api::GetPayloadAuthTokenResponse>(Arena*);
template<> ::bosdyn::api::RegisterPayloadRequest* Arena::CreateMaybeMessage<::bosdyn::api::RegisterPayloadRequest>(Arena*);
template<> ::bosdyn::api::RegisterPayloadResponse* Arena::CreateMaybeMessage<::bosdyn::api::RegisterPayloadResponse>(Arena*);
template<> ::bosdyn::api::UpdatePayloadVersionRequest* Arena::CreateMaybeMessage<::bosdyn::api::UpdatePayloadVersionRequest>(Arena*);
template<> ::bosdyn::api::UpdatePayloadVersionResponse* Arena::CreateMaybeMessage<::bosdyn::api::UpdatePayloadVersionResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bosdyn {
namespace api {

enum RegisterPayloadResponse_Status : int {
  RegisterPayloadResponse_Status_STATUS_UNKNOWN = 0,
  RegisterPayloadResponse_Status_STATUS_OK = 1,
  RegisterPayloadResponse_Status_STATUS_ALREADY_EXISTS = 2,
  RegisterPayloadResponse_Status_RegisterPayloadResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RegisterPayloadResponse_Status_RegisterPayloadResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RegisterPayloadResponse_Status_IsValid(int value);
constexpr RegisterPayloadResponse_Status RegisterPayloadResponse_Status_Status_MIN = RegisterPayloadResponse_Status_STATUS_UNKNOWN;
constexpr RegisterPayloadResponse_Status RegisterPayloadResponse_Status_Status_MAX = RegisterPayloadResponse_Status_STATUS_ALREADY_EXISTS;
constexpr int RegisterPayloadResponse_Status_Status_ARRAYSIZE = RegisterPayloadResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RegisterPayloadResponse_Status_descriptor();
template<typename T>
inline const std::string& RegisterPayloadResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RegisterPayloadResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RegisterPayloadResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RegisterPayloadResponse_Status_descriptor(), enum_t_value);
}
inline bool RegisterPayloadResponse_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RegisterPayloadResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RegisterPayloadResponse_Status>(
    RegisterPayloadResponse_Status_descriptor(), name, value);
}
enum UpdatePayloadVersionResponse_Status : int {
  UpdatePayloadVersionResponse_Status_STATUS_UNKNOWN = 0,
  UpdatePayloadVersionResponse_Status_STATUS_OK = 1,
  UpdatePayloadVersionResponse_Status_STATUS_DOES_NOT_EXIST = 2,
  UpdatePayloadVersionResponse_Status_STATUS_INVALID_CREDENTIALS = 3,
  UpdatePayloadVersionResponse_Status_UpdatePayloadVersionResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UpdatePayloadVersionResponse_Status_UpdatePayloadVersionResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UpdatePayloadVersionResponse_Status_IsValid(int value);
constexpr UpdatePayloadVersionResponse_Status UpdatePayloadVersionResponse_Status_Status_MIN = UpdatePayloadVersionResponse_Status_STATUS_UNKNOWN;
constexpr UpdatePayloadVersionResponse_Status UpdatePayloadVersionResponse_Status_Status_MAX = UpdatePayloadVersionResponse_Status_STATUS_INVALID_CREDENTIALS;
constexpr int UpdatePayloadVersionResponse_Status_Status_ARRAYSIZE = UpdatePayloadVersionResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UpdatePayloadVersionResponse_Status_descriptor();
template<typename T>
inline const std::string& UpdatePayloadVersionResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UpdatePayloadVersionResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UpdatePayloadVersionResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UpdatePayloadVersionResponse_Status_descriptor(), enum_t_value);
}
inline bool UpdatePayloadVersionResponse_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UpdatePayloadVersionResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UpdatePayloadVersionResponse_Status>(
    UpdatePayloadVersionResponse_Status_descriptor(), name, value);
}
enum GetPayloadAuthTokenResponse_Status : int {
  GetPayloadAuthTokenResponse_Status_STATUS_UNKNOWN = 0,
  GetPayloadAuthTokenResponse_Status_STATUS_OK = 1,
  GetPayloadAuthTokenResponse_Status_STATUS_INVALID_CREDENTIALS = 2,
  GetPayloadAuthTokenResponse_Status_STATUS_PAYLOAD_NOT_AUTHORIZED = 3,
  GetPayloadAuthTokenResponse_Status_GetPayloadAuthTokenResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GetPayloadAuthTokenResponse_Status_GetPayloadAuthTokenResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GetPayloadAuthTokenResponse_Status_IsValid(int value);
constexpr GetPayloadAuthTokenResponse_Status GetPayloadAuthTokenResponse_Status_Status_MIN = GetPayloadAuthTokenResponse_Status_STATUS_UNKNOWN;
constexpr GetPayloadAuthTokenResponse_Status GetPayloadAuthTokenResponse_Status_Status_MAX = GetPayloadAuthTokenResponse_Status_STATUS_PAYLOAD_NOT_AUTHORIZED;
constexpr int GetPayloadAuthTokenResponse_Status_Status_ARRAYSIZE = GetPayloadAuthTokenResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetPayloadAuthTokenResponse_Status_descriptor();
template<typename T>
inline const std::string& GetPayloadAuthTokenResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GetPayloadAuthTokenResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GetPayloadAuthTokenResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GetPayloadAuthTokenResponse_Status_descriptor(), enum_t_value);
}
inline bool GetPayloadAuthTokenResponse_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GetPayloadAuthTokenResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GetPayloadAuthTokenResponse_Status>(
    GetPayloadAuthTokenResponse_Status_descriptor(), name, value);
}
// ===================================================================

class RegisterPayloadRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.RegisterPayloadRequest) */ {
 public:
  inline RegisterPayloadRequest() : RegisterPayloadRequest(nullptr) {}
  virtual ~RegisterPayloadRequest();

  RegisterPayloadRequest(const RegisterPayloadRequest& from);
  RegisterPayloadRequest(RegisterPayloadRequest&& from) noexcept
    : RegisterPayloadRequest() {
    *this = ::std::move(from);
  }

  inline RegisterPayloadRequest& operator=(const RegisterPayloadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterPayloadRequest& operator=(RegisterPayloadRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterPayloadRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterPayloadRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterPayloadRequest*>(
               &_RegisterPayloadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RegisterPayloadRequest& a, RegisterPayloadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterPayloadRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterPayloadRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterPayloadRequest* New() const final {
    return CreateMaybeMessage<RegisterPayloadRequest>(nullptr);
  }

  RegisterPayloadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterPayloadRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterPayloadRequest& from);
  void MergeFrom(const RegisterPayloadRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterPayloadRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.RegisterPayloadRequest";
  }
  protected:
  explicit RegisterPayloadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fpayload_5fregistration_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fpayload_5fregistration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadSecretFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kPayloadFieldNumber = 2,
  };
  // string payload_secret = 3;
  void clear_payload_secret();
  const std::string& payload_secret() const;
  void set_payload_secret(const std::string& value);
  void set_payload_secret(std::string&& value);
  void set_payload_secret(const char* value);
  void set_payload_secret(const char* value, size_t size);
  std::string* mutable_payload_secret();
  std::string* release_payload_secret();
  void set_allocated_payload_secret(std::string* payload_secret);
  private:
  const std::string& _internal_payload_secret() const;
  void _internal_set_payload_secret(const std::string& value);
  std::string* _internal_mutable_payload_secret();
  public:

  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // .bosdyn.api.Payload payload = 2;
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const ::bosdyn::api::Payload& payload() const;
  ::bosdyn::api::Payload* release_payload();
  ::bosdyn::api::Payload* mutable_payload();
  void set_allocated_payload(::bosdyn::api::Payload* payload);
  private:
  const ::bosdyn::api::Payload& _internal_payload() const;
  ::bosdyn::api::Payload* _internal_mutable_payload();
  public:
  void unsafe_arena_set_allocated_payload(
      ::bosdyn::api::Payload* payload);
  ::bosdyn::api::Payload* unsafe_arena_release_payload();

  // @@protoc_insertion_point(class_scope:bosdyn.api.RegisterPayloadRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_secret_;
  ::bosdyn::api::RequestHeader* header_;
  ::bosdyn::api::Payload* payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fpayload_5fregistration_2eproto;
};
// -------------------------------------------------------------------

class RegisterPayloadResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.RegisterPayloadResponse) */ {
 public:
  inline RegisterPayloadResponse() : RegisterPayloadResponse(nullptr) {}
  virtual ~RegisterPayloadResponse();

  RegisterPayloadResponse(const RegisterPayloadResponse& from);
  RegisterPayloadResponse(RegisterPayloadResponse&& from) noexcept
    : RegisterPayloadResponse() {
    *this = ::std::move(from);
  }

  inline RegisterPayloadResponse& operator=(const RegisterPayloadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterPayloadResponse& operator=(RegisterPayloadResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterPayloadResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterPayloadResponse* internal_default_instance() {
    return reinterpret_cast<const RegisterPayloadResponse*>(
               &_RegisterPayloadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RegisterPayloadResponse& a, RegisterPayloadResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterPayloadResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterPayloadResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterPayloadResponse* New() const final {
    return CreateMaybeMessage<RegisterPayloadResponse>(nullptr);
  }

  RegisterPayloadResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterPayloadResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterPayloadResponse& from);
  void MergeFrom(const RegisterPayloadResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterPayloadResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.RegisterPayloadResponse";
  }
  protected:
  explicit RegisterPayloadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fpayload_5fregistration_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fpayload_5fregistration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef RegisterPayloadResponse_Status Status;
  static constexpr Status STATUS_UNKNOWN =
    RegisterPayloadResponse_Status_STATUS_UNKNOWN;
  static constexpr Status STATUS_OK =
    RegisterPayloadResponse_Status_STATUS_OK;
  static constexpr Status STATUS_ALREADY_EXISTS =
    RegisterPayloadResponse_Status_STATUS_ALREADY_EXISTS;
  static inline bool Status_IsValid(int value) {
    return RegisterPayloadResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    RegisterPayloadResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    RegisterPayloadResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    RegisterPayloadResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return RegisterPayloadResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return RegisterPayloadResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return RegisterPayloadResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // .bosdyn.api.RegisterPayloadResponse.Status status = 2;
  void clear_status();
  ::bosdyn::api::RegisterPayloadResponse_Status status() const;
  void set_status(::bosdyn::api::RegisterPayloadResponse_Status value);
  private:
  ::bosdyn::api::RegisterPayloadResponse_Status _internal_status() const;
  void _internal_set_status(::bosdyn::api::RegisterPayloadResponse_Status value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.RegisterPayloadResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::ResponseHeader* header_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fpayload_5fregistration_2eproto;
};
// -------------------------------------------------------------------

class UpdatePayloadVersionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.UpdatePayloadVersionRequest) */ {
 public:
  inline UpdatePayloadVersionRequest() : UpdatePayloadVersionRequest(nullptr) {}
  virtual ~UpdatePayloadVersionRequest();

  UpdatePayloadVersionRequest(const UpdatePayloadVersionRequest& from);
  UpdatePayloadVersionRequest(UpdatePayloadVersionRequest&& from) noexcept
    : UpdatePayloadVersionRequest() {
    *this = ::std::move(from);
  }

  inline UpdatePayloadVersionRequest& operator=(const UpdatePayloadVersionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdatePayloadVersionRequest& operator=(UpdatePayloadVersionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdatePayloadVersionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdatePayloadVersionRequest* internal_default_instance() {
    return reinterpret_cast<const UpdatePayloadVersionRequest*>(
               &_UpdatePayloadVersionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UpdatePayloadVersionRequest& a, UpdatePayloadVersionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdatePayloadVersionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdatePayloadVersionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdatePayloadVersionRequest* New() const final {
    return CreateMaybeMessage<UpdatePayloadVersionRequest>(nullptr);
  }

  UpdatePayloadVersionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdatePayloadVersionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdatePayloadVersionRequest& from);
  void MergeFrom(const UpdatePayloadVersionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdatePayloadVersionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.UpdatePayloadVersionRequest";
  }
  protected:
  explicit UpdatePayloadVersionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fpayload_5fregistration_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fpayload_5fregistration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadGuidFieldNumber = 2,
    kPayloadSecretFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kUpdatedVersionFieldNumber = 4,
  };
  // string payload_guid = 2;
  void clear_payload_guid();
  const std::string& payload_guid() const;
  void set_payload_guid(const std::string& value);
  void set_payload_guid(std::string&& value);
  void set_payload_guid(const char* value);
  void set_payload_guid(const char* value, size_t size);
  std::string* mutable_payload_guid();
  std::string* release_payload_guid();
  void set_allocated_payload_guid(std::string* payload_guid);
  private:
  const std::string& _internal_payload_guid() const;
  void _internal_set_payload_guid(const std::string& value);
  std::string* _internal_mutable_payload_guid();
  public:

  // string payload_secret = 3;
  void clear_payload_secret();
  const std::string& payload_secret() const;
  void set_payload_secret(const std::string& value);
  void set_payload_secret(std::string&& value);
  void set_payload_secret(const char* value);
  void set_payload_secret(const char* value, size_t size);
  std::string* mutable_payload_secret();
  std::string* release_payload_secret();
  void set_allocated_payload_secret(std::string* payload_secret);
  private:
  const std::string& _internal_payload_secret() const;
  void _internal_set_payload_secret(const std::string& value);
  std::string* _internal_mutable_payload_secret();
  public:

  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // .bosdyn.api.SoftwareVersion updated_version = 4;
  bool has_updated_version() const;
  private:
  bool _internal_has_updated_version() const;
  public:
  void clear_updated_version();
  const ::bosdyn::api::SoftwareVersion& updated_version() const;
  ::bosdyn::api::SoftwareVersion* release_updated_version();
  ::bosdyn::api::SoftwareVersion* mutable_updated_version();
  void set_allocated_updated_version(::bosdyn::api::SoftwareVersion* updated_version);
  private:
  const ::bosdyn::api::SoftwareVersion& _internal_updated_version() const;
  ::bosdyn::api::SoftwareVersion* _internal_mutable_updated_version();
  public:
  void unsafe_arena_set_allocated_updated_version(
      ::bosdyn::api::SoftwareVersion* updated_version);
  ::bosdyn::api::SoftwareVersion* unsafe_arena_release_updated_version();

  // @@protoc_insertion_point(class_scope:bosdyn.api.UpdatePayloadVersionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_guid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_secret_;
  ::bosdyn::api::RequestHeader* header_;
  ::bosdyn::api::SoftwareVersion* updated_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fpayload_5fregistration_2eproto;
};
// -------------------------------------------------------------------

class UpdatePayloadVersionResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.UpdatePayloadVersionResponse) */ {
 public:
  inline UpdatePayloadVersionResponse() : UpdatePayloadVersionResponse(nullptr) {}
  virtual ~UpdatePayloadVersionResponse();

  UpdatePayloadVersionResponse(const UpdatePayloadVersionResponse& from);
  UpdatePayloadVersionResponse(UpdatePayloadVersionResponse&& from) noexcept
    : UpdatePayloadVersionResponse() {
    *this = ::std::move(from);
  }

  inline UpdatePayloadVersionResponse& operator=(const UpdatePayloadVersionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdatePayloadVersionResponse& operator=(UpdatePayloadVersionResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdatePayloadVersionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdatePayloadVersionResponse* internal_default_instance() {
    return reinterpret_cast<const UpdatePayloadVersionResponse*>(
               &_UpdatePayloadVersionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UpdatePayloadVersionResponse& a, UpdatePayloadVersionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdatePayloadVersionResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdatePayloadVersionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdatePayloadVersionResponse* New() const final {
    return CreateMaybeMessage<UpdatePayloadVersionResponse>(nullptr);
  }

  UpdatePayloadVersionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdatePayloadVersionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdatePayloadVersionResponse& from);
  void MergeFrom(const UpdatePayloadVersionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdatePayloadVersionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.UpdatePayloadVersionResponse";
  }
  protected:
  explicit UpdatePayloadVersionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fpayload_5fregistration_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fpayload_5fregistration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef UpdatePayloadVersionResponse_Status Status;
  static constexpr Status STATUS_UNKNOWN =
    UpdatePayloadVersionResponse_Status_STATUS_UNKNOWN;
  static constexpr Status STATUS_OK =
    UpdatePayloadVersionResponse_Status_STATUS_OK;
  static constexpr Status STATUS_DOES_NOT_EXIST =
    UpdatePayloadVersionResponse_Status_STATUS_DOES_NOT_EXIST;
  static constexpr Status STATUS_INVALID_CREDENTIALS =
    UpdatePayloadVersionResponse_Status_STATUS_INVALID_CREDENTIALS;
  static inline bool Status_IsValid(int value) {
    return UpdatePayloadVersionResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    UpdatePayloadVersionResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    UpdatePayloadVersionResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    UpdatePayloadVersionResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return UpdatePayloadVersionResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return UpdatePayloadVersionResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return UpdatePayloadVersionResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // .bosdyn.api.UpdatePayloadVersionResponse.Status status = 2;
  void clear_status();
  ::bosdyn::api::UpdatePayloadVersionResponse_Status status() const;
  void set_status(::bosdyn::api::UpdatePayloadVersionResponse_Status value);
  private:
  ::bosdyn::api::UpdatePayloadVersionResponse_Status _internal_status() const;
  void _internal_set_status(::bosdyn::api::UpdatePayloadVersionResponse_Status value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.UpdatePayloadVersionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::ResponseHeader* header_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fpayload_5fregistration_2eproto;
};
// -------------------------------------------------------------------

class GetPayloadAuthTokenRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.GetPayloadAuthTokenRequest) */ {
 public:
  inline GetPayloadAuthTokenRequest() : GetPayloadAuthTokenRequest(nullptr) {}
  virtual ~GetPayloadAuthTokenRequest();

  GetPayloadAuthTokenRequest(const GetPayloadAuthTokenRequest& from);
  GetPayloadAuthTokenRequest(GetPayloadAuthTokenRequest&& from) noexcept
    : GetPayloadAuthTokenRequest() {
    *this = ::std::move(from);
  }

  inline GetPayloadAuthTokenRequest& operator=(const GetPayloadAuthTokenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPayloadAuthTokenRequest& operator=(GetPayloadAuthTokenRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPayloadAuthTokenRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPayloadAuthTokenRequest* internal_default_instance() {
    return reinterpret_cast<const GetPayloadAuthTokenRequest*>(
               &_GetPayloadAuthTokenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetPayloadAuthTokenRequest& a, GetPayloadAuthTokenRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPayloadAuthTokenRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPayloadAuthTokenRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPayloadAuthTokenRequest* New() const final {
    return CreateMaybeMessage<GetPayloadAuthTokenRequest>(nullptr);
  }

  GetPayloadAuthTokenRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPayloadAuthTokenRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPayloadAuthTokenRequest& from);
  void MergeFrom(const GetPayloadAuthTokenRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPayloadAuthTokenRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.GetPayloadAuthTokenRequest";
  }
  protected:
  explicit GetPayloadAuthTokenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fpayload_5fregistration_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fpayload_5fregistration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadGuidFieldNumber = 2,
    kPayloadSecretFieldNumber = 3,
    kHeaderFieldNumber = 1,
  };
  // string payload_guid = 2;
  void clear_payload_guid();
  const std::string& payload_guid() const;
  void set_payload_guid(const std::string& value);
  void set_payload_guid(std::string&& value);
  void set_payload_guid(const char* value);
  void set_payload_guid(const char* value, size_t size);
  std::string* mutable_payload_guid();
  std::string* release_payload_guid();
  void set_allocated_payload_guid(std::string* payload_guid);
  private:
  const std::string& _internal_payload_guid() const;
  void _internal_set_payload_guid(const std::string& value);
  std::string* _internal_mutable_payload_guid();
  public:

  // string payload_secret = 3;
  void clear_payload_secret();
  const std::string& payload_secret() const;
  void set_payload_secret(const std::string& value);
  void set_payload_secret(std::string&& value);
  void set_payload_secret(const char* value);
  void set_payload_secret(const char* value, size_t size);
  std::string* mutable_payload_secret();
  std::string* release_payload_secret();
  void set_allocated_payload_secret(std::string* payload_secret);
  private:
  const std::string& _internal_payload_secret() const;
  void _internal_set_payload_secret(const std::string& value);
  std::string* _internal_mutable_payload_secret();
  public:

  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.GetPayloadAuthTokenRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_guid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_secret_;
  ::bosdyn::api::RequestHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fpayload_5fregistration_2eproto;
};
// -------------------------------------------------------------------

class GetPayloadAuthTokenResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.GetPayloadAuthTokenResponse) */ {
 public:
  inline GetPayloadAuthTokenResponse() : GetPayloadAuthTokenResponse(nullptr) {}
  virtual ~GetPayloadAuthTokenResponse();

  GetPayloadAuthTokenResponse(const GetPayloadAuthTokenResponse& from);
  GetPayloadAuthTokenResponse(GetPayloadAuthTokenResponse&& from) noexcept
    : GetPayloadAuthTokenResponse() {
    *this = ::std::move(from);
  }

  inline GetPayloadAuthTokenResponse& operator=(const GetPayloadAuthTokenResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPayloadAuthTokenResponse& operator=(GetPayloadAuthTokenResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPayloadAuthTokenResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPayloadAuthTokenResponse* internal_default_instance() {
    return reinterpret_cast<const GetPayloadAuthTokenResponse*>(
               &_GetPayloadAuthTokenResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetPayloadAuthTokenResponse& a, GetPayloadAuthTokenResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPayloadAuthTokenResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPayloadAuthTokenResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPayloadAuthTokenResponse* New() const final {
    return CreateMaybeMessage<GetPayloadAuthTokenResponse>(nullptr);
  }

  GetPayloadAuthTokenResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPayloadAuthTokenResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPayloadAuthTokenResponse& from);
  void MergeFrom(const GetPayloadAuthTokenResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPayloadAuthTokenResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.GetPayloadAuthTokenResponse";
  }
  protected:
  explicit GetPayloadAuthTokenResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fpayload_5fregistration_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fpayload_5fregistration_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetPayloadAuthTokenResponse_Status Status;
  static constexpr Status STATUS_UNKNOWN =
    GetPayloadAuthTokenResponse_Status_STATUS_UNKNOWN;
  static constexpr Status STATUS_OK =
    GetPayloadAuthTokenResponse_Status_STATUS_OK;
  static constexpr Status STATUS_INVALID_CREDENTIALS =
    GetPayloadAuthTokenResponse_Status_STATUS_INVALID_CREDENTIALS;
  static constexpr Status STATUS_PAYLOAD_NOT_AUTHORIZED =
    GetPayloadAuthTokenResponse_Status_STATUS_PAYLOAD_NOT_AUTHORIZED;
  static inline bool Status_IsValid(int value) {
    return GetPayloadAuthTokenResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    GetPayloadAuthTokenResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    GetPayloadAuthTokenResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    GetPayloadAuthTokenResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return GetPayloadAuthTokenResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return GetPayloadAuthTokenResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return GetPayloadAuthTokenResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // string token = 3;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // .bosdyn.api.GetPayloadAuthTokenResponse.Status status = 2;
  void clear_status();
  ::bosdyn::api::GetPayloadAuthTokenResponse_Status status() const;
  void set_status(::bosdyn::api::GetPayloadAuthTokenResponse_Status value);
  private:
  ::bosdyn::api::GetPayloadAuthTokenResponse_Status _internal_status() const;
  void _internal_set_status(::bosdyn::api::GetPayloadAuthTokenResponse_Status value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.GetPayloadAuthTokenResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::bosdyn::api::ResponseHeader* header_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fpayload_5fregistration_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RegisterPayloadRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool RegisterPayloadRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool RegisterPayloadRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& RegisterPayloadRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::RequestHeader*>(
      &::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& RegisterPayloadRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.RegisterPayloadRequest.header)
  return _internal_header();
}
inline void RegisterPayloadRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.RegisterPayloadRequest.header)
}
inline ::bosdyn::api::RequestHeader* RegisterPayloadRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::RequestHeader* RegisterPayloadRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.RegisterPayloadRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* RegisterPayloadRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::RequestHeader* RegisterPayloadRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.RegisterPayloadRequest.header)
  return _internal_mutable_header();
}
inline void RegisterPayloadRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.RegisterPayloadRequest.header)
}

// .bosdyn.api.Payload payload = 2;
inline bool RegisterPayloadRequest::_internal_has_payload() const {
  return this != internal_default_instance() && payload_ != nullptr;
}
inline bool RegisterPayloadRequest::has_payload() const {
  return _internal_has_payload();
}
inline const ::bosdyn::api::Payload& RegisterPayloadRequest::_internal_payload() const {
  const ::bosdyn::api::Payload* p = payload_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::Payload*>(
      &::bosdyn::api::_Payload_default_instance_);
}
inline const ::bosdyn::api::Payload& RegisterPayloadRequest::payload() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.RegisterPayloadRequest.payload)
  return _internal_payload();
}
inline void RegisterPayloadRequest::unsafe_arena_set_allocated_payload(
    ::bosdyn::api::Payload* payload) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload_);
  }
  payload_ = payload;
  if (payload) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.RegisterPayloadRequest.payload)
}
inline ::bosdyn::api::Payload* RegisterPayloadRequest::release_payload() {
  
  ::bosdyn::api::Payload* temp = payload_;
  payload_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::Payload* RegisterPayloadRequest::unsafe_arena_release_payload() {
  // @@protoc_insertion_point(field_release:bosdyn.api.RegisterPayloadRequest.payload)
  
  ::bosdyn::api::Payload* temp = payload_;
  payload_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Payload* RegisterPayloadRequest::_internal_mutable_payload() {
  
  if (payload_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Payload>(GetArena());
    payload_ = p;
  }
  return payload_;
}
inline ::bosdyn::api::Payload* RegisterPayloadRequest::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.RegisterPayloadRequest.payload)
  return _internal_mutable_payload();
}
inline void RegisterPayloadRequest::set_allocated_payload(::bosdyn::api::Payload* payload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload_);
  }
  if (payload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload)->GetArena();
    if (message_arena != submessage_arena) {
      payload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payload, submessage_arena);
    }
    
  } else {
    
  }
  payload_ = payload;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.RegisterPayloadRequest.payload)
}

// string payload_secret = 3;
inline void RegisterPayloadRequest::clear_payload_secret() {
  payload_secret_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RegisterPayloadRequest::payload_secret() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.RegisterPayloadRequest.payload_secret)
  return _internal_payload_secret();
}
inline void RegisterPayloadRequest::set_payload_secret(const std::string& value) {
  _internal_set_payload_secret(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.RegisterPayloadRequest.payload_secret)
}
inline std::string* RegisterPayloadRequest::mutable_payload_secret() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.RegisterPayloadRequest.payload_secret)
  return _internal_mutable_payload_secret();
}
inline const std::string& RegisterPayloadRequest::_internal_payload_secret() const {
  return payload_secret_.Get();
}
inline void RegisterPayloadRequest::_internal_set_payload_secret(const std::string& value) {
  
  payload_secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RegisterPayloadRequest::set_payload_secret(std::string&& value) {
  
  payload_secret_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.RegisterPayloadRequest.payload_secret)
}
inline void RegisterPayloadRequest::set_payload_secret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.RegisterPayloadRequest.payload_secret)
}
inline void RegisterPayloadRequest::set_payload_secret(const char* value,
    size_t size) {
  
  payload_secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.RegisterPayloadRequest.payload_secret)
}
inline std::string* RegisterPayloadRequest::_internal_mutable_payload_secret() {
  
  return payload_secret_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RegisterPayloadRequest::release_payload_secret() {
  // @@protoc_insertion_point(field_release:bosdyn.api.RegisterPayloadRequest.payload_secret)
  return payload_secret_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RegisterPayloadRequest::set_allocated_payload_secret(std::string* payload_secret) {
  if (payload_secret != nullptr) {
    
  } else {
    
  }
  payload_secret_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload_secret,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.RegisterPayloadRequest.payload_secret)
}

// -------------------------------------------------------------------

// RegisterPayloadResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool RegisterPayloadResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool RegisterPayloadResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& RegisterPayloadResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::ResponseHeader*>(
      &::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& RegisterPayloadResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.RegisterPayloadResponse.header)
  return _internal_header();
}
inline void RegisterPayloadResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.RegisterPayloadResponse.header)
}
inline ::bosdyn::api::ResponseHeader* RegisterPayloadResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::ResponseHeader* RegisterPayloadResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.RegisterPayloadResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* RegisterPayloadResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::ResponseHeader* RegisterPayloadResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.RegisterPayloadResponse.header)
  return _internal_mutable_header();
}
inline void RegisterPayloadResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.RegisterPayloadResponse.header)
}

// .bosdyn.api.RegisterPayloadResponse.Status status = 2;
inline void RegisterPayloadResponse::clear_status() {
  status_ = 0;
}
inline ::bosdyn::api::RegisterPayloadResponse_Status RegisterPayloadResponse::_internal_status() const {
  return static_cast< ::bosdyn::api::RegisterPayloadResponse_Status >(status_);
}
inline ::bosdyn::api::RegisterPayloadResponse_Status RegisterPayloadResponse::status() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.RegisterPayloadResponse.status)
  return _internal_status();
}
inline void RegisterPayloadResponse::_internal_set_status(::bosdyn::api::RegisterPayloadResponse_Status value) {
  
  status_ = value;
}
inline void RegisterPayloadResponse::set_status(::bosdyn::api::RegisterPayloadResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.RegisterPayloadResponse.status)
}

// -------------------------------------------------------------------

// UpdatePayloadVersionRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool UpdatePayloadVersionRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool UpdatePayloadVersionRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& UpdatePayloadVersionRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::RequestHeader*>(
      &::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& UpdatePayloadVersionRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.UpdatePayloadVersionRequest.header)
  return _internal_header();
}
inline void UpdatePayloadVersionRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.UpdatePayloadVersionRequest.header)
}
inline ::bosdyn::api::RequestHeader* UpdatePayloadVersionRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::RequestHeader* UpdatePayloadVersionRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.UpdatePayloadVersionRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* UpdatePayloadVersionRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::RequestHeader* UpdatePayloadVersionRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.UpdatePayloadVersionRequest.header)
  return _internal_mutable_header();
}
inline void UpdatePayloadVersionRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.UpdatePayloadVersionRequest.header)
}

// string payload_guid = 2;
inline void UpdatePayloadVersionRequest::clear_payload_guid() {
  payload_guid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdatePayloadVersionRequest::payload_guid() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.UpdatePayloadVersionRequest.payload_guid)
  return _internal_payload_guid();
}
inline void UpdatePayloadVersionRequest::set_payload_guid(const std::string& value) {
  _internal_set_payload_guid(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.UpdatePayloadVersionRequest.payload_guid)
}
inline std::string* UpdatePayloadVersionRequest::mutable_payload_guid() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.UpdatePayloadVersionRequest.payload_guid)
  return _internal_mutable_payload_guid();
}
inline const std::string& UpdatePayloadVersionRequest::_internal_payload_guid() const {
  return payload_guid_.Get();
}
inline void UpdatePayloadVersionRequest::_internal_set_payload_guid(const std::string& value) {
  
  payload_guid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdatePayloadVersionRequest::set_payload_guid(std::string&& value) {
  
  payload_guid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.UpdatePayloadVersionRequest.payload_guid)
}
inline void UpdatePayloadVersionRequest::set_payload_guid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_guid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.UpdatePayloadVersionRequest.payload_guid)
}
inline void UpdatePayloadVersionRequest::set_payload_guid(const char* value,
    size_t size) {
  
  payload_guid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.UpdatePayloadVersionRequest.payload_guid)
}
inline std::string* UpdatePayloadVersionRequest::_internal_mutable_payload_guid() {
  
  return payload_guid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdatePayloadVersionRequest::release_payload_guid() {
  // @@protoc_insertion_point(field_release:bosdyn.api.UpdatePayloadVersionRequest.payload_guid)
  return payload_guid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdatePayloadVersionRequest::set_allocated_payload_guid(std::string* payload_guid) {
  if (payload_guid != nullptr) {
    
  } else {
    
  }
  payload_guid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload_guid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.UpdatePayloadVersionRequest.payload_guid)
}

// string payload_secret = 3;
inline void UpdatePayloadVersionRequest::clear_payload_secret() {
  payload_secret_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdatePayloadVersionRequest::payload_secret() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.UpdatePayloadVersionRequest.payload_secret)
  return _internal_payload_secret();
}
inline void UpdatePayloadVersionRequest::set_payload_secret(const std::string& value) {
  _internal_set_payload_secret(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.UpdatePayloadVersionRequest.payload_secret)
}
inline std::string* UpdatePayloadVersionRequest::mutable_payload_secret() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.UpdatePayloadVersionRequest.payload_secret)
  return _internal_mutable_payload_secret();
}
inline const std::string& UpdatePayloadVersionRequest::_internal_payload_secret() const {
  return payload_secret_.Get();
}
inline void UpdatePayloadVersionRequest::_internal_set_payload_secret(const std::string& value) {
  
  payload_secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdatePayloadVersionRequest::set_payload_secret(std::string&& value) {
  
  payload_secret_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.UpdatePayloadVersionRequest.payload_secret)
}
inline void UpdatePayloadVersionRequest::set_payload_secret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.UpdatePayloadVersionRequest.payload_secret)
}
inline void UpdatePayloadVersionRequest::set_payload_secret(const char* value,
    size_t size) {
  
  payload_secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.UpdatePayloadVersionRequest.payload_secret)
}
inline std::string* UpdatePayloadVersionRequest::_internal_mutable_payload_secret() {
  
  return payload_secret_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdatePayloadVersionRequest::release_payload_secret() {
  // @@protoc_insertion_point(field_release:bosdyn.api.UpdatePayloadVersionRequest.payload_secret)
  return payload_secret_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdatePayloadVersionRequest::set_allocated_payload_secret(std::string* payload_secret) {
  if (payload_secret != nullptr) {
    
  } else {
    
  }
  payload_secret_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload_secret,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.UpdatePayloadVersionRequest.payload_secret)
}

// .bosdyn.api.SoftwareVersion updated_version = 4;
inline bool UpdatePayloadVersionRequest::_internal_has_updated_version() const {
  return this != internal_default_instance() && updated_version_ != nullptr;
}
inline bool UpdatePayloadVersionRequest::has_updated_version() const {
  return _internal_has_updated_version();
}
inline const ::bosdyn::api::SoftwareVersion& UpdatePayloadVersionRequest::_internal_updated_version() const {
  const ::bosdyn::api::SoftwareVersion* p = updated_version_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::SoftwareVersion*>(
      &::bosdyn::api::_SoftwareVersion_default_instance_);
}
inline const ::bosdyn::api::SoftwareVersion& UpdatePayloadVersionRequest::updated_version() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.UpdatePayloadVersionRequest.updated_version)
  return _internal_updated_version();
}
inline void UpdatePayloadVersionRequest::unsafe_arena_set_allocated_updated_version(
    ::bosdyn::api::SoftwareVersion* updated_version) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_version_);
  }
  updated_version_ = updated_version;
  if (updated_version) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.UpdatePayloadVersionRequest.updated_version)
}
inline ::bosdyn::api::SoftwareVersion* UpdatePayloadVersionRequest::release_updated_version() {
  
  ::bosdyn::api::SoftwareVersion* temp = updated_version_;
  updated_version_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::SoftwareVersion* UpdatePayloadVersionRequest::unsafe_arena_release_updated_version() {
  // @@protoc_insertion_point(field_release:bosdyn.api.UpdatePayloadVersionRequest.updated_version)
  
  ::bosdyn::api::SoftwareVersion* temp = updated_version_;
  updated_version_ = nullptr;
  return temp;
}
inline ::bosdyn::api::SoftwareVersion* UpdatePayloadVersionRequest::_internal_mutable_updated_version() {
  
  if (updated_version_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::SoftwareVersion>(GetArena());
    updated_version_ = p;
  }
  return updated_version_;
}
inline ::bosdyn::api::SoftwareVersion* UpdatePayloadVersionRequest::mutable_updated_version() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.UpdatePayloadVersionRequest.updated_version)
  return _internal_mutable_updated_version();
}
inline void UpdatePayloadVersionRequest::set_allocated_updated_version(::bosdyn::api::SoftwareVersion* updated_version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_version_);
  }
  if (updated_version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_version)->GetArena();
    if (message_arena != submessage_arena) {
      updated_version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_version, submessage_arena);
    }
    
  } else {
    
  }
  updated_version_ = updated_version;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.UpdatePayloadVersionRequest.updated_version)
}

// -------------------------------------------------------------------

// UpdatePayloadVersionResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool UpdatePayloadVersionResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool UpdatePayloadVersionResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& UpdatePayloadVersionResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::ResponseHeader*>(
      &::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& UpdatePayloadVersionResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.UpdatePayloadVersionResponse.header)
  return _internal_header();
}
inline void UpdatePayloadVersionResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.UpdatePayloadVersionResponse.header)
}
inline ::bosdyn::api::ResponseHeader* UpdatePayloadVersionResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::ResponseHeader* UpdatePayloadVersionResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.UpdatePayloadVersionResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* UpdatePayloadVersionResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::ResponseHeader* UpdatePayloadVersionResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.UpdatePayloadVersionResponse.header)
  return _internal_mutable_header();
}
inline void UpdatePayloadVersionResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.UpdatePayloadVersionResponse.header)
}

// .bosdyn.api.UpdatePayloadVersionResponse.Status status = 2;
inline void UpdatePayloadVersionResponse::clear_status() {
  status_ = 0;
}
inline ::bosdyn::api::UpdatePayloadVersionResponse_Status UpdatePayloadVersionResponse::_internal_status() const {
  return static_cast< ::bosdyn::api::UpdatePayloadVersionResponse_Status >(status_);
}
inline ::bosdyn::api::UpdatePayloadVersionResponse_Status UpdatePayloadVersionResponse::status() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.UpdatePayloadVersionResponse.status)
  return _internal_status();
}
inline void UpdatePayloadVersionResponse::_internal_set_status(::bosdyn::api::UpdatePayloadVersionResponse_Status value) {
  
  status_ = value;
}
inline void UpdatePayloadVersionResponse::set_status(::bosdyn::api::UpdatePayloadVersionResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.UpdatePayloadVersionResponse.status)
}

// -------------------------------------------------------------------

// GetPayloadAuthTokenRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool GetPayloadAuthTokenRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool GetPayloadAuthTokenRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& GetPayloadAuthTokenRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::RequestHeader*>(
      &::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& GetPayloadAuthTokenRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GetPayloadAuthTokenRequest.header)
  return _internal_header();
}
inline void GetPayloadAuthTokenRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.GetPayloadAuthTokenRequest.header)
}
inline ::bosdyn::api::RequestHeader* GetPayloadAuthTokenRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::RequestHeader* GetPayloadAuthTokenRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.GetPayloadAuthTokenRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* GetPayloadAuthTokenRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::RequestHeader* GetPayloadAuthTokenRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GetPayloadAuthTokenRequest.header)
  return _internal_mutable_header();
}
inline void GetPayloadAuthTokenRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.GetPayloadAuthTokenRequest.header)
}

// string payload_guid = 2;
inline void GetPayloadAuthTokenRequest::clear_payload_guid() {
  payload_guid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetPayloadAuthTokenRequest::payload_guid() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GetPayloadAuthTokenRequest.payload_guid)
  return _internal_payload_guid();
}
inline void GetPayloadAuthTokenRequest::set_payload_guid(const std::string& value) {
  _internal_set_payload_guid(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.GetPayloadAuthTokenRequest.payload_guid)
}
inline std::string* GetPayloadAuthTokenRequest::mutable_payload_guid() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GetPayloadAuthTokenRequest.payload_guid)
  return _internal_mutable_payload_guid();
}
inline const std::string& GetPayloadAuthTokenRequest::_internal_payload_guid() const {
  return payload_guid_.Get();
}
inline void GetPayloadAuthTokenRequest::_internal_set_payload_guid(const std::string& value) {
  
  payload_guid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetPayloadAuthTokenRequest::set_payload_guid(std::string&& value) {
  
  payload_guid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.GetPayloadAuthTokenRequest.payload_guid)
}
inline void GetPayloadAuthTokenRequest::set_payload_guid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_guid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.GetPayloadAuthTokenRequest.payload_guid)
}
inline void GetPayloadAuthTokenRequest::set_payload_guid(const char* value,
    size_t size) {
  
  payload_guid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.GetPayloadAuthTokenRequest.payload_guid)
}
inline std::string* GetPayloadAuthTokenRequest::_internal_mutable_payload_guid() {
  
  return payload_guid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetPayloadAuthTokenRequest::release_payload_guid() {
  // @@protoc_insertion_point(field_release:bosdyn.api.GetPayloadAuthTokenRequest.payload_guid)
  return payload_guid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetPayloadAuthTokenRequest::set_allocated_payload_guid(std::string* payload_guid) {
  if (payload_guid != nullptr) {
    
  } else {
    
  }
  payload_guid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload_guid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.GetPayloadAuthTokenRequest.payload_guid)
}

// string payload_secret = 3;
inline void GetPayloadAuthTokenRequest::clear_payload_secret() {
  payload_secret_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetPayloadAuthTokenRequest::payload_secret() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GetPayloadAuthTokenRequest.payload_secret)
  return _internal_payload_secret();
}
inline void GetPayloadAuthTokenRequest::set_payload_secret(const std::string& value) {
  _internal_set_payload_secret(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.GetPayloadAuthTokenRequest.payload_secret)
}
inline std::string* GetPayloadAuthTokenRequest::mutable_payload_secret() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GetPayloadAuthTokenRequest.payload_secret)
  return _internal_mutable_payload_secret();
}
inline const std::string& GetPayloadAuthTokenRequest::_internal_payload_secret() const {
  return payload_secret_.Get();
}
inline void GetPayloadAuthTokenRequest::_internal_set_payload_secret(const std::string& value) {
  
  payload_secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetPayloadAuthTokenRequest::set_payload_secret(std::string&& value) {
  
  payload_secret_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.GetPayloadAuthTokenRequest.payload_secret)
}
inline void GetPayloadAuthTokenRequest::set_payload_secret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.GetPayloadAuthTokenRequest.payload_secret)
}
inline void GetPayloadAuthTokenRequest::set_payload_secret(const char* value,
    size_t size) {
  
  payload_secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.GetPayloadAuthTokenRequest.payload_secret)
}
inline std::string* GetPayloadAuthTokenRequest::_internal_mutable_payload_secret() {
  
  return payload_secret_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetPayloadAuthTokenRequest::release_payload_secret() {
  // @@protoc_insertion_point(field_release:bosdyn.api.GetPayloadAuthTokenRequest.payload_secret)
  return payload_secret_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetPayloadAuthTokenRequest::set_allocated_payload_secret(std::string* payload_secret) {
  if (payload_secret != nullptr) {
    
  } else {
    
  }
  payload_secret_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload_secret,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.GetPayloadAuthTokenRequest.payload_secret)
}

// -------------------------------------------------------------------

// GetPayloadAuthTokenResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool GetPayloadAuthTokenResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool GetPayloadAuthTokenResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& GetPayloadAuthTokenResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::ResponseHeader*>(
      &::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& GetPayloadAuthTokenResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GetPayloadAuthTokenResponse.header)
  return _internal_header();
}
inline void GetPayloadAuthTokenResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.GetPayloadAuthTokenResponse.header)
}
inline ::bosdyn::api::ResponseHeader* GetPayloadAuthTokenResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::ResponseHeader* GetPayloadAuthTokenResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.GetPayloadAuthTokenResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* GetPayloadAuthTokenResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::ResponseHeader* GetPayloadAuthTokenResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GetPayloadAuthTokenResponse.header)
  return _internal_mutable_header();
}
inline void GetPayloadAuthTokenResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.GetPayloadAuthTokenResponse.header)
}

// .bosdyn.api.GetPayloadAuthTokenResponse.Status status = 2;
inline void GetPayloadAuthTokenResponse::clear_status() {
  status_ = 0;
}
inline ::bosdyn::api::GetPayloadAuthTokenResponse_Status GetPayloadAuthTokenResponse::_internal_status() const {
  return static_cast< ::bosdyn::api::GetPayloadAuthTokenResponse_Status >(status_);
}
inline ::bosdyn::api::GetPayloadAuthTokenResponse_Status GetPayloadAuthTokenResponse::status() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GetPayloadAuthTokenResponse.status)
  return _internal_status();
}
inline void GetPayloadAuthTokenResponse::_internal_set_status(::bosdyn::api::GetPayloadAuthTokenResponse_Status value) {
  
  status_ = value;
}
inline void GetPayloadAuthTokenResponse::set_status(::bosdyn::api::GetPayloadAuthTokenResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.GetPayloadAuthTokenResponse.status)
}

// string token = 3;
inline void GetPayloadAuthTokenResponse::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetPayloadAuthTokenResponse::token() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GetPayloadAuthTokenResponse.token)
  return _internal_token();
}
inline void GetPayloadAuthTokenResponse::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.GetPayloadAuthTokenResponse.token)
}
inline std::string* GetPayloadAuthTokenResponse::mutable_token() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GetPayloadAuthTokenResponse.token)
  return _internal_mutable_token();
}
inline const std::string& GetPayloadAuthTokenResponse::_internal_token() const {
  return token_.Get();
}
inline void GetPayloadAuthTokenResponse::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetPayloadAuthTokenResponse::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.GetPayloadAuthTokenResponse.token)
}
inline void GetPayloadAuthTokenResponse::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.GetPayloadAuthTokenResponse.token)
}
inline void GetPayloadAuthTokenResponse::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.GetPayloadAuthTokenResponse.token)
}
inline std::string* GetPayloadAuthTokenResponse::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetPayloadAuthTokenResponse::release_token() {
  // @@protoc_insertion_point(field_release:bosdyn.api.GetPayloadAuthTokenResponse.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetPayloadAuthTokenResponse::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.GetPayloadAuthTokenResponse.token)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace bosdyn

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bosdyn::api::RegisterPayloadResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::RegisterPayloadResponse_Status>() {
  return ::bosdyn::api::RegisterPayloadResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::bosdyn::api::UpdatePayloadVersionResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::UpdatePayloadVersionResponse_Status>() {
  return ::bosdyn::api::UpdatePayloadVersionResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::bosdyn::api::GetPayloadAuthTokenResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::GetPayloadAuthTokenResponse_Status>() {
  return ::bosdyn::api::GetPayloadAuthTokenResponse_Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fpayload_5fregistration_2eproto
