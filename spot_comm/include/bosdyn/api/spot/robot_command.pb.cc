// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/spot/robot_command.proto

#include "bosdyn/api/spot/robot_command.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SE2VelocityLimit_bosdyn_2fapi_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2ftrajectory_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SE3Trajectory_bosdyn_2fapi_2ftrajectory_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec3_bosdyn_2fapi_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BodyControlParams_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BodyExternalForceParams_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObstacleParams_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TerrainParams_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DoubleValue_google_2fprotobuf_2fwrappers_2eproto;
namespace bosdyn {
namespace api {
namespace spot {
class MobilityParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MobilityParams> _instance;
} _MobilityParams_default_instance_;
class BodyControlParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BodyControlParams> _instance;
} _BodyControlParams_default_instance_;
class ObstacleParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ObstacleParams> _instance;
} _ObstacleParams_default_instance_;
class TerrainParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TerrainParams> _instance;
} _TerrainParams_default_instance_;
class BodyExternalForceParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BodyExternalForceParams> _instance;
} _BodyExternalForceParams_default_instance_;
}  // namespace spot
}  // namespace api
}  // namespace bosdyn
static void InitDefaultsscc_info_BodyControlParams_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot::_BodyControlParams_default_instance_;
    new (ptr) ::bosdyn::api::spot::BodyControlParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot::BodyControlParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BodyControlParams_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BodyControlParams_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto}, {
      &scc_info_SE3Trajectory_bosdyn_2fapi_2ftrajectory_2eproto.base,}};

static void InitDefaultsscc_info_BodyExternalForceParams_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot::_BodyExternalForceParams_default_instance_;
    new (ptr) ::bosdyn::api::spot::BodyExternalForceParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot::BodyExternalForceParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BodyExternalForceParams_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BodyExternalForceParams_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto}, {
      &scc_info_Vec3_bosdyn_2fapi_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_MobilityParams_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot::_MobilityParams_default_instance_;
    new (ptr) ::bosdyn::api::spot::MobilityParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot::MobilityParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_MobilityParams_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_MobilityParams_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto}, {
      &scc_info_SE2VelocityLimit_bosdyn_2fapi_2fgeometry_2eproto.base,
      &scc_info_BodyControlParams_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto.base,
      &scc_info_ObstacleParams_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto.base,
      &scc_info_TerrainParams_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto.base,
      &scc_info_BodyExternalForceParams_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto.base,}};

static void InitDefaultsscc_info_ObstacleParams_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot::_ObstacleParams_default_instance_;
    new (ptr) ::bosdyn::api::spot::ObstacleParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot::ObstacleParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ObstacleParams_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ObstacleParams_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto}, {}};

static void InitDefaultsscc_info_TerrainParams_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot::_TerrainParams_default_instance_;
    new (ptr) ::bosdyn::api::spot::TerrainParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot::TerrainParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TerrainParams_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TerrainParams_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto}, {
      &scc_info_DoubleValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::MobilityParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::MobilityParams, vel_limit_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::MobilityParams, body_control_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::MobilityParams, locomotion_hint_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::MobilityParams, stair_hint_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::MobilityParams, allow_degraded_perception_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::MobilityParams, obstacle_params_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::MobilityParams, swing_height_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::MobilityParams, terrain_params_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::MobilityParams, disallow_stair_tracker_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::MobilityParams, external_force_params_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::MobilityParams, disallow_non_stairs_pitch_limiting_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::MobilityParams, disable_nearmap_cliff_avoidance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::BodyControlParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::BodyControlParams, base_offset_rt_footprint_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::BodyControlParams, rotation_setting_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::ObstacleParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::ObstacleParams, disable_vision_foot_obstacle_avoidance_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::ObstacleParams, disable_vision_foot_constraint_avoidance_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::ObstacleParams, disable_vision_body_obstacle_avoidance_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::ObstacleParams, obstacle_avoidance_padding_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::TerrainParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::TerrainParams, ground_mu_hint_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::TerrainParams, enable_grated_floor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::BodyExternalForceParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::BodyExternalForceParams, external_force_indicator_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::BodyExternalForceParams, frame_name_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::BodyExternalForceParams, external_force_override_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::bosdyn::api::spot::MobilityParams)},
  { 17, -1, sizeof(::bosdyn::api::spot::BodyControlParams)},
  { 24, -1, sizeof(::bosdyn::api::spot::ObstacleParams)},
  { 33, -1, sizeof(::bosdyn::api::spot::TerrainParams)},
  { 40, -1, sizeof(::bosdyn::api::spot::BodyExternalForceParams)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot::_MobilityParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot::_BodyControlParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot::_ObstacleParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot::_TerrainParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot::_BodyExternalForceParams_default_instance_),
};

const char descriptor_table_protodef_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n#bosdyn/api/spot/robot_command.proto\022\017b"
  "osdyn.api.spot\032\031bosdyn/api/geometry.prot"
  "o\032\033bosdyn/api/trajectory.proto\032\036google/p"
  "rotobuf/wrappers.proto\"\320\004\n\016MobilityParam"
  "s\022/\n\tvel_limit\030\001 \001(\0132\034.bosdyn.api.SE2Vel"
  "ocityLimit\0228\n\014body_control\030\002 \001(\0132\".bosdy"
  "n.api.spot.BodyControlParams\0228\n\017locomoti"
  "on_hint\030\003 \001(\0162\037.bosdyn.api.spot.Locomoti"
  "onHint\022\022\n\nstair_hint\030\004 \001(\010\022!\n\031allow_degr"
  "aded_perception\030\005 \001(\010\0228\n\017obstacle_params"
  "\030\006 \001(\0132\037.bosdyn.api.spot.ObstacleParams\022"
  "2\n\014swing_height\030\007 \001(\0162\034.bosdyn.api.spot."
  "SwingHeight\0226\n\016terrain_params\030\010 \001(\0132\036.bo"
  "sdyn.api.spot.TerrainParams\022\036\n\026disallow_"
  "stair_tracker\030\t \001(\010\022G\n\025external_force_pa"
  "rams\030\n \001(\0132(.bosdyn.api.spot.BodyExterna"
  "lForceParams\022*\n\"disallow_non_stairs_pitc"
  "h_limiting\030\013 \001(\010\022\'\n\037disable_nearmap_clif"
  "f_avoidance\030\014 \001(\010\"\213\002\n\021BodyControlParams\022"
  ";\n\030base_offset_rt_footprint\030\001 \001(\0132\031.bosd"
  "yn.api.SE3Trajectory\022L\n\020rotation_setting"
  "\030\002 \001(\01622.bosdyn.api.spot.BodyControlPara"
  "ms.RotationSetting\"k\n\017RotationSetting\022\034\n"
  "\030ROTATION_SETTING_UNKNOWN\020\000\022\033\n\027ROTATION_"
  "SETTING_OFFSET\020\001\022\035\n\031ROTATION_SETTING_ABS"
  "OLUTE\020\002\"\306\001\n\016ObstacleParams\022.\n&disable_vi"
  "sion_foot_obstacle_avoidance\030\001 \001(\010\0220\n(di"
  "sable_vision_foot_constraint_avoidance\030\002"
  " \001(\010\022.\n&disable_vision_body_obstacle_avo"
  "idance\030\003 \001(\010\022\"\n\032obstacle_avoidance_paddi"
  "ng\030\004 \001(\001\"b\n\rTerrainParams\0224\n\016ground_mu_h"
  "int\030\002 \001(\0132\034.google.protobuf.DoubleValue\022"
  "\033\n\023enable_grated_floor\030\003 \001(\010\"\276\002\n\027BodyExt"
  "ernalForceParams\022a\n\030external_force_indic"
  "ator\030\001 \001(\0162\?.bosdyn.api.spot.BodyExterna"
  "lForceParams.ExternalForceIndicator\022\022\n\nf"
  "rame_name\030\004 \001(\t\0221\n\027external_force_overri"
  "de\030\003 \001(\0132\020.bosdyn.api.Vec3\"s\n\026ExternalFo"
  "rceIndicator\022\027\n\023EXTERNAL_FORCE_NONE\020\000\022\037\n"
  "\033EXTERNAL_FORCE_USE_ESTIMATE\020\001\022\037\n\033EXTERN"
  "AL_FORCE_USE_OVERRIDE\020\002J\004\010\002\020\003*\377\001\n\016Locomo"
  "tionHint\022\020\n\014HINT_UNKNOWN\020\000\022\r\n\tHINT_AUTO\020"
  "\001\022\r\n\tHINT_TROT\020\002\022\032\n\026HINT_SPEED_SELECT_TR"
  "OT\020\003\022\016\n\nHINT_CRAWL\020\004\022\033\n\027HINT_SPEED_SELEC"
  "T_CRAWL\020\n\022\016\n\nHINT_AMBLE\020\005\022\033\n\027HINT_SPEED_"
  "SELECT_AMBLE\020\006\022\014\n\010HINT_JOG\020\007\022\014\n\010HINT_HOP"
  "\020\010\022\022\n\016HINT_AUTO_TROT\020\003\022\023\n\017HINT_AUTO_AMBL"
  "E\020\006\032\002\020\001*m\n\013SwingHeight\022\030\n\024SWING_HEIGHT_U"
  "NKNOWN\020\000\022\024\n\020SWING_HEIGHT_LOW\020\001\022\027\n\023SWING_"
  "HEIGHT_MEDIUM\020\002\022\025\n\021SWING_HEIGHT_HIGH\020\003B\023"
  "B\021RobotCommandProtob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto_deps[3] = {
  &::descriptor_table_bosdyn_2fapi_2fgeometry_2eproto,
  &::descriptor_table_bosdyn_2fapi_2ftrajectory_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto_sccs[5] = {
  &scc_info_BodyControlParams_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto.base,
  &scc_info_BodyExternalForceParams_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto.base,
  &scc_info_MobilityParams_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto.base,
  &scc_info_ObstacleParams_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto.base,
  &scc_info_TerrainParams_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto = {
  false, false, descriptor_table_protodef_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto, "bosdyn/api/spot/robot_command.proto", 2027,
  &descriptor_table_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto_once, descriptor_table_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto_sccs, descriptor_table_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto_deps, 5, 3,
  schemas, file_default_instances, TableStruct_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto::offsets,
  file_level_metadata_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto, 5, file_level_enum_descriptors_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto, file_level_service_descriptors_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto)), true);
namespace bosdyn {
namespace api {
namespace spot {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BodyControlParams_RotationSetting_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto[0];
}
bool BodyControlParams_RotationSetting_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BodyControlParams_RotationSetting BodyControlParams::ROTATION_SETTING_UNKNOWN;
constexpr BodyControlParams_RotationSetting BodyControlParams::ROTATION_SETTING_OFFSET;
constexpr BodyControlParams_RotationSetting BodyControlParams::ROTATION_SETTING_ABSOLUTE;
constexpr BodyControlParams_RotationSetting BodyControlParams::RotationSetting_MIN;
constexpr BodyControlParams_RotationSetting BodyControlParams::RotationSetting_MAX;
constexpr int BodyControlParams::RotationSetting_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BodyExternalForceParams_ExternalForceIndicator_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto[1];
}
bool BodyExternalForceParams_ExternalForceIndicator_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BodyExternalForceParams_ExternalForceIndicator BodyExternalForceParams::EXTERNAL_FORCE_NONE;
constexpr BodyExternalForceParams_ExternalForceIndicator BodyExternalForceParams::EXTERNAL_FORCE_USE_ESTIMATE;
constexpr BodyExternalForceParams_ExternalForceIndicator BodyExternalForceParams::EXTERNAL_FORCE_USE_OVERRIDE;
constexpr BodyExternalForceParams_ExternalForceIndicator BodyExternalForceParams::ExternalForceIndicator_MIN;
constexpr BodyExternalForceParams_ExternalForceIndicator BodyExternalForceParams::ExternalForceIndicator_MAX;
constexpr int BodyExternalForceParams::ExternalForceIndicator_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LocomotionHint_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto[2];
}
bool LocomotionHint_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SwingHeight_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto[3];
}
bool SwingHeight_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void MobilityParams::InitAsDefaultInstance() {
  ::bosdyn::api::spot::_MobilityParams_default_instance_._instance.get_mutable()->vel_limit_ = const_cast< ::bosdyn::api::SE2VelocityLimit*>(
      ::bosdyn::api::SE2VelocityLimit::internal_default_instance());
  ::bosdyn::api::spot::_MobilityParams_default_instance_._instance.get_mutable()->body_control_ = const_cast< ::bosdyn::api::spot::BodyControlParams*>(
      ::bosdyn::api::spot::BodyControlParams::internal_default_instance());
  ::bosdyn::api::spot::_MobilityParams_default_instance_._instance.get_mutable()->obstacle_params_ = const_cast< ::bosdyn::api::spot::ObstacleParams*>(
      ::bosdyn::api::spot::ObstacleParams::internal_default_instance());
  ::bosdyn::api::spot::_MobilityParams_default_instance_._instance.get_mutable()->terrain_params_ = const_cast< ::bosdyn::api::spot::TerrainParams*>(
      ::bosdyn::api::spot::TerrainParams::internal_default_instance());
  ::bosdyn::api::spot::_MobilityParams_default_instance_._instance.get_mutable()->external_force_params_ = const_cast< ::bosdyn::api::spot::BodyExternalForceParams*>(
      ::bosdyn::api::spot::BodyExternalForceParams::internal_default_instance());
}
class MobilityParams::_Internal {
 public:
  static const ::bosdyn::api::SE2VelocityLimit& vel_limit(const MobilityParams* msg);
  static const ::bosdyn::api::spot::BodyControlParams& body_control(const MobilityParams* msg);
  static const ::bosdyn::api::spot::ObstacleParams& obstacle_params(const MobilityParams* msg);
  static const ::bosdyn::api::spot::TerrainParams& terrain_params(const MobilityParams* msg);
  static const ::bosdyn::api::spot::BodyExternalForceParams& external_force_params(const MobilityParams* msg);
};

const ::bosdyn::api::SE2VelocityLimit&
MobilityParams::_Internal::vel_limit(const MobilityParams* msg) {
  return *msg->vel_limit_;
}
const ::bosdyn::api::spot::BodyControlParams&
MobilityParams::_Internal::body_control(const MobilityParams* msg) {
  return *msg->body_control_;
}
const ::bosdyn::api::spot::ObstacleParams&
MobilityParams::_Internal::obstacle_params(const MobilityParams* msg) {
  return *msg->obstacle_params_;
}
const ::bosdyn::api::spot::TerrainParams&
MobilityParams::_Internal::terrain_params(const MobilityParams* msg) {
  return *msg->terrain_params_;
}
const ::bosdyn::api::spot::BodyExternalForceParams&
MobilityParams::_Internal::external_force_params(const MobilityParams* msg) {
  return *msg->external_force_params_;
}
void MobilityParams::clear_vel_limit() {
  if (GetArena() == nullptr && vel_limit_ != nullptr) {
    delete vel_limit_;
  }
  vel_limit_ = nullptr;
}
MobilityParams::MobilityParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot.MobilityParams)
}
MobilityParams::MobilityParams(const MobilityParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vel_limit()) {
    vel_limit_ = new ::bosdyn::api::SE2VelocityLimit(*from.vel_limit_);
  } else {
    vel_limit_ = nullptr;
  }
  if (from._internal_has_body_control()) {
    body_control_ = new ::bosdyn::api::spot::BodyControlParams(*from.body_control_);
  } else {
    body_control_ = nullptr;
  }
  if (from._internal_has_obstacle_params()) {
    obstacle_params_ = new ::bosdyn::api::spot::ObstacleParams(*from.obstacle_params_);
  } else {
    obstacle_params_ = nullptr;
  }
  if (from._internal_has_terrain_params()) {
    terrain_params_ = new ::bosdyn::api::spot::TerrainParams(*from.terrain_params_);
  } else {
    terrain_params_ = nullptr;
  }
  if (from._internal_has_external_force_params()) {
    external_force_params_ = new ::bosdyn::api::spot::BodyExternalForceParams(*from.external_force_params_);
  } else {
    external_force_params_ = nullptr;
  }
  ::memcpy(&locomotion_hint_, &from.locomotion_hint_,
    static_cast<size_t>(reinterpret_cast<char*>(&disable_nearmap_cliff_avoidance_) -
    reinterpret_cast<char*>(&locomotion_hint_)) + sizeof(disable_nearmap_cliff_avoidance_));
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot.MobilityParams)
}

void MobilityParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MobilityParams_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto.base);
  ::memset(&vel_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disable_nearmap_cliff_avoidance_) -
      reinterpret_cast<char*>(&vel_limit_)) + sizeof(disable_nearmap_cliff_avoidance_));
}

MobilityParams::~MobilityParams() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot.MobilityParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MobilityParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete vel_limit_;
  if (this != internal_default_instance()) delete body_control_;
  if (this != internal_default_instance()) delete obstacle_params_;
  if (this != internal_default_instance()) delete terrain_params_;
  if (this != internal_default_instance()) delete external_force_params_;
}

void MobilityParams::ArenaDtor(void* object) {
  MobilityParams* _this = reinterpret_cast< MobilityParams* >(object);
  (void)_this;
}
void MobilityParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MobilityParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MobilityParams& MobilityParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MobilityParams_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto.base);
  return *internal_default_instance();
}


void MobilityParams::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot.MobilityParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && vel_limit_ != nullptr) {
    delete vel_limit_;
  }
  vel_limit_ = nullptr;
  if (GetArena() == nullptr && body_control_ != nullptr) {
    delete body_control_;
  }
  body_control_ = nullptr;
  if (GetArena() == nullptr && obstacle_params_ != nullptr) {
    delete obstacle_params_;
  }
  obstacle_params_ = nullptr;
  if (GetArena() == nullptr && terrain_params_ != nullptr) {
    delete terrain_params_;
  }
  terrain_params_ = nullptr;
  if (GetArena() == nullptr && external_force_params_ != nullptr) {
    delete external_force_params_;
  }
  external_force_params_ = nullptr;
  ::memset(&locomotion_hint_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disable_nearmap_cliff_avoidance_) -
      reinterpret_cast<char*>(&locomotion_hint_)) + sizeof(disable_nearmap_cliff_avoidance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MobilityParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.SE2VelocityLimit vel_limit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vel_limit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.spot.BodyControlParams body_control = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_body_control(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.spot.LocomotionHint locomotion_hint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_locomotion_hint(static_cast<::bosdyn::api::spot::LocomotionHint>(val));
        } else goto handle_unusual;
        continue;
      // bool stair_hint = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          stair_hint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool allow_degraded_perception = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          allow_degraded_perception_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.spot.ObstacleParams obstacle_params = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_obstacle_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.spot.SwingHeight swing_height = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_swing_height(static_cast<::bosdyn::api::spot::SwingHeight>(val));
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.spot.TerrainParams terrain_params = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_terrain_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool disallow_stair_tracker = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          disallow_stair_tracker_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.spot.BodyExternalForceParams external_force_params = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_external_force_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool disallow_non_stairs_pitch_limiting = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          disallow_non_stairs_pitch_limiting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool disable_nearmap_cliff_avoidance = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          disable_nearmap_cliff_avoidance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MobilityParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot.MobilityParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.SE2VelocityLimit vel_limit = 1;
  if (this->has_vel_limit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::vel_limit(this), target, stream);
  }

  // .bosdyn.api.spot.BodyControlParams body_control = 2;
  if (this->has_body_control()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::body_control(this), target, stream);
  }

  // .bosdyn.api.spot.LocomotionHint locomotion_hint = 3;
  if (this->locomotion_hint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_locomotion_hint(), target);
  }

  // bool stair_hint = 4;
  if (this->stair_hint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_stair_hint(), target);
  }

  // bool allow_degraded_perception = 5;
  if (this->allow_degraded_perception() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_allow_degraded_perception(), target);
  }

  // .bosdyn.api.spot.ObstacleParams obstacle_params = 6;
  if (this->has_obstacle_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::obstacle_params(this), target, stream);
  }

  // .bosdyn.api.spot.SwingHeight swing_height = 7;
  if (this->swing_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_swing_height(), target);
  }

  // .bosdyn.api.spot.TerrainParams terrain_params = 8;
  if (this->has_terrain_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::terrain_params(this), target, stream);
  }

  // bool disallow_stair_tracker = 9;
  if (this->disallow_stair_tracker() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_disallow_stair_tracker(), target);
  }

  // .bosdyn.api.spot.BodyExternalForceParams external_force_params = 10;
  if (this->has_external_force_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::external_force_params(this), target, stream);
  }

  // bool disallow_non_stairs_pitch_limiting = 11;
  if (this->disallow_non_stairs_pitch_limiting() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_disallow_non_stairs_pitch_limiting(), target);
  }

  // bool disable_nearmap_cliff_avoidance = 12;
  if (this->disable_nearmap_cliff_avoidance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_disable_nearmap_cliff_avoidance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot.MobilityParams)
  return target;
}

size_t MobilityParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot.MobilityParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.SE2VelocityLimit vel_limit = 1;
  if (this->has_vel_limit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vel_limit_);
  }

  // .bosdyn.api.spot.BodyControlParams body_control = 2;
  if (this->has_body_control()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *body_control_);
  }

  // .bosdyn.api.spot.ObstacleParams obstacle_params = 6;
  if (this->has_obstacle_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *obstacle_params_);
  }

  // .bosdyn.api.spot.TerrainParams terrain_params = 8;
  if (this->has_terrain_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *terrain_params_);
  }

  // .bosdyn.api.spot.BodyExternalForceParams external_force_params = 10;
  if (this->has_external_force_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *external_force_params_);
  }

  // .bosdyn.api.spot.LocomotionHint locomotion_hint = 3;
  if (this->locomotion_hint() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_locomotion_hint());
  }

  // .bosdyn.api.spot.SwingHeight swing_height = 7;
  if (this->swing_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_swing_height());
  }

  // bool stair_hint = 4;
  if (this->stair_hint() != 0) {
    total_size += 1 + 1;
  }

  // bool allow_degraded_perception = 5;
  if (this->allow_degraded_perception() != 0) {
    total_size += 1 + 1;
  }

  // bool disallow_stair_tracker = 9;
  if (this->disallow_stair_tracker() != 0) {
    total_size += 1 + 1;
  }

  // bool disallow_non_stairs_pitch_limiting = 11;
  if (this->disallow_non_stairs_pitch_limiting() != 0) {
    total_size += 1 + 1;
  }

  // bool disable_nearmap_cliff_avoidance = 12;
  if (this->disable_nearmap_cliff_avoidance() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MobilityParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot.MobilityParams)
  GOOGLE_DCHECK_NE(&from, this);
  const MobilityParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MobilityParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot.MobilityParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot.MobilityParams)
    MergeFrom(*source);
  }
}

void MobilityParams::MergeFrom(const MobilityParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot.MobilityParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_vel_limit()) {
    _internal_mutable_vel_limit()->::bosdyn::api::SE2VelocityLimit::MergeFrom(from._internal_vel_limit());
  }
  if (from.has_body_control()) {
    _internal_mutable_body_control()->::bosdyn::api::spot::BodyControlParams::MergeFrom(from._internal_body_control());
  }
  if (from.has_obstacle_params()) {
    _internal_mutable_obstacle_params()->::bosdyn::api::spot::ObstacleParams::MergeFrom(from._internal_obstacle_params());
  }
  if (from.has_terrain_params()) {
    _internal_mutable_terrain_params()->::bosdyn::api::spot::TerrainParams::MergeFrom(from._internal_terrain_params());
  }
  if (from.has_external_force_params()) {
    _internal_mutable_external_force_params()->::bosdyn::api::spot::BodyExternalForceParams::MergeFrom(from._internal_external_force_params());
  }
  if (from.locomotion_hint() != 0) {
    _internal_set_locomotion_hint(from._internal_locomotion_hint());
  }
  if (from.swing_height() != 0) {
    _internal_set_swing_height(from._internal_swing_height());
  }
  if (from.stair_hint() != 0) {
    _internal_set_stair_hint(from._internal_stair_hint());
  }
  if (from.allow_degraded_perception() != 0) {
    _internal_set_allow_degraded_perception(from._internal_allow_degraded_perception());
  }
  if (from.disallow_stair_tracker() != 0) {
    _internal_set_disallow_stair_tracker(from._internal_disallow_stair_tracker());
  }
  if (from.disallow_non_stairs_pitch_limiting() != 0) {
    _internal_set_disallow_non_stairs_pitch_limiting(from._internal_disallow_non_stairs_pitch_limiting());
  }
  if (from.disable_nearmap_cliff_avoidance() != 0) {
    _internal_set_disable_nearmap_cliff_avoidance(from._internal_disable_nearmap_cliff_avoidance());
  }
}

void MobilityParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot.MobilityParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MobilityParams::CopyFrom(const MobilityParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot.MobilityParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MobilityParams::IsInitialized() const {
  return true;
}

void MobilityParams::InternalSwap(MobilityParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MobilityParams, disable_nearmap_cliff_avoidance_)
      + sizeof(MobilityParams::disable_nearmap_cliff_avoidance_)
      - PROTOBUF_FIELD_OFFSET(MobilityParams, vel_limit_)>(
          reinterpret_cast<char*>(&vel_limit_),
          reinterpret_cast<char*>(&other->vel_limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MobilityParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BodyControlParams::InitAsDefaultInstance() {
  ::bosdyn::api::spot::_BodyControlParams_default_instance_._instance.get_mutable()->base_offset_rt_footprint_ = const_cast< ::bosdyn::api::SE3Trajectory*>(
      ::bosdyn::api::SE3Trajectory::internal_default_instance());
}
class BodyControlParams::_Internal {
 public:
  static const ::bosdyn::api::SE3Trajectory& base_offset_rt_footprint(const BodyControlParams* msg);
};

const ::bosdyn::api::SE3Trajectory&
BodyControlParams::_Internal::base_offset_rt_footprint(const BodyControlParams* msg) {
  return *msg->base_offset_rt_footprint_;
}
void BodyControlParams::clear_base_offset_rt_footprint() {
  if (GetArena() == nullptr && base_offset_rt_footprint_ != nullptr) {
    delete base_offset_rt_footprint_;
  }
  base_offset_rt_footprint_ = nullptr;
}
BodyControlParams::BodyControlParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot.BodyControlParams)
}
BodyControlParams::BodyControlParams(const BodyControlParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base_offset_rt_footprint()) {
    base_offset_rt_footprint_ = new ::bosdyn::api::SE3Trajectory(*from.base_offset_rt_footprint_);
  } else {
    base_offset_rt_footprint_ = nullptr;
  }
  rotation_setting_ = from.rotation_setting_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot.BodyControlParams)
}

void BodyControlParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BodyControlParams_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto.base);
  ::memset(&base_offset_rt_footprint_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotation_setting_) -
      reinterpret_cast<char*>(&base_offset_rt_footprint_)) + sizeof(rotation_setting_));
}

BodyControlParams::~BodyControlParams() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot.BodyControlParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BodyControlParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete base_offset_rt_footprint_;
}

void BodyControlParams::ArenaDtor(void* object) {
  BodyControlParams* _this = reinterpret_cast< BodyControlParams* >(object);
  (void)_this;
}
void BodyControlParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BodyControlParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BodyControlParams& BodyControlParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BodyControlParams_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto.base);
  return *internal_default_instance();
}


void BodyControlParams::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot.BodyControlParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && base_offset_rt_footprint_ != nullptr) {
    delete base_offset_rt_footprint_;
  }
  base_offset_rt_footprint_ = nullptr;
  rotation_setting_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BodyControlParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.SE3Trajectory base_offset_rt_footprint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_offset_rt_footprint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.spot.BodyControlParams.RotationSetting rotation_setting = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_rotation_setting(static_cast<::bosdyn::api::spot::BodyControlParams_RotationSetting>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BodyControlParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot.BodyControlParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.SE3Trajectory base_offset_rt_footprint = 1;
  if (this->has_base_offset_rt_footprint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::base_offset_rt_footprint(this), target, stream);
  }

  // .bosdyn.api.spot.BodyControlParams.RotationSetting rotation_setting = 2;
  if (this->rotation_setting() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_rotation_setting(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot.BodyControlParams)
  return target;
}

size_t BodyControlParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot.BodyControlParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.SE3Trajectory base_offset_rt_footprint = 1;
  if (this->has_base_offset_rt_footprint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_offset_rt_footprint_);
  }

  // .bosdyn.api.spot.BodyControlParams.RotationSetting rotation_setting = 2;
  if (this->rotation_setting() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rotation_setting());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BodyControlParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot.BodyControlParams)
  GOOGLE_DCHECK_NE(&from, this);
  const BodyControlParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BodyControlParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot.BodyControlParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot.BodyControlParams)
    MergeFrom(*source);
  }
}

void BodyControlParams::MergeFrom(const BodyControlParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot.BodyControlParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_base_offset_rt_footprint()) {
    _internal_mutable_base_offset_rt_footprint()->::bosdyn::api::SE3Trajectory::MergeFrom(from._internal_base_offset_rt_footprint());
  }
  if (from.rotation_setting() != 0) {
    _internal_set_rotation_setting(from._internal_rotation_setting());
  }
}

void BodyControlParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot.BodyControlParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BodyControlParams::CopyFrom(const BodyControlParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot.BodyControlParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BodyControlParams::IsInitialized() const {
  return true;
}

void BodyControlParams::InternalSwap(BodyControlParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BodyControlParams, rotation_setting_)
      + sizeof(BodyControlParams::rotation_setting_)
      - PROTOBUF_FIELD_OFFSET(BodyControlParams, base_offset_rt_footprint_)>(
          reinterpret_cast<char*>(&base_offset_rt_footprint_),
          reinterpret_cast<char*>(&other->base_offset_rt_footprint_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BodyControlParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ObstacleParams::InitAsDefaultInstance() {
}
class ObstacleParams::_Internal {
 public:
};

ObstacleParams::ObstacleParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot.ObstacleParams)
}
ObstacleParams::ObstacleParams(const ObstacleParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&obstacle_avoidance_padding_, &from.obstacle_avoidance_padding_,
    static_cast<size_t>(reinterpret_cast<char*>(&disable_vision_body_obstacle_avoidance_) -
    reinterpret_cast<char*>(&obstacle_avoidance_padding_)) + sizeof(disable_vision_body_obstacle_avoidance_));
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot.ObstacleParams)
}

void ObstacleParams::SharedCtor() {
  ::memset(&obstacle_avoidance_padding_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disable_vision_body_obstacle_avoidance_) -
      reinterpret_cast<char*>(&obstacle_avoidance_padding_)) + sizeof(disable_vision_body_obstacle_avoidance_));
}

ObstacleParams::~ObstacleParams() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot.ObstacleParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObstacleParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ObstacleParams::ArenaDtor(void* object) {
  ObstacleParams* _this = reinterpret_cast< ObstacleParams* >(object);
  (void)_this;
}
void ObstacleParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObstacleParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ObstacleParams& ObstacleParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ObstacleParams_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto.base);
  return *internal_default_instance();
}


void ObstacleParams::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot.ObstacleParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&obstacle_avoidance_padding_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disable_vision_body_obstacle_avoidance_) -
      reinterpret_cast<char*>(&obstacle_avoidance_padding_)) + sizeof(disable_vision_body_obstacle_avoidance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObstacleParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool disable_vision_foot_obstacle_avoidance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          disable_vision_foot_obstacle_avoidance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool disable_vision_foot_constraint_avoidance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          disable_vision_foot_constraint_avoidance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool disable_vision_body_obstacle_avoidance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          disable_vision_body_obstacle_avoidance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double obstacle_avoidance_padding = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          obstacle_avoidance_padding_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObstacleParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot.ObstacleParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool disable_vision_foot_obstacle_avoidance = 1;
  if (this->disable_vision_foot_obstacle_avoidance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_disable_vision_foot_obstacle_avoidance(), target);
  }

  // bool disable_vision_foot_constraint_avoidance = 2;
  if (this->disable_vision_foot_constraint_avoidance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_disable_vision_foot_constraint_avoidance(), target);
  }

  // bool disable_vision_body_obstacle_avoidance = 3;
  if (this->disable_vision_body_obstacle_avoidance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_disable_vision_body_obstacle_avoidance(), target);
  }

  // double obstacle_avoidance_padding = 4;
  if (!(this->obstacle_avoidance_padding() <= 0 && this->obstacle_avoidance_padding() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_obstacle_avoidance_padding(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot.ObstacleParams)
  return target;
}

size_t ObstacleParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot.ObstacleParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double obstacle_avoidance_padding = 4;
  if (!(this->obstacle_avoidance_padding() <= 0 && this->obstacle_avoidance_padding() >= 0)) {
    total_size += 1 + 8;
  }

  // bool disable_vision_foot_obstacle_avoidance = 1;
  if (this->disable_vision_foot_obstacle_avoidance() != 0) {
    total_size += 1 + 1;
  }

  // bool disable_vision_foot_constraint_avoidance = 2;
  if (this->disable_vision_foot_constraint_avoidance() != 0) {
    total_size += 1 + 1;
  }

  // bool disable_vision_body_obstacle_avoidance = 3;
  if (this->disable_vision_body_obstacle_avoidance() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObstacleParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot.ObstacleParams)
  GOOGLE_DCHECK_NE(&from, this);
  const ObstacleParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObstacleParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot.ObstacleParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot.ObstacleParams)
    MergeFrom(*source);
  }
}

void ObstacleParams::MergeFrom(const ObstacleParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot.ObstacleParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.obstacle_avoidance_padding() <= 0 && from.obstacle_avoidance_padding() >= 0)) {
    _internal_set_obstacle_avoidance_padding(from._internal_obstacle_avoidance_padding());
  }
  if (from.disable_vision_foot_obstacle_avoidance() != 0) {
    _internal_set_disable_vision_foot_obstacle_avoidance(from._internal_disable_vision_foot_obstacle_avoidance());
  }
  if (from.disable_vision_foot_constraint_avoidance() != 0) {
    _internal_set_disable_vision_foot_constraint_avoidance(from._internal_disable_vision_foot_constraint_avoidance());
  }
  if (from.disable_vision_body_obstacle_avoidance() != 0) {
    _internal_set_disable_vision_body_obstacle_avoidance(from._internal_disable_vision_body_obstacle_avoidance());
  }
}

void ObstacleParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot.ObstacleParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleParams::CopyFrom(const ObstacleParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot.ObstacleParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleParams::IsInitialized() const {
  return true;
}

void ObstacleParams::InternalSwap(ObstacleParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObstacleParams, disable_vision_body_obstacle_avoidance_)
      + sizeof(ObstacleParams::disable_vision_body_obstacle_avoidance_)
      - PROTOBUF_FIELD_OFFSET(ObstacleParams, obstacle_avoidance_padding_)>(
          reinterpret_cast<char*>(&obstacle_avoidance_padding_),
          reinterpret_cast<char*>(&other->obstacle_avoidance_padding_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObstacleParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TerrainParams::InitAsDefaultInstance() {
  ::bosdyn::api::spot::_TerrainParams_default_instance_._instance.get_mutable()->ground_mu_hint_ = const_cast< PROTOBUF_NAMESPACE_ID::DoubleValue*>(
      PROTOBUF_NAMESPACE_ID::DoubleValue::internal_default_instance());
}
class TerrainParams::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::DoubleValue& ground_mu_hint(const TerrainParams* msg);
};

const PROTOBUF_NAMESPACE_ID::DoubleValue&
TerrainParams::_Internal::ground_mu_hint(const TerrainParams* msg) {
  return *msg->ground_mu_hint_;
}
void TerrainParams::clear_ground_mu_hint() {
  if (GetArena() == nullptr && ground_mu_hint_ != nullptr) {
    delete ground_mu_hint_;
  }
  ground_mu_hint_ = nullptr;
}
TerrainParams::TerrainParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot.TerrainParams)
}
TerrainParams::TerrainParams(const TerrainParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ground_mu_hint()) {
    ground_mu_hint_ = new PROTOBUF_NAMESPACE_ID::DoubleValue(*from.ground_mu_hint_);
  } else {
    ground_mu_hint_ = nullptr;
  }
  enable_grated_floor_ = from.enable_grated_floor_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot.TerrainParams)
}

void TerrainParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TerrainParams_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto.base);
  ::memset(&ground_mu_hint_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_grated_floor_) -
      reinterpret_cast<char*>(&ground_mu_hint_)) + sizeof(enable_grated_floor_));
}

TerrainParams::~TerrainParams() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot.TerrainParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TerrainParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ground_mu_hint_;
}

void TerrainParams::ArenaDtor(void* object) {
  TerrainParams* _this = reinterpret_cast< TerrainParams* >(object);
  (void)_this;
}
void TerrainParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TerrainParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TerrainParams& TerrainParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TerrainParams_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto.base);
  return *internal_default_instance();
}


void TerrainParams::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot.TerrainParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && ground_mu_hint_ != nullptr) {
    delete ground_mu_hint_;
  }
  ground_mu_hint_ = nullptr;
  enable_grated_floor_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TerrainParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.DoubleValue ground_mu_hint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ground_mu_hint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable_grated_floor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          enable_grated_floor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TerrainParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot.TerrainParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.DoubleValue ground_mu_hint = 2;
  if (this->has_ground_mu_hint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ground_mu_hint(this), target, stream);
  }

  // bool enable_grated_floor = 3;
  if (this->enable_grated_floor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_enable_grated_floor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot.TerrainParams)
  return target;
}

size_t TerrainParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot.TerrainParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.DoubleValue ground_mu_hint = 2;
  if (this->has_ground_mu_hint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ground_mu_hint_);
  }

  // bool enable_grated_floor = 3;
  if (this->enable_grated_floor() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TerrainParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot.TerrainParams)
  GOOGLE_DCHECK_NE(&from, this);
  const TerrainParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TerrainParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot.TerrainParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot.TerrainParams)
    MergeFrom(*source);
  }
}

void TerrainParams::MergeFrom(const TerrainParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot.TerrainParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ground_mu_hint()) {
    _internal_mutable_ground_mu_hint()->PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from._internal_ground_mu_hint());
  }
  if (from.enable_grated_floor() != 0) {
    _internal_set_enable_grated_floor(from._internal_enable_grated_floor());
  }
}

void TerrainParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot.TerrainParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TerrainParams::CopyFrom(const TerrainParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot.TerrainParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TerrainParams::IsInitialized() const {
  return true;
}

void TerrainParams::InternalSwap(TerrainParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TerrainParams, enable_grated_floor_)
      + sizeof(TerrainParams::enable_grated_floor_)
      - PROTOBUF_FIELD_OFFSET(TerrainParams, ground_mu_hint_)>(
          reinterpret_cast<char*>(&ground_mu_hint_),
          reinterpret_cast<char*>(&other->ground_mu_hint_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TerrainParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BodyExternalForceParams::InitAsDefaultInstance() {
  ::bosdyn::api::spot::_BodyExternalForceParams_default_instance_._instance.get_mutable()->external_force_override_ = const_cast< ::bosdyn::api::Vec3*>(
      ::bosdyn::api::Vec3::internal_default_instance());
}
class BodyExternalForceParams::_Internal {
 public:
  static const ::bosdyn::api::Vec3& external_force_override(const BodyExternalForceParams* msg);
};

const ::bosdyn::api::Vec3&
BodyExternalForceParams::_Internal::external_force_override(const BodyExternalForceParams* msg) {
  return *msg->external_force_override_;
}
void BodyExternalForceParams::clear_external_force_override() {
  if (GetArena() == nullptr && external_force_override_ != nullptr) {
    delete external_force_override_;
  }
  external_force_override_ = nullptr;
}
BodyExternalForceParams::BodyExternalForceParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot.BodyExternalForceParams)
}
BodyExternalForceParams::BodyExternalForceParams(const BodyExternalForceParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  frame_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_frame_name().empty()) {
    frame_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_frame_name(),
      GetArena());
  }
  if (from._internal_has_external_force_override()) {
    external_force_override_ = new ::bosdyn::api::Vec3(*from.external_force_override_);
  } else {
    external_force_override_ = nullptr;
  }
  external_force_indicator_ = from.external_force_indicator_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot.BodyExternalForceParams)
}

void BodyExternalForceParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BodyExternalForceParams_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto.base);
  frame_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&external_force_override_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&external_force_indicator_) -
      reinterpret_cast<char*>(&external_force_override_)) + sizeof(external_force_indicator_));
}

BodyExternalForceParams::~BodyExternalForceParams() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot.BodyExternalForceParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BodyExternalForceParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  frame_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete external_force_override_;
}

void BodyExternalForceParams::ArenaDtor(void* object) {
  BodyExternalForceParams* _this = reinterpret_cast< BodyExternalForceParams* >(object);
  (void)_this;
}
void BodyExternalForceParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BodyExternalForceParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BodyExternalForceParams& BodyExternalForceParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BodyExternalForceParams_bosdyn_2fapi_2fspot_2frobot_5fcommand_2eproto.base);
  return *internal_default_instance();
}


void BodyExternalForceParams::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot.BodyExternalForceParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frame_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && external_force_override_ != nullptr) {
    delete external_force_override_;
  }
  external_force_override_ = nullptr;
  external_force_indicator_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BodyExternalForceParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.spot.BodyExternalForceParams.ExternalForceIndicator external_force_indicator = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_external_force_indicator(static_cast<::bosdyn::api::spot::BodyExternalForceParams_ExternalForceIndicator>(val));
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.Vec3 external_force_override = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_external_force_override(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string frame_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_frame_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.spot.BodyExternalForceParams.frame_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BodyExternalForceParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot.BodyExternalForceParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.spot.BodyExternalForceParams.ExternalForceIndicator external_force_indicator = 1;
  if (this->external_force_indicator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_external_force_indicator(), target);
  }

  // .bosdyn.api.Vec3 external_force_override = 3;
  if (this->has_external_force_override()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::external_force_override(this), target, stream);
  }

  // string frame_name = 4;
  if (this->frame_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_frame_name().data(), static_cast<int>(this->_internal_frame_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.spot.BodyExternalForceParams.frame_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_frame_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot.BodyExternalForceParams)
  return target;
}

size_t BodyExternalForceParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot.BodyExternalForceParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string frame_name = 4;
  if (this->frame_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_frame_name());
  }

  // .bosdyn.api.Vec3 external_force_override = 3;
  if (this->has_external_force_override()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *external_force_override_);
  }

  // .bosdyn.api.spot.BodyExternalForceParams.ExternalForceIndicator external_force_indicator = 1;
  if (this->external_force_indicator() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_external_force_indicator());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BodyExternalForceParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot.BodyExternalForceParams)
  GOOGLE_DCHECK_NE(&from, this);
  const BodyExternalForceParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BodyExternalForceParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot.BodyExternalForceParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot.BodyExternalForceParams)
    MergeFrom(*source);
  }
}

void BodyExternalForceParams::MergeFrom(const BodyExternalForceParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot.BodyExternalForceParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.frame_name().size() > 0) {
    _internal_set_frame_name(from._internal_frame_name());
  }
  if (from.has_external_force_override()) {
    _internal_mutable_external_force_override()->::bosdyn::api::Vec3::MergeFrom(from._internal_external_force_override());
  }
  if (from.external_force_indicator() != 0) {
    _internal_set_external_force_indicator(from._internal_external_force_indicator());
  }
}

void BodyExternalForceParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot.BodyExternalForceParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BodyExternalForceParams::CopyFrom(const BodyExternalForceParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot.BodyExternalForceParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BodyExternalForceParams::IsInitialized() const {
  return true;
}

void BodyExternalForceParams::InternalSwap(BodyExternalForceParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  frame_name_.Swap(&other->frame_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BodyExternalForceParams, external_force_indicator_)
      + sizeof(BodyExternalForceParams::external_force_indicator_)
      - PROTOBUF_FIELD_OFFSET(BodyExternalForceParams, external_force_override_)>(
          reinterpret_cast<char*>(&external_force_override_),
          reinterpret_cast<char*>(&other->external_force_override_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BodyExternalForceParams::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace spot
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot::MobilityParams* Arena::CreateMaybeMessage< ::bosdyn::api::spot::MobilityParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot::MobilityParams >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot::BodyControlParams* Arena::CreateMaybeMessage< ::bosdyn::api::spot::BodyControlParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot::BodyControlParams >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot::ObstacleParams* Arena::CreateMaybeMessage< ::bosdyn::api::spot::ObstacleParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot::ObstacleParams >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot::TerrainParams* Arena::CreateMaybeMessage< ::bosdyn::api::spot::TerrainParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot::TerrainParams >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot::BodyExternalForceParams* Arena::CreateMaybeMessage< ::bosdyn::api::spot::BodyExternalForceParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot::BodyExternalForceParams >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
