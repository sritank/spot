// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/spot/spot_check_service.proto

#include "bosdyn/api/spot/spot_check_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace bosdyn {
namespace api {
namespace spot {
}  // namespace spot
}  // namespace api
}  // namespace bosdyn
static constexpr ::PROTOBUF_NAMESPACE_ID::Metadata* file_level_metadata_bosdyn_2fapi_2fspot_2fspot_5fcheck_5fservice_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_bosdyn_2fapi_2fspot_2fspot_5fcheck_5fservice_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bosdyn_2fapi_2fspot_2fspot_5fcheck_5fservice_2eproto = nullptr;
const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bosdyn_2fapi_2fspot_2fspot_5fcheck_5fservice_2eproto::offsets[1] = {};
static constexpr ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema* schemas = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_bosdyn_2fapi_2fspot_2fspot_5fcheck_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n(bosdyn/api/spot/spot_check_service.pro"
  "to\022\017bosdyn.api.spot\032 bosdyn/api/spot/spo"
  "t_check.proto2\366\003\n\020SpotCheckService\022i\n\020Sp"
  "otCheckCommand\022(.bosdyn.api.spot.SpotChe"
  "ckCommandRequest\032).bosdyn.api.spot.SpotC"
  "heckCommandResponse\"\000\022l\n\021SpotCheckFeedba"
  "ck\022).bosdyn.api.spot.SpotCheckFeedbackRe"
  "quest\032*.bosdyn.api.spot.SpotCheckFeedbac"
  "kResponse\"\000\022\201\001\n\030CameraCalibrationCommand"
  "\0220.bosdyn.api.spot.CameraCalibrationComm"
  "andRequest\0321.bosdyn.api.spot.CameraCalib"
  "rationCommandResponse\"\000\022\204\001\n\031CameraCalibr"
  "ationFeedback\0221.bosdyn.api.spot.CameraCa"
  "librationFeedbackRequest\0322.bosdyn.api.sp"
  "ot.CameraCalibrationFeedbackResponse\"\000B\027"
  "B\025SpotCheckServiceProtob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bosdyn_2fapi_2fspot_2fspot_5fcheck_5fservice_2eproto_deps[1] = {
  &::descriptor_table_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bosdyn_2fapi_2fspot_2fspot_5fcheck_5fservice_2eproto_sccs[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bosdyn_2fapi_2fspot_2fspot_5fcheck_5fservice_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fspot_2fspot_5fcheck_5fservice_2eproto = {
  false, false, descriptor_table_protodef_bosdyn_2fapi_2fspot_2fspot_5fcheck_5fservice_2eproto, "bosdyn/api/spot/spot_check_service.proto", 631,
  &descriptor_table_bosdyn_2fapi_2fspot_2fspot_5fcheck_5fservice_2eproto_once, descriptor_table_bosdyn_2fapi_2fspot_2fspot_5fcheck_5fservice_2eproto_sccs, descriptor_table_bosdyn_2fapi_2fspot_2fspot_5fcheck_5fservice_2eproto_deps, 0, 1,
  schemas, file_default_instances, TableStruct_bosdyn_2fapi_2fspot_2fspot_5fcheck_5fservice_2eproto::offsets,
  file_level_metadata_bosdyn_2fapi_2fspot_2fspot_5fcheck_5fservice_2eproto, 0, file_level_enum_descriptors_bosdyn_2fapi_2fspot_2fspot_5fcheck_5fservice_2eproto, file_level_service_descriptors_bosdyn_2fapi_2fspot_2fspot_5fcheck_5fservice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bosdyn_2fapi_2fspot_2fspot_5fcheck_5fservice_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bosdyn_2fapi_2fspot_2fspot_5fcheck_5fservice_2eproto)), true);
namespace bosdyn {
namespace api {
namespace spot {

// @@protoc_insertion_point(namespace_scope)
}  // namespace spot
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
