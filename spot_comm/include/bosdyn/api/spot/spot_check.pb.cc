// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/spot/spot_check.proto

#include "bosdyn/api/spot/spot_check.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2flease_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Lease_bosdyn_2fapi_2flease_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2flease_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LeaseUseResult_bosdyn_2fapi_2flease_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DepthPlaneSpotCheckResult_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FootHeightCheckResult_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JointKinematicCheckResult_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LegPairCheckResult_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoadCellSpotCheckResult_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PayloadCheckResult_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpotCheckFeedbackResponse_CameraResultsEntry_DoNotUse_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpotCheckFeedbackResponse_FootHeightResultsEntry_DoNotUse_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpotCheckFeedbackResponse_KinematicCalResultsEntry_DoNotUse_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpotCheckFeedbackResponse_LegPairResultsEntry_DoNotUse_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpotCheckFeedbackResponse_LoadCellResultsEntry_DoNotUse_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace bosdyn {
namespace api {
namespace spot {
class SpotCheckCommandRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpotCheckCommandRequest> _instance;
} _SpotCheckCommandRequest_default_instance_;
class SpotCheckCommandResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpotCheckCommandResponse> _instance;
} _SpotCheckCommandResponse_default_instance_;
class SpotCheckFeedbackRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpotCheckFeedbackRequest> _instance;
} _SpotCheckFeedbackRequest_default_instance_;
class SpotCheckFeedbackResponse_CameraResultsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpotCheckFeedbackResponse_CameraResultsEntry_DoNotUse> _instance;
} _SpotCheckFeedbackResponse_CameraResultsEntry_DoNotUse_default_instance_;
class SpotCheckFeedbackResponse_LoadCellResultsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpotCheckFeedbackResponse_LoadCellResultsEntry_DoNotUse> _instance;
} _SpotCheckFeedbackResponse_LoadCellResultsEntry_DoNotUse_default_instance_;
class SpotCheckFeedbackResponse_KinematicCalResultsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpotCheckFeedbackResponse_KinematicCalResultsEntry_DoNotUse> _instance;
} _SpotCheckFeedbackResponse_KinematicCalResultsEntry_DoNotUse_default_instance_;
class SpotCheckFeedbackResponse_FootHeightResultsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpotCheckFeedbackResponse_FootHeightResultsEntry_DoNotUse> _instance;
} _SpotCheckFeedbackResponse_FootHeightResultsEntry_DoNotUse_default_instance_;
class SpotCheckFeedbackResponse_LegPairResultsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpotCheckFeedbackResponse_LegPairResultsEntry_DoNotUse> _instance;
} _SpotCheckFeedbackResponse_LegPairResultsEntry_DoNotUse_default_instance_;
class SpotCheckFeedbackResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpotCheckFeedbackResponse> _instance;
} _SpotCheckFeedbackResponse_default_instance_;
class DepthPlaneSpotCheckResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DepthPlaneSpotCheckResult> _instance;
} _DepthPlaneSpotCheckResult_default_instance_;
class PayloadCheckResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PayloadCheckResult> _instance;
} _PayloadCheckResult_default_instance_;
class LoadCellSpotCheckResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadCellSpotCheckResult> _instance;
} _LoadCellSpotCheckResult_default_instance_;
class JointKinematicCheckResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JointKinematicCheckResult> _instance;
} _JointKinematicCheckResult_default_instance_;
class FootHeightCheckResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FootHeightCheckResult> _instance;
} _FootHeightCheckResult_default_instance_;
class LegPairCheckResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LegPairCheckResult> _instance;
} _LegPairCheckResult_default_instance_;
class CameraCalibrationCommandRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CameraCalibrationCommandRequest> _instance;
} _CameraCalibrationCommandRequest_default_instance_;
class CameraCalibrationCommandResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CameraCalibrationCommandResponse> _instance;
} _CameraCalibrationCommandResponse_default_instance_;
class CameraCalibrationFeedbackRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CameraCalibrationFeedbackRequest> _instance;
} _CameraCalibrationFeedbackRequest_default_instance_;
class CameraCalibrationFeedbackResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CameraCalibrationFeedbackResponse> _instance;
} _CameraCalibrationFeedbackResponse_default_instance_;
}  // namespace spot
}  // namespace api
}  // namespace bosdyn
static void InitDefaultsscc_info_CameraCalibrationCommandRequest_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot::_CameraCalibrationCommandRequest_default_instance_;
    new (ptr) ::bosdyn::api::spot::CameraCalibrationCommandRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot::CameraCalibrationCommandRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CameraCalibrationCommandRequest_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CameraCalibrationCommandRequest_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_Lease_bosdyn_2fapi_2flease_2eproto.base,}};

static void InitDefaultsscc_info_CameraCalibrationCommandResponse_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot::_CameraCalibrationCommandResponse_default_instance_;
    new (ptr) ::bosdyn::api::spot::CameraCalibrationCommandResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot::CameraCalibrationCommandResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CameraCalibrationCommandResponse_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CameraCalibrationCommandResponse_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_LeaseUseResult_bosdyn_2fapi_2flease_2eproto.base,}};

static void InitDefaultsscc_info_CameraCalibrationFeedbackRequest_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot::_CameraCalibrationFeedbackRequest_default_instance_;
    new (ptr) ::bosdyn::api::spot::CameraCalibrationFeedbackRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot::CameraCalibrationFeedbackRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CameraCalibrationFeedbackRequest_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CameraCalibrationFeedbackRequest_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_CameraCalibrationFeedbackResponse_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot::_CameraCalibrationFeedbackResponse_default_instance_;
    new (ptr) ::bosdyn::api::spot::CameraCalibrationFeedbackResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot::CameraCalibrationFeedbackResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CameraCalibrationFeedbackResponse_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CameraCalibrationFeedbackResponse_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_DepthPlaneSpotCheckResult_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot::_DepthPlaneSpotCheckResult_default_instance_;
    new (ptr) ::bosdyn::api::spot::DepthPlaneSpotCheckResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot::DepthPlaneSpotCheckResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DepthPlaneSpotCheckResult_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DepthPlaneSpotCheckResult_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto}, {}};

static void InitDefaultsscc_info_FootHeightCheckResult_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot::_FootHeightCheckResult_default_instance_;
    new (ptr) ::bosdyn::api::spot::FootHeightCheckResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot::FootHeightCheckResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FootHeightCheckResult_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FootHeightCheckResult_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto}, {}};

static void InitDefaultsscc_info_JointKinematicCheckResult_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot::_JointKinematicCheckResult_default_instance_;
    new (ptr) ::bosdyn::api::spot::JointKinematicCheckResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot::JointKinematicCheckResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JointKinematicCheckResult_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_JointKinematicCheckResult_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto}, {}};

static void InitDefaultsscc_info_LegPairCheckResult_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot::_LegPairCheckResult_default_instance_;
    new (ptr) ::bosdyn::api::spot::LegPairCheckResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot::LegPairCheckResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LegPairCheckResult_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LegPairCheckResult_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto}, {}};

static void InitDefaultsscc_info_LoadCellSpotCheckResult_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot::_LoadCellSpotCheckResult_default_instance_;
    new (ptr) ::bosdyn::api::spot::LoadCellSpotCheckResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot::LoadCellSpotCheckResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoadCellSpotCheckResult_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoadCellSpotCheckResult_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto}, {}};

static void InitDefaultsscc_info_PayloadCheckResult_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot::_PayloadCheckResult_default_instance_;
    new (ptr) ::bosdyn::api::spot::PayloadCheckResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot::PayloadCheckResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PayloadCheckResult_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PayloadCheckResult_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto}, {}};

static void InitDefaultsscc_info_SpotCheckCommandRequest_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot::_SpotCheckCommandRequest_default_instance_;
    new (ptr) ::bosdyn::api::spot::SpotCheckCommandRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot::SpotCheckCommandRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SpotCheckCommandRequest_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SpotCheckCommandRequest_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_Lease_bosdyn_2fapi_2flease_2eproto.base,}};

static void InitDefaultsscc_info_SpotCheckCommandResponse_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot::_SpotCheckCommandResponse_default_instance_;
    new (ptr) ::bosdyn::api::spot::SpotCheckCommandResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot::SpotCheckCommandResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SpotCheckCommandResponse_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SpotCheckCommandResponse_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_LeaseUseResult_bosdyn_2fapi_2flease_2eproto.base,}};

static void InitDefaultsscc_info_SpotCheckFeedbackRequest_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot::_SpotCheckFeedbackRequest_default_instance_;
    new (ptr) ::bosdyn::api::spot::SpotCheckFeedbackRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot::SpotCheckFeedbackRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpotCheckFeedbackRequest_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SpotCheckFeedbackRequest_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_SpotCheckFeedbackResponse_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot::_SpotCheckFeedbackResponse_default_instance_;
    new (ptr) ::bosdyn::api::spot::SpotCheckFeedbackResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::spot::SpotCheckFeedbackResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_SpotCheckFeedbackResponse_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, 0, InitDefaultsscc_info_SpotCheckFeedbackResponse_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_SpotCheckFeedbackResponse_CameraResultsEntry_DoNotUse_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto.base,
      &scc_info_SpotCheckFeedbackResponse_LoadCellResultsEntry_DoNotUse_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto.base,
      &scc_info_SpotCheckFeedbackResponse_KinematicCalResultsEntry_DoNotUse_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto.base,
      &scc_info_PayloadCheckResult_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto.base,
      &scc_info_SpotCheckFeedbackResponse_FootHeightResultsEntry_DoNotUse_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto.base,
      &scc_info_SpotCheckFeedbackResponse_LegPairResultsEntry_DoNotUse_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_SpotCheckFeedbackResponse_CameraResultsEntry_DoNotUse_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot::_SpotCheckFeedbackResponse_CameraResultsEntry_DoNotUse_default_instance_;
    new (ptr) ::bosdyn::api::spot::SpotCheckFeedbackResponse_CameraResultsEntry_DoNotUse();
  }
  ::bosdyn::api::spot::SpotCheckFeedbackResponse_CameraResultsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpotCheckFeedbackResponse_CameraResultsEntry_DoNotUse_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SpotCheckFeedbackResponse_CameraResultsEntry_DoNotUse_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto}, {
      &scc_info_DepthPlaneSpotCheckResult_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto.base,}};

static void InitDefaultsscc_info_SpotCheckFeedbackResponse_FootHeightResultsEntry_DoNotUse_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot::_SpotCheckFeedbackResponse_FootHeightResultsEntry_DoNotUse_default_instance_;
    new (ptr) ::bosdyn::api::spot::SpotCheckFeedbackResponse_FootHeightResultsEntry_DoNotUse();
  }
  ::bosdyn::api::spot::SpotCheckFeedbackResponse_FootHeightResultsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpotCheckFeedbackResponse_FootHeightResultsEntry_DoNotUse_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SpotCheckFeedbackResponse_FootHeightResultsEntry_DoNotUse_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto}, {
      &scc_info_FootHeightCheckResult_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto.base,}};

static void InitDefaultsscc_info_SpotCheckFeedbackResponse_KinematicCalResultsEntry_DoNotUse_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot::_SpotCheckFeedbackResponse_KinematicCalResultsEntry_DoNotUse_default_instance_;
    new (ptr) ::bosdyn::api::spot::SpotCheckFeedbackResponse_KinematicCalResultsEntry_DoNotUse();
  }
  ::bosdyn::api::spot::SpotCheckFeedbackResponse_KinematicCalResultsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpotCheckFeedbackResponse_KinematicCalResultsEntry_DoNotUse_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SpotCheckFeedbackResponse_KinematicCalResultsEntry_DoNotUse_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto}, {
      &scc_info_JointKinematicCheckResult_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto.base,}};

static void InitDefaultsscc_info_SpotCheckFeedbackResponse_LegPairResultsEntry_DoNotUse_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot::_SpotCheckFeedbackResponse_LegPairResultsEntry_DoNotUse_default_instance_;
    new (ptr) ::bosdyn::api::spot::SpotCheckFeedbackResponse_LegPairResultsEntry_DoNotUse();
  }
  ::bosdyn::api::spot::SpotCheckFeedbackResponse_LegPairResultsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpotCheckFeedbackResponse_LegPairResultsEntry_DoNotUse_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SpotCheckFeedbackResponse_LegPairResultsEntry_DoNotUse_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto}, {
      &scc_info_LegPairCheckResult_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto.base,}};

static void InitDefaultsscc_info_SpotCheckFeedbackResponse_LoadCellResultsEntry_DoNotUse_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::spot::_SpotCheckFeedbackResponse_LoadCellResultsEntry_DoNotUse_default_instance_;
    new (ptr) ::bosdyn::api::spot::SpotCheckFeedbackResponse_LoadCellResultsEntry_DoNotUse();
  }
  ::bosdyn::api::spot::SpotCheckFeedbackResponse_LoadCellResultsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SpotCheckFeedbackResponse_LoadCellResultsEntry_DoNotUse_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SpotCheckFeedbackResponse_LoadCellResultsEntry_DoNotUse_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto}, {
      &scc_info_LoadCellSpotCheckResult_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto[19];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::SpotCheckCommandRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::SpotCheckCommandRequest, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::SpotCheckCommandRequest, lease_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::SpotCheckCommandRequest, command_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::SpotCheckCommandResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::SpotCheckCommandResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::SpotCheckCommandResponse, lease_use_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::SpotCheckFeedbackRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::SpotCheckFeedbackRequest, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::SpotCheckFeedbackResponse_CameraResultsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::SpotCheckFeedbackResponse_CameraResultsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::SpotCheckFeedbackResponse_CameraResultsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::SpotCheckFeedbackResponse_CameraResultsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::SpotCheckFeedbackResponse_LoadCellResultsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::SpotCheckFeedbackResponse_LoadCellResultsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::SpotCheckFeedbackResponse_LoadCellResultsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::SpotCheckFeedbackResponse_LoadCellResultsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::SpotCheckFeedbackResponse_KinematicCalResultsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::SpotCheckFeedbackResponse_KinematicCalResultsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::SpotCheckFeedbackResponse_KinematicCalResultsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::SpotCheckFeedbackResponse_KinematicCalResultsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::SpotCheckFeedbackResponse_FootHeightResultsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::SpotCheckFeedbackResponse_FootHeightResultsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::SpotCheckFeedbackResponse_FootHeightResultsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::SpotCheckFeedbackResponse_FootHeightResultsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::SpotCheckFeedbackResponse_LegPairResultsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::SpotCheckFeedbackResponse_LegPairResultsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::SpotCheckFeedbackResponse_LegPairResultsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::SpotCheckFeedbackResponse_LegPairResultsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::SpotCheckFeedbackResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::SpotCheckFeedbackResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::SpotCheckFeedbackResponse, state_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::SpotCheckFeedbackResponse, last_command_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::SpotCheckFeedbackResponse, error_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::SpotCheckFeedbackResponse, camera_results_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::SpotCheckFeedbackResponse, load_cell_results_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::SpotCheckFeedbackResponse, kinematic_cal_results_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::SpotCheckFeedbackResponse, payload_result_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::SpotCheckFeedbackResponse, foot_height_results_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::SpotCheckFeedbackResponse, leg_pair_results_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::SpotCheckFeedbackResponse, progress_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::SpotCheckFeedbackResponse, last_cal_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::DepthPlaneSpotCheckResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::DepthPlaneSpotCheckResult, status_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::DepthPlaneSpotCheckResult, severity_score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::PayloadCheckResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::PayloadCheckResult, error_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::PayloadCheckResult, extra_payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::LoadCellSpotCheckResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::LoadCellSpotCheckResult, error_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::LoadCellSpotCheckResult, zero_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::LoadCellSpotCheckResult, old_zero_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::JointKinematicCheckResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::JointKinematicCheckResult, error_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::JointKinematicCheckResult, offset_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::JointKinematicCheckResult, old_offset_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::JointKinematicCheckResult, health_score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::FootHeightCheckResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::FootHeightCheckResult, status_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::FootHeightCheckResult, foot_height_error_from_mean_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::LegPairCheckResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::LegPairCheckResult, status_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::LegPairCheckResult, leg_pair_distance_change_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::CameraCalibrationCommandRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::CameraCalibrationCommandRequest, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::CameraCalibrationCommandRequest, lease_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::CameraCalibrationCommandRequest, command_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::CameraCalibrationCommandResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::CameraCalibrationCommandResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::CameraCalibrationCommandResponse, lease_use_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::CameraCalibrationFeedbackRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::CameraCalibrationFeedbackRequest, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::CameraCalibrationFeedbackResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::CameraCalibrationFeedbackResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::CameraCalibrationFeedbackResponse, status_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::spot::CameraCalibrationFeedbackResponse, progress_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::bosdyn::api::spot::SpotCheckCommandRequest)},
  { 8, -1, sizeof(::bosdyn::api::spot::SpotCheckCommandResponse)},
  { 15, -1, sizeof(::bosdyn::api::spot::SpotCheckFeedbackRequest)},
  { 21, 28, sizeof(::bosdyn::api::spot::SpotCheckFeedbackResponse_CameraResultsEntry_DoNotUse)},
  { 30, 37, sizeof(::bosdyn::api::spot::SpotCheckFeedbackResponse_LoadCellResultsEntry_DoNotUse)},
  { 39, 46, sizeof(::bosdyn::api::spot::SpotCheckFeedbackResponse_KinematicCalResultsEntry_DoNotUse)},
  { 48, 55, sizeof(::bosdyn::api::spot::SpotCheckFeedbackResponse_FootHeightResultsEntry_DoNotUse)},
  { 57, 64, sizeof(::bosdyn::api::spot::SpotCheckFeedbackResponse_LegPairResultsEntry_DoNotUse)},
  { 66, -1, sizeof(::bosdyn::api::spot::SpotCheckFeedbackResponse)},
  { 83, -1, sizeof(::bosdyn::api::spot::DepthPlaneSpotCheckResult)},
  { 90, -1, sizeof(::bosdyn::api::spot::PayloadCheckResult)},
  { 97, -1, sizeof(::bosdyn::api::spot::LoadCellSpotCheckResult)},
  { 105, -1, sizeof(::bosdyn::api::spot::JointKinematicCheckResult)},
  { 114, -1, sizeof(::bosdyn::api::spot::FootHeightCheckResult)},
  { 121, -1, sizeof(::bosdyn::api::spot::LegPairCheckResult)},
  { 128, -1, sizeof(::bosdyn::api::spot::CameraCalibrationCommandRequest)},
  { 136, -1, sizeof(::bosdyn::api::spot::CameraCalibrationCommandResponse)},
  { 143, -1, sizeof(::bosdyn::api::spot::CameraCalibrationFeedbackRequest)},
  { 149, -1, sizeof(::bosdyn::api::spot::CameraCalibrationFeedbackResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot::_SpotCheckCommandRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot::_SpotCheckCommandResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot::_SpotCheckFeedbackRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot::_SpotCheckFeedbackResponse_CameraResultsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot::_SpotCheckFeedbackResponse_LoadCellResultsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot::_SpotCheckFeedbackResponse_KinematicCalResultsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot::_SpotCheckFeedbackResponse_FootHeightResultsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot::_SpotCheckFeedbackResponse_LegPairResultsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot::_SpotCheckFeedbackResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot::_DepthPlaneSpotCheckResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot::_PayloadCheckResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot::_LoadCellSpotCheckResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot::_JointKinematicCheckResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot::_FootHeightCheckResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot::_LegPairCheckResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot::_CameraCalibrationCommandRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot::_CameraCalibrationCommandResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot::_CameraCalibrationFeedbackRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::spot::_CameraCalibrationFeedbackResponse_default_instance_),
};

const char descriptor_table_protodef_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n bosdyn/api/spot/spot_check.proto\022\017bosd"
  "yn.api.spot\032\027bosdyn/api/header.proto\032\026bo"
  "sdyn/api/lease.proto\032\037google/protobuf/ti"
  "mestamp.proto\"\207\002\n\027SpotCheckCommandReques"
  "t\022)\n\006header\030\001 \001(\0132\031.bosdyn.api.RequestHe"
  "ader\022 \n\005lease\030\002 \001(\0132\021.bosdyn.api.Lease\022A"
  "\n\007command\030\003 \001(\01620.bosdyn.api.spot.SpotCh"
  "eckCommandRequest.Command\"\\\n\007Command\022\023\n\017"
  "COMMAND_UNKNOWN\020\000\022\021\n\rCOMMAND_START\020\001\022\021\n\r"
  "COMMAND_ABORT\020\002\022\026\n\022COMMAND_REVERT_CAL\020\003\""
  "|\n\030SpotCheckCommandResponse\022*\n\006header\030\001 "
  "\001(\0132\032.bosdyn.api.ResponseHeader\0224\n\020lease"
  "_use_result\030\002 \001(\0132\032.bosdyn.api.LeaseUseR"
  "esult\"E\n\030SpotCheckFeedbackRequest\022)\n\006hea"
  "der\030\001 \001(\0132\031.bosdyn.api.RequestHeader\"\227\017\n"
  "\031SpotCheckFeedbackResponse\022*\n\006header\030\001 \001"
  "(\0132\032.bosdyn.api.ResponseHeader\022\?\n\005state\030"
  "\002 \001(\01620.bosdyn.api.spot.SpotCheckFeedbac"
  "kResponse.State\022F\n\014last_command\030\014 \001(\01620."
  "bosdyn.api.spot.SpotCheckCommandRequest."
  "Command\022\?\n\005error\030\006 \001(\01620.bosdyn.api.spot"
  ".SpotCheckFeedbackResponse.Error\022U\n\016came"
  "ra_results\030\003 \003(\0132=.bosdyn.api.spot.SpotC"
  "heckFeedbackResponse.CameraResultsEntry\022"
  "Z\n\021load_cell_results\030\004 \003(\0132\?.bosdyn.api."
  "spot.SpotCheckFeedbackResponse.LoadCellR"
  "esultsEntry\022b\n\025kinematic_cal_results\030\005 \003"
  "(\0132C.bosdyn.api.spot.SpotCheckFeedbackRe"
  "sponse.KinematicCalResultsEntry\022;\n\016paylo"
  "ad_result\030\010 \001(\0132#.bosdyn.api.spot.Payloa"
  "dCheckResult\022^\n\023foot_height_results\030\n \003("
  "\0132A.bosdyn.api.spot.SpotCheckFeedbackRes"
  "ponse.FootHeightResultsEntry\022X\n\020leg_pair"
  "_results\030\013 \003(\0132>.bosdyn.api.spot.SpotChe"
  "ckFeedbackResponse.LegPairResultsEntry\022\020"
  "\n\010progress\030\007 \001(\002\0226\n\022last_cal_timestamp\030\t"
  " \001(\0132\032.google.protobuf.Timestamp\032`\n\022Came"
  "raResultsEntry\022\013\n\003key\030\001 \001(\t\0229\n\005value\030\002 \001"
  "(\0132*.bosdyn.api.spot.DepthPlaneSpotCheck"
  "Result:\0028\001\032`\n\024LoadCellResultsEntry\022\013\n\003ke"
  "y\030\001 \001(\t\0227\n\005value\030\002 \001(\0132(.bosdyn.api.spot"
  ".LoadCellSpotCheckResult:\0028\001\032f\n\030Kinemati"
  "cCalResultsEntry\022\013\n\003key\030\001 \001(\t\0229\n\005value\030\002"
  " \001(\0132*.bosdyn.api.spot.JointKinematicChe"
  "ckResult:\0028\001\032`\n\026FootHeightResultsEntry\022\013"
  "\n\003key\030\001 \001(\t\0225\n\005value\030\002 \001(\0132&.bosdyn.api."
  "spot.FootHeightCheckResult:\0028\001\032Z\n\023LegPai"
  "rResultsEntry\022\013\n\003key\030\001 \001(\t\0222\n\005value\030\002 \001("
  "\0132#.bosdyn.api.spot.LegPairCheckResult:\002"
  "8\001\"\201\002\n\005State\022\021\n\rSTATE_UNKNOWN\020\000\022\026\n\022STATE"
  "_USER_ABORTED\020\001\022\022\n\016STATE_STARTING\020\002\022\026\n\022S"
  "TATE_LOADCELL_CAL\020\003\022\025\n\021STATE_ENDSTOP_CAL"
  "\020\004\022\026\n\022STATE_CAMERA_CHECK\020\005\022\025\n\021STATE_BODY"
  "_POSING\020\006\022\022\n\016STATE_FINISHED\020\007\022\027\n\023STATE_R"
  "EVERTING_CAL\020\010\022\017\n\013STATE_ERROR\020\t\022\035\n\031STATE"
  "_WAITING_FOR_COMMAND\020\n\"\275\002\n\005Error\022\021\n\rERRO"
  "R_UNKNOWN\020\000\022\016\n\nERROR_NONE\020\001\022!\n\035ERROR_UNE"
  "XPECTED_POWER_CHANGE\020\002\022\030\n\024ERROR_INIT_IMU"
  "_CHECK\020\003\022\032\n\026ERROR_INIT_NOT_SITTING\020\004\022\032\n\026"
  "ERROR_LOADCELL_TIMEOUT\020\005\022\032\n\026ERROR_POWER_"
  "ON_FAILURE\020\006\022\031\n\025ERROR_ENDSTOP_TIMEOUT\020\007\022"
  "\026\n\022ERROR_FAILED_STAND\020\010\022\030\n\024ERROR_CAMERA_"
  "TIMEOUT\020\t\022\026\n\022ERROR_GROUND_CHECK\020\n\022\033\n\027ERR"
  "OR_POWER_OFF_FAILURE\020\013\"\311\001\n\031DepthPlaneSpo"
  "tCheckResult\022A\n\006status\030\001 \001(\01621.bosdyn.ap"
  "i.spot.DepthPlaneSpotCheckResult.Status\022"
  "\026\n\016severity_score\030\002 \001(\002\"Q\n\006Status\022\022\n\016STA"
  "TUS_UNKNOWN\020\000\022\r\n\tSTATUS_OK\020\001\022\022\n\016STATUS_W"
  "ARNING\020\002\022\020\n\014STATUS_ERROR\020\003\"\255\001\n\022PayloadCh"
  "eckResult\0228\n\005error\030\001 \001(\0162).bosdyn.api.sp"
  "ot.PayloadCheckResult.Error\022\025\n\rextra_pay"
  "load\030\002 \001(\002\"F\n\005Error\022\021\n\rERROR_UNKNOWN\020\000\022\016"
  "\n\nERROR_NONE\020\001\022\032\n\026ERROR_MASS_DISCREPANCY"
  "\020\002\"\301\001\n\027LoadCellSpotCheckResult\022=\n\005error\030"
  "\002 \001(\0162..bosdyn.api.spot.LoadCellSpotChec"
  "kResult.Error\022\014\n\004zero\030\003 \001(\002\022\020\n\010old_zero\030"
  "\004 \001(\002\"G\n\005Error\022\021\n\rERROR_UNKNOWN\020\000\022\016\n\nERR"
  "OR_NONE\020\001\022\033\n\027ERROR_ZERO_OUT_OF_RANGE\020\002\"\331"
  "\001\n\031JointKinematicCheckResult\022\?\n\005error\030\002 "
  "\001(\01620.bosdyn.api.spot.JointKinematicChec"
  "kResult.Error\022\016\n\006offset\030\003 \001(\002\022\022\n\nold_off"
  "set\030\004 \001(\002\022\024\n\014health_score\030\005 \001(\002\"A\n\005Error"
  "\022\021\n\rERROR_UNKNOWN\020\000\022\016\n\nERROR_NONE\020\001\022\025\n\021E"
  "RROR_CLUTCH_SLIP\020\002\"\316\001\n\025FootHeightCheckRe"
  "sult\022=\n\006status\030\002 \001(\0162-.bosdyn.api.spot.F"
  "ootHeightCheckResult.Status\022#\n\033foot_heig"
  "ht_error_from_mean\030\003 \001(\002\"Q\n\006Status\022\022\n\016ST"
  "ATUS_UNKNOWN\020\000\022\r\n\tSTATUS_OK\020\001\022\022\n\016STATUS_"
  "WARNING\020\002\022\020\n\014STATUS_ERROR\020\003\"\305\001\n\022LegPairC"
  "heckResult\022:\n\006status\030\002 \001(\0162*.bosdyn.api."
  "spot.LegPairCheckResult.Status\022 \n\030leg_pa"
  "ir_distance_change\030\003 \001(\002\"Q\n\006Status\022\022\n\016ST"
  "ATUS_UNKNOWN\020\000\022\r\n\tSTATUS_OK\020\001\022\022\n\016STATUS_"
  "WARNING\020\002\022\020\n\014STATUS_ERROR\020\003\"\200\002\n\037CameraCa"
  "librationCommandRequest\022)\n\006header\030\001 \001(\0132"
  "\031.bosdyn.api.RequestHeader\022 \n\005lease\030\002 \001("
  "\0132\021.bosdyn.api.Lease\022I\n\007command\030\003 \001(\01628."
  "bosdyn.api.spot.CameraCalibrationCommand"
  "Request.Command\"E\n\007Command\022\023\n\017COMMAND_UN"
  "KNOWN\020\000\022\021\n\rCOMMAND_START\020\001\022\022\n\016COMMAND_CA"
  "NCEL\020\002\"\204\001\n CameraCalibrationCommandRespo"
  "nse\022*\n\006header\030\001 \001(\0132\032.bosdyn.api.Respons"
  "eHeader\0224\n\020lease_use_result\030\002 \001(\0132\032.bosd"
  "yn.api.LeaseUseResult\"M\n CameraCalibrati"
  "onFeedbackRequest\022)\n\006header\030\001 \001(\0132\031.bosd"
  "yn.api.RequestHeader\"\323\004\n!CameraCalibrati"
  "onFeedbackResponse\022*\n\006header\030\001 \001(\0132\032.bos"
  "dyn.api.ResponseHeader\022I\n\006status\030\002 \001(\01629"
  ".bosdyn.api.spot.CameraCalibrationFeedba"
  "ckResponse.Status\022\020\n\010progress\030\003 \001(\002\"\244\003\n\006"
  "Status\022\022\n\016STATUS_UNKNOWN\020\000\022\025\n\021STATUS_PRO"
  "CESSING\020\001\022\022\n\016STATUS_SUCCESS\020\002\022\030\n\024STATUS_"
  "USER_CANCELED\020\003\022\026\n\022STATUS_POWER_ERROR\020\004\022"
  "\026\n\022STATUS_LEASE_ERROR\020\005\022\036\n\032STATUS_ROBOT_"
  "COMMAND_ERROR\020\007\022\034\n\030STATUS_CALIBRATION_ER"
  "ROR\020\010\022\031\n\025STATUS_INTERNAL_ERROR\020\t\022\035\n\031STAT"
  "US_CAMERA_FOCUS_ERROR\020\016\022\036\n\032STATUS_TARGET"
  "_NOT_CENTERED\020\006\022\035\n\031STATUS_TARGET_NOT_IN_"
  "VIEW\020\013\022%\n!STATUS_TARGET_NOT_GRAVITY_ALIG"
  "NED\020\014\022\035\n\031STATUS_TARGET_UPSIDE_DOWN\020\r\022\024\n\020"
  "STATUS_NEVER_RUN\020\nB\020B\016SpotCheckProtob\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto_deps[3] = {
  &::descriptor_table_bosdyn_2fapi_2fheader_2eproto,
  &::descriptor_table_bosdyn_2fapi_2flease_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto_sccs[19] = {
  &scc_info_CameraCalibrationCommandRequest_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto.base,
  &scc_info_CameraCalibrationCommandResponse_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto.base,
  &scc_info_CameraCalibrationFeedbackRequest_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto.base,
  &scc_info_CameraCalibrationFeedbackResponse_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto.base,
  &scc_info_DepthPlaneSpotCheckResult_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto.base,
  &scc_info_FootHeightCheckResult_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto.base,
  &scc_info_JointKinematicCheckResult_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto.base,
  &scc_info_LegPairCheckResult_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto.base,
  &scc_info_LoadCellSpotCheckResult_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto.base,
  &scc_info_PayloadCheckResult_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto.base,
  &scc_info_SpotCheckCommandRequest_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto.base,
  &scc_info_SpotCheckCommandResponse_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto.base,
  &scc_info_SpotCheckFeedbackRequest_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto.base,
  &scc_info_SpotCheckFeedbackResponse_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto.base,
  &scc_info_SpotCheckFeedbackResponse_CameraResultsEntry_DoNotUse_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto.base,
  &scc_info_SpotCheckFeedbackResponse_FootHeightResultsEntry_DoNotUse_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto.base,
  &scc_info_SpotCheckFeedbackResponse_KinematicCalResultsEntry_DoNotUse_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto.base,
  &scc_info_SpotCheckFeedbackResponse_LegPairResultsEntry_DoNotUse_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto.base,
  &scc_info_SpotCheckFeedbackResponse_LoadCellResultsEntry_DoNotUse_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto = {
  false, false, descriptor_table_protodef_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto, "bosdyn/api/spot/spot_check.proto", 4844,
  &descriptor_table_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto_once, descriptor_table_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto_sccs, descriptor_table_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto_deps, 19, 3,
  schemas, file_default_instances, TableStruct_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto::offsets,
  file_level_metadata_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto, 19, file_level_enum_descriptors_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto, file_level_service_descriptors_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto)), true);
namespace bosdyn {
namespace api {
namespace spot {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SpotCheckCommandRequest_Command_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto[0];
}
bool SpotCheckCommandRequest_Command_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SpotCheckCommandRequest_Command SpotCheckCommandRequest::COMMAND_UNKNOWN;
constexpr SpotCheckCommandRequest_Command SpotCheckCommandRequest::COMMAND_START;
constexpr SpotCheckCommandRequest_Command SpotCheckCommandRequest::COMMAND_ABORT;
constexpr SpotCheckCommandRequest_Command SpotCheckCommandRequest::COMMAND_REVERT_CAL;
constexpr SpotCheckCommandRequest_Command SpotCheckCommandRequest::Command_MIN;
constexpr SpotCheckCommandRequest_Command SpotCheckCommandRequest::Command_MAX;
constexpr int SpotCheckCommandRequest::Command_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SpotCheckFeedbackResponse_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto[1];
}
bool SpotCheckFeedbackResponse_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SpotCheckFeedbackResponse_State SpotCheckFeedbackResponse::STATE_UNKNOWN;
constexpr SpotCheckFeedbackResponse_State SpotCheckFeedbackResponse::STATE_USER_ABORTED;
constexpr SpotCheckFeedbackResponse_State SpotCheckFeedbackResponse::STATE_STARTING;
constexpr SpotCheckFeedbackResponse_State SpotCheckFeedbackResponse::STATE_LOADCELL_CAL;
constexpr SpotCheckFeedbackResponse_State SpotCheckFeedbackResponse::STATE_ENDSTOP_CAL;
constexpr SpotCheckFeedbackResponse_State SpotCheckFeedbackResponse::STATE_CAMERA_CHECK;
constexpr SpotCheckFeedbackResponse_State SpotCheckFeedbackResponse::STATE_BODY_POSING;
constexpr SpotCheckFeedbackResponse_State SpotCheckFeedbackResponse::STATE_FINISHED;
constexpr SpotCheckFeedbackResponse_State SpotCheckFeedbackResponse::STATE_REVERTING_CAL;
constexpr SpotCheckFeedbackResponse_State SpotCheckFeedbackResponse::STATE_ERROR;
constexpr SpotCheckFeedbackResponse_State SpotCheckFeedbackResponse::STATE_WAITING_FOR_COMMAND;
constexpr SpotCheckFeedbackResponse_State SpotCheckFeedbackResponse::State_MIN;
constexpr SpotCheckFeedbackResponse_State SpotCheckFeedbackResponse::State_MAX;
constexpr int SpotCheckFeedbackResponse::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SpotCheckFeedbackResponse_Error_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto[2];
}
bool SpotCheckFeedbackResponse_Error_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SpotCheckFeedbackResponse_Error SpotCheckFeedbackResponse::ERROR_UNKNOWN;
constexpr SpotCheckFeedbackResponse_Error SpotCheckFeedbackResponse::ERROR_NONE;
constexpr SpotCheckFeedbackResponse_Error SpotCheckFeedbackResponse::ERROR_UNEXPECTED_POWER_CHANGE;
constexpr SpotCheckFeedbackResponse_Error SpotCheckFeedbackResponse::ERROR_INIT_IMU_CHECK;
constexpr SpotCheckFeedbackResponse_Error SpotCheckFeedbackResponse::ERROR_INIT_NOT_SITTING;
constexpr SpotCheckFeedbackResponse_Error SpotCheckFeedbackResponse::ERROR_LOADCELL_TIMEOUT;
constexpr SpotCheckFeedbackResponse_Error SpotCheckFeedbackResponse::ERROR_POWER_ON_FAILURE;
constexpr SpotCheckFeedbackResponse_Error SpotCheckFeedbackResponse::ERROR_ENDSTOP_TIMEOUT;
constexpr SpotCheckFeedbackResponse_Error SpotCheckFeedbackResponse::ERROR_FAILED_STAND;
constexpr SpotCheckFeedbackResponse_Error SpotCheckFeedbackResponse::ERROR_CAMERA_TIMEOUT;
constexpr SpotCheckFeedbackResponse_Error SpotCheckFeedbackResponse::ERROR_GROUND_CHECK;
constexpr SpotCheckFeedbackResponse_Error SpotCheckFeedbackResponse::ERROR_POWER_OFF_FAILURE;
constexpr SpotCheckFeedbackResponse_Error SpotCheckFeedbackResponse::Error_MIN;
constexpr SpotCheckFeedbackResponse_Error SpotCheckFeedbackResponse::Error_MAX;
constexpr int SpotCheckFeedbackResponse::Error_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DepthPlaneSpotCheckResult_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto[3];
}
bool DepthPlaneSpotCheckResult_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DepthPlaneSpotCheckResult_Status DepthPlaneSpotCheckResult::STATUS_UNKNOWN;
constexpr DepthPlaneSpotCheckResult_Status DepthPlaneSpotCheckResult::STATUS_OK;
constexpr DepthPlaneSpotCheckResult_Status DepthPlaneSpotCheckResult::STATUS_WARNING;
constexpr DepthPlaneSpotCheckResult_Status DepthPlaneSpotCheckResult::STATUS_ERROR;
constexpr DepthPlaneSpotCheckResult_Status DepthPlaneSpotCheckResult::Status_MIN;
constexpr DepthPlaneSpotCheckResult_Status DepthPlaneSpotCheckResult::Status_MAX;
constexpr int DepthPlaneSpotCheckResult::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PayloadCheckResult_Error_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto[4];
}
bool PayloadCheckResult_Error_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PayloadCheckResult_Error PayloadCheckResult::ERROR_UNKNOWN;
constexpr PayloadCheckResult_Error PayloadCheckResult::ERROR_NONE;
constexpr PayloadCheckResult_Error PayloadCheckResult::ERROR_MASS_DISCREPANCY;
constexpr PayloadCheckResult_Error PayloadCheckResult::Error_MIN;
constexpr PayloadCheckResult_Error PayloadCheckResult::Error_MAX;
constexpr int PayloadCheckResult::Error_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LoadCellSpotCheckResult_Error_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto[5];
}
bool LoadCellSpotCheckResult_Error_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LoadCellSpotCheckResult_Error LoadCellSpotCheckResult::ERROR_UNKNOWN;
constexpr LoadCellSpotCheckResult_Error LoadCellSpotCheckResult::ERROR_NONE;
constexpr LoadCellSpotCheckResult_Error LoadCellSpotCheckResult::ERROR_ZERO_OUT_OF_RANGE;
constexpr LoadCellSpotCheckResult_Error LoadCellSpotCheckResult::Error_MIN;
constexpr LoadCellSpotCheckResult_Error LoadCellSpotCheckResult::Error_MAX;
constexpr int LoadCellSpotCheckResult::Error_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JointKinematicCheckResult_Error_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto[6];
}
bool JointKinematicCheckResult_Error_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr JointKinematicCheckResult_Error JointKinematicCheckResult::ERROR_UNKNOWN;
constexpr JointKinematicCheckResult_Error JointKinematicCheckResult::ERROR_NONE;
constexpr JointKinematicCheckResult_Error JointKinematicCheckResult::ERROR_CLUTCH_SLIP;
constexpr JointKinematicCheckResult_Error JointKinematicCheckResult::Error_MIN;
constexpr JointKinematicCheckResult_Error JointKinematicCheckResult::Error_MAX;
constexpr int JointKinematicCheckResult::Error_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FootHeightCheckResult_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto[7];
}
bool FootHeightCheckResult_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr FootHeightCheckResult_Status FootHeightCheckResult::STATUS_UNKNOWN;
constexpr FootHeightCheckResult_Status FootHeightCheckResult::STATUS_OK;
constexpr FootHeightCheckResult_Status FootHeightCheckResult::STATUS_WARNING;
constexpr FootHeightCheckResult_Status FootHeightCheckResult::STATUS_ERROR;
constexpr FootHeightCheckResult_Status FootHeightCheckResult::Status_MIN;
constexpr FootHeightCheckResult_Status FootHeightCheckResult::Status_MAX;
constexpr int FootHeightCheckResult::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LegPairCheckResult_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto[8];
}
bool LegPairCheckResult_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LegPairCheckResult_Status LegPairCheckResult::STATUS_UNKNOWN;
constexpr LegPairCheckResult_Status LegPairCheckResult::STATUS_OK;
constexpr LegPairCheckResult_Status LegPairCheckResult::STATUS_WARNING;
constexpr LegPairCheckResult_Status LegPairCheckResult::STATUS_ERROR;
constexpr LegPairCheckResult_Status LegPairCheckResult::Status_MIN;
constexpr LegPairCheckResult_Status LegPairCheckResult::Status_MAX;
constexpr int LegPairCheckResult::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraCalibrationCommandRequest_Command_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto[9];
}
bool CameraCalibrationCommandRequest_Command_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CameraCalibrationCommandRequest_Command CameraCalibrationCommandRequest::COMMAND_UNKNOWN;
constexpr CameraCalibrationCommandRequest_Command CameraCalibrationCommandRequest::COMMAND_START;
constexpr CameraCalibrationCommandRequest_Command CameraCalibrationCommandRequest::COMMAND_CANCEL;
constexpr CameraCalibrationCommandRequest_Command CameraCalibrationCommandRequest::Command_MIN;
constexpr CameraCalibrationCommandRequest_Command CameraCalibrationCommandRequest::Command_MAX;
constexpr int CameraCalibrationCommandRequest::Command_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraCalibrationFeedbackResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto[10];
}
bool CameraCalibrationFeedbackResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CameraCalibrationFeedbackResponse_Status CameraCalibrationFeedbackResponse::STATUS_UNKNOWN;
constexpr CameraCalibrationFeedbackResponse_Status CameraCalibrationFeedbackResponse::STATUS_PROCESSING;
constexpr CameraCalibrationFeedbackResponse_Status CameraCalibrationFeedbackResponse::STATUS_SUCCESS;
constexpr CameraCalibrationFeedbackResponse_Status CameraCalibrationFeedbackResponse::STATUS_USER_CANCELED;
constexpr CameraCalibrationFeedbackResponse_Status CameraCalibrationFeedbackResponse::STATUS_POWER_ERROR;
constexpr CameraCalibrationFeedbackResponse_Status CameraCalibrationFeedbackResponse::STATUS_LEASE_ERROR;
constexpr CameraCalibrationFeedbackResponse_Status CameraCalibrationFeedbackResponse::STATUS_ROBOT_COMMAND_ERROR;
constexpr CameraCalibrationFeedbackResponse_Status CameraCalibrationFeedbackResponse::STATUS_CALIBRATION_ERROR;
constexpr CameraCalibrationFeedbackResponse_Status CameraCalibrationFeedbackResponse::STATUS_INTERNAL_ERROR;
constexpr CameraCalibrationFeedbackResponse_Status CameraCalibrationFeedbackResponse::STATUS_CAMERA_FOCUS_ERROR;
constexpr CameraCalibrationFeedbackResponse_Status CameraCalibrationFeedbackResponse::STATUS_TARGET_NOT_CENTERED;
constexpr CameraCalibrationFeedbackResponse_Status CameraCalibrationFeedbackResponse::STATUS_TARGET_NOT_IN_VIEW;
constexpr CameraCalibrationFeedbackResponse_Status CameraCalibrationFeedbackResponse::STATUS_TARGET_NOT_GRAVITY_ALIGNED;
constexpr CameraCalibrationFeedbackResponse_Status CameraCalibrationFeedbackResponse::STATUS_TARGET_UPSIDE_DOWN;
constexpr CameraCalibrationFeedbackResponse_Status CameraCalibrationFeedbackResponse::STATUS_NEVER_RUN;
constexpr CameraCalibrationFeedbackResponse_Status CameraCalibrationFeedbackResponse::Status_MIN;
constexpr CameraCalibrationFeedbackResponse_Status CameraCalibrationFeedbackResponse::Status_MAX;
constexpr int CameraCalibrationFeedbackResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void SpotCheckCommandRequest::InitAsDefaultInstance() {
  ::bosdyn::api::spot::_SpotCheckCommandRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
  ::bosdyn::api::spot::_SpotCheckCommandRequest_default_instance_._instance.get_mutable()->lease_ = const_cast< ::bosdyn::api::Lease*>(
      ::bosdyn::api::Lease::internal_default_instance());
}
class SpotCheckCommandRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const SpotCheckCommandRequest* msg);
  static const ::bosdyn::api::Lease& lease(const SpotCheckCommandRequest* msg);
};

const ::bosdyn::api::RequestHeader&
SpotCheckCommandRequest::_Internal::header(const SpotCheckCommandRequest* msg) {
  return *msg->header_;
}
const ::bosdyn::api::Lease&
SpotCheckCommandRequest::_Internal::lease(const SpotCheckCommandRequest* msg) {
  return *msg->lease_;
}
void SpotCheckCommandRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void SpotCheckCommandRequest::clear_lease() {
  if (GetArena() == nullptr && lease_ != nullptr) {
    delete lease_;
  }
  lease_ = nullptr;
}
SpotCheckCommandRequest::SpotCheckCommandRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot.SpotCheckCommandRequest)
}
SpotCheckCommandRequest::SpotCheckCommandRequest(const SpotCheckCommandRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_lease()) {
    lease_ = new ::bosdyn::api::Lease(*from.lease_);
  } else {
    lease_ = nullptr;
  }
  command_ = from.command_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot.SpotCheckCommandRequest)
}

void SpotCheckCommandRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpotCheckCommandRequest_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&command_) -
      reinterpret_cast<char*>(&header_)) + sizeof(command_));
}

SpotCheckCommandRequest::~SpotCheckCommandRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot.SpotCheckCommandRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpotCheckCommandRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete lease_;
}

void SpotCheckCommandRequest::ArenaDtor(void* object) {
  SpotCheckCommandRequest* _this = reinterpret_cast< SpotCheckCommandRequest* >(object);
  (void)_this;
}
void SpotCheckCommandRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpotCheckCommandRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpotCheckCommandRequest& SpotCheckCommandRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpotCheckCommandRequest_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto.base);
  return *internal_default_instance();
}


void SpotCheckCommandRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot.SpotCheckCommandRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && lease_ != nullptr) {
    delete lease_;
  }
  lease_ = nullptr;
  command_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpotCheckCommandRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.Lease lease = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lease(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.spot.SpotCheckCommandRequest.Command command = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_command(static_cast<::bosdyn::api::spot::SpotCheckCommandRequest_Command>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpotCheckCommandRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot.SpotCheckCommandRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.Lease lease = 2;
  if (this->has_lease()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::lease(this), target, stream);
  }

  // .bosdyn.api.spot.SpotCheckCommandRequest.Command command = 3;
  if (this->command() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_command(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot.SpotCheckCommandRequest)
  return target;
}

size_t SpotCheckCommandRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot.SpotCheckCommandRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.Lease lease = 2;
  if (this->has_lease()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lease_);
  }

  // .bosdyn.api.spot.SpotCheckCommandRequest.Command command = 3;
  if (this->command() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_command());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpotCheckCommandRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot.SpotCheckCommandRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SpotCheckCommandRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpotCheckCommandRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot.SpotCheckCommandRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot.SpotCheckCommandRequest)
    MergeFrom(*source);
  }
}

void SpotCheckCommandRequest::MergeFrom(const SpotCheckCommandRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot.SpotCheckCommandRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
  if (from.has_lease()) {
    _internal_mutable_lease()->::bosdyn::api::Lease::MergeFrom(from._internal_lease());
  }
  if (from.command() != 0) {
    _internal_set_command(from._internal_command());
  }
}

void SpotCheckCommandRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot.SpotCheckCommandRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpotCheckCommandRequest::CopyFrom(const SpotCheckCommandRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot.SpotCheckCommandRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpotCheckCommandRequest::IsInitialized() const {
  return true;
}

void SpotCheckCommandRequest::InternalSwap(SpotCheckCommandRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpotCheckCommandRequest, command_)
      + sizeof(SpotCheckCommandRequest::command_)
      - PROTOBUF_FIELD_OFFSET(SpotCheckCommandRequest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpotCheckCommandRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpotCheckCommandResponse::InitAsDefaultInstance() {
  ::bosdyn::api::spot::_SpotCheckCommandResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
  ::bosdyn::api::spot::_SpotCheckCommandResponse_default_instance_._instance.get_mutable()->lease_use_result_ = const_cast< ::bosdyn::api::LeaseUseResult*>(
      ::bosdyn::api::LeaseUseResult::internal_default_instance());
}
class SpotCheckCommandResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const SpotCheckCommandResponse* msg);
  static const ::bosdyn::api::LeaseUseResult& lease_use_result(const SpotCheckCommandResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
SpotCheckCommandResponse::_Internal::header(const SpotCheckCommandResponse* msg) {
  return *msg->header_;
}
const ::bosdyn::api::LeaseUseResult&
SpotCheckCommandResponse::_Internal::lease_use_result(const SpotCheckCommandResponse* msg) {
  return *msg->lease_use_result_;
}
void SpotCheckCommandResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void SpotCheckCommandResponse::clear_lease_use_result() {
  if (GetArena() == nullptr && lease_use_result_ != nullptr) {
    delete lease_use_result_;
  }
  lease_use_result_ = nullptr;
}
SpotCheckCommandResponse::SpotCheckCommandResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot.SpotCheckCommandResponse)
}
SpotCheckCommandResponse::SpotCheckCommandResponse(const SpotCheckCommandResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_lease_use_result()) {
    lease_use_result_ = new ::bosdyn::api::LeaseUseResult(*from.lease_use_result_);
  } else {
    lease_use_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot.SpotCheckCommandResponse)
}

void SpotCheckCommandResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpotCheckCommandResponse_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lease_use_result_) -
      reinterpret_cast<char*>(&header_)) + sizeof(lease_use_result_));
}

SpotCheckCommandResponse::~SpotCheckCommandResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot.SpotCheckCommandResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpotCheckCommandResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete lease_use_result_;
}

void SpotCheckCommandResponse::ArenaDtor(void* object) {
  SpotCheckCommandResponse* _this = reinterpret_cast< SpotCheckCommandResponse* >(object);
  (void)_this;
}
void SpotCheckCommandResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpotCheckCommandResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpotCheckCommandResponse& SpotCheckCommandResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpotCheckCommandResponse_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto.base);
  return *internal_default_instance();
}


void SpotCheckCommandResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot.SpotCheckCommandResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && lease_use_result_ != nullptr) {
    delete lease_use_result_;
  }
  lease_use_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpotCheckCommandResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.LeaseUseResult lease_use_result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lease_use_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpotCheckCommandResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot.SpotCheckCommandResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.LeaseUseResult lease_use_result = 2;
  if (this->has_lease_use_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::lease_use_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot.SpotCheckCommandResponse)
  return target;
}

size_t SpotCheckCommandResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot.SpotCheckCommandResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.LeaseUseResult lease_use_result = 2;
  if (this->has_lease_use_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lease_use_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpotCheckCommandResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot.SpotCheckCommandResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SpotCheckCommandResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpotCheckCommandResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot.SpotCheckCommandResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot.SpotCheckCommandResponse)
    MergeFrom(*source);
  }
}

void SpotCheckCommandResponse::MergeFrom(const SpotCheckCommandResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot.SpotCheckCommandResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.has_lease_use_result()) {
    _internal_mutable_lease_use_result()->::bosdyn::api::LeaseUseResult::MergeFrom(from._internal_lease_use_result());
  }
}

void SpotCheckCommandResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot.SpotCheckCommandResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpotCheckCommandResponse::CopyFrom(const SpotCheckCommandResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot.SpotCheckCommandResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpotCheckCommandResponse::IsInitialized() const {
  return true;
}

void SpotCheckCommandResponse::InternalSwap(SpotCheckCommandResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpotCheckCommandResponse, lease_use_result_)
      + sizeof(SpotCheckCommandResponse::lease_use_result_)
      - PROTOBUF_FIELD_OFFSET(SpotCheckCommandResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpotCheckCommandResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpotCheckFeedbackRequest::InitAsDefaultInstance() {
  ::bosdyn::api::spot::_SpotCheckFeedbackRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
}
class SpotCheckFeedbackRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const SpotCheckFeedbackRequest* msg);
};

const ::bosdyn::api::RequestHeader&
SpotCheckFeedbackRequest::_Internal::header(const SpotCheckFeedbackRequest* msg) {
  return *msg->header_;
}
void SpotCheckFeedbackRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
SpotCheckFeedbackRequest::SpotCheckFeedbackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot.SpotCheckFeedbackRequest)
}
SpotCheckFeedbackRequest::SpotCheckFeedbackRequest(const SpotCheckFeedbackRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot.SpotCheckFeedbackRequest)
}

void SpotCheckFeedbackRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpotCheckFeedbackRequest_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto.base);
  header_ = nullptr;
}

SpotCheckFeedbackRequest::~SpotCheckFeedbackRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot.SpotCheckFeedbackRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpotCheckFeedbackRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void SpotCheckFeedbackRequest::ArenaDtor(void* object) {
  SpotCheckFeedbackRequest* _this = reinterpret_cast< SpotCheckFeedbackRequest* >(object);
  (void)_this;
}
void SpotCheckFeedbackRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpotCheckFeedbackRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpotCheckFeedbackRequest& SpotCheckFeedbackRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpotCheckFeedbackRequest_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto.base);
  return *internal_default_instance();
}


void SpotCheckFeedbackRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot.SpotCheckFeedbackRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpotCheckFeedbackRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpotCheckFeedbackRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot.SpotCheckFeedbackRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot.SpotCheckFeedbackRequest)
  return target;
}

size_t SpotCheckFeedbackRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot.SpotCheckFeedbackRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpotCheckFeedbackRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot.SpotCheckFeedbackRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SpotCheckFeedbackRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpotCheckFeedbackRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot.SpotCheckFeedbackRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot.SpotCheckFeedbackRequest)
    MergeFrom(*source);
  }
}

void SpotCheckFeedbackRequest::MergeFrom(const SpotCheckFeedbackRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot.SpotCheckFeedbackRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
}

void SpotCheckFeedbackRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot.SpotCheckFeedbackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpotCheckFeedbackRequest::CopyFrom(const SpotCheckFeedbackRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot.SpotCheckFeedbackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpotCheckFeedbackRequest::IsInitialized() const {
  return true;
}

void SpotCheckFeedbackRequest::InternalSwap(SpotCheckFeedbackRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpotCheckFeedbackRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

SpotCheckFeedbackResponse_CameraResultsEntry_DoNotUse::SpotCheckFeedbackResponse_CameraResultsEntry_DoNotUse() {}
SpotCheckFeedbackResponse_CameraResultsEntry_DoNotUse::SpotCheckFeedbackResponse_CameraResultsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SpotCheckFeedbackResponse_CameraResultsEntry_DoNotUse::MergeFrom(const SpotCheckFeedbackResponse_CameraResultsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SpotCheckFeedbackResponse_CameraResultsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void SpotCheckFeedbackResponse_CameraResultsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

SpotCheckFeedbackResponse_LoadCellResultsEntry_DoNotUse::SpotCheckFeedbackResponse_LoadCellResultsEntry_DoNotUse() {}
SpotCheckFeedbackResponse_LoadCellResultsEntry_DoNotUse::SpotCheckFeedbackResponse_LoadCellResultsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SpotCheckFeedbackResponse_LoadCellResultsEntry_DoNotUse::MergeFrom(const SpotCheckFeedbackResponse_LoadCellResultsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SpotCheckFeedbackResponse_LoadCellResultsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void SpotCheckFeedbackResponse_LoadCellResultsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

SpotCheckFeedbackResponse_KinematicCalResultsEntry_DoNotUse::SpotCheckFeedbackResponse_KinematicCalResultsEntry_DoNotUse() {}
SpotCheckFeedbackResponse_KinematicCalResultsEntry_DoNotUse::SpotCheckFeedbackResponse_KinematicCalResultsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SpotCheckFeedbackResponse_KinematicCalResultsEntry_DoNotUse::MergeFrom(const SpotCheckFeedbackResponse_KinematicCalResultsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SpotCheckFeedbackResponse_KinematicCalResultsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void SpotCheckFeedbackResponse_KinematicCalResultsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

SpotCheckFeedbackResponse_FootHeightResultsEntry_DoNotUse::SpotCheckFeedbackResponse_FootHeightResultsEntry_DoNotUse() {}
SpotCheckFeedbackResponse_FootHeightResultsEntry_DoNotUse::SpotCheckFeedbackResponse_FootHeightResultsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SpotCheckFeedbackResponse_FootHeightResultsEntry_DoNotUse::MergeFrom(const SpotCheckFeedbackResponse_FootHeightResultsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SpotCheckFeedbackResponse_FootHeightResultsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void SpotCheckFeedbackResponse_FootHeightResultsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

SpotCheckFeedbackResponse_LegPairResultsEntry_DoNotUse::SpotCheckFeedbackResponse_LegPairResultsEntry_DoNotUse() {}
SpotCheckFeedbackResponse_LegPairResultsEntry_DoNotUse::SpotCheckFeedbackResponse_LegPairResultsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SpotCheckFeedbackResponse_LegPairResultsEntry_DoNotUse::MergeFrom(const SpotCheckFeedbackResponse_LegPairResultsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SpotCheckFeedbackResponse_LegPairResultsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void SpotCheckFeedbackResponse_LegPairResultsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void SpotCheckFeedbackResponse::InitAsDefaultInstance() {
  ::bosdyn::api::spot::_SpotCheckFeedbackResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
  ::bosdyn::api::spot::_SpotCheckFeedbackResponse_default_instance_._instance.get_mutable()->payload_result_ = const_cast< ::bosdyn::api::spot::PayloadCheckResult*>(
      ::bosdyn::api::spot::PayloadCheckResult::internal_default_instance());
  ::bosdyn::api::spot::_SpotCheckFeedbackResponse_default_instance_._instance.get_mutable()->last_cal_timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class SpotCheckFeedbackResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const SpotCheckFeedbackResponse* msg);
  static const ::bosdyn::api::spot::PayloadCheckResult& payload_result(const SpotCheckFeedbackResponse* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& last_cal_timestamp(const SpotCheckFeedbackResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
SpotCheckFeedbackResponse::_Internal::header(const SpotCheckFeedbackResponse* msg) {
  return *msg->header_;
}
const ::bosdyn::api::spot::PayloadCheckResult&
SpotCheckFeedbackResponse::_Internal::payload_result(const SpotCheckFeedbackResponse* msg) {
  return *msg->payload_result_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
SpotCheckFeedbackResponse::_Internal::last_cal_timestamp(const SpotCheckFeedbackResponse* msg) {
  return *msg->last_cal_timestamp_;
}
void SpotCheckFeedbackResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void SpotCheckFeedbackResponse::clear_last_cal_timestamp() {
  if (GetArena() == nullptr && last_cal_timestamp_ != nullptr) {
    delete last_cal_timestamp_;
  }
  last_cal_timestamp_ = nullptr;
}
SpotCheckFeedbackResponse::SpotCheckFeedbackResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  camera_results_(arena),
  load_cell_results_(arena),
  kinematic_cal_results_(arena),
  foot_height_results_(arena),
  leg_pair_results_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot.SpotCheckFeedbackResponse)
}
SpotCheckFeedbackResponse::SpotCheckFeedbackResponse(const SpotCheckFeedbackResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  camera_results_.MergeFrom(from.camera_results_);
  load_cell_results_.MergeFrom(from.load_cell_results_);
  kinematic_cal_results_.MergeFrom(from.kinematic_cal_results_);
  foot_height_results_.MergeFrom(from.foot_height_results_);
  leg_pair_results_.MergeFrom(from.leg_pair_results_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_payload_result()) {
    payload_result_ = new ::bosdyn::api::spot::PayloadCheckResult(*from.payload_result_);
  } else {
    payload_result_ = nullptr;
  }
  if (from._internal_has_last_cal_timestamp()) {
    last_cal_timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.last_cal_timestamp_);
  } else {
    last_cal_timestamp_ = nullptr;
  }
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_command_) -
    reinterpret_cast<char*>(&state_)) + sizeof(last_command_));
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot.SpotCheckFeedbackResponse)
}

void SpotCheckFeedbackResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpotCheckFeedbackResponse_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_command_) -
      reinterpret_cast<char*>(&header_)) + sizeof(last_command_));
}

SpotCheckFeedbackResponse::~SpotCheckFeedbackResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot.SpotCheckFeedbackResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpotCheckFeedbackResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete payload_result_;
  if (this != internal_default_instance()) delete last_cal_timestamp_;
}

void SpotCheckFeedbackResponse::ArenaDtor(void* object) {
  SpotCheckFeedbackResponse* _this = reinterpret_cast< SpotCheckFeedbackResponse* >(object);
  (void)_this;
}
void SpotCheckFeedbackResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpotCheckFeedbackResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpotCheckFeedbackResponse& SpotCheckFeedbackResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpotCheckFeedbackResponse_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto.base);
  return *internal_default_instance();
}


void SpotCheckFeedbackResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot.SpotCheckFeedbackResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  camera_results_.Clear();
  load_cell_results_.Clear();
  kinematic_cal_results_.Clear();
  foot_height_results_.Clear();
  leg_pair_results_.Clear();
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && payload_result_ != nullptr) {
    delete payload_result_;
  }
  payload_result_ = nullptr;
  if (GetArena() == nullptr && last_cal_timestamp_ != nullptr) {
    delete last_cal_timestamp_;
  }
  last_cal_timestamp_ = nullptr;
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_command_) -
      reinterpret_cast<char*>(&state_)) + sizeof(last_command_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpotCheckFeedbackResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.spot.SpotCheckFeedbackResponse.State state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::bosdyn::api::spot::SpotCheckFeedbackResponse_State>(val));
        } else goto handle_unusual;
        continue;
      // map<string, .bosdyn.api.spot.DepthPlaneSpotCheckResult> camera_results = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&camera_results_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .bosdyn.api.spot.LoadCellSpotCheckResult> load_cell_results = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&load_cell_results_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .bosdyn.api.spot.JointKinematicCheckResult> kinematic_cal_results = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&kinematic_cal_results_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.spot.SpotCheckFeedbackResponse.Error error = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::bosdyn::api::spot::SpotCheckFeedbackResponse_Error>(val));
        } else goto handle_unusual;
        continue;
      // float progress = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          progress_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.spot.PayloadCheckResult payload_result = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_payload_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_cal_timestamp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_cal_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .bosdyn.api.spot.FootHeightCheckResult> foot_height_results = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&foot_height_results_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .bosdyn.api.spot.LegPairCheckResult> leg_pair_results = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&leg_pair_results_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.spot.SpotCheckCommandRequest.Command last_command = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_last_command(static_cast<::bosdyn::api::spot::SpotCheckCommandRequest_Command>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpotCheckFeedbackResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot.SpotCheckFeedbackResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.spot.SpotCheckFeedbackResponse.State state = 2;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  // map<string, .bosdyn.api.spot.DepthPlaneSpotCheckResult> camera_results = 3;
  if (!this->_internal_camera_results().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::bosdyn::api::spot::DepthPlaneSpotCheckResult >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "bosdyn.api.spot.SpotCheckFeedbackResponse.CameraResultsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_camera_results().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_camera_results().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::bosdyn::api::spot::DepthPlaneSpotCheckResult >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::bosdyn::api::spot::DepthPlaneSpotCheckResult >::const_iterator
          it = this->_internal_camera_results().begin();
          it != this->_internal_camera_results().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SpotCheckFeedbackResponse_CameraResultsEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::bosdyn::api::spot::DepthPlaneSpotCheckResult >::const_iterator
          it = this->_internal_camera_results().begin();
          it != this->_internal_camera_results().end(); ++it) {
        target = SpotCheckFeedbackResponse_CameraResultsEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .bosdyn.api.spot.LoadCellSpotCheckResult> load_cell_results = 4;
  if (!this->_internal_load_cell_results().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::bosdyn::api::spot::LoadCellSpotCheckResult >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "bosdyn.api.spot.SpotCheckFeedbackResponse.LoadCellResultsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_load_cell_results().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_load_cell_results().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::bosdyn::api::spot::LoadCellSpotCheckResult >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::bosdyn::api::spot::LoadCellSpotCheckResult >::const_iterator
          it = this->_internal_load_cell_results().begin();
          it != this->_internal_load_cell_results().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SpotCheckFeedbackResponse_LoadCellResultsEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::bosdyn::api::spot::LoadCellSpotCheckResult >::const_iterator
          it = this->_internal_load_cell_results().begin();
          it != this->_internal_load_cell_results().end(); ++it) {
        target = SpotCheckFeedbackResponse_LoadCellResultsEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .bosdyn.api.spot.JointKinematicCheckResult> kinematic_cal_results = 5;
  if (!this->_internal_kinematic_cal_results().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::bosdyn::api::spot::JointKinematicCheckResult >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "bosdyn.api.spot.SpotCheckFeedbackResponse.KinematicCalResultsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_kinematic_cal_results().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_kinematic_cal_results().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::bosdyn::api::spot::JointKinematicCheckResult >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::bosdyn::api::spot::JointKinematicCheckResult >::const_iterator
          it = this->_internal_kinematic_cal_results().begin();
          it != this->_internal_kinematic_cal_results().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SpotCheckFeedbackResponse_KinematicCalResultsEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::bosdyn::api::spot::JointKinematicCheckResult >::const_iterator
          it = this->_internal_kinematic_cal_results().begin();
          it != this->_internal_kinematic_cal_results().end(); ++it) {
        target = SpotCheckFeedbackResponse_KinematicCalResultsEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .bosdyn.api.spot.SpotCheckFeedbackResponse.Error error = 6;
  if (this->error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_error(), target);
  }

  // float progress = 7;
  if (!(this->progress() <= 0 && this->progress() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_progress(), target);
  }

  // .bosdyn.api.spot.PayloadCheckResult payload_result = 8;
  if (this->has_payload_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::payload_result(this), target, stream);
  }

  // .google.protobuf.Timestamp last_cal_timestamp = 9;
  if (this->has_last_cal_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::last_cal_timestamp(this), target, stream);
  }

  // map<string, .bosdyn.api.spot.FootHeightCheckResult> foot_height_results = 10;
  if (!this->_internal_foot_height_results().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::bosdyn::api::spot::FootHeightCheckResult >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "bosdyn.api.spot.SpotCheckFeedbackResponse.FootHeightResultsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_foot_height_results().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_foot_height_results().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::bosdyn::api::spot::FootHeightCheckResult >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::bosdyn::api::spot::FootHeightCheckResult >::const_iterator
          it = this->_internal_foot_height_results().begin();
          it != this->_internal_foot_height_results().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SpotCheckFeedbackResponse_FootHeightResultsEntry_DoNotUse::Funcs::InternalSerialize(10, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::bosdyn::api::spot::FootHeightCheckResult >::const_iterator
          it = this->_internal_foot_height_results().begin();
          it != this->_internal_foot_height_results().end(); ++it) {
        target = SpotCheckFeedbackResponse_FootHeightResultsEntry_DoNotUse::Funcs::InternalSerialize(10, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, .bosdyn.api.spot.LegPairCheckResult> leg_pair_results = 11;
  if (!this->_internal_leg_pair_results().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::bosdyn::api::spot::LegPairCheckResult >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "bosdyn.api.spot.SpotCheckFeedbackResponse.LegPairResultsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_leg_pair_results().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_leg_pair_results().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::bosdyn::api::spot::LegPairCheckResult >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::bosdyn::api::spot::LegPairCheckResult >::const_iterator
          it = this->_internal_leg_pair_results().begin();
          it != this->_internal_leg_pair_results().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SpotCheckFeedbackResponse_LegPairResultsEntry_DoNotUse::Funcs::InternalSerialize(11, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::bosdyn::api::spot::LegPairCheckResult >::const_iterator
          it = this->_internal_leg_pair_results().begin();
          it != this->_internal_leg_pair_results().end(); ++it) {
        target = SpotCheckFeedbackResponse_LegPairResultsEntry_DoNotUse::Funcs::InternalSerialize(11, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .bosdyn.api.spot.SpotCheckCommandRequest.Command last_command = 12;
  if (this->last_command() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_last_command(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot.SpotCheckFeedbackResponse)
  return target;
}

size_t SpotCheckFeedbackResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot.SpotCheckFeedbackResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .bosdyn.api.spot.DepthPlaneSpotCheckResult> camera_results = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_camera_results_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::bosdyn::api::spot::DepthPlaneSpotCheckResult >::const_iterator
      it = this->_internal_camera_results().begin();
      it != this->_internal_camera_results().end(); ++it) {
    total_size += SpotCheckFeedbackResponse_CameraResultsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .bosdyn.api.spot.LoadCellSpotCheckResult> load_cell_results = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_load_cell_results_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::bosdyn::api::spot::LoadCellSpotCheckResult >::const_iterator
      it = this->_internal_load_cell_results().begin();
      it != this->_internal_load_cell_results().end(); ++it) {
    total_size += SpotCheckFeedbackResponse_LoadCellResultsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .bosdyn.api.spot.JointKinematicCheckResult> kinematic_cal_results = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_kinematic_cal_results_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::bosdyn::api::spot::JointKinematicCheckResult >::const_iterator
      it = this->_internal_kinematic_cal_results().begin();
      it != this->_internal_kinematic_cal_results().end(); ++it) {
    total_size += SpotCheckFeedbackResponse_KinematicCalResultsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .bosdyn.api.spot.FootHeightCheckResult> foot_height_results = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_foot_height_results_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::bosdyn::api::spot::FootHeightCheckResult >::const_iterator
      it = this->_internal_foot_height_results().begin();
      it != this->_internal_foot_height_results().end(); ++it) {
    total_size += SpotCheckFeedbackResponse_FootHeightResultsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .bosdyn.api.spot.LegPairCheckResult> leg_pair_results = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_leg_pair_results_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::bosdyn::api::spot::LegPairCheckResult >::const_iterator
      it = this->_internal_leg_pair_results().begin();
      it != this->_internal_leg_pair_results().end(); ++it) {
    total_size += SpotCheckFeedbackResponse_LegPairResultsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.spot.PayloadCheckResult payload_result = 8;
  if (this->has_payload_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *payload_result_);
  }

  // .google.protobuf.Timestamp last_cal_timestamp = 9;
  if (this->has_last_cal_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_cal_timestamp_);
  }

  // .bosdyn.api.spot.SpotCheckFeedbackResponse.State state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  // .bosdyn.api.spot.SpotCheckFeedbackResponse.Error error = 6;
  if (this->error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error());
  }

  // float progress = 7;
  if (!(this->progress() <= 0 && this->progress() >= 0)) {
    total_size += 1 + 4;
  }

  // .bosdyn.api.spot.SpotCheckCommandRequest.Command last_command = 12;
  if (this->last_command() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_last_command());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpotCheckFeedbackResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot.SpotCheckFeedbackResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SpotCheckFeedbackResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpotCheckFeedbackResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot.SpotCheckFeedbackResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot.SpotCheckFeedbackResponse)
    MergeFrom(*source);
  }
}

void SpotCheckFeedbackResponse::MergeFrom(const SpotCheckFeedbackResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot.SpotCheckFeedbackResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  camera_results_.MergeFrom(from.camera_results_);
  load_cell_results_.MergeFrom(from.load_cell_results_);
  kinematic_cal_results_.MergeFrom(from.kinematic_cal_results_);
  foot_height_results_.MergeFrom(from.foot_height_results_);
  leg_pair_results_.MergeFrom(from.leg_pair_results_);
  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.has_payload_result()) {
    _internal_mutable_payload_result()->::bosdyn::api::spot::PayloadCheckResult::MergeFrom(from._internal_payload_result());
  }
  if (from.has_last_cal_timestamp()) {
    _internal_mutable_last_cal_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_last_cal_timestamp());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.error() != 0) {
    _internal_set_error(from._internal_error());
  }
  if (!(from.progress() <= 0 && from.progress() >= 0)) {
    _internal_set_progress(from._internal_progress());
  }
  if (from.last_command() != 0) {
    _internal_set_last_command(from._internal_last_command());
  }
}

void SpotCheckFeedbackResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot.SpotCheckFeedbackResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpotCheckFeedbackResponse::CopyFrom(const SpotCheckFeedbackResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot.SpotCheckFeedbackResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpotCheckFeedbackResponse::IsInitialized() const {
  return true;
}

void SpotCheckFeedbackResponse::InternalSwap(SpotCheckFeedbackResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  camera_results_.Swap(&other->camera_results_);
  load_cell_results_.Swap(&other->load_cell_results_);
  kinematic_cal_results_.Swap(&other->kinematic_cal_results_);
  foot_height_results_.Swap(&other->foot_height_results_);
  leg_pair_results_.Swap(&other->leg_pair_results_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpotCheckFeedbackResponse, last_command_)
      + sizeof(SpotCheckFeedbackResponse::last_command_)
      - PROTOBUF_FIELD_OFFSET(SpotCheckFeedbackResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpotCheckFeedbackResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DepthPlaneSpotCheckResult::InitAsDefaultInstance() {
}
class DepthPlaneSpotCheckResult::_Internal {
 public:
};

DepthPlaneSpotCheckResult::DepthPlaneSpotCheckResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot.DepthPlaneSpotCheckResult)
}
DepthPlaneSpotCheckResult::DepthPlaneSpotCheckResult(const DepthPlaneSpotCheckResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&severity_score_) -
    reinterpret_cast<char*>(&status_)) + sizeof(severity_score_));
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot.DepthPlaneSpotCheckResult)
}

void DepthPlaneSpotCheckResult::SharedCtor() {
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&severity_score_) -
      reinterpret_cast<char*>(&status_)) + sizeof(severity_score_));
}

DepthPlaneSpotCheckResult::~DepthPlaneSpotCheckResult() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot.DepthPlaneSpotCheckResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DepthPlaneSpotCheckResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DepthPlaneSpotCheckResult::ArenaDtor(void* object) {
  DepthPlaneSpotCheckResult* _this = reinterpret_cast< DepthPlaneSpotCheckResult* >(object);
  (void)_this;
}
void DepthPlaneSpotCheckResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DepthPlaneSpotCheckResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DepthPlaneSpotCheckResult& DepthPlaneSpotCheckResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DepthPlaneSpotCheckResult_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto.base);
  return *internal_default_instance();
}


void DepthPlaneSpotCheckResult::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot.DepthPlaneSpotCheckResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&severity_score_) -
      reinterpret_cast<char*>(&status_)) + sizeof(severity_score_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DepthPlaneSpotCheckResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.spot.DepthPlaneSpotCheckResult.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::bosdyn::api::spot::DepthPlaneSpotCheckResult_Status>(val));
        } else goto handle_unusual;
        continue;
      // float severity_score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          severity_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DepthPlaneSpotCheckResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot.DepthPlaneSpotCheckResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.spot.DepthPlaneSpotCheckResult.Status status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // float severity_score = 2;
  if (!(this->severity_score() <= 0 && this->severity_score() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_severity_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot.DepthPlaneSpotCheckResult)
  return target;
}

size_t DepthPlaneSpotCheckResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot.DepthPlaneSpotCheckResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.spot.DepthPlaneSpotCheckResult.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // float severity_score = 2;
  if (!(this->severity_score() <= 0 && this->severity_score() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DepthPlaneSpotCheckResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot.DepthPlaneSpotCheckResult)
  GOOGLE_DCHECK_NE(&from, this);
  const DepthPlaneSpotCheckResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DepthPlaneSpotCheckResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot.DepthPlaneSpotCheckResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot.DepthPlaneSpotCheckResult)
    MergeFrom(*source);
  }
}

void DepthPlaneSpotCheckResult::MergeFrom(const DepthPlaneSpotCheckResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot.DepthPlaneSpotCheckResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (!(from.severity_score() <= 0 && from.severity_score() >= 0)) {
    _internal_set_severity_score(from._internal_severity_score());
  }
}

void DepthPlaneSpotCheckResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot.DepthPlaneSpotCheckResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DepthPlaneSpotCheckResult::CopyFrom(const DepthPlaneSpotCheckResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot.DepthPlaneSpotCheckResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepthPlaneSpotCheckResult::IsInitialized() const {
  return true;
}

void DepthPlaneSpotCheckResult::InternalSwap(DepthPlaneSpotCheckResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DepthPlaneSpotCheckResult, severity_score_)
      + sizeof(DepthPlaneSpotCheckResult::severity_score_)
      - PROTOBUF_FIELD_OFFSET(DepthPlaneSpotCheckResult, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DepthPlaneSpotCheckResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PayloadCheckResult::InitAsDefaultInstance() {
}
class PayloadCheckResult::_Internal {
 public:
};

PayloadCheckResult::PayloadCheckResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot.PayloadCheckResult)
}
PayloadCheckResult::PayloadCheckResult(const PayloadCheckResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&error_, &from.error_,
    static_cast<size_t>(reinterpret_cast<char*>(&extra_payload_) -
    reinterpret_cast<char*>(&error_)) + sizeof(extra_payload_));
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot.PayloadCheckResult)
}

void PayloadCheckResult::SharedCtor() {
  ::memset(&error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&extra_payload_) -
      reinterpret_cast<char*>(&error_)) + sizeof(extra_payload_));
}

PayloadCheckResult::~PayloadCheckResult() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot.PayloadCheckResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PayloadCheckResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PayloadCheckResult::ArenaDtor(void* object) {
  PayloadCheckResult* _this = reinterpret_cast< PayloadCheckResult* >(object);
  (void)_this;
}
void PayloadCheckResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PayloadCheckResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PayloadCheckResult& PayloadCheckResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PayloadCheckResult_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto.base);
  return *internal_default_instance();
}


void PayloadCheckResult::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot.PayloadCheckResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&extra_payload_) -
      reinterpret_cast<char*>(&error_)) + sizeof(extra_payload_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PayloadCheckResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.spot.PayloadCheckResult.Error error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::bosdyn::api::spot::PayloadCheckResult_Error>(val));
        } else goto handle_unusual;
        continue;
      // float extra_payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          extra_payload_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PayloadCheckResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot.PayloadCheckResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.spot.PayloadCheckResult.Error error = 1;
  if (this->error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_error(), target);
  }

  // float extra_payload = 2;
  if (!(this->extra_payload() <= 0 && this->extra_payload() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_extra_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot.PayloadCheckResult)
  return target;
}

size_t PayloadCheckResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot.PayloadCheckResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.spot.PayloadCheckResult.Error error = 1;
  if (this->error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error());
  }

  // float extra_payload = 2;
  if (!(this->extra_payload() <= 0 && this->extra_payload() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PayloadCheckResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot.PayloadCheckResult)
  GOOGLE_DCHECK_NE(&from, this);
  const PayloadCheckResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PayloadCheckResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot.PayloadCheckResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot.PayloadCheckResult)
    MergeFrom(*source);
  }
}

void PayloadCheckResult::MergeFrom(const PayloadCheckResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot.PayloadCheckResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error() != 0) {
    _internal_set_error(from._internal_error());
  }
  if (!(from.extra_payload() <= 0 && from.extra_payload() >= 0)) {
    _internal_set_extra_payload(from._internal_extra_payload());
  }
}

void PayloadCheckResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot.PayloadCheckResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PayloadCheckResult::CopyFrom(const PayloadCheckResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot.PayloadCheckResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PayloadCheckResult::IsInitialized() const {
  return true;
}

void PayloadCheckResult::InternalSwap(PayloadCheckResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PayloadCheckResult, extra_payload_)
      + sizeof(PayloadCheckResult::extra_payload_)
      - PROTOBUF_FIELD_OFFSET(PayloadCheckResult, error_)>(
          reinterpret_cast<char*>(&error_),
          reinterpret_cast<char*>(&other->error_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PayloadCheckResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoadCellSpotCheckResult::InitAsDefaultInstance() {
}
class LoadCellSpotCheckResult::_Internal {
 public:
};

LoadCellSpotCheckResult::LoadCellSpotCheckResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot.LoadCellSpotCheckResult)
}
LoadCellSpotCheckResult::LoadCellSpotCheckResult(const LoadCellSpotCheckResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&error_, &from.error_,
    static_cast<size_t>(reinterpret_cast<char*>(&old_zero_) -
    reinterpret_cast<char*>(&error_)) + sizeof(old_zero_));
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot.LoadCellSpotCheckResult)
}

void LoadCellSpotCheckResult::SharedCtor() {
  ::memset(&error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&old_zero_) -
      reinterpret_cast<char*>(&error_)) + sizeof(old_zero_));
}

LoadCellSpotCheckResult::~LoadCellSpotCheckResult() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot.LoadCellSpotCheckResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoadCellSpotCheckResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LoadCellSpotCheckResult::ArenaDtor(void* object) {
  LoadCellSpotCheckResult* _this = reinterpret_cast< LoadCellSpotCheckResult* >(object);
  (void)_this;
}
void LoadCellSpotCheckResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadCellSpotCheckResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadCellSpotCheckResult& LoadCellSpotCheckResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadCellSpotCheckResult_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto.base);
  return *internal_default_instance();
}


void LoadCellSpotCheckResult::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot.LoadCellSpotCheckResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&old_zero_) -
      reinterpret_cast<char*>(&error_)) + sizeof(old_zero_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadCellSpotCheckResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.spot.LoadCellSpotCheckResult.Error error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::bosdyn::api::spot::LoadCellSpotCheckResult_Error>(val));
        } else goto handle_unusual;
        continue;
      // float zero = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          zero_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float old_zero = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          old_zero_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadCellSpotCheckResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot.LoadCellSpotCheckResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.spot.LoadCellSpotCheckResult.Error error = 2;
  if (this->error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_error(), target);
  }

  // float zero = 3;
  if (!(this->zero() <= 0 && this->zero() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_zero(), target);
  }

  // float old_zero = 4;
  if (!(this->old_zero() <= 0 && this->old_zero() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_old_zero(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot.LoadCellSpotCheckResult)
  return target;
}

size_t LoadCellSpotCheckResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot.LoadCellSpotCheckResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.spot.LoadCellSpotCheckResult.Error error = 2;
  if (this->error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error());
  }

  // float zero = 3;
  if (!(this->zero() <= 0 && this->zero() >= 0)) {
    total_size += 1 + 4;
  }

  // float old_zero = 4;
  if (!(this->old_zero() <= 0 && this->old_zero() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadCellSpotCheckResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot.LoadCellSpotCheckResult)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadCellSpotCheckResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadCellSpotCheckResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot.LoadCellSpotCheckResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot.LoadCellSpotCheckResult)
    MergeFrom(*source);
  }
}

void LoadCellSpotCheckResult::MergeFrom(const LoadCellSpotCheckResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot.LoadCellSpotCheckResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error() != 0) {
    _internal_set_error(from._internal_error());
  }
  if (!(from.zero() <= 0 && from.zero() >= 0)) {
    _internal_set_zero(from._internal_zero());
  }
  if (!(from.old_zero() <= 0 && from.old_zero() >= 0)) {
    _internal_set_old_zero(from._internal_old_zero());
  }
}

void LoadCellSpotCheckResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot.LoadCellSpotCheckResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadCellSpotCheckResult::CopyFrom(const LoadCellSpotCheckResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot.LoadCellSpotCheckResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadCellSpotCheckResult::IsInitialized() const {
  return true;
}

void LoadCellSpotCheckResult::InternalSwap(LoadCellSpotCheckResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoadCellSpotCheckResult, old_zero_)
      + sizeof(LoadCellSpotCheckResult::old_zero_)
      - PROTOBUF_FIELD_OFFSET(LoadCellSpotCheckResult, error_)>(
          reinterpret_cast<char*>(&error_),
          reinterpret_cast<char*>(&other->error_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadCellSpotCheckResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JointKinematicCheckResult::InitAsDefaultInstance() {
}
class JointKinematicCheckResult::_Internal {
 public:
};

JointKinematicCheckResult::JointKinematicCheckResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot.JointKinematicCheckResult)
}
JointKinematicCheckResult::JointKinematicCheckResult(const JointKinematicCheckResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&error_, &from.error_,
    static_cast<size_t>(reinterpret_cast<char*>(&health_score_) -
    reinterpret_cast<char*>(&error_)) + sizeof(health_score_));
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot.JointKinematicCheckResult)
}

void JointKinematicCheckResult::SharedCtor() {
  ::memset(&error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&health_score_) -
      reinterpret_cast<char*>(&error_)) + sizeof(health_score_));
}

JointKinematicCheckResult::~JointKinematicCheckResult() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot.JointKinematicCheckResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JointKinematicCheckResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void JointKinematicCheckResult::ArenaDtor(void* object) {
  JointKinematicCheckResult* _this = reinterpret_cast< JointKinematicCheckResult* >(object);
  (void)_this;
}
void JointKinematicCheckResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JointKinematicCheckResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JointKinematicCheckResult& JointKinematicCheckResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JointKinematicCheckResult_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto.base);
  return *internal_default_instance();
}


void JointKinematicCheckResult::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot.JointKinematicCheckResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&health_score_) -
      reinterpret_cast<char*>(&error_)) + sizeof(health_score_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JointKinematicCheckResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.spot.JointKinematicCheckResult.Error error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::bosdyn::api::spot::JointKinematicCheckResult_Error>(val));
        } else goto handle_unusual;
        continue;
      // float offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float old_offset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          old_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float health_score = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          health_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JointKinematicCheckResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot.JointKinematicCheckResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.spot.JointKinematicCheckResult.Error error = 2;
  if (this->error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_error(), target);
  }

  // float offset = 3;
  if (!(this->offset() <= 0 && this->offset() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_offset(), target);
  }

  // float old_offset = 4;
  if (!(this->old_offset() <= 0 && this->old_offset() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_old_offset(), target);
  }

  // float health_score = 5;
  if (!(this->health_score() <= 0 && this->health_score() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_health_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot.JointKinematicCheckResult)
  return target;
}

size_t JointKinematicCheckResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot.JointKinematicCheckResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.spot.JointKinematicCheckResult.Error error = 2;
  if (this->error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error());
  }

  // float offset = 3;
  if (!(this->offset() <= 0 && this->offset() >= 0)) {
    total_size += 1 + 4;
  }

  // float old_offset = 4;
  if (!(this->old_offset() <= 0 && this->old_offset() >= 0)) {
    total_size += 1 + 4;
  }

  // float health_score = 5;
  if (!(this->health_score() <= 0 && this->health_score() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JointKinematicCheckResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot.JointKinematicCheckResult)
  GOOGLE_DCHECK_NE(&from, this);
  const JointKinematicCheckResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JointKinematicCheckResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot.JointKinematicCheckResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot.JointKinematicCheckResult)
    MergeFrom(*source);
  }
}

void JointKinematicCheckResult::MergeFrom(const JointKinematicCheckResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot.JointKinematicCheckResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error() != 0) {
    _internal_set_error(from._internal_error());
  }
  if (!(from.offset() <= 0 && from.offset() >= 0)) {
    _internal_set_offset(from._internal_offset());
  }
  if (!(from.old_offset() <= 0 && from.old_offset() >= 0)) {
    _internal_set_old_offset(from._internal_old_offset());
  }
  if (!(from.health_score() <= 0 && from.health_score() >= 0)) {
    _internal_set_health_score(from._internal_health_score());
  }
}

void JointKinematicCheckResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot.JointKinematicCheckResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JointKinematicCheckResult::CopyFrom(const JointKinematicCheckResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot.JointKinematicCheckResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointKinematicCheckResult::IsInitialized() const {
  return true;
}

void JointKinematicCheckResult::InternalSwap(JointKinematicCheckResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JointKinematicCheckResult, health_score_)
      + sizeof(JointKinematicCheckResult::health_score_)
      - PROTOBUF_FIELD_OFFSET(JointKinematicCheckResult, error_)>(
          reinterpret_cast<char*>(&error_),
          reinterpret_cast<char*>(&other->error_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JointKinematicCheckResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FootHeightCheckResult::InitAsDefaultInstance() {
}
class FootHeightCheckResult::_Internal {
 public:
};

FootHeightCheckResult::FootHeightCheckResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot.FootHeightCheckResult)
}
FootHeightCheckResult::FootHeightCheckResult(const FootHeightCheckResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&foot_height_error_from_mean_) -
    reinterpret_cast<char*>(&status_)) + sizeof(foot_height_error_from_mean_));
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot.FootHeightCheckResult)
}

void FootHeightCheckResult::SharedCtor() {
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&foot_height_error_from_mean_) -
      reinterpret_cast<char*>(&status_)) + sizeof(foot_height_error_from_mean_));
}

FootHeightCheckResult::~FootHeightCheckResult() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot.FootHeightCheckResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FootHeightCheckResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FootHeightCheckResult::ArenaDtor(void* object) {
  FootHeightCheckResult* _this = reinterpret_cast< FootHeightCheckResult* >(object);
  (void)_this;
}
void FootHeightCheckResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FootHeightCheckResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FootHeightCheckResult& FootHeightCheckResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FootHeightCheckResult_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto.base);
  return *internal_default_instance();
}


void FootHeightCheckResult::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot.FootHeightCheckResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&foot_height_error_from_mean_) -
      reinterpret_cast<char*>(&status_)) + sizeof(foot_height_error_from_mean_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FootHeightCheckResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.spot.FootHeightCheckResult.Status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::bosdyn::api::spot::FootHeightCheckResult_Status>(val));
        } else goto handle_unusual;
        continue;
      // float foot_height_error_from_mean = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          foot_height_error_from_mean_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FootHeightCheckResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot.FootHeightCheckResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.spot.FootHeightCheckResult.Status status = 2;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // float foot_height_error_from_mean = 3;
  if (!(this->foot_height_error_from_mean() <= 0 && this->foot_height_error_from_mean() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_foot_height_error_from_mean(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot.FootHeightCheckResult)
  return target;
}

size_t FootHeightCheckResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot.FootHeightCheckResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.spot.FootHeightCheckResult.Status status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // float foot_height_error_from_mean = 3;
  if (!(this->foot_height_error_from_mean() <= 0 && this->foot_height_error_from_mean() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FootHeightCheckResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot.FootHeightCheckResult)
  GOOGLE_DCHECK_NE(&from, this);
  const FootHeightCheckResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FootHeightCheckResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot.FootHeightCheckResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot.FootHeightCheckResult)
    MergeFrom(*source);
  }
}

void FootHeightCheckResult::MergeFrom(const FootHeightCheckResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot.FootHeightCheckResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (!(from.foot_height_error_from_mean() <= 0 && from.foot_height_error_from_mean() >= 0)) {
    _internal_set_foot_height_error_from_mean(from._internal_foot_height_error_from_mean());
  }
}

void FootHeightCheckResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot.FootHeightCheckResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FootHeightCheckResult::CopyFrom(const FootHeightCheckResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot.FootHeightCheckResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FootHeightCheckResult::IsInitialized() const {
  return true;
}

void FootHeightCheckResult::InternalSwap(FootHeightCheckResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FootHeightCheckResult, foot_height_error_from_mean_)
      + sizeof(FootHeightCheckResult::foot_height_error_from_mean_)
      - PROTOBUF_FIELD_OFFSET(FootHeightCheckResult, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FootHeightCheckResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LegPairCheckResult::InitAsDefaultInstance() {
}
class LegPairCheckResult::_Internal {
 public:
};

LegPairCheckResult::LegPairCheckResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot.LegPairCheckResult)
}
LegPairCheckResult::LegPairCheckResult(const LegPairCheckResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&leg_pair_distance_change_) -
    reinterpret_cast<char*>(&status_)) + sizeof(leg_pair_distance_change_));
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot.LegPairCheckResult)
}

void LegPairCheckResult::SharedCtor() {
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leg_pair_distance_change_) -
      reinterpret_cast<char*>(&status_)) + sizeof(leg_pair_distance_change_));
}

LegPairCheckResult::~LegPairCheckResult() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot.LegPairCheckResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LegPairCheckResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LegPairCheckResult::ArenaDtor(void* object) {
  LegPairCheckResult* _this = reinterpret_cast< LegPairCheckResult* >(object);
  (void)_this;
}
void LegPairCheckResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LegPairCheckResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LegPairCheckResult& LegPairCheckResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LegPairCheckResult_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto.base);
  return *internal_default_instance();
}


void LegPairCheckResult::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot.LegPairCheckResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leg_pair_distance_change_) -
      reinterpret_cast<char*>(&status_)) + sizeof(leg_pair_distance_change_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LegPairCheckResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.spot.LegPairCheckResult.Status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::bosdyn::api::spot::LegPairCheckResult_Status>(val));
        } else goto handle_unusual;
        continue;
      // float leg_pair_distance_change = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          leg_pair_distance_change_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LegPairCheckResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot.LegPairCheckResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.spot.LegPairCheckResult.Status status = 2;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // float leg_pair_distance_change = 3;
  if (!(this->leg_pair_distance_change() <= 0 && this->leg_pair_distance_change() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_leg_pair_distance_change(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot.LegPairCheckResult)
  return target;
}

size_t LegPairCheckResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot.LegPairCheckResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.spot.LegPairCheckResult.Status status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // float leg_pair_distance_change = 3;
  if (!(this->leg_pair_distance_change() <= 0 && this->leg_pair_distance_change() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LegPairCheckResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot.LegPairCheckResult)
  GOOGLE_DCHECK_NE(&from, this);
  const LegPairCheckResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LegPairCheckResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot.LegPairCheckResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot.LegPairCheckResult)
    MergeFrom(*source);
  }
}

void LegPairCheckResult::MergeFrom(const LegPairCheckResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot.LegPairCheckResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (!(from.leg_pair_distance_change() <= 0 && from.leg_pair_distance_change() >= 0)) {
    _internal_set_leg_pair_distance_change(from._internal_leg_pair_distance_change());
  }
}

void LegPairCheckResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot.LegPairCheckResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LegPairCheckResult::CopyFrom(const LegPairCheckResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot.LegPairCheckResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LegPairCheckResult::IsInitialized() const {
  return true;
}

void LegPairCheckResult::InternalSwap(LegPairCheckResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LegPairCheckResult, leg_pair_distance_change_)
      + sizeof(LegPairCheckResult::leg_pair_distance_change_)
      - PROTOBUF_FIELD_OFFSET(LegPairCheckResult, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LegPairCheckResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CameraCalibrationCommandRequest::InitAsDefaultInstance() {
  ::bosdyn::api::spot::_CameraCalibrationCommandRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
  ::bosdyn::api::spot::_CameraCalibrationCommandRequest_default_instance_._instance.get_mutable()->lease_ = const_cast< ::bosdyn::api::Lease*>(
      ::bosdyn::api::Lease::internal_default_instance());
}
class CameraCalibrationCommandRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const CameraCalibrationCommandRequest* msg);
  static const ::bosdyn::api::Lease& lease(const CameraCalibrationCommandRequest* msg);
};

const ::bosdyn::api::RequestHeader&
CameraCalibrationCommandRequest::_Internal::header(const CameraCalibrationCommandRequest* msg) {
  return *msg->header_;
}
const ::bosdyn::api::Lease&
CameraCalibrationCommandRequest::_Internal::lease(const CameraCalibrationCommandRequest* msg) {
  return *msg->lease_;
}
void CameraCalibrationCommandRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void CameraCalibrationCommandRequest::clear_lease() {
  if (GetArena() == nullptr && lease_ != nullptr) {
    delete lease_;
  }
  lease_ = nullptr;
}
CameraCalibrationCommandRequest::CameraCalibrationCommandRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot.CameraCalibrationCommandRequest)
}
CameraCalibrationCommandRequest::CameraCalibrationCommandRequest(const CameraCalibrationCommandRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_lease()) {
    lease_ = new ::bosdyn::api::Lease(*from.lease_);
  } else {
    lease_ = nullptr;
  }
  command_ = from.command_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot.CameraCalibrationCommandRequest)
}

void CameraCalibrationCommandRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CameraCalibrationCommandRequest_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&command_) -
      reinterpret_cast<char*>(&header_)) + sizeof(command_));
}

CameraCalibrationCommandRequest::~CameraCalibrationCommandRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot.CameraCalibrationCommandRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CameraCalibrationCommandRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete lease_;
}

void CameraCalibrationCommandRequest::ArenaDtor(void* object) {
  CameraCalibrationCommandRequest* _this = reinterpret_cast< CameraCalibrationCommandRequest* >(object);
  (void)_this;
}
void CameraCalibrationCommandRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CameraCalibrationCommandRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CameraCalibrationCommandRequest& CameraCalibrationCommandRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CameraCalibrationCommandRequest_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto.base);
  return *internal_default_instance();
}


void CameraCalibrationCommandRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot.CameraCalibrationCommandRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && lease_ != nullptr) {
    delete lease_;
  }
  lease_ = nullptr;
  command_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraCalibrationCommandRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.Lease lease = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lease(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.spot.CameraCalibrationCommandRequest.Command command = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_command(static_cast<::bosdyn::api::spot::CameraCalibrationCommandRequest_Command>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraCalibrationCommandRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot.CameraCalibrationCommandRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.Lease lease = 2;
  if (this->has_lease()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::lease(this), target, stream);
  }

  // .bosdyn.api.spot.CameraCalibrationCommandRequest.Command command = 3;
  if (this->command() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_command(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot.CameraCalibrationCommandRequest)
  return target;
}

size_t CameraCalibrationCommandRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot.CameraCalibrationCommandRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.Lease lease = 2;
  if (this->has_lease()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lease_);
  }

  // .bosdyn.api.spot.CameraCalibrationCommandRequest.Command command = 3;
  if (this->command() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_command());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraCalibrationCommandRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot.CameraCalibrationCommandRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraCalibrationCommandRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraCalibrationCommandRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot.CameraCalibrationCommandRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot.CameraCalibrationCommandRequest)
    MergeFrom(*source);
  }
}

void CameraCalibrationCommandRequest::MergeFrom(const CameraCalibrationCommandRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot.CameraCalibrationCommandRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
  if (from.has_lease()) {
    _internal_mutable_lease()->::bosdyn::api::Lease::MergeFrom(from._internal_lease());
  }
  if (from.command() != 0) {
    _internal_set_command(from._internal_command());
  }
}

void CameraCalibrationCommandRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot.CameraCalibrationCommandRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraCalibrationCommandRequest::CopyFrom(const CameraCalibrationCommandRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot.CameraCalibrationCommandRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraCalibrationCommandRequest::IsInitialized() const {
  return true;
}

void CameraCalibrationCommandRequest::InternalSwap(CameraCalibrationCommandRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CameraCalibrationCommandRequest, command_)
      + sizeof(CameraCalibrationCommandRequest::command_)
      - PROTOBUF_FIELD_OFFSET(CameraCalibrationCommandRequest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraCalibrationCommandRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CameraCalibrationCommandResponse::InitAsDefaultInstance() {
  ::bosdyn::api::spot::_CameraCalibrationCommandResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
  ::bosdyn::api::spot::_CameraCalibrationCommandResponse_default_instance_._instance.get_mutable()->lease_use_result_ = const_cast< ::bosdyn::api::LeaseUseResult*>(
      ::bosdyn::api::LeaseUseResult::internal_default_instance());
}
class CameraCalibrationCommandResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const CameraCalibrationCommandResponse* msg);
  static const ::bosdyn::api::LeaseUseResult& lease_use_result(const CameraCalibrationCommandResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
CameraCalibrationCommandResponse::_Internal::header(const CameraCalibrationCommandResponse* msg) {
  return *msg->header_;
}
const ::bosdyn::api::LeaseUseResult&
CameraCalibrationCommandResponse::_Internal::lease_use_result(const CameraCalibrationCommandResponse* msg) {
  return *msg->lease_use_result_;
}
void CameraCalibrationCommandResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void CameraCalibrationCommandResponse::clear_lease_use_result() {
  if (GetArena() == nullptr && lease_use_result_ != nullptr) {
    delete lease_use_result_;
  }
  lease_use_result_ = nullptr;
}
CameraCalibrationCommandResponse::CameraCalibrationCommandResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot.CameraCalibrationCommandResponse)
}
CameraCalibrationCommandResponse::CameraCalibrationCommandResponse(const CameraCalibrationCommandResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_lease_use_result()) {
    lease_use_result_ = new ::bosdyn::api::LeaseUseResult(*from.lease_use_result_);
  } else {
    lease_use_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot.CameraCalibrationCommandResponse)
}

void CameraCalibrationCommandResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CameraCalibrationCommandResponse_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lease_use_result_) -
      reinterpret_cast<char*>(&header_)) + sizeof(lease_use_result_));
}

CameraCalibrationCommandResponse::~CameraCalibrationCommandResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot.CameraCalibrationCommandResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CameraCalibrationCommandResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete lease_use_result_;
}

void CameraCalibrationCommandResponse::ArenaDtor(void* object) {
  CameraCalibrationCommandResponse* _this = reinterpret_cast< CameraCalibrationCommandResponse* >(object);
  (void)_this;
}
void CameraCalibrationCommandResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CameraCalibrationCommandResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CameraCalibrationCommandResponse& CameraCalibrationCommandResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CameraCalibrationCommandResponse_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto.base);
  return *internal_default_instance();
}


void CameraCalibrationCommandResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot.CameraCalibrationCommandResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && lease_use_result_ != nullptr) {
    delete lease_use_result_;
  }
  lease_use_result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraCalibrationCommandResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.LeaseUseResult lease_use_result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lease_use_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraCalibrationCommandResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot.CameraCalibrationCommandResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.LeaseUseResult lease_use_result = 2;
  if (this->has_lease_use_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::lease_use_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot.CameraCalibrationCommandResponse)
  return target;
}

size_t CameraCalibrationCommandResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot.CameraCalibrationCommandResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.LeaseUseResult lease_use_result = 2;
  if (this->has_lease_use_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lease_use_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraCalibrationCommandResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot.CameraCalibrationCommandResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraCalibrationCommandResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraCalibrationCommandResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot.CameraCalibrationCommandResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot.CameraCalibrationCommandResponse)
    MergeFrom(*source);
  }
}

void CameraCalibrationCommandResponse::MergeFrom(const CameraCalibrationCommandResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot.CameraCalibrationCommandResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.has_lease_use_result()) {
    _internal_mutable_lease_use_result()->::bosdyn::api::LeaseUseResult::MergeFrom(from._internal_lease_use_result());
  }
}

void CameraCalibrationCommandResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot.CameraCalibrationCommandResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraCalibrationCommandResponse::CopyFrom(const CameraCalibrationCommandResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot.CameraCalibrationCommandResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraCalibrationCommandResponse::IsInitialized() const {
  return true;
}

void CameraCalibrationCommandResponse::InternalSwap(CameraCalibrationCommandResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CameraCalibrationCommandResponse, lease_use_result_)
      + sizeof(CameraCalibrationCommandResponse::lease_use_result_)
      - PROTOBUF_FIELD_OFFSET(CameraCalibrationCommandResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraCalibrationCommandResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CameraCalibrationFeedbackRequest::InitAsDefaultInstance() {
  ::bosdyn::api::spot::_CameraCalibrationFeedbackRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
}
class CameraCalibrationFeedbackRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const CameraCalibrationFeedbackRequest* msg);
};

const ::bosdyn::api::RequestHeader&
CameraCalibrationFeedbackRequest::_Internal::header(const CameraCalibrationFeedbackRequest* msg) {
  return *msg->header_;
}
void CameraCalibrationFeedbackRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
CameraCalibrationFeedbackRequest::CameraCalibrationFeedbackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot.CameraCalibrationFeedbackRequest)
}
CameraCalibrationFeedbackRequest::CameraCalibrationFeedbackRequest(const CameraCalibrationFeedbackRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot.CameraCalibrationFeedbackRequest)
}

void CameraCalibrationFeedbackRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CameraCalibrationFeedbackRequest_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto.base);
  header_ = nullptr;
}

CameraCalibrationFeedbackRequest::~CameraCalibrationFeedbackRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot.CameraCalibrationFeedbackRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CameraCalibrationFeedbackRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void CameraCalibrationFeedbackRequest::ArenaDtor(void* object) {
  CameraCalibrationFeedbackRequest* _this = reinterpret_cast< CameraCalibrationFeedbackRequest* >(object);
  (void)_this;
}
void CameraCalibrationFeedbackRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CameraCalibrationFeedbackRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CameraCalibrationFeedbackRequest& CameraCalibrationFeedbackRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CameraCalibrationFeedbackRequest_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto.base);
  return *internal_default_instance();
}


void CameraCalibrationFeedbackRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot.CameraCalibrationFeedbackRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraCalibrationFeedbackRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraCalibrationFeedbackRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot.CameraCalibrationFeedbackRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot.CameraCalibrationFeedbackRequest)
  return target;
}

size_t CameraCalibrationFeedbackRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot.CameraCalibrationFeedbackRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraCalibrationFeedbackRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot.CameraCalibrationFeedbackRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraCalibrationFeedbackRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraCalibrationFeedbackRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot.CameraCalibrationFeedbackRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot.CameraCalibrationFeedbackRequest)
    MergeFrom(*source);
  }
}

void CameraCalibrationFeedbackRequest::MergeFrom(const CameraCalibrationFeedbackRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot.CameraCalibrationFeedbackRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
}

void CameraCalibrationFeedbackRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot.CameraCalibrationFeedbackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraCalibrationFeedbackRequest::CopyFrom(const CameraCalibrationFeedbackRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot.CameraCalibrationFeedbackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraCalibrationFeedbackRequest::IsInitialized() const {
  return true;
}

void CameraCalibrationFeedbackRequest::InternalSwap(CameraCalibrationFeedbackRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraCalibrationFeedbackRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CameraCalibrationFeedbackResponse::InitAsDefaultInstance() {
  ::bosdyn::api::spot::_CameraCalibrationFeedbackResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
}
class CameraCalibrationFeedbackResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const CameraCalibrationFeedbackResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
CameraCalibrationFeedbackResponse::_Internal::header(const CameraCalibrationFeedbackResponse* msg) {
  return *msg->header_;
}
void CameraCalibrationFeedbackResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
CameraCalibrationFeedbackResponse::CameraCalibrationFeedbackResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.spot.CameraCalibrationFeedbackResponse)
}
CameraCalibrationFeedbackResponse::CameraCalibrationFeedbackResponse(const CameraCalibrationFeedbackResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&progress_) -
    reinterpret_cast<char*>(&status_)) + sizeof(progress_));
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.spot.CameraCalibrationFeedbackResponse)
}

void CameraCalibrationFeedbackResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CameraCalibrationFeedbackResponse_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&progress_) -
      reinterpret_cast<char*>(&header_)) + sizeof(progress_));
}

CameraCalibrationFeedbackResponse::~CameraCalibrationFeedbackResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.spot.CameraCalibrationFeedbackResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CameraCalibrationFeedbackResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void CameraCalibrationFeedbackResponse::ArenaDtor(void* object) {
  CameraCalibrationFeedbackResponse* _this = reinterpret_cast< CameraCalibrationFeedbackResponse* >(object);
  (void)_this;
}
void CameraCalibrationFeedbackResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CameraCalibrationFeedbackResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CameraCalibrationFeedbackResponse& CameraCalibrationFeedbackResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CameraCalibrationFeedbackResponse_bosdyn_2fapi_2fspot_2fspot_5fcheck_2eproto.base);
  return *internal_default_instance();
}


void CameraCalibrationFeedbackResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.spot.CameraCalibrationFeedbackResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&progress_) -
      reinterpret_cast<char*>(&status_)) + sizeof(progress_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraCalibrationFeedbackResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.spot.CameraCalibrationFeedbackResponse.Status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::bosdyn::api::spot::CameraCalibrationFeedbackResponse_Status>(val));
        } else goto handle_unusual;
        continue;
      // float progress = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          progress_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraCalibrationFeedbackResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.spot.CameraCalibrationFeedbackResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.spot.CameraCalibrationFeedbackResponse.Status status = 2;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // float progress = 3;
  if (!(this->progress() <= 0 && this->progress() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_progress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.spot.CameraCalibrationFeedbackResponse)
  return target;
}

size_t CameraCalibrationFeedbackResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.spot.CameraCalibrationFeedbackResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.spot.CameraCalibrationFeedbackResponse.Status status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // float progress = 3;
  if (!(this->progress() <= 0 && this->progress() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraCalibrationFeedbackResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.spot.CameraCalibrationFeedbackResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraCalibrationFeedbackResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraCalibrationFeedbackResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.spot.CameraCalibrationFeedbackResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.spot.CameraCalibrationFeedbackResponse)
    MergeFrom(*source);
  }
}

void CameraCalibrationFeedbackResponse::MergeFrom(const CameraCalibrationFeedbackResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.spot.CameraCalibrationFeedbackResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (!(from.progress() <= 0 && from.progress() >= 0)) {
    _internal_set_progress(from._internal_progress());
  }
}

void CameraCalibrationFeedbackResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.spot.CameraCalibrationFeedbackResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraCalibrationFeedbackResponse::CopyFrom(const CameraCalibrationFeedbackResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.spot.CameraCalibrationFeedbackResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraCalibrationFeedbackResponse::IsInitialized() const {
  return true;
}

void CameraCalibrationFeedbackResponse::InternalSwap(CameraCalibrationFeedbackResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CameraCalibrationFeedbackResponse, progress_)
      + sizeof(CameraCalibrationFeedbackResponse::progress_)
      - PROTOBUF_FIELD_OFFSET(CameraCalibrationFeedbackResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraCalibrationFeedbackResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace spot
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot::SpotCheckCommandRequest* Arena::CreateMaybeMessage< ::bosdyn::api::spot::SpotCheckCommandRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot::SpotCheckCommandRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot::SpotCheckCommandResponse* Arena::CreateMaybeMessage< ::bosdyn::api::spot::SpotCheckCommandResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot::SpotCheckCommandResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot::SpotCheckFeedbackRequest* Arena::CreateMaybeMessage< ::bosdyn::api::spot::SpotCheckFeedbackRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot::SpotCheckFeedbackRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot::SpotCheckFeedbackResponse_CameraResultsEntry_DoNotUse* Arena::CreateMaybeMessage< ::bosdyn::api::spot::SpotCheckFeedbackResponse_CameraResultsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot::SpotCheckFeedbackResponse_CameraResultsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot::SpotCheckFeedbackResponse_LoadCellResultsEntry_DoNotUse* Arena::CreateMaybeMessage< ::bosdyn::api::spot::SpotCheckFeedbackResponse_LoadCellResultsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot::SpotCheckFeedbackResponse_LoadCellResultsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot::SpotCheckFeedbackResponse_KinematicCalResultsEntry_DoNotUse* Arena::CreateMaybeMessage< ::bosdyn::api::spot::SpotCheckFeedbackResponse_KinematicCalResultsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot::SpotCheckFeedbackResponse_KinematicCalResultsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot::SpotCheckFeedbackResponse_FootHeightResultsEntry_DoNotUse* Arena::CreateMaybeMessage< ::bosdyn::api::spot::SpotCheckFeedbackResponse_FootHeightResultsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot::SpotCheckFeedbackResponse_FootHeightResultsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot::SpotCheckFeedbackResponse_LegPairResultsEntry_DoNotUse* Arena::CreateMaybeMessage< ::bosdyn::api::spot::SpotCheckFeedbackResponse_LegPairResultsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot::SpotCheckFeedbackResponse_LegPairResultsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot::SpotCheckFeedbackResponse* Arena::CreateMaybeMessage< ::bosdyn::api::spot::SpotCheckFeedbackResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot::SpotCheckFeedbackResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot::DepthPlaneSpotCheckResult* Arena::CreateMaybeMessage< ::bosdyn::api::spot::DepthPlaneSpotCheckResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot::DepthPlaneSpotCheckResult >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot::PayloadCheckResult* Arena::CreateMaybeMessage< ::bosdyn::api::spot::PayloadCheckResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot::PayloadCheckResult >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot::LoadCellSpotCheckResult* Arena::CreateMaybeMessage< ::bosdyn::api::spot::LoadCellSpotCheckResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot::LoadCellSpotCheckResult >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot::JointKinematicCheckResult* Arena::CreateMaybeMessage< ::bosdyn::api::spot::JointKinematicCheckResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot::JointKinematicCheckResult >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot::FootHeightCheckResult* Arena::CreateMaybeMessage< ::bosdyn::api::spot::FootHeightCheckResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot::FootHeightCheckResult >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot::LegPairCheckResult* Arena::CreateMaybeMessage< ::bosdyn::api::spot::LegPairCheckResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot::LegPairCheckResult >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot::CameraCalibrationCommandRequest* Arena::CreateMaybeMessage< ::bosdyn::api::spot::CameraCalibrationCommandRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot::CameraCalibrationCommandRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot::CameraCalibrationCommandResponse* Arena::CreateMaybeMessage< ::bosdyn::api::spot::CameraCalibrationCommandResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot::CameraCalibrationCommandResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot::CameraCalibrationFeedbackRequest* Arena::CreateMaybeMessage< ::bosdyn::api::spot::CameraCalibrationFeedbackRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot::CameraCalibrationFeedbackRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::spot::CameraCalibrationFeedbackResponse* Arena::CreateMaybeMessage< ::bosdyn::api::spot::CameraCalibrationFeedbackResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::spot::CameraCalibrationFeedbackResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
