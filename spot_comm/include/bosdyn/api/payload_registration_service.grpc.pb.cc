// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bosdyn/api/payload_registration_service.proto

#include "bosdyn/api/payload_registration_service.pb.h"
#include "bosdyn/api/payload_registration_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace bosdyn {
namespace api {

static const char* PayloadRegistrationService_method_names[] = {
  "/bosdyn.api.PayloadRegistrationService/RegisterPayload",
  "/bosdyn.api.PayloadRegistrationService/UpdatePayloadVersion",
  "/bosdyn.api.PayloadRegistrationService/GetPayloadAuthToken",
};

std::unique_ptr< PayloadRegistrationService::Stub> PayloadRegistrationService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PayloadRegistrationService::Stub> stub(new PayloadRegistrationService::Stub(channel));
  return stub;
}

PayloadRegistrationService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_RegisterPayload_(PayloadRegistrationService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdatePayloadVersion_(PayloadRegistrationService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPayloadAuthToken_(PayloadRegistrationService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PayloadRegistrationService::Stub::RegisterPayload(::grpc::ClientContext* context, const ::bosdyn::api::RegisterPayloadRequest& request, ::bosdyn::api::RegisterPayloadResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RegisterPayload_, context, request, response);
}

void PayloadRegistrationService::Stub::experimental_async::RegisterPayload(::grpc::ClientContext* context, const ::bosdyn::api::RegisterPayloadRequest* request, ::bosdyn::api::RegisterPayloadResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RegisterPayload_, context, request, response, std::move(f));
}

void PayloadRegistrationService::Stub::experimental_async::RegisterPayload(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::RegisterPayloadResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RegisterPayload_, context, request, response, std::move(f));
}

void PayloadRegistrationService::Stub::experimental_async::RegisterPayload(::grpc::ClientContext* context, const ::bosdyn::api::RegisterPayloadRequest* request, ::bosdyn::api::RegisterPayloadResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RegisterPayload_, context, request, response, reactor);
}

void PayloadRegistrationService::Stub::experimental_async::RegisterPayload(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::RegisterPayloadResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RegisterPayload_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::RegisterPayloadResponse>* PayloadRegistrationService::Stub::AsyncRegisterPayloadRaw(::grpc::ClientContext* context, const ::bosdyn::api::RegisterPayloadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::RegisterPayloadResponse>::Create(channel_.get(), cq, rpcmethod_RegisterPayload_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::RegisterPayloadResponse>* PayloadRegistrationService::Stub::PrepareAsyncRegisterPayloadRaw(::grpc::ClientContext* context, const ::bosdyn::api::RegisterPayloadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::RegisterPayloadResponse>::Create(channel_.get(), cq, rpcmethod_RegisterPayload_, context, request, false);
}

::grpc::Status PayloadRegistrationService::Stub::UpdatePayloadVersion(::grpc::ClientContext* context, const ::bosdyn::api::UpdatePayloadVersionRequest& request, ::bosdyn::api::UpdatePayloadVersionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdatePayloadVersion_, context, request, response);
}

void PayloadRegistrationService::Stub::experimental_async::UpdatePayloadVersion(::grpc::ClientContext* context, const ::bosdyn::api::UpdatePayloadVersionRequest* request, ::bosdyn::api::UpdatePayloadVersionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdatePayloadVersion_, context, request, response, std::move(f));
}

void PayloadRegistrationService::Stub::experimental_async::UpdatePayloadVersion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::UpdatePayloadVersionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdatePayloadVersion_, context, request, response, std::move(f));
}

void PayloadRegistrationService::Stub::experimental_async::UpdatePayloadVersion(::grpc::ClientContext* context, const ::bosdyn::api::UpdatePayloadVersionRequest* request, ::bosdyn::api::UpdatePayloadVersionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdatePayloadVersion_, context, request, response, reactor);
}

void PayloadRegistrationService::Stub::experimental_async::UpdatePayloadVersion(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::UpdatePayloadVersionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdatePayloadVersion_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::UpdatePayloadVersionResponse>* PayloadRegistrationService::Stub::AsyncUpdatePayloadVersionRaw(::grpc::ClientContext* context, const ::bosdyn::api::UpdatePayloadVersionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::UpdatePayloadVersionResponse>::Create(channel_.get(), cq, rpcmethod_UpdatePayloadVersion_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::UpdatePayloadVersionResponse>* PayloadRegistrationService::Stub::PrepareAsyncUpdatePayloadVersionRaw(::grpc::ClientContext* context, const ::bosdyn::api::UpdatePayloadVersionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::UpdatePayloadVersionResponse>::Create(channel_.get(), cq, rpcmethod_UpdatePayloadVersion_, context, request, false);
}

::grpc::Status PayloadRegistrationService::Stub::GetPayloadAuthToken(::grpc::ClientContext* context, const ::bosdyn::api::GetPayloadAuthTokenRequest& request, ::bosdyn::api::GetPayloadAuthTokenResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetPayloadAuthToken_, context, request, response);
}

void PayloadRegistrationService::Stub::experimental_async::GetPayloadAuthToken(::grpc::ClientContext* context, const ::bosdyn::api::GetPayloadAuthTokenRequest* request, ::bosdyn::api::GetPayloadAuthTokenResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPayloadAuthToken_, context, request, response, std::move(f));
}

void PayloadRegistrationService::Stub::experimental_async::GetPayloadAuthToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::GetPayloadAuthTokenResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPayloadAuthToken_, context, request, response, std::move(f));
}

void PayloadRegistrationService::Stub::experimental_async::GetPayloadAuthToken(::grpc::ClientContext* context, const ::bosdyn::api::GetPayloadAuthTokenRequest* request, ::bosdyn::api::GetPayloadAuthTokenResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPayloadAuthToken_, context, request, response, reactor);
}

void PayloadRegistrationService::Stub::experimental_async::GetPayloadAuthToken(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::GetPayloadAuthTokenResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPayloadAuthToken_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::GetPayloadAuthTokenResponse>* PayloadRegistrationService::Stub::AsyncGetPayloadAuthTokenRaw(::grpc::ClientContext* context, const ::bosdyn::api::GetPayloadAuthTokenRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::GetPayloadAuthTokenResponse>::Create(channel_.get(), cq, rpcmethod_GetPayloadAuthToken_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::GetPayloadAuthTokenResponse>* PayloadRegistrationService::Stub::PrepareAsyncGetPayloadAuthTokenRaw(::grpc::ClientContext* context, const ::bosdyn::api::GetPayloadAuthTokenRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::GetPayloadAuthTokenResponse>::Create(channel_.get(), cq, rpcmethod_GetPayloadAuthToken_, context, request, false);
}

PayloadRegistrationService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PayloadRegistrationService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PayloadRegistrationService::Service, ::bosdyn::api::RegisterPayloadRequest, ::bosdyn::api::RegisterPayloadResponse>(
          [](PayloadRegistrationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::RegisterPayloadRequest* req,
             ::bosdyn::api::RegisterPayloadResponse* resp) {
               return service->RegisterPayload(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PayloadRegistrationService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PayloadRegistrationService::Service, ::bosdyn::api::UpdatePayloadVersionRequest, ::bosdyn::api::UpdatePayloadVersionResponse>(
          [](PayloadRegistrationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::UpdatePayloadVersionRequest* req,
             ::bosdyn::api::UpdatePayloadVersionResponse* resp) {
               return service->UpdatePayloadVersion(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PayloadRegistrationService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PayloadRegistrationService::Service, ::bosdyn::api::GetPayloadAuthTokenRequest, ::bosdyn::api::GetPayloadAuthTokenResponse>(
          [](PayloadRegistrationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::GetPayloadAuthTokenRequest* req,
             ::bosdyn::api::GetPayloadAuthTokenResponse* resp) {
               return service->GetPayloadAuthToken(ctx, req, resp);
             }, this)));
}

PayloadRegistrationService::Service::~Service() {
}

::grpc::Status PayloadRegistrationService::Service::RegisterPayload(::grpc::ServerContext* context, const ::bosdyn::api::RegisterPayloadRequest* request, ::bosdyn::api::RegisterPayloadResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PayloadRegistrationService::Service::UpdatePayloadVersion(::grpc::ServerContext* context, const ::bosdyn::api::UpdatePayloadVersionRequest* request, ::bosdyn::api::UpdatePayloadVersionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PayloadRegistrationService::Service::GetPayloadAuthToken(::grpc::ServerContext* context, const ::bosdyn::api::GetPayloadAuthTokenRequest* request, ::bosdyn::api::GetPayloadAuthTokenResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace bosdyn
}  // namespace api

