// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bosdyn/api/directory_registration_service.proto

#include "bosdyn/api/directory_registration_service.pb.h"
#include "bosdyn/api/directory_registration_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace bosdyn {
namespace api {

static const char* DirectoryRegistrationService_method_names[] = {
  "/bosdyn.api.DirectoryRegistrationService/RegisterService",
  "/bosdyn.api.DirectoryRegistrationService/UnregisterService",
  "/bosdyn.api.DirectoryRegistrationService/UpdateService",
};

std::unique_ptr< DirectoryRegistrationService::Stub> DirectoryRegistrationService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DirectoryRegistrationService::Stub> stub(new DirectoryRegistrationService::Stub(channel));
  return stub;
}

DirectoryRegistrationService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_RegisterService_(DirectoryRegistrationService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnregisterService_(DirectoryRegistrationService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateService_(DirectoryRegistrationService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DirectoryRegistrationService::Stub::RegisterService(::grpc::ClientContext* context, const ::bosdyn::api::RegisterServiceRequest& request, ::bosdyn::api::RegisterServiceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RegisterService_, context, request, response);
}

void DirectoryRegistrationService::Stub::experimental_async::RegisterService(::grpc::ClientContext* context, const ::bosdyn::api::RegisterServiceRequest* request, ::bosdyn::api::RegisterServiceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RegisterService_, context, request, response, std::move(f));
}

void DirectoryRegistrationService::Stub::experimental_async::RegisterService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::RegisterServiceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RegisterService_, context, request, response, std::move(f));
}

void DirectoryRegistrationService::Stub::experimental_async::RegisterService(::grpc::ClientContext* context, const ::bosdyn::api::RegisterServiceRequest* request, ::bosdyn::api::RegisterServiceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RegisterService_, context, request, response, reactor);
}

void DirectoryRegistrationService::Stub::experimental_async::RegisterService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::RegisterServiceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RegisterService_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::RegisterServiceResponse>* DirectoryRegistrationService::Stub::AsyncRegisterServiceRaw(::grpc::ClientContext* context, const ::bosdyn::api::RegisterServiceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::RegisterServiceResponse>::Create(channel_.get(), cq, rpcmethod_RegisterService_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::RegisterServiceResponse>* DirectoryRegistrationService::Stub::PrepareAsyncRegisterServiceRaw(::grpc::ClientContext* context, const ::bosdyn::api::RegisterServiceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::RegisterServiceResponse>::Create(channel_.get(), cq, rpcmethod_RegisterService_, context, request, false);
}

::grpc::Status DirectoryRegistrationService::Stub::UnregisterService(::grpc::ClientContext* context, const ::bosdyn::api::UnregisterServiceRequest& request, ::bosdyn::api::UnregisterServiceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UnregisterService_, context, request, response);
}

void DirectoryRegistrationService::Stub::experimental_async::UnregisterService(::grpc::ClientContext* context, const ::bosdyn::api::UnregisterServiceRequest* request, ::bosdyn::api::UnregisterServiceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UnregisterService_, context, request, response, std::move(f));
}

void DirectoryRegistrationService::Stub::experimental_async::UnregisterService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::UnregisterServiceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UnregisterService_, context, request, response, std::move(f));
}

void DirectoryRegistrationService::Stub::experimental_async::UnregisterService(::grpc::ClientContext* context, const ::bosdyn::api::UnregisterServiceRequest* request, ::bosdyn::api::UnregisterServiceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UnregisterService_, context, request, response, reactor);
}

void DirectoryRegistrationService::Stub::experimental_async::UnregisterService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::UnregisterServiceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UnregisterService_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::UnregisterServiceResponse>* DirectoryRegistrationService::Stub::AsyncUnregisterServiceRaw(::grpc::ClientContext* context, const ::bosdyn::api::UnregisterServiceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::UnregisterServiceResponse>::Create(channel_.get(), cq, rpcmethod_UnregisterService_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::UnregisterServiceResponse>* DirectoryRegistrationService::Stub::PrepareAsyncUnregisterServiceRaw(::grpc::ClientContext* context, const ::bosdyn::api::UnregisterServiceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::UnregisterServiceResponse>::Create(channel_.get(), cq, rpcmethod_UnregisterService_, context, request, false);
}

::grpc::Status DirectoryRegistrationService::Stub::UpdateService(::grpc::ClientContext* context, const ::bosdyn::api::UpdateServiceRequest& request, ::bosdyn::api::UpdateServiceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateService_, context, request, response);
}

void DirectoryRegistrationService::Stub::experimental_async::UpdateService(::grpc::ClientContext* context, const ::bosdyn::api::UpdateServiceRequest* request, ::bosdyn::api::UpdateServiceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateService_, context, request, response, std::move(f));
}

void DirectoryRegistrationService::Stub::experimental_async::UpdateService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::UpdateServiceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateService_, context, request, response, std::move(f));
}

void DirectoryRegistrationService::Stub::experimental_async::UpdateService(::grpc::ClientContext* context, const ::bosdyn::api::UpdateServiceRequest* request, ::bosdyn::api::UpdateServiceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateService_, context, request, response, reactor);
}

void DirectoryRegistrationService::Stub::experimental_async::UpdateService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::UpdateServiceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateService_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::UpdateServiceResponse>* DirectoryRegistrationService::Stub::AsyncUpdateServiceRaw(::grpc::ClientContext* context, const ::bosdyn::api::UpdateServiceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::UpdateServiceResponse>::Create(channel_.get(), cq, rpcmethod_UpdateService_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::UpdateServiceResponse>* DirectoryRegistrationService::Stub::PrepareAsyncUpdateServiceRaw(::grpc::ClientContext* context, const ::bosdyn::api::UpdateServiceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::UpdateServiceResponse>::Create(channel_.get(), cq, rpcmethod_UpdateService_, context, request, false);
}

DirectoryRegistrationService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DirectoryRegistrationService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DirectoryRegistrationService::Service, ::bosdyn::api::RegisterServiceRequest, ::bosdyn::api::RegisterServiceResponse>(
          [](DirectoryRegistrationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::RegisterServiceRequest* req,
             ::bosdyn::api::RegisterServiceResponse* resp) {
               return service->RegisterService(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DirectoryRegistrationService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DirectoryRegistrationService::Service, ::bosdyn::api::UnregisterServiceRequest, ::bosdyn::api::UnregisterServiceResponse>(
          [](DirectoryRegistrationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::UnregisterServiceRequest* req,
             ::bosdyn::api::UnregisterServiceResponse* resp) {
               return service->UnregisterService(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DirectoryRegistrationService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DirectoryRegistrationService::Service, ::bosdyn::api::UpdateServiceRequest, ::bosdyn::api::UpdateServiceResponse>(
          [](DirectoryRegistrationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::UpdateServiceRequest* req,
             ::bosdyn::api::UpdateServiceResponse* resp) {
               return service->UpdateService(ctx, req, resp);
             }, this)));
}

DirectoryRegistrationService::Service::~Service() {
}

::grpc::Status DirectoryRegistrationService::Service::RegisterService(::grpc::ServerContext* context, const ::bosdyn::api::RegisterServiceRequest* request, ::bosdyn::api::RegisterServiceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DirectoryRegistrationService::Service::UnregisterService(::grpc::ServerContext* context, const ::bosdyn::api::UnregisterServiceRequest* request, ::bosdyn::api::UnregisterServiceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DirectoryRegistrationService::Service::UpdateService(::grpc::ServerContext* context, const ::bosdyn::api::UpdateServiceRequest* request, ::bosdyn::api::UpdateServiceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace bosdyn
}  // namespace api

