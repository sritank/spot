// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/directory_registration.proto

#include "bosdyn/api/directory_registration.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fdirectory_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Endpoint_bosdyn_2fapi_2fdirectory_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fdirectory_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServiceEntry_bosdyn_2fapi_2fdirectory_2eproto;
namespace bosdyn {
namespace api {
class RegisterServiceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisterServiceRequest> _instance;
} _RegisterServiceRequest_default_instance_;
class RegisterServiceResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisterServiceResponse> _instance;
} _RegisterServiceResponse_default_instance_;
class UnregisterServiceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnregisterServiceRequest> _instance;
} _UnregisterServiceRequest_default_instance_;
class UnregisterServiceResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnregisterServiceResponse> _instance;
} _UnregisterServiceResponse_default_instance_;
class UpdateServiceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateServiceRequest> _instance;
} _UpdateServiceRequest_default_instance_;
class UpdateServiceResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateServiceResponse> _instance;
} _UpdateServiceResponse_default_instance_;
}  // namespace api
}  // namespace bosdyn
static void InitDefaultsscc_info_RegisterServiceRequest_bosdyn_2fapi_2fdirectory_5fregistration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_RegisterServiceRequest_default_instance_;
    new (ptr) ::bosdyn::api::RegisterServiceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::RegisterServiceRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RegisterServiceRequest_bosdyn_2fapi_2fdirectory_5fregistration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_RegisterServiceRequest_bosdyn_2fapi_2fdirectory_5fregistration_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_Endpoint_bosdyn_2fapi_2fdirectory_2eproto.base,
      &scc_info_ServiceEntry_bosdyn_2fapi_2fdirectory_2eproto.base,}};

static void InitDefaultsscc_info_RegisterServiceResponse_bosdyn_2fapi_2fdirectory_5fregistration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_RegisterServiceResponse_default_instance_;
    new (ptr) ::bosdyn::api::RegisterServiceResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::RegisterServiceResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RegisterServiceResponse_bosdyn_2fapi_2fdirectory_5fregistration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RegisterServiceResponse_bosdyn_2fapi_2fdirectory_5fregistration_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_UnregisterServiceRequest_bosdyn_2fapi_2fdirectory_5fregistration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_UnregisterServiceRequest_default_instance_;
    new (ptr) ::bosdyn::api::UnregisterServiceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::UnregisterServiceRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UnregisterServiceRequest_bosdyn_2fapi_2fdirectory_5fregistration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UnregisterServiceRequest_bosdyn_2fapi_2fdirectory_5fregistration_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_UnregisterServiceResponse_bosdyn_2fapi_2fdirectory_5fregistration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_UnregisterServiceResponse_default_instance_;
    new (ptr) ::bosdyn::api::UnregisterServiceResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::UnregisterServiceResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UnregisterServiceResponse_bosdyn_2fapi_2fdirectory_5fregistration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UnregisterServiceResponse_bosdyn_2fapi_2fdirectory_5fregistration_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_UpdateServiceRequest_bosdyn_2fapi_2fdirectory_5fregistration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_UpdateServiceRequest_default_instance_;
    new (ptr) ::bosdyn::api::UpdateServiceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::UpdateServiceRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_UpdateServiceRequest_bosdyn_2fapi_2fdirectory_5fregistration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_UpdateServiceRequest_bosdyn_2fapi_2fdirectory_5fregistration_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_Endpoint_bosdyn_2fapi_2fdirectory_2eproto.base,
      &scc_info_ServiceEntry_bosdyn_2fapi_2fdirectory_2eproto.base,}};

static void InitDefaultsscc_info_UpdateServiceResponse_bosdyn_2fapi_2fdirectory_5fregistration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_UpdateServiceResponse_default_instance_;
    new (ptr) ::bosdyn::api::UpdateServiceResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::UpdateServiceResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateServiceResponse_bosdyn_2fapi_2fdirectory_5fregistration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateServiceResponse_bosdyn_2fapi_2fdirectory_5fregistration_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bosdyn_2fapi_2fdirectory_5fregistration_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_bosdyn_2fapi_2fdirectory_5fregistration_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bosdyn_2fapi_2fdirectory_5fregistration_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bosdyn_2fapi_2fdirectory_5fregistration_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RegisterServiceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RegisterServiceRequest, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RegisterServiceRequest, endpoint_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RegisterServiceRequest, service_entry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RegisterServiceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RegisterServiceResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RegisterServiceResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::UnregisterServiceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::UnregisterServiceRequest, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::UnregisterServiceRequest, service_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::UnregisterServiceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::UnregisterServiceResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::UnregisterServiceResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::UpdateServiceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::UpdateServiceRequest, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::UpdateServiceRequest, endpoint_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::UpdateServiceRequest, service_entry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::UpdateServiceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::UpdateServiceResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::UpdateServiceResponse, status_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::bosdyn::api::RegisterServiceRequest)},
  { 8, -1, sizeof(::bosdyn::api::RegisterServiceResponse)},
  { 15, -1, sizeof(::bosdyn::api::UnregisterServiceRequest)},
  { 22, -1, sizeof(::bosdyn::api::UnregisterServiceResponse)},
  { 29, -1, sizeof(::bosdyn::api::UpdateServiceRequest)},
  { 37, -1, sizeof(::bosdyn::api::UpdateServiceResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_RegisterServiceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_RegisterServiceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_UnregisterServiceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_UnregisterServiceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_UpdateServiceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_UpdateServiceResponse_default_instance_),
};

const char descriptor_table_protodef_bosdyn_2fapi_2fdirectory_5fregistration_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'bosdyn/api/directory_registration.prot"
  "o\022\nbosdyn.api\032\032bosdyn/api/directory.prot"
  "o\032\027bosdyn/api/header.proto\"\234\001\n\026RegisterS"
  "erviceRequest\022)\n\006header\030\001 \001(\0132\031.bosdyn.a"
  "pi.RequestHeader\022&\n\010endpoint\030\002 \001(\0132\024.bos"
  "dyn.api.Endpoint\022/\n\rservice_entry\030\003 \001(\0132"
  "\030.bosdyn.api.ServiceEntry\"\311\001\n\027RegisterSe"
  "rviceResponse\022*\n\006header\030\001 \001(\0132\032.bosdyn.a"
  "pi.ResponseHeader\022:\n\006status\030\002 \001(\0162*.bosd"
  "yn.api.RegisterServiceResponse.Status\"F\n"
  "\006Status\022\022\n\016STATUS_UNKNOWN\020\000\022\r\n\tSTATUS_OK"
  "\020\001\022\031\n\025STATUS_ALREADY_EXISTS\020\002\"[\n\030Unregis"
  "terServiceRequest\022)\n\006header\030\001 \001(\0132\031.bosd"
  "yn.api.RequestHeader\022\024\n\014service_name\030\002 \001"
  "(\t\"\322\001\n\031UnregisterServiceResponse\022*\n\006head"
  "er\030\001 \001(\0132\032.bosdyn.api.ResponseHeader\022<\n\006"
  "status\030\002 \001(\0162,.bosdyn.api.UnregisterServ"
  "iceResponse.Status\"K\n\006Status\022\022\n\016STATUS_U"
  "NKNOWN\020\000\022\r\n\tSTATUS_OK\020\001\022\036\n\032STATUS_NONEXI"
  "STENT_SERVICE\020\002\"\232\001\n\024UpdateServiceRequest"
  "\022)\n\006header\030\001 \001(\0132\031.bosdyn.api.RequestHea"
  "der\022&\n\010endpoint\030\002 \001(\0132\024.bosdyn.api.Endpo"
  "int\022/\n\rservice_entry\030\003 \001(\0132\030.bosdyn.api."
  "ServiceEntry\"\312\001\n\025UpdateServiceResponse\022*"
  "\n\006header\030\001 \001(\0132\032.bosdyn.api.ResponseHead"
  "er\0228\n\006status\030\002 \001(\0162(.bosdyn.api.UpdateSe"
  "rviceResponse.Status\"K\n\006Status\022\022\n\016STATUS"
  "_UNKNOWN\020\000\022\r\n\tSTATUS_OK\020\001\022\036\n\032STATUS_NONE"
  "XISTENT_SERVICE\020\002B\034B\032DirectoryRegistrati"
  "onProtob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bosdyn_2fapi_2fdirectory_5fregistration_2eproto_deps[2] = {
  &::descriptor_table_bosdyn_2fapi_2fdirectory_2eproto,
  &::descriptor_table_bosdyn_2fapi_2fheader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bosdyn_2fapi_2fdirectory_5fregistration_2eproto_sccs[6] = {
  &scc_info_RegisterServiceRequest_bosdyn_2fapi_2fdirectory_5fregistration_2eproto.base,
  &scc_info_RegisterServiceResponse_bosdyn_2fapi_2fdirectory_5fregistration_2eproto.base,
  &scc_info_UnregisterServiceRequest_bosdyn_2fapi_2fdirectory_5fregistration_2eproto.base,
  &scc_info_UnregisterServiceResponse_bosdyn_2fapi_2fdirectory_5fregistration_2eproto.base,
  &scc_info_UpdateServiceRequest_bosdyn_2fapi_2fdirectory_5fregistration_2eproto.base,
  &scc_info_UpdateServiceResponse_bosdyn_2fapi_2fdirectory_5fregistration_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bosdyn_2fapi_2fdirectory_5fregistration_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fdirectory_5fregistration_2eproto = {
  false, false, descriptor_table_protodef_bosdyn_2fapi_2fdirectory_5fregistration_2eproto, "bosdyn/api/directory_registration.proto", 1175,
  &descriptor_table_bosdyn_2fapi_2fdirectory_5fregistration_2eproto_once, descriptor_table_bosdyn_2fapi_2fdirectory_5fregistration_2eproto_sccs, descriptor_table_bosdyn_2fapi_2fdirectory_5fregistration_2eproto_deps, 6, 2,
  schemas, file_default_instances, TableStruct_bosdyn_2fapi_2fdirectory_5fregistration_2eproto::offsets,
  file_level_metadata_bosdyn_2fapi_2fdirectory_5fregistration_2eproto, 6, file_level_enum_descriptors_bosdyn_2fapi_2fdirectory_5fregistration_2eproto, file_level_service_descriptors_bosdyn_2fapi_2fdirectory_5fregistration_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bosdyn_2fapi_2fdirectory_5fregistration_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bosdyn_2fapi_2fdirectory_5fregistration_2eproto)), true);
namespace bosdyn {
namespace api {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RegisterServiceResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2fdirectory_5fregistration_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2fdirectory_5fregistration_2eproto[0];
}
bool RegisterServiceResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RegisterServiceResponse_Status RegisterServiceResponse::STATUS_UNKNOWN;
constexpr RegisterServiceResponse_Status RegisterServiceResponse::STATUS_OK;
constexpr RegisterServiceResponse_Status RegisterServiceResponse::STATUS_ALREADY_EXISTS;
constexpr RegisterServiceResponse_Status RegisterServiceResponse::Status_MIN;
constexpr RegisterServiceResponse_Status RegisterServiceResponse::Status_MAX;
constexpr int RegisterServiceResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UnregisterServiceResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2fdirectory_5fregistration_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2fdirectory_5fregistration_2eproto[1];
}
bool UnregisterServiceResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UnregisterServiceResponse_Status UnregisterServiceResponse::STATUS_UNKNOWN;
constexpr UnregisterServiceResponse_Status UnregisterServiceResponse::STATUS_OK;
constexpr UnregisterServiceResponse_Status UnregisterServiceResponse::STATUS_NONEXISTENT_SERVICE;
constexpr UnregisterServiceResponse_Status UnregisterServiceResponse::Status_MIN;
constexpr UnregisterServiceResponse_Status UnregisterServiceResponse::Status_MAX;
constexpr int UnregisterServiceResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UpdateServiceResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2fdirectory_5fregistration_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2fdirectory_5fregistration_2eproto[2];
}
bool UpdateServiceResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UpdateServiceResponse_Status UpdateServiceResponse::STATUS_UNKNOWN;
constexpr UpdateServiceResponse_Status UpdateServiceResponse::STATUS_OK;
constexpr UpdateServiceResponse_Status UpdateServiceResponse::STATUS_NONEXISTENT_SERVICE;
constexpr UpdateServiceResponse_Status UpdateServiceResponse::Status_MIN;
constexpr UpdateServiceResponse_Status UpdateServiceResponse::Status_MAX;
constexpr int UpdateServiceResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void RegisterServiceRequest::InitAsDefaultInstance() {
  ::bosdyn::api::_RegisterServiceRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
  ::bosdyn::api::_RegisterServiceRequest_default_instance_._instance.get_mutable()->endpoint_ = const_cast< ::bosdyn::api::Endpoint*>(
      ::bosdyn::api::Endpoint::internal_default_instance());
  ::bosdyn::api::_RegisterServiceRequest_default_instance_._instance.get_mutable()->service_entry_ = const_cast< ::bosdyn::api::ServiceEntry*>(
      ::bosdyn::api::ServiceEntry::internal_default_instance());
}
class RegisterServiceRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const RegisterServiceRequest* msg);
  static const ::bosdyn::api::Endpoint& endpoint(const RegisterServiceRequest* msg);
  static const ::bosdyn::api::ServiceEntry& service_entry(const RegisterServiceRequest* msg);
};

const ::bosdyn::api::RequestHeader&
RegisterServiceRequest::_Internal::header(const RegisterServiceRequest* msg) {
  return *msg->header_;
}
const ::bosdyn::api::Endpoint&
RegisterServiceRequest::_Internal::endpoint(const RegisterServiceRequest* msg) {
  return *msg->endpoint_;
}
const ::bosdyn::api::ServiceEntry&
RegisterServiceRequest::_Internal::service_entry(const RegisterServiceRequest* msg) {
  return *msg->service_entry_;
}
void RegisterServiceRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void RegisterServiceRequest::clear_endpoint() {
  if (GetArena() == nullptr && endpoint_ != nullptr) {
    delete endpoint_;
  }
  endpoint_ = nullptr;
}
void RegisterServiceRequest::clear_service_entry() {
  if (GetArena() == nullptr && service_entry_ != nullptr) {
    delete service_entry_;
  }
  service_entry_ = nullptr;
}
RegisterServiceRequest::RegisterServiceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.RegisterServiceRequest)
}
RegisterServiceRequest::RegisterServiceRequest(const RegisterServiceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_endpoint()) {
    endpoint_ = new ::bosdyn::api::Endpoint(*from.endpoint_);
  } else {
    endpoint_ = nullptr;
  }
  if (from._internal_has_service_entry()) {
    service_entry_ = new ::bosdyn::api::ServiceEntry(*from.service_entry_);
  } else {
    service_entry_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.RegisterServiceRequest)
}

void RegisterServiceRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegisterServiceRequest_bosdyn_2fapi_2fdirectory_5fregistration_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&service_entry_) -
      reinterpret_cast<char*>(&header_)) + sizeof(service_entry_));
}

RegisterServiceRequest::~RegisterServiceRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.RegisterServiceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RegisterServiceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete endpoint_;
  if (this != internal_default_instance()) delete service_entry_;
}

void RegisterServiceRequest::ArenaDtor(void* object) {
  RegisterServiceRequest* _this = reinterpret_cast< RegisterServiceRequest* >(object);
  (void)_this;
}
void RegisterServiceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegisterServiceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterServiceRequest& RegisterServiceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegisterServiceRequest_bosdyn_2fapi_2fdirectory_5fregistration_2eproto.base);
  return *internal_default_instance();
}


void RegisterServiceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.RegisterServiceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && endpoint_ != nullptr) {
    delete endpoint_;
  }
  endpoint_ = nullptr;
  if (GetArena() == nullptr && service_entry_ != nullptr) {
    delete service_entry_;
  }
  service_entry_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterServiceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.Endpoint endpoint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_endpoint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.ServiceEntry service_entry = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_service_entry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterServiceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.RegisterServiceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.Endpoint endpoint = 2;
  if (this->has_endpoint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::endpoint(this), target, stream);
  }

  // .bosdyn.api.ServiceEntry service_entry = 3;
  if (this->has_service_entry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::service_entry(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.RegisterServiceRequest)
  return target;
}

size_t RegisterServiceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.RegisterServiceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.Endpoint endpoint = 2;
  if (this->has_endpoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *endpoint_);
  }

  // .bosdyn.api.ServiceEntry service_entry = 3;
  if (this->has_service_entry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *service_entry_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterServiceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.RegisterServiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterServiceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterServiceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.RegisterServiceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.RegisterServiceRequest)
    MergeFrom(*source);
  }
}

void RegisterServiceRequest::MergeFrom(const RegisterServiceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.RegisterServiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
  if (from.has_endpoint()) {
    _internal_mutable_endpoint()->::bosdyn::api::Endpoint::MergeFrom(from._internal_endpoint());
  }
  if (from.has_service_entry()) {
    _internal_mutable_service_entry()->::bosdyn::api::ServiceEntry::MergeFrom(from._internal_service_entry());
  }
}

void RegisterServiceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.RegisterServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterServiceRequest::CopyFrom(const RegisterServiceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.RegisterServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterServiceRequest::IsInitialized() const {
  return true;
}

void RegisterServiceRequest::InternalSwap(RegisterServiceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegisterServiceRequest, service_entry_)
      + sizeof(RegisterServiceRequest::service_entry_)
      - PROTOBUF_FIELD_OFFSET(RegisterServiceRequest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterServiceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegisterServiceResponse::InitAsDefaultInstance() {
  ::bosdyn::api::_RegisterServiceResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
}
class RegisterServiceResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const RegisterServiceResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
RegisterServiceResponse::_Internal::header(const RegisterServiceResponse* msg) {
  return *msg->header_;
}
void RegisterServiceResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
RegisterServiceResponse::RegisterServiceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.RegisterServiceResponse)
}
RegisterServiceResponse::RegisterServiceResponse(const RegisterServiceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.RegisterServiceResponse)
}

void RegisterServiceResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegisterServiceResponse_bosdyn_2fapi_2fdirectory_5fregistration_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&header_)) + sizeof(status_));
}

RegisterServiceResponse::~RegisterServiceResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.RegisterServiceResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RegisterServiceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void RegisterServiceResponse::ArenaDtor(void* object) {
  RegisterServiceResponse* _this = reinterpret_cast< RegisterServiceResponse* >(object);
  (void)_this;
}
void RegisterServiceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegisterServiceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterServiceResponse& RegisterServiceResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegisterServiceResponse_bosdyn_2fapi_2fdirectory_5fregistration_2eproto.base);
  return *internal_default_instance();
}


void RegisterServiceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.RegisterServiceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterServiceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.RegisterServiceResponse.Status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::bosdyn::api::RegisterServiceResponse_Status>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterServiceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.RegisterServiceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.RegisterServiceResponse.Status status = 2;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.RegisterServiceResponse)
  return target;
}

size_t RegisterServiceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.RegisterServiceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.RegisterServiceResponse.Status status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterServiceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.RegisterServiceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterServiceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterServiceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.RegisterServiceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.RegisterServiceResponse)
    MergeFrom(*source);
  }
}

void RegisterServiceResponse::MergeFrom(const RegisterServiceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.RegisterServiceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void RegisterServiceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.RegisterServiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterServiceResponse::CopyFrom(const RegisterServiceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.RegisterServiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterServiceResponse::IsInitialized() const {
  return true;
}

void RegisterServiceResponse::InternalSwap(RegisterServiceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegisterServiceResponse, status_)
      + sizeof(RegisterServiceResponse::status_)
      - PROTOBUF_FIELD_OFFSET(RegisterServiceResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterServiceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnregisterServiceRequest::InitAsDefaultInstance() {
  ::bosdyn::api::_UnregisterServiceRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
}
class UnregisterServiceRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const UnregisterServiceRequest* msg);
};

const ::bosdyn::api::RequestHeader&
UnregisterServiceRequest::_Internal::header(const UnregisterServiceRequest* msg) {
  return *msg->header_;
}
void UnregisterServiceRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
UnregisterServiceRequest::UnregisterServiceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.UnregisterServiceRequest)
}
UnregisterServiceRequest::UnregisterServiceRequest(const UnregisterServiceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_service_name().empty()) {
    service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_service_name(),
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.UnregisterServiceRequest)
}

void UnregisterServiceRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnregisterServiceRequest_bosdyn_2fapi_2fdirectory_5fregistration_2eproto.base);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  header_ = nullptr;
}

UnregisterServiceRequest::~UnregisterServiceRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.UnregisterServiceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnregisterServiceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  service_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void UnregisterServiceRequest::ArenaDtor(void* object) {
  UnregisterServiceRequest* _this = reinterpret_cast< UnregisterServiceRequest* >(object);
  (void)_this;
}
void UnregisterServiceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnregisterServiceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnregisterServiceRequest& UnregisterServiceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnregisterServiceRequest_bosdyn_2fapi_2fdirectory_5fregistration_2eproto.base);
  return *internal_default_instance();
}


void UnregisterServiceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.UnregisterServiceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnregisterServiceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string service_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_service_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.UnregisterServiceRequest.service_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnregisterServiceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.UnregisterServiceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // string service_name = 2;
  if (this->service_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_name().data(), static_cast<int>(this->_internal_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.UnregisterServiceRequest.service_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_service_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.UnregisterServiceRequest)
  return target;
}

size_t UnregisterServiceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.UnregisterServiceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service_name = 2;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_name());
  }

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnregisterServiceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.UnregisterServiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UnregisterServiceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnregisterServiceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.UnregisterServiceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.UnregisterServiceRequest)
    MergeFrom(*source);
  }
}

void UnregisterServiceRequest::MergeFrom(const UnregisterServiceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.UnregisterServiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.service_name().size() > 0) {
    _internal_set_service_name(from._internal_service_name());
  }
  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
}

void UnregisterServiceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.UnregisterServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnregisterServiceRequest::CopyFrom(const UnregisterServiceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.UnregisterServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnregisterServiceRequest::IsInitialized() const {
  return true;
}

void UnregisterServiceRequest::InternalSwap(UnregisterServiceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  service_name_.Swap(&other->service_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnregisterServiceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnregisterServiceResponse::InitAsDefaultInstance() {
  ::bosdyn::api::_UnregisterServiceResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
}
class UnregisterServiceResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const UnregisterServiceResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
UnregisterServiceResponse::_Internal::header(const UnregisterServiceResponse* msg) {
  return *msg->header_;
}
void UnregisterServiceResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
UnregisterServiceResponse::UnregisterServiceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.UnregisterServiceResponse)
}
UnregisterServiceResponse::UnregisterServiceResponse(const UnregisterServiceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.UnregisterServiceResponse)
}

void UnregisterServiceResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnregisterServiceResponse_bosdyn_2fapi_2fdirectory_5fregistration_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&header_)) + sizeof(status_));
}

UnregisterServiceResponse::~UnregisterServiceResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.UnregisterServiceResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnregisterServiceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void UnregisterServiceResponse::ArenaDtor(void* object) {
  UnregisterServiceResponse* _this = reinterpret_cast< UnregisterServiceResponse* >(object);
  (void)_this;
}
void UnregisterServiceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnregisterServiceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnregisterServiceResponse& UnregisterServiceResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnregisterServiceResponse_bosdyn_2fapi_2fdirectory_5fregistration_2eproto.base);
  return *internal_default_instance();
}


void UnregisterServiceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.UnregisterServiceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnregisterServiceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.UnregisterServiceResponse.Status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::bosdyn::api::UnregisterServiceResponse_Status>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnregisterServiceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.UnregisterServiceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.UnregisterServiceResponse.Status status = 2;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.UnregisterServiceResponse)
  return target;
}

size_t UnregisterServiceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.UnregisterServiceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.UnregisterServiceResponse.Status status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnregisterServiceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.UnregisterServiceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UnregisterServiceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnregisterServiceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.UnregisterServiceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.UnregisterServiceResponse)
    MergeFrom(*source);
  }
}

void UnregisterServiceResponse::MergeFrom(const UnregisterServiceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.UnregisterServiceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void UnregisterServiceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.UnregisterServiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnregisterServiceResponse::CopyFrom(const UnregisterServiceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.UnregisterServiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnregisterServiceResponse::IsInitialized() const {
  return true;
}

void UnregisterServiceResponse::InternalSwap(UnregisterServiceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnregisterServiceResponse, status_)
      + sizeof(UnregisterServiceResponse::status_)
      - PROTOBUF_FIELD_OFFSET(UnregisterServiceResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnregisterServiceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateServiceRequest::InitAsDefaultInstance() {
  ::bosdyn::api::_UpdateServiceRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
  ::bosdyn::api::_UpdateServiceRequest_default_instance_._instance.get_mutable()->endpoint_ = const_cast< ::bosdyn::api::Endpoint*>(
      ::bosdyn::api::Endpoint::internal_default_instance());
  ::bosdyn::api::_UpdateServiceRequest_default_instance_._instance.get_mutable()->service_entry_ = const_cast< ::bosdyn::api::ServiceEntry*>(
      ::bosdyn::api::ServiceEntry::internal_default_instance());
}
class UpdateServiceRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const UpdateServiceRequest* msg);
  static const ::bosdyn::api::Endpoint& endpoint(const UpdateServiceRequest* msg);
  static const ::bosdyn::api::ServiceEntry& service_entry(const UpdateServiceRequest* msg);
};

const ::bosdyn::api::RequestHeader&
UpdateServiceRequest::_Internal::header(const UpdateServiceRequest* msg) {
  return *msg->header_;
}
const ::bosdyn::api::Endpoint&
UpdateServiceRequest::_Internal::endpoint(const UpdateServiceRequest* msg) {
  return *msg->endpoint_;
}
const ::bosdyn::api::ServiceEntry&
UpdateServiceRequest::_Internal::service_entry(const UpdateServiceRequest* msg) {
  return *msg->service_entry_;
}
void UpdateServiceRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void UpdateServiceRequest::clear_endpoint() {
  if (GetArena() == nullptr && endpoint_ != nullptr) {
    delete endpoint_;
  }
  endpoint_ = nullptr;
}
void UpdateServiceRequest::clear_service_entry() {
  if (GetArena() == nullptr && service_entry_ != nullptr) {
    delete service_entry_;
  }
  service_entry_ = nullptr;
}
UpdateServiceRequest::UpdateServiceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.UpdateServiceRequest)
}
UpdateServiceRequest::UpdateServiceRequest(const UpdateServiceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_endpoint()) {
    endpoint_ = new ::bosdyn::api::Endpoint(*from.endpoint_);
  } else {
    endpoint_ = nullptr;
  }
  if (from._internal_has_service_entry()) {
    service_entry_ = new ::bosdyn::api::ServiceEntry(*from.service_entry_);
  } else {
    service_entry_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.UpdateServiceRequest)
}

void UpdateServiceRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateServiceRequest_bosdyn_2fapi_2fdirectory_5fregistration_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&service_entry_) -
      reinterpret_cast<char*>(&header_)) + sizeof(service_entry_));
}

UpdateServiceRequest::~UpdateServiceRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.UpdateServiceRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateServiceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete endpoint_;
  if (this != internal_default_instance()) delete service_entry_;
}

void UpdateServiceRequest::ArenaDtor(void* object) {
  UpdateServiceRequest* _this = reinterpret_cast< UpdateServiceRequest* >(object);
  (void)_this;
}
void UpdateServiceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateServiceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateServiceRequest& UpdateServiceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateServiceRequest_bosdyn_2fapi_2fdirectory_5fregistration_2eproto.base);
  return *internal_default_instance();
}


void UpdateServiceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.UpdateServiceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && endpoint_ != nullptr) {
    delete endpoint_;
  }
  endpoint_ = nullptr;
  if (GetArena() == nullptr && service_entry_ != nullptr) {
    delete service_entry_;
  }
  service_entry_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateServiceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.Endpoint endpoint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_endpoint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.ServiceEntry service_entry = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_service_entry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateServiceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.UpdateServiceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.Endpoint endpoint = 2;
  if (this->has_endpoint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::endpoint(this), target, stream);
  }

  // .bosdyn.api.ServiceEntry service_entry = 3;
  if (this->has_service_entry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::service_entry(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.UpdateServiceRequest)
  return target;
}

size_t UpdateServiceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.UpdateServiceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.Endpoint endpoint = 2;
  if (this->has_endpoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *endpoint_);
  }

  // .bosdyn.api.ServiceEntry service_entry = 3;
  if (this->has_service_entry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *service_entry_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateServiceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.UpdateServiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateServiceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateServiceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.UpdateServiceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.UpdateServiceRequest)
    MergeFrom(*source);
  }
}

void UpdateServiceRequest::MergeFrom(const UpdateServiceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.UpdateServiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
  if (from.has_endpoint()) {
    _internal_mutable_endpoint()->::bosdyn::api::Endpoint::MergeFrom(from._internal_endpoint());
  }
  if (from.has_service_entry()) {
    _internal_mutable_service_entry()->::bosdyn::api::ServiceEntry::MergeFrom(from._internal_service_entry());
  }
}

void UpdateServiceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.UpdateServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateServiceRequest::CopyFrom(const UpdateServiceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.UpdateServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateServiceRequest::IsInitialized() const {
  return true;
}

void UpdateServiceRequest::InternalSwap(UpdateServiceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateServiceRequest, service_entry_)
      + sizeof(UpdateServiceRequest::service_entry_)
      - PROTOBUF_FIELD_OFFSET(UpdateServiceRequest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateServiceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateServiceResponse::InitAsDefaultInstance() {
  ::bosdyn::api::_UpdateServiceResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
}
class UpdateServiceResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const UpdateServiceResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
UpdateServiceResponse::_Internal::header(const UpdateServiceResponse* msg) {
  return *msg->header_;
}
void UpdateServiceResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
UpdateServiceResponse::UpdateServiceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.UpdateServiceResponse)
}
UpdateServiceResponse::UpdateServiceResponse(const UpdateServiceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.UpdateServiceResponse)
}

void UpdateServiceResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateServiceResponse_bosdyn_2fapi_2fdirectory_5fregistration_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&header_)) + sizeof(status_));
}

UpdateServiceResponse::~UpdateServiceResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.UpdateServiceResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateServiceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void UpdateServiceResponse::ArenaDtor(void* object) {
  UpdateServiceResponse* _this = reinterpret_cast< UpdateServiceResponse* >(object);
  (void)_this;
}
void UpdateServiceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateServiceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateServiceResponse& UpdateServiceResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateServiceResponse_bosdyn_2fapi_2fdirectory_5fregistration_2eproto.base);
  return *internal_default_instance();
}


void UpdateServiceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.UpdateServiceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateServiceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.UpdateServiceResponse.Status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::bosdyn::api::UpdateServiceResponse_Status>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateServiceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.UpdateServiceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.UpdateServiceResponse.Status status = 2;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.UpdateServiceResponse)
  return target;
}

size_t UpdateServiceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.UpdateServiceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.UpdateServiceResponse.Status status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateServiceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.UpdateServiceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateServiceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateServiceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.UpdateServiceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.UpdateServiceResponse)
    MergeFrom(*source);
  }
}

void UpdateServiceResponse::MergeFrom(const UpdateServiceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.UpdateServiceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void UpdateServiceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.UpdateServiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateServiceResponse::CopyFrom(const UpdateServiceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.UpdateServiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateServiceResponse::IsInitialized() const {
  return true;
}

void UpdateServiceResponse::InternalSwap(UpdateServiceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateServiceResponse, status_)
      + sizeof(UpdateServiceResponse::status_)
      - PROTOBUF_FIELD_OFFSET(UpdateServiceResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateServiceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bosdyn::api::RegisterServiceRequest* Arena::CreateMaybeMessage< ::bosdyn::api::RegisterServiceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::RegisterServiceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::RegisterServiceResponse* Arena::CreateMaybeMessage< ::bosdyn::api::RegisterServiceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::RegisterServiceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::UnregisterServiceRequest* Arena::CreateMaybeMessage< ::bosdyn::api::UnregisterServiceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::UnregisterServiceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::UnregisterServiceResponse* Arena::CreateMaybeMessage< ::bosdyn::api::UnregisterServiceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::UnregisterServiceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::UpdateServiceRequest* Arena::CreateMaybeMessage< ::bosdyn::api::UpdateServiceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::UpdateServiceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::UpdateServiceResponse* Arena::CreateMaybeMessage< ::bosdyn::api::UpdateServiceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::UpdateServiceResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
