// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/robot_state.proto

#include "bosdyn/api/robot_state.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2frobot_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_BatteryState_bosdyn_2fapi_2frobot_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2frobot_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BehaviorFault_bosdyn_2fapi_2frobot_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2frobot_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BehaviorFaultState_bosdyn_2fapi_2frobot_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2frobot_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CommsState_bosdyn_2fapi_2frobot_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2frobot_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EStopState_bosdyn_2fapi_2frobot_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2frobot_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FootState_bosdyn_2fapi_2frobot_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FrameTreeSnapshot_bosdyn_2fapi_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2frobot_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HardwareConfiguration_bosdyn_2fapi_2frobot_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2frobot_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_JointState_bosdyn_2fapi_2frobot_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2frobot_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_KinematicState_bosdyn_2fapi_2frobot_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fparameter_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Parameter_bosdyn_2fapi_2fparameter_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2frobot_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PowerState_bosdyn_2fapi_2frobot_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2frobot_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RobotMetrics_bosdyn_2fapi_2frobot_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2frobot_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_RobotState_bosdyn_2fapi_2frobot_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SE3Velocity_bosdyn_2fapi_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2frobot_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Skeleton_bosdyn_2fapi_2frobot_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2frobot_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Skeleton_Link_bosdyn_2fapi_2frobot_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2frobot_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Skeleton_Link_ObjModel_bosdyn_2fapi_2frobot_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2frobot_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SystemFault_bosdyn_2fapi_2frobot_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2frobot_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SystemFaultState_bosdyn_2fapi_2frobot_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2frobot_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SystemFaultState_AggregatedEntry_DoNotUse_bosdyn_2fapi_2frobot_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec3_bosdyn_2fapi_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2frobot_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WiFiState_bosdyn_2fapi_2frobot_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DoubleValue_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fduration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Duration_google_2fprotobuf_2fduration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace bosdyn {
namespace api {
class Skeleton_Link_ObjModelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Skeleton_Link_ObjModel> _instance;
} _Skeleton_Link_ObjModel_default_instance_;
class Skeleton_LinkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Skeleton_Link> _instance;
} _Skeleton_Link_default_instance_;
class SkeletonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Skeleton> _instance;
} _Skeleton_default_instance_;
class HardwareConfigurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HardwareConfiguration> _instance;
} _HardwareConfiguration_default_instance_;
class RobotStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RobotState> _instance;
} _RobotState_default_instance_;
class PowerStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PowerState> _instance;
} _PowerState_default_instance_;
class SystemFaultState_AggregatedEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemFaultState_AggregatedEntry_DoNotUse> _instance;
} _SystemFaultState_AggregatedEntry_DoNotUse_default_instance_;
class SystemFaultStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemFaultState> _instance;
} _SystemFaultState_default_instance_;
class SystemFaultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemFault> _instance;
} _SystemFault_default_instance_;
class EStopStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EStopState> _instance;
} _EStopState_default_instance_;
class BatteryStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BatteryState> _instance;
} _BatteryState_default_instance_;
class KinematicStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KinematicState> _instance;
} _KinematicState_default_instance_;
class JointStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JointState> _instance;
} _JointState_default_instance_;
class BehaviorFaultStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BehaviorFaultState> _instance;
} _BehaviorFaultState_default_instance_;
class BehaviorFaultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BehaviorFault> _instance;
} _BehaviorFault_default_instance_;
class RobotMetricsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RobotMetrics> _instance;
} _RobotMetrics_default_instance_;
class CommsStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommsState> _instance;
  const ::bosdyn::api::WiFiState* wifi_state_;
} _CommsState_default_instance_;
class WiFiStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WiFiState> _instance;
} _WiFiState_default_instance_;
class FootStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FootState> _instance;
} _FootState_default_instance_;
class RobotStateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RobotStateRequest> _instance;
} _RobotStateRequest_default_instance_;
class RobotStateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RobotStateResponse> _instance;
} _RobotStateResponse_default_instance_;
class RobotMetricsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RobotMetricsRequest> _instance;
} _RobotMetricsRequest_default_instance_;
class RobotMetricsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RobotMetricsResponse> _instance;
} _RobotMetricsResponse_default_instance_;
class RobotHardwareConfigurationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RobotHardwareConfigurationRequest> _instance;
} _RobotHardwareConfigurationRequest_default_instance_;
class RobotHardwareConfigurationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RobotHardwareConfigurationResponse> _instance;
} _RobotHardwareConfigurationResponse_default_instance_;
class RobotLinkModelRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RobotLinkModelRequest> _instance;
} _RobotLinkModelRequest_default_instance_;
class RobotLinkModelResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RobotLinkModelResponse> _instance;
} _RobotLinkModelResponse_default_instance_;
}  // namespace api
}  // namespace bosdyn
static void InitDefaultsscc_info_BatteryState_bosdyn_2fapi_2frobot_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_BatteryState_default_instance_;
    new (ptr) ::bosdyn::api::BatteryState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::BatteryState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_BatteryState_bosdyn_2fapi_2frobot_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_BatteryState_bosdyn_2fapi_2frobot_5fstate_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_DoubleValue_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,}};

static void InitDefaultsscc_info_BehaviorFault_bosdyn_2fapi_2frobot_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_BehaviorFault_default_instance_;
    new (ptr) ::bosdyn::api::BehaviorFault();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::BehaviorFault::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BehaviorFault_bosdyn_2fapi_2frobot_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BehaviorFault_bosdyn_2fapi_2frobot_5fstate_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_BehaviorFaultState_bosdyn_2fapi_2frobot_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_BehaviorFaultState_default_instance_;
    new (ptr) ::bosdyn::api::BehaviorFaultState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::BehaviorFaultState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BehaviorFaultState_bosdyn_2fapi_2frobot_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BehaviorFaultState_bosdyn_2fapi_2frobot_5fstate_2eproto}, {
      &scc_info_BehaviorFault_bosdyn_2fapi_2frobot_5fstate_2eproto.base,}};

static void InitDefaultsscc_info_CommsState_bosdyn_2fapi_2frobot_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_CommsState_default_instance_;
    new (ptr) ::bosdyn::api::CommsState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::CommsState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CommsState_bosdyn_2fapi_2frobot_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CommsState_bosdyn_2fapi_2frobot_5fstate_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_WiFiState_bosdyn_2fapi_2frobot_5fstate_2eproto.base,}};

static void InitDefaultsscc_info_EStopState_bosdyn_2fapi_2frobot_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_EStopState_default_instance_;
    new (ptr) ::bosdyn::api::EStopState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::EStopState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EStopState_bosdyn_2fapi_2frobot_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EStopState_bosdyn_2fapi_2frobot_5fstate_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_FootState_bosdyn_2fapi_2frobot_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_FootState_default_instance_;
    new (ptr) ::bosdyn::api::FootState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::FootState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FootState_bosdyn_2fapi_2frobot_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FootState_bosdyn_2fapi_2frobot_5fstate_2eproto}, {
      &scc_info_Vec3_bosdyn_2fapi_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_HardwareConfiguration_bosdyn_2fapi_2frobot_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_HardwareConfiguration_default_instance_;
    new (ptr) ::bosdyn::api::HardwareConfiguration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::HardwareConfiguration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HardwareConfiguration_bosdyn_2fapi_2frobot_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HardwareConfiguration_bosdyn_2fapi_2frobot_5fstate_2eproto}, {
      &scc_info_Skeleton_bosdyn_2fapi_2frobot_5fstate_2eproto.base,}};

static void InitDefaultsscc_info_JointState_bosdyn_2fapi_2frobot_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_JointState_default_instance_;
    new (ptr) ::bosdyn::api::JointState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::JointState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_JointState_bosdyn_2fapi_2frobot_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_JointState_bosdyn_2fapi_2frobot_5fstate_2eproto}, {
      &scc_info_DoubleValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_KinematicState_bosdyn_2fapi_2frobot_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_KinematicState_default_instance_;
    new (ptr) ::bosdyn::api::KinematicState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::KinematicState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_KinematicState_bosdyn_2fapi_2frobot_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_KinematicState_bosdyn_2fapi_2frobot_5fstate_2eproto}, {
      &scc_info_JointState_bosdyn_2fapi_2frobot_5fstate_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_FrameTreeSnapshot_bosdyn_2fapi_2fgeometry_2eproto.base,
      &scc_info_SE3Velocity_bosdyn_2fapi_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_PowerState_bosdyn_2fapi_2frobot_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_PowerState_default_instance_;
    new (ptr) ::bosdyn::api::PowerState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::PowerState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PowerState_bosdyn_2fapi_2frobot_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PowerState_bosdyn_2fapi_2frobot_5fstate_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_DoubleValue_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,}};

static void InitDefaultsscc_info_RobotHardwareConfigurationRequest_bosdyn_2fapi_2frobot_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_RobotHardwareConfigurationRequest_default_instance_;
    new (ptr) ::bosdyn::api::RobotHardwareConfigurationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::RobotHardwareConfigurationRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RobotHardwareConfigurationRequest_bosdyn_2fapi_2frobot_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RobotHardwareConfigurationRequest_bosdyn_2fapi_2frobot_5fstate_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_RobotHardwareConfigurationResponse_bosdyn_2fapi_2frobot_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_RobotHardwareConfigurationResponse_default_instance_;
    new (ptr) ::bosdyn::api::RobotHardwareConfigurationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::RobotHardwareConfigurationResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RobotHardwareConfigurationResponse_bosdyn_2fapi_2frobot_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RobotHardwareConfigurationResponse_bosdyn_2fapi_2frobot_5fstate_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_HardwareConfiguration_bosdyn_2fapi_2frobot_5fstate_2eproto.base,}};

static void InitDefaultsscc_info_RobotLinkModelRequest_bosdyn_2fapi_2frobot_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_RobotLinkModelRequest_default_instance_;
    new (ptr) ::bosdyn::api::RobotLinkModelRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::RobotLinkModelRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RobotLinkModelRequest_bosdyn_2fapi_2frobot_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RobotLinkModelRequest_bosdyn_2fapi_2frobot_5fstate_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_RobotLinkModelResponse_bosdyn_2fapi_2frobot_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_RobotLinkModelResponse_default_instance_;
    new (ptr) ::bosdyn::api::RobotLinkModelResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::RobotLinkModelResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RobotLinkModelResponse_bosdyn_2fapi_2frobot_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RobotLinkModelResponse_bosdyn_2fapi_2frobot_5fstate_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_Skeleton_Link_ObjModel_bosdyn_2fapi_2frobot_5fstate_2eproto.base,}};

static void InitDefaultsscc_info_RobotMetrics_bosdyn_2fapi_2frobot_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_RobotMetrics_default_instance_;
    new (ptr) ::bosdyn::api::RobotMetrics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::RobotMetrics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RobotMetrics_bosdyn_2fapi_2frobot_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RobotMetrics_bosdyn_2fapi_2frobot_5fstate_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_Parameter_bosdyn_2fapi_2fparameter_2eproto.base,}};

static void InitDefaultsscc_info_RobotMetricsRequest_bosdyn_2fapi_2frobot_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_RobotMetricsRequest_default_instance_;
    new (ptr) ::bosdyn::api::RobotMetricsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::RobotMetricsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RobotMetricsRequest_bosdyn_2fapi_2frobot_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RobotMetricsRequest_bosdyn_2fapi_2frobot_5fstate_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_RobotMetricsResponse_bosdyn_2fapi_2frobot_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_RobotMetricsResponse_default_instance_;
    new (ptr) ::bosdyn::api::RobotMetricsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::RobotMetricsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RobotMetricsResponse_bosdyn_2fapi_2frobot_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RobotMetricsResponse_bosdyn_2fapi_2frobot_5fstate_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_RobotMetrics_bosdyn_2fapi_2frobot_5fstate_2eproto.base,}};

static void InitDefaultsscc_info_RobotState_bosdyn_2fapi_2frobot_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_RobotState_default_instance_;
    new (ptr) ::bosdyn::api::RobotState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::RobotState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_RobotState_bosdyn_2fapi_2frobot_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, 0, InitDefaultsscc_info_RobotState_bosdyn_2fapi_2frobot_5fstate_2eproto}, {
      &scc_info_PowerState_bosdyn_2fapi_2frobot_5fstate_2eproto.base,
      &scc_info_BatteryState_bosdyn_2fapi_2frobot_5fstate_2eproto.base,
      &scc_info_CommsState_bosdyn_2fapi_2frobot_5fstate_2eproto.base,
      &scc_info_SystemFaultState_bosdyn_2fapi_2frobot_5fstate_2eproto.base,
      &scc_info_EStopState_bosdyn_2fapi_2frobot_5fstate_2eproto.base,
      &scc_info_KinematicState_bosdyn_2fapi_2frobot_5fstate_2eproto.base,
      &scc_info_BehaviorFaultState_bosdyn_2fapi_2frobot_5fstate_2eproto.base,
      &scc_info_FootState_bosdyn_2fapi_2frobot_5fstate_2eproto.base,}};

static void InitDefaultsscc_info_RobotStateRequest_bosdyn_2fapi_2frobot_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_RobotStateRequest_default_instance_;
    new (ptr) ::bosdyn::api::RobotStateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::RobotStateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RobotStateRequest_bosdyn_2fapi_2frobot_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RobotStateRequest_bosdyn_2fapi_2frobot_5fstate_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_RobotStateResponse_bosdyn_2fapi_2frobot_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_RobotStateResponse_default_instance_;
    new (ptr) ::bosdyn::api::RobotStateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::RobotStateResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RobotStateResponse_bosdyn_2fapi_2frobot_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RobotStateResponse_bosdyn_2fapi_2frobot_5fstate_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_RobotState_bosdyn_2fapi_2frobot_5fstate_2eproto.base,}};

static void InitDefaultsscc_info_Skeleton_bosdyn_2fapi_2frobot_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_Skeleton_default_instance_;
    new (ptr) ::bosdyn::api::Skeleton();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::Skeleton::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Skeleton_bosdyn_2fapi_2frobot_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Skeleton_bosdyn_2fapi_2frobot_5fstate_2eproto}, {
      &scc_info_Skeleton_Link_bosdyn_2fapi_2frobot_5fstate_2eproto.base,}};

static void InitDefaultsscc_info_Skeleton_Link_bosdyn_2fapi_2frobot_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_Skeleton_Link_default_instance_;
    new (ptr) ::bosdyn::api::Skeleton_Link();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::Skeleton_Link::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Skeleton_Link_bosdyn_2fapi_2frobot_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Skeleton_Link_bosdyn_2fapi_2frobot_5fstate_2eproto}, {
      &scc_info_Skeleton_Link_ObjModel_bosdyn_2fapi_2frobot_5fstate_2eproto.base,}};

static void InitDefaultsscc_info_Skeleton_Link_ObjModel_bosdyn_2fapi_2frobot_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_Skeleton_Link_ObjModel_default_instance_;
    new (ptr) ::bosdyn::api::Skeleton_Link_ObjModel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::Skeleton_Link_ObjModel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Skeleton_Link_ObjModel_bosdyn_2fapi_2frobot_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Skeleton_Link_ObjModel_bosdyn_2fapi_2frobot_5fstate_2eproto}, {}};

static void InitDefaultsscc_info_SystemFault_bosdyn_2fapi_2frobot_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_SystemFault_default_instance_;
    new (ptr) ::bosdyn::api::SystemFault();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::SystemFault::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SystemFault_bosdyn_2fapi_2frobot_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SystemFault_bosdyn_2fapi_2frobot_5fstate_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,}};

static void InitDefaultsscc_info_SystemFaultState_bosdyn_2fapi_2frobot_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_SystemFaultState_default_instance_;
    new (ptr) ::bosdyn::api::SystemFaultState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::SystemFaultState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SystemFaultState_bosdyn_2fapi_2frobot_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SystemFaultState_bosdyn_2fapi_2frobot_5fstate_2eproto}, {
      &scc_info_SystemFault_bosdyn_2fapi_2frobot_5fstate_2eproto.base,
      &scc_info_SystemFaultState_AggregatedEntry_DoNotUse_bosdyn_2fapi_2frobot_5fstate_2eproto.base,}};

static void InitDefaultsscc_info_SystemFaultState_AggregatedEntry_DoNotUse_bosdyn_2fapi_2frobot_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_SystemFaultState_AggregatedEntry_DoNotUse_default_instance_;
    new (ptr) ::bosdyn::api::SystemFaultState_AggregatedEntry_DoNotUse();
  }
  ::bosdyn::api::SystemFaultState_AggregatedEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SystemFaultState_AggregatedEntry_DoNotUse_bosdyn_2fapi_2frobot_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SystemFaultState_AggregatedEntry_DoNotUse_bosdyn_2fapi_2frobot_5fstate_2eproto}, {}};

static void InitDefaultsscc_info_WiFiState_bosdyn_2fapi_2frobot_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_WiFiState_default_instance_;
    new (ptr) ::bosdyn::api::WiFiState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::WiFiState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WiFiState_bosdyn_2fapi_2frobot_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WiFiState_bosdyn_2fapi_2frobot_5fstate_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bosdyn_2fapi_2frobot_5fstate_2eproto[27];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_bosdyn_2fapi_2frobot_5fstate_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bosdyn_2fapi_2frobot_5fstate_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bosdyn_2fapi_2frobot_5fstate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Skeleton_Link_ObjModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Skeleton_Link_ObjModel, file_name_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Skeleton_Link_ObjModel, file_contents_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Skeleton_Link, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Skeleton_Link, name_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Skeleton_Link, obj_model_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Skeleton, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Skeleton, links_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Skeleton, urdf_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::HardwareConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::HardwareConfiguration, skeleton_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotState, power_state_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotState, battery_states_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotState, comms_states_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotState, system_fault_state_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotState, estop_states_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotState, kinematic_state_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotState, behavior_fault_state_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotState, foot_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::PowerState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::PowerState, timestamp_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::PowerState, motor_power_state_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::PowerState, shore_power_state_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::PowerState, locomotion_charge_percentage_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::PowerState, locomotion_estimated_runtime_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SystemFaultState_AggregatedEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SystemFaultState_AggregatedEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SystemFaultState_AggregatedEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SystemFaultState_AggregatedEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SystemFaultState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SystemFaultState, faults_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SystemFaultState, historical_faults_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SystemFaultState, aggregated_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SystemFault, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SystemFault, name_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SystemFault, onset_timestamp_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SystemFault, duration_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SystemFault, code_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SystemFault, uid_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SystemFault, error_message_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SystemFault, attributes_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SystemFault, severity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::EStopState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::EStopState, timestamp_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::EStopState, name_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::EStopState, type_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::EStopState, state_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::EStopState, state_description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::BatteryState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::BatteryState, timestamp_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::BatteryState, identifier_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::BatteryState, charge_percentage_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::BatteryState, estimated_runtime_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::BatteryState, current_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::BatteryState, voltage_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::BatteryState, temperatures_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::BatteryState, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::KinematicState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::KinematicState, joint_states_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::KinematicState, acquisition_timestamp_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::KinematicState, transforms_snapshot_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::KinematicState, velocity_of_body_in_vision_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::KinematicState, velocity_of_body_in_odom_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::JointState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::JointState, name_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::JointState, position_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::JointState, velocity_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::JointState, acceleration_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::JointState, load_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::BehaviorFaultState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::BehaviorFaultState, faults_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::BehaviorFault, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::BehaviorFault, behavior_fault_id_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::BehaviorFault, onset_timestamp_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::BehaviorFault, cause_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::BehaviorFault, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotMetrics, timestamp_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotMetrics, metrics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::CommsState, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::CommsState, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::CommsState, timestamp_),
  offsetof(::bosdyn::api::CommsStateDefaultTypeInternal, wifi_state_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::CommsState, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::WiFiState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::WiFiState, current_mode_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::WiFiState, essid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::FootState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::FootState, foot_position_rt_body_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::FootState, contact_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotStateRequest, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotStateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotStateResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotStateResponse, robot_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotMetricsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotMetricsRequest, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotMetricsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotMetricsResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotMetricsResponse, robot_metrics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotHardwareConfigurationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotHardwareConfigurationRequest, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotHardwareConfigurationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotHardwareConfigurationResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotHardwareConfigurationResponse, hardware_configuration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotLinkModelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotLinkModelRequest, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotLinkModelRequest, link_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotLinkModelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotLinkModelResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotLinkModelResponse, link_model_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::bosdyn::api::Skeleton_Link_ObjModel)},
  { 7, -1, sizeof(::bosdyn::api::Skeleton_Link)},
  { 14, -1, sizeof(::bosdyn::api::Skeleton)},
  { 21, -1, sizeof(::bosdyn::api::HardwareConfiguration)},
  { 27, -1, sizeof(::bosdyn::api::RobotState)},
  { 40, -1, sizeof(::bosdyn::api::PowerState)},
  { 50, 57, sizeof(::bosdyn::api::SystemFaultState_AggregatedEntry_DoNotUse)},
  { 59, -1, sizeof(::bosdyn::api::SystemFaultState)},
  { 67, -1, sizeof(::bosdyn::api::SystemFault)},
  { 80, -1, sizeof(::bosdyn::api::EStopState)},
  { 90, -1, sizeof(::bosdyn::api::BatteryState)},
  { 103, -1, sizeof(::bosdyn::api::KinematicState)},
  { 113, -1, sizeof(::bosdyn::api::JointState)},
  { 123, -1, sizeof(::bosdyn::api::BehaviorFaultState)},
  { 129, -1, sizeof(::bosdyn::api::BehaviorFault)},
  { 138, -1, sizeof(::bosdyn::api::RobotMetrics)},
  { 145, -1, sizeof(::bosdyn::api::CommsState)},
  { 153, -1, sizeof(::bosdyn::api::WiFiState)},
  { 160, -1, sizeof(::bosdyn::api::FootState)},
  { 167, -1, sizeof(::bosdyn::api::RobotStateRequest)},
  { 173, -1, sizeof(::bosdyn::api::RobotStateResponse)},
  { 180, -1, sizeof(::bosdyn::api::RobotMetricsRequest)},
  { 186, -1, sizeof(::bosdyn::api::RobotMetricsResponse)},
  { 193, -1, sizeof(::bosdyn::api::RobotHardwareConfigurationRequest)},
  { 199, -1, sizeof(::bosdyn::api::RobotHardwareConfigurationResponse)},
  { 206, -1, sizeof(::bosdyn::api::RobotLinkModelRequest)},
  { 213, -1, sizeof(::bosdyn::api::RobotLinkModelResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_Skeleton_Link_ObjModel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_Skeleton_Link_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_Skeleton_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_HardwareConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_RobotState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_PowerState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_SystemFaultState_AggregatedEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_SystemFaultState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_SystemFault_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_EStopState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_BatteryState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_KinematicState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_JointState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_BehaviorFaultState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_BehaviorFault_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_RobotMetrics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_CommsState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_WiFiState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_FootState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_RobotStateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_RobotStateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_RobotMetricsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_RobotMetricsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_RobotHardwareConfigurationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_RobotHardwareConfigurationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_RobotLinkModelRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_RobotLinkModelResponse_default_instance_),
};

const char descriptor_table_protodef_bosdyn_2fapi_2frobot_5fstate_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034bosdyn/api/robot_state.proto\022\nbosdyn.a"
  "pi\032\031bosdyn/api/geometry.proto\032\027bosdyn/ap"
  "i/header.proto\032\032bosdyn/api/parameter.pro"
  "to\032\037google/protobuf/timestamp.proto\032\036goo"
  "gle/protobuf/duration.proto\032\036google/prot"
  "obuf/wrappers.proto\"\306\001\n\010Skeleton\022(\n\005link"
  "s\030\002 \003(\0132\031.bosdyn.api.Skeleton.Link\022\014\n\004ur"
  "df\030\003 \001(\t\032\201\001\n\004Link\022\014\n\004name\030\001 \001(\t\0225\n\tobj_m"
  "odel\030\002 \001(\0132\".bosdyn.api.Skeleton.Link.Ob"
  "jModel\0324\n\010ObjModel\022\021\n\tfile_name\030\001 \001(\t\022\025\n"
  "\rfile_contents\030\002 \001(\t\"\?\n\025HardwareConfigur"
  "ation\022&\n\010skeleton\030\001 \001(\0132\024.bosdyn.api.Ske"
  "leton\"\237\003\n\nRobotState\022+\n\013power_state\030\001 \001("
  "\0132\026.bosdyn.api.PowerState\0220\n\016battery_sta"
  "tes\030\002 \003(\0132\030.bosdyn.api.BatteryState\022,\n\014c"
  "omms_states\030\003 \003(\0132\026.bosdyn.api.CommsStat"
  "e\0228\n\022system_fault_state\030\004 \001(\0132\034.bosdyn.a"
  "pi.SystemFaultState\022,\n\014estop_states\030\005 \003("
  "\0132\026.bosdyn.api.EStopState\0223\n\017kinematic_s"
  "tate\030\006 \001(\0132\032.bosdyn.api.KinematicState\022<"
  "\n\024behavior_fault_state\030\007 \001(\0132\036.bosdyn.ap"
  "i.BehaviorFaultState\022)\n\nfoot_state\030\010 \003(\013"
  "2\025.bosdyn.api.FootState\"\261\004\n\nPowerState\022-"
  "\n\ttimestamp\030\001 \001(\0132\032.google.protobuf.Time"
  "stamp\022A\n\021motor_power_state\030\002 \001(\0162&.bosdy"
  "n.api.PowerState.MotorPowerState\022A\n\021shor"
  "e_power_state\030\003 \001(\0162&.bosdyn.api.PowerSt"
  "ate.ShorePowerState\022B\n\034locomotion_charge"
  "_percentage\030\004 \001(\0132\034.google.protobuf.Doub"
  "leValue\022\?\n\034locomotion_estimated_runtime\030"
  "\005 \001(\0132\031.google.protobuf.Duration\"\201\001\n\017Mot"
  "orPowerState\022\021\n\rSTATE_UNKNOWN\020\000\022\r\n\tSTATE"
  "_OFF\020\001\022\014\n\010STATE_ON\020\002\022\025\n\021STATE_POWERING_O"
  "N\020\003\022\026\n\022STATE_POWERING_OFF\020\004\022\017\n\013STATE_ERR"
  "OR\020\005\"e\n\017ShorePowerState\022\035\n\031STATE_UNKNOWN"
  "_SHORE_POWER\020\000\022\030\n\024STATE_ON_SHORE_POWER\020\001"
  "\022\031\n\025STATE_OFF_SHORE_POWER\020\002\"\206\002\n\020SystemFa"
  "ultState\022\'\n\006faults\030\001 \003(\0132\027.bosdyn.api.Sy"
  "stemFault\0222\n\021historical_faults\030\002 \003(\0132\027.b"
  "osdyn.api.SystemFault\022@\n\naggregated\030\003 \003("
  "\0132,.bosdyn.api.SystemFaultState.Aggregat"
  "edEntry\032S\n\017AggregatedEntry\022\013\n\003key\030\001 \001(\t\022"
  "/\n\005value\030\002 \001(\0162 .bosdyn.api.SystemFault."
  "Severity:\0028\001\"\326\002\n\013SystemFault\022\014\n\004name\030\001 \001"
  "(\t\0223\n\017onset_timestamp\030\002 \001(\0132\032.google.pro"
  "tobuf.Timestamp\022+\n\010duration\030\003 \001(\0132\031.goog"
  "le.protobuf.Duration\022\014\n\004code\030\004 \001(\005\022\013\n\003ui"
  "d\030\010 \001(\004\022\025\n\rerror_message\030\005 \001(\t\022\022\n\nattrib"
  "utes\030\006 \003(\t\0222\n\010severity\030\007 \001(\0162 .bosdyn.ap"
  "i.SystemFault.Severity\"]\n\010Severity\022\024\n\020SE"
  "VERITY_UNKNOWN\020\000\022\021\n\rSEVERITY_INFO\020\001\022\021\n\rS"
  "EVERITY_WARN\020\002\022\025\n\021SEVERITY_CRITICAL\020\003\"\304\002"
  "\n\nEStopState\022-\n\ttimestamp\030\001 \001(\0132\032.google"
  ".protobuf.Timestamp\022\014\n\004name\030\002 \001(\t\022)\n\004typ"
  "e\030\003 \001(\0162\033.bosdyn.api.EStopState.Type\022+\n\005"
  "state\030\004 \001(\0162\034.bosdyn.api.EStopState.Stat"
  "e\022\031\n\021state_description\030\005 \001(\t\">\n\004Type\022\020\n\014"
  "TYPE_UNKNOWN\020\000\022\021\n\rTYPE_HARDWARE\020\001\022\021\n\rTYP"
  "E_SOFTWARE\020\002\"F\n\005State\022\021\n\rSTATE_UNKNOWN\020\000"
  "\022\022\n\016STATE_ESTOPPED\020\001\022\026\n\022STATE_NOT_ESTOPP"
  "ED\020\002\"\330\003\n\014BatteryState\022-\n\ttimestamp\030\001 \001(\013"
  "2\032.google.protobuf.Timestamp\022\022\n\nidentifi"
  "er\030\002 \001(\t\0227\n\021charge_percentage\030\003 \001(\0132\034.go"
  "ogle.protobuf.DoubleValue\0224\n\021estimated_r"
  "untime\030\004 \001(\0132\031.google.protobuf.Duration\022"
  "-\n\007current\030\005 \001(\0132\034.google.protobuf.Doubl"
  "eValue\022-\n\007voltage\030\006 \001(\0132\034.google.protobu"
  "f.DoubleValue\022\024\n\014temperatures\030\007 \003(\001\022/\n\006s"
  "tatus\030\010 \001(\0162\037.bosdyn.api.BatteryState.St"
  "atus\"q\n\006Status\022\022\n\016STATUS_UNKNOWN\020\000\022\022\n\016ST"
  "ATUS_MISSING\020\001\022\023\n\017STATUS_CHARGING\020\002\022\026\n\022S"
  "TATUS_DISCHARGING\020\003\022\022\n\016STATUS_BOOTING\020\004\""
  "\335\002\n\016KinematicState\022,\n\014joint_states\030\002 \003(\013"
  "2\026.bosdyn.api.JointState\0229\n\025acquisition_"
  "timestamp\030\036 \001(\0132\032.google.protobuf.Timest"
  "amp\022:\n\023transforms_snapshot\030\037 \001(\0132\035.bosdy"
  "n.api.FrameTreeSnapshot\022;\n\032velocity_of_b"
  "ody_in_vision\030\010 \001(\0132\027.bosdyn.api.SE3Velo"
  "city\0229\n\030velocity_of_body_in_odom\030\014 \001(\0132\027"
  ".bosdyn.api.SE3VelocityJ\004\010\001\020\002J\004\010\003\020\004J\004\010\004\020"
  "\005J\004\010\005\020\006J\004\010\006\020\007J\004\010\t\020\nJ\004\010\n\020\013J\004\010\013\020\014\"\332\001\n\nJoin"
  "tState\022\014\n\004name\030\001 \001(\t\022.\n\010position\030\002 \001(\0132\034"
  ".google.protobuf.DoubleValue\022.\n\010velocity"
  "\030\003 \001(\0132\034.google.protobuf.DoubleValue\0222\n\014"
  "acceleration\030\004 \001(\0132\034.google.protobuf.Dou"
  "bleValue\022*\n\004load\030\005 \001(\0132\034.google.protobuf"
  ".DoubleValue\"\?\n\022BehaviorFaultState\022)\n\006fa"
  "ults\030\001 \003(\0132\031.bosdyn.api.BehaviorFault\"\315\002"
  "\n\rBehaviorFault\022\031\n\021behavior_fault_id\030\001 \001"
  "(\r\0223\n\017onset_timestamp\030\002 \001(\0132\032.google.pro"
  "tobuf.Timestamp\022.\n\005cause\030\003 \001(\0162\037.bosdyn."
  "api.BehaviorFault.Cause\0220\n\006status\030\004 \001(\0162"
  " .bosdyn.api.BehaviorFault.Status\">\n\005Cau"
  "se\022\021\n\rCAUSE_UNKNOWN\020\000\022\016\n\nCAUSE_FALL\020\001\022\022\n"
  "\016CAUSE_HARDWARE\020\002\"J\n\006Status\022\022\n\016STATUS_UN"
  "KNOWN\020\000\022\024\n\020STATUS_CLEARABLE\020\001\022\026\n\022STATUS_"
  "UNCLEARABLE\020\002\"e\n\014RobotMetrics\022-\n\ttimesta"
  "mp\030\001 \001(\0132\032.google.protobuf.Timestamp\022&\n\007"
  "metrics\030\002 \003(\0132\025.bosdyn.api.Parameter\"q\n\n"
  "CommsState\022-\n\ttimestamp\030\001 \001(\0132\032.google.p"
  "rotobuf.Timestamp\022+\n\nwifi_state\030\002 \001(\0132\025."
  "bosdyn.api.WiFiStateH\000B\007\n\005state\"\216\001\n\tWiFi"
  "State\0220\n\014current_mode\030\001 \001(\0162\032.bosdyn.api"
  ".WiFiState.Mode\022\r\n\005essid\030\002 \001(\t\"@\n\004Mode\022\020"
  "\n\014MODE_UNKNOWN\020\000\022\025\n\021MODE_ACCESS_POINT\020\001\022"
  "\017\n\013MODE_CLIENT\020\002\"\260\001\n\tFootState\022/\n\025foot_p"
  "osition_rt_body\030\001 \001(\0132\020.bosdyn.api.Vec3\022"
  ".\n\007contact\030\002 \001(\0162\035.bosdyn.api.FootState."
  "Contact\"B\n\007Contact\022\023\n\017CONTACT_UNKNOWN\020\000\022"
  "\020\n\014CONTACT_MADE\020\001\022\020\n\014CONTACT_LOST\020\002\">\n\021R"
  "obotStateRequest\022)\n\006header\030\001 \001(\0132\031.bosdy"
  "n.api.RequestHeader\"m\n\022RobotStateRespons"
  "e\022*\n\006header\030\001 \001(\0132\032.bosdyn.api.ResponseH"
  "eader\022+\n\013robot_state\030\002 \001(\0132\026.bosdyn.api."
  "RobotState\"@\n\023RobotMetricsRequest\022)\n\006hea"
  "der\030\001 \001(\0132\031.bosdyn.api.RequestHeader\"s\n\024"
  "RobotMetricsResponse\022*\n\006header\030\001 \001(\0132\032.b"
  "osdyn.api.ResponseHeader\022/\n\rrobot_metric"
  "s\030\002 \001(\0132\030.bosdyn.api.RobotMetrics\"N\n!Rob"
  "otHardwareConfigurationRequest\022)\n\006header"
  "\030\001 \001(\0132\031.bosdyn.api.RequestHeader\"\223\001\n\"Ro"
  "botHardwareConfigurationResponse\022*\n\006head"
  "er\030\001 \001(\0132\032.bosdyn.api.ResponseHeader\022A\n\026"
  "hardware_configuration\030\002 \001(\0132!.bosdyn.ap"
  "i.HardwareConfiguration\"U\n\025RobotLinkMode"
  "lRequest\022)\n\006header\030\001 \001(\0132\031.bosdyn.api.Re"
  "questHeader\022\021\n\tlink_name\030\002 \001(\t\"|\n\026RobotL"
  "inkModelResponse\022*\n\006header\030\001 \001(\0132\032.bosdy"
  "n.api.ResponseHeader\0226\n\nlink_model\030\002 \001(\013"
  "2\".bosdyn.api.Skeleton.Link.ObjModelB\021B\017"
  "RobotStateProtob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bosdyn_2fapi_2frobot_5fstate_2eproto_deps[6] = {
  &::descriptor_table_bosdyn_2fapi_2fgeometry_2eproto,
  &::descriptor_table_bosdyn_2fapi_2fheader_2eproto,
  &::descriptor_table_bosdyn_2fapi_2fparameter_2eproto,
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bosdyn_2fapi_2frobot_5fstate_2eproto_sccs[27] = {
  &scc_info_BatteryState_bosdyn_2fapi_2frobot_5fstate_2eproto.base,
  &scc_info_BehaviorFault_bosdyn_2fapi_2frobot_5fstate_2eproto.base,
  &scc_info_BehaviorFaultState_bosdyn_2fapi_2frobot_5fstate_2eproto.base,
  &scc_info_CommsState_bosdyn_2fapi_2frobot_5fstate_2eproto.base,
  &scc_info_EStopState_bosdyn_2fapi_2frobot_5fstate_2eproto.base,
  &scc_info_FootState_bosdyn_2fapi_2frobot_5fstate_2eproto.base,
  &scc_info_HardwareConfiguration_bosdyn_2fapi_2frobot_5fstate_2eproto.base,
  &scc_info_JointState_bosdyn_2fapi_2frobot_5fstate_2eproto.base,
  &scc_info_KinematicState_bosdyn_2fapi_2frobot_5fstate_2eproto.base,
  &scc_info_PowerState_bosdyn_2fapi_2frobot_5fstate_2eproto.base,
  &scc_info_RobotHardwareConfigurationRequest_bosdyn_2fapi_2frobot_5fstate_2eproto.base,
  &scc_info_RobotHardwareConfigurationResponse_bosdyn_2fapi_2frobot_5fstate_2eproto.base,
  &scc_info_RobotLinkModelRequest_bosdyn_2fapi_2frobot_5fstate_2eproto.base,
  &scc_info_RobotLinkModelResponse_bosdyn_2fapi_2frobot_5fstate_2eproto.base,
  &scc_info_RobotMetrics_bosdyn_2fapi_2frobot_5fstate_2eproto.base,
  &scc_info_RobotMetricsRequest_bosdyn_2fapi_2frobot_5fstate_2eproto.base,
  &scc_info_RobotMetricsResponse_bosdyn_2fapi_2frobot_5fstate_2eproto.base,
  &scc_info_RobotState_bosdyn_2fapi_2frobot_5fstate_2eproto.base,
  &scc_info_RobotStateRequest_bosdyn_2fapi_2frobot_5fstate_2eproto.base,
  &scc_info_RobotStateResponse_bosdyn_2fapi_2frobot_5fstate_2eproto.base,
  &scc_info_Skeleton_bosdyn_2fapi_2frobot_5fstate_2eproto.base,
  &scc_info_Skeleton_Link_bosdyn_2fapi_2frobot_5fstate_2eproto.base,
  &scc_info_Skeleton_Link_ObjModel_bosdyn_2fapi_2frobot_5fstate_2eproto.base,
  &scc_info_SystemFault_bosdyn_2fapi_2frobot_5fstate_2eproto.base,
  &scc_info_SystemFaultState_bosdyn_2fapi_2frobot_5fstate_2eproto.base,
  &scc_info_SystemFaultState_AggregatedEntry_DoNotUse_bosdyn_2fapi_2frobot_5fstate_2eproto.base,
  &scc_info_WiFiState_bosdyn_2fapi_2frobot_5fstate_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bosdyn_2fapi_2frobot_5fstate_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2frobot_5fstate_2eproto = {
  false, false, descriptor_table_protodef_bosdyn_2fapi_2frobot_5fstate_2eproto, "bosdyn/api/robot_state.proto", 5223,
  &descriptor_table_bosdyn_2fapi_2frobot_5fstate_2eproto_once, descriptor_table_bosdyn_2fapi_2frobot_5fstate_2eproto_sccs, descriptor_table_bosdyn_2fapi_2frobot_5fstate_2eproto_deps, 27, 6,
  schemas, file_default_instances, TableStruct_bosdyn_2fapi_2frobot_5fstate_2eproto::offsets,
  file_level_metadata_bosdyn_2fapi_2frobot_5fstate_2eproto, 27, file_level_enum_descriptors_bosdyn_2fapi_2frobot_5fstate_2eproto, file_level_service_descriptors_bosdyn_2fapi_2frobot_5fstate_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bosdyn_2fapi_2frobot_5fstate_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bosdyn_2fapi_2frobot_5fstate_2eproto)), true);
namespace bosdyn {
namespace api {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PowerState_MotorPowerState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2frobot_5fstate_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2frobot_5fstate_2eproto[0];
}
bool PowerState_MotorPowerState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PowerState_MotorPowerState PowerState::STATE_UNKNOWN;
constexpr PowerState_MotorPowerState PowerState::STATE_OFF;
constexpr PowerState_MotorPowerState PowerState::STATE_ON;
constexpr PowerState_MotorPowerState PowerState::STATE_POWERING_ON;
constexpr PowerState_MotorPowerState PowerState::STATE_POWERING_OFF;
constexpr PowerState_MotorPowerState PowerState::STATE_ERROR;
constexpr PowerState_MotorPowerState PowerState::MotorPowerState_MIN;
constexpr PowerState_MotorPowerState PowerState::MotorPowerState_MAX;
constexpr int PowerState::MotorPowerState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PowerState_ShorePowerState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2frobot_5fstate_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2frobot_5fstate_2eproto[1];
}
bool PowerState_ShorePowerState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PowerState_ShorePowerState PowerState::STATE_UNKNOWN_SHORE_POWER;
constexpr PowerState_ShorePowerState PowerState::STATE_ON_SHORE_POWER;
constexpr PowerState_ShorePowerState PowerState::STATE_OFF_SHORE_POWER;
constexpr PowerState_ShorePowerState PowerState::ShorePowerState_MIN;
constexpr PowerState_ShorePowerState PowerState::ShorePowerState_MAX;
constexpr int PowerState::ShorePowerState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SystemFault_Severity_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2frobot_5fstate_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2frobot_5fstate_2eproto[2];
}
bool SystemFault_Severity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SystemFault_Severity SystemFault::SEVERITY_UNKNOWN;
constexpr SystemFault_Severity SystemFault::SEVERITY_INFO;
constexpr SystemFault_Severity SystemFault::SEVERITY_WARN;
constexpr SystemFault_Severity SystemFault::SEVERITY_CRITICAL;
constexpr SystemFault_Severity SystemFault::Severity_MIN;
constexpr SystemFault_Severity SystemFault::Severity_MAX;
constexpr int SystemFault::Severity_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EStopState_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2frobot_5fstate_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2frobot_5fstate_2eproto[3];
}
bool EStopState_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr EStopState_Type EStopState::TYPE_UNKNOWN;
constexpr EStopState_Type EStopState::TYPE_HARDWARE;
constexpr EStopState_Type EStopState::TYPE_SOFTWARE;
constexpr EStopState_Type EStopState::Type_MIN;
constexpr EStopState_Type EStopState::Type_MAX;
constexpr int EStopState::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EStopState_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2frobot_5fstate_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2frobot_5fstate_2eproto[4];
}
bool EStopState_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr EStopState_State EStopState::STATE_UNKNOWN;
constexpr EStopState_State EStopState::STATE_ESTOPPED;
constexpr EStopState_State EStopState::STATE_NOT_ESTOPPED;
constexpr EStopState_State EStopState::State_MIN;
constexpr EStopState_State EStopState::State_MAX;
constexpr int EStopState::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BatteryState_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2frobot_5fstate_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2frobot_5fstate_2eproto[5];
}
bool BatteryState_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BatteryState_Status BatteryState::STATUS_UNKNOWN;
constexpr BatteryState_Status BatteryState::STATUS_MISSING;
constexpr BatteryState_Status BatteryState::STATUS_CHARGING;
constexpr BatteryState_Status BatteryState::STATUS_DISCHARGING;
constexpr BatteryState_Status BatteryState::STATUS_BOOTING;
constexpr BatteryState_Status BatteryState::Status_MIN;
constexpr BatteryState_Status BatteryState::Status_MAX;
constexpr int BatteryState::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BehaviorFault_Cause_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2frobot_5fstate_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2frobot_5fstate_2eproto[6];
}
bool BehaviorFault_Cause_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BehaviorFault_Cause BehaviorFault::CAUSE_UNKNOWN;
constexpr BehaviorFault_Cause BehaviorFault::CAUSE_FALL;
constexpr BehaviorFault_Cause BehaviorFault::CAUSE_HARDWARE;
constexpr BehaviorFault_Cause BehaviorFault::Cause_MIN;
constexpr BehaviorFault_Cause BehaviorFault::Cause_MAX;
constexpr int BehaviorFault::Cause_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BehaviorFault_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2frobot_5fstate_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2frobot_5fstate_2eproto[7];
}
bool BehaviorFault_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BehaviorFault_Status BehaviorFault::STATUS_UNKNOWN;
constexpr BehaviorFault_Status BehaviorFault::STATUS_CLEARABLE;
constexpr BehaviorFault_Status BehaviorFault::STATUS_UNCLEARABLE;
constexpr BehaviorFault_Status BehaviorFault::Status_MIN;
constexpr BehaviorFault_Status BehaviorFault::Status_MAX;
constexpr int BehaviorFault::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WiFiState_Mode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2frobot_5fstate_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2frobot_5fstate_2eproto[8];
}
bool WiFiState_Mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr WiFiState_Mode WiFiState::MODE_UNKNOWN;
constexpr WiFiState_Mode WiFiState::MODE_ACCESS_POINT;
constexpr WiFiState_Mode WiFiState::MODE_CLIENT;
constexpr WiFiState_Mode WiFiState::Mode_MIN;
constexpr WiFiState_Mode WiFiState::Mode_MAX;
constexpr int WiFiState::Mode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FootState_Contact_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2frobot_5fstate_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2frobot_5fstate_2eproto[9];
}
bool FootState_Contact_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr FootState_Contact FootState::CONTACT_UNKNOWN;
constexpr FootState_Contact FootState::CONTACT_MADE;
constexpr FootState_Contact FootState::CONTACT_LOST;
constexpr FootState_Contact FootState::Contact_MIN;
constexpr FootState_Contact FootState::Contact_MAX;
constexpr int FootState::Contact_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Skeleton_Link_ObjModel::InitAsDefaultInstance() {
}
class Skeleton_Link_ObjModel::_Internal {
 public:
};

Skeleton_Link_ObjModel::Skeleton_Link_ObjModel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.Skeleton.Link.ObjModel)
}
Skeleton_Link_ObjModel::Skeleton_Link_ObjModel(const Skeleton_Link_ObjModel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_name().empty()) {
    file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_file_name(),
      GetArena());
  }
  file_contents_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_contents().empty()) {
    file_contents_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_file_contents(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.Skeleton.Link.ObjModel)
}

void Skeleton_Link_ObjModel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Skeleton_Link_ObjModel_bosdyn_2fapi_2frobot_5fstate_2eproto.base);
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_contents_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Skeleton_Link_ObjModel::~Skeleton_Link_ObjModel() {
  // @@protoc_insertion_point(destructor:bosdyn.api.Skeleton.Link.ObjModel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Skeleton_Link_ObjModel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_contents_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Skeleton_Link_ObjModel::ArenaDtor(void* object) {
  Skeleton_Link_ObjModel* _this = reinterpret_cast< Skeleton_Link_ObjModel* >(object);
  (void)_this;
}
void Skeleton_Link_ObjModel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Skeleton_Link_ObjModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Skeleton_Link_ObjModel& Skeleton_Link_ObjModel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Skeleton_Link_ObjModel_bosdyn_2fapi_2frobot_5fstate_2eproto.base);
  return *internal_default_instance();
}


void Skeleton_Link_ObjModel::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.Skeleton.Link.ObjModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  file_contents_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Skeleton_Link_ObjModel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string file_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.Skeleton.Link.ObjModel.file_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string file_contents = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_file_contents();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.Skeleton.Link.ObjModel.file_contents"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Skeleton_Link_ObjModel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.Skeleton.Link.ObjModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string file_name = 1;
  if (this->file_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.Skeleton.Link.ObjModel.file_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_file_name(), target);
  }

  // string file_contents = 2;
  if (this->file_contents().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_contents().data(), static_cast<int>(this->_internal_file_contents().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.Skeleton.Link.ObjModel.file_contents");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_file_contents(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.Skeleton.Link.ObjModel)
  return target;
}

size_t Skeleton_Link_ObjModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.Skeleton.Link.ObjModel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_name = 1;
  if (this->file_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  // string file_contents = 2;
  if (this->file_contents().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_contents());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Skeleton_Link_ObjModel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.Skeleton.Link.ObjModel)
  GOOGLE_DCHECK_NE(&from, this);
  const Skeleton_Link_ObjModel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Skeleton_Link_ObjModel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.Skeleton.Link.ObjModel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.Skeleton.Link.ObjModel)
    MergeFrom(*source);
  }
}

void Skeleton_Link_ObjModel::MergeFrom(const Skeleton_Link_ObjModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.Skeleton.Link.ObjModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file_name().size() > 0) {
    _internal_set_file_name(from._internal_file_name());
  }
  if (from.file_contents().size() > 0) {
    _internal_set_file_contents(from._internal_file_contents());
  }
}

void Skeleton_Link_ObjModel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.Skeleton.Link.ObjModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Skeleton_Link_ObjModel::CopyFrom(const Skeleton_Link_ObjModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.Skeleton.Link.ObjModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Skeleton_Link_ObjModel::IsInitialized() const {
  return true;
}

void Skeleton_Link_ObjModel::InternalSwap(Skeleton_Link_ObjModel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  file_name_.Swap(&other->file_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  file_contents_.Swap(&other->file_contents_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Skeleton_Link_ObjModel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Skeleton_Link::InitAsDefaultInstance() {
  ::bosdyn::api::_Skeleton_Link_default_instance_._instance.get_mutable()->obj_model_ = const_cast< ::bosdyn::api::Skeleton_Link_ObjModel*>(
      ::bosdyn::api::Skeleton_Link_ObjModel::internal_default_instance());
}
class Skeleton_Link::_Internal {
 public:
  static const ::bosdyn::api::Skeleton_Link_ObjModel& obj_model(const Skeleton_Link* msg);
};

const ::bosdyn::api::Skeleton_Link_ObjModel&
Skeleton_Link::_Internal::obj_model(const Skeleton_Link* msg) {
  return *msg->obj_model_;
}
Skeleton_Link::Skeleton_Link(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.Skeleton.Link)
}
Skeleton_Link::Skeleton_Link(const Skeleton_Link& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_obj_model()) {
    obj_model_ = new ::bosdyn::api::Skeleton_Link_ObjModel(*from.obj_model_);
  } else {
    obj_model_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.Skeleton.Link)
}

void Skeleton_Link::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Skeleton_Link_bosdyn_2fapi_2frobot_5fstate_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  obj_model_ = nullptr;
}

Skeleton_Link::~Skeleton_Link() {
  // @@protoc_insertion_point(destructor:bosdyn.api.Skeleton.Link)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Skeleton_Link::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete obj_model_;
}

void Skeleton_Link::ArenaDtor(void* object) {
  Skeleton_Link* _this = reinterpret_cast< Skeleton_Link* >(object);
  (void)_this;
}
void Skeleton_Link::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Skeleton_Link::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Skeleton_Link& Skeleton_Link::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Skeleton_Link_bosdyn_2fapi_2frobot_5fstate_2eproto.base);
  return *internal_default_instance();
}


void Skeleton_Link::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.Skeleton.Link)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && obj_model_ != nullptr) {
    delete obj_model_;
  }
  obj_model_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Skeleton_Link::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.Skeleton.Link.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.Skeleton.Link.ObjModel obj_model = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_obj_model(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Skeleton_Link::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.Skeleton.Link)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.Skeleton.Link.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .bosdyn.api.Skeleton.Link.ObjModel obj_model = 2;
  if (this->has_obj_model()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::obj_model(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.Skeleton.Link)
  return target;
}

size_t Skeleton_Link::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.Skeleton.Link)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .bosdyn.api.Skeleton.Link.ObjModel obj_model = 2;
  if (this->has_obj_model()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *obj_model_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Skeleton_Link::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.Skeleton.Link)
  GOOGLE_DCHECK_NE(&from, this);
  const Skeleton_Link* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Skeleton_Link>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.Skeleton.Link)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.Skeleton.Link)
    MergeFrom(*source);
  }
}

void Skeleton_Link::MergeFrom(const Skeleton_Link& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.Skeleton.Link)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_obj_model()) {
    _internal_mutable_obj_model()->::bosdyn::api::Skeleton_Link_ObjModel::MergeFrom(from._internal_obj_model());
  }
}

void Skeleton_Link::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.Skeleton.Link)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Skeleton_Link::CopyFrom(const Skeleton_Link& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.Skeleton.Link)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Skeleton_Link::IsInitialized() const {
  return true;
}

void Skeleton_Link::InternalSwap(Skeleton_Link* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(obj_model_, other->obj_model_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Skeleton_Link::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Skeleton::InitAsDefaultInstance() {
}
class Skeleton::_Internal {
 public:
};

Skeleton::Skeleton(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  links_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.Skeleton)
}
Skeleton::Skeleton(const Skeleton& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      links_(from.links_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  urdf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_urdf().empty()) {
    urdf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_urdf(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.Skeleton)
}

void Skeleton::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Skeleton_bosdyn_2fapi_2frobot_5fstate_2eproto.base);
  urdf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Skeleton::~Skeleton() {
  // @@protoc_insertion_point(destructor:bosdyn.api.Skeleton)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Skeleton::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  urdf_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Skeleton::ArenaDtor(void* object) {
  Skeleton* _this = reinterpret_cast< Skeleton* >(object);
  (void)_this;
}
void Skeleton::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Skeleton::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Skeleton& Skeleton::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Skeleton_bosdyn_2fapi_2frobot_5fstate_2eproto.base);
  return *internal_default_instance();
}


void Skeleton::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.Skeleton)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  links_.Clear();
  urdf_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Skeleton::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bosdyn.api.Skeleton.Link links = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_links(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string urdf = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_urdf();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.Skeleton.urdf"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Skeleton::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.Skeleton)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bosdyn.api.Skeleton.Link links = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_links_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_links(i), target, stream);
  }

  // string urdf = 3;
  if (this->urdf().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_urdf().data(), static_cast<int>(this->_internal_urdf().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.Skeleton.urdf");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_urdf(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.Skeleton)
  return target;
}

size_t Skeleton::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.Skeleton)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bosdyn.api.Skeleton.Link links = 2;
  total_size += 1UL * this->_internal_links_size();
  for (const auto& msg : this->links_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string urdf = 3;
  if (this->urdf().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_urdf());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Skeleton::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.Skeleton)
  GOOGLE_DCHECK_NE(&from, this);
  const Skeleton* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Skeleton>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.Skeleton)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.Skeleton)
    MergeFrom(*source);
  }
}

void Skeleton::MergeFrom(const Skeleton& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.Skeleton)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  links_.MergeFrom(from.links_);
  if (from.urdf().size() > 0) {
    _internal_set_urdf(from._internal_urdf());
  }
}

void Skeleton::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.Skeleton)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Skeleton::CopyFrom(const Skeleton& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.Skeleton)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Skeleton::IsInitialized() const {
  return true;
}

void Skeleton::InternalSwap(Skeleton* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  links_.InternalSwap(&other->links_);
  urdf_.Swap(&other->urdf_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Skeleton::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HardwareConfiguration::InitAsDefaultInstance() {
  ::bosdyn::api::_HardwareConfiguration_default_instance_._instance.get_mutable()->skeleton_ = const_cast< ::bosdyn::api::Skeleton*>(
      ::bosdyn::api::Skeleton::internal_default_instance());
}
class HardwareConfiguration::_Internal {
 public:
  static const ::bosdyn::api::Skeleton& skeleton(const HardwareConfiguration* msg);
};

const ::bosdyn::api::Skeleton&
HardwareConfiguration::_Internal::skeleton(const HardwareConfiguration* msg) {
  return *msg->skeleton_;
}
HardwareConfiguration::HardwareConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.HardwareConfiguration)
}
HardwareConfiguration::HardwareConfiguration(const HardwareConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_skeleton()) {
    skeleton_ = new ::bosdyn::api::Skeleton(*from.skeleton_);
  } else {
    skeleton_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.HardwareConfiguration)
}

void HardwareConfiguration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HardwareConfiguration_bosdyn_2fapi_2frobot_5fstate_2eproto.base);
  skeleton_ = nullptr;
}

HardwareConfiguration::~HardwareConfiguration() {
  // @@protoc_insertion_point(destructor:bosdyn.api.HardwareConfiguration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HardwareConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete skeleton_;
}

void HardwareConfiguration::ArenaDtor(void* object) {
  HardwareConfiguration* _this = reinterpret_cast< HardwareConfiguration* >(object);
  (void)_this;
}
void HardwareConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HardwareConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HardwareConfiguration& HardwareConfiguration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HardwareConfiguration_bosdyn_2fapi_2frobot_5fstate_2eproto.base);
  return *internal_default_instance();
}


void HardwareConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.HardwareConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && skeleton_ != nullptr) {
    delete skeleton_;
  }
  skeleton_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HardwareConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.Skeleton skeleton = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_skeleton(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HardwareConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.HardwareConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.Skeleton skeleton = 1;
  if (this->has_skeleton()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::skeleton(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.HardwareConfiguration)
  return target;
}

size_t HardwareConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.HardwareConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.Skeleton skeleton = 1;
  if (this->has_skeleton()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *skeleton_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HardwareConfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.HardwareConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const HardwareConfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HardwareConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.HardwareConfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.HardwareConfiguration)
    MergeFrom(*source);
  }
}

void HardwareConfiguration::MergeFrom(const HardwareConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.HardwareConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_skeleton()) {
    _internal_mutable_skeleton()->::bosdyn::api::Skeleton::MergeFrom(from._internal_skeleton());
  }
}

void HardwareConfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.HardwareConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HardwareConfiguration::CopyFrom(const HardwareConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.HardwareConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HardwareConfiguration::IsInitialized() const {
  return true;
}

void HardwareConfiguration::InternalSwap(HardwareConfiguration* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(skeleton_, other->skeleton_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HardwareConfiguration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RobotState::InitAsDefaultInstance() {
  ::bosdyn::api::_RobotState_default_instance_._instance.get_mutable()->power_state_ = const_cast< ::bosdyn::api::PowerState*>(
      ::bosdyn::api::PowerState::internal_default_instance());
  ::bosdyn::api::_RobotState_default_instance_._instance.get_mutable()->system_fault_state_ = const_cast< ::bosdyn::api::SystemFaultState*>(
      ::bosdyn::api::SystemFaultState::internal_default_instance());
  ::bosdyn::api::_RobotState_default_instance_._instance.get_mutable()->kinematic_state_ = const_cast< ::bosdyn::api::KinematicState*>(
      ::bosdyn::api::KinematicState::internal_default_instance());
  ::bosdyn::api::_RobotState_default_instance_._instance.get_mutable()->behavior_fault_state_ = const_cast< ::bosdyn::api::BehaviorFaultState*>(
      ::bosdyn::api::BehaviorFaultState::internal_default_instance());
}
class RobotState::_Internal {
 public:
  static const ::bosdyn::api::PowerState& power_state(const RobotState* msg);
  static const ::bosdyn::api::SystemFaultState& system_fault_state(const RobotState* msg);
  static const ::bosdyn::api::KinematicState& kinematic_state(const RobotState* msg);
  static const ::bosdyn::api::BehaviorFaultState& behavior_fault_state(const RobotState* msg);
};

const ::bosdyn::api::PowerState&
RobotState::_Internal::power_state(const RobotState* msg) {
  return *msg->power_state_;
}
const ::bosdyn::api::SystemFaultState&
RobotState::_Internal::system_fault_state(const RobotState* msg) {
  return *msg->system_fault_state_;
}
const ::bosdyn::api::KinematicState&
RobotState::_Internal::kinematic_state(const RobotState* msg) {
  return *msg->kinematic_state_;
}
const ::bosdyn::api::BehaviorFaultState&
RobotState::_Internal::behavior_fault_state(const RobotState* msg) {
  return *msg->behavior_fault_state_;
}
RobotState::RobotState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  battery_states_(arena),
  comms_states_(arena),
  estop_states_(arena),
  foot_state_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.RobotState)
}
RobotState::RobotState(const RobotState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      battery_states_(from.battery_states_),
      comms_states_(from.comms_states_),
      estop_states_(from.estop_states_),
      foot_state_(from.foot_state_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_power_state()) {
    power_state_ = new ::bosdyn::api::PowerState(*from.power_state_);
  } else {
    power_state_ = nullptr;
  }
  if (from._internal_has_system_fault_state()) {
    system_fault_state_ = new ::bosdyn::api::SystemFaultState(*from.system_fault_state_);
  } else {
    system_fault_state_ = nullptr;
  }
  if (from._internal_has_kinematic_state()) {
    kinematic_state_ = new ::bosdyn::api::KinematicState(*from.kinematic_state_);
  } else {
    kinematic_state_ = nullptr;
  }
  if (from._internal_has_behavior_fault_state()) {
    behavior_fault_state_ = new ::bosdyn::api::BehaviorFaultState(*from.behavior_fault_state_);
  } else {
    behavior_fault_state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.RobotState)
}

void RobotState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RobotState_bosdyn_2fapi_2frobot_5fstate_2eproto.base);
  ::memset(&power_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&behavior_fault_state_) -
      reinterpret_cast<char*>(&power_state_)) + sizeof(behavior_fault_state_));
}

RobotState::~RobotState() {
  // @@protoc_insertion_point(destructor:bosdyn.api.RobotState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RobotState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete power_state_;
  if (this != internal_default_instance()) delete system_fault_state_;
  if (this != internal_default_instance()) delete kinematic_state_;
  if (this != internal_default_instance()) delete behavior_fault_state_;
}

void RobotState::ArenaDtor(void* object) {
  RobotState* _this = reinterpret_cast< RobotState* >(object);
  (void)_this;
}
void RobotState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RobotState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RobotState& RobotState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RobotState_bosdyn_2fapi_2frobot_5fstate_2eproto.base);
  return *internal_default_instance();
}


void RobotState::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.RobotState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  battery_states_.Clear();
  comms_states_.Clear();
  estop_states_.Clear();
  foot_state_.Clear();
  if (GetArena() == nullptr && power_state_ != nullptr) {
    delete power_state_;
  }
  power_state_ = nullptr;
  if (GetArena() == nullptr && system_fault_state_ != nullptr) {
    delete system_fault_state_;
  }
  system_fault_state_ = nullptr;
  if (GetArena() == nullptr && kinematic_state_ != nullptr) {
    delete kinematic_state_;
  }
  kinematic_state_ = nullptr;
  if (GetArena() == nullptr && behavior_fault_state_ != nullptr) {
    delete behavior_fault_state_;
  }
  behavior_fault_state_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.PowerState power_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_power_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bosdyn.api.BatteryState battery_states = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_battery_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .bosdyn.api.CommsState comms_states = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_comms_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.SystemFaultState system_fault_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_system_fault_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bosdyn.api.EStopState estop_states = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_estop_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.KinematicState kinematic_state = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_kinematic_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.BehaviorFaultState behavior_fault_state = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_behavior_fault_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bosdyn.api.FootState foot_state = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_foot_state(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RobotState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.RobotState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.PowerState power_state = 1;
  if (this->has_power_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::power_state(this), target, stream);
  }

  // repeated .bosdyn.api.BatteryState battery_states = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_battery_states_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_battery_states(i), target, stream);
  }

  // repeated .bosdyn.api.CommsState comms_states = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_comms_states_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_comms_states(i), target, stream);
  }

  // .bosdyn.api.SystemFaultState system_fault_state = 4;
  if (this->has_system_fault_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::system_fault_state(this), target, stream);
  }

  // repeated .bosdyn.api.EStopState estop_states = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_estop_states_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_estop_states(i), target, stream);
  }

  // .bosdyn.api.KinematicState kinematic_state = 6;
  if (this->has_kinematic_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::kinematic_state(this), target, stream);
  }

  // .bosdyn.api.BehaviorFaultState behavior_fault_state = 7;
  if (this->has_behavior_fault_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::behavior_fault_state(this), target, stream);
  }

  // repeated .bosdyn.api.FootState foot_state = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_foot_state_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_foot_state(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.RobotState)
  return target;
}

size_t RobotState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.RobotState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bosdyn.api.BatteryState battery_states = 2;
  total_size += 1UL * this->_internal_battery_states_size();
  for (const auto& msg : this->battery_states_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .bosdyn.api.CommsState comms_states = 3;
  total_size += 1UL * this->_internal_comms_states_size();
  for (const auto& msg : this->comms_states_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .bosdyn.api.EStopState estop_states = 5;
  total_size += 1UL * this->_internal_estop_states_size();
  for (const auto& msg : this->estop_states_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .bosdyn.api.FootState foot_state = 8;
  total_size += 1UL * this->_internal_foot_state_size();
  for (const auto& msg : this->foot_state_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .bosdyn.api.PowerState power_state = 1;
  if (this->has_power_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *power_state_);
  }

  // .bosdyn.api.SystemFaultState system_fault_state = 4;
  if (this->has_system_fault_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *system_fault_state_);
  }

  // .bosdyn.api.KinematicState kinematic_state = 6;
  if (this->has_kinematic_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *kinematic_state_);
  }

  // .bosdyn.api.BehaviorFaultState behavior_fault_state = 7;
  if (this->has_behavior_fault_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *behavior_fault_state_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.RobotState)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RobotState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.RobotState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.RobotState)
    MergeFrom(*source);
  }
}

void RobotState::MergeFrom(const RobotState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.RobotState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  battery_states_.MergeFrom(from.battery_states_);
  comms_states_.MergeFrom(from.comms_states_);
  estop_states_.MergeFrom(from.estop_states_);
  foot_state_.MergeFrom(from.foot_state_);
  if (from.has_power_state()) {
    _internal_mutable_power_state()->::bosdyn::api::PowerState::MergeFrom(from._internal_power_state());
  }
  if (from.has_system_fault_state()) {
    _internal_mutable_system_fault_state()->::bosdyn::api::SystemFaultState::MergeFrom(from._internal_system_fault_state());
  }
  if (from.has_kinematic_state()) {
    _internal_mutable_kinematic_state()->::bosdyn::api::KinematicState::MergeFrom(from._internal_kinematic_state());
  }
  if (from.has_behavior_fault_state()) {
    _internal_mutable_behavior_fault_state()->::bosdyn::api::BehaviorFaultState::MergeFrom(from._internal_behavior_fault_state());
  }
}

void RobotState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.RobotState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotState::CopyFrom(const RobotState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.RobotState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotState::IsInitialized() const {
  return true;
}

void RobotState::InternalSwap(RobotState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  battery_states_.InternalSwap(&other->battery_states_);
  comms_states_.InternalSwap(&other->comms_states_);
  estop_states_.InternalSwap(&other->estop_states_);
  foot_state_.InternalSwap(&other->foot_state_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RobotState, behavior_fault_state_)
      + sizeof(RobotState::behavior_fault_state_)
      - PROTOBUF_FIELD_OFFSET(RobotState, power_state_)>(
          reinterpret_cast<char*>(&power_state_),
          reinterpret_cast<char*>(&other->power_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PowerState::InitAsDefaultInstance() {
  ::bosdyn::api::_PowerState_default_instance_._instance.get_mutable()->timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::bosdyn::api::_PowerState_default_instance_._instance.get_mutable()->locomotion_charge_percentage_ = const_cast< PROTOBUF_NAMESPACE_ID::DoubleValue*>(
      PROTOBUF_NAMESPACE_ID::DoubleValue::internal_default_instance());
  ::bosdyn::api::_PowerState_default_instance_._instance.get_mutable()->locomotion_estimated_runtime_ = const_cast< PROTOBUF_NAMESPACE_ID::Duration*>(
      PROTOBUF_NAMESPACE_ID::Duration::internal_default_instance());
}
class PowerState::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const PowerState* msg);
  static const PROTOBUF_NAMESPACE_ID::DoubleValue& locomotion_charge_percentage(const PowerState* msg);
  static const PROTOBUF_NAMESPACE_ID::Duration& locomotion_estimated_runtime(const PowerState* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
PowerState::_Internal::timestamp(const PowerState* msg) {
  return *msg->timestamp_;
}
const PROTOBUF_NAMESPACE_ID::DoubleValue&
PowerState::_Internal::locomotion_charge_percentage(const PowerState* msg) {
  return *msg->locomotion_charge_percentage_;
}
const PROTOBUF_NAMESPACE_ID::Duration&
PowerState::_Internal::locomotion_estimated_runtime(const PowerState* msg) {
  return *msg->locomotion_estimated_runtime_;
}
void PowerState::clear_timestamp() {
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
void PowerState::clear_locomotion_charge_percentage() {
  if (GetArena() == nullptr && locomotion_charge_percentage_ != nullptr) {
    delete locomotion_charge_percentage_;
  }
  locomotion_charge_percentage_ = nullptr;
}
void PowerState::clear_locomotion_estimated_runtime() {
  if (GetArena() == nullptr && locomotion_estimated_runtime_ != nullptr) {
    delete locomotion_estimated_runtime_;
  }
  locomotion_estimated_runtime_ = nullptr;
}
PowerState::PowerState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.PowerState)
}
PowerState::PowerState(const PowerState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  if (from._internal_has_locomotion_charge_percentage()) {
    locomotion_charge_percentage_ = new PROTOBUF_NAMESPACE_ID::DoubleValue(*from.locomotion_charge_percentage_);
  } else {
    locomotion_charge_percentage_ = nullptr;
  }
  if (from._internal_has_locomotion_estimated_runtime()) {
    locomotion_estimated_runtime_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.locomotion_estimated_runtime_);
  } else {
    locomotion_estimated_runtime_ = nullptr;
  }
  ::memcpy(&motor_power_state_, &from.motor_power_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&shore_power_state_) -
    reinterpret_cast<char*>(&motor_power_state_)) + sizeof(shore_power_state_));
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.PowerState)
}

void PowerState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PowerState_bosdyn_2fapi_2frobot_5fstate_2eproto.base);
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shore_power_state_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(shore_power_state_));
}

PowerState::~PowerState() {
  // @@protoc_insertion_point(destructor:bosdyn.api.PowerState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PowerState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete timestamp_;
  if (this != internal_default_instance()) delete locomotion_charge_percentage_;
  if (this != internal_default_instance()) delete locomotion_estimated_runtime_;
}

void PowerState::ArenaDtor(void* object) {
  PowerState* _this = reinterpret_cast< PowerState* >(object);
  (void)_this;
}
void PowerState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PowerState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PowerState& PowerState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PowerState_bosdyn_2fapi_2frobot_5fstate_2eproto.base);
  return *internal_default_instance();
}


void PowerState::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.PowerState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  if (GetArena() == nullptr && locomotion_charge_percentage_ != nullptr) {
    delete locomotion_charge_percentage_;
  }
  locomotion_charge_percentage_ = nullptr;
  if (GetArena() == nullptr && locomotion_estimated_runtime_ != nullptr) {
    delete locomotion_estimated_runtime_;
  }
  locomotion_estimated_runtime_ = nullptr;
  ::memset(&motor_power_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shore_power_state_) -
      reinterpret_cast<char*>(&motor_power_state_)) + sizeof(shore_power_state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PowerState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.PowerState.MotorPowerState motor_power_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_motor_power_state(static_cast<::bosdyn::api::PowerState_MotorPowerState>(val));
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.PowerState.ShorePowerState shore_power_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_shore_power_state(static_cast<::bosdyn::api::PowerState_ShorePowerState>(val));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue locomotion_charge_percentage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_locomotion_charge_percentage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Duration locomotion_estimated_runtime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_locomotion_estimated_runtime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PowerState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.PowerState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::timestamp(this), target, stream);
  }

  // .bosdyn.api.PowerState.MotorPowerState motor_power_state = 2;
  if (this->motor_power_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_motor_power_state(), target);
  }

  // .bosdyn.api.PowerState.ShorePowerState shore_power_state = 3;
  if (this->shore_power_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_shore_power_state(), target);
  }

  // .google.protobuf.DoubleValue locomotion_charge_percentage = 4;
  if (this->has_locomotion_charge_percentage()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::locomotion_charge_percentage(this), target, stream);
  }

  // .google.protobuf.Duration locomotion_estimated_runtime = 5;
  if (this->has_locomotion_estimated_runtime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::locomotion_estimated_runtime(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.PowerState)
  return target;
}

size_t PowerState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.PowerState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .google.protobuf.DoubleValue locomotion_charge_percentage = 4;
  if (this->has_locomotion_charge_percentage()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *locomotion_charge_percentage_);
  }

  // .google.protobuf.Duration locomotion_estimated_runtime = 5;
  if (this->has_locomotion_estimated_runtime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *locomotion_estimated_runtime_);
  }

  // .bosdyn.api.PowerState.MotorPowerState motor_power_state = 2;
  if (this->motor_power_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_motor_power_state());
  }

  // .bosdyn.api.PowerState.ShorePowerState shore_power_state = 3;
  if (this->shore_power_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_shore_power_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PowerState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.PowerState)
  GOOGLE_DCHECK_NE(&from, this);
  const PowerState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PowerState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.PowerState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.PowerState)
    MergeFrom(*source);
  }
}

void PowerState::MergeFrom(const PowerState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.PowerState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from.has_locomotion_charge_percentage()) {
    _internal_mutable_locomotion_charge_percentage()->PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from._internal_locomotion_charge_percentage());
  }
  if (from.has_locomotion_estimated_runtime()) {
    _internal_mutable_locomotion_estimated_runtime()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_locomotion_estimated_runtime());
  }
  if (from.motor_power_state() != 0) {
    _internal_set_motor_power_state(from._internal_motor_power_state());
  }
  if (from.shore_power_state() != 0) {
    _internal_set_shore_power_state(from._internal_shore_power_state());
  }
}

void PowerState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.PowerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PowerState::CopyFrom(const PowerState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.PowerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerState::IsInitialized() const {
  return true;
}

void PowerState::InternalSwap(PowerState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PowerState, shore_power_state_)
      + sizeof(PowerState::shore_power_state_)
      - PROTOBUF_FIELD_OFFSET(PowerState, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PowerState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

SystemFaultState_AggregatedEntry_DoNotUse::SystemFaultState_AggregatedEntry_DoNotUse() {}
SystemFaultState_AggregatedEntry_DoNotUse::SystemFaultState_AggregatedEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SystemFaultState_AggregatedEntry_DoNotUse::MergeFrom(const SystemFaultState_AggregatedEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SystemFaultState_AggregatedEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void SystemFaultState_AggregatedEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void SystemFaultState::InitAsDefaultInstance() {
}
class SystemFaultState::_Internal {
 public:
};

SystemFaultState::SystemFaultState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  faults_(arena),
  historical_faults_(arena),
  aggregated_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.SystemFaultState)
}
SystemFaultState::SystemFaultState(const SystemFaultState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      faults_(from.faults_),
      historical_faults_(from.historical_faults_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  aggregated_.MergeFrom(from.aggregated_);
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.SystemFaultState)
}

void SystemFaultState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SystemFaultState_bosdyn_2fapi_2frobot_5fstate_2eproto.base);
}

SystemFaultState::~SystemFaultState() {
  // @@protoc_insertion_point(destructor:bosdyn.api.SystemFaultState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SystemFaultState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SystemFaultState::ArenaDtor(void* object) {
  SystemFaultState* _this = reinterpret_cast< SystemFaultState* >(object);
  (void)_this;
}
void SystemFaultState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SystemFaultState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemFaultState& SystemFaultState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemFaultState_bosdyn_2fapi_2frobot_5fstate_2eproto.base);
  return *internal_default_instance();
}


void SystemFaultState::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.SystemFaultState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  faults_.Clear();
  historical_faults_.Clear();
  aggregated_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SystemFaultState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bosdyn.api.SystemFault faults = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_faults(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .bosdyn.api.SystemFault historical_faults = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_historical_faults(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .bosdyn.api.SystemFault.Severity> aggregated = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&aggregated_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SystemFaultState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.SystemFaultState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bosdyn.api.SystemFault faults = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_faults_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_faults(i), target, stream);
  }

  // repeated .bosdyn.api.SystemFault historical_faults = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_historical_faults_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_historical_faults(i), target, stream);
  }

  // map<string, .bosdyn.api.SystemFault.Severity> aggregated = 3;
  if (!this->_internal_aggregated().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::bosdyn::api::SystemFault_Severity >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "bosdyn.api.SystemFaultState.AggregatedEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_aggregated().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_aggregated().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::bosdyn::api::SystemFault_Severity >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::bosdyn::api::SystemFault_Severity >::const_iterator
          it = this->_internal_aggregated().begin();
          it != this->_internal_aggregated().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SystemFaultState_AggregatedEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::bosdyn::api::SystemFault_Severity >::const_iterator
          it = this->_internal_aggregated().begin();
          it != this->_internal_aggregated().end(); ++it) {
        target = SystemFaultState_AggregatedEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.SystemFaultState)
  return target;
}

size_t SystemFaultState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.SystemFaultState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bosdyn.api.SystemFault faults = 1;
  total_size += 1UL * this->_internal_faults_size();
  for (const auto& msg : this->faults_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .bosdyn.api.SystemFault historical_faults = 2;
  total_size += 1UL * this->_internal_historical_faults_size();
  for (const auto& msg : this->historical_faults_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, .bosdyn.api.SystemFault.Severity> aggregated = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_aggregated_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::bosdyn::api::SystemFault_Severity >::const_iterator
      it = this->_internal_aggregated().begin();
      it != this->_internal_aggregated().end(); ++it) {
    total_size += SystemFaultState_AggregatedEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemFaultState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.SystemFaultState)
  GOOGLE_DCHECK_NE(&from, this);
  const SystemFaultState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SystemFaultState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.SystemFaultState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.SystemFaultState)
    MergeFrom(*source);
  }
}

void SystemFaultState::MergeFrom(const SystemFaultState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.SystemFaultState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  faults_.MergeFrom(from.faults_);
  historical_faults_.MergeFrom(from.historical_faults_);
  aggregated_.MergeFrom(from.aggregated_);
}

void SystemFaultState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.SystemFaultState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemFaultState::CopyFrom(const SystemFaultState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.SystemFaultState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemFaultState::IsInitialized() const {
  return true;
}

void SystemFaultState::InternalSwap(SystemFaultState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  faults_.InternalSwap(&other->faults_);
  historical_faults_.InternalSwap(&other->historical_faults_);
  aggregated_.Swap(&other->aggregated_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SystemFaultState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SystemFault::InitAsDefaultInstance() {
  ::bosdyn::api::_SystemFault_default_instance_._instance.get_mutable()->onset_timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::bosdyn::api::_SystemFault_default_instance_._instance.get_mutable()->duration_ = const_cast< PROTOBUF_NAMESPACE_ID::Duration*>(
      PROTOBUF_NAMESPACE_ID::Duration::internal_default_instance());
}
class SystemFault::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& onset_timestamp(const SystemFault* msg);
  static const PROTOBUF_NAMESPACE_ID::Duration& duration(const SystemFault* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
SystemFault::_Internal::onset_timestamp(const SystemFault* msg) {
  return *msg->onset_timestamp_;
}
const PROTOBUF_NAMESPACE_ID::Duration&
SystemFault::_Internal::duration(const SystemFault* msg) {
  return *msg->duration_;
}
void SystemFault::clear_onset_timestamp() {
  if (GetArena() == nullptr && onset_timestamp_ != nullptr) {
    delete onset_timestamp_;
  }
  onset_timestamp_ = nullptr;
}
void SystemFault::clear_duration() {
  if (GetArena() == nullptr && duration_ != nullptr) {
    delete duration_;
  }
  duration_ = nullptr;
}
SystemFault::SystemFault(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attributes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.SystemFault)
}
SystemFault::SystemFault(const SystemFault& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attributes_(from.attributes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error_message().empty()) {
    error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_error_message(),
      GetArena());
  }
  if (from._internal_has_onset_timestamp()) {
    onset_timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.onset_timestamp_);
  } else {
    onset_timestamp_ = nullptr;
  }
  if (from._internal_has_duration()) {
    duration_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.duration_);
  } else {
    duration_ = nullptr;
  }
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&code_)) + sizeof(uid_));
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.SystemFault)
}

void SystemFault::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SystemFault_bosdyn_2fapi_2frobot_5fstate_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&onset_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&onset_timestamp_)) + sizeof(uid_));
}

SystemFault::~SystemFault() {
  // @@protoc_insertion_point(destructor:bosdyn.api.SystemFault)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SystemFault::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete onset_timestamp_;
  if (this != internal_default_instance()) delete duration_;
}

void SystemFault::ArenaDtor(void* object) {
  SystemFault* _this = reinterpret_cast< SystemFault* >(object);
  (void)_this;
}
void SystemFault::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SystemFault::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemFault& SystemFault::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemFault_bosdyn_2fapi_2frobot_5fstate_2eproto.base);
  return *internal_default_instance();
}


void SystemFault::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.SystemFault)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attributes_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  error_message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && onset_timestamp_ != nullptr) {
    delete onset_timestamp_;
  }
  onset_timestamp_ = nullptr;
  if (GetArena() == nullptr && duration_ != nullptr) {
    delete duration_;
  }
  duration_ = nullptr;
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&code_)) + sizeof(uid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SystemFault::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.SystemFault.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp onset_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_onset_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Duration duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_duration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error_message = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_error_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.SystemFault.error_message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string attributes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_attributes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.SystemFault.attributes"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.SystemFault.Severity severity = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_severity(static_cast<::bosdyn::api::SystemFault_Severity>(val));
        } else goto handle_unusual;
        continue;
      // uint64 uid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SystemFault::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.SystemFault)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.SystemFault.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .google.protobuf.Timestamp onset_timestamp = 2;
  if (this->has_onset_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::onset_timestamp(this), target, stream);
  }

  // .google.protobuf.Duration duration = 3;
  if (this->has_duration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::duration(this), target, stream);
  }

  // int32 code = 4;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_code(), target);
  }

  // string error_message = 5;
  if (this->error_message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.SystemFault.error_message");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_error_message(), target);
  }

  // repeated string attributes = 6;
  for (int i = 0, n = this->_internal_attributes_size(); i < n; i++) {
    const auto& s = this->_internal_attributes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.SystemFault.attributes");
    target = stream->WriteString(6, s, target);
  }

  // .bosdyn.api.SystemFault.Severity severity = 7;
  if (this->severity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_severity(), target);
  }

  // uint64 uid = 8;
  if (this->uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.SystemFault)
  return target;
}

size_t SystemFault::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.SystemFault)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string attributes = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(attributes_.size());
  for (int i = 0, n = attributes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      attributes_.Get(i));
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string error_message = 5;
  if (this->error_message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // .google.protobuf.Timestamp onset_timestamp = 2;
  if (this->has_onset_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *onset_timestamp_);
  }

  // .google.protobuf.Duration duration = 3;
  if (this->has_duration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *duration_);
  }

  // int32 code = 4;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_code());
  }

  // .bosdyn.api.SystemFault.Severity severity = 7;
  if (this->severity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_severity());
  }

  // uint64 uid = 8;
  if (this->uid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_uid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemFault::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.SystemFault)
  GOOGLE_DCHECK_NE(&from, this);
  const SystemFault* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SystemFault>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.SystemFault)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.SystemFault)
    MergeFrom(*source);
  }
}

void SystemFault::MergeFrom(const SystemFault& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.SystemFault)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attributes_.MergeFrom(from.attributes_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.error_message().size() > 0) {
    _internal_set_error_message(from._internal_error_message());
  }
  if (from.has_onset_timestamp()) {
    _internal_mutable_onset_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_onset_timestamp());
  }
  if (from.has_duration()) {
    _internal_mutable_duration()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_duration());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.severity() != 0) {
    _internal_set_severity(from._internal_severity());
  }
  if (from.uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
}

void SystemFault::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.SystemFault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemFault::CopyFrom(const SystemFault& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.SystemFault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemFault::IsInitialized() const {
  return true;
}

void SystemFault::InternalSwap(SystemFault* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attributes_.InternalSwap(&other->attributes_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  error_message_.Swap(&other->error_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SystemFault, uid_)
      + sizeof(SystemFault::uid_)
      - PROTOBUF_FIELD_OFFSET(SystemFault, onset_timestamp_)>(
          reinterpret_cast<char*>(&onset_timestamp_),
          reinterpret_cast<char*>(&other->onset_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SystemFault::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EStopState::InitAsDefaultInstance() {
  ::bosdyn::api::_EStopState_default_instance_._instance.get_mutable()->timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class EStopState::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const EStopState* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
EStopState::_Internal::timestamp(const EStopState* msg) {
  return *msg->timestamp_;
}
void EStopState::clear_timestamp() {
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
EStopState::EStopState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.EStopState)
}
EStopState::EStopState(const EStopState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  state_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_state_description().empty()) {
    state_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_state_description(),
      GetArena());
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&type_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.EStopState)
}

void EStopState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EStopState_bosdyn_2fapi_2frobot_5fstate_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(state_));
}

EStopState::~EStopState() {
  // @@protoc_insertion_point(destructor:bosdyn.api.EStopState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EStopState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timestamp_;
}

void EStopState::ArenaDtor(void* object) {
  EStopState* _this = reinterpret_cast< EStopState* >(object);
  (void)_this;
}
void EStopState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EStopState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EStopState& EStopState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EStopState_bosdyn_2fapi_2frobot_5fstate_2eproto.base);
  return *internal_default_instance();
}


void EStopState::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.EStopState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  state_description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&type_)) + sizeof(state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EStopState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.EStopState.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.EStopState.Type type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::bosdyn::api::EStopState_Type>(val));
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.EStopState.State state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::bosdyn::api::EStopState_State>(val));
        } else goto handle_unusual;
        continue;
      // string state_description = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_state_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.EStopState.state_description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EStopState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.EStopState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::timestamp(this), target, stream);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.EStopState.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .bosdyn.api.EStopState.Type type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // .bosdyn.api.EStopState.State state = 4;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_state(), target);
  }

  // string state_description = 5;
  if (this->state_description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_state_description().data(), static_cast<int>(this->_internal_state_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.EStopState.state_description");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_state_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.EStopState)
  return target;
}

size_t EStopState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.EStopState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string state_description = 5;
  if (this->state_description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_state_description());
  }

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .bosdyn.api.EStopState.Type type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .bosdyn.api.EStopState.State state = 4;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EStopState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.EStopState)
  GOOGLE_DCHECK_NE(&from, this);
  const EStopState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EStopState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.EStopState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.EStopState)
    MergeFrom(*source);
  }
}

void EStopState::MergeFrom(const EStopState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.EStopState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.state_description().size() > 0) {
    _internal_set_state_description(from._internal_state_description());
  }
  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void EStopState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.EStopState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EStopState::CopyFrom(const EStopState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.EStopState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EStopState::IsInitialized() const {
  return true;
}

void EStopState::InternalSwap(EStopState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  state_description_.Swap(&other->state_description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EStopState, state_)
      + sizeof(EStopState::state_)
      - PROTOBUF_FIELD_OFFSET(EStopState, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EStopState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BatteryState::InitAsDefaultInstance() {
  ::bosdyn::api::_BatteryState_default_instance_._instance.get_mutable()->timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::bosdyn::api::_BatteryState_default_instance_._instance.get_mutable()->charge_percentage_ = const_cast< PROTOBUF_NAMESPACE_ID::DoubleValue*>(
      PROTOBUF_NAMESPACE_ID::DoubleValue::internal_default_instance());
  ::bosdyn::api::_BatteryState_default_instance_._instance.get_mutable()->estimated_runtime_ = const_cast< PROTOBUF_NAMESPACE_ID::Duration*>(
      PROTOBUF_NAMESPACE_ID::Duration::internal_default_instance());
  ::bosdyn::api::_BatteryState_default_instance_._instance.get_mutable()->current_ = const_cast< PROTOBUF_NAMESPACE_ID::DoubleValue*>(
      PROTOBUF_NAMESPACE_ID::DoubleValue::internal_default_instance());
  ::bosdyn::api::_BatteryState_default_instance_._instance.get_mutable()->voltage_ = const_cast< PROTOBUF_NAMESPACE_ID::DoubleValue*>(
      PROTOBUF_NAMESPACE_ID::DoubleValue::internal_default_instance());
}
class BatteryState::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const BatteryState* msg);
  static const PROTOBUF_NAMESPACE_ID::DoubleValue& charge_percentage(const BatteryState* msg);
  static const PROTOBUF_NAMESPACE_ID::Duration& estimated_runtime(const BatteryState* msg);
  static const PROTOBUF_NAMESPACE_ID::DoubleValue& current(const BatteryState* msg);
  static const PROTOBUF_NAMESPACE_ID::DoubleValue& voltage(const BatteryState* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
BatteryState::_Internal::timestamp(const BatteryState* msg) {
  return *msg->timestamp_;
}
const PROTOBUF_NAMESPACE_ID::DoubleValue&
BatteryState::_Internal::charge_percentage(const BatteryState* msg) {
  return *msg->charge_percentage_;
}
const PROTOBUF_NAMESPACE_ID::Duration&
BatteryState::_Internal::estimated_runtime(const BatteryState* msg) {
  return *msg->estimated_runtime_;
}
const PROTOBUF_NAMESPACE_ID::DoubleValue&
BatteryState::_Internal::current(const BatteryState* msg) {
  return *msg->current_;
}
const PROTOBUF_NAMESPACE_ID::DoubleValue&
BatteryState::_Internal::voltage(const BatteryState* msg) {
  return *msg->voltage_;
}
void BatteryState::clear_timestamp() {
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
void BatteryState::clear_charge_percentage() {
  if (GetArena() == nullptr && charge_percentage_ != nullptr) {
    delete charge_percentage_;
  }
  charge_percentage_ = nullptr;
}
void BatteryState::clear_estimated_runtime() {
  if (GetArena() == nullptr && estimated_runtime_ != nullptr) {
    delete estimated_runtime_;
  }
  estimated_runtime_ = nullptr;
}
void BatteryState::clear_current() {
  if (GetArena() == nullptr && current_ != nullptr) {
    delete current_;
  }
  current_ = nullptr;
}
void BatteryState::clear_voltage() {
  if (GetArena() == nullptr && voltage_ != nullptr) {
    delete voltage_;
  }
  voltage_ = nullptr;
}
BatteryState::BatteryState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  temperatures_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.BatteryState)
}
BatteryState::BatteryState(const BatteryState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      temperatures_(from.temperatures_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_identifier().empty()) {
    identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_identifier(),
      GetArena());
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  if (from._internal_has_charge_percentage()) {
    charge_percentage_ = new PROTOBUF_NAMESPACE_ID::DoubleValue(*from.charge_percentage_);
  } else {
    charge_percentage_ = nullptr;
  }
  if (from._internal_has_estimated_runtime()) {
    estimated_runtime_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.estimated_runtime_);
  } else {
    estimated_runtime_ = nullptr;
  }
  if (from._internal_has_current()) {
    current_ = new PROTOBUF_NAMESPACE_ID::DoubleValue(*from.current_);
  } else {
    current_ = nullptr;
  }
  if (from._internal_has_voltage()) {
    voltage_ = new PROTOBUF_NAMESPACE_ID::DoubleValue(*from.voltage_);
  } else {
    voltage_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.BatteryState)
}

void BatteryState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BatteryState_bosdyn_2fapi_2frobot_5fstate_2eproto.base);
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(status_));
}

BatteryState::~BatteryState() {
  // @@protoc_insertion_point(destructor:bosdyn.api.BatteryState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BatteryState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timestamp_;
  if (this != internal_default_instance()) delete charge_percentage_;
  if (this != internal_default_instance()) delete estimated_runtime_;
  if (this != internal_default_instance()) delete current_;
  if (this != internal_default_instance()) delete voltage_;
}

void BatteryState::ArenaDtor(void* object) {
  BatteryState* _this = reinterpret_cast< BatteryState* >(object);
  (void)_this;
}
void BatteryState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BatteryState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BatteryState& BatteryState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BatteryState_bosdyn_2fapi_2frobot_5fstate_2eproto.base);
  return *internal_default_instance();
}


void BatteryState::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.BatteryState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  temperatures_.Clear();
  identifier_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  if (GetArena() == nullptr && charge_percentage_ != nullptr) {
    delete charge_percentage_;
  }
  charge_percentage_ = nullptr;
  if (GetArena() == nullptr && estimated_runtime_ != nullptr) {
    delete estimated_runtime_;
  }
  estimated_runtime_ = nullptr;
  if (GetArena() == nullptr && current_ != nullptr) {
    delete current_;
  }
  current_ = nullptr;
  if (GetArena() == nullptr && voltage_ != nullptr) {
    delete voltage_;
  }
  voltage_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatteryState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.BatteryState.identifier"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue charge_percentage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_charge_percentage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Duration estimated_runtime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_estimated_runtime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue current = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_current(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue voltage = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_voltage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double temperatures = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_temperatures(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57) {
          _internal_add_temperatures(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.BatteryState.Status status = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::bosdyn::api::BatteryState_Status>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BatteryState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.BatteryState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::timestamp(this), target, stream);
  }

  // string identifier = 2;
  if (this->identifier().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_identifier().data(), static_cast<int>(this->_internal_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.BatteryState.identifier");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_identifier(), target);
  }

  // .google.protobuf.DoubleValue charge_percentage = 3;
  if (this->has_charge_percentage()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::charge_percentage(this), target, stream);
  }

  // .google.protobuf.Duration estimated_runtime = 4;
  if (this->has_estimated_runtime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::estimated_runtime(this), target, stream);
  }

  // .google.protobuf.DoubleValue current = 5;
  if (this->has_current()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::current(this), target, stream);
  }

  // .google.protobuf.DoubleValue voltage = 6;
  if (this->has_voltage()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::voltage(this), target, stream);
  }

  // repeated double temperatures = 7;
  if (this->_internal_temperatures_size() > 0) {
    target = stream->WriteFixedPacked(7, _internal_temperatures(), target);
  }

  // .bosdyn.api.BatteryState.Status status = 8;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.BatteryState)
  return target;
}

size_t BatteryState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.BatteryState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double temperatures = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_temperatures_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _temperatures_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string identifier = 2;
  if (this->identifier().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identifier());
  }

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .google.protobuf.DoubleValue charge_percentage = 3;
  if (this->has_charge_percentage()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *charge_percentage_);
  }

  // .google.protobuf.Duration estimated_runtime = 4;
  if (this->has_estimated_runtime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *estimated_runtime_);
  }

  // .google.protobuf.DoubleValue current = 5;
  if (this->has_current()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *current_);
  }

  // .google.protobuf.DoubleValue voltage = 6;
  if (this->has_voltage()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *voltage_);
  }

  // .bosdyn.api.BatteryState.Status status = 8;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatteryState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.BatteryState)
  GOOGLE_DCHECK_NE(&from, this);
  const BatteryState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BatteryState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.BatteryState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.BatteryState)
    MergeFrom(*source);
  }
}

void BatteryState::MergeFrom(const BatteryState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.BatteryState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  temperatures_.MergeFrom(from.temperatures_);
  if (from.identifier().size() > 0) {
    _internal_set_identifier(from._internal_identifier());
  }
  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from.has_charge_percentage()) {
    _internal_mutable_charge_percentage()->PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from._internal_charge_percentage());
  }
  if (from.has_estimated_runtime()) {
    _internal_mutable_estimated_runtime()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_estimated_runtime());
  }
  if (from.has_current()) {
    _internal_mutable_current()->PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from._internal_current());
  }
  if (from.has_voltage()) {
    _internal_mutable_voltage()->PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from._internal_voltage());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void BatteryState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.BatteryState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatteryState::CopyFrom(const BatteryState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.BatteryState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatteryState::IsInitialized() const {
  return true;
}

void BatteryState::InternalSwap(BatteryState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  temperatures_.InternalSwap(&other->temperatures_);
  identifier_.Swap(&other->identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BatteryState, status_)
      + sizeof(BatteryState::status_)
      - PROTOBUF_FIELD_OFFSET(BatteryState, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BatteryState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KinematicState::InitAsDefaultInstance() {
  ::bosdyn::api::_KinematicState_default_instance_._instance.get_mutable()->acquisition_timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::bosdyn::api::_KinematicState_default_instance_._instance.get_mutable()->transforms_snapshot_ = const_cast< ::bosdyn::api::FrameTreeSnapshot*>(
      ::bosdyn::api::FrameTreeSnapshot::internal_default_instance());
  ::bosdyn::api::_KinematicState_default_instance_._instance.get_mutable()->velocity_of_body_in_vision_ = const_cast< ::bosdyn::api::SE3Velocity*>(
      ::bosdyn::api::SE3Velocity::internal_default_instance());
  ::bosdyn::api::_KinematicState_default_instance_._instance.get_mutable()->velocity_of_body_in_odom_ = const_cast< ::bosdyn::api::SE3Velocity*>(
      ::bosdyn::api::SE3Velocity::internal_default_instance());
}
class KinematicState::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& acquisition_timestamp(const KinematicState* msg);
  static const ::bosdyn::api::FrameTreeSnapshot& transforms_snapshot(const KinematicState* msg);
  static const ::bosdyn::api::SE3Velocity& velocity_of_body_in_vision(const KinematicState* msg);
  static const ::bosdyn::api::SE3Velocity& velocity_of_body_in_odom(const KinematicState* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
KinematicState::_Internal::acquisition_timestamp(const KinematicState* msg) {
  return *msg->acquisition_timestamp_;
}
const ::bosdyn::api::FrameTreeSnapshot&
KinematicState::_Internal::transforms_snapshot(const KinematicState* msg) {
  return *msg->transforms_snapshot_;
}
const ::bosdyn::api::SE3Velocity&
KinematicState::_Internal::velocity_of_body_in_vision(const KinematicState* msg) {
  return *msg->velocity_of_body_in_vision_;
}
const ::bosdyn::api::SE3Velocity&
KinematicState::_Internal::velocity_of_body_in_odom(const KinematicState* msg) {
  return *msg->velocity_of_body_in_odom_;
}
void KinematicState::clear_acquisition_timestamp() {
  if (GetArena() == nullptr && acquisition_timestamp_ != nullptr) {
    delete acquisition_timestamp_;
  }
  acquisition_timestamp_ = nullptr;
}
void KinematicState::clear_transforms_snapshot() {
  if (GetArena() == nullptr && transforms_snapshot_ != nullptr) {
    delete transforms_snapshot_;
  }
  transforms_snapshot_ = nullptr;
}
void KinematicState::clear_velocity_of_body_in_vision() {
  if (GetArena() == nullptr && velocity_of_body_in_vision_ != nullptr) {
    delete velocity_of_body_in_vision_;
  }
  velocity_of_body_in_vision_ = nullptr;
}
void KinematicState::clear_velocity_of_body_in_odom() {
  if (GetArena() == nullptr && velocity_of_body_in_odom_ != nullptr) {
    delete velocity_of_body_in_odom_;
  }
  velocity_of_body_in_odom_ = nullptr;
}
KinematicState::KinematicState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  joint_states_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.KinematicState)
}
KinematicState::KinematicState(const KinematicState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      joint_states_(from.joint_states_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_velocity_of_body_in_vision()) {
    velocity_of_body_in_vision_ = new ::bosdyn::api::SE3Velocity(*from.velocity_of_body_in_vision_);
  } else {
    velocity_of_body_in_vision_ = nullptr;
  }
  if (from._internal_has_velocity_of_body_in_odom()) {
    velocity_of_body_in_odom_ = new ::bosdyn::api::SE3Velocity(*from.velocity_of_body_in_odom_);
  } else {
    velocity_of_body_in_odom_ = nullptr;
  }
  if (from._internal_has_acquisition_timestamp()) {
    acquisition_timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.acquisition_timestamp_);
  } else {
    acquisition_timestamp_ = nullptr;
  }
  if (from._internal_has_transforms_snapshot()) {
    transforms_snapshot_ = new ::bosdyn::api::FrameTreeSnapshot(*from.transforms_snapshot_);
  } else {
    transforms_snapshot_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.KinematicState)
}

void KinematicState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KinematicState_bosdyn_2fapi_2frobot_5fstate_2eproto.base);
  ::memset(&velocity_of_body_in_vision_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transforms_snapshot_) -
      reinterpret_cast<char*>(&velocity_of_body_in_vision_)) + sizeof(transforms_snapshot_));
}

KinematicState::~KinematicState() {
  // @@protoc_insertion_point(destructor:bosdyn.api.KinematicState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KinematicState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete velocity_of_body_in_vision_;
  if (this != internal_default_instance()) delete velocity_of_body_in_odom_;
  if (this != internal_default_instance()) delete acquisition_timestamp_;
  if (this != internal_default_instance()) delete transforms_snapshot_;
}

void KinematicState::ArenaDtor(void* object) {
  KinematicState* _this = reinterpret_cast< KinematicState* >(object);
  (void)_this;
}
void KinematicState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KinematicState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KinematicState& KinematicState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KinematicState_bosdyn_2fapi_2frobot_5fstate_2eproto.base);
  return *internal_default_instance();
}


void KinematicState::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.KinematicState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  joint_states_.Clear();
  if (GetArena() == nullptr && velocity_of_body_in_vision_ != nullptr) {
    delete velocity_of_body_in_vision_;
  }
  velocity_of_body_in_vision_ = nullptr;
  if (GetArena() == nullptr && velocity_of_body_in_odom_ != nullptr) {
    delete velocity_of_body_in_odom_;
  }
  velocity_of_body_in_odom_ = nullptr;
  if (GetArena() == nullptr && acquisition_timestamp_ != nullptr) {
    delete acquisition_timestamp_;
  }
  acquisition_timestamp_ = nullptr;
  if (GetArena() == nullptr && transforms_snapshot_ != nullptr) {
    delete transforms_snapshot_;
  }
  transforms_snapshot_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KinematicState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bosdyn.api.JointState joint_states = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_joint_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.SE3Velocity velocity_of_body_in_vision = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity_of_body_in_vision(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.SE3Velocity velocity_of_body_in_odom = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity_of_body_in_odom(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp acquisition_timestamp = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_acquisition_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.FrameTreeSnapshot transforms_snapshot = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_transforms_snapshot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KinematicState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.KinematicState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bosdyn.api.JointState joint_states = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_joint_states_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_joint_states(i), target, stream);
  }

  // .bosdyn.api.SE3Velocity velocity_of_body_in_vision = 8;
  if (this->has_velocity_of_body_in_vision()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::velocity_of_body_in_vision(this), target, stream);
  }

  // .bosdyn.api.SE3Velocity velocity_of_body_in_odom = 12;
  if (this->has_velocity_of_body_in_odom()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::velocity_of_body_in_odom(this), target, stream);
  }

  // .google.protobuf.Timestamp acquisition_timestamp = 30;
  if (this->has_acquisition_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::acquisition_timestamp(this), target, stream);
  }

  // .bosdyn.api.FrameTreeSnapshot transforms_snapshot = 31;
  if (this->has_transforms_snapshot()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::transforms_snapshot(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.KinematicState)
  return target;
}

size_t KinematicState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.KinematicState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bosdyn.api.JointState joint_states = 2;
  total_size += 1UL * this->_internal_joint_states_size();
  for (const auto& msg : this->joint_states_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .bosdyn.api.SE3Velocity velocity_of_body_in_vision = 8;
  if (this->has_velocity_of_body_in_vision()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *velocity_of_body_in_vision_);
  }

  // .bosdyn.api.SE3Velocity velocity_of_body_in_odom = 12;
  if (this->has_velocity_of_body_in_odom()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *velocity_of_body_in_odom_);
  }

  // .google.protobuf.Timestamp acquisition_timestamp = 30;
  if (this->has_acquisition_timestamp()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *acquisition_timestamp_);
  }

  // .bosdyn.api.FrameTreeSnapshot transforms_snapshot = 31;
  if (this->has_transforms_snapshot()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transforms_snapshot_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KinematicState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.KinematicState)
  GOOGLE_DCHECK_NE(&from, this);
  const KinematicState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KinematicState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.KinematicState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.KinematicState)
    MergeFrom(*source);
  }
}

void KinematicState::MergeFrom(const KinematicState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.KinematicState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  joint_states_.MergeFrom(from.joint_states_);
  if (from.has_velocity_of_body_in_vision()) {
    _internal_mutable_velocity_of_body_in_vision()->::bosdyn::api::SE3Velocity::MergeFrom(from._internal_velocity_of_body_in_vision());
  }
  if (from.has_velocity_of_body_in_odom()) {
    _internal_mutable_velocity_of_body_in_odom()->::bosdyn::api::SE3Velocity::MergeFrom(from._internal_velocity_of_body_in_odom());
  }
  if (from.has_acquisition_timestamp()) {
    _internal_mutable_acquisition_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_acquisition_timestamp());
  }
  if (from.has_transforms_snapshot()) {
    _internal_mutable_transforms_snapshot()->::bosdyn::api::FrameTreeSnapshot::MergeFrom(from._internal_transforms_snapshot());
  }
}

void KinematicState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.KinematicState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KinematicState::CopyFrom(const KinematicState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.KinematicState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KinematicState::IsInitialized() const {
  return true;
}

void KinematicState::InternalSwap(KinematicState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  joint_states_.InternalSwap(&other->joint_states_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KinematicState, transforms_snapshot_)
      + sizeof(KinematicState::transforms_snapshot_)
      - PROTOBUF_FIELD_OFFSET(KinematicState, velocity_of_body_in_vision_)>(
          reinterpret_cast<char*>(&velocity_of_body_in_vision_),
          reinterpret_cast<char*>(&other->velocity_of_body_in_vision_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KinematicState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JointState::InitAsDefaultInstance() {
  ::bosdyn::api::_JointState_default_instance_._instance.get_mutable()->position_ = const_cast< PROTOBUF_NAMESPACE_ID::DoubleValue*>(
      PROTOBUF_NAMESPACE_ID::DoubleValue::internal_default_instance());
  ::bosdyn::api::_JointState_default_instance_._instance.get_mutable()->velocity_ = const_cast< PROTOBUF_NAMESPACE_ID::DoubleValue*>(
      PROTOBUF_NAMESPACE_ID::DoubleValue::internal_default_instance());
  ::bosdyn::api::_JointState_default_instance_._instance.get_mutable()->acceleration_ = const_cast< PROTOBUF_NAMESPACE_ID::DoubleValue*>(
      PROTOBUF_NAMESPACE_ID::DoubleValue::internal_default_instance());
  ::bosdyn::api::_JointState_default_instance_._instance.get_mutable()->load_ = const_cast< PROTOBUF_NAMESPACE_ID::DoubleValue*>(
      PROTOBUF_NAMESPACE_ID::DoubleValue::internal_default_instance());
}
class JointState::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::DoubleValue& position(const JointState* msg);
  static const PROTOBUF_NAMESPACE_ID::DoubleValue& velocity(const JointState* msg);
  static const PROTOBUF_NAMESPACE_ID::DoubleValue& acceleration(const JointState* msg);
  static const PROTOBUF_NAMESPACE_ID::DoubleValue& load(const JointState* msg);
};

const PROTOBUF_NAMESPACE_ID::DoubleValue&
JointState::_Internal::position(const JointState* msg) {
  return *msg->position_;
}
const PROTOBUF_NAMESPACE_ID::DoubleValue&
JointState::_Internal::velocity(const JointState* msg) {
  return *msg->velocity_;
}
const PROTOBUF_NAMESPACE_ID::DoubleValue&
JointState::_Internal::acceleration(const JointState* msg) {
  return *msg->acceleration_;
}
const PROTOBUF_NAMESPACE_ID::DoubleValue&
JointState::_Internal::load(const JointState* msg) {
  return *msg->load_;
}
void JointState::clear_position() {
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
void JointState::clear_velocity() {
  if (GetArena() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
}
void JointState::clear_acceleration() {
  if (GetArena() == nullptr && acceleration_ != nullptr) {
    delete acceleration_;
  }
  acceleration_ = nullptr;
}
void JointState::clear_load() {
  if (GetArena() == nullptr && load_ != nullptr) {
    delete load_;
  }
  load_ = nullptr;
}
JointState::JointState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.JointState)
}
JointState::JointState(const JointState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_position()) {
    position_ = new PROTOBUF_NAMESPACE_ID::DoubleValue(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_velocity()) {
    velocity_ = new PROTOBUF_NAMESPACE_ID::DoubleValue(*from.velocity_);
  } else {
    velocity_ = nullptr;
  }
  if (from._internal_has_acceleration()) {
    acceleration_ = new PROTOBUF_NAMESPACE_ID::DoubleValue(*from.acceleration_);
  } else {
    acceleration_ = nullptr;
  }
  if (from._internal_has_load()) {
    load_ = new PROTOBUF_NAMESPACE_ID::DoubleValue(*from.load_);
  } else {
    load_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.JointState)
}

void JointState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JointState_bosdyn_2fapi_2frobot_5fstate_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&load_) -
      reinterpret_cast<char*>(&position_)) + sizeof(load_));
}

JointState::~JointState() {
  // @@protoc_insertion_point(destructor:bosdyn.api.JointState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JointState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete velocity_;
  if (this != internal_default_instance()) delete acceleration_;
  if (this != internal_default_instance()) delete load_;
}

void JointState::ArenaDtor(void* object) {
  JointState* _this = reinterpret_cast< JointState* >(object);
  (void)_this;
}
void JointState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JointState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JointState& JointState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JointState_bosdyn_2fapi_2frobot_5fstate_2eproto.base);
  return *internal_default_instance();
}


void JointState::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.JointState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArena() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
  if (GetArena() == nullptr && acceleration_ != nullptr) {
    delete acceleration_;
  }
  acceleration_ = nullptr;
  if (GetArena() == nullptr && load_ != nullptr) {
    delete load_;
  }
  load_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JointState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.JointState.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue velocity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue acceleration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_acceleration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue load = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_load(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JointState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.JointState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.JointState.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .google.protobuf.DoubleValue position = 2;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position(this), target, stream);
  }

  // .google.protobuf.DoubleValue velocity = 3;
  if (this->has_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::velocity(this), target, stream);
  }

  // .google.protobuf.DoubleValue acceleration = 4;
  if (this->has_acceleration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::acceleration(this), target, stream);
  }

  // .google.protobuf.DoubleValue load = 5;
  if (this->has_load()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::load(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.JointState)
  return target;
}

size_t JointState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.JointState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.protobuf.DoubleValue position = 2;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .google.protobuf.DoubleValue velocity = 3;
  if (this->has_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *velocity_);
  }

  // .google.protobuf.DoubleValue acceleration = 4;
  if (this->has_acceleration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *acceleration_);
  }

  // .google.protobuf.DoubleValue load = 5;
  if (this->has_load()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *load_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JointState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.JointState)
  GOOGLE_DCHECK_NE(&from, this);
  const JointState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JointState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.JointState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.JointState)
    MergeFrom(*source);
  }
}

void JointState::MergeFrom(const JointState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.JointState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_position()) {
    _internal_mutable_position()->PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from._internal_position());
  }
  if (from.has_velocity()) {
    _internal_mutable_velocity()->PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from._internal_velocity());
  }
  if (from.has_acceleration()) {
    _internal_mutable_acceleration()->PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from._internal_acceleration());
  }
  if (from.has_load()) {
    _internal_mutable_load()->PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from._internal_load());
  }
}

void JointState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.JointState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JointState::CopyFrom(const JointState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.JointState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointState::IsInitialized() const {
  return true;
}

void JointState::InternalSwap(JointState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JointState, load_)
      + sizeof(JointState::load_)
      - PROTOBUF_FIELD_OFFSET(JointState, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JointState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BehaviorFaultState::InitAsDefaultInstance() {
}
class BehaviorFaultState::_Internal {
 public:
};

BehaviorFaultState::BehaviorFaultState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  faults_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.BehaviorFaultState)
}
BehaviorFaultState::BehaviorFaultState(const BehaviorFaultState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      faults_(from.faults_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.BehaviorFaultState)
}

void BehaviorFaultState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BehaviorFaultState_bosdyn_2fapi_2frobot_5fstate_2eproto.base);
}

BehaviorFaultState::~BehaviorFaultState() {
  // @@protoc_insertion_point(destructor:bosdyn.api.BehaviorFaultState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BehaviorFaultState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BehaviorFaultState::ArenaDtor(void* object) {
  BehaviorFaultState* _this = reinterpret_cast< BehaviorFaultState* >(object);
  (void)_this;
}
void BehaviorFaultState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BehaviorFaultState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BehaviorFaultState& BehaviorFaultState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BehaviorFaultState_bosdyn_2fapi_2frobot_5fstate_2eproto.base);
  return *internal_default_instance();
}


void BehaviorFaultState::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.BehaviorFaultState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  faults_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BehaviorFaultState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bosdyn.api.BehaviorFault faults = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_faults(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BehaviorFaultState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.BehaviorFaultState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bosdyn.api.BehaviorFault faults = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_faults_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_faults(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.BehaviorFaultState)
  return target;
}

size_t BehaviorFaultState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.BehaviorFaultState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bosdyn.api.BehaviorFault faults = 1;
  total_size += 1UL * this->_internal_faults_size();
  for (const auto& msg : this->faults_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BehaviorFaultState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.BehaviorFaultState)
  GOOGLE_DCHECK_NE(&from, this);
  const BehaviorFaultState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BehaviorFaultState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.BehaviorFaultState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.BehaviorFaultState)
    MergeFrom(*source);
  }
}

void BehaviorFaultState::MergeFrom(const BehaviorFaultState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.BehaviorFaultState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  faults_.MergeFrom(from.faults_);
}

void BehaviorFaultState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.BehaviorFaultState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BehaviorFaultState::CopyFrom(const BehaviorFaultState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.BehaviorFaultState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BehaviorFaultState::IsInitialized() const {
  return true;
}

void BehaviorFaultState::InternalSwap(BehaviorFaultState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  faults_.InternalSwap(&other->faults_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BehaviorFaultState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BehaviorFault::InitAsDefaultInstance() {
  ::bosdyn::api::_BehaviorFault_default_instance_._instance.get_mutable()->onset_timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class BehaviorFault::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& onset_timestamp(const BehaviorFault* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
BehaviorFault::_Internal::onset_timestamp(const BehaviorFault* msg) {
  return *msg->onset_timestamp_;
}
void BehaviorFault::clear_onset_timestamp() {
  if (GetArena() == nullptr && onset_timestamp_ != nullptr) {
    delete onset_timestamp_;
  }
  onset_timestamp_ = nullptr;
}
BehaviorFault::BehaviorFault(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.BehaviorFault)
}
BehaviorFault::BehaviorFault(const BehaviorFault& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_onset_timestamp()) {
    onset_timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.onset_timestamp_);
  } else {
    onset_timestamp_ = nullptr;
  }
  ::memcpy(&behavior_fault_id_, &from.behavior_fault_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&behavior_fault_id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.BehaviorFault)
}

void BehaviorFault::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BehaviorFault_bosdyn_2fapi_2frobot_5fstate_2eproto.base);
  ::memset(&onset_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&onset_timestamp_)) + sizeof(status_));
}

BehaviorFault::~BehaviorFault() {
  // @@protoc_insertion_point(destructor:bosdyn.api.BehaviorFault)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BehaviorFault::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete onset_timestamp_;
}

void BehaviorFault::ArenaDtor(void* object) {
  BehaviorFault* _this = reinterpret_cast< BehaviorFault* >(object);
  (void)_this;
}
void BehaviorFault::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BehaviorFault::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BehaviorFault& BehaviorFault::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BehaviorFault_bosdyn_2fapi_2frobot_5fstate_2eproto.base);
  return *internal_default_instance();
}


void BehaviorFault::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.BehaviorFault)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && onset_timestamp_ != nullptr) {
    delete onset_timestamp_;
  }
  onset_timestamp_ = nullptr;
  ::memset(&behavior_fault_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&behavior_fault_id_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BehaviorFault::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 behavior_fault_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          behavior_fault_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp onset_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_onset_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.BehaviorFault.Cause cause = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cause(static_cast<::bosdyn::api::BehaviorFault_Cause>(val));
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.BehaviorFault.Status status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::bosdyn::api::BehaviorFault_Status>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BehaviorFault::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.BehaviorFault)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 behavior_fault_id = 1;
  if (this->behavior_fault_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_behavior_fault_id(), target);
  }

  // .google.protobuf.Timestamp onset_timestamp = 2;
  if (this->has_onset_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::onset_timestamp(this), target, stream);
  }

  // .bosdyn.api.BehaviorFault.Cause cause = 3;
  if (this->cause() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_cause(), target);
  }

  // .bosdyn.api.BehaviorFault.Status status = 4;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.BehaviorFault)
  return target;
}

size_t BehaviorFault::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.BehaviorFault)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp onset_timestamp = 2;
  if (this->has_onset_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *onset_timestamp_);
  }

  // uint32 behavior_fault_id = 1;
  if (this->behavior_fault_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_behavior_fault_id());
  }

  // .bosdyn.api.BehaviorFault.Cause cause = 3;
  if (this->cause() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cause());
  }

  // .bosdyn.api.BehaviorFault.Status status = 4;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BehaviorFault::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.BehaviorFault)
  GOOGLE_DCHECK_NE(&from, this);
  const BehaviorFault* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BehaviorFault>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.BehaviorFault)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.BehaviorFault)
    MergeFrom(*source);
  }
}

void BehaviorFault::MergeFrom(const BehaviorFault& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.BehaviorFault)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_onset_timestamp()) {
    _internal_mutable_onset_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_onset_timestamp());
  }
  if (from.behavior_fault_id() != 0) {
    _internal_set_behavior_fault_id(from._internal_behavior_fault_id());
  }
  if (from.cause() != 0) {
    _internal_set_cause(from._internal_cause());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void BehaviorFault::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.BehaviorFault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BehaviorFault::CopyFrom(const BehaviorFault& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.BehaviorFault)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BehaviorFault::IsInitialized() const {
  return true;
}

void BehaviorFault::InternalSwap(BehaviorFault* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BehaviorFault, status_)
      + sizeof(BehaviorFault::status_)
      - PROTOBUF_FIELD_OFFSET(BehaviorFault, onset_timestamp_)>(
          reinterpret_cast<char*>(&onset_timestamp_),
          reinterpret_cast<char*>(&other->onset_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BehaviorFault::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RobotMetrics::InitAsDefaultInstance() {
  ::bosdyn::api::_RobotMetrics_default_instance_._instance.get_mutable()->timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class RobotMetrics::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const RobotMetrics* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
RobotMetrics::_Internal::timestamp(const RobotMetrics* msg) {
  return *msg->timestamp_;
}
void RobotMetrics::clear_timestamp() {
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
void RobotMetrics::clear_metrics() {
  metrics_.Clear();
}
RobotMetrics::RobotMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  metrics_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.RobotMetrics)
}
RobotMetrics::RobotMetrics(const RobotMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      metrics_(from.metrics_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.RobotMetrics)
}

void RobotMetrics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RobotMetrics_bosdyn_2fapi_2frobot_5fstate_2eproto.base);
  timestamp_ = nullptr;
}

RobotMetrics::~RobotMetrics() {
  // @@protoc_insertion_point(destructor:bosdyn.api.RobotMetrics)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RobotMetrics::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete timestamp_;
}

void RobotMetrics::ArenaDtor(void* object) {
  RobotMetrics* _this = reinterpret_cast< RobotMetrics* >(object);
  (void)_this;
}
void RobotMetrics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RobotMetrics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RobotMetrics& RobotMetrics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RobotMetrics_bosdyn_2fapi_2frobot_5fstate_2eproto.base);
  return *internal_default_instance();
}


void RobotMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.RobotMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metrics_.Clear();
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotMetrics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bosdyn.api.Parameter metrics = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RobotMetrics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.RobotMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::timestamp(this), target, stream);
  }

  // repeated .bosdyn.api.Parameter metrics = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_metrics_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_metrics(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.RobotMetrics)
  return target;
}

size_t RobotMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.RobotMetrics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bosdyn.api.Parameter metrics = 2;
  total_size += 1UL * this->_internal_metrics_size();
  for (const auto& msg : this->metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotMetrics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.RobotMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotMetrics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RobotMetrics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.RobotMetrics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.RobotMetrics)
    MergeFrom(*source);
  }
}

void RobotMetrics::MergeFrom(const RobotMetrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.RobotMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metrics_.MergeFrom(from.metrics_);
  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
}

void RobotMetrics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.RobotMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotMetrics::CopyFrom(const RobotMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.RobotMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotMetrics::IsInitialized() const {
  return true;
}

void RobotMetrics::InternalSwap(RobotMetrics* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  metrics_.InternalSwap(&other->metrics_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotMetrics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CommsState::InitAsDefaultInstance() {
  ::bosdyn::api::_CommsState_default_instance_._instance.get_mutable()->timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::bosdyn::api::_CommsState_default_instance_.wifi_state_ = const_cast< ::bosdyn::api::WiFiState*>(
      ::bosdyn::api::WiFiState::internal_default_instance());
}
class CommsState::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const CommsState* msg);
  static const ::bosdyn::api::WiFiState& wifi_state(const CommsState* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
CommsState::_Internal::timestamp(const CommsState* msg) {
  return *msg->timestamp_;
}
const ::bosdyn::api::WiFiState&
CommsState::_Internal::wifi_state(const CommsState* msg) {
  return *msg->state_.wifi_state_;
}
void CommsState::clear_timestamp() {
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
void CommsState::set_allocated_wifi_state(::bosdyn::api::WiFiState* wifi_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_state();
  if (wifi_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(wifi_state);
    if (message_arena != submessage_arena) {
      wifi_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wifi_state, submessage_arena);
    }
    set_has_wifi_state();
    state_.wifi_state_ = wifi_state;
  }
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.CommsState.wifi_state)
}
CommsState::CommsState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.CommsState)
}
CommsState::CommsState(const CommsState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  clear_has_state();
  switch (from.state_case()) {
    case kWifiState: {
      _internal_mutable_wifi_state()->::bosdyn::api::WiFiState::MergeFrom(from._internal_wifi_state());
      break;
    }
    case STATE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.CommsState)
}

void CommsState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommsState_bosdyn_2fapi_2frobot_5fstate_2eproto.base);
  timestamp_ = nullptr;
  clear_has_state();
}

CommsState::~CommsState() {
  // @@protoc_insertion_point(destructor:bosdyn.api.CommsState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommsState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete timestamp_;
  if (has_state()) {
    clear_state();
  }
}

void CommsState::ArenaDtor(void* object) {
  CommsState* _this = reinterpret_cast< CommsState* >(object);
  (void)_this;
}
void CommsState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommsState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommsState& CommsState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommsState_bosdyn_2fapi_2frobot_5fstate_2eproto.base);
  return *internal_default_instance();
}


void CommsState::clear_state() {
// @@protoc_insertion_point(one_of_clear_start:bosdyn.api.CommsState)
  switch (state_case()) {
    case kWifiState: {
      if (GetArena() == nullptr) {
        delete state_.wifi_state_;
      }
      break;
    }
    case STATE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STATE_NOT_SET;
}


void CommsState::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.CommsState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  clear_state();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommsState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.WiFiState wifi_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_wifi_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommsState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.CommsState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::timestamp(this), target, stream);
  }

  // .bosdyn.api.WiFiState wifi_state = 2;
  if (_internal_has_wifi_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::wifi_state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.CommsState)
  return target;
}

size_t CommsState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.CommsState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  switch (state_case()) {
    // .bosdyn.api.WiFiState wifi_state = 2;
    case kWifiState: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *state_.wifi_state_);
      break;
    }
    case STATE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommsState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.CommsState)
  GOOGLE_DCHECK_NE(&from, this);
  const CommsState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommsState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.CommsState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.CommsState)
    MergeFrom(*source);
  }
}

void CommsState::MergeFrom(const CommsState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.CommsState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  switch (from.state_case()) {
    case kWifiState: {
      _internal_mutable_wifi_state()->::bosdyn::api::WiFiState::MergeFrom(from._internal_wifi_state());
      break;
    }
    case STATE_NOT_SET: {
      break;
    }
  }
}

void CommsState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.CommsState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommsState::CopyFrom(const CommsState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.CommsState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommsState::IsInitialized() const {
  return true;
}

void CommsState::InternalSwap(CommsState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(timestamp_, other->timestamp_);
  swap(state_, other->state_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommsState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WiFiState::InitAsDefaultInstance() {
}
class WiFiState::_Internal {
 public:
};

WiFiState::WiFiState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.WiFiState)
}
WiFiState::WiFiState(const WiFiState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  essid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_essid().empty()) {
    essid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_essid(),
      GetArena());
  }
  current_mode_ = from.current_mode_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.WiFiState)
}

void WiFiState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WiFiState_bosdyn_2fapi_2frobot_5fstate_2eproto.base);
  essid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  current_mode_ = 0;
}

WiFiState::~WiFiState() {
  // @@protoc_insertion_point(destructor:bosdyn.api.WiFiState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WiFiState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  essid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WiFiState::ArenaDtor(void* object) {
  WiFiState* _this = reinterpret_cast< WiFiState* >(object);
  (void)_this;
}
void WiFiState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WiFiState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WiFiState& WiFiState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WiFiState_bosdyn_2fapi_2frobot_5fstate_2eproto.base);
  return *internal_default_instance();
}


void WiFiState::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.WiFiState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  essid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  current_mode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WiFiState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.WiFiState.Mode current_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_current_mode(static_cast<::bosdyn::api::WiFiState_Mode>(val));
        } else goto handle_unusual;
        continue;
      // string essid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_essid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.WiFiState.essid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WiFiState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.WiFiState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.WiFiState.Mode current_mode = 1;
  if (this->current_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_current_mode(), target);
  }

  // string essid = 2;
  if (this->essid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_essid().data(), static_cast<int>(this->_internal_essid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.WiFiState.essid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_essid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.WiFiState)
  return target;
}

size_t WiFiState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.WiFiState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string essid = 2;
  if (this->essid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_essid());
  }

  // .bosdyn.api.WiFiState.Mode current_mode = 1;
  if (this->current_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_current_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WiFiState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.WiFiState)
  GOOGLE_DCHECK_NE(&from, this);
  const WiFiState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WiFiState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.WiFiState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.WiFiState)
    MergeFrom(*source);
  }
}

void WiFiState::MergeFrom(const WiFiState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.WiFiState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.essid().size() > 0) {
    _internal_set_essid(from._internal_essid());
  }
  if (from.current_mode() != 0) {
    _internal_set_current_mode(from._internal_current_mode());
  }
}

void WiFiState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.WiFiState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WiFiState::CopyFrom(const WiFiState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.WiFiState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WiFiState::IsInitialized() const {
  return true;
}

void WiFiState::InternalSwap(WiFiState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  essid_.Swap(&other->essid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(current_mode_, other->current_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WiFiState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FootState::InitAsDefaultInstance() {
  ::bosdyn::api::_FootState_default_instance_._instance.get_mutable()->foot_position_rt_body_ = const_cast< ::bosdyn::api::Vec3*>(
      ::bosdyn::api::Vec3::internal_default_instance());
}
class FootState::_Internal {
 public:
  static const ::bosdyn::api::Vec3& foot_position_rt_body(const FootState* msg);
};

const ::bosdyn::api::Vec3&
FootState::_Internal::foot_position_rt_body(const FootState* msg) {
  return *msg->foot_position_rt_body_;
}
void FootState::clear_foot_position_rt_body() {
  if (GetArena() == nullptr && foot_position_rt_body_ != nullptr) {
    delete foot_position_rt_body_;
  }
  foot_position_rt_body_ = nullptr;
}
FootState::FootState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.FootState)
}
FootState::FootState(const FootState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_foot_position_rt_body()) {
    foot_position_rt_body_ = new ::bosdyn::api::Vec3(*from.foot_position_rt_body_);
  } else {
    foot_position_rt_body_ = nullptr;
  }
  contact_ = from.contact_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.FootState)
}

void FootState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FootState_bosdyn_2fapi_2frobot_5fstate_2eproto.base);
  ::memset(&foot_position_rt_body_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&contact_) -
      reinterpret_cast<char*>(&foot_position_rt_body_)) + sizeof(contact_));
}

FootState::~FootState() {
  // @@protoc_insertion_point(destructor:bosdyn.api.FootState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FootState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete foot_position_rt_body_;
}

void FootState::ArenaDtor(void* object) {
  FootState* _this = reinterpret_cast< FootState* >(object);
  (void)_this;
}
void FootState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FootState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FootState& FootState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FootState_bosdyn_2fapi_2frobot_5fstate_2eproto.base);
  return *internal_default_instance();
}


void FootState::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.FootState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && foot_position_rt_body_ != nullptr) {
    delete foot_position_rt_body_;
  }
  foot_position_rt_body_ = nullptr;
  contact_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FootState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.Vec3 foot_position_rt_body = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_foot_position_rt_body(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.FootState.Contact contact = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_contact(static_cast<::bosdyn::api::FootState_Contact>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FootState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.FootState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.Vec3 foot_position_rt_body = 1;
  if (this->has_foot_position_rt_body()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::foot_position_rt_body(this), target, stream);
  }

  // .bosdyn.api.FootState.Contact contact = 2;
  if (this->contact() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_contact(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.FootState)
  return target;
}

size_t FootState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.FootState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.Vec3 foot_position_rt_body = 1;
  if (this->has_foot_position_rt_body()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *foot_position_rt_body_);
  }

  // .bosdyn.api.FootState.Contact contact = 2;
  if (this->contact() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_contact());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FootState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.FootState)
  GOOGLE_DCHECK_NE(&from, this);
  const FootState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FootState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.FootState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.FootState)
    MergeFrom(*source);
  }
}

void FootState::MergeFrom(const FootState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.FootState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_foot_position_rt_body()) {
    _internal_mutable_foot_position_rt_body()->::bosdyn::api::Vec3::MergeFrom(from._internal_foot_position_rt_body());
  }
  if (from.contact() != 0) {
    _internal_set_contact(from._internal_contact());
  }
}

void FootState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.FootState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FootState::CopyFrom(const FootState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.FootState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FootState::IsInitialized() const {
  return true;
}

void FootState::InternalSwap(FootState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FootState, contact_)
      + sizeof(FootState::contact_)
      - PROTOBUF_FIELD_OFFSET(FootState, foot_position_rt_body_)>(
          reinterpret_cast<char*>(&foot_position_rt_body_),
          reinterpret_cast<char*>(&other->foot_position_rt_body_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FootState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RobotStateRequest::InitAsDefaultInstance() {
  ::bosdyn::api::_RobotStateRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
}
class RobotStateRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const RobotStateRequest* msg);
};

const ::bosdyn::api::RequestHeader&
RobotStateRequest::_Internal::header(const RobotStateRequest* msg) {
  return *msg->header_;
}
void RobotStateRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
RobotStateRequest::RobotStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.RobotStateRequest)
}
RobotStateRequest::RobotStateRequest(const RobotStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.RobotStateRequest)
}

void RobotStateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RobotStateRequest_bosdyn_2fapi_2frobot_5fstate_2eproto.base);
  header_ = nullptr;
}

RobotStateRequest::~RobotStateRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.RobotStateRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RobotStateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void RobotStateRequest::ArenaDtor(void* object) {
  RobotStateRequest* _this = reinterpret_cast< RobotStateRequest* >(object);
  (void)_this;
}
void RobotStateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RobotStateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RobotStateRequest& RobotStateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RobotStateRequest_bosdyn_2fapi_2frobot_5fstate_2eproto.base);
  return *internal_default_instance();
}


void RobotStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.RobotStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotStateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RobotStateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.RobotStateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.RobotStateRequest)
  return target;
}

size_t RobotStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.RobotStateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotStateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.RobotStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotStateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RobotStateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.RobotStateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.RobotStateRequest)
    MergeFrom(*source);
  }
}

void RobotStateRequest::MergeFrom(const RobotStateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.RobotStateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
}

void RobotStateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.RobotStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotStateRequest::CopyFrom(const RobotStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.RobotStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotStateRequest::IsInitialized() const {
  return true;
}

void RobotStateRequest::InternalSwap(RobotStateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotStateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RobotStateResponse::InitAsDefaultInstance() {
  ::bosdyn::api::_RobotStateResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
  ::bosdyn::api::_RobotStateResponse_default_instance_._instance.get_mutable()->robot_state_ = const_cast< ::bosdyn::api::RobotState*>(
      ::bosdyn::api::RobotState::internal_default_instance());
}
class RobotStateResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const RobotStateResponse* msg);
  static const ::bosdyn::api::RobotState& robot_state(const RobotStateResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
RobotStateResponse::_Internal::header(const RobotStateResponse* msg) {
  return *msg->header_;
}
const ::bosdyn::api::RobotState&
RobotStateResponse::_Internal::robot_state(const RobotStateResponse* msg) {
  return *msg->robot_state_;
}
void RobotStateResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
RobotStateResponse::RobotStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.RobotStateResponse)
}
RobotStateResponse::RobotStateResponse(const RobotStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_robot_state()) {
    robot_state_ = new ::bosdyn::api::RobotState(*from.robot_state_);
  } else {
    robot_state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.RobotStateResponse)
}

void RobotStateResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RobotStateResponse_bosdyn_2fapi_2frobot_5fstate_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&robot_state_) -
      reinterpret_cast<char*>(&header_)) + sizeof(robot_state_));
}

RobotStateResponse::~RobotStateResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.RobotStateResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RobotStateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete robot_state_;
}

void RobotStateResponse::ArenaDtor(void* object) {
  RobotStateResponse* _this = reinterpret_cast< RobotStateResponse* >(object);
  (void)_this;
}
void RobotStateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RobotStateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RobotStateResponse& RobotStateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RobotStateResponse_bosdyn_2fapi_2frobot_5fstate_2eproto.base);
  return *internal_default_instance();
}


void RobotStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.RobotStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && robot_state_ != nullptr) {
    delete robot_state_;
  }
  robot_state_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotStateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.RobotState robot_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_robot_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RobotStateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.RobotStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.RobotState robot_state = 2;
  if (this->has_robot_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::robot_state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.RobotStateResponse)
  return target;
}

size_t RobotStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.RobotStateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.RobotState robot_state = 2;
  if (this->has_robot_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *robot_state_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotStateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.RobotStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotStateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RobotStateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.RobotStateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.RobotStateResponse)
    MergeFrom(*source);
  }
}

void RobotStateResponse::MergeFrom(const RobotStateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.RobotStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.has_robot_state()) {
    _internal_mutable_robot_state()->::bosdyn::api::RobotState::MergeFrom(from._internal_robot_state());
  }
}

void RobotStateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.RobotStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotStateResponse::CopyFrom(const RobotStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.RobotStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotStateResponse::IsInitialized() const {
  return true;
}

void RobotStateResponse::InternalSwap(RobotStateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RobotStateResponse, robot_state_)
      + sizeof(RobotStateResponse::robot_state_)
      - PROTOBUF_FIELD_OFFSET(RobotStateResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotStateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RobotMetricsRequest::InitAsDefaultInstance() {
  ::bosdyn::api::_RobotMetricsRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
}
class RobotMetricsRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const RobotMetricsRequest* msg);
};

const ::bosdyn::api::RequestHeader&
RobotMetricsRequest::_Internal::header(const RobotMetricsRequest* msg) {
  return *msg->header_;
}
void RobotMetricsRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
RobotMetricsRequest::RobotMetricsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.RobotMetricsRequest)
}
RobotMetricsRequest::RobotMetricsRequest(const RobotMetricsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.RobotMetricsRequest)
}

void RobotMetricsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RobotMetricsRequest_bosdyn_2fapi_2frobot_5fstate_2eproto.base);
  header_ = nullptr;
}

RobotMetricsRequest::~RobotMetricsRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.RobotMetricsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RobotMetricsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void RobotMetricsRequest::ArenaDtor(void* object) {
  RobotMetricsRequest* _this = reinterpret_cast< RobotMetricsRequest* >(object);
  (void)_this;
}
void RobotMetricsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RobotMetricsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RobotMetricsRequest& RobotMetricsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RobotMetricsRequest_bosdyn_2fapi_2frobot_5fstate_2eproto.base);
  return *internal_default_instance();
}


void RobotMetricsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.RobotMetricsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotMetricsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RobotMetricsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.RobotMetricsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.RobotMetricsRequest)
  return target;
}

size_t RobotMetricsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.RobotMetricsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotMetricsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.RobotMetricsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotMetricsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RobotMetricsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.RobotMetricsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.RobotMetricsRequest)
    MergeFrom(*source);
  }
}

void RobotMetricsRequest::MergeFrom(const RobotMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.RobotMetricsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
}

void RobotMetricsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.RobotMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotMetricsRequest::CopyFrom(const RobotMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.RobotMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotMetricsRequest::IsInitialized() const {
  return true;
}

void RobotMetricsRequest::InternalSwap(RobotMetricsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotMetricsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RobotMetricsResponse::InitAsDefaultInstance() {
  ::bosdyn::api::_RobotMetricsResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
  ::bosdyn::api::_RobotMetricsResponse_default_instance_._instance.get_mutable()->robot_metrics_ = const_cast< ::bosdyn::api::RobotMetrics*>(
      ::bosdyn::api::RobotMetrics::internal_default_instance());
}
class RobotMetricsResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const RobotMetricsResponse* msg);
  static const ::bosdyn::api::RobotMetrics& robot_metrics(const RobotMetricsResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
RobotMetricsResponse::_Internal::header(const RobotMetricsResponse* msg) {
  return *msg->header_;
}
const ::bosdyn::api::RobotMetrics&
RobotMetricsResponse::_Internal::robot_metrics(const RobotMetricsResponse* msg) {
  return *msg->robot_metrics_;
}
void RobotMetricsResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
RobotMetricsResponse::RobotMetricsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.RobotMetricsResponse)
}
RobotMetricsResponse::RobotMetricsResponse(const RobotMetricsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_robot_metrics()) {
    robot_metrics_ = new ::bosdyn::api::RobotMetrics(*from.robot_metrics_);
  } else {
    robot_metrics_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.RobotMetricsResponse)
}

void RobotMetricsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RobotMetricsResponse_bosdyn_2fapi_2frobot_5fstate_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&robot_metrics_) -
      reinterpret_cast<char*>(&header_)) + sizeof(robot_metrics_));
}

RobotMetricsResponse::~RobotMetricsResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.RobotMetricsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RobotMetricsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete robot_metrics_;
}

void RobotMetricsResponse::ArenaDtor(void* object) {
  RobotMetricsResponse* _this = reinterpret_cast< RobotMetricsResponse* >(object);
  (void)_this;
}
void RobotMetricsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RobotMetricsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RobotMetricsResponse& RobotMetricsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RobotMetricsResponse_bosdyn_2fapi_2frobot_5fstate_2eproto.base);
  return *internal_default_instance();
}


void RobotMetricsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.RobotMetricsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && robot_metrics_ != nullptr) {
    delete robot_metrics_;
  }
  robot_metrics_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotMetricsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.RobotMetrics robot_metrics = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_robot_metrics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RobotMetricsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.RobotMetricsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.RobotMetrics robot_metrics = 2;
  if (this->has_robot_metrics()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::robot_metrics(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.RobotMetricsResponse)
  return target;
}

size_t RobotMetricsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.RobotMetricsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.RobotMetrics robot_metrics = 2;
  if (this->has_robot_metrics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *robot_metrics_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotMetricsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.RobotMetricsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotMetricsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RobotMetricsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.RobotMetricsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.RobotMetricsResponse)
    MergeFrom(*source);
  }
}

void RobotMetricsResponse::MergeFrom(const RobotMetricsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.RobotMetricsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.has_robot_metrics()) {
    _internal_mutable_robot_metrics()->::bosdyn::api::RobotMetrics::MergeFrom(from._internal_robot_metrics());
  }
}

void RobotMetricsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.RobotMetricsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotMetricsResponse::CopyFrom(const RobotMetricsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.RobotMetricsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotMetricsResponse::IsInitialized() const {
  return true;
}

void RobotMetricsResponse::InternalSwap(RobotMetricsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RobotMetricsResponse, robot_metrics_)
      + sizeof(RobotMetricsResponse::robot_metrics_)
      - PROTOBUF_FIELD_OFFSET(RobotMetricsResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotMetricsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RobotHardwareConfigurationRequest::InitAsDefaultInstance() {
  ::bosdyn::api::_RobotHardwareConfigurationRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
}
class RobotHardwareConfigurationRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const RobotHardwareConfigurationRequest* msg);
};

const ::bosdyn::api::RequestHeader&
RobotHardwareConfigurationRequest::_Internal::header(const RobotHardwareConfigurationRequest* msg) {
  return *msg->header_;
}
void RobotHardwareConfigurationRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
RobotHardwareConfigurationRequest::RobotHardwareConfigurationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.RobotHardwareConfigurationRequest)
}
RobotHardwareConfigurationRequest::RobotHardwareConfigurationRequest(const RobotHardwareConfigurationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.RobotHardwareConfigurationRequest)
}

void RobotHardwareConfigurationRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RobotHardwareConfigurationRequest_bosdyn_2fapi_2frobot_5fstate_2eproto.base);
  header_ = nullptr;
}

RobotHardwareConfigurationRequest::~RobotHardwareConfigurationRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.RobotHardwareConfigurationRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RobotHardwareConfigurationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void RobotHardwareConfigurationRequest::ArenaDtor(void* object) {
  RobotHardwareConfigurationRequest* _this = reinterpret_cast< RobotHardwareConfigurationRequest* >(object);
  (void)_this;
}
void RobotHardwareConfigurationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RobotHardwareConfigurationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RobotHardwareConfigurationRequest& RobotHardwareConfigurationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RobotHardwareConfigurationRequest_bosdyn_2fapi_2frobot_5fstate_2eproto.base);
  return *internal_default_instance();
}


void RobotHardwareConfigurationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.RobotHardwareConfigurationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotHardwareConfigurationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RobotHardwareConfigurationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.RobotHardwareConfigurationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.RobotHardwareConfigurationRequest)
  return target;
}

size_t RobotHardwareConfigurationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.RobotHardwareConfigurationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotHardwareConfigurationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.RobotHardwareConfigurationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotHardwareConfigurationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RobotHardwareConfigurationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.RobotHardwareConfigurationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.RobotHardwareConfigurationRequest)
    MergeFrom(*source);
  }
}

void RobotHardwareConfigurationRequest::MergeFrom(const RobotHardwareConfigurationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.RobotHardwareConfigurationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
}

void RobotHardwareConfigurationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.RobotHardwareConfigurationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotHardwareConfigurationRequest::CopyFrom(const RobotHardwareConfigurationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.RobotHardwareConfigurationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotHardwareConfigurationRequest::IsInitialized() const {
  return true;
}

void RobotHardwareConfigurationRequest::InternalSwap(RobotHardwareConfigurationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotHardwareConfigurationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RobotHardwareConfigurationResponse::InitAsDefaultInstance() {
  ::bosdyn::api::_RobotHardwareConfigurationResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
  ::bosdyn::api::_RobotHardwareConfigurationResponse_default_instance_._instance.get_mutable()->hardware_configuration_ = const_cast< ::bosdyn::api::HardwareConfiguration*>(
      ::bosdyn::api::HardwareConfiguration::internal_default_instance());
}
class RobotHardwareConfigurationResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const RobotHardwareConfigurationResponse* msg);
  static const ::bosdyn::api::HardwareConfiguration& hardware_configuration(const RobotHardwareConfigurationResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
RobotHardwareConfigurationResponse::_Internal::header(const RobotHardwareConfigurationResponse* msg) {
  return *msg->header_;
}
const ::bosdyn::api::HardwareConfiguration&
RobotHardwareConfigurationResponse::_Internal::hardware_configuration(const RobotHardwareConfigurationResponse* msg) {
  return *msg->hardware_configuration_;
}
void RobotHardwareConfigurationResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
RobotHardwareConfigurationResponse::RobotHardwareConfigurationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.RobotHardwareConfigurationResponse)
}
RobotHardwareConfigurationResponse::RobotHardwareConfigurationResponse(const RobotHardwareConfigurationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_hardware_configuration()) {
    hardware_configuration_ = new ::bosdyn::api::HardwareConfiguration(*from.hardware_configuration_);
  } else {
    hardware_configuration_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.RobotHardwareConfigurationResponse)
}

void RobotHardwareConfigurationResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RobotHardwareConfigurationResponse_bosdyn_2fapi_2frobot_5fstate_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hardware_configuration_) -
      reinterpret_cast<char*>(&header_)) + sizeof(hardware_configuration_));
}

RobotHardwareConfigurationResponse::~RobotHardwareConfigurationResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.RobotHardwareConfigurationResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RobotHardwareConfigurationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete hardware_configuration_;
}

void RobotHardwareConfigurationResponse::ArenaDtor(void* object) {
  RobotHardwareConfigurationResponse* _this = reinterpret_cast< RobotHardwareConfigurationResponse* >(object);
  (void)_this;
}
void RobotHardwareConfigurationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RobotHardwareConfigurationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RobotHardwareConfigurationResponse& RobotHardwareConfigurationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RobotHardwareConfigurationResponse_bosdyn_2fapi_2frobot_5fstate_2eproto.base);
  return *internal_default_instance();
}


void RobotHardwareConfigurationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.RobotHardwareConfigurationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && hardware_configuration_ != nullptr) {
    delete hardware_configuration_;
  }
  hardware_configuration_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotHardwareConfigurationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.HardwareConfiguration hardware_configuration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_hardware_configuration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RobotHardwareConfigurationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.RobotHardwareConfigurationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.HardwareConfiguration hardware_configuration = 2;
  if (this->has_hardware_configuration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::hardware_configuration(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.RobotHardwareConfigurationResponse)
  return target;
}

size_t RobotHardwareConfigurationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.RobotHardwareConfigurationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.HardwareConfiguration hardware_configuration = 2;
  if (this->has_hardware_configuration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hardware_configuration_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotHardwareConfigurationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.RobotHardwareConfigurationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotHardwareConfigurationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RobotHardwareConfigurationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.RobotHardwareConfigurationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.RobotHardwareConfigurationResponse)
    MergeFrom(*source);
  }
}

void RobotHardwareConfigurationResponse::MergeFrom(const RobotHardwareConfigurationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.RobotHardwareConfigurationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.has_hardware_configuration()) {
    _internal_mutable_hardware_configuration()->::bosdyn::api::HardwareConfiguration::MergeFrom(from._internal_hardware_configuration());
  }
}

void RobotHardwareConfigurationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.RobotHardwareConfigurationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotHardwareConfigurationResponse::CopyFrom(const RobotHardwareConfigurationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.RobotHardwareConfigurationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotHardwareConfigurationResponse::IsInitialized() const {
  return true;
}

void RobotHardwareConfigurationResponse::InternalSwap(RobotHardwareConfigurationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RobotHardwareConfigurationResponse, hardware_configuration_)
      + sizeof(RobotHardwareConfigurationResponse::hardware_configuration_)
      - PROTOBUF_FIELD_OFFSET(RobotHardwareConfigurationResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotHardwareConfigurationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RobotLinkModelRequest::InitAsDefaultInstance() {
  ::bosdyn::api::_RobotLinkModelRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
}
class RobotLinkModelRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const RobotLinkModelRequest* msg);
};

const ::bosdyn::api::RequestHeader&
RobotLinkModelRequest::_Internal::header(const RobotLinkModelRequest* msg) {
  return *msg->header_;
}
void RobotLinkModelRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
RobotLinkModelRequest::RobotLinkModelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.RobotLinkModelRequest)
}
RobotLinkModelRequest::RobotLinkModelRequest(const RobotLinkModelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  link_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_link_name().empty()) {
    link_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_link_name(),
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.RobotLinkModelRequest)
}

void RobotLinkModelRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RobotLinkModelRequest_bosdyn_2fapi_2frobot_5fstate_2eproto.base);
  link_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  header_ = nullptr;
}

RobotLinkModelRequest::~RobotLinkModelRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.RobotLinkModelRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RobotLinkModelRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  link_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void RobotLinkModelRequest::ArenaDtor(void* object) {
  RobotLinkModelRequest* _this = reinterpret_cast< RobotLinkModelRequest* >(object);
  (void)_this;
}
void RobotLinkModelRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RobotLinkModelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RobotLinkModelRequest& RobotLinkModelRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RobotLinkModelRequest_bosdyn_2fapi_2frobot_5fstate_2eproto.base);
  return *internal_default_instance();
}


void RobotLinkModelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.RobotLinkModelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  link_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotLinkModelRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string link_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_link_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.RobotLinkModelRequest.link_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RobotLinkModelRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.RobotLinkModelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // string link_name = 2;
  if (this->link_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_link_name().data(), static_cast<int>(this->_internal_link_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.RobotLinkModelRequest.link_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_link_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.RobotLinkModelRequest)
  return target;
}

size_t RobotLinkModelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.RobotLinkModelRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string link_name = 2;
  if (this->link_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_link_name());
  }

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotLinkModelRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.RobotLinkModelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotLinkModelRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RobotLinkModelRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.RobotLinkModelRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.RobotLinkModelRequest)
    MergeFrom(*source);
  }
}

void RobotLinkModelRequest::MergeFrom(const RobotLinkModelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.RobotLinkModelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.link_name().size() > 0) {
    _internal_set_link_name(from._internal_link_name());
  }
  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
}

void RobotLinkModelRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.RobotLinkModelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotLinkModelRequest::CopyFrom(const RobotLinkModelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.RobotLinkModelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotLinkModelRequest::IsInitialized() const {
  return true;
}

void RobotLinkModelRequest::InternalSwap(RobotLinkModelRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  link_name_.Swap(&other->link_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotLinkModelRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RobotLinkModelResponse::InitAsDefaultInstance() {
  ::bosdyn::api::_RobotLinkModelResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
  ::bosdyn::api::_RobotLinkModelResponse_default_instance_._instance.get_mutable()->link_model_ = const_cast< ::bosdyn::api::Skeleton_Link_ObjModel*>(
      ::bosdyn::api::Skeleton_Link_ObjModel::internal_default_instance());
}
class RobotLinkModelResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const RobotLinkModelResponse* msg);
  static const ::bosdyn::api::Skeleton_Link_ObjModel& link_model(const RobotLinkModelResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
RobotLinkModelResponse::_Internal::header(const RobotLinkModelResponse* msg) {
  return *msg->header_;
}
const ::bosdyn::api::Skeleton_Link_ObjModel&
RobotLinkModelResponse::_Internal::link_model(const RobotLinkModelResponse* msg) {
  return *msg->link_model_;
}
void RobotLinkModelResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
RobotLinkModelResponse::RobotLinkModelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.RobotLinkModelResponse)
}
RobotLinkModelResponse::RobotLinkModelResponse(const RobotLinkModelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_link_model()) {
    link_model_ = new ::bosdyn::api::Skeleton_Link_ObjModel(*from.link_model_);
  } else {
    link_model_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.RobotLinkModelResponse)
}

void RobotLinkModelResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RobotLinkModelResponse_bosdyn_2fapi_2frobot_5fstate_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&link_model_) -
      reinterpret_cast<char*>(&header_)) + sizeof(link_model_));
}

RobotLinkModelResponse::~RobotLinkModelResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.RobotLinkModelResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RobotLinkModelResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete link_model_;
}

void RobotLinkModelResponse::ArenaDtor(void* object) {
  RobotLinkModelResponse* _this = reinterpret_cast< RobotLinkModelResponse* >(object);
  (void)_this;
}
void RobotLinkModelResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RobotLinkModelResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RobotLinkModelResponse& RobotLinkModelResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RobotLinkModelResponse_bosdyn_2fapi_2frobot_5fstate_2eproto.base);
  return *internal_default_instance();
}


void RobotLinkModelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.RobotLinkModelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && link_model_ != nullptr) {
    delete link_model_;
  }
  link_model_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotLinkModelResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.Skeleton.Link.ObjModel link_model = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_link_model(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RobotLinkModelResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.RobotLinkModelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.Skeleton.Link.ObjModel link_model = 2;
  if (this->has_link_model()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::link_model(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.RobotLinkModelResponse)
  return target;
}

size_t RobotLinkModelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.RobotLinkModelResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.Skeleton.Link.ObjModel link_model = 2;
  if (this->has_link_model()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *link_model_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotLinkModelResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.RobotLinkModelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotLinkModelResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RobotLinkModelResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.RobotLinkModelResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.RobotLinkModelResponse)
    MergeFrom(*source);
  }
}

void RobotLinkModelResponse::MergeFrom(const RobotLinkModelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.RobotLinkModelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.has_link_model()) {
    _internal_mutable_link_model()->::bosdyn::api::Skeleton_Link_ObjModel::MergeFrom(from._internal_link_model());
  }
}

void RobotLinkModelResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.RobotLinkModelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotLinkModelResponse::CopyFrom(const RobotLinkModelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.RobotLinkModelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotLinkModelResponse::IsInitialized() const {
  return true;
}

void RobotLinkModelResponse::InternalSwap(RobotLinkModelResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RobotLinkModelResponse, link_model_)
      + sizeof(RobotLinkModelResponse::link_model_)
      - PROTOBUF_FIELD_OFFSET(RobotLinkModelResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotLinkModelResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bosdyn::api::Skeleton_Link_ObjModel* Arena::CreateMaybeMessage< ::bosdyn::api::Skeleton_Link_ObjModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::Skeleton_Link_ObjModel >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::Skeleton_Link* Arena::CreateMaybeMessage< ::bosdyn::api::Skeleton_Link >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::Skeleton_Link >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::Skeleton* Arena::CreateMaybeMessage< ::bosdyn::api::Skeleton >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::Skeleton >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::HardwareConfiguration* Arena::CreateMaybeMessage< ::bosdyn::api::HardwareConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::HardwareConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::RobotState* Arena::CreateMaybeMessage< ::bosdyn::api::RobotState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::RobotState >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::PowerState* Arena::CreateMaybeMessage< ::bosdyn::api::PowerState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::PowerState >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::SystemFaultState_AggregatedEntry_DoNotUse* Arena::CreateMaybeMessage< ::bosdyn::api::SystemFaultState_AggregatedEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::SystemFaultState_AggregatedEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::SystemFaultState* Arena::CreateMaybeMessage< ::bosdyn::api::SystemFaultState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::SystemFaultState >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::SystemFault* Arena::CreateMaybeMessage< ::bosdyn::api::SystemFault >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::SystemFault >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::EStopState* Arena::CreateMaybeMessage< ::bosdyn::api::EStopState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::EStopState >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::BatteryState* Arena::CreateMaybeMessage< ::bosdyn::api::BatteryState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::BatteryState >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::KinematicState* Arena::CreateMaybeMessage< ::bosdyn::api::KinematicState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::KinematicState >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::JointState* Arena::CreateMaybeMessage< ::bosdyn::api::JointState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::JointState >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::BehaviorFaultState* Arena::CreateMaybeMessage< ::bosdyn::api::BehaviorFaultState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::BehaviorFaultState >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::BehaviorFault* Arena::CreateMaybeMessage< ::bosdyn::api::BehaviorFault >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::BehaviorFault >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::RobotMetrics* Arena::CreateMaybeMessage< ::bosdyn::api::RobotMetrics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::RobotMetrics >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::CommsState* Arena::CreateMaybeMessage< ::bosdyn::api::CommsState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::CommsState >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::WiFiState* Arena::CreateMaybeMessage< ::bosdyn::api::WiFiState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::WiFiState >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::FootState* Arena::CreateMaybeMessage< ::bosdyn::api::FootState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::FootState >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::RobotStateRequest* Arena::CreateMaybeMessage< ::bosdyn::api::RobotStateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::RobotStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::RobotStateResponse* Arena::CreateMaybeMessage< ::bosdyn::api::RobotStateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::RobotStateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::RobotMetricsRequest* Arena::CreateMaybeMessage< ::bosdyn::api::RobotMetricsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::RobotMetricsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::RobotMetricsResponse* Arena::CreateMaybeMessage< ::bosdyn::api::RobotMetricsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::RobotMetricsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::RobotHardwareConfigurationRequest* Arena::CreateMaybeMessage< ::bosdyn::api::RobotHardwareConfigurationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::RobotHardwareConfigurationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::RobotHardwareConfigurationResponse* Arena::CreateMaybeMessage< ::bosdyn::api::RobotHardwareConfigurationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::RobotHardwareConfigurationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::RobotLinkModelRequest* Arena::CreateMaybeMessage< ::bosdyn::api::RobotLinkModelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::RobotLinkModelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::RobotLinkModelResponse* Arena::CreateMaybeMessage< ::bosdyn::api::RobotLinkModelResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::RobotLinkModelResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
