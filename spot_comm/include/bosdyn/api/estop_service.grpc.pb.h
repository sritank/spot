// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bosdyn/api/estop_service.proto
// Original file comments:
// Copyright (c) 2020 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).
//
#ifndef GRPC_bosdyn_2fapi_2festop_5fservice_2eproto__INCLUDED
#define GRPC_bosdyn_2fapi_2festop_5fservice_2eproto__INCLUDED

#include "bosdyn/api/estop_service.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace bosdyn {
namespace api {

// The software robot E-Stop system:
//  1. Uses challenge-style communication to enforce end user (aka "originators") connection
//     for Authority to Operate (ATO).
//  2. Offers the ability to issue a direct denial of  ATO.
// The EstopService provides a service interface for the robot EStop/Authority to operate the system.
class EstopService final {
 public:
  static constexpr char const* service_full_name() {
    return "bosdyn.api.EstopService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Register an Estop "originator" or "endpoint".
    // This may be a replacement for another active endpoint.
    virtual ::grpc::Status RegisterEstopEndpoint(::grpc::ClientContext* context, const ::bosdyn::api::RegisterEstopEndpointRequest& request, ::bosdyn::api::RegisterEstopEndpointResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RegisterEstopEndpointResponse>> AsyncRegisterEstopEndpoint(::grpc::ClientContext* context, const ::bosdyn::api::RegisterEstopEndpointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RegisterEstopEndpointResponse>>(AsyncRegisterEstopEndpointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RegisterEstopEndpointResponse>> PrepareAsyncRegisterEstopEndpoint(::grpc::ClientContext* context, const ::bosdyn::api::RegisterEstopEndpointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RegisterEstopEndpointResponse>>(PrepareAsyncRegisterEstopEndpointRaw(context, request, cq));
    }
    // Deregister the requested estop endpoint.
    virtual ::grpc::Status DeregisterEstopEndpoint(::grpc::ClientContext* context, const ::bosdyn::api::DeregisterEstopEndpointRequest& request, ::bosdyn::api::DeregisterEstopEndpointResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::DeregisterEstopEndpointResponse>> AsyncDeregisterEstopEndpoint(::grpc::ClientContext* context, const ::bosdyn::api::DeregisterEstopEndpointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::DeregisterEstopEndpointResponse>>(AsyncDeregisterEstopEndpointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::DeregisterEstopEndpointResponse>> PrepareAsyncDeregisterEstopEndpoint(::grpc::ClientContext* context, const ::bosdyn::api::DeregisterEstopEndpointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::DeregisterEstopEndpointResponse>>(PrepareAsyncDeregisterEstopEndpointRaw(context, request, cq));
    }
    // Answer challenge from previous response (unless this is the first call), and request
    // a stop level.
    virtual ::grpc::Status EstopCheckIn(::grpc::ClientContext* context, const ::bosdyn::api::EstopCheckInRequest& request, ::bosdyn::api::EstopCheckInResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::EstopCheckInResponse>> AsyncEstopCheckIn(::grpc::ClientContext* context, const ::bosdyn::api::EstopCheckInRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::EstopCheckInResponse>>(AsyncEstopCheckInRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::EstopCheckInResponse>> PrepareAsyncEstopCheckIn(::grpc::ClientContext* context, const ::bosdyn::api::EstopCheckInRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::EstopCheckInResponse>>(PrepareAsyncEstopCheckInRaw(context, request, cq));
    }
    // Request the current EstopConfig, describing the expected set of endpoints.
    virtual ::grpc::Status GetEstopConfig(::grpc::ClientContext* context, const ::bosdyn::api::GetEstopConfigRequest& request, ::bosdyn::api::GetEstopConfigResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::GetEstopConfigResponse>> AsyncGetEstopConfig(::grpc::ClientContext* context, const ::bosdyn::api::GetEstopConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::GetEstopConfigResponse>>(AsyncGetEstopConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::GetEstopConfigResponse>> PrepareAsyncGetEstopConfig(::grpc::ClientContext* context, const ::bosdyn::api::GetEstopConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::GetEstopConfigResponse>>(PrepareAsyncGetEstopConfigRaw(context, request, cq));
    }
    // Set a new active EstopConfig.
    virtual ::grpc::Status SetEstopConfig(::grpc::ClientContext* context, const ::bosdyn::api::SetEstopConfigRequest& request, ::bosdyn::api::SetEstopConfigResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::SetEstopConfigResponse>> AsyncSetEstopConfig(::grpc::ClientContext* context, const ::bosdyn::api::SetEstopConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::SetEstopConfigResponse>>(AsyncSetEstopConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::SetEstopConfigResponse>> PrepareAsyncSetEstopConfig(::grpc::ClientContext* context, const ::bosdyn::api::SetEstopConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::SetEstopConfigResponse>>(PrepareAsyncSetEstopConfigRaw(context, request, cq));
    }
    // Ask for the current status of the estop system.
    virtual ::grpc::Status GetEstopSystemStatus(::grpc::ClientContext* context, const ::bosdyn::api::GetEstopSystemStatusRequest& request, ::bosdyn::api::GetEstopSystemStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::GetEstopSystemStatusResponse>> AsyncGetEstopSystemStatus(::grpc::ClientContext* context, const ::bosdyn::api::GetEstopSystemStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::GetEstopSystemStatusResponse>>(AsyncGetEstopSystemStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::GetEstopSystemStatusResponse>> PrepareAsyncGetEstopSystemStatus(::grpc::ClientContext* context, const ::bosdyn::api::GetEstopSystemStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::GetEstopSystemStatusResponse>>(PrepareAsyncGetEstopSystemStatusRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Register an Estop "originator" or "endpoint".
      // This may be a replacement for another active endpoint.
      virtual void RegisterEstopEndpoint(::grpc::ClientContext* context, const ::bosdyn::api::RegisterEstopEndpointRequest* request, ::bosdyn::api::RegisterEstopEndpointResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegisterEstopEndpoint(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::RegisterEstopEndpointResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RegisterEstopEndpoint(::grpc::ClientContext* context, const ::bosdyn::api::RegisterEstopEndpointRequest* request, ::bosdyn::api::RegisterEstopEndpointResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RegisterEstopEndpoint(::grpc::ClientContext* context, const ::bosdyn::api::RegisterEstopEndpointRequest* request, ::bosdyn::api::RegisterEstopEndpointResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RegisterEstopEndpoint(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::RegisterEstopEndpointResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RegisterEstopEndpoint(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::RegisterEstopEndpointResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Deregister the requested estop endpoint.
      virtual void DeregisterEstopEndpoint(::grpc::ClientContext* context, const ::bosdyn::api::DeregisterEstopEndpointRequest* request, ::bosdyn::api::DeregisterEstopEndpointResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeregisterEstopEndpoint(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::DeregisterEstopEndpointResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeregisterEstopEndpoint(::grpc::ClientContext* context, const ::bosdyn::api::DeregisterEstopEndpointRequest* request, ::bosdyn::api::DeregisterEstopEndpointResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeregisterEstopEndpoint(::grpc::ClientContext* context, const ::bosdyn::api::DeregisterEstopEndpointRequest* request, ::bosdyn::api::DeregisterEstopEndpointResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeregisterEstopEndpoint(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::DeregisterEstopEndpointResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeregisterEstopEndpoint(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::DeregisterEstopEndpointResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Answer challenge from previous response (unless this is the first call), and request
      // a stop level.
      virtual void EstopCheckIn(::grpc::ClientContext* context, const ::bosdyn::api::EstopCheckInRequest* request, ::bosdyn::api::EstopCheckInResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EstopCheckIn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::EstopCheckInResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void EstopCheckIn(::grpc::ClientContext* context, const ::bosdyn::api::EstopCheckInRequest* request, ::bosdyn::api::EstopCheckInResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void EstopCheckIn(::grpc::ClientContext* context, const ::bosdyn::api::EstopCheckInRequest* request, ::bosdyn::api::EstopCheckInResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void EstopCheckIn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::EstopCheckInResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void EstopCheckIn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::EstopCheckInResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Request the current EstopConfig, describing the expected set of endpoints.
      virtual void GetEstopConfig(::grpc::ClientContext* context, const ::bosdyn::api::GetEstopConfigRequest* request, ::bosdyn::api::GetEstopConfigResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetEstopConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::GetEstopConfigResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetEstopConfig(::grpc::ClientContext* context, const ::bosdyn::api::GetEstopConfigRequest* request, ::bosdyn::api::GetEstopConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetEstopConfig(::grpc::ClientContext* context, const ::bosdyn::api::GetEstopConfigRequest* request, ::bosdyn::api::GetEstopConfigResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetEstopConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::GetEstopConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetEstopConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::GetEstopConfigResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Set a new active EstopConfig.
      virtual void SetEstopConfig(::grpc::ClientContext* context, const ::bosdyn::api::SetEstopConfigRequest* request, ::bosdyn::api::SetEstopConfigResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetEstopConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::SetEstopConfigResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetEstopConfig(::grpc::ClientContext* context, const ::bosdyn::api::SetEstopConfigRequest* request, ::bosdyn::api::SetEstopConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetEstopConfig(::grpc::ClientContext* context, const ::bosdyn::api::SetEstopConfigRequest* request, ::bosdyn::api::SetEstopConfigResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetEstopConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::SetEstopConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetEstopConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::SetEstopConfigResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Ask for the current status of the estop system.
      virtual void GetEstopSystemStatus(::grpc::ClientContext* context, const ::bosdyn::api::GetEstopSystemStatusRequest* request, ::bosdyn::api::GetEstopSystemStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetEstopSystemStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::GetEstopSystemStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetEstopSystemStatus(::grpc::ClientContext* context, const ::bosdyn::api::GetEstopSystemStatusRequest* request, ::bosdyn::api::GetEstopSystemStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetEstopSystemStatus(::grpc::ClientContext* context, const ::bosdyn::api::GetEstopSystemStatusRequest* request, ::bosdyn::api::GetEstopSystemStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetEstopSystemStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::GetEstopSystemStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetEstopSystemStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::GetEstopSystemStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RegisterEstopEndpointResponse>* AsyncRegisterEstopEndpointRaw(::grpc::ClientContext* context, const ::bosdyn::api::RegisterEstopEndpointRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RegisterEstopEndpointResponse>* PrepareAsyncRegisterEstopEndpointRaw(::grpc::ClientContext* context, const ::bosdyn::api::RegisterEstopEndpointRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::DeregisterEstopEndpointResponse>* AsyncDeregisterEstopEndpointRaw(::grpc::ClientContext* context, const ::bosdyn::api::DeregisterEstopEndpointRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::DeregisterEstopEndpointResponse>* PrepareAsyncDeregisterEstopEndpointRaw(::grpc::ClientContext* context, const ::bosdyn::api::DeregisterEstopEndpointRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::EstopCheckInResponse>* AsyncEstopCheckInRaw(::grpc::ClientContext* context, const ::bosdyn::api::EstopCheckInRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::EstopCheckInResponse>* PrepareAsyncEstopCheckInRaw(::grpc::ClientContext* context, const ::bosdyn::api::EstopCheckInRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::GetEstopConfigResponse>* AsyncGetEstopConfigRaw(::grpc::ClientContext* context, const ::bosdyn::api::GetEstopConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::GetEstopConfigResponse>* PrepareAsyncGetEstopConfigRaw(::grpc::ClientContext* context, const ::bosdyn::api::GetEstopConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::SetEstopConfigResponse>* AsyncSetEstopConfigRaw(::grpc::ClientContext* context, const ::bosdyn::api::SetEstopConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::SetEstopConfigResponse>* PrepareAsyncSetEstopConfigRaw(::grpc::ClientContext* context, const ::bosdyn::api::SetEstopConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::GetEstopSystemStatusResponse>* AsyncGetEstopSystemStatusRaw(::grpc::ClientContext* context, const ::bosdyn::api::GetEstopSystemStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::GetEstopSystemStatusResponse>* PrepareAsyncGetEstopSystemStatusRaw(::grpc::ClientContext* context, const ::bosdyn::api::GetEstopSystemStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status RegisterEstopEndpoint(::grpc::ClientContext* context, const ::bosdyn::api::RegisterEstopEndpointRequest& request, ::bosdyn::api::RegisterEstopEndpointResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RegisterEstopEndpointResponse>> AsyncRegisterEstopEndpoint(::grpc::ClientContext* context, const ::bosdyn::api::RegisterEstopEndpointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RegisterEstopEndpointResponse>>(AsyncRegisterEstopEndpointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RegisterEstopEndpointResponse>> PrepareAsyncRegisterEstopEndpoint(::grpc::ClientContext* context, const ::bosdyn::api::RegisterEstopEndpointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RegisterEstopEndpointResponse>>(PrepareAsyncRegisterEstopEndpointRaw(context, request, cq));
    }
    ::grpc::Status DeregisterEstopEndpoint(::grpc::ClientContext* context, const ::bosdyn::api::DeregisterEstopEndpointRequest& request, ::bosdyn::api::DeregisterEstopEndpointResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::DeregisterEstopEndpointResponse>> AsyncDeregisterEstopEndpoint(::grpc::ClientContext* context, const ::bosdyn::api::DeregisterEstopEndpointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::DeregisterEstopEndpointResponse>>(AsyncDeregisterEstopEndpointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::DeregisterEstopEndpointResponse>> PrepareAsyncDeregisterEstopEndpoint(::grpc::ClientContext* context, const ::bosdyn::api::DeregisterEstopEndpointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::DeregisterEstopEndpointResponse>>(PrepareAsyncDeregisterEstopEndpointRaw(context, request, cq));
    }
    ::grpc::Status EstopCheckIn(::grpc::ClientContext* context, const ::bosdyn::api::EstopCheckInRequest& request, ::bosdyn::api::EstopCheckInResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::EstopCheckInResponse>> AsyncEstopCheckIn(::grpc::ClientContext* context, const ::bosdyn::api::EstopCheckInRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::EstopCheckInResponse>>(AsyncEstopCheckInRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::EstopCheckInResponse>> PrepareAsyncEstopCheckIn(::grpc::ClientContext* context, const ::bosdyn::api::EstopCheckInRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::EstopCheckInResponse>>(PrepareAsyncEstopCheckInRaw(context, request, cq));
    }
    ::grpc::Status GetEstopConfig(::grpc::ClientContext* context, const ::bosdyn::api::GetEstopConfigRequest& request, ::bosdyn::api::GetEstopConfigResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::GetEstopConfigResponse>> AsyncGetEstopConfig(::grpc::ClientContext* context, const ::bosdyn::api::GetEstopConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::GetEstopConfigResponse>>(AsyncGetEstopConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::GetEstopConfigResponse>> PrepareAsyncGetEstopConfig(::grpc::ClientContext* context, const ::bosdyn::api::GetEstopConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::GetEstopConfigResponse>>(PrepareAsyncGetEstopConfigRaw(context, request, cq));
    }
    ::grpc::Status SetEstopConfig(::grpc::ClientContext* context, const ::bosdyn::api::SetEstopConfigRequest& request, ::bosdyn::api::SetEstopConfigResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::SetEstopConfigResponse>> AsyncSetEstopConfig(::grpc::ClientContext* context, const ::bosdyn::api::SetEstopConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::SetEstopConfigResponse>>(AsyncSetEstopConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::SetEstopConfigResponse>> PrepareAsyncSetEstopConfig(::grpc::ClientContext* context, const ::bosdyn::api::SetEstopConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::SetEstopConfigResponse>>(PrepareAsyncSetEstopConfigRaw(context, request, cq));
    }
    ::grpc::Status GetEstopSystemStatus(::grpc::ClientContext* context, const ::bosdyn::api::GetEstopSystemStatusRequest& request, ::bosdyn::api::GetEstopSystemStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::GetEstopSystemStatusResponse>> AsyncGetEstopSystemStatus(::grpc::ClientContext* context, const ::bosdyn::api::GetEstopSystemStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::GetEstopSystemStatusResponse>>(AsyncGetEstopSystemStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::GetEstopSystemStatusResponse>> PrepareAsyncGetEstopSystemStatus(::grpc::ClientContext* context, const ::bosdyn::api::GetEstopSystemStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::GetEstopSystemStatusResponse>>(PrepareAsyncGetEstopSystemStatusRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void RegisterEstopEndpoint(::grpc::ClientContext* context, const ::bosdyn::api::RegisterEstopEndpointRequest* request, ::bosdyn::api::RegisterEstopEndpointResponse* response, std::function<void(::grpc::Status)>) override;
      void RegisterEstopEndpoint(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::RegisterEstopEndpointResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RegisterEstopEndpoint(::grpc::ClientContext* context, const ::bosdyn::api::RegisterEstopEndpointRequest* request, ::bosdyn::api::RegisterEstopEndpointResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RegisterEstopEndpoint(::grpc::ClientContext* context, const ::bosdyn::api::RegisterEstopEndpointRequest* request, ::bosdyn::api::RegisterEstopEndpointResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RegisterEstopEndpoint(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::RegisterEstopEndpointResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RegisterEstopEndpoint(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::RegisterEstopEndpointResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeregisterEstopEndpoint(::grpc::ClientContext* context, const ::bosdyn::api::DeregisterEstopEndpointRequest* request, ::bosdyn::api::DeregisterEstopEndpointResponse* response, std::function<void(::grpc::Status)>) override;
      void DeregisterEstopEndpoint(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::DeregisterEstopEndpointResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeregisterEstopEndpoint(::grpc::ClientContext* context, const ::bosdyn::api::DeregisterEstopEndpointRequest* request, ::bosdyn::api::DeregisterEstopEndpointResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeregisterEstopEndpoint(::grpc::ClientContext* context, const ::bosdyn::api::DeregisterEstopEndpointRequest* request, ::bosdyn::api::DeregisterEstopEndpointResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeregisterEstopEndpoint(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::DeregisterEstopEndpointResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeregisterEstopEndpoint(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::DeregisterEstopEndpointResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void EstopCheckIn(::grpc::ClientContext* context, const ::bosdyn::api::EstopCheckInRequest* request, ::bosdyn::api::EstopCheckInResponse* response, std::function<void(::grpc::Status)>) override;
      void EstopCheckIn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::EstopCheckInResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void EstopCheckIn(::grpc::ClientContext* context, const ::bosdyn::api::EstopCheckInRequest* request, ::bosdyn::api::EstopCheckInResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void EstopCheckIn(::grpc::ClientContext* context, const ::bosdyn::api::EstopCheckInRequest* request, ::bosdyn::api::EstopCheckInResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void EstopCheckIn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::EstopCheckInResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void EstopCheckIn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::EstopCheckInResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetEstopConfig(::grpc::ClientContext* context, const ::bosdyn::api::GetEstopConfigRequest* request, ::bosdyn::api::GetEstopConfigResponse* response, std::function<void(::grpc::Status)>) override;
      void GetEstopConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::GetEstopConfigResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetEstopConfig(::grpc::ClientContext* context, const ::bosdyn::api::GetEstopConfigRequest* request, ::bosdyn::api::GetEstopConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetEstopConfig(::grpc::ClientContext* context, const ::bosdyn::api::GetEstopConfigRequest* request, ::bosdyn::api::GetEstopConfigResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetEstopConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::GetEstopConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetEstopConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::GetEstopConfigResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetEstopConfig(::grpc::ClientContext* context, const ::bosdyn::api::SetEstopConfigRequest* request, ::bosdyn::api::SetEstopConfigResponse* response, std::function<void(::grpc::Status)>) override;
      void SetEstopConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::SetEstopConfigResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetEstopConfig(::grpc::ClientContext* context, const ::bosdyn::api::SetEstopConfigRequest* request, ::bosdyn::api::SetEstopConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetEstopConfig(::grpc::ClientContext* context, const ::bosdyn::api::SetEstopConfigRequest* request, ::bosdyn::api::SetEstopConfigResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetEstopConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::SetEstopConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetEstopConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::SetEstopConfigResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetEstopSystemStatus(::grpc::ClientContext* context, const ::bosdyn::api::GetEstopSystemStatusRequest* request, ::bosdyn::api::GetEstopSystemStatusResponse* response, std::function<void(::grpc::Status)>) override;
      void GetEstopSystemStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::GetEstopSystemStatusResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetEstopSystemStatus(::grpc::ClientContext* context, const ::bosdyn::api::GetEstopSystemStatusRequest* request, ::bosdyn::api::GetEstopSystemStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetEstopSystemStatus(::grpc::ClientContext* context, const ::bosdyn::api::GetEstopSystemStatusRequest* request, ::bosdyn::api::GetEstopSystemStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetEstopSystemStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::GetEstopSystemStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetEstopSystemStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::GetEstopSystemStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RegisterEstopEndpointResponse>* AsyncRegisterEstopEndpointRaw(::grpc::ClientContext* context, const ::bosdyn::api::RegisterEstopEndpointRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RegisterEstopEndpointResponse>* PrepareAsyncRegisterEstopEndpointRaw(::grpc::ClientContext* context, const ::bosdyn::api::RegisterEstopEndpointRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::DeregisterEstopEndpointResponse>* AsyncDeregisterEstopEndpointRaw(::grpc::ClientContext* context, const ::bosdyn::api::DeregisterEstopEndpointRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::DeregisterEstopEndpointResponse>* PrepareAsyncDeregisterEstopEndpointRaw(::grpc::ClientContext* context, const ::bosdyn::api::DeregisterEstopEndpointRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::EstopCheckInResponse>* AsyncEstopCheckInRaw(::grpc::ClientContext* context, const ::bosdyn::api::EstopCheckInRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::EstopCheckInResponse>* PrepareAsyncEstopCheckInRaw(::grpc::ClientContext* context, const ::bosdyn::api::EstopCheckInRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::GetEstopConfigResponse>* AsyncGetEstopConfigRaw(::grpc::ClientContext* context, const ::bosdyn::api::GetEstopConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::GetEstopConfigResponse>* PrepareAsyncGetEstopConfigRaw(::grpc::ClientContext* context, const ::bosdyn::api::GetEstopConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::SetEstopConfigResponse>* AsyncSetEstopConfigRaw(::grpc::ClientContext* context, const ::bosdyn::api::SetEstopConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::SetEstopConfigResponse>* PrepareAsyncSetEstopConfigRaw(::grpc::ClientContext* context, const ::bosdyn::api::SetEstopConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::GetEstopSystemStatusResponse>* AsyncGetEstopSystemStatusRaw(::grpc::ClientContext* context, const ::bosdyn::api::GetEstopSystemStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::GetEstopSystemStatusResponse>* PrepareAsyncGetEstopSystemStatusRaw(::grpc::ClientContext* context, const ::bosdyn::api::GetEstopSystemStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterEstopEndpoint_;
    const ::grpc::internal::RpcMethod rpcmethod_DeregisterEstopEndpoint_;
    const ::grpc::internal::RpcMethod rpcmethod_EstopCheckIn_;
    const ::grpc::internal::RpcMethod rpcmethod_GetEstopConfig_;
    const ::grpc::internal::RpcMethod rpcmethod_SetEstopConfig_;
    const ::grpc::internal::RpcMethod rpcmethod_GetEstopSystemStatus_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Register an Estop "originator" or "endpoint".
    // This may be a replacement for another active endpoint.
    virtual ::grpc::Status RegisterEstopEndpoint(::grpc::ServerContext* context, const ::bosdyn::api::RegisterEstopEndpointRequest* request, ::bosdyn::api::RegisterEstopEndpointResponse* response);
    // Deregister the requested estop endpoint.
    virtual ::grpc::Status DeregisterEstopEndpoint(::grpc::ServerContext* context, const ::bosdyn::api::DeregisterEstopEndpointRequest* request, ::bosdyn::api::DeregisterEstopEndpointResponse* response);
    // Answer challenge from previous response (unless this is the first call), and request
    // a stop level.
    virtual ::grpc::Status EstopCheckIn(::grpc::ServerContext* context, const ::bosdyn::api::EstopCheckInRequest* request, ::bosdyn::api::EstopCheckInResponse* response);
    // Request the current EstopConfig, describing the expected set of endpoints.
    virtual ::grpc::Status GetEstopConfig(::grpc::ServerContext* context, const ::bosdyn::api::GetEstopConfigRequest* request, ::bosdyn::api::GetEstopConfigResponse* response);
    // Set a new active EstopConfig.
    virtual ::grpc::Status SetEstopConfig(::grpc::ServerContext* context, const ::bosdyn::api::SetEstopConfigRequest* request, ::bosdyn::api::SetEstopConfigResponse* response);
    // Ask for the current status of the estop system.
    virtual ::grpc::Status GetEstopSystemStatus(::grpc::ServerContext* context, const ::bosdyn::api::GetEstopSystemStatusRequest* request, ::bosdyn::api::GetEstopSystemStatusResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterEstopEndpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterEstopEndpoint() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RegisterEstopEndpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterEstopEndpoint(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RegisterEstopEndpointRequest* /*request*/, ::bosdyn::api::RegisterEstopEndpointResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterEstopEndpoint(::grpc::ServerContext* context, ::bosdyn::api::RegisterEstopEndpointRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::RegisterEstopEndpointResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeregisterEstopEndpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeregisterEstopEndpoint() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_DeregisterEstopEndpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeregisterEstopEndpoint(::grpc::ServerContext* /*context*/, const ::bosdyn::api::DeregisterEstopEndpointRequest* /*request*/, ::bosdyn::api::DeregisterEstopEndpointResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeregisterEstopEndpoint(::grpc::ServerContext* context, ::bosdyn::api::DeregisterEstopEndpointRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::DeregisterEstopEndpointResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EstopCheckIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_EstopCheckIn() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_EstopCheckIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EstopCheckIn(::grpc::ServerContext* /*context*/, const ::bosdyn::api::EstopCheckInRequest* /*request*/, ::bosdyn::api::EstopCheckInResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEstopCheckIn(::grpc::ServerContext* context, ::bosdyn::api::EstopCheckInRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::EstopCheckInResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetEstopConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetEstopConfig() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetEstopConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEstopConfig(::grpc::ServerContext* /*context*/, const ::bosdyn::api::GetEstopConfigRequest* /*request*/, ::bosdyn::api::GetEstopConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEstopConfig(::grpc::ServerContext* context, ::bosdyn::api::GetEstopConfigRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::GetEstopConfigResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetEstopConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetEstopConfig() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_SetEstopConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetEstopConfig(::grpc::ServerContext* /*context*/, const ::bosdyn::api::SetEstopConfigRequest* /*request*/, ::bosdyn::api::SetEstopConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetEstopConfig(::grpc::ServerContext* context, ::bosdyn::api::SetEstopConfigRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::SetEstopConfigResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetEstopSystemStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetEstopSystemStatus() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetEstopSystemStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEstopSystemStatus(::grpc::ServerContext* /*context*/, const ::bosdyn::api::GetEstopSystemStatusRequest* /*request*/, ::bosdyn::api::GetEstopSystemStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEstopSystemStatus(::grpc::ServerContext* context, ::bosdyn::api::GetEstopSystemStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::GetEstopSystemStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RegisterEstopEndpoint<WithAsyncMethod_DeregisterEstopEndpoint<WithAsyncMethod_EstopCheckIn<WithAsyncMethod_GetEstopConfig<WithAsyncMethod_SetEstopConfig<WithAsyncMethod_GetEstopSystemStatus<Service > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RegisterEstopEndpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RegisterEstopEndpoint() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::RegisterEstopEndpointRequest, ::bosdyn::api::RegisterEstopEndpointResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bosdyn::api::RegisterEstopEndpointRequest* request, ::bosdyn::api::RegisterEstopEndpointResponse* response) { return this->RegisterEstopEndpoint(context, request, response); }));}
    void SetMessageAllocatorFor_RegisterEstopEndpoint(
        ::grpc::experimental::MessageAllocator< ::bosdyn::api::RegisterEstopEndpointRequest, ::bosdyn::api::RegisterEstopEndpointResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::RegisterEstopEndpointRequest, ::bosdyn::api::RegisterEstopEndpointResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RegisterEstopEndpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterEstopEndpoint(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RegisterEstopEndpointRequest* /*request*/, ::bosdyn::api::RegisterEstopEndpointResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RegisterEstopEndpoint(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::RegisterEstopEndpointRequest* /*request*/, ::bosdyn::api::RegisterEstopEndpointResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RegisterEstopEndpoint(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bosdyn::api::RegisterEstopEndpointRequest* /*request*/, ::bosdyn::api::RegisterEstopEndpointResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeregisterEstopEndpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeregisterEstopEndpoint() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::DeregisterEstopEndpointRequest, ::bosdyn::api::DeregisterEstopEndpointResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bosdyn::api::DeregisterEstopEndpointRequest* request, ::bosdyn::api::DeregisterEstopEndpointResponse* response) { return this->DeregisterEstopEndpoint(context, request, response); }));}
    void SetMessageAllocatorFor_DeregisterEstopEndpoint(
        ::grpc::experimental::MessageAllocator< ::bosdyn::api::DeregisterEstopEndpointRequest, ::bosdyn::api::DeregisterEstopEndpointResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::DeregisterEstopEndpointRequest, ::bosdyn::api::DeregisterEstopEndpointResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeregisterEstopEndpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeregisterEstopEndpoint(::grpc::ServerContext* /*context*/, const ::bosdyn::api::DeregisterEstopEndpointRequest* /*request*/, ::bosdyn::api::DeregisterEstopEndpointResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeregisterEstopEndpoint(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::DeregisterEstopEndpointRequest* /*request*/, ::bosdyn::api::DeregisterEstopEndpointResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeregisterEstopEndpoint(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bosdyn::api::DeregisterEstopEndpointRequest* /*request*/, ::bosdyn::api::DeregisterEstopEndpointResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_EstopCheckIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_EstopCheckIn() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::EstopCheckInRequest, ::bosdyn::api::EstopCheckInResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bosdyn::api::EstopCheckInRequest* request, ::bosdyn::api::EstopCheckInResponse* response) { return this->EstopCheckIn(context, request, response); }));}
    void SetMessageAllocatorFor_EstopCheckIn(
        ::grpc::experimental::MessageAllocator< ::bosdyn::api::EstopCheckInRequest, ::bosdyn::api::EstopCheckInResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::EstopCheckInRequest, ::bosdyn::api::EstopCheckInResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_EstopCheckIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EstopCheckIn(::grpc::ServerContext* /*context*/, const ::bosdyn::api::EstopCheckInRequest* /*request*/, ::bosdyn::api::EstopCheckInResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* EstopCheckIn(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::EstopCheckInRequest* /*request*/, ::bosdyn::api::EstopCheckInResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* EstopCheckIn(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bosdyn::api::EstopCheckInRequest* /*request*/, ::bosdyn::api::EstopCheckInResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetEstopConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetEstopConfig() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::GetEstopConfigRequest, ::bosdyn::api::GetEstopConfigResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bosdyn::api::GetEstopConfigRequest* request, ::bosdyn::api::GetEstopConfigResponse* response) { return this->GetEstopConfig(context, request, response); }));}
    void SetMessageAllocatorFor_GetEstopConfig(
        ::grpc::experimental::MessageAllocator< ::bosdyn::api::GetEstopConfigRequest, ::bosdyn::api::GetEstopConfigResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::GetEstopConfigRequest, ::bosdyn::api::GetEstopConfigResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetEstopConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEstopConfig(::grpc::ServerContext* /*context*/, const ::bosdyn::api::GetEstopConfigRequest* /*request*/, ::bosdyn::api::GetEstopConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetEstopConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::GetEstopConfigRequest* /*request*/, ::bosdyn::api::GetEstopConfigResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetEstopConfig(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bosdyn::api::GetEstopConfigRequest* /*request*/, ::bosdyn::api::GetEstopConfigResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetEstopConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetEstopConfig() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::SetEstopConfigRequest, ::bosdyn::api::SetEstopConfigResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bosdyn::api::SetEstopConfigRequest* request, ::bosdyn::api::SetEstopConfigResponse* response) { return this->SetEstopConfig(context, request, response); }));}
    void SetMessageAllocatorFor_SetEstopConfig(
        ::grpc::experimental::MessageAllocator< ::bosdyn::api::SetEstopConfigRequest, ::bosdyn::api::SetEstopConfigResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::SetEstopConfigRequest, ::bosdyn::api::SetEstopConfigResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetEstopConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetEstopConfig(::grpc::ServerContext* /*context*/, const ::bosdyn::api::SetEstopConfigRequest* /*request*/, ::bosdyn::api::SetEstopConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetEstopConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::SetEstopConfigRequest* /*request*/, ::bosdyn::api::SetEstopConfigResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetEstopConfig(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bosdyn::api::SetEstopConfigRequest* /*request*/, ::bosdyn::api::SetEstopConfigResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetEstopSystemStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetEstopSystemStatus() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::GetEstopSystemStatusRequest, ::bosdyn::api::GetEstopSystemStatusResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bosdyn::api::GetEstopSystemStatusRequest* request, ::bosdyn::api::GetEstopSystemStatusResponse* response) { return this->GetEstopSystemStatus(context, request, response); }));}
    void SetMessageAllocatorFor_GetEstopSystemStatus(
        ::grpc::experimental::MessageAllocator< ::bosdyn::api::GetEstopSystemStatusRequest, ::bosdyn::api::GetEstopSystemStatusResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::GetEstopSystemStatusRequest, ::bosdyn::api::GetEstopSystemStatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetEstopSystemStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEstopSystemStatus(::grpc::ServerContext* /*context*/, const ::bosdyn::api::GetEstopSystemStatusRequest* /*request*/, ::bosdyn::api::GetEstopSystemStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetEstopSystemStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::GetEstopSystemStatusRequest* /*request*/, ::bosdyn::api::GetEstopSystemStatusResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetEstopSystemStatus(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bosdyn::api::GetEstopSystemStatusRequest* /*request*/, ::bosdyn::api::GetEstopSystemStatusResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_RegisterEstopEndpoint<ExperimentalWithCallbackMethod_DeregisterEstopEndpoint<ExperimentalWithCallbackMethod_EstopCheckIn<ExperimentalWithCallbackMethod_GetEstopConfig<ExperimentalWithCallbackMethod_SetEstopConfig<ExperimentalWithCallbackMethod_GetEstopSystemStatus<Service > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_RegisterEstopEndpoint<ExperimentalWithCallbackMethod_DeregisterEstopEndpoint<ExperimentalWithCallbackMethod_EstopCheckIn<ExperimentalWithCallbackMethod_GetEstopConfig<ExperimentalWithCallbackMethod_SetEstopConfig<ExperimentalWithCallbackMethod_GetEstopSystemStatus<Service > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RegisterEstopEndpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterEstopEndpoint() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RegisterEstopEndpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterEstopEndpoint(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RegisterEstopEndpointRequest* /*request*/, ::bosdyn::api::RegisterEstopEndpointResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeregisterEstopEndpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeregisterEstopEndpoint() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_DeregisterEstopEndpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeregisterEstopEndpoint(::grpc::ServerContext* /*context*/, const ::bosdyn::api::DeregisterEstopEndpointRequest* /*request*/, ::bosdyn::api::DeregisterEstopEndpointResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EstopCheckIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_EstopCheckIn() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_EstopCheckIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EstopCheckIn(::grpc::ServerContext* /*context*/, const ::bosdyn::api::EstopCheckInRequest* /*request*/, ::bosdyn::api::EstopCheckInResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetEstopConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetEstopConfig() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetEstopConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEstopConfig(::grpc::ServerContext* /*context*/, const ::bosdyn::api::GetEstopConfigRequest* /*request*/, ::bosdyn::api::GetEstopConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetEstopConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetEstopConfig() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_SetEstopConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetEstopConfig(::grpc::ServerContext* /*context*/, const ::bosdyn::api::SetEstopConfigRequest* /*request*/, ::bosdyn::api::SetEstopConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetEstopSystemStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetEstopSystemStatus() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetEstopSystemStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEstopSystemStatus(::grpc::ServerContext* /*context*/, const ::bosdyn::api::GetEstopSystemStatusRequest* /*request*/, ::bosdyn::api::GetEstopSystemStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterEstopEndpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterEstopEndpoint() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RegisterEstopEndpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterEstopEndpoint(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RegisterEstopEndpointRequest* /*request*/, ::bosdyn::api::RegisterEstopEndpointResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterEstopEndpoint(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeregisterEstopEndpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeregisterEstopEndpoint() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_DeregisterEstopEndpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeregisterEstopEndpoint(::grpc::ServerContext* /*context*/, const ::bosdyn::api::DeregisterEstopEndpointRequest* /*request*/, ::bosdyn::api::DeregisterEstopEndpointResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeregisterEstopEndpoint(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_EstopCheckIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_EstopCheckIn() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_EstopCheckIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EstopCheckIn(::grpc::ServerContext* /*context*/, const ::bosdyn::api::EstopCheckInRequest* /*request*/, ::bosdyn::api::EstopCheckInResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEstopCheckIn(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetEstopConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetEstopConfig() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetEstopConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEstopConfig(::grpc::ServerContext* /*context*/, const ::bosdyn::api::GetEstopConfigRequest* /*request*/, ::bosdyn::api::GetEstopConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEstopConfig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetEstopConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetEstopConfig() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_SetEstopConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetEstopConfig(::grpc::ServerContext* /*context*/, const ::bosdyn::api::SetEstopConfigRequest* /*request*/, ::bosdyn::api::SetEstopConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetEstopConfig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetEstopSystemStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetEstopSystemStatus() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetEstopSystemStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEstopSystemStatus(::grpc::ServerContext* /*context*/, const ::bosdyn::api::GetEstopSystemStatusRequest* /*request*/, ::bosdyn::api::GetEstopSystemStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEstopSystemStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RegisterEstopEndpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RegisterEstopEndpoint() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegisterEstopEndpoint(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RegisterEstopEndpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterEstopEndpoint(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RegisterEstopEndpointRequest* /*request*/, ::bosdyn::api::RegisterEstopEndpointResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RegisterEstopEndpoint(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RegisterEstopEndpoint(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeregisterEstopEndpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeregisterEstopEndpoint() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeregisterEstopEndpoint(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeregisterEstopEndpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeregisterEstopEndpoint(::grpc::ServerContext* /*context*/, const ::bosdyn::api::DeregisterEstopEndpointRequest* /*request*/, ::bosdyn::api::DeregisterEstopEndpointResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeregisterEstopEndpoint(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeregisterEstopEndpoint(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_EstopCheckIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_EstopCheckIn() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->EstopCheckIn(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_EstopCheckIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EstopCheckIn(::grpc::ServerContext* /*context*/, const ::bosdyn::api::EstopCheckInRequest* /*request*/, ::bosdyn::api::EstopCheckInResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* EstopCheckIn(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* EstopCheckIn(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetEstopConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetEstopConfig() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetEstopConfig(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetEstopConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEstopConfig(::grpc::ServerContext* /*context*/, const ::bosdyn::api::GetEstopConfigRequest* /*request*/, ::bosdyn::api::GetEstopConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetEstopConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetEstopConfig(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetEstopConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetEstopConfig() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetEstopConfig(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetEstopConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetEstopConfig(::grpc::ServerContext* /*context*/, const ::bosdyn::api::SetEstopConfigRequest* /*request*/, ::bosdyn::api::SetEstopConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetEstopConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetEstopConfig(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetEstopSystemStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetEstopSystemStatus() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetEstopSystemStatus(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetEstopSystemStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEstopSystemStatus(::grpc::ServerContext* /*context*/, const ::bosdyn::api::GetEstopSystemStatusRequest* /*request*/, ::bosdyn::api::GetEstopSystemStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetEstopSystemStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetEstopSystemStatus(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterEstopEndpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisterEstopEndpoint() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::RegisterEstopEndpointRequest, ::bosdyn::api::RegisterEstopEndpointResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::RegisterEstopEndpointRequest, ::bosdyn::api::RegisterEstopEndpointResponse>* streamer) {
                       return this->StreamedRegisterEstopEndpoint(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RegisterEstopEndpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterEstopEndpoint(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RegisterEstopEndpointRequest* /*request*/, ::bosdyn::api::RegisterEstopEndpointResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterEstopEndpoint(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::RegisterEstopEndpointRequest,::bosdyn::api::RegisterEstopEndpointResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeregisterEstopEndpoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeregisterEstopEndpoint() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::DeregisterEstopEndpointRequest, ::bosdyn::api::DeregisterEstopEndpointResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::DeregisterEstopEndpointRequest, ::bosdyn::api::DeregisterEstopEndpointResponse>* streamer) {
                       return this->StreamedDeregisterEstopEndpoint(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeregisterEstopEndpoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeregisterEstopEndpoint(::grpc::ServerContext* /*context*/, const ::bosdyn::api::DeregisterEstopEndpointRequest* /*request*/, ::bosdyn::api::DeregisterEstopEndpointResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeregisterEstopEndpoint(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::DeregisterEstopEndpointRequest,::bosdyn::api::DeregisterEstopEndpointResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EstopCheckIn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_EstopCheckIn() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::EstopCheckInRequest, ::bosdyn::api::EstopCheckInResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::EstopCheckInRequest, ::bosdyn::api::EstopCheckInResponse>* streamer) {
                       return this->StreamedEstopCheckIn(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_EstopCheckIn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EstopCheckIn(::grpc::ServerContext* /*context*/, const ::bosdyn::api::EstopCheckInRequest* /*request*/, ::bosdyn::api::EstopCheckInResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEstopCheckIn(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::EstopCheckInRequest,::bosdyn::api::EstopCheckInResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetEstopConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetEstopConfig() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::GetEstopConfigRequest, ::bosdyn::api::GetEstopConfigResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::GetEstopConfigRequest, ::bosdyn::api::GetEstopConfigResponse>* streamer) {
                       return this->StreamedGetEstopConfig(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetEstopConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetEstopConfig(::grpc::ServerContext* /*context*/, const ::bosdyn::api::GetEstopConfigRequest* /*request*/, ::bosdyn::api::GetEstopConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetEstopConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::GetEstopConfigRequest,::bosdyn::api::GetEstopConfigResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetEstopConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetEstopConfig() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::SetEstopConfigRequest, ::bosdyn::api::SetEstopConfigResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::SetEstopConfigRequest, ::bosdyn::api::SetEstopConfigResponse>* streamer) {
                       return this->StreamedSetEstopConfig(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetEstopConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetEstopConfig(::grpc::ServerContext* /*context*/, const ::bosdyn::api::SetEstopConfigRequest* /*request*/, ::bosdyn::api::SetEstopConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetEstopConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::SetEstopConfigRequest,::bosdyn::api::SetEstopConfigResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetEstopSystemStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetEstopSystemStatus() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::GetEstopSystemStatusRequest, ::bosdyn::api::GetEstopSystemStatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::GetEstopSystemStatusRequest, ::bosdyn::api::GetEstopSystemStatusResponse>* streamer) {
                       return this->StreamedGetEstopSystemStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetEstopSystemStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetEstopSystemStatus(::grpc::ServerContext* /*context*/, const ::bosdyn::api::GetEstopSystemStatusRequest* /*request*/, ::bosdyn::api::GetEstopSystemStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetEstopSystemStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::GetEstopSystemStatusRequest,::bosdyn::api::GetEstopSystemStatusResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RegisterEstopEndpoint<WithStreamedUnaryMethod_DeregisterEstopEndpoint<WithStreamedUnaryMethod_EstopCheckIn<WithStreamedUnaryMethod_GetEstopConfig<WithStreamedUnaryMethod_SetEstopConfig<WithStreamedUnaryMethod_GetEstopSystemStatus<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_RegisterEstopEndpoint<WithStreamedUnaryMethod_DeregisterEstopEndpoint<WithStreamedUnaryMethod_EstopCheckIn<WithStreamedUnaryMethod_GetEstopConfig<WithStreamedUnaryMethod_SetEstopConfig<WithStreamedUnaryMethod_GetEstopSystemStatus<Service > > > > > > StreamedService;
};

}  // namespace api
}  // namespace bosdyn


#endif  // GRPC_bosdyn_2fapi_2festop_5fservice_2eproto__INCLUDED
