// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/power.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fpower_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fpower_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "bosdyn/api/header.pb.h"
#include "bosdyn/api/lease.pb.h"
#include "bosdyn/api/license.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fpower_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bosdyn_2fapi_2fpower_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fpower_2eproto;
namespace bosdyn {
namespace api {
class PowerCommandFeedbackRequest;
class PowerCommandFeedbackRequestDefaultTypeInternal;
extern PowerCommandFeedbackRequestDefaultTypeInternal _PowerCommandFeedbackRequest_default_instance_;
class PowerCommandFeedbackResponse;
class PowerCommandFeedbackResponseDefaultTypeInternal;
extern PowerCommandFeedbackResponseDefaultTypeInternal _PowerCommandFeedbackResponse_default_instance_;
class PowerCommandRequest;
class PowerCommandRequestDefaultTypeInternal;
extern PowerCommandRequestDefaultTypeInternal _PowerCommandRequest_default_instance_;
class PowerCommandResponse;
class PowerCommandResponseDefaultTypeInternal;
extern PowerCommandResponseDefaultTypeInternal _PowerCommandResponse_default_instance_;
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> ::bosdyn::api::PowerCommandFeedbackRequest* Arena::CreateMaybeMessage<::bosdyn::api::PowerCommandFeedbackRequest>(Arena*);
template<> ::bosdyn::api::PowerCommandFeedbackResponse* Arena::CreateMaybeMessage<::bosdyn::api::PowerCommandFeedbackResponse>(Arena*);
template<> ::bosdyn::api::PowerCommandRequest* Arena::CreateMaybeMessage<::bosdyn::api::PowerCommandRequest>(Arena*);
template<> ::bosdyn::api::PowerCommandResponse* Arena::CreateMaybeMessage<::bosdyn::api::PowerCommandResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bosdyn {
namespace api {

enum PowerCommandRequest_Request : int {
  PowerCommandRequest_Request_REQUEST_UNKNOWN = 0,
  PowerCommandRequest_Request_REQUEST_OFF = 1,
  PowerCommandRequest_Request_REQUEST_ON = 2,
  PowerCommandRequest_Request_PowerCommandRequest_Request_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PowerCommandRequest_Request_PowerCommandRequest_Request_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PowerCommandRequest_Request_IsValid(int value);
constexpr PowerCommandRequest_Request PowerCommandRequest_Request_Request_MIN = PowerCommandRequest_Request_REQUEST_UNKNOWN;
constexpr PowerCommandRequest_Request PowerCommandRequest_Request_Request_MAX = PowerCommandRequest_Request_REQUEST_ON;
constexpr int PowerCommandRequest_Request_Request_ARRAYSIZE = PowerCommandRequest_Request_Request_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PowerCommandRequest_Request_descriptor();
template<typename T>
inline const std::string& PowerCommandRequest_Request_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PowerCommandRequest_Request>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PowerCommandRequest_Request_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PowerCommandRequest_Request_descriptor(), enum_t_value);
}
inline bool PowerCommandRequest_Request_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PowerCommandRequest_Request* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PowerCommandRequest_Request>(
    PowerCommandRequest_Request_descriptor(), name, value);
}
enum PowerCommandStatus : int {
  STATUS_UNKNOWN = 0,
  STATUS_IN_PROGRESS = 1,
  STATUS_SUCCESS = 2,
  STATUS_SHORE_POWER_CONNECTED = 3,
  STATUS_BATTERY_MISSING = 4,
  STATUS_COMMAND_IN_PROGRESS = 5,
  STATUS_ESTOPPED = 6,
  STATUS_FAULTED = 7,
  STATUS_INTERNAL_ERROR = 8,
  STATUS_LICENSE_ERROR = 9,
  PowerCommandStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PowerCommandStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PowerCommandStatus_IsValid(int value);
constexpr PowerCommandStatus PowerCommandStatus_MIN = STATUS_UNKNOWN;
constexpr PowerCommandStatus PowerCommandStatus_MAX = STATUS_LICENSE_ERROR;
constexpr int PowerCommandStatus_ARRAYSIZE = PowerCommandStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PowerCommandStatus_descriptor();
template<typename T>
inline const std::string& PowerCommandStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PowerCommandStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PowerCommandStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PowerCommandStatus_descriptor(), enum_t_value);
}
inline bool PowerCommandStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PowerCommandStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PowerCommandStatus>(
    PowerCommandStatus_descriptor(), name, value);
}
// ===================================================================

class PowerCommandRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.PowerCommandRequest) */ {
 public:
  inline PowerCommandRequest() : PowerCommandRequest(nullptr) {}
  virtual ~PowerCommandRequest();

  PowerCommandRequest(const PowerCommandRequest& from);
  PowerCommandRequest(PowerCommandRequest&& from) noexcept
    : PowerCommandRequest() {
    *this = ::std::move(from);
  }

  inline PowerCommandRequest& operator=(const PowerCommandRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PowerCommandRequest& operator=(PowerCommandRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PowerCommandRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PowerCommandRequest* internal_default_instance() {
    return reinterpret_cast<const PowerCommandRequest*>(
               &_PowerCommandRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PowerCommandRequest& a, PowerCommandRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PowerCommandRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PowerCommandRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PowerCommandRequest* New() const final {
    return CreateMaybeMessage<PowerCommandRequest>(nullptr);
  }

  PowerCommandRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PowerCommandRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PowerCommandRequest& from);
  void MergeFrom(const PowerCommandRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PowerCommandRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.PowerCommandRequest";
  }
  protected:
  explicit PowerCommandRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fpower_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fpower_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PowerCommandRequest_Request Request;
  static constexpr Request REQUEST_UNKNOWN =
    PowerCommandRequest_Request_REQUEST_UNKNOWN;
  static constexpr Request REQUEST_OFF =
    PowerCommandRequest_Request_REQUEST_OFF;
  static constexpr Request REQUEST_ON =
    PowerCommandRequest_Request_REQUEST_ON;
  static inline bool Request_IsValid(int value) {
    return PowerCommandRequest_Request_IsValid(value);
  }
  static constexpr Request Request_MIN =
    PowerCommandRequest_Request_Request_MIN;
  static constexpr Request Request_MAX =
    PowerCommandRequest_Request_Request_MAX;
  static constexpr int Request_ARRAYSIZE =
    PowerCommandRequest_Request_Request_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Request_descriptor() {
    return PowerCommandRequest_Request_descriptor();
  }
  template<typename T>
  static inline const std::string& Request_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Request>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Request_Name.");
    return PowerCommandRequest_Request_Name(enum_t_value);
  }
  static inline bool Request_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Request* value) {
    return PowerCommandRequest_Request_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kLeaseFieldNumber = 2,
    kRequestFieldNumber = 3,
  };
  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // .bosdyn.api.Lease lease = 2;
  bool has_lease() const;
  private:
  bool _internal_has_lease() const;
  public:
  void clear_lease();
  const ::bosdyn::api::Lease& lease() const;
  ::bosdyn::api::Lease* release_lease();
  ::bosdyn::api::Lease* mutable_lease();
  void set_allocated_lease(::bosdyn::api::Lease* lease);
  private:
  const ::bosdyn::api::Lease& _internal_lease() const;
  ::bosdyn::api::Lease* _internal_mutable_lease();
  public:
  void unsafe_arena_set_allocated_lease(
      ::bosdyn::api::Lease* lease);
  ::bosdyn::api::Lease* unsafe_arena_release_lease();

  // .bosdyn.api.PowerCommandRequest.Request request = 3;
  void clear_request();
  ::bosdyn::api::PowerCommandRequest_Request request() const;
  void set_request(::bosdyn::api::PowerCommandRequest_Request value);
  private:
  ::bosdyn::api::PowerCommandRequest_Request _internal_request() const;
  void _internal_set_request(::bosdyn::api::PowerCommandRequest_Request value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.PowerCommandRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::RequestHeader* header_;
  ::bosdyn::api::Lease* lease_;
  int request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fpower_2eproto;
};
// -------------------------------------------------------------------

class PowerCommandResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.PowerCommandResponse) */ {
 public:
  inline PowerCommandResponse() : PowerCommandResponse(nullptr) {}
  virtual ~PowerCommandResponse();

  PowerCommandResponse(const PowerCommandResponse& from);
  PowerCommandResponse(PowerCommandResponse&& from) noexcept
    : PowerCommandResponse() {
    *this = ::std::move(from);
  }

  inline PowerCommandResponse& operator=(const PowerCommandResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PowerCommandResponse& operator=(PowerCommandResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PowerCommandResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PowerCommandResponse* internal_default_instance() {
    return reinterpret_cast<const PowerCommandResponse*>(
               &_PowerCommandResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PowerCommandResponse& a, PowerCommandResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PowerCommandResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PowerCommandResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PowerCommandResponse* New() const final {
    return CreateMaybeMessage<PowerCommandResponse>(nullptr);
  }

  PowerCommandResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PowerCommandResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PowerCommandResponse& from);
  void MergeFrom(const PowerCommandResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PowerCommandResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.PowerCommandResponse";
  }
  protected:
  explicit PowerCommandResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fpower_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fpower_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kLeaseUseResultFieldNumber = 2,
    kStatusFieldNumber = 3,
    kPowerCommandIdFieldNumber = 4,
    kLicenseStatusFieldNumber = 5,
  };
  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // .bosdyn.api.LeaseUseResult lease_use_result = 2;
  bool has_lease_use_result() const;
  private:
  bool _internal_has_lease_use_result() const;
  public:
  void clear_lease_use_result();
  const ::bosdyn::api::LeaseUseResult& lease_use_result() const;
  ::bosdyn::api::LeaseUseResult* release_lease_use_result();
  ::bosdyn::api::LeaseUseResult* mutable_lease_use_result();
  void set_allocated_lease_use_result(::bosdyn::api::LeaseUseResult* lease_use_result);
  private:
  const ::bosdyn::api::LeaseUseResult& _internal_lease_use_result() const;
  ::bosdyn::api::LeaseUseResult* _internal_mutable_lease_use_result();
  public:
  void unsafe_arena_set_allocated_lease_use_result(
      ::bosdyn::api::LeaseUseResult* lease_use_result);
  ::bosdyn::api::LeaseUseResult* unsafe_arena_release_lease_use_result();

  // .bosdyn.api.PowerCommandStatus status = 3;
  void clear_status();
  ::bosdyn::api::PowerCommandStatus status() const;
  void set_status(::bosdyn::api::PowerCommandStatus value);
  private:
  ::bosdyn::api::PowerCommandStatus _internal_status() const;
  void _internal_set_status(::bosdyn::api::PowerCommandStatus value);
  public:

  // uint32 power_command_id = 4;
  void clear_power_command_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 power_command_id() const;
  void set_power_command_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_power_command_id() const;
  void _internal_set_power_command_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .bosdyn.api.LicenseInfo.Status license_status = 5;
  void clear_license_status();
  ::bosdyn::api::LicenseInfo_Status license_status() const;
  void set_license_status(::bosdyn::api::LicenseInfo_Status value);
  private:
  ::bosdyn::api::LicenseInfo_Status _internal_license_status() const;
  void _internal_set_license_status(::bosdyn::api::LicenseInfo_Status value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.PowerCommandResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::ResponseHeader* header_;
  ::bosdyn::api::LeaseUseResult* lease_use_result_;
  int status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 power_command_id_;
  int license_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fpower_2eproto;
};
// -------------------------------------------------------------------

class PowerCommandFeedbackRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.PowerCommandFeedbackRequest) */ {
 public:
  inline PowerCommandFeedbackRequest() : PowerCommandFeedbackRequest(nullptr) {}
  virtual ~PowerCommandFeedbackRequest();

  PowerCommandFeedbackRequest(const PowerCommandFeedbackRequest& from);
  PowerCommandFeedbackRequest(PowerCommandFeedbackRequest&& from) noexcept
    : PowerCommandFeedbackRequest() {
    *this = ::std::move(from);
  }

  inline PowerCommandFeedbackRequest& operator=(const PowerCommandFeedbackRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PowerCommandFeedbackRequest& operator=(PowerCommandFeedbackRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PowerCommandFeedbackRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PowerCommandFeedbackRequest* internal_default_instance() {
    return reinterpret_cast<const PowerCommandFeedbackRequest*>(
               &_PowerCommandFeedbackRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PowerCommandFeedbackRequest& a, PowerCommandFeedbackRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PowerCommandFeedbackRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PowerCommandFeedbackRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PowerCommandFeedbackRequest* New() const final {
    return CreateMaybeMessage<PowerCommandFeedbackRequest>(nullptr);
  }

  PowerCommandFeedbackRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PowerCommandFeedbackRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PowerCommandFeedbackRequest& from);
  void MergeFrom(const PowerCommandFeedbackRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PowerCommandFeedbackRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.PowerCommandFeedbackRequest";
  }
  protected:
  explicit PowerCommandFeedbackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fpower_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fpower_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kPowerCommandIdFieldNumber = 2,
  };
  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // uint32 power_command_id = 2;
  void clear_power_command_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 power_command_id() const;
  void set_power_command_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_power_command_id() const;
  void _internal_set_power_command_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.PowerCommandFeedbackRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::RequestHeader* header_;
  ::PROTOBUF_NAMESPACE_ID::uint32 power_command_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fpower_2eproto;
};
// -------------------------------------------------------------------

class PowerCommandFeedbackResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.PowerCommandFeedbackResponse) */ {
 public:
  inline PowerCommandFeedbackResponse() : PowerCommandFeedbackResponse(nullptr) {}
  virtual ~PowerCommandFeedbackResponse();

  PowerCommandFeedbackResponse(const PowerCommandFeedbackResponse& from);
  PowerCommandFeedbackResponse(PowerCommandFeedbackResponse&& from) noexcept
    : PowerCommandFeedbackResponse() {
    *this = ::std::move(from);
  }

  inline PowerCommandFeedbackResponse& operator=(const PowerCommandFeedbackResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PowerCommandFeedbackResponse& operator=(PowerCommandFeedbackResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PowerCommandFeedbackResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PowerCommandFeedbackResponse* internal_default_instance() {
    return reinterpret_cast<const PowerCommandFeedbackResponse*>(
               &_PowerCommandFeedbackResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PowerCommandFeedbackResponse& a, PowerCommandFeedbackResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PowerCommandFeedbackResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PowerCommandFeedbackResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PowerCommandFeedbackResponse* New() const final {
    return CreateMaybeMessage<PowerCommandFeedbackResponse>(nullptr);
  }

  PowerCommandFeedbackResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PowerCommandFeedbackResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PowerCommandFeedbackResponse& from);
  void MergeFrom(const PowerCommandFeedbackResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PowerCommandFeedbackResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.PowerCommandFeedbackResponse";
  }
  protected:
  explicit PowerCommandFeedbackResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fpower_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fpower_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // .bosdyn.api.PowerCommandStatus status = 2;
  void clear_status();
  ::bosdyn::api::PowerCommandStatus status() const;
  void set_status(::bosdyn::api::PowerCommandStatus value);
  private:
  ::bosdyn::api::PowerCommandStatus _internal_status() const;
  void _internal_set_status(::bosdyn::api::PowerCommandStatus value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.PowerCommandFeedbackResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::ResponseHeader* header_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fpower_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PowerCommandRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool PowerCommandRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool PowerCommandRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& PowerCommandRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::RequestHeader*>(
      &::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& PowerCommandRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.PowerCommandRequest.header)
  return _internal_header();
}
inline void PowerCommandRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.PowerCommandRequest.header)
}
inline ::bosdyn::api::RequestHeader* PowerCommandRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::RequestHeader* PowerCommandRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.PowerCommandRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* PowerCommandRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::RequestHeader* PowerCommandRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.PowerCommandRequest.header)
  return _internal_mutable_header();
}
inline void PowerCommandRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.PowerCommandRequest.header)
}

// .bosdyn.api.Lease lease = 2;
inline bool PowerCommandRequest::_internal_has_lease() const {
  return this != internal_default_instance() && lease_ != nullptr;
}
inline bool PowerCommandRequest::has_lease() const {
  return _internal_has_lease();
}
inline const ::bosdyn::api::Lease& PowerCommandRequest::_internal_lease() const {
  const ::bosdyn::api::Lease* p = lease_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::Lease*>(
      &::bosdyn::api::_Lease_default_instance_);
}
inline const ::bosdyn::api::Lease& PowerCommandRequest::lease() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.PowerCommandRequest.lease)
  return _internal_lease();
}
inline void PowerCommandRequest::unsafe_arena_set_allocated_lease(
    ::bosdyn::api::Lease* lease) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lease_);
  }
  lease_ = lease;
  if (lease) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.PowerCommandRequest.lease)
}
inline ::bosdyn::api::Lease* PowerCommandRequest::release_lease() {
  
  ::bosdyn::api::Lease* temp = lease_;
  lease_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::Lease* PowerCommandRequest::unsafe_arena_release_lease() {
  // @@protoc_insertion_point(field_release:bosdyn.api.PowerCommandRequest.lease)
  
  ::bosdyn::api::Lease* temp = lease_;
  lease_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Lease* PowerCommandRequest::_internal_mutable_lease() {
  
  if (lease_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Lease>(GetArena());
    lease_ = p;
  }
  return lease_;
}
inline ::bosdyn::api::Lease* PowerCommandRequest::mutable_lease() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.PowerCommandRequest.lease)
  return _internal_mutable_lease();
}
inline void PowerCommandRequest::set_allocated_lease(::bosdyn::api::Lease* lease) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lease_);
  }
  if (lease) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lease)->GetArena();
    if (message_arena != submessage_arena) {
      lease = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lease, submessage_arena);
    }
    
  } else {
    
  }
  lease_ = lease;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.PowerCommandRequest.lease)
}

// .bosdyn.api.PowerCommandRequest.Request request = 3;
inline void PowerCommandRequest::clear_request() {
  request_ = 0;
}
inline ::bosdyn::api::PowerCommandRequest_Request PowerCommandRequest::_internal_request() const {
  return static_cast< ::bosdyn::api::PowerCommandRequest_Request >(request_);
}
inline ::bosdyn::api::PowerCommandRequest_Request PowerCommandRequest::request() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.PowerCommandRequest.request)
  return _internal_request();
}
inline void PowerCommandRequest::_internal_set_request(::bosdyn::api::PowerCommandRequest_Request value) {
  
  request_ = value;
}
inline void PowerCommandRequest::set_request(::bosdyn::api::PowerCommandRequest_Request value) {
  _internal_set_request(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.PowerCommandRequest.request)
}

// -------------------------------------------------------------------

// PowerCommandResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool PowerCommandResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool PowerCommandResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& PowerCommandResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::ResponseHeader*>(
      &::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& PowerCommandResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.PowerCommandResponse.header)
  return _internal_header();
}
inline void PowerCommandResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.PowerCommandResponse.header)
}
inline ::bosdyn::api::ResponseHeader* PowerCommandResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::ResponseHeader* PowerCommandResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.PowerCommandResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* PowerCommandResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::ResponseHeader* PowerCommandResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.PowerCommandResponse.header)
  return _internal_mutable_header();
}
inline void PowerCommandResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.PowerCommandResponse.header)
}

// .bosdyn.api.LeaseUseResult lease_use_result = 2;
inline bool PowerCommandResponse::_internal_has_lease_use_result() const {
  return this != internal_default_instance() && lease_use_result_ != nullptr;
}
inline bool PowerCommandResponse::has_lease_use_result() const {
  return _internal_has_lease_use_result();
}
inline const ::bosdyn::api::LeaseUseResult& PowerCommandResponse::_internal_lease_use_result() const {
  const ::bosdyn::api::LeaseUseResult* p = lease_use_result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::LeaseUseResult*>(
      &::bosdyn::api::_LeaseUseResult_default_instance_);
}
inline const ::bosdyn::api::LeaseUseResult& PowerCommandResponse::lease_use_result() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.PowerCommandResponse.lease_use_result)
  return _internal_lease_use_result();
}
inline void PowerCommandResponse::unsafe_arena_set_allocated_lease_use_result(
    ::bosdyn::api::LeaseUseResult* lease_use_result) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lease_use_result_);
  }
  lease_use_result_ = lease_use_result;
  if (lease_use_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.PowerCommandResponse.lease_use_result)
}
inline ::bosdyn::api::LeaseUseResult* PowerCommandResponse::release_lease_use_result() {
  
  ::bosdyn::api::LeaseUseResult* temp = lease_use_result_;
  lease_use_result_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::LeaseUseResult* PowerCommandResponse::unsafe_arena_release_lease_use_result() {
  // @@protoc_insertion_point(field_release:bosdyn.api.PowerCommandResponse.lease_use_result)
  
  ::bosdyn::api::LeaseUseResult* temp = lease_use_result_;
  lease_use_result_ = nullptr;
  return temp;
}
inline ::bosdyn::api::LeaseUseResult* PowerCommandResponse::_internal_mutable_lease_use_result() {
  
  if (lease_use_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::LeaseUseResult>(GetArena());
    lease_use_result_ = p;
  }
  return lease_use_result_;
}
inline ::bosdyn::api::LeaseUseResult* PowerCommandResponse::mutable_lease_use_result() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.PowerCommandResponse.lease_use_result)
  return _internal_mutable_lease_use_result();
}
inline void PowerCommandResponse::set_allocated_lease_use_result(::bosdyn::api::LeaseUseResult* lease_use_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lease_use_result_);
  }
  if (lease_use_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lease_use_result)->GetArena();
    if (message_arena != submessage_arena) {
      lease_use_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lease_use_result, submessage_arena);
    }
    
  } else {
    
  }
  lease_use_result_ = lease_use_result;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.PowerCommandResponse.lease_use_result)
}

// .bosdyn.api.PowerCommandStatus status = 3;
inline void PowerCommandResponse::clear_status() {
  status_ = 0;
}
inline ::bosdyn::api::PowerCommandStatus PowerCommandResponse::_internal_status() const {
  return static_cast< ::bosdyn::api::PowerCommandStatus >(status_);
}
inline ::bosdyn::api::PowerCommandStatus PowerCommandResponse::status() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.PowerCommandResponse.status)
  return _internal_status();
}
inline void PowerCommandResponse::_internal_set_status(::bosdyn::api::PowerCommandStatus value) {
  
  status_ = value;
}
inline void PowerCommandResponse::set_status(::bosdyn::api::PowerCommandStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.PowerCommandResponse.status)
}

// uint32 power_command_id = 4;
inline void PowerCommandResponse::clear_power_command_id() {
  power_command_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PowerCommandResponse::_internal_power_command_id() const {
  return power_command_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PowerCommandResponse::power_command_id() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.PowerCommandResponse.power_command_id)
  return _internal_power_command_id();
}
inline void PowerCommandResponse::_internal_set_power_command_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  power_command_id_ = value;
}
inline void PowerCommandResponse::set_power_command_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_power_command_id(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.PowerCommandResponse.power_command_id)
}

// .bosdyn.api.LicenseInfo.Status license_status = 5;
inline void PowerCommandResponse::clear_license_status() {
  license_status_ = 0;
}
inline ::bosdyn::api::LicenseInfo_Status PowerCommandResponse::_internal_license_status() const {
  return static_cast< ::bosdyn::api::LicenseInfo_Status >(license_status_);
}
inline ::bosdyn::api::LicenseInfo_Status PowerCommandResponse::license_status() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.PowerCommandResponse.license_status)
  return _internal_license_status();
}
inline void PowerCommandResponse::_internal_set_license_status(::bosdyn::api::LicenseInfo_Status value) {
  
  license_status_ = value;
}
inline void PowerCommandResponse::set_license_status(::bosdyn::api::LicenseInfo_Status value) {
  _internal_set_license_status(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.PowerCommandResponse.license_status)
}

// -------------------------------------------------------------------

// PowerCommandFeedbackRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool PowerCommandFeedbackRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool PowerCommandFeedbackRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& PowerCommandFeedbackRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::RequestHeader*>(
      &::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& PowerCommandFeedbackRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.PowerCommandFeedbackRequest.header)
  return _internal_header();
}
inline void PowerCommandFeedbackRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.PowerCommandFeedbackRequest.header)
}
inline ::bosdyn::api::RequestHeader* PowerCommandFeedbackRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::RequestHeader* PowerCommandFeedbackRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.PowerCommandFeedbackRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* PowerCommandFeedbackRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::RequestHeader* PowerCommandFeedbackRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.PowerCommandFeedbackRequest.header)
  return _internal_mutable_header();
}
inline void PowerCommandFeedbackRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.PowerCommandFeedbackRequest.header)
}

// uint32 power_command_id = 2;
inline void PowerCommandFeedbackRequest::clear_power_command_id() {
  power_command_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PowerCommandFeedbackRequest::_internal_power_command_id() const {
  return power_command_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PowerCommandFeedbackRequest::power_command_id() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.PowerCommandFeedbackRequest.power_command_id)
  return _internal_power_command_id();
}
inline void PowerCommandFeedbackRequest::_internal_set_power_command_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  power_command_id_ = value;
}
inline void PowerCommandFeedbackRequest::set_power_command_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_power_command_id(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.PowerCommandFeedbackRequest.power_command_id)
}

// -------------------------------------------------------------------

// PowerCommandFeedbackResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool PowerCommandFeedbackResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool PowerCommandFeedbackResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& PowerCommandFeedbackResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::ResponseHeader*>(
      &::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& PowerCommandFeedbackResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.PowerCommandFeedbackResponse.header)
  return _internal_header();
}
inline void PowerCommandFeedbackResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.PowerCommandFeedbackResponse.header)
}
inline ::bosdyn::api::ResponseHeader* PowerCommandFeedbackResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::ResponseHeader* PowerCommandFeedbackResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.PowerCommandFeedbackResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* PowerCommandFeedbackResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::ResponseHeader* PowerCommandFeedbackResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.PowerCommandFeedbackResponse.header)
  return _internal_mutable_header();
}
inline void PowerCommandFeedbackResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.PowerCommandFeedbackResponse.header)
}

// .bosdyn.api.PowerCommandStatus status = 2;
inline void PowerCommandFeedbackResponse::clear_status() {
  status_ = 0;
}
inline ::bosdyn::api::PowerCommandStatus PowerCommandFeedbackResponse::_internal_status() const {
  return static_cast< ::bosdyn::api::PowerCommandStatus >(status_);
}
inline ::bosdyn::api::PowerCommandStatus PowerCommandFeedbackResponse::status() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.PowerCommandFeedbackResponse.status)
  return _internal_status();
}
inline void PowerCommandFeedbackResponse::_internal_set_status(::bosdyn::api::PowerCommandStatus value) {
  
  status_ = value;
}
inline void PowerCommandFeedbackResponse::set_status(::bosdyn::api::PowerCommandStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.PowerCommandFeedbackResponse.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace bosdyn

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bosdyn::api::PowerCommandRequest_Request> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::PowerCommandRequest_Request>() {
  return ::bosdyn::api::PowerCommandRequest_Request_descriptor();
}
template <> struct is_proto_enum< ::bosdyn::api::PowerCommandStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::PowerCommandStatus>() {
  return ::bosdyn::api::PowerCommandStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fpower_2eproto
