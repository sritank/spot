// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/trajectory.proto

#include "bosdyn/api/trajectory.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SE2Pose_bosdyn_2fapi_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2ftrajectory_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SE2TrajectoryPoint_bosdyn_2fapi_2ftrajectory_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SE3Pose_bosdyn_2fapi_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2ftrajectory_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SE3TrajectoryPoint_bosdyn_2fapi_2ftrajectory_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SE3Velocity_bosdyn_2fapi_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec3_bosdyn_2fapi_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2ftrajectory_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Vec3TrajectoryPoint_bosdyn_2fapi_2ftrajectory_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fduration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Duration_google_2fprotobuf_2fduration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace bosdyn {
namespace api {
class SE2TrajectoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SE2Trajectory> _instance;
} _SE2Trajectory_default_instance_;
class SE2TrajectoryPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SE2TrajectoryPoint> _instance;
} _SE2TrajectoryPoint_default_instance_;
class SE3TrajectoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SE3Trajectory> _instance;
} _SE3Trajectory_default_instance_;
class SE3TrajectoryPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SE3TrajectoryPoint> _instance;
} _SE3TrajectoryPoint_default_instance_;
class Vec3TrajectoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vec3Trajectory> _instance;
} _Vec3Trajectory_default_instance_;
class Vec3TrajectoryPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vec3TrajectoryPoint> _instance;
} _Vec3TrajectoryPoint_default_instance_;
}  // namespace api
}  // namespace bosdyn
static void InitDefaultsscc_info_SE2Trajectory_bosdyn_2fapi_2ftrajectory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_SE2Trajectory_default_instance_;
    new (ptr) ::bosdyn::api::SE2Trajectory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::SE2Trajectory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SE2Trajectory_bosdyn_2fapi_2ftrajectory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SE2Trajectory_bosdyn_2fapi_2ftrajectory_2eproto}, {
      &scc_info_SE2TrajectoryPoint_bosdyn_2fapi_2ftrajectory_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_SE2TrajectoryPoint_bosdyn_2fapi_2ftrajectory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_SE2TrajectoryPoint_default_instance_;
    new (ptr) ::bosdyn::api::SE2TrajectoryPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::SE2TrajectoryPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SE2TrajectoryPoint_bosdyn_2fapi_2ftrajectory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SE2TrajectoryPoint_bosdyn_2fapi_2ftrajectory_2eproto}, {
      &scc_info_SE2Pose_bosdyn_2fapi_2fgeometry_2eproto.base,
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,}};

static void InitDefaultsscc_info_SE3Trajectory_bosdyn_2fapi_2ftrajectory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_SE3Trajectory_default_instance_;
    new (ptr) ::bosdyn::api::SE3Trajectory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::SE3Trajectory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SE3Trajectory_bosdyn_2fapi_2ftrajectory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SE3Trajectory_bosdyn_2fapi_2ftrajectory_2eproto}, {
      &scc_info_SE3TrajectoryPoint_bosdyn_2fapi_2ftrajectory_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_SE3TrajectoryPoint_bosdyn_2fapi_2ftrajectory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_SE3TrajectoryPoint_default_instance_;
    new (ptr) ::bosdyn::api::SE3TrajectoryPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::SE3TrajectoryPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SE3TrajectoryPoint_bosdyn_2fapi_2ftrajectory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SE3TrajectoryPoint_bosdyn_2fapi_2ftrajectory_2eproto}, {
      &scc_info_SE3Pose_bosdyn_2fapi_2fgeometry_2eproto.base,
      &scc_info_SE3Velocity_bosdyn_2fapi_2fgeometry_2eproto.base,
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,}};

static void InitDefaultsscc_info_Vec3Trajectory_bosdyn_2fapi_2ftrajectory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_Vec3Trajectory_default_instance_;
    new (ptr) ::bosdyn::api::Vec3Trajectory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::Vec3Trajectory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Vec3Trajectory_bosdyn_2fapi_2ftrajectory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Vec3Trajectory_bosdyn_2fapi_2ftrajectory_2eproto}, {
      &scc_info_Vec3TrajectoryPoint_bosdyn_2fapi_2ftrajectory_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_Vec3_bosdyn_2fapi_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_Vec3TrajectoryPoint_bosdyn_2fapi_2ftrajectory_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_Vec3TrajectoryPoint_default_instance_;
    new (ptr) ::bosdyn::api::Vec3TrajectoryPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::Vec3TrajectoryPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Vec3TrajectoryPoint_bosdyn_2fapi_2ftrajectory_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Vec3TrajectoryPoint_bosdyn_2fapi_2ftrajectory_2eproto}, {
      &scc_info_Vec3_bosdyn_2fapi_2fgeometry_2eproto.base,
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bosdyn_2fapi_2ftrajectory_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_bosdyn_2fapi_2ftrajectory_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bosdyn_2fapi_2ftrajectory_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bosdyn_2fapi_2ftrajectory_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SE2Trajectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SE2Trajectory, points_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SE2Trajectory, reference_time_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SE2Trajectory, interpolation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SE2TrajectoryPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SE2TrajectoryPoint, pose_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SE2TrajectoryPoint, time_since_reference_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SE3Trajectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SE3Trajectory, points_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SE3Trajectory, reference_time_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SE3Trajectory, pos_interpolation_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SE3Trajectory, ang_interpolation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SE3TrajectoryPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SE3TrajectoryPoint, pose_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SE3TrajectoryPoint, velocity_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SE3TrajectoryPoint, time_since_reference_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Vec3Trajectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Vec3Trajectory, points_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Vec3Trajectory, reference_time_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Vec3Trajectory, pos_interpolation_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Vec3Trajectory, starting_velocity_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Vec3Trajectory, ending_velocity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Vec3TrajectoryPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Vec3TrajectoryPoint, point_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Vec3TrajectoryPoint, linear_speed_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Vec3TrajectoryPoint, time_since_reference_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::bosdyn::api::SE2Trajectory)},
  { 8, -1, sizeof(::bosdyn::api::SE2TrajectoryPoint)},
  { 15, -1, sizeof(::bosdyn::api::SE3Trajectory)},
  { 24, -1, sizeof(::bosdyn::api::SE3TrajectoryPoint)},
  { 32, -1, sizeof(::bosdyn::api::Vec3Trajectory)},
  { 42, -1, sizeof(::bosdyn::api::Vec3TrajectoryPoint)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_SE2Trajectory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_SE2TrajectoryPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_SE3Trajectory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_SE3TrajectoryPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_Vec3Trajectory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_Vec3TrajectoryPoint_default_instance_),
};

const char descriptor_table_protodef_bosdyn_2fapi_2ftrajectory_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033bosdyn/api/trajectory.proto\022\nbosdyn.ap"
  "i\032\031bosdyn/api/geometry.proto\032\036google/pro"
  "tobuf/duration.proto\032\037google/protobuf/ti"
  "mestamp.proto\"\265\001\n\rSE2Trajectory\022.\n\006point"
  "s\030\001 \003(\0132\036.bosdyn.api.SE2TrajectoryPoint\022"
  "2\n\016reference_time\030\003 \001(\0132\032.google.protobu"
  "f.Timestamp\022:\n\rinterpolation\030\004 \001(\0162#.bos"
  "dyn.api.PositionalInterpolationJ\004\010\002\020\003\"p\n"
  "\022SE2TrajectoryPoint\022!\n\004pose\030\001 \001(\0132\023.bosd"
  "yn.api.SE2Pose\0227\n\024time_since_reference\030\003"
  " \001(\0132\031.google.protobuf.Duration\"\366\001\n\rSE3T"
  "rajectory\022.\n\006points\030\001 \003(\0132\036.bosdyn.api.S"
  "E3TrajectoryPoint\0222\n\016reference_time\030\003 \001("
  "\0132\032.google.protobuf.Timestamp\022>\n\021pos_int"
  "erpolation\030\004 \001(\0162#.bosdyn.api.Positional"
  "Interpolation\022;\n\021ang_interpolation\030\005 \001(\016"
  "2 .bosdyn.api.AngularInterpolationJ\004\010\002\020\003"
  "\"\233\001\n\022SE3TrajectoryPoint\022!\n\004pose\030\001 \001(\0132\023."
  "bosdyn.api.SE3Pose\022)\n\010velocity\030\002 \001(\0132\027.b"
  "osdyn.api.SE3Velocity\0227\n\024time_since_refe"
  "rence\030\003 \001(\0132\031.google.protobuf.Duration\"\223"
  "\002\n\016Vec3Trajectory\022/\n\006points\030\001 \003(\0132\037.bosd"
  "yn.api.Vec3TrajectoryPoint\0222\n\016reference_"
  "time\030\003 \001(\0132\032.google.protobuf.Timestamp\022>"
  "\n\021pos_interpolation\030\004 \001(\0162#.bosdyn.api.P"
  "ositionalInterpolation\022+\n\021starting_veloc"
  "ity\030\005 \001(\0132\020.bosdyn.api.Vec3\022)\n\017ending_ve"
  "locity\030\006 \001(\0132\020.bosdyn.api.Vec3J\004\010\002\020\003\"\205\001\n"
  "\023Vec3TrajectoryPoint\022\037\n\005point\030\001 \001(\0132\020.bo"
  "sdyn.api.Vec3\022\024\n\014linear_speed\030\004 \001(\001\0227\n\024t"
  "ime_since_reference\030\003 \001(\0132\031.google.proto"
  "buf.Duration*^\n\027PositionalInterpolation\022"
  "\026\n\022POS_INTERP_UNKNOWN\020\000\022\025\n\021POS_INTERP_LI"
  "NEAR\020\001\022\024\n\020POS_INTERP_CUBIC\020\002*a\n\024AngularI"
  "nterpolation\022\026\n\022ANG_INTERP_UNKNOWN\020\000\022\025\n\021"
  "ANG_INTERP_LINEAR\020\001\022\032\n\026ANG_INTERP_CUBIC_"
  "EULER\020\002B\021B\017TrajectoryProtob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bosdyn_2fapi_2ftrajectory_2eproto_deps[3] = {
  &::descriptor_table_bosdyn_2fapi_2fgeometry_2eproto,
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bosdyn_2fapi_2ftrajectory_2eproto_sccs[6] = {
  &scc_info_SE2Trajectory_bosdyn_2fapi_2ftrajectory_2eproto.base,
  &scc_info_SE2TrajectoryPoint_bosdyn_2fapi_2ftrajectory_2eproto.base,
  &scc_info_SE3Trajectory_bosdyn_2fapi_2ftrajectory_2eproto.base,
  &scc_info_SE3TrajectoryPoint_bosdyn_2fapi_2ftrajectory_2eproto.base,
  &scc_info_Vec3Trajectory_bosdyn_2fapi_2ftrajectory_2eproto.base,
  &scc_info_Vec3TrajectoryPoint_bosdyn_2fapi_2ftrajectory_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bosdyn_2fapi_2ftrajectory_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2ftrajectory_2eproto = {
  false, false, descriptor_table_protodef_bosdyn_2fapi_2ftrajectory_2eproto, "bosdyn/api/trajectory.proto", 1474,
  &descriptor_table_bosdyn_2fapi_2ftrajectory_2eproto_once, descriptor_table_bosdyn_2fapi_2ftrajectory_2eproto_sccs, descriptor_table_bosdyn_2fapi_2ftrajectory_2eproto_deps, 6, 3,
  schemas, file_default_instances, TableStruct_bosdyn_2fapi_2ftrajectory_2eproto::offsets,
  file_level_metadata_bosdyn_2fapi_2ftrajectory_2eproto, 6, file_level_enum_descriptors_bosdyn_2fapi_2ftrajectory_2eproto, file_level_service_descriptors_bosdyn_2fapi_2ftrajectory_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bosdyn_2fapi_2ftrajectory_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bosdyn_2fapi_2ftrajectory_2eproto)), true);
namespace bosdyn {
namespace api {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PositionalInterpolation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2ftrajectory_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2ftrajectory_2eproto[0];
}
bool PositionalInterpolation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AngularInterpolation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2ftrajectory_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2ftrajectory_2eproto[1];
}
bool AngularInterpolation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void SE2Trajectory::InitAsDefaultInstance() {
  ::bosdyn::api::_SE2Trajectory_default_instance_._instance.get_mutable()->reference_time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class SE2Trajectory::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& reference_time(const SE2Trajectory* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
SE2Trajectory::_Internal::reference_time(const SE2Trajectory* msg) {
  return *msg->reference_time_;
}
void SE2Trajectory::clear_reference_time() {
  if (GetArena() == nullptr && reference_time_ != nullptr) {
    delete reference_time_;
  }
  reference_time_ = nullptr;
}
SE2Trajectory::SE2Trajectory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.SE2Trajectory)
}
SE2Trajectory::SE2Trajectory(const SE2Trajectory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      points_(from.points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_reference_time()) {
    reference_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.reference_time_);
  } else {
    reference_time_ = nullptr;
  }
  interpolation_ = from.interpolation_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.SE2Trajectory)
}

void SE2Trajectory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SE2Trajectory_bosdyn_2fapi_2ftrajectory_2eproto.base);
  ::memset(&reference_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&interpolation_) -
      reinterpret_cast<char*>(&reference_time_)) + sizeof(interpolation_));
}

SE2Trajectory::~SE2Trajectory() {
  // @@protoc_insertion_point(destructor:bosdyn.api.SE2Trajectory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SE2Trajectory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete reference_time_;
}

void SE2Trajectory::ArenaDtor(void* object) {
  SE2Trajectory* _this = reinterpret_cast< SE2Trajectory* >(object);
  (void)_this;
}
void SE2Trajectory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SE2Trajectory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SE2Trajectory& SE2Trajectory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SE2Trajectory_bosdyn_2fapi_2ftrajectory_2eproto.base);
  return *internal_default_instance();
}


void SE2Trajectory::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.SE2Trajectory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  if (GetArena() == nullptr && reference_time_ != nullptr) {
    delete reference_time_;
  }
  reference_time_ = nullptr;
  interpolation_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SE2Trajectory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bosdyn.api.SE2TrajectoryPoint points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp reference_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_reference_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.PositionalInterpolation interpolation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_interpolation(static_cast<::bosdyn::api::PositionalInterpolation>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SE2Trajectory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.SE2Trajectory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bosdyn.api.SE2TrajectoryPoint points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_points(i), target, stream);
  }

  // .google.protobuf.Timestamp reference_time = 3;
  if (this->has_reference_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::reference_time(this), target, stream);
  }

  // .bosdyn.api.PositionalInterpolation interpolation = 4;
  if (this->interpolation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_interpolation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.SE2Trajectory)
  return target;
}

size_t SE2Trajectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.SE2Trajectory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bosdyn.api.SE2TrajectoryPoint points = 1;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.Timestamp reference_time = 3;
  if (this->has_reference_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reference_time_);
  }

  // .bosdyn.api.PositionalInterpolation interpolation = 4;
  if (this->interpolation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_interpolation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SE2Trajectory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.SE2Trajectory)
  GOOGLE_DCHECK_NE(&from, this);
  const SE2Trajectory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SE2Trajectory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.SE2Trajectory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.SE2Trajectory)
    MergeFrom(*source);
  }
}

void SE2Trajectory::MergeFrom(const SE2Trajectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.SE2Trajectory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  if (from.has_reference_time()) {
    _internal_mutable_reference_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_reference_time());
  }
  if (from.interpolation() != 0) {
    _internal_set_interpolation(from._internal_interpolation());
  }
}

void SE2Trajectory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.SE2Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SE2Trajectory::CopyFrom(const SE2Trajectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.SE2Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SE2Trajectory::IsInitialized() const {
  return true;
}

void SE2Trajectory::InternalSwap(SE2Trajectory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SE2Trajectory, interpolation_)
      + sizeof(SE2Trajectory::interpolation_)
      - PROTOBUF_FIELD_OFFSET(SE2Trajectory, reference_time_)>(
          reinterpret_cast<char*>(&reference_time_),
          reinterpret_cast<char*>(&other->reference_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SE2Trajectory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SE2TrajectoryPoint::InitAsDefaultInstance() {
  ::bosdyn::api::_SE2TrajectoryPoint_default_instance_._instance.get_mutable()->pose_ = const_cast< ::bosdyn::api::SE2Pose*>(
      ::bosdyn::api::SE2Pose::internal_default_instance());
  ::bosdyn::api::_SE2TrajectoryPoint_default_instance_._instance.get_mutable()->time_since_reference_ = const_cast< PROTOBUF_NAMESPACE_ID::Duration*>(
      PROTOBUF_NAMESPACE_ID::Duration::internal_default_instance());
}
class SE2TrajectoryPoint::_Internal {
 public:
  static const ::bosdyn::api::SE2Pose& pose(const SE2TrajectoryPoint* msg);
  static const PROTOBUF_NAMESPACE_ID::Duration& time_since_reference(const SE2TrajectoryPoint* msg);
};

const ::bosdyn::api::SE2Pose&
SE2TrajectoryPoint::_Internal::pose(const SE2TrajectoryPoint* msg) {
  return *msg->pose_;
}
const PROTOBUF_NAMESPACE_ID::Duration&
SE2TrajectoryPoint::_Internal::time_since_reference(const SE2TrajectoryPoint* msg) {
  return *msg->time_since_reference_;
}
void SE2TrajectoryPoint::clear_pose() {
  if (GetArena() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
void SE2TrajectoryPoint::clear_time_since_reference() {
  if (GetArena() == nullptr && time_since_reference_ != nullptr) {
    delete time_since_reference_;
  }
  time_since_reference_ = nullptr;
}
SE2TrajectoryPoint::SE2TrajectoryPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.SE2TrajectoryPoint)
}
SE2TrajectoryPoint::SE2TrajectoryPoint(const SE2TrajectoryPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pose()) {
    pose_ = new ::bosdyn::api::SE2Pose(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  if (from._internal_has_time_since_reference()) {
    time_since_reference_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.time_since_reference_);
  } else {
    time_since_reference_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.SE2TrajectoryPoint)
}

void SE2TrajectoryPoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SE2TrajectoryPoint_bosdyn_2fapi_2ftrajectory_2eproto.base);
  ::memset(&pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_since_reference_) -
      reinterpret_cast<char*>(&pose_)) + sizeof(time_since_reference_));
}

SE2TrajectoryPoint::~SE2TrajectoryPoint() {
  // @@protoc_insertion_point(destructor:bosdyn.api.SE2TrajectoryPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SE2TrajectoryPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pose_;
  if (this != internal_default_instance()) delete time_since_reference_;
}

void SE2TrajectoryPoint::ArenaDtor(void* object) {
  SE2TrajectoryPoint* _this = reinterpret_cast< SE2TrajectoryPoint* >(object);
  (void)_this;
}
void SE2TrajectoryPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SE2TrajectoryPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SE2TrajectoryPoint& SE2TrajectoryPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SE2TrajectoryPoint_bosdyn_2fapi_2ftrajectory_2eproto.base);
  return *internal_default_instance();
}


void SE2TrajectoryPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.SE2TrajectoryPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
  if (GetArena() == nullptr && time_since_reference_ != nullptr) {
    delete time_since_reference_;
  }
  time_since_reference_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SE2TrajectoryPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.SE2Pose pose = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Duration time_since_reference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_since_reference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SE2TrajectoryPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.SE2TrajectoryPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.SE2Pose pose = 1;
  if (this->has_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pose(this), target, stream);
  }

  // .google.protobuf.Duration time_since_reference = 3;
  if (this->has_time_since_reference()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::time_since_reference(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.SE2TrajectoryPoint)
  return target;
}

size_t SE2TrajectoryPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.SE2TrajectoryPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.SE2Pose pose = 1;
  if (this->has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // .google.protobuf.Duration time_since_reference = 3;
  if (this->has_time_since_reference()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_since_reference_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SE2TrajectoryPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.SE2TrajectoryPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const SE2TrajectoryPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SE2TrajectoryPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.SE2TrajectoryPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.SE2TrajectoryPoint)
    MergeFrom(*source);
  }
}

void SE2TrajectoryPoint::MergeFrom(const SE2TrajectoryPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.SE2TrajectoryPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pose()) {
    _internal_mutable_pose()->::bosdyn::api::SE2Pose::MergeFrom(from._internal_pose());
  }
  if (from.has_time_since_reference()) {
    _internal_mutable_time_since_reference()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_time_since_reference());
  }
}

void SE2TrajectoryPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.SE2TrajectoryPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SE2TrajectoryPoint::CopyFrom(const SE2TrajectoryPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.SE2TrajectoryPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SE2TrajectoryPoint::IsInitialized() const {
  return true;
}

void SE2TrajectoryPoint::InternalSwap(SE2TrajectoryPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SE2TrajectoryPoint, time_since_reference_)
      + sizeof(SE2TrajectoryPoint::time_since_reference_)
      - PROTOBUF_FIELD_OFFSET(SE2TrajectoryPoint, pose_)>(
          reinterpret_cast<char*>(&pose_),
          reinterpret_cast<char*>(&other->pose_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SE2TrajectoryPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SE3Trajectory::InitAsDefaultInstance() {
  ::bosdyn::api::_SE3Trajectory_default_instance_._instance.get_mutable()->reference_time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class SE3Trajectory::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& reference_time(const SE3Trajectory* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
SE3Trajectory::_Internal::reference_time(const SE3Trajectory* msg) {
  return *msg->reference_time_;
}
void SE3Trajectory::clear_reference_time() {
  if (GetArena() == nullptr && reference_time_ != nullptr) {
    delete reference_time_;
  }
  reference_time_ = nullptr;
}
SE3Trajectory::SE3Trajectory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.SE3Trajectory)
}
SE3Trajectory::SE3Trajectory(const SE3Trajectory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      points_(from.points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_reference_time()) {
    reference_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.reference_time_);
  } else {
    reference_time_ = nullptr;
  }
  ::memcpy(&pos_interpolation_, &from.pos_interpolation_,
    static_cast<size_t>(reinterpret_cast<char*>(&ang_interpolation_) -
    reinterpret_cast<char*>(&pos_interpolation_)) + sizeof(ang_interpolation_));
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.SE3Trajectory)
}

void SE3Trajectory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SE3Trajectory_bosdyn_2fapi_2ftrajectory_2eproto.base);
  ::memset(&reference_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ang_interpolation_) -
      reinterpret_cast<char*>(&reference_time_)) + sizeof(ang_interpolation_));
}

SE3Trajectory::~SE3Trajectory() {
  // @@protoc_insertion_point(destructor:bosdyn.api.SE3Trajectory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SE3Trajectory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete reference_time_;
}

void SE3Trajectory::ArenaDtor(void* object) {
  SE3Trajectory* _this = reinterpret_cast< SE3Trajectory* >(object);
  (void)_this;
}
void SE3Trajectory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SE3Trajectory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SE3Trajectory& SE3Trajectory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SE3Trajectory_bosdyn_2fapi_2ftrajectory_2eproto.base);
  return *internal_default_instance();
}


void SE3Trajectory::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.SE3Trajectory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  if (GetArena() == nullptr && reference_time_ != nullptr) {
    delete reference_time_;
  }
  reference_time_ = nullptr;
  ::memset(&pos_interpolation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ang_interpolation_) -
      reinterpret_cast<char*>(&pos_interpolation_)) + sizeof(ang_interpolation_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SE3Trajectory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bosdyn.api.SE3TrajectoryPoint points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp reference_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_reference_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.PositionalInterpolation pos_interpolation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_pos_interpolation(static_cast<::bosdyn::api::PositionalInterpolation>(val));
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.AngularInterpolation ang_interpolation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ang_interpolation(static_cast<::bosdyn::api::AngularInterpolation>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SE3Trajectory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.SE3Trajectory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bosdyn.api.SE3TrajectoryPoint points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_points(i), target, stream);
  }

  // .google.protobuf.Timestamp reference_time = 3;
  if (this->has_reference_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::reference_time(this), target, stream);
  }

  // .bosdyn.api.PositionalInterpolation pos_interpolation = 4;
  if (this->pos_interpolation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_pos_interpolation(), target);
  }

  // .bosdyn.api.AngularInterpolation ang_interpolation = 5;
  if (this->ang_interpolation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_ang_interpolation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.SE3Trajectory)
  return target;
}

size_t SE3Trajectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.SE3Trajectory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bosdyn.api.SE3TrajectoryPoint points = 1;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.Timestamp reference_time = 3;
  if (this->has_reference_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reference_time_);
  }

  // .bosdyn.api.PositionalInterpolation pos_interpolation = 4;
  if (this->pos_interpolation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pos_interpolation());
  }

  // .bosdyn.api.AngularInterpolation ang_interpolation = 5;
  if (this->ang_interpolation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ang_interpolation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SE3Trajectory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.SE3Trajectory)
  GOOGLE_DCHECK_NE(&from, this);
  const SE3Trajectory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SE3Trajectory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.SE3Trajectory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.SE3Trajectory)
    MergeFrom(*source);
  }
}

void SE3Trajectory::MergeFrom(const SE3Trajectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.SE3Trajectory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  if (from.has_reference_time()) {
    _internal_mutable_reference_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_reference_time());
  }
  if (from.pos_interpolation() != 0) {
    _internal_set_pos_interpolation(from._internal_pos_interpolation());
  }
  if (from.ang_interpolation() != 0) {
    _internal_set_ang_interpolation(from._internal_ang_interpolation());
  }
}

void SE3Trajectory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.SE3Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SE3Trajectory::CopyFrom(const SE3Trajectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.SE3Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SE3Trajectory::IsInitialized() const {
  return true;
}

void SE3Trajectory::InternalSwap(SE3Trajectory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SE3Trajectory, ang_interpolation_)
      + sizeof(SE3Trajectory::ang_interpolation_)
      - PROTOBUF_FIELD_OFFSET(SE3Trajectory, reference_time_)>(
          reinterpret_cast<char*>(&reference_time_),
          reinterpret_cast<char*>(&other->reference_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SE3Trajectory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SE3TrajectoryPoint::InitAsDefaultInstance() {
  ::bosdyn::api::_SE3TrajectoryPoint_default_instance_._instance.get_mutable()->pose_ = const_cast< ::bosdyn::api::SE3Pose*>(
      ::bosdyn::api::SE3Pose::internal_default_instance());
  ::bosdyn::api::_SE3TrajectoryPoint_default_instance_._instance.get_mutable()->velocity_ = const_cast< ::bosdyn::api::SE3Velocity*>(
      ::bosdyn::api::SE3Velocity::internal_default_instance());
  ::bosdyn::api::_SE3TrajectoryPoint_default_instance_._instance.get_mutable()->time_since_reference_ = const_cast< PROTOBUF_NAMESPACE_ID::Duration*>(
      PROTOBUF_NAMESPACE_ID::Duration::internal_default_instance());
}
class SE3TrajectoryPoint::_Internal {
 public:
  static const ::bosdyn::api::SE3Pose& pose(const SE3TrajectoryPoint* msg);
  static const ::bosdyn::api::SE3Velocity& velocity(const SE3TrajectoryPoint* msg);
  static const PROTOBUF_NAMESPACE_ID::Duration& time_since_reference(const SE3TrajectoryPoint* msg);
};

const ::bosdyn::api::SE3Pose&
SE3TrajectoryPoint::_Internal::pose(const SE3TrajectoryPoint* msg) {
  return *msg->pose_;
}
const ::bosdyn::api::SE3Velocity&
SE3TrajectoryPoint::_Internal::velocity(const SE3TrajectoryPoint* msg) {
  return *msg->velocity_;
}
const PROTOBUF_NAMESPACE_ID::Duration&
SE3TrajectoryPoint::_Internal::time_since_reference(const SE3TrajectoryPoint* msg) {
  return *msg->time_since_reference_;
}
void SE3TrajectoryPoint::clear_pose() {
  if (GetArena() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
void SE3TrajectoryPoint::clear_velocity() {
  if (GetArena() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
}
void SE3TrajectoryPoint::clear_time_since_reference() {
  if (GetArena() == nullptr && time_since_reference_ != nullptr) {
    delete time_since_reference_;
  }
  time_since_reference_ = nullptr;
}
SE3TrajectoryPoint::SE3TrajectoryPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.SE3TrajectoryPoint)
}
SE3TrajectoryPoint::SE3TrajectoryPoint(const SE3TrajectoryPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pose()) {
    pose_ = new ::bosdyn::api::SE3Pose(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  if (from._internal_has_velocity()) {
    velocity_ = new ::bosdyn::api::SE3Velocity(*from.velocity_);
  } else {
    velocity_ = nullptr;
  }
  if (from._internal_has_time_since_reference()) {
    time_since_reference_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.time_since_reference_);
  } else {
    time_since_reference_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.SE3TrajectoryPoint)
}

void SE3TrajectoryPoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SE3TrajectoryPoint_bosdyn_2fapi_2ftrajectory_2eproto.base);
  ::memset(&pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_since_reference_) -
      reinterpret_cast<char*>(&pose_)) + sizeof(time_since_reference_));
}

SE3TrajectoryPoint::~SE3TrajectoryPoint() {
  // @@protoc_insertion_point(destructor:bosdyn.api.SE3TrajectoryPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SE3TrajectoryPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pose_;
  if (this != internal_default_instance()) delete velocity_;
  if (this != internal_default_instance()) delete time_since_reference_;
}

void SE3TrajectoryPoint::ArenaDtor(void* object) {
  SE3TrajectoryPoint* _this = reinterpret_cast< SE3TrajectoryPoint* >(object);
  (void)_this;
}
void SE3TrajectoryPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SE3TrajectoryPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SE3TrajectoryPoint& SE3TrajectoryPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SE3TrajectoryPoint_bosdyn_2fapi_2ftrajectory_2eproto.base);
  return *internal_default_instance();
}


void SE3TrajectoryPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.SE3TrajectoryPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
  if (GetArena() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
  if (GetArena() == nullptr && time_since_reference_ != nullptr) {
    delete time_since_reference_;
  }
  time_since_reference_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SE3TrajectoryPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.SE3Pose pose = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.SE3Velocity velocity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Duration time_since_reference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_since_reference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SE3TrajectoryPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.SE3TrajectoryPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.SE3Pose pose = 1;
  if (this->has_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pose(this), target, stream);
  }

  // .bosdyn.api.SE3Velocity velocity = 2;
  if (this->has_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::velocity(this), target, stream);
  }

  // .google.protobuf.Duration time_since_reference = 3;
  if (this->has_time_since_reference()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::time_since_reference(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.SE3TrajectoryPoint)
  return target;
}

size_t SE3TrajectoryPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.SE3TrajectoryPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.SE3Pose pose = 1;
  if (this->has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // .bosdyn.api.SE3Velocity velocity = 2;
  if (this->has_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *velocity_);
  }

  // .google.protobuf.Duration time_since_reference = 3;
  if (this->has_time_since_reference()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_since_reference_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SE3TrajectoryPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.SE3TrajectoryPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const SE3TrajectoryPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SE3TrajectoryPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.SE3TrajectoryPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.SE3TrajectoryPoint)
    MergeFrom(*source);
  }
}

void SE3TrajectoryPoint::MergeFrom(const SE3TrajectoryPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.SE3TrajectoryPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pose()) {
    _internal_mutable_pose()->::bosdyn::api::SE3Pose::MergeFrom(from._internal_pose());
  }
  if (from.has_velocity()) {
    _internal_mutable_velocity()->::bosdyn::api::SE3Velocity::MergeFrom(from._internal_velocity());
  }
  if (from.has_time_since_reference()) {
    _internal_mutable_time_since_reference()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_time_since_reference());
  }
}

void SE3TrajectoryPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.SE3TrajectoryPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SE3TrajectoryPoint::CopyFrom(const SE3TrajectoryPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.SE3TrajectoryPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SE3TrajectoryPoint::IsInitialized() const {
  return true;
}

void SE3TrajectoryPoint::InternalSwap(SE3TrajectoryPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SE3TrajectoryPoint, time_since_reference_)
      + sizeof(SE3TrajectoryPoint::time_since_reference_)
      - PROTOBUF_FIELD_OFFSET(SE3TrajectoryPoint, pose_)>(
          reinterpret_cast<char*>(&pose_),
          reinterpret_cast<char*>(&other->pose_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SE3TrajectoryPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Vec3Trajectory::InitAsDefaultInstance() {
  ::bosdyn::api::_Vec3Trajectory_default_instance_._instance.get_mutable()->reference_time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::bosdyn::api::_Vec3Trajectory_default_instance_._instance.get_mutable()->starting_velocity_ = const_cast< ::bosdyn::api::Vec3*>(
      ::bosdyn::api::Vec3::internal_default_instance());
  ::bosdyn::api::_Vec3Trajectory_default_instance_._instance.get_mutable()->ending_velocity_ = const_cast< ::bosdyn::api::Vec3*>(
      ::bosdyn::api::Vec3::internal_default_instance());
}
class Vec3Trajectory::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& reference_time(const Vec3Trajectory* msg);
  static const ::bosdyn::api::Vec3& starting_velocity(const Vec3Trajectory* msg);
  static const ::bosdyn::api::Vec3& ending_velocity(const Vec3Trajectory* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
Vec3Trajectory::_Internal::reference_time(const Vec3Trajectory* msg) {
  return *msg->reference_time_;
}
const ::bosdyn::api::Vec3&
Vec3Trajectory::_Internal::starting_velocity(const Vec3Trajectory* msg) {
  return *msg->starting_velocity_;
}
const ::bosdyn::api::Vec3&
Vec3Trajectory::_Internal::ending_velocity(const Vec3Trajectory* msg) {
  return *msg->ending_velocity_;
}
void Vec3Trajectory::clear_reference_time() {
  if (GetArena() == nullptr && reference_time_ != nullptr) {
    delete reference_time_;
  }
  reference_time_ = nullptr;
}
void Vec3Trajectory::clear_starting_velocity() {
  if (GetArena() == nullptr && starting_velocity_ != nullptr) {
    delete starting_velocity_;
  }
  starting_velocity_ = nullptr;
}
void Vec3Trajectory::clear_ending_velocity() {
  if (GetArena() == nullptr && ending_velocity_ != nullptr) {
    delete ending_velocity_;
  }
  ending_velocity_ = nullptr;
}
Vec3Trajectory::Vec3Trajectory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.Vec3Trajectory)
}
Vec3Trajectory::Vec3Trajectory(const Vec3Trajectory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      points_(from.points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_reference_time()) {
    reference_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.reference_time_);
  } else {
    reference_time_ = nullptr;
  }
  if (from._internal_has_starting_velocity()) {
    starting_velocity_ = new ::bosdyn::api::Vec3(*from.starting_velocity_);
  } else {
    starting_velocity_ = nullptr;
  }
  if (from._internal_has_ending_velocity()) {
    ending_velocity_ = new ::bosdyn::api::Vec3(*from.ending_velocity_);
  } else {
    ending_velocity_ = nullptr;
  }
  pos_interpolation_ = from.pos_interpolation_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.Vec3Trajectory)
}

void Vec3Trajectory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Vec3Trajectory_bosdyn_2fapi_2ftrajectory_2eproto.base);
  ::memset(&reference_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pos_interpolation_) -
      reinterpret_cast<char*>(&reference_time_)) + sizeof(pos_interpolation_));
}

Vec3Trajectory::~Vec3Trajectory() {
  // @@protoc_insertion_point(destructor:bosdyn.api.Vec3Trajectory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vec3Trajectory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete reference_time_;
  if (this != internal_default_instance()) delete starting_velocity_;
  if (this != internal_default_instance()) delete ending_velocity_;
}

void Vec3Trajectory::ArenaDtor(void* object) {
  Vec3Trajectory* _this = reinterpret_cast< Vec3Trajectory* >(object);
  (void)_this;
}
void Vec3Trajectory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vec3Trajectory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vec3Trajectory& Vec3Trajectory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vec3Trajectory_bosdyn_2fapi_2ftrajectory_2eproto.base);
  return *internal_default_instance();
}


void Vec3Trajectory::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.Vec3Trajectory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  if (GetArena() == nullptr && reference_time_ != nullptr) {
    delete reference_time_;
  }
  reference_time_ = nullptr;
  if (GetArena() == nullptr && starting_velocity_ != nullptr) {
    delete starting_velocity_;
  }
  starting_velocity_ = nullptr;
  if (GetArena() == nullptr && ending_velocity_ != nullptr) {
    delete ending_velocity_;
  }
  ending_velocity_ = nullptr;
  pos_interpolation_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vec3Trajectory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bosdyn.api.Vec3TrajectoryPoint points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp reference_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_reference_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.PositionalInterpolation pos_interpolation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_pos_interpolation(static_cast<::bosdyn::api::PositionalInterpolation>(val));
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.Vec3 starting_velocity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_starting_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.Vec3 ending_velocity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_ending_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vec3Trajectory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.Vec3Trajectory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bosdyn.api.Vec3TrajectoryPoint points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_points(i), target, stream);
  }

  // .google.protobuf.Timestamp reference_time = 3;
  if (this->has_reference_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::reference_time(this), target, stream);
  }

  // .bosdyn.api.PositionalInterpolation pos_interpolation = 4;
  if (this->pos_interpolation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_pos_interpolation(), target);
  }

  // .bosdyn.api.Vec3 starting_velocity = 5;
  if (this->has_starting_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::starting_velocity(this), target, stream);
  }

  // .bosdyn.api.Vec3 ending_velocity = 6;
  if (this->has_ending_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::ending_velocity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.Vec3Trajectory)
  return target;
}

size_t Vec3Trajectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.Vec3Trajectory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bosdyn.api.Vec3TrajectoryPoint points = 1;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.Timestamp reference_time = 3;
  if (this->has_reference_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reference_time_);
  }

  // .bosdyn.api.Vec3 starting_velocity = 5;
  if (this->has_starting_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *starting_velocity_);
  }

  // .bosdyn.api.Vec3 ending_velocity = 6;
  if (this->has_ending_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ending_velocity_);
  }

  // .bosdyn.api.PositionalInterpolation pos_interpolation = 4;
  if (this->pos_interpolation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pos_interpolation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vec3Trajectory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.Vec3Trajectory)
  GOOGLE_DCHECK_NE(&from, this);
  const Vec3Trajectory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vec3Trajectory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.Vec3Trajectory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.Vec3Trajectory)
    MergeFrom(*source);
  }
}

void Vec3Trajectory::MergeFrom(const Vec3Trajectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.Vec3Trajectory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  if (from.has_reference_time()) {
    _internal_mutable_reference_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_reference_time());
  }
  if (from.has_starting_velocity()) {
    _internal_mutable_starting_velocity()->::bosdyn::api::Vec3::MergeFrom(from._internal_starting_velocity());
  }
  if (from.has_ending_velocity()) {
    _internal_mutable_ending_velocity()->::bosdyn::api::Vec3::MergeFrom(from._internal_ending_velocity());
  }
  if (from.pos_interpolation() != 0) {
    _internal_set_pos_interpolation(from._internal_pos_interpolation());
  }
}

void Vec3Trajectory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.Vec3Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vec3Trajectory::CopyFrom(const Vec3Trajectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.Vec3Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec3Trajectory::IsInitialized() const {
  return true;
}

void Vec3Trajectory::InternalSwap(Vec3Trajectory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vec3Trajectory, pos_interpolation_)
      + sizeof(Vec3Trajectory::pos_interpolation_)
      - PROTOBUF_FIELD_OFFSET(Vec3Trajectory, reference_time_)>(
          reinterpret_cast<char*>(&reference_time_),
          reinterpret_cast<char*>(&other->reference_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vec3Trajectory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Vec3TrajectoryPoint::InitAsDefaultInstance() {
  ::bosdyn::api::_Vec3TrajectoryPoint_default_instance_._instance.get_mutable()->point_ = const_cast< ::bosdyn::api::Vec3*>(
      ::bosdyn::api::Vec3::internal_default_instance());
  ::bosdyn::api::_Vec3TrajectoryPoint_default_instance_._instance.get_mutable()->time_since_reference_ = const_cast< PROTOBUF_NAMESPACE_ID::Duration*>(
      PROTOBUF_NAMESPACE_ID::Duration::internal_default_instance());
}
class Vec3TrajectoryPoint::_Internal {
 public:
  static const ::bosdyn::api::Vec3& point(const Vec3TrajectoryPoint* msg);
  static const PROTOBUF_NAMESPACE_ID::Duration& time_since_reference(const Vec3TrajectoryPoint* msg);
};

const ::bosdyn::api::Vec3&
Vec3TrajectoryPoint::_Internal::point(const Vec3TrajectoryPoint* msg) {
  return *msg->point_;
}
const PROTOBUF_NAMESPACE_ID::Duration&
Vec3TrajectoryPoint::_Internal::time_since_reference(const Vec3TrajectoryPoint* msg) {
  return *msg->time_since_reference_;
}
void Vec3TrajectoryPoint::clear_point() {
  if (GetArena() == nullptr && point_ != nullptr) {
    delete point_;
  }
  point_ = nullptr;
}
void Vec3TrajectoryPoint::clear_time_since_reference() {
  if (GetArena() == nullptr && time_since_reference_ != nullptr) {
    delete time_since_reference_;
  }
  time_since_reference_ = nullptr;
}
Vec3TrajectoryPoint::Vec3TrajectoryPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.Vec3TrajectoryPoint)
}
Vec3TrajectoryPoint::Vec3TrajectoryPoint(const Vec3TrajectoryPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_point()) {
    point_ = new ::bosdyn::api::Vec3(*from.point_);
  } else {
    point_ = nullptr;
  }
  if (from._internal_has_time_since_reference()) {
    time_since_reference_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.time_since_reference_);
  } else {
    time_since_reference_ = nullptr;
  }
  linear_speed_ = from.linear_speed_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.Vec3TrajectoryPoint)
}

void Vec3TrajectoryPoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Vec3TrajectoryPoint_bosdyn_2fapi_2ftrajectory_2eproto.base);
  ::memset(&point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&linear_speed_) -
      reinterpret_cast<char*>(&point_)) + sizeof(linear_speed_));
}

Vec3TrajectoryPoint::~Vec3TrajectoryPoint() {
  // @@protoc_insertion_point(destructor:bosdyn.api.Vec3TrajectoryPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vec3TrajectoryPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete point_;
  if (this != internal_default_instance()) delete time_since_reference_;
}

void Vec3TrajectoryPoint::ArenaDtor(void* object) {
  Vec3TrajectoryPoint* _this = reinterpret_cast< Vec3TrajectoryPoint* >(object);
  (void)_this;
}
void Vec3TrajectoryPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vec3TrajectoryPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vec3TrajectoryPoint& Vec3TrajectoryPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vec3TrajectoryPoint_bosdyn_2fapi_2ftrajectory_2eproto.base);
  return *internal_default_instance();
}


void Vec3TrajectoryPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.Vec3TrajectoryPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && point_ != nullptr) {
    delete point_;
  }
  point_ = nullptr;
  if (GetArena() == nullptr && time_since_reference_ != nullptr) {
    delete time_since_reference_;
  }
  time_since_reference_ = nullptr;
  linear_speed_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vec3TrajectoryPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.Vec3 point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Duration time_since_reference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_since_reference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double linear_speed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          linear_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vec3TrajectoryPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.Vec3TrajectoryPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.Vec3 point = 1;
  if (this->has_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::point(this), target, stream);
  }

  // .google.protobuf.Duration time_since_reference = 3;
  if (this->has_time_since_reference()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::time_since_reference(this), target, stream);
  }

  // double linear_speed = 4;
  if (!(this->linear_speed() <= 0 && this->linear_speed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_linear_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.Vec3TrajectoryPoint)
  return target;
}

size_t Vec3TrajectoryPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.Vec3TrajectoryPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.Vec3 point = 1;
  if (this->has_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *point_);
  }

  // .google.protobuf.Duration time_since_reference = 3;
  if (this->has_time_since_reference()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_since_reference_);
  }

  // double linear_speed = 4;
  if (!(this->linear_speed() <= 0 && this->linear_speed() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vec3TrajectoryPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.Vec3TrajectoryPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const Vec3TrajectoryPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vec3TrajectoryPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.Vec3TrajectoryPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.Vec3TrajectoryPoint)
    MergeFrom(*source);
  }
}

void Vec3TrajectoryPoint::MergeFrom(const Vec3TrajectoryPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.Vec3TrajectoryPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_point()) {
    _internal_mutable_point()->::bosdyn::api::Vec3::MergeFrom(from._internal_point());
  }
  if (from.has_time_since_reference()) {
    _internal_mutable_time_since_reference()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_time_since_reference());
  }
  if (!(from.linear_speed() <= 0 && from.linear_speed() >= 0)) {
    _internal_set_linear_speed(from._internal_linear_speed());
  }
}

void Vec3TrajectoryPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.Vec3TrajectoryPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vec3TrajectoryPoint::CopyFrom(const Vec3TrajectoryPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.Vec3TrajectoryPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec3TrajectoryPoint::IsInitialized() const {
  return true;
}

void Vec3TrajectoryPoint::InternalSwap(Vec3TrajectoryPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vec3TrajectoryPoint, linear_speed_)
      + sizeof(Vec3TrajectoryPoint::linear_speed_)
      - PROTOBUF_FIELD_OFFSET(Vec3TrajectoryPoint, point_)>(
          reinterpret_cast<char*>(&point_),
          reinterpret_cast<char*>(&other->point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vec3TrajectoryPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bosdyn::api::SE2Trajectory* Arena::CreateMaybeMessage< ::bosdyn::api::SE2Trajectory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::SE2Trajectory >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::SE2TrajectoryPoint* Arena::CreateMaybeMessage< ::bosdyn::api::SE2TrajectoryPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::SE2TrajectoryPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::SE3Trajectory* Arena::CreateMaybeMessage< ::bosdyn::api::SE3Trajectory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::SE3Trajectory >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::SE3TrajectoryPoint* Arena::CreateMaybeMessage< ::bosdyn::api::SE3TrajectoryPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::SE3TrajectoryPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::Vec3Trajectory* Arena::CreateMaybeMessage< ::bosdyn::api::Vec3Trajectory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::Vec3Trajectory >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::Vec3TrajectoryPoint* Arena::CreateMaybeMessage< ::bosdyn::api::Vec3TrajectoryPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::Vec3TrajectoryPoint >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
