// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bosdyn/api/robot_state_service.proto

#include "bosdyn/api/robot_state_service.pb.h"
#include "bosdyn/api/robot_state_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace bosdyn {
namespace api {

static const char* RobotStateService_method_names[] = {
  "/bosdyn.api.RobotStateService/GetRobotState",
  "/bosdyn.api.RobotStateService/GetRobotMetrics",
  "/bosdyn.api.RobotStateService/GetRobotHardwareConfiguration",
  "/bosdyn.api.RobotStateService/GetRobotLinkModel",
};

std::unique_ptr< RobotStateService::Stub> RobotStateService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RobotStateService::Stub> stub(new RobotStateService::Stub(channel));
  return stub;
}

RobotStateService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetRobotState_(RobotStateService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRobotMetrics_(RobotStateService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRobotHardwareConfiguration_(RobotStateService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRobotLinkModel_(RobotStateService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RobotStateService::Stub::GetRobotState(::grpc::ClientContext* context, const ::bosdyn::api::RobotStateRequest& request, ::bosdyn::api::RobotStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetRobotState_, context, request, response);
}

void RobotStateService::Stub::experimental_async::GetRobotState(::grpc::ClientContext* context, const ::bosdyn::api::RobotStateRequest* request, ::bosdyn::api::RobotStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRobotState_, context, request, response, std::move(f));
}

void RobotStateService::Stub::experimental_async::GetRobotState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::RobotStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRobotState_, context, request, response, std::move(f));
}

void RobotStateService::Stub::experimental_async::GetRobotState(::grpc::ClientContext* context, const ::bosdyn::api::RobotStateRequest* request, ::bosdyn::api::RobotStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRobotState_, context, request, response, reactor);
}

void RobotStateService::Stub::experimental_async::GetRobotState(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::RobotStateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRobotState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::RobotStateResponse>* RobotStateService::Stub::AsyncGetRobotStateRaw(::grpc::ClientContext* context, const ::bosdyn::api::RobotStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::RobotStateResponse>::Create(channel_.get(), cq, rpcmethod_GetRobotState_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::RobotStateResponse>* RobotStateService::Stub::PrepareAsyncGetRobotStateRaw(::grpc::ClientContext* context, const ::bosdyn::api::RobotStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::RobotStateResponse>::Create(channel_.get(), cq, rpcmethod_GetRobotState_, context, request, false);
}

::grpc::Status RobotStateService::Stub::GetRobotMetrics(::grpc::ClientContext* context, const ::bosdyn::api::RobotMetricsRequest& request, ::bosdyn::api::RobotMetricsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetRobotMetrics_, context, request, response);
}

void RobotStateService::Stub::experimental_async::GetRobotMetrics(::grpc::ClientContext* context, const ::bosdyn::api::RobotMetricsRequest* request, ::bosdyn::api::RobotMetricsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRobotMetrics_, context, request, response, std::move(f));
}

void RobotStateService::Stub::experimental_async::GetRobotMetrics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::RobotMetricsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRobotMetrics_, context, request, response, std::move(f));
}

void RobotStateService::Stub::experimental_async::GetRobotMetrics(::grpc::ClientContext* context, const ::bosdyn::api::RobotMetricsRequest* request, ::bosdyn::api::RobotMetricsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRobotMetrics_, context, request, response, reactor);
}

void RobotStateService::Stub::experimental_async::GetRobotMetrics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::RobotMetricsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRobotMetrics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::RobotMetricsResponse>* RobotStateService::Stub::AsyncGetRobotMetricsRaw(::grpc::ClientContext* context, const ::bosdyn::api::RobotMetricsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::RobotMetricsResponse>::Create(channel_.get(), cq, rpcmethod_GetRobotMetrics_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::RobotMetricsResponse>* RobotStateService::Stub::PrepareAsyncGetRobotMetricsRaw(::grpc::ClientContext* context, const ::bosdyn::api::RobotMetricsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::RobotMetricsResponse>::Create(channel_.get(), cq, rpcmethod_GetRobotMetrics_, context, request, false);
}

::grpc::Status RobotStateService::Stub::GetRobotHardwareConfiguration(::grpc::ClientContext* context, const ::bosdyn::api::RobotHardwareConfigurationRequest& request, ::bosdyn::api::RobotHardwareConfigurationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetRobotHardwareConfiguration_, context, request, response);
}

void RobotStateService::Stub::experimental_async::GetRobotHardwareConfiguration(::grpc::ClientContext* context, const ::bosdyn::api::RobotHardwareConfigurationRequest* request, ::bosdyn::api::RobotHardwareConfigurationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRobotHardwareConfiguration_, context, request, response, std::move(f));
}

void RobotStateService::Stub::experimental_async::GetRobotHardwareConfiguration(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::RobotHardwareConfigurationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRobotHardwareConfiguration_, context, request, response, std::move(f));
}

void RobotStateService::Stub::experimental_async::GetRobotHardwareConfiguration(::grpc::ClientContext* context, const ::bosdyn::api::RobotHardwareConfigurationRequest* request, ::bosdyn::api::RobotHardwareConfigurationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRobotHardwareConfiguration_, context, request, response, reactor);
}

void RobotStateService::Stub::experimental_async::GetRobotHardwareConfiguration(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::RobotHardwareConfigurationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRobotHardwareConfiguration_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::RobotHardwareConfigurationResponse>* RobotStateService::Stub::AsyncGetRobotHardwareConfigurationRaw(::grpc::ClientContext* context, const ::bosdyn::api::RobotHardwareConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::RobotHardwareConfigurationResponse>::Create(channel_.get(), cq, rpcmethod_GetRobotHardwareConfiguration_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::RobotHardwareConfigurationResponse>* RobotStateService::Stub::PrepareAsyncGetRobotHardwareConfigurationRaw(::grpc::ClientContext* context, const ::bosdyn::api::RobotHardwareConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::RobotHardwareConfigurationResponse>::Create(channel_.get(), cq, rpcmethod_GetRobotHardwareConfiguration_, context, request, false);
}

::grpc::Status RobotStateService::Stub::GetRobotLinkModel(::grpc::ClientContext* context, const ::bosdyn::api::RobotLinkModelRequest& request, ::bosdyn::api::RobotLinkModelResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetRobotLinkModel_, context, request, response);
}

void RobotStateService::Stub::experimental_async::GetRobotLinkModel(::grpc::ClientContext* context, const ::bosdyn::api::RobotLinkModelRequest* request, ::bosdyn::api::RobotLinkModelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRobotLinkModel_, context, request, response, std::move(f));
}

void RobotStateService::Stub::experimental_async::GetRobotLinkModel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::RobotLinkModelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRobotLinkModel_, context, request, response, std::move(f));
}

void RobotStateService::Stub::experimental_async::GetRobotLinkModel(::grpc::ClientContext* context, const ::bosdyn::api::RobotLinkModelRequest* request, ::bosdyn::api::RobotLinkModelResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRobotLinkModel_, context, request, response, reactor);
}

void RobotStateService::Stub::experimental_async::GetRobotLinkModel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::RobotLinkModelResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRobotLinkModel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::RobotLinkModelResponse>* RobotStateService::Stub::AsyncGetRobotLinkModelRaw(::grpc::ClientContext* context, const ::bosdyn::api::RobotLinkModelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::RobotLinkModelResponse>::Create(channel_.get(), cq, rpcmethod_GetRobotLinkModel_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::RobotLinkModelResponse>* RobotStateService::Stub::PrepareAsyncGetRobotLinkModelRaw(::grpc::ClientContext* context, const ::bosdyn::api::RobotLinkModelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::RobotLinkModelResponse>::Create(channel_.get(), cq, rpcmethod_GetRobotLinkModel_, context, request, false);
}

RobotStateService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotStateService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotStateService::Service, ::bosdyn::api::RobotStateRequest, ::bosdyn::api::RobotStateResponse>(
          [](RobotStateService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::RobotStateRequest* req,
             ::bosdyn::api::RobotStateResponse* resp) {
               return service->GetRobotState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotStateService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotStateService::Service, ::bosdyn::api::RobotMetricsRequest, ::bosdyn::api::RobotMetricsResponse>(
          [](RobotStateService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::RobotMetricsRequest* req,
             ::bosdyn::api::RobotMetricsResponse* resp) {
               return service->GetRobotMetrics(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotStateService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotStateService::Service, ::bosdyn::api::RobotHardwareConfigurationRequest, ::bosdyn::api::RobotHardwareConfigurationResponse>(
          [](RobotStateService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::RobotHardwareConfigurationRequest* req,
             ::bosdyn::api::RobotHardwareConfigurationResponse* resp) {
               return service->GetRobotHardwareConfiguration(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotStateService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotStateService::Service, ::bosdyn::api::RobotLinkModelRequest, ::bosdyn::api::RobotLinkModelResponse>(
          [](RobotStateService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::RobotLinkModelRequest* req,
             ::bosdyn::api::RobotLinkModelResponse* resp) {
               return service->GetRobotLinkModel(ctx, req, resp);
             }, this)));
}

RobotStateService::Service::~Service() {
}

::grpc::Status RobotStateService::Service::GetRobotState(::grpc::ServerContext* context, const ::bosdyn::api::RobotStateRequest* request, ::bosdyn::api::RobotStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RobotStateService::Service::GetRobotMetrics(::grpc::ServerContext* context, const ::bosdyn::api::RobotMetricsRequest* request, ::bosdyn::api::RobotMetricsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RobotStateService::Service::GetRobotHardwareConfiguration(::grpc::ServerContext* context, const ::bosdyn::api::RobotHardwareConfigurationRequest* request, ::bosdyn::api::RobotHardwareConfigurationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RobotStateService::Service::GetRobotLinkModel(::grpc::ServerContext* context, const ::bosdyn::api::RobotLinkModelRequest* request, ::bosdyn::api::RobotLinkModelResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace bosdyn
}  // namespace api

