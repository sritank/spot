// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/point_cloud.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fpoint_5fcloud_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fpoint_5fcloud_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "bosdyn/api/header.pb.h"
#include "bosdyn/api/geometry.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fpoint_5fcloud_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bosdyn_2fapi_2fpoint_5fcloud_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fpoint_5fcloud_2eproto;
namespace bosdyn {
namespace api {
class GetPointCloudRequest;
class GetPointCloudRequestDefaultTypeInternal;
extern GetPointCloudRequestDefaultTypeInternal _GetPointCloudRequest_default_instance_;
class GetPointCloudResponse;
class GetPointCloudResponseDefaultTypeInternal;
extern GetPointCloudResponseDefaultTypeInternal _GetPointCloudResponse_default_instance_;
class PointCloud;
class PointCloudDefaultTypeInternal;
extern PointCloudDefaultTypeInternal _PointCloud_default_instance_;
class PointCloudSource;
class PointCloudSourceDefaultTypeInternal;
extern PointCloudSourceDefaultTypeInternal _PointCloudSource_default_instance_;
class PointCloud_EncodingParameters;
class PointCloud_EncodingParametersDefaultTypeInternal;
extern PointCloud_EncodingParametersDefaultTypeInternal _PointCloud_EncodingParameters_default_instance_;
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> ::bosdyn::api::GetPointCloudRequest* Arena::CreateMaybeMessage<::bosdyn::api::GetPointCloudRequest>(Arena*);
template<> ::bosdyn::api::GetPointCloudResponse* Arena::CreateMaybeMessage<::bosdyn::api::GetPointCloudResponse>(Arena*);
template<> ::bosdyn::api::PointCloud* Arena::CreateMaybeMessage<::bosdyn::api::PointCloud>(Arena*);
template<> ::bosdyn::api::PointCloudSource* Arena::CreateMaybeMessage<::bosdyn::api::PointCloudSource>(Arena*);
template<> ::bosdyn::api::PointCloud_EncodingParameters* Arena::CreateMaybeMessage<::bosdyn::api::PointCloud_EncodingParameters>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bosdyn {
namespace api {

enum PointCloud_Encoding : int {
  PointCloud_Encoding_ENCODING_UNKNOWN = 0,
  PointCloud_Encoding_ENCODING_XYZ_32F = 1,
  PointCloud_Encoding_ENCODING_XYZ_4SC = 2,
  PointCloud_Encoding_ENCODING_XYZ_5SC = 3,
  PointCloud_Encoding_PointCloud_Encoding_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PointCloud_Encoding_PointCloud_Encoding_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PointCloud_Encoding_IsValid(int value);
constexpr PointCloud_Encoding PointCloud_Encoding_Encoding_MIN = PointCloud_Encoding_ENCODING_UNKNOWN;
constexpr PointCloud_Encoding PointCloud_Encoding_Encoding_MAX = PointCloud_Encoding_ENCODING_XYZ_5SC;
constexpr int PointCloud_Encoding_Encoding_ARRAYSIZE = PointCloud_Encoding_Encoding_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PointCloud_Encoding_descriptor();
template<typename T>
inline const std::string& PointCloud_Encoding_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PointCloud_Encoding>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PointCloud_Encoding_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PointCloud_Encoding_descriptor(), enum_t_value);
}
inline bool PointCloud_Encoding_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PointCloud_Encoding* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PointCloud_Encoding>(
    PointCloud_Encoding_descriptor(), name, value);
}
enum GetPointCloudResponse_Status : int {
  GetPointCloudResponse_Status_STATUS_UNKNOWN = 0,
  GetPointCloudResponse_Status_STATUS_OK = 1,
  GetPointCloudResponse_Status_STATUS_SOURCE_DATA_ERROR = 2,
  GetPointCloudResponse_Status_STATUS_POINT_CLOUD_DATA_ERROR = 3,
  GetPointCloudResponse_Status_GetPointCloudResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GetPointCloudResponse_Status_GetPointCloudResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GetPointCloudResponse_Status_IsValid(int value);
constexpr GetPointCloudResponse_Status GetPointCloudResponse_Status_Status_MIN = GetPointCloudResponse_Status_STATUS_UNKNOWN;
constexpr GetPointCloudResponse_Status GetPointCloudResponse_Status_Status_MAX = GetPointCloudResponse_Status_STATUS_POINT_CLOUD_DATA_ERROR;
constexpr int GetPointCloudResponse_Status_Status_ARRAYSIZE = GetPointCloudResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetPointCloudResponse_Status_descriptor();
template<typename T>
inline const std::string& GetPointCloudResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GetPointCloudResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GetPointCloudResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GetPointCloudResponse_Status_descriptor(), enum_t_value);
}
inline bool GetPointCloudResponse_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GetPointCloudResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GetPointCloudResponse_Status>(
    GetPointCloudResponse_Status_descriptor(), name, value);
}
// ===================================================================

class PointCloudSource PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.PointCloudSource) */ {
 public:
  inline PointCloudSource() : PointCloudSource(nullptr) {}
  virtual ~PointCloudSource();

  PointCloudSource(const PointCloudSource& from);
  PointCloudSource(PointCloudSource&& from) noexcept
    : PointCloudSource() {
    *this = ::std::move(from);
  }

  inline PointCloudSource& operator=(const PointCloudSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointCloudSource& operator=(PointCloudSource&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PointCloudSource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PointCloudSource* internal_default_instance() {
    return reinterpret_cast<const PointCloudSource*>(
               &_PointCloudSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PointCloudSource& a, PointCloudSource& b) {
    a.Swap(&b);
  }
  inline void Swap(PointCloudSource* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointCloudSource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PointCloudSource* New() const final {
    return CreateMaybeMessage<PointCloudSource>(nullptr);
  }

  PointCloudSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PointCloudSource>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PointCloudSource& from);
  void MergeFrom(const PointCloudSource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointCloudSource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.PointCloudSource";
  }
  protected:
  explicit PointCloudSource(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fpoint_5fcloud_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fpoint_5fcloud_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kFrameNameSensorFieldNumber = 3,
    kAcquisitionTimeFieldNumber = 30,
    kTransformsSnapshotFieldNumber = 31,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string frame_name_sensor = 3;
  void clear_frame_name_sensor();
  const std::string& frame_name_sensor() const;
  void set_frame_name_sensor(const std::string& value);
  void set_frame_name_sensor(std::string&& value);
  void set_frame_name_sensor(const char* value);
  void set_frame_name_sensor(const char* value, size_t size);
  std::string* mutable_frame_name_sensor();
  std::string* release_frame_name_sensor();
  void set_allocated_frame_name_sensor(std::string* frame_name_sensor);
  private:
  const std::string& _internal_frame_name_sensor() const;
  void _internal_set_frame_name_sensor(const std::string& value);
  std::string* _internal_mutable_frame_name_sensor();
  public:

  // .google.protobuf.Timestamp acquisition_time = 30;
  bool has_acquisition_time() const;
  private:
  bool _internal_has_acquisition_time() const;
  public:
  void clear_acquisition_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& acquisition_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_acquisition_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_acquisition_time();
  void set_allocated_acquisition_time(PROTOBUF_NAMESPACE_ID::Timestamp* acquisition_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_acquisition_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_acquisition_time();
  public:
  void unsafe_arena_set_allocated_acquisition_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* acquisition_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_acquisition_time();

  // .bosdyn.api.FrameTreeSnapshot transforms_snapshot = 31;
  bool has_transforms_snapshot() const;
  private:
  bool _internal_has_transforms_snapshot() const;
  public:
  void clear_transforms_snapshot();
  const ::bosdyn::api::FrameTreeSnapshot& transforms_snapshot() const;
  ::bosdyn::api::FrameTreeSnapshot* release_transforms_snapshot();
  ::bosdyn::api::FrameTreeSnapshot* mutable_transforms_snapshot();
  void set_allocated_transforms_snapshot(::bosdyn::api::FrameTreeSnapshot* transforms_snapshot);
  private:
  const ::bosdyn::api::FrameTreeSnapshot& _internal_transforms_snapshot() const;
  ::bosdyn::api::FrameTreeSnapshot* _internal_mutable_transforms_snapshot();
  public:
  void unsafe_arena_set_allocated_transforms_snapshot(
      ::bosdyn::api::FrameTreeSnapshot* transforms_snapshot);
  ::bosdyn::api::FrameTreeSnapshot* unsafe_arena_release_transforms_snapshot();

  // @@protoc_insertion_point(class_scope:bosdyn.api.PointCloudSource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame_name_sensor_;
  PROTOBUF_NAMESPACE_ID::Timestamp* acquisition_time_;
  ::bosdyn::api::FrameTreeSnapshot* transforms_snapshot_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fpoint_5fcloud_2eproto;
};
// -------------------------------------------------------------------

class PointCloud_EncodingParameters PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.PointCloud.EncodingParameters) */ {
 public:
  inline PointCloud_EncodingParameters() : PointCloud_EncodingParameters(nullptr) {}
  virtual ~PointCloud_EncodingParameters();

  PointCloud_EncodingParameters(const PointCloud_EncodingParameters& from);
  PointCloud_EncodingParameters(PointCloud_EncodingParameters&& from) noexcept
    : PointCloud_EncodingParameters() {
    *this = ::std::move(from);
  }

  inline PointCloud_EncodingParameters& operator=(const PointCloud_EncodingParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointCloud_EncodingParameters& operator=(PointCloud_EncodingParameters&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PointCloud_EncodingParameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PointCloud_EncodingParameters* internal_default_instance() {
    return reinterpret_cast<const PointCloud_EncodingParameters*>(
               &_PointCloud_EncodingParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PointCloud_EncodingParameters& a, PointCloud_EncodingParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(PointCloud_EncodingParameters* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointCloud_EncodingParameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PointCloud_EncodingParameters* New() const final {
    return CreateMaybeMessage<PointCloud_EncodingParameters>(nullptr);
  }

  PointCloud_EncodingParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PointCloud_EncodingParameters>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PointCloud_EncodingParameters& from);
  void MergeFrom(const PointCloud_EncodingParameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointCloud_EncodingParameters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.PointCloud.EncodingParameters";
  }
  protected:
  explicit PointCloud_EncodingParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fpoint_5fcloud_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fpoint_5fcloud_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxXFieldNumber = 2,
    kMaxYFieldNumber = 3,
    kScaleFactorFieldNumber = 1,
    kBytesPerPointFieldNumber = 6,
    kMaxZFieldNumber = 4,
    kRemappingConstantFieldNumber = 5,
  };
  // double max_x = 2;
  void clear_max_x();
  double max_x() const;
  void set_max_x(double value);
  private:
  double _internal_max_x() const;
  void _internal_set_max_x(double value);
  public:

  // double max_y = 3;
  void clear_max_y();
  double max_y() const;
  void set_max_y(double value);
  private:
  double _internal_max_y() const;
  void _internal_set_max_y(double value);
  public:

  // int32 scale_factor = 1;
  void clear_scale_factor();
  ::PROTOBUF_NAMESPACE_ID::int32 scale_factor() const;
  void set_scale_factor(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_scale_factor() const;
  void _internal_set_scale_factor(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bytes_per_point = 6;
  void clear_bytes_per_point();
  ::PROTOBUF_NAMESPACE_ID::int32 bytes_per_point() const;
  void set_bytes_per_point(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bytes_per_point() const;
  void _internal_set_bytes_per_point(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double max_z = 4;
  void clear_max_z();
  double max_z() const;
  void set_max_z(double value);
  private:
  double _internal_max_z() const;
  void _internal_set_max_z(double value);
  public:

  // double remapping_constant = 5;
  void clear_remapping_constant();
  double remapping_constant() const;
  void set_remapping_constant(double value);
  private:
  double _internal_remapping_constant() const;
  void _internal_set_remapping_constant(double value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.PointCloud.EncodingParameters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double max_x_;
  double max_y_;
  ::PROTOBUF_NAMESPACE_ID::int32 scale_factor_;
  ::PROTOBUF_NAMESPACE_ID::int32 bytes_per_point_;
  double max_z_;
  double remapping_constant_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fpoint_5fcloud_2eproto;
};
// -------------------------------------------------------------------

class PointCloud PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.PointCloud) */ {
 public:
  inline PointCloud() : PointCloud(nullptr) {}
  virtual ~PointCloud();

  PointCloud(const PointCloud& from);
  PointCloud(PointCloud&& from) noexcept
    : PointCloud() {
    *this = ::std::move(from);
  }

  inline PointCloud& operator=(const PointCloud& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointCloud& operator=(PointCloud&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PointCloud& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PointCloud* internal_default_instance() {
    return reinterpret_cast<const PointCloud*>(
               &_PointCloud_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PointCloud& a, PointCloud& b) {
    a.Swap(&b);
  }
  inline void Swap(PointCloud* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointCloud* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PointCloud* New() const final {
    return CreateMaybeMessage<PointCloud>(nullptr);
  }

  PointCloud* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PointCloud>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PointCloud& from);
  void MergeFrom(const PointCloud& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointCloud* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.PointCloud";
  }
  protected:
  explicit PointCloud(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fpoint_5fcloud_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fpoint_5fcloud_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PointCloud_EncodingParameters EncodingParameters;

  typedef PointCloud_Encoding Encoding;
  static constexpr Encoding ENCODING_UNKNOWN =
    PointCloud_Encoding_ENCODING_UNKNOWN;
  static constexpr Encoding ENCODING_XYZ_32F =
    PointCloud_Encoding_ENCODING_XYZ_32F;
  static constexpr Encoding ENCODING_XYZ_4SC =
    PointCloud_Encoding_ENCODING_XYZ_4SC;
  static constexpr Encoding ENCODING_XYZ_5SC =
    PointCloud_Encoding_ENCODING_XYZ_5SC;
  static inline bool Encoding_IsValid(int value) {
    return PointCloud_Encoding_IsValid(value);
  }
  static constexpr Encoding Encoding_MIN =
    PointCloud_Encoding_Encoding_MIN;
  static constexpr Encoding Encoding_MAX =
    PointCloud_Encoding_Encoding_MAX;
  static constexpr int Encoding_ARRAYSIZE =
    PointCloud_Encoding_Encoding_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Encoding_descriptor() {
    return PointCloud_Encoding_descriptor();
  }
  template<typename T>
  static inline const std::string& Encoding_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Encoding>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Encoding_Name.");
    return PointCloud_Encoding_Name(enum_t_value);
  }
  static inline bool Encoding_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Encoding* value) {
    return PointCloud_Encoding_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 5,
    kSourceFieldNumber = 1,
    kEncodingParametersFieldNumber = 4,
    kNumPointsFieldNumber = 2,
    kEncodingFieldNumber = 3,
  };
  // bytes data = 5;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .bosdyn.api.PointCloudSource source = 1;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const ::bosdyn::api::PointCloudSource& source() const;
  ::bosdyn::api::PointCloudSource* release_source();
  ::bosdyn::api::PointCloudSource* mutable_source();
  void set_allocated_source(::bosdyn::api::PointCloudSource* source);
  private:
  const ::bosdyn::api::PointCloudSource& _internal_source() const;
  ::bosdyn::api::PointCloudSource* _internal_mutable_source();
  public:
  void unsafe_arena_set_allocated_source(
      ::bosdyn::api::PointCloudSource* source);
  ::bosdyn::api::PointCloudSource* unsafe_arena_release_source();

  // .bosdyn.api.PointCloud.EncodingParameters encoding_parameters = 4;
  bool has_encoding_parameters() const;
  private:
  bool _internal_has_encoding_parameters() const;
  public:
  void clear_encoding_parameters();
  const ::bosdyn::api::PointCloud_EncodingParameters& encoding_parameters() const;
  ::bosdyn::api::PointCloud_EncodingParameters* release_encoding_parameters();
  ::bosdyn::api::PointCloud_EncodingParameters* mutable_encoding_parameters();
  void set_allocated_encoding_parameters(::bosdyn::api::PointCloud_EncodingParameters* encoding_parameters);
  private:
  const ::bosdyn::api::PointCloud_EncodingParameters& _internal_encoding_parameters() const;
  ::bosdyn::api::PointCloud_EncodingParameters* _internal_mutable_encoding_parameters();
  public:
  void unsafe_arena_set_allocated_encoding_parameters(
      ::bosdyn::api::PointCloud_EncodingParameters* encoding_parameters);
  ::bosdyn::api::PointCloud_EncodingParameters* unsafe_arena_release_encoding_parameters();

  // int32 num_points = 2;
  void clear_num_points();
  ::PROTOBUF_NAMESPACE_ID::int32 num_points() const;
  void set_num_points(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_points() const;
  void _internal_set_num_points(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .bosdyn.api.PointCloud.Encoding encoding = 3;
  void clear_encoding();
  ::bosdyn::api::PointCloud_Encoding encoding() const;
  void set_encoding(::bosdyn::api::PointCloud_Encoding value);
  private:
  ::bosdyn::api::PointCloud_Encoding _internal_encoding() const;
  void _internal_set_encoding(::bosdyn::api::PointCloud_Encoding value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.PointCloud)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::bosdyn::api::PointCloudSource* source_;
  ::bosdyn::api::PointCloud_EncodingParameters* encoding_parameters_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_points_;
  int encoding_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fpoint_5fcloud_2eproto;
};
// -------------------------------------------------------------------

class GetPointCloudRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.GetPointCloudRequest) */ {
 public:
  inline GetPointCloudRequest() : GetPointCloudRequest(nullptr) {}
  virtual ~GetPointCloudRequest();

  GetPointCloudRequest(const GetPointCloudRequest& from);
  GetPointCloudRequest(GetPointCloudRequest&& from) noexcept
    : GetPointCloudRequest() {
    *this = ::std::move(from);
  }

  inline GetPointCloudRequest& operator=(const GetPointCloudRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPointCloudRequest& operator=(GetPointCloudRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPointCloudRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPointCloudRequest* internal_default_instance() {
    return reinterpret_cast<const GetPointCloudRequest*>(
               &_GetPointCloudRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetPointCloudRequest& a, GetPointCloudRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPointCloudRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPointCloudRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPointCloudRequest* New() const final {
    return CreateMaybeMessage<GetPointCloudRequest>(nullptr);
  }

  GetPointCloudRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPointCloudRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPointCloudRequest& from);
  void MergeFrom(const GetPointCloudRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPointCloudRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.GetPointCloudRequest";
  }
  protected:
  explicit GetPointCloudRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fpoint_5fcloud_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fpoint_5fcloud_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
  };
  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.GetPointCloudRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::RequestHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fpoint_5fcloud_2eproto;
};
// -------------------------------------------------------------------

class GetPointCloudResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.GetPointCloudResponse) */ {
 public:
  inline GetPointCloudResponse() : GetPointCloudResponse(nullptr) {}
  virtual ~GetPointCloudResponse();

  GetPointCloudResponse(const GetPointCloudResponse& from);
  GetPointCloudResponse(GetPointCloudResponse&& from) noexcept
    : GetPointCloudResponse() {
    *this = ::std::move(from);
  }

  inline GetPointCloudResponse& operator=(const GetPointCloudResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPointCloudResponse& operator=(GetPointCloudResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPointCloudResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPointCloudResponse* internal_default_instance() {
    return reinterpret_cast<const GetPointCloudResponse*>(
               &_GetPointCloudResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetPointCloudResponse& a, GetPointCloudResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPointCloudResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPointCloudResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPointCloudResponse* New() const final {
    return CreateMaybeMessage<GetPointCloudResponse>(nullptr);
  }

  GetPointCloudResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPointCloudResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPointCloudResponse& from);
  void MergeFrom(const GetPointCloudResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPointCloudResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.GetPointCloudResponse";
  }
  protected:
  explicit GetPointCloudResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fpoint_5fcloud_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fpoint_5fcloud_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetPointCloudResponse_Status Status;
  static constexpr Status STATUS_UNKNOWN =
    GetPointCloudResponse_Status_STATUS_UNKNOWN;
  static constexpr Status STATUS_OK =
    GetPointCloudResponse_Status_STATUS_OK;
  static constexpr Status STATUS_SOURCE_DATA_ERROR =
    GetPointCloudResponse_Status_STATUS_SOURCE_DATA_ERROR;
  static constexpr Status STATUS_POINT_CLOUD_DATA_ERROR =
    GetPointCloudResponse_Status_STATUS_POINT_CLOUD_DATA_ERROR;
  static inline bool Status_IsValid(int value) {
    return GetPointCloudResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    GetPointCloudResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    GetPointCloudResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    GetPointCloudResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return GetPointCloudResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return GetPointCloudResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return GetPointCloudResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kPointCloudFieldNumber = 3,
    kStatusFieldNumber = 2,
  };
  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // .bosdyn.api.PointCloud point_cloud = 3;
  bool has_point_cloud() const;
  private:
  bool _internal_has_point_cloud() const;
  public:
  void clear_point_cloud();
  const ::bosdyn::api::PointCloud& point_cloud() const;
  ::bosdyn::api::PointCloud* release_point_cloud();
  ::bosdyn::api::PointCloud* mutable_point_cloud();
  void set_allocated_point_cloud(::bosdyn::api::PointCloud* point_cloud);
  private:
  const ::bosdyn::api::PointCloud& _internal_point_cloud() const;
  ::bosdyn::api::PointCloud* _internal_mutable_point_cloud();
  public:
  void unsafe_arena_set_allocated_point_cloud(
      ::bosdyn::api::PointCloud* point_cloud);
  ::bosdyn::api::PointCloud* unsafe_arena_release_point_cloud();

  // .bosdyn.api.GetPointCloudResponse.Status status = 2;
  void clear_status();
  ::bosdyn::api::GetPointCloudResponse_Status status() const;
  void set_status(::bosdyn::api::GetPointCloudResponse_Status value);
  private:
  ::bosdyn::api::GetPointCloudResponse_Status _internal_status() const;
  void _internal_set_status(::bosdyn::api::GetPointCloudResponse_Status value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.GetPointCloudResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::ResponseHeader* header_;
  ::bosdyn::api::PointCloud* point_cloud_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fpoint_5fcloud_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PointCloudSource

// string name = 1;
inline void PointCloudSource::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PointCloudSource::name() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.PointCloudSource.name)
  return _internal_name();
}
inline void PointCloudSource::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.PointCloudSource.name)
}
inline std::string* PointCloudSource::mutable_name() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.PointCloudSource.name)
  return _internal_mutable_name();
}
inline const std::string& PointCloudSource::_internal_name() const {
  return name_.Get();
}
inline void PointCloudSource::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PointCloudSource::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.PointCloudSource.name)
}
inline void PointCloudSource::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.PointCloudSource.name)
}
inline void PointCloudSource::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.PointCloudSource.name)
}
inline std::string* PointCloudSource::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PointCloudSource::release_name() {
  // @@protoc_insertion_point(field_release:bosdyn.api.PointCloudSource.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PointCloudSource::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.PointCloudSource.name)
}

// string frame_name_sensor = 3;
inline void PointCloudSource::clear_frame_name_sensor() {
  frame_name_sensor_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PointCloudSource::frame_name_sensor() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.PointCloudSource.frame_name_sensor)
  return _internal_frame_name_sensor();
}
inline void PointCloudSource::set_frame_name_sensor(const std::string& value) {
  _internal_set_frame_name_sensor(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.PointCloudSource.frame_name_sensor)
}
inline std::string* PointCloudSource::mutable_frame_name_sensor() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.PointCloudSource.frame_name_sensor)
  return _internal_mutable_frame_name_sensor();
}
inline const std::string& PointCloudSource::_internal_frame_name_sensor() const {
  return frame_name_sensor_.Get();
}
inline void PointCloudSource::_internal_set_frame_name_sensor(const std::string& value) {
  
  frame_name_sensor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PointCloudSource::set_frame_name_sensor(std::string&& value) {
  
  frame_name_sensor_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.PointCloudSource.frame_name_sensor)
}
inline void PointCloudSource::set_frame_name_sensor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  frame_name_sensor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.PointCloudSource.frame_name_sensor)
}
inline void PointCloudSource::set_frame_name_sensor(const char* value,
    size_t size) {
  
  frame_name_sensor_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.PointCloudSource.frame_name_sensor)
}
inline std::string* PointCloudSource::_internal_mutable_frame_name_sensor() {
  
  return frame_name_sensor_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PointCloudSource::release_frame_name_sensor() {
  // @@protoc_insertion_point(field_release:bosdyn.api.PointCloudSource.frame_name_sensor)
  return frame_name_sensor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PointCloudSource::set_allocated_frame_name_sensor(std::string* frame_name_sensor) {
  if (frame_name_sensor != nullptr) {
    
  } else {
    
  }
  frame_name_sensor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), frame_name_sensor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.PointCloudSource.frame_name_sensor)
}

// .google.protobuf.Timestamp acquisition_time = 30;
inline bool PointCloudSource::_internal_has_acquisition_time() const {
  return this != internal_default_instance() && acquisition_time_ != nullptr;
}
inline bool PointCloudSource::has_acquisition_time() const {
  return _internal_has_acquisition_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& PointCloudSource::_internal_acquisition_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = acquisition_time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& PointCloudSource::acquisition_time() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.PointCloudSource.acquisition_time)
  return _internal_acquisition_time();
}
inline void PointCloudSource::unsafe_arena_set_allocated_acquisition_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* acquisition_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acquisition_time_);
  }
  acquisition_time_ = acquisition_time;
  if (acquisition_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.PointCloudSource.acquisition_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* PointCloudSource::release_acquisition_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = acquisition_time_;
  acquisition_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* PointCloudSource::unsafe_arena_release_acquisition_time() {
  // @@protoc_insertion_point(field_release:bosdyn.api.PointCloudSource.acquisition_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = acquisition_time_;
  acquisition_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* PointCloudSource::_internal_mutable_acquisition_time() {
  
  if (acquisition_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    acquisition_time_ = p;
  }
  return acquisition_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* PointCloudSource::mutable_acquisition_time() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.PointCloudSource.acquisition_time)
  return _internal_mutable_acquisition_time();
}
inline void PointCloudSource::set_allocated_acquisition_time(PROTOBUF_NAMESPACE_ID::Timestamp* acquisition_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(acquisition_time_);
  }
  if (acquisition_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acquisition_time)->GetArena();
    if (message_arena != submessage_arena) {
      acquisition_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acquisition_time, submessage_arena);
    }
    
  } else {
    
  }
  acquisition_time_ = acquisition_time;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.PointCloudSource.acquisition_time)
}

// .bosdyn.api.FrameTreeSnapshot transforms_snapshot = 31;
inline bool PointCloudSource::_internal_has_transforms_snapshot() const {
  return this != internal_default_instance() && transforms_snapshot_ != nullptr;
}
inline bool PointCloudSource::has_transforms_snapshot() const {
  return _internal_has_transforms_snapshot();
}
inline const ::bosdyn::api::FrameTreeSnapshot& PointCloudSource::_internal_transforms_snapshot() const {
  const ::bosdyn::api::FrameTreeSnapshot* p = transforms_snapshot_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::FrameTreeSnapshot*>(
      &::bosdyn::api::_FrameTreeSnapshot_default_instance_);
}
inline const ::bosdyn::api::FrameTreeSnapshot& PointCloudSource::transforms_snapshot() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.PointCloudSource.transforms_snapshot)
  return _internal_transforms_snapshot();
}
inline void PointCloudSource::unsafe_arena_set_allocated_transforms_snapshot(
    ::bosdyn::api::FrameTreeSnapshot* transforms_snapshot) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transforms_snapshot_);
  }
  transforms_snapshot_ = transforms_snapshot;
  if (transforms_snapshot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.PointCloudSource.transforms_snapshot)
}
inline ::bosdyn::api::FrameTreeSnapshot* PointCloudSource::release_transforms_snapshot() {
  
  ::bosdyn::api::FrameTreeSnapshot* temp = transforms_snapshot_;
  transforms_snapshot_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::FrameTreeSnapshot* PointCloudSource::unsafe_arena_release_transforms_snapshot() {
  // @@protoc_insertion_point(field_release:bosdyn.api.PointCloudSource.transforms_snapshot)
  
  ::bosdyn::api::FrameTreeSnapshot* temp = transforms_snapshot_;
  transforms_snapshot_ = nullptr;
  return temp;
}
inline ::bosdyn::api::FrameTreeSnapshot* PointCloudSource::_internal_mutable_transforms_snapshot() {
  
  if (transforms_snapshot_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::FrameTreeSnapshot>(GetArena());
    transforms_snapshot_ = p;
  }
  return transforms_snapshot_;
}
inline ::bosdyn::api::FrameTreeSnapshot* PointCloudSource::mutable_transforms_snapshot() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.PointCloudSource.transforms_snapshot)
  return _internal_mutable_transforms_snapshot();
}
inline void PointCloudSource::set_allocated_transforms_snapshot(::bosdyn::api::FrameTreeSnapshot* transforms_snapshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transforms_snapshot_);
  }
  if (transforms_snapshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transforms_snapshot)->GetArena();
    if (message_arena != submessage_arena) {
      transforms_snapshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transforms_snapshot, submessage_arena);
    }
    
  } else {
    
  }
  transforms_snapshot_ = transforms_snapshot;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.PointCloudSource.transforms_snapshot)
}

// -------------------------------------------------------------------

// PointCloud_EncodingParameters

// int32 scale_factor = 1;
inline void PointCloud_EncodingParameters::clear_scale_factor() {
  scale_factor_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PointCloud_EncodingParameters::_internal_scale_factor() const {
  return scale_factor_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PointCloud_EncodingParameters::scale_factor() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.PointCloud.EncodingParameters.scale_factor)
  return _internal_scale_factor();
}
inline void PointCloud_EncodingParameters::_internal_set_scale_factor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  scale_factor_ = value;
}
inline void PointCloud_EncodingParameters::set_scale_factor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_scale_factor(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.PointCloud.EncodingParameters.scale_factor)
}

// double max_x = 2;
inline void PointCloud_EncodingParameters::clear_max_x() {
  max_x_ = 0;
}
inline double PointCloud_EncodingParameters::_internal_max_x() const {
  return max_x_;
}
inline double PointCloud_EncodingParameters::max_x() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.PointCloud.EncodingParameters.max_x)
  return _internal_max_x();
}
inline void PointCloud_EncodingParameters::_internal_set_max_x(double value) {
  
  max_x_ = value;
}
inline void PointCloud_EncodingParameters::set_max_x(double value) {
  _internal_set_max_x(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.PointCloud.EncodingParameters.max_x)
}

// double max_y = 3;
inline void PointCloud_EncodingParameters::clear_max_y() {
  max_y_ = 0;
}
inline double PointCloud_EncodingParameters::_internal_max_y() const {
  return max_y_;
}
inline double PointCloud_EncodingParameters::max_y() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.PointCloud.EncodingParameters.max_y)
  return _internal_max_y();
}
inline void PointCloud_EncodingParameters::_internal_set_max_y(double value) {
  
  max_y_ = value;
}
inline void PointCloud_EncodingParameters::set_max_y(double value) {
  _internal_set_max_y(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.PointCloud.EncodingParameters.max_y)
}

// double max_z = 4;
inline void PointCloud_EncodingParameters::clear_max_z() {
  max_z_ = 0;
}
inline double PointCloud_EncodingParameters::_internal_max_z() const {
  return max_z_;
}
inline double PointCloud_EncodingParameters::max_z() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.PointCloud.EncodingParameters.max_z)
  return _internal_max_z();
}
inline void PointCloud_EncodingParameters::_internal_set_max_z(double value) {
  
  max_z_ = value;
}
inline void PointCloud_EncodingParameters::set_max_z(double value) {
  _internal_set_max_z(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.PointCloud.EncodingParameters.max_z)
}

// double remapping_constant = 5;
inline void PointCloud_EncodingParameters::clear_remapping_constant() {
  remapping_constant_ = 0;
}
inline double PointCloud_EncodingParameters::_internal_remapping_constant() const {
  return remapping_constant_;
}
inline double PointCloud_EncodingParameters::remapping_constant() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.PointCloud.EncodingParameters.remapping_constant)
  return _internal_remapping_constant();
}
inline void PointCloud_EncodingParameters::_internal_set_remapping_constant(double value) {
  
  remapping_constant_ = value;
}
inline void PointCloud_EncodingParameters::set_remapping_constant(double value) {
  _internal_set_remapping_constant(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.PointCloud.EncodingParameters.remapping_constant)
}

// int32 bytes_per_point = 6;
inline void PointCloud_EncodingParameters::clear_bytes_per_point() {
  bytes_per_point_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PointCloud_EncodingParameters::_internal_bytes_per_point() const {
  return bytes_per_point_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PointCloud_EncodingParameters::bytes_per_point() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.PointCloud.EncodingParameters.bytes_per_point)
  return _internal_bytes_per_point();
}
inline void PointCloud_EncodingParameters::_internal_set_bytes_per_point(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bytes_per_point_ = value;
}
inline void PointCloud_EncodingParameters::set_bytes_per_point(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bytes_per_point(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.PointCloud.EncodingParameters.bytes_per_point)
}

// -------------------------------------------------------------------

// PointCloud

// .bosdyn.api.PointCloudSource source = 1;
inline bool PointCloud::_internal_has_source() const {
  return this != internal_default_instance() && source_ != nullptr;
}
inline bool PointCloud::has_source() const {
  return _internal_has_source();
}
inline void PointCloud::clear_source() {
  if (GetArena() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
}
inline const ::bosdyn::api::PointCloudSource& PointCloud::_internal_source() const {
  const ::bosdyn::api::PointCloudSource* p = source_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::PointCloudSource*>(
      &::bosdyn::api::_PointCloudSource_default_instance_);
}
inline const ::bosdyn::api::PointCloudSource& PointCloud::source() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.PointCloud.source)
  return _internal_source();
}
inline void PointCloud::unsafe_arena_set_allocated_source(
    ::bosdyn::api::PointCloudSource* source) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_);
  }
  source_ = source;
  if (source) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.PointCloud.source)
}
inline ::bosdyn::api::PointCloudSource* PointCloud::release_source() {
  
  ::bosdyn::api::PointCloudSource* temp = source_;
  source_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::PointCloudSource* PointCloud::unsafe_arena_release_source() {
  // @@protoc_insertion_point(field_release:bosdyn.api.PointCloud.source)
  
  ::bosdyn::api::PointCloudSource* temp = source_;
  source_ = nullptr;
  return temp;
}
inline ::bosdyn::api::PointCloudSource* PointCloud::_internal_mutable_source() {
  
  if (source_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::PointCloudSource>(GetArena());
    source_ = p;
  }
  return source_;
}
inline ::bosdyn::api::PointCloudSource* PointCloud::mutable_source() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.PointCloud.source)
  return _internal_mutable_source();
}
inline void PointCloud::set_allocated_source(::bosdyn::api::PointCloudSource* source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete source_;
  }
  if (source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(source);
    if (message_arena != submessage_arena) {
      source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    
  } else {
    
  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.PointCloud.source)
}

// int32 num_points = 2;
inline void PointCloud::clear_num_points() {
  num_points_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PointCloud::_internal_num_points() const {
  return num_points_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PointCloud::num_points() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.PointCloud.num_points)
  return _internal_num_points();
}
inline void PointCloud::_internal_set_num_points(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_points_ = value;
}
inline void PointCloud::set_num_points(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_points(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.PointCloud.num_points)
}

// .bosdyn.api.PointCloud.Encoding encoding = 3;
inline void PointCloud::clear_encoding() {
  encoding_ = 0;
}
inline ::bosdyn::api::PointCloud_Encoding PointCloud::_internal_encoding() const {
  return static_cast< ::bosdyn::api::PointCloud_Encoding >(encoding_);
}
inline ::bosdyn::api::PointCloud_Encoding PointCloud::encoding() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.PointCloud.encoding)
  return _internal_encoding();
}
inline void PointCloud::_internal_set_encoding(::bosdyn::api::PointCloud_Encoding value) {
  
  encoding_ = value;
}
inline void PointCloud::set_encoding(::bosdyn::api::PointCloud_Encoding value) {
  _internal_set_encoding(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.PointCloud.encoding)
}

// .bosdyn.api.PointCloud.EncodingParameters encoding_parameters = 4;
inline bool PointCloud::_internal_has_encoding_parameters() const {
  return this != internal_default_instance() && encoding_parameters_ != nullptr;
}
inline bool PointCloud::has_encoding_parameters() const {
  return _internal_has_encoding_parameters();
}
inline void PointCloud::clear_encoding_parameters() {
  if (GetArena() == nullptr && encoding_parameters_ != nullptr) {
    delete encoding_parameters_;
  }
  encoding_parameters_ = nullptr;
}
inline const ::bosdyn::api::PointCloud_EncodingParameters& PointCloud::_internal_encoding_parameters() const {
  const ::bosdyn::api::PointCloud_EncodingParameters* p = encoding_parameters_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::PointCloud_EncodingParameters*>(
      &::bosdyn::api::_PointCloud_EncodingParameters_default_instance_);
}
inline const ::bosdyn::api::PointCloud_EncodingParameters& PointCloud::encoding_parameters() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.PointCloud.encoding_parameters)
  return _internal_encoding_parameters();
}
inline void PointCloud::unsafe_arena_set_allocated_encoding_parameters(
    ::bosdyn::api::PointCloud_EncodingParameters* encoding_parameters) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(encoding_parameters_);
  }
  encoding_parameters_ = encoding_parameters;
  if (encoding_parameters) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.PointCloud.encoding_parameters)
}
inline ::bosdyn::api::PointCloud_EncodingParameters* PointCloud::release_encoding_parameters() {
  
  ::bosdyn::api::PointCloud_EncodingParameters* temp = encoding_parameters_;
  encoding_parameters_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::PointCloud_EncodingParameters* PointCloud::unsafe_arena_release_encoding_parameters() {
  // @@protoc_insertion_point(field_release:bosdyn.api.PointCloud.encoding_parameters)
  
  ::bosdyn::api::PointCloud_EncodingParameters* temp = encoding_parameters_;
  encoding_parameters_ = nullptr;
  return temp;
}
inline ::bosdyn::api::PointCloud_EncodingParameters* PointCloud::_internal_mutable_encoding_parameters() {
  
  if (encoding_parameters_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::PointCloud_EncodingParameters>(GetArena());
    encoding_parameters_ = p;
  }
  return encoding_parameters_;
}
inline ::bosdyn::api::PointCloud_EncodingParameters* PointCloud::mutable_encoding_parameters() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.PointCloud.encoding_parameters)
  return _internal_mutable_encoding_parameters();
}
inline void PointCloud::set_allocated_encoding_parameters(::bosdyn::api::PointCloud_EncodingParameters* encoding_parameters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete encoding_parameters_;
  }
  if (encoding_parameters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(encoding_parameters);
    if (message_arena != submessage_arena) {
      encoding_parameters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, encoding_parameters, submessage_arena);
    }
    
  } else {
    
  }
  encoding_parameters_ = encoding_parameters;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.PointCloud.encoding_parameters)
}

// bytes data = 5;
inline void PointCloud::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PointCloud::data() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.PointCloud.data)
  return _internal_data();
}
inline void PointCloud::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.PointCloud.data)
}
inline std::string* PointCloud::mutable_data() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.PointCloud.data)
  return _internal_mutable_data();
}
inline const std::string& PointCloud::_internal_data() const {
  return data_.Get();
}
inline void PointCloud::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PointCloud::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.PointCloud.data)
}
inline void PointCloud::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.PointCloud.data)
}
inline void PointCloud::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.PointCloud.data)
}
inline std::string* PointCloud::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PointCloud::release_data() {
  // @@protoc_insertion_point(field_release:bosdyn.api.PointCloud.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PointCloud::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.PointCloud.data)
}

// -------------------------------------------------------------------

// GetPointCloudRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool GetPointCloudRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool GetPointCloudRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& GetPointCloudRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::RequestHeader*>(
      &::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& GetPointCloudRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GetPointCloudRequest.header)
  return _internal_header();
}
inline void GetPointCloudRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.GetPointCloudRequest.header)
}
inline ::bosdyn::api::RequestHeader* GetPointCloudRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::RequestHeader* GetPointCloudRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.GetPointCloudRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* GetPointCloudRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::RequestHeader* GetPointCloudRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GetPointCloudRequest.header)
  return _internal_mutable_header();
}
inline void GetPointCloudRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.GetPointCloudRequest.header)
}

// -------------------------------------------------------------------

// GetPointCloudResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool GetPointCloudResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool GetPointCloudResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& GetPointCloudResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::ResponseHeader*>(
      &::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& GetPointCloudResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GetPointCloudResponse.header)
  return _internal_header();
}
inline void GetPointCloudResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.GetPointCloudResponse.header)
}
inline ::bosdyn::api::ResponseHeader* GetPointCloudResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::ResponseHeader* GetPointCloudResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.GetPointCloudResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* GetPointCloudResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::ResponseHeader* GetPointCloudResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GetPointCloudResponse.header)
  return _internal_mutable_header();
}
inline void GetPointCloudResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.GetPointCloudResponse.header)
}

// .bosdyn.api.GetPointCloudResponse.Status status = 2;
inline void GetPointCloudResponse::clear_status() {
  status_ = 0;
}
inline ::bosdyn::api::GetPointCloudResponse_Status GetPointCloudResponse::_internal_status() const {
  return static_cast< ::bosdyn::api::GetPointCloudResponse_Status >(status_);
}
inline ::bosdyn::api::GetPointCloudResponse_Status GetPointCloudResponse::status() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GetPointCloudResponse.status)
  return _internal_status();
}
inline void GetPointCloudResponse::_internal_set_status(::bosdyn::api::GetPointCloudResponse_Status value) {
  
  status_ = value;
}
inline void GetPointCloudResponse::set_status(::bosdyn::api::GetPointCloudResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.GetPointCloudResponse.status)
}

// .bosdyn.api.PointCloud point_cloud = 3;
inline bool GetPointCloudResponse::_internal_has_point_cloud() const {
  return this != internal_default_instance() && point_cloud_ != nullptr;
}
inline bool GetPointCloudResponse::has_point_cloud() const {
  return _internal_has_point_cloud();
}
inline void GetPointCloudResponse::clear_point_cloud() {
  if (GetArena() == nullptr && point_cloud_ != nullptr) {
    delete point_cloud_;
  }
  point_cloud_ = nullptr;
}
inline const ::bosdyn::api::PointCloud& GetPointCloudResponse::_internal_point_cloud() const {
  const ::bosdyn::api::PointCloud* p = point_cloud_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::PointCloud*>(
      &::bosdyn::api::_PointCloud_default_instance_);
}
inline const ::bosdyn::api::PointCloud& GetPointCloudResponse::point_cloud() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.GetPointCloudResponse.point_cloud)
  return _internal_point_cloud();
}
inline void GetPointCloudResponse::unsafe_arena_set_allocated_point_cloud(
    ::bosdyn::api::PointCloud* point_cloud) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(point_cloud_);
  }
  point_cloud_ = point_cloud;
  if (point_cloud) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.GetPointCloudResponse.point_cloud)
}
inline ::bosdyn::api::PointCloud* GetPointCloudResponse::release_point_cloud() {
  
  ::bosdyn::api::PointCloud* temp = point_cloud_;
  point_cloud_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::PointCloud* GetPointCloudResponse::unsafe_arena_release_point_cloud() {
  // @@protoc_insertion_point(field_release:bosdyn.api.GetPointCloudResponse.point_cloud)
  
  ::bosdyn::api::PointCloud* temp = point_cloud_;
  point_cloud_ = nullptr;
  return temp;
}
inline ::bosdyn::api::PointCloud* GetPointCloudResponse::_internal_mutable_point_cloud() {
  
  if (point_cloud_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::PointCloud>(GetArena());
    point_cloud_ = p;
  }
  return point_cloud_;
}
inline ::bosdyn::api::PointCloud* GetPointCloudResponse::mutable_point_cloud() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.GetPointCloudResponse.point_cloud)
  return _internal_mutable_point_cloud();
}
inline void GetPointCloudResponse::set_allocated_point_cloud(::bosdyn::api::PointCloud* point_cloud) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete point_cloud_;
  }
  if (point_cloud) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(point_cloud);
    if (message_arena != submessage_arena) {
      point_cloud = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, point_cloud, submessage_arena);
    }
    
  } else {
    
  }
  point_cloud_ = point_cloud;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.GetPointCloudResponse.point_cloud)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace bosdyn

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bosdyn::api::PointCloud_Encoding> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::PointCloud_Encoding>() {
  return ::bosdyn::api::PointCloud_Encoding_descriptor();
}
template <> struct is_proto_enum< ::bosdyn::api::GetPointCloudResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::GetPointCloudResponse_Status>() {
  return ::bosdyn::api::GetPointCloudResponse_Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fpoint_5fcloud_2eproto
