// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bosdyn/api/directory_registration_service.proto
// Original file comments:
// Copyright (c) 2020 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).
//
#ifndef GRPC_bosdyn_2fapi_2fdirectory_5fregistration_5fservice_2eproto__INCLUDED
#define GRPC_bosdyn_2fapi_2fdirectory_5fregistration_5fservice_2eproto__INCLUDED

#include "bosdyn/api/directory_registration_service.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace bosdyn {
namespace api {

// DirectoryRegistrationService is a private class that lets services be
// discovered by clients by adding them to a discovery database.  Services
// can live on robot, payload, or other accessible cloud-based locations.
// Each service is responsible for registering itself with this service.
class DirectoryRegistrationService final {
 public:
  static constexpr char const* service_full_name() {
    return "bosdyn.api.DirectoryRegistrationService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Called by a producer to register as a provider with the application.  Returns the
    // record for that provider.  Requires unique name and correctly filled out service
    // record in request.
    virtual ::grpc::Status RegisterService(::grpc::ClientContext* context, const ::bosdyn::api::RegisterServiceRequest& request, ::bosdyn::api::RegisterServiceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RegisterServiceResponse>> AsyncRegisterService(::grpc::ClientContext* context, const ::bosdyn::api::RegisterServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RegisterServiceResponse>>(AsyncRegisterServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RegisterServiceResponse>> PrepareAsyncRegisterService(::grpc::ClientContext* context, const ::bosdyn::api::RegisterServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RegisterServiceResponse>>(PrepareAsyncRegisterServiceRaw(context, request, cq));
    }
    // Called by a producer to remove its registration from the DirectoryManager.
    virtual ::grpc::Status UnregisterService(::grpc::ClientContext* context, const ::bosdyn::api::UnregisterServiceRequest& request, ::bosdyn::api::UnregisterServiceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::UnregisterServiceResponse>> AsyncUnregisterService(::grpc::ClientContext* context, const ::bosdyn::api::UnregisterServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::UnregisterServiceResponse>>(AsyncUnregisterServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::UnregisterServiceResponse>> PrepareAsyncUnregisterService(::grpc::ClientContext* context, const ::bosdyn::api::UnregisterServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::UnregisterServiceResponse>>(PrepareAsyncUnregisterServiceRaw(context, request, cq));
    }
    // Update the ServiceEntry for a producer on the server.
    virtual ::grpc::Status UpdateService(::grpc::ClientContext* context, const ::bosdyn::api::UpdateServiceRequest& request, ::bosdyn::api::UpdateServiceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::UpdateServiceResponse>> AsyncUpdateService(::grpc::ClientContext* context, const ::bosdyn::api::UpdateServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::UpdateServiceResponse>>(AsyncUpdateServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::UpdateServiceResponse>> PrepareAsyncUpdateService(::grpc::ClientContext* context, const ::bosdyn::api::UpdateServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::UpdateServiceResponse>>(PrepareAsyncUpdateServiceRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Called by a producer to register as a provider with the application.  Returns the
      // record for that provider.  Requires unique name and correctly filled out service
      // record in request.
      virtual void RegisterService(::grpc::ClientContext* context, const ::bosdyn::api::RegisterServiceRequest* request, ::bosdyn::api::RegisterServiceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegisterService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::RegisterServiceResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RegisterService(::grpc::ClientContext* context, const ::bosdyn::api::RegisterServiceRequest* request, ::bosdyn::api::RegisterServiceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RegisterService(::grpc::ClientContext* context, const ::bosdyn::api::RegisterServiceRequest* request, ::bosdyn::api::RegisterServiceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RegisterService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::RegisterServiceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RegisterService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::RegisterServiceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Called by a producer to remove its registration from the DirectoryManager.
      virtual void UnregisterService(::grpc::ClientContext* context, const ::bosdyn::api::UnregisterServiceRequest* request, ::bosdyn::api::UnregisterServiceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UnregisterService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::UnregisterServiceResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UnregisterService(::grpc::ClientContext* context, const ::bosdyn::api::UnregisterServiceRequest* request, ::bosdyn::api::UnregisterServiceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UnregisterService(::grpc::ClientContext* context, const ::bosdyn::api::UnregisterServiceRequest* request, ::bosdyn::api::UnregisterServiceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UnregisterService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::UnregisterServiceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UnregisterService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::UnregisterServiceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Update the ServiceEntry for a producer on the server.
      virtual void UpdateService(::grpc::ClientContext* context, const ::bosdyn::api::UpdateServiceRequest* request, ::bosdyn::api::UpdateServiceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::UpdateServiceResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateService(::grpc::ClientContext* context, const ::bosdyn::api::UpdateServiceRequest* request, ::bosdyn::api::UpdateServiceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateService(::grpc::ClientContext* context, const ::bosdyn::api::UpdateServiceRequest* request, ::bosdyn::api::UpdateServiceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::UpdateServiceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::UpdateServiceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RegisterServiceResponse>* AsyncRegisterServiceRaw(::grpc::ClientContext* context, const ::bosdyn::api::RegisterServiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::RegisterServiceResponse>* PrepareAsyncRegisterServiceRaw(::grpc::ClientContext* context, const ::bosdyn::api::RegisterServiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::UnregisterServiceResponse>* AsyncUnregisterServiceRaw(::grpc::ClientContext* context, const ::bosdyn::api::UnregisterServiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::UnregisterServiceResponse>* PrepareAsyncUnregisterServiceRaw(::grpc::ClientContext* context, const ::bosdyn::api::UnregisterServiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::UpdateServiceResponse>* AsyncUpdateServiceRaw(::grpc::ClientContext* context, const ::bosdyn::api::UpdateServiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bosdyn::api::UpdateServiceResponse>* PrepareAsyncUpdateServiceRaw(::grpc::ClientContext* context, const ::bosdyn::api::UpdateServiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status RegisterService(::grpc::ClientContext* context, const ::bosdyn::api::RegisterServiceRequest& request, ::bosdyn::api::RegisterServiceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RegisterServiceResponse>> AsyncRegisterService(::grpc::ClientContext* context, const ::bosdyn::api::RegisterServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RegisterServiceResponse>>(AsyncRegisterServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RegisterServiceResponse>> PrepareAsyncRegisterService(::grpc::ClientContext* context, const ::bosdyn::api::RegisterServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RegisterServiceResponse>>(PrepareAsyncRegisterServiceRaw(context, request, cq));
    }
    ::grpc::Status UnregisterService(::grpc::ClientContext* context, const ::bosdyn::api::UnregisterServiceRequest& request, ::bosdyn::api::UnregisterServiceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::UnregisterServiceResponse>> AsyncUnregisterService(::grpc::ClientContext* context, const ::bosdyn::api::UnregisterServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::UnregisterServiceResponse>>(AsyncUnregisterServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::UnregisterServiceResponse>> PrepareAsyncUnregisterService(::grpc::ClientContext* context, const ::bosdyn::api::UnregisterServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::UnregisterServiceResponse>>(PrepareAsyncUnregisterServiceRaw(context, request, cq));
    }
    ::grpc::Status UpdateService(::grpc::ClientContext* context, const ::bosdyn::api::UpdateServiceRequest& request, ::bosdyn::api::UpdateServiceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::UpdateServiceResponse>> AsyncUpdateService(::grpc::ClientContext* context, const ::bosdyn::api::UpdateServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::UpdateServiceResponse>>(AsyncUpdateServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::UpdateServiceResponse>> PrepareAsyncUpdateService(::grpc::ClientContext* context, const ::bosdyn::api::UpdateServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bosdyn::api::UpdateServiceResponse>>(PrepareAsyncUpdateServiceRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void RegisterService(::grpc::ClientContext* context, const ::bosdyn::api::RegisterServiceRequest* request, ::bosdyn::api::RegisterServiceResponse* response, std::function<void(::grpc::Status)>) override;
      void RegisterService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::RegisterServiceResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RegisterService(::grpc::ClientContext* context, const ::bosdyn::api::RegisterServiceRequest* request, ::bosdyn::api::RegisterServiceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RegisterService(::grpc::ClientContext* context, const ::bosdyn::api::RegisterServiceRequest* request, ::bosdyn::api::RegisterServiceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RegisterService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::RegisterServiceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RegisterService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::RegisterServiceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UnregisterService(::grpc::ClientContext* context, const ::bosdyn::api::UnregisterServiceRequest* request, ::bosdyn::api::UnregisterServiceResponse* response, std::function<void(::grpc::Status)>) override;
      void UnregisterService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::UnregisterServiceResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UnregisterService(::grpc::ClientContext* context, const ::bosdyn::api::UnregisterServiceRequest* request, ::bosdyn::api::UnregisterServiceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UnregisterService(::grpc::ClientContext* context, const ::bosdyn::api::UnregisterServiceRequest* request, ::bosdyn::api::UnregisterServiceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UnregisterService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::UnregisterServiceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UnregisterService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::UnregisterServiceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UpdateService(::grpc::ClientContext* context, const ::bosdyn::api::UpdateServiceRequest* request, ::bosdyn::api::UpdateServiceResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::UpdateServiceResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateService(::grpc::ClientContext* context, const ::bosdyn::api::UpdateServiceRequest* request, ::bosdyn::api::UpdateServiceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateService(::grpc::ClientContext* context, const ::bosdyn::api::UpdateServiceRequest* request, ::bosdyn::api::UpdateServiceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::UpdateServiceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateService(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::UpdateServiceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RegisterServiceResponse>* AsyncRegisterServiceRaw(::grpc::ClientContext* context, const ::bosdyn::api::RegisterServiceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::RegisterServiceResponse>* PrepareAsyncRegisterServiceRaw(::grpc::ClientContext* context, const ::bosdyn::api::RegisterServiceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::UnregisterServiceResponse>* AsyncUnregisterServiceRaw(::grpc::ClientContext* context, const ::bosdyn::api::UnregisterServiceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::UnregisterServiceResponse>* PrepareAsyncUnregisterServiceRaw(::grpc::ClientContext* context, const ::bosdyn::api::UnregisterServiceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::UpdateServiceResponse>* AsyncUpdateServiceRaw(::grpc::ClientContext* context, const ::bosdyn::api::UpdateServiceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bosdyn::api::UpdateServiceResponse>* PrepareAsyncUpdateServiceRaw(::grpc::ClientContext* context, const ::bosdyn::api::UpdateServiceRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterService_;
    const ::grpc::internal::RpcMethod rpcmethod_UnregisterService_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateService_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Called by a producer to register as a provider with the application.  Returns the
    // record for that provider.  Requires unique name and correctly filled out service
    // record in request.
    virtual ::grpc::Status RegisterService(::grpc::ServerContext* context, const ::bosdyn::api::RegisterServiceRequest* request, ::bosdyn::api::RegisterServiceResponse* response);
    // Called by a producer to remove its registration from the DirectoryManager.
    virtual ::grpc::Status UnregisterService(::grpc::ServerContext* context, const ::bosdyn::api::UnregisterServiceRequest* request, ::bosdyn::api::UnregisterServiceResponse* response);
    // Update the ServiceEntry for a producer on the server.
    virtual ::grpc::Status UpdateService(::grpc::ServerContext* context, const ::bosdyn::api::UpdateServiceRequest* request, ::bosdyn::api::UpdateServiceResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterService() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RegisterService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterService(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RegisterServiceRequest* /*request*/, ::bosdyn::api::RegisterServiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterService(::grpc::ServerContext* context, ::bosdyn::api::RegisterServiceRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::RegisterServiceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UnregisterService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UnregisterService() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_UnregisterService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnregisterService(::grpc::ServerContext* /*context*/, const ::bosdyn::api::UnregisterServiceRequest* /*request*/, ::bosdyn::api::UnregisterServiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnregisterService(::grpc::ServerContext* context, ::bosdyn::api::UnregisterServiceRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::UnregisterServiceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateService() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateService(::grpc::ServerContext* /*context*/, const ::bosdyn::api::UpdateServiceRequest* /*request*/, ::bosdyn::api::UpdateServiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateService(::grpc::ServerContext* context, ::bosdyn::api::UpdateServiceRequest* request, ::grpc::ServerAsyncResponseWriter< ::bosdyn::api::UpdateServiceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RegisterService<WithAsyncMethod_UnregisterService<WithAsyncMethod_UpdateService<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RegisterService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RegisterService() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::RegisterServiceRequest, ::bosdyn::api::RegisterServiceResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bosdyn::api::RegisterServiceRequest* request, ::bosdyn::api::RegisterServiceResponse* response) { return this->RegisterService(context, request, response); }));}
    void SetMessageAllocatorFor_RegisterService(
        ::grpc::experimental::MessageAllocator< ::bosdyn::api::RegisterServiceRequest, ::bosdyn::api::RegisterServiceResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::RegisterServiceRequest, ::bosdyn::api::RegisterServiceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RegisterService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterService(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RegisterServiceRequest* /*request*/, ::bosdyn::api::RegisterServiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RegisterService(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::RegisterServiceRequest* /*request*/, ::bosdyn::api::RegisterServiceResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RegisterService(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bosdyn::api::RegisterServiceRequest* /*request*/, ::bosdyn::api::RegisterServiceResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UnregisterService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UnregisterService() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::UnregisterServiceRequest, ::bosdyn::api::UnregisterServiceResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bosdyn::api::UnregisterServiceRequest* request, ::bosdyn::api::UnregisterServiceResponse* response) { return this->UnregisterService(context, request, response); }));}
    void SetMessageAllocatorFor_UnregisterService(
        ::grpc::experimental::MessageAllocator< ::bosdyn::api::UnregisterServiceRequest, ::bosdyn::api::UnregisterServiceResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::UnregisterServiceRequest, ::bosdyn::api::UnregisterServiceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UnregisterService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnregisterService(::grpc::ServerContext* /*context*/, const ::bosdyn::api::UnregisterServiceRequest* /*request*/, ::bosdyn::api::UnregisterServiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UnregisterService(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::UnregisterServiceRequest* /*request*/, ::bosdyn::api::UnregisterServiceResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UnregisterService(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bosdyn::api::UnregisterServiceRequest* /*request*/, ::bosdyn::api::UnregisterServiceResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateService() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::UpdateServiceRequest, ::bosdyn::api::UpdateServiceResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bosdyn::api::UpdateServiceRequest* request, ::bosdyn::api::UpdateServiceResponse* response) { return this->UpdateService(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateService(
        ::grpc::experimental::MessageAllocator< ::bosdyn::api::UpdateServiceRequest, ::bosdyn::api::UpdateServiceResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::bosdyn::api::UpdateServiceRequest, ::bosdyn::api::UpdateServiceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateService(::grpc::ServerContext* /*context*/, const ::bosdyn::api::UpdateServiceRequest* /*request*/, ::bosdyn::api::UpdateServiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateService(
      ::grpc::CallbackServerContext* /*context*/, const ::bosdyn::api::UpdateServiceRequest* /*request*/, ::bosdyn::api::UpdateServiceResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateService(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bosdyn::api::UpdateServiceRequest* /*request*/, ::bosdyn::api::UpdateServiceResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_RegisterService<ExperimentalWithCallbackMethod_UnregisterService<ExperimentalWithCallbackMethod_UpdateService<Service > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_RegisterService<ExperimentalWithCallbackMethod_UnregisterService<ExperimentalWithCallbackMethod_UpdateService<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RegisterService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterService() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RegisterService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterService(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RegisterServiceRequest* /*request*/, ::bosdyn::api::RegisterServiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UnregisterService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UnregisterService() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_UnregisterService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnregisterService(::grpc::ServerContext* /*context*/, const ::bosdyn::api::UnregisterServiceRequest* /*request*/, ::bosdyn::api::UnregisterServiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateService() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateService(::grpc::ServerContext* /*context*/, const ::bosdyn::api::UpdateServiceRequest* /*request*/, ::bosdyn::api::UpdateServiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterService() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RegisterService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterService(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RegisterServiceRequest* /*request*/, ::bosdyn::api::RegisterServiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterService(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UnregisterService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UnregisterService() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_UnregisterService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnregisterService(::grpc::ServerContext* /*context*/, const ::bosdyn::api::UnregisterServiceRequest* /*request*/, ::bosdyn::api::UnregisterServiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnregisterService(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateService() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateService(::grpc::ServerContext* /*context*/, const ::bosdyn::api::UpdateServiceRequest* /*request*/, ::bosdyn::api::UpdateServiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateService(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RegisterService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RegisterService() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegisterService(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RegisterService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterService(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RegisterServiceRequest* /*request*/, ::bosdyn::api::RegisterServiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RegisterService(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RegisterService(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UnregisterService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UnregisterService() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UnregisterService(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UnregisterService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnregisterService(::grpc::ServerContext* /*context*/, const ::bosdyn::api::UnregisterServiceRequest* /*request*/, ::bosdyn::api::UnregisterServiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UnregisterService(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UnregisterService(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateService() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateService(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateService(::grpc::ServerContext* /*context*/, const ::bosdyn::api::UpdateServiceRequest* /*request*/, ::bosdyn::api::UpdateServiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateService(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateService(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisterService() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::RegisterServiceRequest, ::bosdyn::api::RegisterServiceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::RegisterServiceRequest, ::bosdyn::api::RegisterServiceResponse>* streamer) {
                       return this->StreamedRegisterService(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RegisterService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterService(::grpc::ServerContext* /*context*/, const ::bosdyn::api::RegisterServiceRequest* /*request*/, ::bosdyn::api::RegisterServiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterService(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::RegisterServiceRequest,::bosdyn::api::RegisterServiceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UnregisterService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UnregisterService() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::UnregisterServiceRequest, ::bosdyn::api::UnregisterServiceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::UnregisterServiceRequest, ::bosdyn::api::UnregisterServiceResponse>* streamer) {
                       return this->StreamedUnregisterService(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UnregisterService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UnregisterService(::grpc::ServerContext* /*context*/, const ::bosdyn::api::UnregisterServiceRequest* /*request*/, ::bosdyn::api::UnregisterServiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUnregisterService(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::UnregisterServiceRequest,::bosdyn::api::UnregisterServiceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateService() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bosdyn::api::UpdateServiceRequest, ::bosdyn::api::UpdateServiceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::bosdyn::api::UpdateServiceRequest, ::bosdyn::api::UpdateServiceResponse>* streamer) {
                       return this->StreamedUpdateService(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateService(::grpc::ServerContext* /*context*/, const ::bosdyn::api::UpdateServiceRequest* /*request*/, ::bosdyn::api::UpdateServiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateService(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bosdyn::api::UpdateServiceRequest,::bosdyn::api::UpdateServiceResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RegisterService<WithStreamedUnaryMethod_UnregisterService<WithStreamedUnaryMethod_UpdateService<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_RegisterService<WithStreamedUnaryMethod_UnregisterService<WithStreamedUnaryMethod_UpdateService<Service > > > StreamedService;
};

}  // namespace api
}  // namespace bosdyn


#endif  // GRPC_bosdyn_2fapi_2fdirectory_5fregistration_5fservice_2eproto__INCLUDED
