// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/robot_id.proto

#include "bosdyn/api/robot_id.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fparameter_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Parameter_bosdyn_2fapi_2fparameter_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2frobot_5fid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RobotId_bosdyn_2fapi_2frobot_5fid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2frobot_5fid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RobotSoftwareRelease_bosdyn_2fapi_2frobot_5fid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2frobot_5fid_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SoftwareVersion_bosdyn_2fapi_2frobot_5fid_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace bosdyn {
namespace api {
class RobotIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RobotId> _instance;
} _RobotId_default_instance_;
class SoftwareVersionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SoftwareVersion> _instance;
} _SoftwareVersion_default_instance_;
class RobotSoftwareReleaseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RobotSoftwareRelease> _instance;
} _RobotSoftwareRelease_default_instance_;
class RobotIdRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RobotIdRequest> _instance;
} _RobotIdRequest_default_instance_;
class RobotIdResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RobotIdResponse> _instance;
} _RobotIdResponse_default_instance_;
}  // namespace api
}  // namespace bosdyn
static void InitDefaultsscc_info_RobotId_bosdyn_2fapi_2frobot_5fid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_RobotId_default_instance_;
    new (ptr) ::bosdyn::api::RobotId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::RobotId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RobotId_bosdyn_2fapi_2frobot_5fid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RobotId_bosdyn_2fapi_2frobot_5fid_2eproto}, {
      &scc_info_RobotSoftwareRelease_bosdyn_2fapi_2frobot_5fid_2eproto.base,}};

static void InitDefaultsscc_info_RobotIdRequest_bosdyn_2fapi_2frobot_5fid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_RobotIdRequest_default_instance_;
    new (ptr) ::bosdyn::api::RobotIdRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::RobotIdRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RobotIdRequest_bosdyn_2fapi_2frobot_5fid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RobotIdRequest_bosdyn_2fapi_2frobot_5fid_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_RobotIdResponse_bosdyn_2fapi_2frobot_5fid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_RobotIdResponse_default_instance_;
    new (ptr) ::bosdyn::api::RobotIdResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::RobotIdResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RobotIdResponse_bosdyn_2fapi_2frobot_5fid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RobotIdResponse_bosdyn_2fapi_2frobot_5fid_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_RobotId_bosdyn_2fapi_2frobot_5fid_2eproto.base,}};

static void InitDefaultsscc_info_RobotSoftwareRelease_bosdyn_2fapi_2frobot_5fid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_RobotSoftwareRelease_default_instance_;
    new (ptr) ::bosdyn::api::RobotSoftwareRelease();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::RobotSoftwareRelease::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RobotSoftwareRelease_bosdyn_2fapi_2frobot_5fid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_RobotSoftwareRelease_bosdyn_2fapi_2frobot_5fid_2eproto}, {
      &scc_info_SoftwareVersion_bosdyn_2fapi_2frobot_5fid_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_Parameter_bosdyn_2fapi_2fparameter_2eproto.base,}};

static void InitDefaultsscc_info_SoftwareVersion_bosdyn_2fapi_2frobot_5fid_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_SoftwareVersion_default_instance_;
    new (ptr) ::bosdyn::api::SoftwareVersion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::SoftwareVersion::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SoftwareVersion_bosdyn_2fapi_2frobot_5fid_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SoftwareVersion_bosdyn_2fapi_2frobot_5fid_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bosdyn_2fapi_2frobot_5fid_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_bosdyn_2fapi_2frobot_5fid_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bosdyn_2fapi_2frobot_5fid_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bosdyn_2fapi_2frobot_5fid_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotId, serial_number_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotId, species_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotId, version_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotId, software_release_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotId, nickname_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotId, computer_serial_number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SoftwareVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SoftwareVersion, major_version_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SoftwareVersion, minor_version_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SoftwareVersion, patch_level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotSoftwareRelease, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotSoftwareRelease, version_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotSoftwareRelease, name_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotSoftwareRelease, type_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotSoftwareRelease, changeset_date_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotSoftwareRelease, changeset_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotSoftwareRelease, api_version_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotSoftwareRelease, build_information_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotSoftwareRelease, install_date_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotSoftwareRelease, parameters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotIdRequest, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotIdResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotIdResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotIdResponse, robot_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::bosdyn::api::RobotId)},
  { 11, -1, sizeof(::bosdyn::api::SoftwareVersion)},
  { 19, -1, sizeof(::bosdyn::api::RobotSoftwareRelease)},
  { 33, -1, sizeof(::bosdyn::api::RobotIdRequest)},
  { 39, -1, sizeof(::bosdyn::api::RobotIdResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_RobotId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_SoftwareVersion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_RobotSoftwareRelease_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_RobotIdRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_RobotIdResponse_default_instance_),
};

const char descriptor_table_protodef_bosdyn_2fapi_2frobot_5fid_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031bosdyn/api/robot_id.proto\022\nbosdyn.api\032"
  "\027bosdyn/api/header.proto\032\032bosdyn/api/par"
  "ameter.proto\032\037google/protobuf/timestamp."
  "proto\"\260\001\n\007RobotId\022\025\n\rserial_number\030\001 \001(\t"
  "\022\017\n\007species\030\002 \001(\t\022\017\n\007version\030\003 \001(\t\022:\n\020so"
  "ftware_release\030\004 \001(\0132 .bosdyn.api.RobotS"
  "oftwareRelease\022\020\n\010nickname\030\005 \001(\t\022\036\n\026comp"
  "uter_serial_number\030\006 \001(\t\"T\n\017SoftwareVers"
  "ion\022\025\n\rmajor_version\030\001 \001(\005\022\025\n\rminor_vers"
  "ion\030\002 \001(\005\022\023\n\013patch_level\030\003 \001(\005\"\264\002\n\024Robot"
  "SoftwareRelease\022,\n\007version\030\001 \001(\0132\033.bosdy"
  "n.api.SoftwareVersion\022\014\n\004name\030\002 \001(\t\022\014\n\004t"
  "ype\030\003 \001(\t\0222\n\016changeset_date\030\004 \001(\0132\032.goog"
  "le.protobuf.Timestamp\022\021\n\tchangeset\030\005 \001(\t"
  "\022\023\n\013api_version\030\006 \001(\t\022\031\n\021build_informati"
  "on\030\007 \001(\t\0220\n\014install_date\030\010 \001(\0132\032.google."
  "protobuf.Timestamp\022)\n\nparameters\030\t \003(\0132\025"
  ".bosdyn.api.Parameter\";\n\016RobotIdRequest\022"
  ")\n\006header\030\001 \001(\0132\031.bosdyn.api.RequestHead"
  "er\"d\n\017RobotIdResponse\022*\n\006header\030\001 \001(\0132\032."
  "bosdyn.api.ResponseHeader\022%\n\010robot_id\030\002 "
  "\001(\0132\023.bosdyn.api.RobotIdB\016B\014RobotIdProto"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bosdyn_2fapi_2frobot_5fid_2eproto_deps[3] = {
  &::descriptor_table_bosdyn_2fapi_2fheader_2eproto,
  &::descriptor_table_bosdyn_2fapi_2fparameter_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bosdyn_2fapi_2frobot_5fid_2eproto_sccs[5] = {
  &scc_info_RobotId_bosdyn_2fapi_2frobot_5fid_2eproto.base,
  &scc_info_RobotIdRequest_bosdyn_2fapi_2frobot_5fid_2eproto.base,
  &scc_info_RobotIdResponse_bosdyn_2fapi_2frobot_5fid_2eproto.base,
  &scc_info_RobotSoftwareRelease_bosdyn_2fapi_2frobot_5fid_2eproto.base,
  &scc_info_SoftwareVersion_bosdyn_2fapi_2frobot_5fid_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bosdyn_2fapi_2frobot_5fid_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2frobot_5fid_2eproto = {
  false, false, descriptor_table_protodef_bosdyn_2fapi_2frobot_5fid_2eproto, "bosdyn/api/robot_id.proto", 888,
  &descriptor_table_bosdyn_2fapi_2frobot_5fid_2eproto_once, descriptor_table_bosdyn_2fapi_2frobot_5fid_2eproto_sccs, descriptor_table_bosdyn_2fapi_2frobot_5fid_2eproto_deps, 5, 3,
  schemas, file_default_instances, TableStruct_bosdyn_2fapi_2frobot_5fid_2eproto::offsets,
  file_level_metadata_bosdyn_2fapi_2frobot_5fid_2eproto, 5, file_level_enum_descriptors_bosdyn_2fapi_2frobot_5fid_2eproto, file_level_service_descriptors_bosdyn_2fapi_2frobot_5fid_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bosdyn_2fapi_2frobot_5fid_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bosdyn_2fapi_2frobot_5fid_2eproto)), true);
namespace bosdyn {
namespace api {

// ===================================================================

void RobotId::InitAsDefaultInstance() {
  ::bosdyn::api::_RobotId_default_instance_._instance.get_mutable()->software_release_ = const_cast< ::bosdyn::api::RobotSoftwareRelease*>(
      ::bosdyn::api::RobotSoftwareRelease::internal_default_instance());
}
class RobotId::_Internal {
 public:
  static const ::bosdyn::api::RobotSoftwareRelease& software_release(const RobotId* msg);
};

const ::bosdyn::api::RobotSoftwareRelease&
RobotId::_Internal::software_release(const RobotId* msg) {
  return *msg->software_release_;
}
RobotId::RobotId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.RobotId)
}
RobotId::RobotId(const RobotId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_serial_number().empty()) {
    serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_serial_number(),
      GetArena());
  }
  species_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_species().empty()) {
    species_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_species(),
      GetArena());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_version(),
      GetArena());
  }
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nickname().empty()) {
    nickname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_nickname(),
      GetArena());
  }
  computer_serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_computer_serial_number().empty()) {
    computer_serial_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_computer_serial_number(),
      GetArena());
  }
  if (from._internal_has_software_release()) {
    software_release_ = new ::bosdyn::api::RobotSoftwareRelease(*from.software_release_);
  } else {
    software_release_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.RobotId)
}

void RobotId::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RobotId_bosdyn_2fapi_2frobot_5fid_2eproto.base);
  serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  species_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  computer_serial_number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  software_release_ = nullptr;
}

RobotId::~RobotId() {
  // @@protoc_insertion_point(destructor:bosdyn.api.RobotId)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RobotId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  serial_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  species_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  computer_serial_number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete software_release_;
}

void RobotId::ArenaDtor(void* object) {
  RobotId* _this = reinterpret_cast< RobotId* >(object);
  (void)_this;
}
void RobotId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RobotId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RobotId& RobotId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RobotId_bosdyn_2fapi_2frobot_5fid_2eproto.base);
  return *internal_default_instance();
}


void RobotId::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.RobotId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  serial_number_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  species_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  nickname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  computer_serial_number_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && software_release_ != nullptr) {
    delete software_release_;
  }
  software_release_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string serial_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_serial_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.RobotId.serial_number"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string species = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_species();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.RobotId.species"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.RobotId.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.RobotSoftwareRelease software_release = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_software_release(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nickname = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_nickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.RobotId.nickname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string computer_serial_number = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_computer_serial_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.RobotId.computer_serial_number"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RobotId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.RobotId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string serial_number = 1;
  if (this->serial_number().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serial_number().data(), static_cast<int>(this->_internal_serial_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.RobotId.serial_number");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_serial_number(), target);
  }

  // string species = 2;
  if (this->species().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_species().data(), static_cast<int>(this->_internal_species().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.RobotId.species");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_species(), target);
  }

  // string version = 3;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.RobotId.version");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version(), target);
  }

  // .bosdyn.api.RobotSoftwareRelease software_release = 4;
  if (this->has_software_release()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::software_release(this), target, stream);
  }

  // string nickname = 5;
  if (this->nickname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.RobotId.nickname");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_nickname(), target);
  }

  // string computer_serial_number = 6;
  if (this->computer_serial_number().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_computer_serial_number().data(), static_cast<int>(this->_internal_computer_serial_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.RobotId.computer_serial_number");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_computer_serial_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.RobotId)
  return target;
}

size_t RobotId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.RobotId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string serial_number = 1;
  if (this->serial_number().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serial_number());
  }

  // string species = 2;
  if (this->species().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_species());
  }

  // string version = 3;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string nickname = 5;
  if (this->nickname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // string computer_serial_number = 6;
  if (this->computer_serial_number().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_computer_serial_number());
  }

  // .bosdyn.api.RobotSoftwareRelease software_release = 4;
  if (this->has_software_release()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *software_release_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.RobotId)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RobotId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.RobotId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.RobotId)
    MergeFrom(*source);
  }
}

void RobotId::MergeFrom(const RobotId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.RobotId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.serial_number().size() > 0) {
    _internal_set_serial_number(from._internal_serial_number());
  }
  if (from.species().size() > 0) {
    _internal_set_species(from._internal_species());
  }
  if (from.version().size() > 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.nickname().size() > 0) {
    _internal_set_nickname(from._internal_nickname());
  }
  if (from.computer_serial_number().size() > 0) {
    _internal_set_computer_serial_number(from._internal_computer_serial_number());
  }
  if (from.has_software_release()) {
    _internal_mutable_software_release()->::bosdyn::api::RobotSoftwareRelease::MergeFrom(from._internal_software_release());
  }
}

void RobotId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.RobotId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotId::CopyFrom(const RobotId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.RobotId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotId::IsInitialized() const {
  return true;
}

void RobotId::InternalSwap(RobotId* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  serial_number_.Swap(&other->serial_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  species_.Swap(&other->species_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  nickname_.Swap(&other->nickname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  computer_serial_number_.Swap(&other->computer_serial_number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(software_release_, other->software_release_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SoftwareVersion::InitAsDefaultInstance() {
}
class SoftwareVersion::_Internal {
 public:
};

SoftwareVersion::SoftwareVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.SoftwareVersion)
}
SoftwareVersion::SoftwareVersion(const SoftwareVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&major_version_, &from.major_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&patch_level_) -
    reinterpret_cast<char*>(&major_version_)) + sizeof(patch_level_));
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.SoftwareVersion)
}

void SoftwareVersion::SharedCtor() {
  ::memset(&major_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&patch_level_) -
      reinterpret_cast<char*>(&major_version_)) + sizeof(patch_level_));
}

SoftwareVersion::~SoftwareVersion() {
  // @@protoc_insertion_point(destructor:bosdyn.api.SoftwareVersion)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SoftwareVersion::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SoftwareVersion::ArenaDtor(void* object) {
  SoftwareVersion* _this = reinterpret_cast< SoftwareVersion* >(object);
  (void)_this;
}
void SoftwareVersion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SoftwareVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SoftwareVersion& SoftwareVersion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SoftwareVersion_bosdyn_2fapi_2frobot_5fid_2eproto.base);
  return *internal_default_instance();
}


void SoftwareVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.SoftwareVersion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&major_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&patch_level_) -
      reinterpret_cast<char*>(&major_version_)) + sizeof(patch_level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SoftwareVersion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 major_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          major_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 minor_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          minor_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 patch_level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          patch_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SoftwareVersion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.SoftwareVersion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 major_version = 1;
  if (this->major_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_major_version(), target);
  }

  // int32 minor_version = 2;
  if (this->minor_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_minor_version(), target);
  }

  // int32 patch_level = 3;
  if (this->patch_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_patch_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.SoftwareVersion)
  return target;
}

size_t SoftwareVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.SoftwareVersion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 major_version = 1;
  if (this->major_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_major_version());
  }

  // int32 minor_version = 2;
  if (this->minor_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_minor_version());
  }

  // int32 patch_level = 3;
  if (this->patch_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_patch_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SoftwareVersion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.SoftwareVersion)
  GOOGLE_DCHECK_NE(&from, this);
  const SoftwareVersion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SoftwareVersion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.SoftwareVersion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.SoftwareVersion)
    MergeFrom(*source);
  }
}

void SoftwareVersion::MergeFrom(const SoftwareVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.SoftwareVersion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.major_version() != 0) {
    _internal_set_major_version(from._internal_major_version());
  }
  if (from.minor_version() != 0) {
    _internal_set_minor_version(from._internal_minor_version());
  }
  if (from.patch_level() != 0) {
    _internal_set_patch_level(from._internal_patch_level());
  }
}

void SoftwareVersion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.SoftwareVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoftwareVersion::CopyFrom(const SoftwareVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.SoftwareVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoftwareVersion::IsInitialized() const {
  return true;
}

void SoftwareVersion::InternalSwap(SoftwareVersion* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SoftwareVersion, patch_level_)
      + sizeof(SoftwareVersion::patch_level_)
      - PROTOBUF_FIELD_OFFSET(SoftwareVersion, major_version_)>(
          reinterpret_cast<char*>(&major_version_),
          reinterpret_cast<char*>(&other->major_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SoftwareVersion::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RobotSoftwareRelease::InitAsDefaultInstance() {
  ::bosdyn::api::_RobotSoftwareRelease_default_instance_._instance.get_mutable()->version_ = const_cast< ::bosdyn::api::SoftwareVersion*>(
      ::bosdyn::api::SoftwareVersion::internal_default_instance());
  ::bosdyn::api::_RobotSoftwareRelease_default_instance_._instance.get_mutable()->changeset_date_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::bosdyn::api::_RobotSoftwareRelease_default_instance_._instance.get_mutable()->install_date_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class RobotSoftwareRelease::_Internal {
 public:
  static const ::bosdyn::api::SoftwareVersion& version(const RobotSoftwareRelease* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& changeset_date(const RobotSoftwareRelease* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& install_date(const RobotSoftwareRelease* msg);
};

const ::bosdyn::api::SoftwareVersion&
RobotSoftwareRelease::_Internal::version(const RobotSoftwareRelease* msg) {
  return *msg->version_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
RobotSoftwareRelease::_Internal::changeset_date(const RobotSoftwareRelease* msg) {
  return *msg->changeset_date_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
RobotSoftwareRelease::_Internal::install_date(const RobotSoftwareRelease* msg) {
  return *msg->install_date_;
}
void RobotSoftwareRelease::clear_changeset_date() {
  if (GetArena() == nullptr && changeset_date_ != nullptr) {
    delete changeset_date_;
  }
  changeset_date_ = nullptr;
}
void RobotSoftwareRelease::clear_install_date() {
  if (GetArena() == nullptr && install_date_ != nullptr) {
    delete install_date_;
  }
  install_date_ = nullptr;
}
void RobotSoftwareRelease::clear_parameters() {
  parameters_.Clear();
}
RobotSoftwareRelease::RobotSoftwareRelease(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  parameters_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.RobotSoftwareRelease)
}
RobotSoftwareRelease::RobotSoftwareRelease(const RobotSoftwareRelease& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      parameters_(from.parameters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  changeset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_changeset().empty()) {
    changeset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_changeset(),
      GetArena());
  }
  api_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_api_version().empty()) {
    api_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_api_version(),
      GetArena());
  }
  build_information_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_build_information().empty()) {
    build_information_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_build_information(),
      GetArena());
  }
  if (from._internal_has_version()) {
    version_ = new ::bosdyn::api::SoftwareVersion(*from.version_);
  } else {
    version_ = nullptr;
  }
  if (from._internal_has_changeset_date()) {
    changeset_date_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.changeset_date_);
  } else {
    changeset_date_ = nullptr;
  }
  if (from._internal_has_install_date()) {
    install_date_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.install_date_);
  } else {
    install_date_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.RobotSoftwareRelease)
}

void RobotSoftwareRelease::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RobotSoftwareRelease_bosdyn_2fapi_2frobot_5fid_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  changeset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  api_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  build_information_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&install_date_) -
      reinterpret_cast<char*>(&version_)) + sizeof(install_date_));
}

RobotSoftwareRelease::~RobotSoftwareRelease() {
  // @@protoc_insertion_point(destructor:bosdyn.api.RobotSoftwareRelease)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RobotSoftwareRelease::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  changeset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  api_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  build_information_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete version_;
  if (this != internal_default_instance()) delete changeset_date_;
  if (this != internal_default_instance()) delete install_date_;
}

void RobotSoftwareRelease::ArenaDtor(void* object) {
  RobotSoftwareRelease* _this = reinterpret_cast< RobotSoftwareRelease* >(object);
  (void)_this;
}
void RobotSoftwareRelease::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RobotSoftwareRelease::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RobotSoftwareRelease& RobotSoftwareRelease::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RobotSoftwareRelease_bosdyn_2fapi_2frobot_5fid_2eproto.base);
  return *internal_default_instance();
}


void RobotSoftwareRelease::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.RobotSoftwareRelease)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parameters_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  changeset_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  api_version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  build_information_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
  if (GetArena() == nullptr && changeset_date_ != nullptr) {
    delete changeset_date_;
  }
  changeset_date_ = nullptr;
  if (GetArena() == nullptr && install_date_ != nullptr) {
    delete install_date_;
  }
  install_date_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotSoftwareRelease::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.SoftwareVersion version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_version(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.RobotSoftwareRelease.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.RobotSoftwareRelease.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp changeset_date = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_changeset_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string changeset = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_changeset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.RobotSoftwareRelease.changeset"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string api_version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_api_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.RobotSoftwareRelease.api_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string build_information = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_build_information();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.RobotSoftwareRelease.build_information"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp install_date = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_install_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .bosdyn.api.Parameter parameters = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parameters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RobotSoftwareRelease::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.RobotSoftwareRelease)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.SoftwareVersion version = 1;
  if (this->has_version()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::version(this), target, stream);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.RobotSoftwareRelease.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string type = 3;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.RobotSoftwareRelease.type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_type(), target);
  }

  // .google.protobuf.Timestamp changeset_date = 4;
  if (this->has_changeset_date()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::changeset_date(this), target, stream);
  }

  // string changeset = 5;
  if (this->changeset().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_changeset().data(), static_cast<int>(this->_internal_changeset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.RobotSoftwareRelease.changeset");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_changeset(), target);
  }

  // string api_version = 6;
  if (this->api_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_api_version().data(), static_cast<int>(this->_internal_api_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.RobotSoftwareRelease.api_version");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_api_version(), target);
  }

  // string build_information = 7;
  if (this->build_information().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_build_information().data(), static_cast<int>(this->_internal_build_information().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.RobotSoftwareRelease.build_information");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_build_information(), target);
  }

  // .google.protobuf.Timestamp install_date = 8;
  if (this->has_install_date()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::install_date(this), target, stream);
  }

  // repeated .bosdyn.api.Parameter parameters = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_parameters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_parameters(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.RobotSoftwareRelease)
  return target;
}

size_t RobotSoftwareRelease::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.RobotSoftwareRelease)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bosdyn.api.Parameter parameters = 9;
  total_size += 1UL * this->_internal_parameters_size();
  for (const auto& msg : this->parameters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string type = 3;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string changeset = 5;
  if (this->changeset().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_changeset());
  }

  // string api_version = 6;
  if (this->api_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_api_version());
  }

  // string build_information = 7;
  if (this->build_information().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_build_information());
  }

  // .bosdyn.api.SoftwareVersion version = 1;
  if (this->has_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *version_);
  }

  // .google.protobuf.Timestamp changeset_date = 4;
  if (this->has_changeset_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *changeset_date_);
  }

  // .google.protobuf.Timestamp install_date = 8;
  if (this->has_install_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *install_date_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotSoftwareRelease::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.RobotSoftwareRelease)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotSoftwareRelease* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RobotSoftwareRelease>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.RobotSoftwareRelease)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.RobotSoftwareRelease)
    MergeFrom(*source);
  }
}

void RobotSoftwareRelease::MergeFrom(const RobotSoftwareRelease& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.RobotSoftwareRelease)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  parameters_.MergeFrom(from.parameters_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.changeset().size() > 0) {
    _internal_set_changeset(from._internal_changeset());
  }
  if (from.api_version().size() > 0) {
    _internal_set_api_version(from._internal_api_version());
  }
  if (from.build_information().size() > 0) {
    _internal_set_build_information(from._internal_build_information());
  }
  if (from.has_version()) {
    _internal_mutable_version()->::bosdyn::api::SoftwareVersion::MergeFrom(from._internal_version());
  }
  if (from.has_changeset_date()) {
    _internal_mutable_changeset_date()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_changeset_date());
  }
  if (from.has_install_date()) {
    _internal_mutable_install_date()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_install_date());
  }
}

void RobotSoftwareRelease::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.RobotSoftwareRelease)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotSoftwareRelease::CopyFrom(const RobotSoftwareRelease& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.RobotSoftwareRelease)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotSoftwareRelease::IsInitialized() const {
  return true;
}

void RobotSoftwareRelease::InternalSwap(RobotSoftwareRelease* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  parameters_.InternalSwap(&other->parameters_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  changeset_.Swap(&other->changeset_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  api_version_.Swap(&other->api_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  build_information_.Swap(&other->build_information_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RobotSoftwareRelease, install_date_)
      + sizeof(RobotSoftwareRelease::install_date_)
      - PROTOBUF_FIELD_OFFSET(RobotSoftwareRelease, version_)>(
          reinterpret_cast<char*>(&version_),
          reinterpret_cast<char*>(&other->version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotSoftwareRelease::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RobotIdRequest::InitAsDefaultInstance() {
  ::bosdyn::api::_RobotIdRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
}
class RobotIdRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const RobotIdRequest* msg);
};

const ::bosdyn::api::RequestHeader&
RobotIdRequest::_Internal::header(const RobotIdRequest* msg) {
  return *msg->header_;
}
void RobotIdRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
RobotIdRequest::RobotIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.RobotIdRequest)
}
RobotIdRequest::RobotIdRequest(const RobotIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.RobotIdRequest)
}

void RobotIdRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RobotIdRequest_bosdyn_2fapi_2frobot_5fid_2eproto.base);
  header_ = nullptr;
}

RobotIdRequest::~RobotIdRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.RobotIdRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RobotIdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void RobotIdRequest::ArenaDtor(void* object) {
  RobotIdRequest* _this = reinterpret_cast< RobotIdRequest* >(object);
  (void)_this;
}
void RobotIdRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RobotIdRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RobotIdRequest& RobotIdRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RobotIdRequest_bosdyn_2fapi_2frobot_5fid_2eproto.base);
  return *internal_default_instance();
}


void RobotIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.RobotIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotIdRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RobotIdRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.RobotIdRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.RobotIdRequest)
  return target;
}

size_t RobotIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.RobotIdRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotIdRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.RobotIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotIdRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RobotIdRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.RobotIdRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.RobotIdRequest)
    MergeFrom(*source);
  }
}

void RobotIdRequest::MergeFrom(const RobotIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.RobotIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
}

void RobotIdRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.RobotIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotIdRequest::CopyFrom(const RobotIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.RobotIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotIdRequest::IsInitialized() const {
  return true;
}

void RobotIdRequest::InternalSwap(RobotIdRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotIdRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RobotIdResponse::InitAsDefaultInstance() {
  ::bosdyn::api::_RobotIdResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
  ::bosdyn::api::_RobotIdResponse_default_instance_._instance.get_mutable()->robot_id_ = const_cast< ::bosdyn::api::RobotId*>(
      ::bosdyn::api::RobotId::internal_default_instance());
}
class RobotIdResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const RobotIdResponse* msg);
  static const ::bosdyn::api::RobotId& robot_id(const RobotIdResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
RobotIdResponse::_Internal::header(const RobotIdResponse* msg) {
  return *msg->header_;
}
const ::bosdyn::api::RobotId&
RobotIdResponse::_Internal::robot_id(const RobotIdResponse* msg) {
  return *msg->robot_id_;
}
void RobotIdResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
RobotIdResponse::RobotIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.RobotIdResponse)
}
RobotIdResponse::RobotIdResponse(const RobotIdResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_robot_id()) {
    robot_id_ = new ::bosdyn::api::RobotId(*from.robot_id_);
  } else {
    robot_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.RobotIdResponse)
}

void RobotIdResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RobotIdResponse_bosdyn_2fapi_2frobot_5fid_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&robot_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(robot_id_));
}

RobotIdResponse::~RobotIdResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.RobotIdResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RobotIdResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete robot_id_;
}

void RobotIdResponse::ArenaDtor(void* object) {
  RobotIdResponse* _this = reinterpret_cast< RobotIdResponse* >(object);
  (void)_this;
}
void RobotIdResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RobotIdResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RobotIdResponse& RobotIdResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RobotIdResponse_bosdyn_2fapi_2frobot_5fid_2eproto.base);
  return *internal_default_instance();
}


void RobotIdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.RobotIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && robot_id_ != nullptr) {
    delete robot_id_;
  }
  robot_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotIdResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.RobotId robot_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_robot_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RobotIdResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.RobotIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.RobotId robot_id = 2;
  if (this->has_robot_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::robot_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.RobotIdResponse)
  return target;
}

size_t RobotIdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.RobotIdResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.RobotId robot_id = 2;
  if (this->has_robot_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *robot_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotIdResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.RobotIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotIdResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RobotIdResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.RobotIdResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.RobotIdResponse)
    MergeFrom(*source);
  }
}

void RobotIdResponse::MergeFrom(const RobotIdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.RobotIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.has_robot_id()) {
    _internal_mutable_robot_id()->::bosdyn::api::RobotId::MergeFrom(from._internal_robot_id());
  }
}

void RobotIdResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.RobotIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotIdResponse::CopyFrom(const RobotIdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.RobotIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotIdResponse::IsInitialized() const {
  return true;
}

void RobotIdResponse::InternalSwap(RobotIdResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RobotIdResponse, robot_id_)
      + sizeof(RobotIdResponse::robot_id_)
      - PROTOBUF_FIELD_OFFSET(RobotIdResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotIdResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bosdyn::api::RobotId* Arena::CreateMaybeMessage< ::bosdyn::api::RobotId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::RobotId >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::SoftwareVersion* Arena::CreateMaybeMessage< ::bosdyn::api::SoftwareVersion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::SoftwareVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::RobotSoftwareRelease* Arena::CreateMaybeMessage< ::bosdyn::api::RobotSoftwareRelease >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::RobotSoftwareRelease >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::RobotIdRequest* Arena::CreateMaybeMessage< ::bosdyn::api::RobotIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::RobotIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::RobotIdResponse* Arena::CreateMaybeMessage< ::bosdyn::api::RobotIdResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::RobotIdResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
