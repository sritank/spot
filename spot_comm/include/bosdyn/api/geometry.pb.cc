// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/geometry.proto

#include "bosdyn/api/geometry.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Box2_bosdyn_2fapi_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Box3_bosdyn_2fapi_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Circle_bosdyn_2fapi_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUse_bosdyn_2fapi_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FrameTreeSnapshot_ParentEdge_bosdyn_2fapi_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Polygon_bosdyn_2fapi_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Quaternion_bosdyn_2fapi_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SE2Velocity_bosdyn_2fapi_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SE3Pose_bosdyn_2fapi_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec2_bosdyn_2fapi_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec3_bosdyn_2fapi_2fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DoubleValue_google_2fprotobuf_2fwrappers_2eproto;
namespace bosdyn {
namespace api {
class Vec2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vec2> _instance;
} _Vec2_default_instance_;
class Vec3DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vec3> _instance;
} _Vec3_default_instance_;
class CylindricalCoordinateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CylindricalCoordinate> _instance;
} _CylindricalCoordinate_default_instance_;
class QuaternionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Quaternion> _instance;
} _Quaternion_default_instance_;
class PlaneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Plane> _instance;
} _Plane_default_instance_;
class SE2PoseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SE2Pose> _instance;
} _SE2Pose_default_instance_;
class SE2VelocityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SE2Velocity> _instance;
} _SE2Velocity_default_instance_;
class SE2VelocityLimitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SE2VelocityLimit> _instance;
} _SE2VelocityLimit_default_instance_;
class SE3PoseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SE3Pose> _instance;
} _SE3Pose_default_instance_;
class SE3VelocityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SE3Velocity> _instance;
} _SE3Velocity_default_instance_;
class WrenchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Wrench> _instance;
} _Wrench_default_instance_;
class FrameTreeSnapshot_ParentEdgeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FrameTreeSnapshot_ParentEdge> _instance;
} _FrameTreeSnapshot_ParentEdge_default_instance_;
class FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUse> _instance;
} _FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUse_default_instance_;
class FrameTreeSnapshotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FrameTreeSnapshot> _instance;
} _FrameTreeSnapshot_default_instance_;
class Box2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Box2> _instance;
} _Box2_default_instance_;
class Box2WithFrameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Box2WithFrame> _instance;
} _Box2WithFrame_default_instance_;
class Box3DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Box3> _instance;
} _Box3_default_instance_;
class Box3WithFrameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Box3WithFrame> _instance;
} _Box3WithFrame_default_instance_;
class SE3CovarianceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SE3Covariance> _instance;
} _SE3Covariance_default_instance_;
class EulerZXYRateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EulerZXYRate> _instance;
} _EulerZXYRate_default_instance_;
class PolyLineDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PolyLine> _instance;
} _PolyLine_default_instance_;
class PolygonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Polygon> _instance;
} _Polygon_default_instance_;
class CircleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Circle> _instance;
} _Circle_default_instance_;
class AreaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Area> _instance;
  const ::bosdyn::api::Polygon* polygon_;
  const ::bosdyn::api::Circle* circle_;
} _Area_default_instance_;
class VolumeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Volume> _instance;
  const ::bosdyn::api::Vec3* box_;
} _Volume_default_instance_;
class Vec2ValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vec2Value> _instance;
} _Vec2Value_default_instance_;
class Vec3ValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vec3Value> _instance;
} _Vec3Value_default_instance_;
}  // namespace api
}  // namespace bosdyn
static void InitDefaultsscc_info_Area_bosdyn_2fapi_2fgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_Area_default_instance_;
    new (ptr) ::bosdyn::api::Area();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::Area::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Area_bosdyn_2fapi_2fgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Area_bosdyn_2fapi_2fgeometry_2eproto}, {
      &scc_info_Polygon_bosdyn_2fapi_2fgeometry_2eproto.base,
      &scc_info_Circle_bosdyn_2fapi_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_Box2_bosdyn_2fapi_2fgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_Box2_default_instance_;
    new (ptr) ::bosdyn::api::Box2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::Box2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Box2_bosdyn_2fapi_2fgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Box2_bosdyn_2fapi_2fgeometry_2eproto}, {
      &scc_info_Vec2_bosdyn_2fapi_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_Box2WithFrame_bosdyn_2fapi_2fgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_Box2WithFrame_default_instance_;
    new (ptr) ::bosdyn::api::Box2WithFrame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::Box2WithFrame::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Box2WithFrame_bosdyn_2fapi_2fgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Box2WithFrame_bosdyn_2fapi_2fgeometry_2eproto}, {
      &scc_info_Box2_bosdyn_2fapi_2fgeometry_2eproto.base,
      &scc_info_SE3Pose_bosdyn_2fapi_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_Box3_bosdyn_2fapi_2fgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_Box3_default_instance_;
    new (ptr) ::bosdyn::api::Box3();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::Box3::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Box3_bosdyn_2fapi_2fgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Box3_bosdyn_2fapi_2fgeometry_2eproto}, {
      &scc_info_Vec3_bosdyn_2fapi_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_Box3WithFrame_bosdyn_2fapi_2fgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_Box3WithFrame_default_instance_;
    new (ptr) ::bosdyn::api::Box3WithFrame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::Box3WithFrame::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Box3WithFrame_bosdyn_2fapi_2fgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Box3WithFrame_bosdyn_2fapi_2fgeometry_2eproto}, {
      &scc_info_Box3_bosdyn_2fapi_2fgeometry_2eproto.base,
      &scc_info_SE3Pose_bosdyn_2fapi_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_Circle_bosdyn_2fapi_2fgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_Circle_default_instance_;
    new (ptr) ::bosdyn::api::Circle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::Circle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Circle_bosdyn_2fapi_2fgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Circle_bosdyn_2fapi_2fgeometry_2eproto}, {
      &scc_info_Vec2_bosdyn_2fapi_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_CylindricalCoordinate_bosdyn_2fapi_2fgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_CylindricalCoordinate_default_instance_;
    new (ptr) ::bosdyn::api::CylindricalCoordinate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::CylindricalCoordinate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CylindricalCoordinate_bosdyn_2fapi_2fgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CylindricalCoordinate_bosdyn_2fapi_2fgeometry_2eproto}, {}};

static void InitDefaultsscc_info_EulerZXYRate_bosdyn_2fapi_2fgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_EulerZXYRate_default_instance_;
    new (ptr) ::bosdyn::api::EulerZXYRate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::EulerZXYRate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EulerZXYRate_bosdyn_2fapi_2fgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EulerZXYRate_bosdyn_2fapi_2fgeometry_2eproto}, {}};

static void InitDefaultsscc_info_FrameTreeSnapshot_bosdyn_2fapi_2fgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_FrameTreeSnapshot_default_instance_;
    new (ptr) ::bosdyn::api::FrameTreeSnapshot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::FrameTreeSnapshot::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FrameTreeSnapshot_bosdyn_2fapi_2fgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FrameTreeSnapshot_bosdyn_2fapi_2fgeometry_2eproto}, {
      &scc_info_FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUse_bosdyn_2fapi_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUse_bosdyn_2fapi_2fgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUse_default_instance_;
    new (ptr) ::bosdyn::api::FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUse();
  }
  ::bosdyn::api::FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUse_bosdyn_2fapi_2fgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUse_bosdyn_2fapi_2fgeometry_2eproto}, {
      &scc_info_FrameTreeSnapshot_ParentEdge_bosdyn_2fapi_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_FrameTreeSnapshot_ParentEdge_bosdyn_2fapi_2fgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_FrameTreeSnapshot_ParentEdge_default_instance_;
    new (ptr) ::bosdyn::api::FrameTreeSnapshot_ParentEdge();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::FrameTreeSnapshot_ParentEdge::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FrameTreeSnapshot_ParentEdge_bosdyn_2fapi_2fgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FrameTreeSnapshot_ParentEdge_bosdyn_2fapi_2fgeometry_2eproto}, {
      &scc_info_SE3Pose_bosdyn_2fapi_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_Plane_bosdyn_2fapi_2fgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_Plane_default_instance_;
    new (ptr) ::bosdyn::api::Plane();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::Plane::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Plane_bosdyn_2fapi_2fgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Plane_bosdyn_2fapi_2fgeometry_2eproto}, {
      &scc_info_Vec3_bosdyn_2fapi_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_PolyLine_bosdyn_2fapi_2fgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_PolyLine_default_instance_;
    new (ptr) ::bosdyn::api::PolyLine();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::PolyLine::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PolyLine_bosdyn_2fapi_2fgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PolyLine_bosdyn_2fapi_2fgeometry_2eproto}, {
      &scc_info_Vec2_bosdyn_2fapi_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_Polygon_bosdyn_2fapi_2fgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_Polygon_default_instance_;
    new (ptr) ::bosdyn::api::Polygon();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::Polygon::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Polygon_bosdyn_2fapi_2fgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Polygon_bosdyn_2fapi_2fgeometry_2eproto}, {
      &scc_info_Vec2_bosdyn_2fapi_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_Quaternion_bosdyn_2fapi_2fgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_Quaternion_default_instance_;
    new (ptr) ::bosdyn::api::Quaternion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::Quaternion::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Quaternion_bosdyn_2fapi_2fgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Quaternion_bosdyn_2fapi_2fgeometry_2eproto}, {}};

static void InitDefaultsscc_info_SE2Pose_bosdyn_2fapi_2fgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_SE2Pose_default_instance_;
    new (ptr) ::bosdyn::api::SE2Pose();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::SE2Pose::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SE2Pose_bosdyn_2fapi_2fgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SE2Pose_bosdyn_2fapi_2fgeometry_2eproto}, {
      &scc_info_Vec2_bosdyn_2fapi_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_SE2Velocity_bosdyn_2fapi_2fgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_SE2Velocity_default_instance_;
    new (ptr) ::bosdyn::api::SE2Velocity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::SE2Velocity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SE2Velocity_bosdyn_2fapi_2fgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SE2Velocity_bosdyn_2fapi_2fgeometry_2eproto}, {
      &scc_info_Vec2_bosdyn_2fapi_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_SE2VelocityLimit_bosdyn_2fapi_2fgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_SE2VelocityLimit_default_instance_;
    new (ptr) ::bosdyn::api::SE2VelocityLimit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::SE2VelocityLimit::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SE2VelocityLimit_bosdyn_2fapi_2fgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SE2VelocityLimit_bosdyn_2fapi_2fgeometry_2eproto}, {
      &scc_info_SE2Velocity_bosdyn_2fapi_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_SE3Covariance_bosdyn_2fapi_2fgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_SE3Covariance_default_instance_;
    new (ptr) ::bosdyn::api::SE3Covariance();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::SE3Covariance::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SE3Covariance_bosdyn_2fapi_2fgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SE3Covariance_bosdyn_2fapi_2fgeometry_2eproto}, {}};

static void InitDefaultsscc_info_SE3Pose_bosdyn_2fapi_2fgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_SE3Pose_default_instance_;
    new (ptr) ::bosdyn::api::SE3Pose();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::SE3Pose::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SE3Pose_bosdyn_2fapi_2fgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SE3Pose_bosdyn_2fapi_2fgeometry_2eproto}, {
      &scc_info_Vec3_bosdyn_2fapi_2fgeometry_2eproto.base,
      &scc_info_Quaternion_bosdyn_2fapi_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_SE3Velocity_bosdyn_2fapi_2fgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_SE3Velocity_default_instance_;
    new (ptr) ::bosdyn::api::SE3Velocity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::SE3Velocity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SE3Velocity_bosdyn_2fapi_2fgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SE3Velocity_bosdyn_2fapi_2fgeometry_2eproto}, {
      &scc_info_Vec3_bosdyn_2fapi_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_Vec2_bosdyn_2fapi_2fgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_Vec2_default_instance_;
    new (ptr) ::bosdyn::api::Vec2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::Vec2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec2_bosdyn_2fapi_2fgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Vec2_bosdyn_2fapi_2fgeometry_2eproto}, {}};

static void InitDefaultsscc_info_Vec2Value_bosdyn_2fapi_2fgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_Vec2Value_default_instance_;
    new (ptr) ::bosdyn::api::Vec2Value();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::Vec2Value::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Vec2Value_bosdyn_2fapi_2fgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Vec2Value_bosdyn_2fapi_2fgeometry_2eproto}, {
      &scc_info_DoubleValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_Vec3_bosdyn_2fapi_2fgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_Vec3_default_instance_;
    new (ptr) ::bosdyn::api::Vec3();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::Vec3::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec3_bosdyn_2fapi_2fgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Vec3_bosdyn_2fapi_2fgeometry_2eproto}, {}};

static void InitDefaultsscc_info_Vec3Value_bosdyn_2fapi_2fgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_Vec3Value_default_instance_;
    new (ptr) ::bosdyn::api::Vec3Value();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::Vec3Value::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Vec3Value_bosdyn_2fapi_2fgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Vec3Value_bosdyn_2fapi_2fgeometry_2eproto}, {
      &scc_info_DoubleValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_Volume_bosdyn_2fapi_2fgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_Volume_default_instance_;
    new (ptr) ::bosdyn::api::Volume();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::Volume::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Volume_bosdyn_2fapi_2fgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Volume_bosdyn_2fapi_2fgeometry_2eproto}, {
      &scc_info_Vec3_bosdyn_2fapi_2fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_Wrench_bosdyn_2fapi_2fgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_Wrench_default_instance_;
    new (ptr) ::bosdyn::api::Wrench();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::Wrench::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Wrench_bosdyn_2fapi_2fgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Wrench_bosdyn_2fapi_2fgeometry_2eproto}, {
      &scc_info_Vec3_bosdyn_2fapi_2fgeometry_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bosdyn_2fapi_2fgeometry_2eproto[27];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_bosdyn_2fapi_2fgeometry_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bosdyn_2fapi_2fgeometry_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bosdyn_2fapi_2fgeometry_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Vec2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Vec2, x_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Vec2, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Vec3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Vec3, x_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Vec3, y_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Vec3, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::CylindricalCoordinate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::CylindricalCoordinate, r_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::CylindricalCoordinate, theta_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::CylindricalCoordinate, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Quaternion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Quaternion, x_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Quaternion, y_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Quaternion, z_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Quaternion, w_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Plane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Plane, point_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Plane, normal_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SE2Pose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SE2Pose, position_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SE2Pose, angle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SE2Velocity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SE2Velocity, linear_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SE2Velocity, angular_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SE2VelocityLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SE2VelocityLimit, max_vel_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SE2VelocityLimit, min_vel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SE3Pose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SE3Pose, position_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SE3Pose, rotation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SE3Velocity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SE3Velocity, linear_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SE3Velocity, angular_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Wrench, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Wrench, force_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Wrench, torque_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::FrameTreeSnapshot_ParentEdge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::FrameTreeSnapshot_ParentEdge, parent_frame_name_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::FrameTreeSnapshot_ParentEdge, parent_tform_child_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::FrameTreeSnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::FrameTreeSnapshot, child_to_parent_edge_map_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Box2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Box2, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Box2WithFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Box2WithFrame, box_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Box2WithFrame, frame_name_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Box2WithFrame, frame_name_tform_box_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Box3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Box3, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Box3WithFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Box3WithFrame, box_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Box3WithFrame, frame_name_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Box3WithFrame, frame_name_tform_box_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SE3Covariance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SE3Covariance, cov_xx_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SE3Covariance, cov_xy_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SE3Covariance, cov_xz_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SE3Covariance, cov_yx_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SE3Covariance, cov_yy_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SE3Covariance, cov_yz_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SE3Covariance, cov_zx_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SE3Covariance, cov_zy_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SE3Covariance, cov_zz_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::SE3Covariance, yaw_variance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::EulerZXYRate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::EulerZXYRate, yaw_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::EulerZXYRate, roll_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::EulerZXYRate, pitch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::PolyLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::PolyLine, points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Polygon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Polygon, vertexes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Circle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Circle, center_pt_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Circle, radius_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Area, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Area, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::bosdyn::api::AreaDefaultTypeInternal, polygon_),
  offsetof(::bosdyn::api::AreaDefaultTypeInternal, circle_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Area, geometry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Volume, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Volume, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::bosdyn::api::VolumeDefaultTypeInternal, box_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Volume, geometry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Vec2Value, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Vec2Value, x_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Vec2Value, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Vec3Value, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Vec3Value, x_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Vec3Value, y_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::Vec3Value, z_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::bosdyn::api::Vec2)},
  { 7, -1, sizeof(::bosdyn::api::Vec3)},
  { 15, -1, sizeof(::bosdyn::api::CylindricalCoordinate)},
  { 23, -1, sizeof(::bosdyn::api::Quaternion)},
  { 32, -1, sizeof(::bosdyn::api::Plane)},
  { 39, -1, sizeof(::bosdyn::api::SE2Pose)},
  { 46, -1, sizeof(::bosdyn::api::SE2Velocity)},
  { 53, -1, sizeof(::bosdyn::api::SE2VelocityLimit)},
  { 60, -1, sizeof(::bosdyn::api::SE3Pose)},
  { 67, -1, sizeof(::bosdyn::api::SE3Velocity)},
  { 74, -1, sizeof(::bosdyn::api::Wrench)},
  { 81, -1, sizeof(::bosdyn::api::FrameTreeSnapshot_ParentEdge)},
  { 88, 95, sizeof(::bosdyn::api::FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUse)},
  { 97, -1, sizeof(::bosdyn::api::FrameTreeSnapshot)},
  { 103, -1, sizeof(::bosdyn::api::Box2)},
  { 109, -1, sizeof(::bosdyn::api::Box2WithFrame)},
  { 117, -1, sizeof(::bosdyn::api::Box3)},
  { 123, -1, sizeof(::bosdyn::api::Box3WithFrame)},
  { 131, -1, sizeof(::bosdyn::api::SE3Covariance)},
  { 146, -1, sizeof(::bosdyn::api::EulerZXYRate)},
  { 154, -1, sizeof(::bosdyn::api::PolyLine)},
  { 160, -1, sizeof(::bosdyn::api::Polygon)},
  { 166, -1, sizeof(::bosdyn::api::Circle)},
  { 173, -1, sizeof(::bosdyn::api::Area)},
  { 181, -1, sizeof(::bosdyn::api::Volume)},
  { 188, -1, sizeof(::bosdyn::api::Vec2Value)},
  { 195, -1, sizeof(::bosdyn::api::Vec3Value)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_Vec2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_Vec3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_CylindricalCoordinate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_Quaternion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_Plane_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_SE2Pose_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_SE2Velocity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_SE2VelocityLimit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_SE3Pose_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_SE3Velocity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_Wrench_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_FrameTreeSnapshot_ParentEdge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_FrameTreeSnapshot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_Box2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_Box2WithFrame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_Box3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_Box3WithFrame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_SE3Covariance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_EulerZXYRate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_PolyLine_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_Polygon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_Circle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_Area_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_Volume_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_Vec2Value_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_Vec3Value_default_instance_),
};

const char descriptor_table_protodef_bosdyn_2fapi_2fgeometry_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031bosdyn/api/geometry.proto\022\nbosdyn.api\032"
  "\036google/protobuf/wrappers.proto\"\034\n\004Vec2\022"
  "\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\"\'\n\004Vec3\022\t\n\001x\030\001 \001(\001"
  "\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\"<\n\025CylindricalCoo"
  "rdinate\022\t\n\001r\030\001 \001(\001\022\r\n\005theta\030\002 \001(\001\022\t\n\001z\030\003"
  " \001(\001\"8\n\nQuaternion\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001"
  "\022\t\n\001z\030\003 \001(\001\022\t\n\001w\030\004 \001(\001\"J\n\005Plane\022\037\n\005point"
  "\030\001 \001(\0132\020.bosdyn.api.Vec3\022 \n\006normal\030\002 \001(\013"
  "2\020.bosdyn.api.Vec3\"<\n\007SE2Pose\022\"\n\010positio"
  "n\030\001 \001(\0132\020.bosdyn.api.Vec2\022\r\n\005angle\030\002 \001(\001"
  "\"@\n\013SE2Velocity\022 \n\006linear\030\001 \001(\0132\020.bosdyn"
  ".api.Vec2\022\017\n\007angular\030\002 \001(\001\"f\n\020SE2Velocit"
  "yLimit\022(\n\007max_vel\030\001 \001(\0132\027.bosdyn.api.SE2"
  "Velocity\022(\n\007min_vel\030\002 \001(\0132\027.bosdyn.api.S"
  "E2Velocity\"W\n\007SE3Pose\022\"\n\010position\030\001 \001(\0132"
  "\020.bosdyn.api.Vec3\022(\n\010rotation\030\002 \001(\0132\026.bo"
  "sdyn.api.Quaternion\"R\n\013SE3Velocity\022 \n\006li"
  "near\030\001 \001(\0132\020.bosdyn.api.Vec3\022!\n\007angular\030"
  "\002 \001(\0132\020.bosdyn.api.Vec3\"K\n\006Wrench\022\037\n\005for"
  "ce\030\001 \001(\0132\020.bosdyn.api.Vec3\022 \n\006torque\030\002 \001"
  "(\0132\020.bosdyn.api.Vec3\"\257\002\n\021FrameTreeSnapsh"
  "ot\022Y\n\030child_to_parent_edge_map\030\001 \003(\01327.b"
  "osdyn.api.FrameTreeSnapshot.ChildToParen"
  "tEdgeMapEntry\032X\n\nParentEdge\022\031\n\021parent_fr"
  "ame_name\030\001 \001(\t\022/\n\022parent_tform_child\030\002 \001"
  "(\0132\023.bosdyn.api.SE3Pose\032e\n\031ChildToParent"
  "EdgeMapEntry\022\013\n\003key\030\001 \001(\t\0227\n\005value\030\002 \001(\013"
  "2(.bosdyn.api.FrameTreeSnapshot.ParentEd"
  "ge:\0028\001\"&\n\004Box2\022\036\n\004size\030\001 \001(\0132\020.bosdyn.ap"
  "i.Vec2\"u\n\rBox2WithFrame\022\035\n\003box\030\001 \001(\0132\020.b"
  "osdyn.api.Box2\022\022\n\nframe_name\030\002 \001(\t\0221\n\024fr"
  "ame_name_tform_box\030\003 \001(\0132\023.bosdyn.api.SE"
  "3Pose\"&\n\004Box3\022\036\n\004size\030\001 \001(\0132\020.bosdyn.api"
  ".Vec3\"u\n\rBox3WithFrame\022\035\n\003box\030\001 \001(\0132\020.bo"
  "sdyn.api.Box3\022\022\n\nframe_name\030\002 \001(\t\0221\n\024fra"
  "me_name_tform_box\030\003 \001(\0132\023.bosdyn.api.SE3"
  "Pose\"\265\001\n\rSE3Covariance\022\016\n\006cov_xx\030\003 \001(\001\022\016"
  "\n\006cov_xy\030\004 \001(\001\022\016\n\006cov_xz\030\005 \001(\001\022\016\n\006cov_yx"
  "\030\006 \001(\001\022\016\n\006cov_yy\030\007 \001(\001\022\016\n\006cov_yz\030\010 \001(\001\022\016"
  "\n\006cov_zx\030\t \001(\001\022\016\n\006cov_zy\030\n \001(\001\022\016\n\006cov_zz"
  "\030\013 \001(\001\022\024\n\014yaw_variance\030\002 \001(\001\"8\n\014EulerZXY"
  "Rate\022\013\n\003yaw\030\001 \001(\001\022\014\n\004roll\030\002 \001(\001\022\r\n\005pitch"
  "\030\003 \001(\001\",\n\010PolyLine\022 \n\006points\030\001 \003(\0132\020.bos"
  "dyn.api.Vec2\"-\n\007Polygon\022\"\n\010vertexes\030\001 \003("
  "\0132\020.bosdyn.api.Vec2\"=\n\006Circle\022#\n\tcenter_"
  "pt\030\001 \001(\0132\020.bosdyn.api.Vec2\022\016\n\006radius\030\002 \001"
  "(\001\"`\n\004Area\022&\n\007polygon\030\001 \001(\0132\023.bosdyn.api"
  ".PolygonH\000\022$\n\006circle\030\002 \001(\0132\022.bosdyn.api."
  "CircleH\000B\n\n\010geometry\"5\n\006Volume\022\037\n\003box\030\001 "
  "\001(\0132\020.bosdyn.api.Vec3H\000B\n\n\010geometry\"]\n\tV"
  "ec2Value\022\'\n\001x\030\001 \001(\0132\034.google.protobuf.Do"
  "ubleValue\022\'\n\001y\030\002 \001(\0132\034.google.protobuf.D"
  "oubleValue\"\206\001\n\tVec3Value\022\'\n\001x\030\001 \001(\0132\034.go"
  "ogle.protobuf.DoubleValue\022\'\n\001y\030\002 \001(\0132\034.g"
  "oogle.protobuf.DoubleValue\022\'\n\001z\030\003 \001(\0132\034."
  "google.protobuf.DoubleValueB\017B\rGeometryP"
  "rotob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bosdyn_2fapi_2fgeometry_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bosdyn_2fapi_2fgeometry_2eproto_sccs[27] = {
  &scc_info_Area_bosdyn_2fapi_2fgeometry_2eproto.base,
  &scc_info_Box2_bosdyn_2fapi_2fgeometry_2eproto.base,
  &scc_info_Box2WithFrame_bosdyn_2fapi_2fgeometry_2eproto.base,
  &scc_info_Box3_bosdyn_2fapi_2fgeometry_2eproto.base,
  &scc_info_Box3WithFrame_bosdyn_2fapi_2fgeometry_2eproto.base,
  &scc_info_Circle_bosdyn_2fapi_2fgeometry_2eproto.base,
  &scc_info_CylindricalCoordinate_bosdyn_2fapi_2fgeometry_2eproto.base,
  &scc_info_EulerZXYRate_bosdyn_2fapi_2fgeometry_2eproto.base,
  &scc_info_FrameTreeSnapshot_bosdyn_2fapi_2fgeometry_2eproto.base,
  &scc_info_FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUse_bosdyn_2fapi_2fgeometry_2eproto.base,
  &scc_info_FrameTreeSnapshot_ParentEdge_bosdyn_2fapi_2fgeometry_2eproto.base,
  &scc_info_Plane_bosdyn_2fapi_2fgeometry_2eproto.base,
  &scc_info_PolyLine_bosdyn_2fapi_2fgeometry_2eproto.base,
  &scc_info_Polygon_bosdyn_2fapi_2fgeometry_2eproto.base,
  &scc_info_Quaternion_bosdyn_2fapi_2fgeometry_2eproto.base,
  &scc_info_SE2Pose_bosdyn_2fapi_2fgeometry_2eproto.base,
  &scc_info_SE2Velocity_bosdyn_2fapi_2fgeometry_2eproto.base,
  &scc_info_SE2VelocityLimit_bosdyn_2fapi_2fgeometry_2eproto.base,
  &scc_info_SE3Covariance_bosdyn_2fapi_2fgeometry_2eproto.base,
  &scc_info_SE3Pose_bosdyn_2fapi_2fgeometry_2eproto.base,
  &scc_info_SE3Velocity_bosdyn_2fapi_2fgeometry_2eproto.base,
  &scc_info_Vec2_bosdyn_2fapi_2fgeometry_2eproto.base,
  &scc_info_Vec2Value_bosdyn_2fapi_2fgeometry_2eproto.base,
  &scc_info_Vec3_bosdyn_2fapi_2fgeometry_2eproto.base,
  &scc_info_Vec3Value_bosdyn_2fapi_2fgeometry_2eproto.base,
  &scc_info_Volume_bosdyn_2fapi_2fgeometry_2eproto.base,
  &scc_info_Wrench_bosdyn_2fapi_2fgeometry_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bosdyn_2fapi_2fgeometry_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fgeometry_2eproto = {
  false, false, descriptor_table_protodef_bosdyn_2fapi_2fgeometry_2eproto, "bosdyn/api/geometry.proto", 2252,
  &descriptor_table_bosdyn_2fapi_2fgeometry_2eproto_once, descriptor_table_bosdyn_2fapi_2fgeometry_2eproto_sccs, descriptor_table_bosdyn_2fapi_2fgeometry_2eproto_deps, 27, 1,
  schemas, file_default_instances, TableStruct_bosdyn_2fapi_2fgeometry_2eproto::offsets,
  file_level_metadata_bosdyn_2fapi_2fgeometry_2eproto, 27, file_level_enum_descriptors_bosdyn_2fapi_2fgeometry_2eproto, file_level_service_descriptors_bosdyn_2fapi_2fgeometry_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bosdyn_2fapi_2fgeometry_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bosdyn_2fapi_2fgeometry_2eproto)), true);
namespace bosdyn {
namespace api {

// ===================================================================

void Vec2::InitAsDefaultInstance() {
}
class Vec2::_Internal {
 public:
};

Vec2::Vec2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.Vec2)
}
Vec2::Vec2(const Vec2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.Vec2)
}

void Vec2::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Vec2::~Vec2() {
  // @@protoc_insertion_point(destructor:bosdyn.api.Vec2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vec2::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Vec2::ArenaDtor(void* object) {
  Vec2* _this = reinterpret_cast< Vec2* >(object);
  (void)_this;
}
void Vec2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vec2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vec2& Vec2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vec2_bosdyn_2fapi_2fgeometry_2eproto.base);
  return *internal_default_instance();
}


void Vec2::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.Vec2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vec2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vec2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.Vec2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.Vec2)
  return target;
}

size_t Vec2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.Vec2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vec2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.Vec2)
  GOOGLE_DCHECK_NE(&from, this);
  const Vec2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vec2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.Vec2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.Vec2)
    MergeFrom(*source);
  }
}

void Vec2::MergeFrom(const Vec2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.Vec2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
}

void Vec2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.Vec2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vec2::CopyFrom(const Vec2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.Vec2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec2::IsInitialized() const {
  return true;
}

void Vec2::InternalSwap(Vec2* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vec2, y_)
      + sizeof(Vec2::y_)
      - PROTOBUF_FIELD_OFFSET(Vec2, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vec2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Vec3::InitAsDefaultInstance() {
}
class Vec3::_Internal {
 public:
};

Vec3::Vec3(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.Vec3)
}
Vec3::Vec3(const Vec3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.Vec3)
}

void Vec3::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Vec3::~Vec3() {
  // @@protoc_insertion_point(destructor:bosdyn.api.Vec3)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vec3::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Vec3::ArenaDtor(void* object) {
  Vec3* _this = reinterpret_cast< Vec3* >(object);
  (void)_this;
}
void Vec3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vec3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vec3& Vec3::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vec3_bosdyn_2fapi_2fgeometry_2eproto.base);
  return *internal_default_instance();
}


void Vec3::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.Vec3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vec3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vec3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.Vec3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.Vec3)
  return target;
}

size_t Vec3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.Vec3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vec3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.Vec3)
  GOOGLE_DCHECK_NE(&from, this);
  const Vec3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vec3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.Vec3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.Vec3)
    MergeFrom(*source);
  }
}

void Vec3::MergeFrom(const Vec3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.Vec3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void Vec3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.Vec3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vec3::CopyFrom(const Vec3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.Vec3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec3::IsInitialized() const {
  return true;
}

void Vec3::InternalSwap(Vec3* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vec3, z_)
      + sizeof(Vec3::z_)
      - PROTOBUF_FIELD_OFFSET(Vec3, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vec3::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CylindricalCoordinate::InitAsDefaultInstance() {
}
class CylindricalCoordinate::_Internal {
 public:
};

CylindricalCoordinate::CylindricalCoordinate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.CylindricalCoordinate)
}
CylindricalCoordinate::CylindricalCoordinate(const CylindricalCoordinate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&r_, &from.r_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&r_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.CylindricalCoordinate)
}

void CylindricalCoordinate::SharedCtor() {
  ::memset(&r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&r_)) + sizeof(z_));
}

CylindricalCoordinate::~CylindricalCoordinate() {
  // @@protoc_insertion_point(destructor:bosdyn.api.CylindricalCoordinate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CylindricalCoordinate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CylindricalCoordinate::ArenaDtor(void* object) {
  CylindricalCoordinate* _this = reinterpret_cast< CylindricalCoordinate* >(object);
  (void)_this;
}
void CylindricalCoordinate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CylindricalCoordinate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CylindricalCoordinate& CylindricalCoordinate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CylindricalCoordinate_bosdyn_2fapi_2fgeometry_2eproto.base);
  return *internal_default_instance();
}


void CylindricalCoordinate::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.CylindricalCoordinate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&r_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CylindricalCoordinate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double r = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          r_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double theta = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CylindricalCoordinate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.CylindricalCoordinate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double r = 1;
  if (!(this->r() <= 0 && this->r() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_r(), target);
  }

  // double theta = 2;
  if (!(this->theta() <= 0 && this->theta() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_theta(), target);
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.CylindricalCoordinate)
  return target;
}

size_t CylindricalCoordinate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.CylindricalCoordinate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double r = 1;
  if (!(this->r() <= 0 && this->r() >= 0)) {
    total_size += 1 + 8;
  }

  // double theta = 2;
  if (!(this->theta() <= 0 && this->theta() >= 0)) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CylindricalCoordinate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.CylindricalCoordinate)
  GOOGLE_DCHECK_NE(&from, this);
  const CylindricalCoordinate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CylindricalCoordinate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.CylindricalCoordinate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.CylindricalCoordinate)
    MergeFrom(*source);
  }
}

void CylindricalCoordinate::MergeFrom(const CylindricalCoordinate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.CylindricalCoordinate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.r() <= 0 && from.r() >= 0)) {
    _internal_set_r(from._internal_r());
  }
  if (!(from.theta() <= 0 && from.theta() >= 0)) {
    _internal_set_theta(from._internal_theta());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void CylindricalCoordinate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.CylindricalCoordinate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CylindricalCoordinate::CopyFrom(const CylindricalCoordinate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.CylindricalCoordinate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CylindricalCoordinate::IsInitialized() const {
  return true;
}

void CylindricalCoordinate::InternalSwap(CylindricalCoordinate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CylindricalCoordinate, z_)
      + sizeof(CylindricalCoordinate::z_)
      - PROTOBUF_FIELD_OFFSET(CylindricalCoordinate, r_)>(
          reinterpret_cast<char*>(&r_),
          reinterpret_cast<char*>(&other->r_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CylindricalCoordinate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Quaternion::InitAsDefaultInstance() {
}
class Quaternion::_Internal {
 public:
};

Quaternion::Quaternion(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.Quaternion)
}
Quaternion::Quaternion(const Quaternion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&w_) -
    reinterpret_cast<char*>(&x_)) + sizeof(w_));
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.Quaternion)
}

void Quaternion::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&w_) -
      reinterpret_cast<char*>(&x_)) + sizeof(w_));
}

Quaternion::~Quaternion() {
  // @@protoc_insertion_point(destructor:bosdyn.api.Quaternion)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Quaternion::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Quaternion::ArenaDtor(void* object) {
  Quaternion* _this = reinterpret_cast< Quaternion* >(object);
  (void)_this;
}
void Quaternion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Quaternion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Quaternion& Quaternion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Quaternion_bosdyn_2fapi_2fgeometry_2eproto.base);
  return *internal_default_instance();
}


void Quaternion::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.Quaternion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&w_) -
      reinterpret_cast<char*>(&x_)) + sizeof(w_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Quaternion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double w = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Quaternion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.Quaternion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  // double w = 4;
  if (!(this->w() <= 0 && this->w() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_w(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.Quaternion)
  return target;
}

size_t Quaternion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.Quaternion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 8;
  }

  // double w = 4;
  if (!(this->w() <= 0 && this->w() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Quaternion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.Quaternion)
  GOOGLE_DCHECK_NE(&from, this);
  const Quaternion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Quaternion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.Quaternion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.Quaternion)
    MergeFrom(*source);
  }
}

void Quaternion::MergeFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.Quaternion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  if (!(from.w() <= 0 && from.w() >= 0)) {
    _internal_set_w(from._internal_w());
  }
}

void Quaternion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quaternion::CopyFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quaternion::IsInitialized() const {
  return true;
}

void Quaternion::InternalSwap(Quaternion* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Quaternion, w_)
      + sizeof(Quaternion::w_)
      - PROTOBUF_FIELD_OFFSET(Quaternion, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Quaternion::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Plane::InitAsDefaultInstance() {
  ::bosdyn::api::_Plane_default_instance_._instance.get_mutable()->point_ = const_cast< ::bosdyn::api::Vec3*>(
      ::bosdyn::api::Vec3::internal_default_instance());
  ::bosdyn::api::_Plane_default_instance_._instance.get_mutable()->normal_ = const_cast< ::bosdyn::api::Vec3*>(
      ::bosdyn::api::Vec3::internal_default_instance());
}
class Plane::_Internal {
 public:
  static const ::bosdyn::api::Vec3& point(const Plane* msg);
  static const ::bosdyn::api::Vec3& normal(const Plane* msg);
};

const ::bosdyn::api::Vec3&
Plane::_Internal::point(const Plane* msg) {
  return *msg->point_;
}
const ::bosdyn::api::Vec3&
Plane::_Internal::normal(const Plane* msg) {
  return *msg->normal_;
}
Plane::Plane(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.Plane)
}
Plane::Plane(const Plane& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_point()) {
    point_ = new ::bosdyn::api::Vec3(*from.point_);
  } else {
    point_ = nullptr;
  }
  if (from._internal_has_normal()) {
    normal_ = new ::bosdyn::api::Vec3(*from.normal_);
  } else {
    normal_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.Plane)
}

void Plane::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Plane_bosdyn_2fapi_2fgeometry_2eproto.base);
  ::memset(&point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&normal_) -
      reinterpret_cast<char*>(&point_)) + sizeof(normal_));
}

Plane::~Plane() {
  // @@protoc_insertion_point(destructor:bosdyn.api.Plane)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Plane::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete point_;
  if (this != internal_default_instance()) delete normal_;
}

void Plane::ArenaDtor(void* object) {
  Plane* _this = reinterpret_cast< Plane* >(object);
  (void)_this;
}
void Plane::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Plane::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Plane& Plane::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Plane_bosdyn_2fapi_2fgeometry_2eproto.base);
  return *internal_default_instance();
}


void Plane::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.Plane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && point_ != nullptr) {
    delete point_;
  }
  point_ = nullptr;
  if (GetArena() == nullptr && normal_ != nullptr) {
    delete normal_;
  }
  normal_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Plane::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.Vec3 point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.Vec3 normal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_normal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Plane::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.Plane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.Vec3 point = 1;
  if (this->has_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::point(this), target, stream);
  }

  // .bosdyn.api.Vec3 normal = 2;
  if (this->has_normal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::normal(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.Plane)
  return target;
}

size_t Plane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.Plane)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.Vec3 point = 1;
  if (this->has_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *point_);
  }

  // .bosdyn.api.Vec3 normal = 2;
  if (this->has_normal()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *normal_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Plane::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.Plane)
  GOOGLE_DCHECK_NE(&from, this);
  const Plane* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Plane>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.Plane)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.Plane)
    MergeFrom(*source);
  }
}

void Plane::MergeFrom(const Plane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.Plane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_point()) {
    _internal_mutable_point()->::bosdyn::api::Vec3::MergeFrom(from._internal_point());
  }
  if (from.has_normal()) {
    _internal_mutable_normal()->::bosdyn::api::Vec3::MergeFrom(from._internal_normal());
  }
}

void Plane::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.Plane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Plane::CopyFrom(const Plane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.Plane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plane::IsInitialized() const {
  return true;
}

void Plane::InternalSwap(Plane* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Plane, normal_)
      + sizeof(Plane::normal_)
      - PROTOBUF_FIELD_OFFSET(Plane, point_)>(
          reinterpret_cast<char*>(&point_),
          reinterpret_cast<char*>(&other->point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Plane::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SE2Pose::InitAsDefaultInstance() {
  ::bosdyn::api::_SE2Pose_default_instance_._instance.get_mutable()->position_ = const_cast< ::bosdyn::api::Vec2*>(
      ::bosdyn::api::Vec2::internal_default_instance());
}
class SE2Pose::_Internal {
 public:
  static const ::bosdyn::api::Vec2& position(const SE2Pose* msg);
};

const ::bosdyn::api::Vec2&
SE2Pose::_Internal::position(const SE2Pose* msg) {
  return *msg->position_;
}
SE2Pose::SE2Pose(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.SE2Pose)
}
SE2Pose::SE2Pose(const SE2Pose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::bosdyn::api::Vec2(*from.position_);
  } else {
    position_ = nullptr;
  }
  angle_ = from.angle_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.SE2Pose)
}

void SE2Pose::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SE2Pose_bosdyn_2fapi_2fgeometry_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angle_) -
      reinterpret_cast<char*>(&position_)) + sizeof(angle_));
}

SE2Pose::~SE2Pose() {
  // @@protoc_insertion_point(destructor:bosdyn.api.SE2Pose)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SE2Pose::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete position_;
}

void SE2Pose::ArenaDtor(void* object) {
  SE2Pose* _this = reinterpret_cast< SE2Pose* >(object);
  (void)_this;
}
void SE2Pose::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SE2Pose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SE2Pose& SE2Pose::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SE2Pose_bosdyn_2fapi_2fgeometry_2eproto.base);
  return *internal_default_instance();
}


void SE2Pose::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.SE2Pose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  angle_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SE2Pose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.Vec2 position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double angle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SE2Pose::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.SE2Pose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.Vec2 position = 1;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  // double angle = 2;
  if (!(this->angle() <= 0 && this->angle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.SE2Pose)
  return target;
}

size_t SE2Pose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.SE2Pose)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.Vec2 position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // double angle = 2;
  if (!(this->angle() <= 0 && this->angle() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SE2Pose::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.SE2Pose)
  GOOGLE_DCHECK_NE(&from, this);
  const SE2Pose* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SE2Pose>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.SE2Pose)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.SE2Pose)
    MergeFrom(*source);
  }
}

void SE2Pose::MergeFrom(const SE2Pose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.SE2Pose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    _internal_mutable_position()->::bosdyn::api::Vec2::MergeFrom(from._internal_position());
  }
  if (!(from.angle() <= 0 && from.angle() >= 0)) {
    _internal_set_angle(from._internal_angle());
  }
}

void SE2Pose::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.SE2Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SE2Pose::CopyFrom(const SE2Pose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.SE2Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SE2Pose::IsInitialized() const {
  return true;
}

void SE2Pose::InternalSwap(SE2Pose* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SE2Pose, angle_)
      + sizeof(SE2Pose::angle_)
      - PROTOBUF_FIELD_OFFSET(SE2Pose, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SE2Pose::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SE2Velocity::InitAsDefaultInstance() {
  ::bosdyn::api::_SE2Velocity_default_instance_._instance.get_mutable()->linear_ = const_cast< ::bosdyn::api::Vec2*>(
      ::bosdyn::api::Vec2::internal_default_instance());
}
class SE2Velocity::_Internal {
 public:
  static const ::bosdyn::api::Vec2& linear(const SE2Velocity* msg);
};

const ::bosdyn::api::Vec2&
SE2Velocity::_Internal::linear(const SE2Velocity* msg) {
  return *msg->linear_;
}
SE2Velocity::SE2Velocity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.SE2Velocity)
}
SE2Velocity::SE2Velocity(const SE2Velocity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_linear()) {
    linear_ = new ::bosdyn::api::Vec2(*from.linear_);
  } else {
    linear_ = nullptr;
  }
  angular_ = from.angular_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.SE2Velocity)
}

void SE2Velocity::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SE2Velocity_bosdyn_2fapi_2fgeometry_2eproto.base);
  ::memset(&linear_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angular_) -
      reinterpret_cast<char*>(&linear_)) + sizeof(angular_));
}

SE2Velocity::~SE2Velocity() {
  // @@protoc_insertion_point(destructor:bosdyn.api.SE2Velocity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SE2Velocity::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete linear_;
}

void SE2Velocity::ArenaDtor(void* object) {
  SE2Velocity* _this = reinterpret_cast< SE2Velocity* >(object);
  (void)_this;
}
void SE2Velocity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SE2Velocity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SE2Velocity& SE2Velocity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SE2Velocity_bosdyn_2fapi_2fgeometry_2eproto.base);
  return *internal_default_instance();
}


void SE2Velocity::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.SE2Velocity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && linear_ != nullptr) {
    delete linear_;
  }
  linear_ = nullptr;
  angular_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SE2Velocity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.Vec2 linear = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double angular = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          angular_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SE2Velocity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.SE2Velocity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.Vec2 linear = 1;
  if (this->has_linear()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::linear(this), target, stream);
  }

  // double angular = 2;
  if (!(this->angular() <= 0 && this->angular() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_angular(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.SE2Velocity)
  return target;
}

size_t SE2Velocity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.SE2Velocity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.Vec2 linear = 1;
  if (this->has_linear()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *linear_);
  }

  // double angular = 2;
  if (!(this->angular() <= 0 && this->angular() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SE2Velocity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.SE2Velocity)
  GOOGLE_DCHECK_NE(&from, this);
  const SE2Velocity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SE2Velocity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.SE2Velocity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.SE2Velocity)
    MergeFrom(*source);
  }
}

void SE2Velocity::MergeFrom(const SE2Velocity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.SE2Velocity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_linear()) {
    _internal_mutable_linear()->::bosdyn::api::Vec2::MergeFrom(from._internal_linear());
  }
  if (!(from.angular() <= 0 && from.angular() >= 0)) {
    _internal_set_angular(from._internal_angular());
  }
}

void SE2Velocity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.SE2Velocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SE2Velocity::CopyFrom(const SE2Velocity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.SE2Velocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SE2Velocity::IsInitialized() const {
  return true;
}

void SE2Velocity::InternalSwap(SE2Velocity* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SE2Velocity, angular_)
      + sizeof(SE2Velocity::angular_)
      - PROTOBUF_FIELD_OFFSET(SE2Velocity, linear_)>(
          reinterpret_cast<char*>(&linear_),
          reinterpret_cast<char*>(&other->linear_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SE2Velocity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SE2VelocityLimit::InitAsDefaultInstance() {
  ::bosdyn::api::_SE2VelocityLimit_default_instance_._instance.get_mutable()->max_vel_ = const_cast< ::bosdyn::api::SE2Velocity*>(
      ::bosdyn::api::SE2Velocity::internal_default_instance());
  ::bosdyn::api::_SE2VelocityLimit_default_instance_._instance.get_mutable()->min_vel_ = const_cast< ::bosdyn::api::SE2Velocity*>(
      ::bosdyn::api::SE2Velocity::internal_default_instance());
}
class SE2VelocityLimit::_Internal {
 public:
  static const ::bosdyn::api::SE2Velocity& max_vel(const SE2VelocityLimit* msg);
  static const ::bosdyn::api::SE2Velocity& min_vel(const SE2VelocityLimit* msg);
};

const ::bosdyn::api::SE2Velocity&
SE2VelocityLimit::_Internal::max_vel(const SE2VelocityLimit* msg) {
  return *msg->max_vel_;
}
const ::bosdyn::api::SE2Velocity&
SE2VelocityLimit::_Internal::min_vel(const SE2VelocityLimit* msg) {
  return *msg->min_vel_;
}
SE2VelocityLimit::SE2VelocityLimit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.SE2VelocityLimit)
}
SE2VelocityLimit::SE2VelocityLimit(const SE2VelocityLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_max_vel()) {
    max_vel_ = new ::bosdyn::api::SE2Velocity(*from.max_vel_);
  } else {
    max_vel_ = nullptr;
  }
  if (from._internal_has_min_vel()) {
    min_vel_ = new ::bosdyn::api::SE2Velocity(*from.min_vel_);
  } else {
    min_vel_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.SE2VelocityLimit)
}

void SE2VelocityLimit::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SE2VelocityLimit_bosdyn_2fapi_2fgeometry_2eproto.base);
  ::memset(&max_vel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_vel_) -
      reinterpret_cast<char*>(&max_vel_)) + sizeof(min_vel_));
}

SE2VelocityLimit::~SE2VelocityLimit() {
  // @@protoc_insertion_point(destructor:bosdyn.api.SE2VelocityLimit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SE2VelocityLimit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete max_vel_;
  if (this != internal_default_instance()) delete min_vel_;
}

void SE2VelocityLimit::ArenaDtor(void* object) {
  SE2VelocityLimit* _this = reinterpret_cast< SE2VelocityLimit* >(object);
  (void)_this;
}
void SE2VelocityLimit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SE2VelocityLimit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SE2VelocityLimit& SE2VelocityLimit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SE2VelocityLimit_bosdyn_2fapi_2fgeometry_2eproto.base);
  return *internal_default_instance();
}


void SE2VelocityLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.SE2VelocityLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && max_vel_ != nullptr) {
    delete max_vel_;
  }
  max_vel_ = nullptr;
  if (GetArena() == nullptr && min_vel_ != nullptr) {
    delete min_vel_;
  }
  min_vel_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SE2VelocityLimit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.SE2Velocity max_vel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_max_vel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.SE2Velocity min_vel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_min_vel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SE2VelocityLimit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.SE2VelocityLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.SE2Velocity max_vel = 1;
  if (this->has_max_vel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::max_vel(this), target, stream);
  }

  // .bosdyn.api.SE2Velocity min_vel = 2;
  if (this->has_min_vel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::min_vel(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.SE2VelocityLimit)
  return target;
}

size_t SE2VelocityLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.SE2VelocityLimit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.SE2Velocity max_vel = 1;
  if (this->has_max_vel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *max_vel_);
  }

  // .bosdyn.api.SE2Velocity min_vel = 2;
  if (this->has_min_vel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *min_vel_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SE2VelocityLimit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.SE2VelocityLimit)
  GOOGLE_DCHECK_NE(&from, this);
  const SE2VelocityLimit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SE2VelocityLimit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.SE2VelocityLimit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.SE2VelocityLimit)
    MergeFrom(*source);
  }
}

void SE2VelocityLimit::MergeFrom(const SE2VelocityLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.SE2VelocityLimit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_max_vel()) {
    _internal_mutable_max_vel()->::bosdyn::api::SE2Velocity::MergeFrom(from._internal_max_vel());
  }
  if (from.has_min_vel()) {
    _internal_mutable_min_vel()->::bosdyn::api::SE2Velocity::MergeFrom(from._internal_min_vel());
  }
}

void SE2VelocityLimit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.SE2VelocityLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SE2VelocityLimit::CopyFrom(const SE2VelocityLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.SE2VelocityLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SE2VelocityLimit::IsInitialized() const {
  return true;
}

void SE2VelocityLimit::InternalSwap(SE2VelocityLimit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SE2VelocityLimit, min_vel_)
      + sizeof(SE2VelocityLimit::min_vel_)
      - PROTOBUF_FIELD_OFFSET(SE2VelocityLimit, max_vel_)>(
          reinterpret_cast<char*>(&max_vel_),
          reinterpret_cast<char*>(&other->max_vel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SE2VelocityLimit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SE3Pose::InitAsDefaultInstance() {
  ::bosdyn::api::_SE3Pose_default_instance_._instance.get_mutable()->position_ = const_cast< ::bosdyn::api::Vec3*>(
      ::bosdyn::api::Vec3::internal_default_instance());
  ::bosdyn::api::_SE3Pose_default_instance_._instance.get_mutable()->rotation_ = const_cast< ::bosdyn::api::Quaternion*>(
      ::bosdyn::api::Quaternion::internal_default_instance());
}
class SE3Pose::_Internal {
 public:
  static const ::bosdyn::api::Vec3& position(const SE3Pose* msg);
  static const ::bosdyn::api::Quaternion& rotation(const SE3Pose* msg);
};

const ::bosdyn::api::Vec3&
SE3Pose::_Internal::position(const SE3Pose* msg) {
  return *msg->position_;
}
const ::bosdyn::api::Quaternion&
SE3Pose::_Internal::rotation(const SE3Pose* msg) {
  return *msg->rotation_;
}
SE3Pose::SE3Pose(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.SE3Pose)
}
SE3Pose::SE3Pose(const SE3Pose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::bosdyn::api::Vec3(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_rotation()) {
    rotation_ = new ::bosdyn::api::Quaternion(*from.rotation_);
  } else {
    rotation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.SE3Pose)
}

void SE3Pose::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SE3Pose_bosdyn_2fapi_2fgeometry_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotation_) -
      reinterpret_cast<char*>(&position_)) + sizeof(rotation_));
}

SE3Pose::~SE3Pose() {
  // @@protoc_insertion_point(destructor:bosdyn.api.SE3Pose)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SE3Pose::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete rotation_;
}

void SE3Pose::ArenaDtor(void* object) {
  SE3Pose* _this = reinterpret_cast< SE3Pose* >(object);
  (void)_this;
}
void SE3Pose::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SE3Pose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SE3Pose& SE3Pose::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SE3Pose_bosdyn_2fapi_2fgeometry_2eproto.base);
  return *internal_default_instance();
}


void SE3Pose::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.SE3Pose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArena() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SE3Pose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.Vec3 position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.Quaternion rotation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SE3Pose::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.SE3Pose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.Vec3 position = 1;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  // .bosdyn.api.Quaternion rotation = 2;
  if (this->has_rotation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rotation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.SE3Pose)
  return target;
}

size_t SE3Pose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.SE3Pose)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.Vec3 position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .bosdyn.api.Quaternion rotation = 2;
  if (this->has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotation_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SE3Pose::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.SE3Pose)
  GOOGLE_DCHECK_NE(&from, this);
  const SE3Pose* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SE3Pose>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.SE3Pose)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.SE3Pose)
    MergeFrom(*source);
  }
}

void SE3Pose::MergeFrom(const SE3Pose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.SE3Pose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    _internal_mutable_position()->::bosdyn::api::Vec3::MergeFrom(from._internal_position());
  }
  if (from.has_rotation()) {
    _internal_mutable_rotation()->::bosdyn::api::Quaternion::MergeFrom(from._internal_rotation());
  }
}

void SE3Pose::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.SE3Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SE3Pose::CopyFrom(const SE3Pose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.SE3Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SE3Pose::IsInitialized() const {
  return true;
}

void SE3Pose::InternalSwap(SE3Pose* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SE3Pose, rotation_)
      + sizeof(SE3Pose::rotation_)
      - PROTOBUF_FIELD_OFFSET(SE3Pose, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SE3Pose::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SE3Velocity::InitAsDefaultInstance() {
  ::bosdyn::api::_SE3Velocity_default_instance_._instance.get_mutable()->linear_ = const_cast< ::bosdyn::api::Vec3*>(
      ::bosdyn::api::Vec3::internal_default_instance());
  ::bosdyn::api::_SE3Velocity_default_instance_._instance.get_mutable()->angular_ = const_cast< ::bosdyn::api::Vec3*>(
      ::bosdyn::api::Vec3::internal_default_instance());
}
class SE3Velocity::_Internal {
 public:
  static const ::bosdyn::api::Vec3& linear(const SE3Velocity* msg);
  static const ::bosdyn::api::Vec3& angular(const SE3Velocity* msg);
};

const ::bosdyn::api::Vec3&
SE3Velocity::_Internal::linear(const SE3Velocity* msg) {
  return *msg->linear_;
}
const ::bosdyn::api::Vec3&
SE3Velocity::_Internal::angular(const SE3Velocity* msg) {
  return *msg->angular_;
}
SE3Velocity::SE3Velocity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.SE3Velocity)
}
SE3Velocity::SE3Velocity(const SE3Velocity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_linear()) {
    linear_ = new ::bosdyn::api::Vec3(*from.linear_);
  } else {
    linear_ = nullptr;
  }
  if (from._internal_has_angular()) {
    angular_ = new ::bosdyn::api::Vec3(*from.angular_);
  } else {
    angular_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.SE3Velocity)
}

void SE3Velocity::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SE3Velocity_bosdyn_2fapi_2fgeometry_2eproto.base);
  ::memset(&linear_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angular_) -
      reinterpret_cast<char*>(&linear_)) + sizeof(angular_));
}

SE3Velocity::~SE3Velocity() {
  // @@protoc_insertion_point(destructor:bosdyn.api.SE3Velocity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SE3Velocity::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete linear_;
  if (this != internal_default_instance()) delete angular_;
}

void SE3Velocity::ArenaDtor(void* object) {
  SE3Velocity* _this = reinterpret_cast< SE3Velocity* >(object);
  (void)_this;
}
void SE3Velocity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SE3Velocity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SE3Velocity& SE3Velocity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SE3Velocity_bosdyn_2fapi_2fgeometry_2eproto.base);
  return *internal_default_instance();
}


void SE3Velocity::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.SE3Velocity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && linear_ != nullptr) {
    delete linear_;
  }
  linear_ = nullptr;
  if (GetArena() == nullptr && angular_ != nullptr) {
    delete angular_;
  }
  angular_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SE3Velocity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.Vec3 linear = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.Vec3 angular = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_angular(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SE3Velocity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.SE3Velocity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.Vec3 linear = 1;
  if (this->has_linear()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::linear(this), target, stream);
  }

  // .bosdyn.api.Vec3 angular = 2;
  if (this->has_angular()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::angular(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.SE3Velocity)
  return target;
}

size_t SE3Velocity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.SE3Velocity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.Vec3 linear = 1;
  if (this->has_linear()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *linear_);
  }

  // .bosdyn.api.Vec3 angular = 2;
  if (this->has_angular()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *angular_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SE3Velocity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.SE3Velocity)
  GOOGLE_DCHECK_NE(&from, this);
  const SE3Velocity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SE3Velocity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.SE3Velocity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.SE3Velocity)
    MergeFrom(*source);
  }
}

void SE3Velocity::MergeFrom(const SE3Velocity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.SE3Velocity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_linear()) {
    _internal_mutable_linear()->::bosdyn::api::Vec3::MergeFrom(from._internal_linear());
  }
  if (from.has_angular()) {
    _internal_mutable_angular()->::bosdyn::api::Vec3::MergeFrom(from._internal_angular());
  }
}

void SE3Velocity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.SE3Velocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SE3Velocity::CopyFrom(const SE3Velocity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.SE3Velocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SE3Velocity::IsInitialized() const {
  return true;
}

void SE3Velocity::InternalSwap(SE3Velocity* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SE3Velocity, angular_)
      + sizeof(SE3Velocity::angular_)
      - PROTOBUF_FIELD_OFFSET(SE3Velocity, linear_)>(
          reinterpret_cast<char*>(&linear_),
          reinterpret_cast<char*>(&other->linear_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SE3Velocity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Wrench::InitAsDefaultInstance() {
  ::bosdyn::api::_Wrench_default_instance_._instance.get_mutable()->force_ = const_cast< ::bosdyn::api::Vec3*>(
      ::bosdyn::api::Vec3::internal_default_instance());
  ::bosdyn::api::_Wrench_default_instance_._instance.get_mutable()->torque_ = const_cast< ::bosdyn::api::Vec3*>(
      ::bosdyn::api::Vec3::internal_default_instance());
}
class Wrench::_Internal {
 public:
  static const ::bosdyn::api::Vec3& force(const Wrench* msg);
  static const ::bosdyn::api::Vec3& torque(const Wrench* msg);
};

const ::bosdyn::api::Vec3&
Wrench::_Internal::force(const Wrench* msg) {
  return *msg->force_;
}
const ::bosdyn::api::Vec3&
Wrench::_Internal::torque(const Wrench* msg) {
  return *msg->torque_;
}
Wrench::Wrench(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.Wrench)
}
Wrench::Wrench(const Wrench& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_force()) {
    force_ = new ::bosdyn::api::Vec3(*from.force_);
  } else {
    force_ = nullptr;
  }
  if (from._internal_has_torque()) {
    torque_ = new ::bosdyn::api::Vec3(*from.torque_);
  } else {
    torque_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.Wrench)
}

void Wrench::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Wrench_bosdyn_2fapi_2fgeometry_2eproto.base);
  ::memset(&force_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&torque_) -
      reinterpret_cast<char*>(&force_)) + sizeof(torque_));
}

Wrench::~Wrench() {
  // @@protoc_insertion_point(destructor:bosdyn.api.Wrench)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Wrench::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete force_;
  if (this != internal_default_instance()) delete torque_;
}

void Wrench::ArenaDtor(void* object) {
  Wrench* _this = reinterpret_cast< Wrench* >(object);
  (void)_this;
}
void Wrench::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Wrench::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Wrench& Wrench::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Wrench_bosdyn_2fapi_2fgeometry_2eproto.base);
  return *internal_default_instance();
}


void Wrench::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.Wrench)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && force_ != nullptr) {
    delete force_;
  }
  force_ = nullptr;
  if (GetArena() == nullptr && torque_ != nullptr) {
    delete torque_;
  }
  torque_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Wrench::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.Vec3 force = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_force(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.Vec3 torque = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_torque(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Wrench::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.Wrench)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.Vec3 force = 1;
  if (this->has_force()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::force(this), target, stream);
  }

  // .bosdyn.api.Vec3 torque = 2;
  if (this->has_torque()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::torque(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.Wrench)
  return target;
}

size_t Wrench::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.Wrench)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.Vec3 force = 1;
  if (this->has_force()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *force_);
  }

  // .bosdyn.api.Vec3 torque = 2;
  if (this->has_torque()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *torque_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Wrench::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.Wrench)
  GOOGLE_DCHECK_NE(&from, this);
  const Wrench* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Wrench>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.Wrench)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.Wrench)
    MergeFrom(*source);
  }
}

void Wrench::MergeFrom(const Wrench& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.Wrench)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_force()) {
    _internal_mutable_force()->::bosdyn::api::Vec3::MergeFrom(from._internal_force());
  }
  if (from.has_torque()) {
    _internal_mutable_torque()->::bosdyn::api::Vec3::MergeFrom(from._internal_torque());
  }
}

void Wrench::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.Wrench)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Wrench::CopyFrom(const Wrench& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.Wrench)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Wrench::IsInitialized() const {
  return true;
}

void Wrench::InternalSwap(Wrench* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Wrench, torque_)
      + sizeof(Wrench::torque_)
      - PROTOBUF_FIELD_OFFSET(Wrench, force_)>(
          reinterpret_cast<char*>(&force_),
          reinterpret_cast<char*>(&other->force_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Wrench::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FrameTreeSnapshot_ParentEdge::InitAsDefaultInstance() {
  ::bosdyn::api::_FrameTreeSnapshot_ParentEdge_default_instance_._instance.get_mutable()->parent_tform_child_ = const_cast< ::bosdyn::api::SE3Pose*>(
      ::bosdyn::api::SE3Pose::internal_default_instance());
}
class FrameTreeSnapshot_ParentEdge::_Internal {
 public:
  static const ::bosdyn::api::SE3Pose& parent_tform_child(const FrameTreeSnapshot_ParentEdge* msg);
};

const ::bosdyn::api::SE3Pose&
FrameTreeSnapshot_ParentEdge::_Internal::parent_tform_child(const FrameTreeSnapshot_ParentEdge* msg) {
  return *msg->parent_tform_child_;
}
FrameTreeSnapshot_ParentEdge::FrameTreeSnapshot_ParentEdge(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.FrameTreeSnapshot.ParentEdge)
}
FrameTreeSnapshot_ParentEdge::FrameTreeSnapshot_ParentEdge(const FrameTreeSnapshot_ParentEdge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  parent_frame_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_parent_frame_name().empty()) {
    parent_frame_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_parent_frame_name(),
      GetArena());
  }
  if (from._internal_has_parent_tform_child()) {
    parent_tform_child_ = new ::bosdyn::api::SE3Pose(*from.parent_tform_child_);
  } else {
    parent_tform_child_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.FrameTreeSnapshot.ParentEdge)
}

void FrameTreeSnapshot_ParentEdge::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FrameTreeSnapshot_ParentEdge_bosdyn_2fapi_2fgeometry_2eproto.base);
  parent_frame_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parent_tform_child_ = nullptr;
}

FrameTreeSnapshot_ParentEdge::~FrameTreeSnapshot_ParentEdge() {
  // @@protoc_insertion_point(destructor:bosdyn.api.FrameTreeSnapshot.ParentEdge)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FrameTreeSnapshot_ParentEdge::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  parent_frame_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parent_tform_child_;
}

void FrameTreeSnapshot_ParentEdge::ArenaDtor(void* object) {
  FrameTreeSnapshot_ParentEdge* _this = reinterpret_cast< FrameTreeSnapshot_ParentEdge* >(object);
  (void)_this;
}
void FrameTreeSnapshot_ParentEdge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FrameTreeSnapshot_ParentEdge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FrameTreeSnapshot_ParentEdge& FrameTreeSnapshot_ParentEdge::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FrameTreeSnapshot_ParentEdge_bosdyn_2fapi_2fgeometry_2eproto.base);
  return *internal_default_instance();
}


void FrameTreeSnapshot_ParentEdge::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.FrameTreeSnapshot.ParentEdge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parent_frame_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && parent_tform_child_ != nullptr) {
    delete parent_tform_child_;
  }
  parent_tform_child_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrameTreeSnapshot_ParentEdge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string parent_frame_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_parent_frame_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.FrameTreeSnapshot.ParentEdge.parent_frame_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.SE3Pose parent_tform_child = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_parent_tform_child(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FrameTreeSnapshot_ParentEdge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.FrameTreeSnapshot.ParentEdge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent_frame_name = 1;
  if (this->parent_frame_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parent_frame_name().data(), static_cast<int>(this->_internal_parent_frame_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.FrameTreeSnapshot.ParentEdge.parent_frame_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_parent_frame_name(), target);
  }

  // .bosdyn.api.SE3Pose parent_tform_child = 2;
  if (this->has_parent_tform_child()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::parent_tform_child(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.FrameTreeSnapshot.ParentEdge)
  return target;
}

size_t FrameTreeSnapshot_ParentEdge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.FrameTreeSnapshot.ParentEdge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string parent_frame_name = 1;
  if (this->parent_frame_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parent_frame_name());
  }

  // .bosdyn.api.SE3Pose parent_tform_child = 2;
  if (this->has_parent_tform_child()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *parent_tform_child_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrameTreeSnapshot_ParentEdge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.FrameTreeSnapshot.ParentEdge)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameTreeSnapshot_ParentEdge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FrameTreeSnapshot_ParentEdge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.FrameTreeSnapshot.ParentEdge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.FrameTreeSnapshot.ParentEdge)
    MergeFrom(*source);
  }
}

void FrameTreeSnapshot_ParentEdge::MergeFrom(const FrameTreeSnapshot_ParentEdge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.FrameTreeSnapshot.ParentEdge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.parent_frame_name().size() > 0) {
    _internal_set_parent_frame_name(from._internal_parent_frame_name());
  }
  if (from.has_parent_tform_child()) {
    _internal_mutable_parent_tform_child()->::bosdyn::api::SE3Pose::MergeFrom(from._internal_parent_tform_child());
  }
}

void FrameTreeSnapshot_ParentEdge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.FrameTreeSnapshot.ParentEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameTreeSnapshot_ParentEdge::CopyFrom(const FrameTreeSnapshot_ParentEdge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.FrameTreeSnapshot.ParentEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameTreeSnapshot_ParentEdge::IsInitialized() const {
  return true;
}

void FrameTreeSnapshot_ParentEdge::InternalSwap(FrameTreeSnapshot_ParentEdge* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  parent_frame_name_.Swap(&other->parent_frame_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(parent_tform_child_, other->parent_tform_child_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameTreeSnapshot_ParentEdge::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUse::FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUse() {}
FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUse::FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUse::MergeFrom(const FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void FrameTreeSnapshot::InitAsDefaultInstance() {
}
class FrameTreeSnapshot::_Internal {
 public:
};

FrameTreeSnapshot::FrameTreeSnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  child_to_parent_edge_map_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.FrameTreeSnapshot)
}
FrameTreeSnapshot::FrameTreeSnapshot(const FrameTreeSnapshot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  child_to_parent_edge_map_.MergeFrom(from.child_to_parent_edge_map_);
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.FrameTreeSnapshot)
}

void FrameTreeSnapshot::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FrameTreeSnapshot_bosdyn_2fapi_2fgeometry_2eproto.base);
}

FrameTreeSnapshot::~FrameTreeSnapshot() {
  // @@protoc_insertion_point(destructor:bosdyn.api.FrameTreeSnapshot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FrameTreeSnapshot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FrameTreeSnapshot::ArenaDtor(void* object) {
  FrameTreeSnapshot* _this = reinterpret_cast< FrameTreeSnapshot* >(object);
  (void)_this;
}
void FrameTreeSnapshot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FrameTreeSnapshot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FrameTreeSnapshot& FrameTreeSnapshot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FrameTreeSnapshot_bosdyn_2fapi_2fgeometry_2eproto.base);
  return *internal_default_instance();
}


void FrameTreeSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.FrameTreeSnapshot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  child_to_parent_edge_map_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrameTreeSnapshot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .bosdyn.api.FrameTreeSnapshot.ParentEdge> child_to_parent_edge_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&child_to_parent_edge_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FrameTreeSnapshot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.FrameTreeSnapshot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .bosdyn.api.FrameTreeSnapshot.ParentEdge> child_to_parent_edge_map = 1;
  if (!this->_internal_child_to_parent_edge_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::bosdyn::api::FrameTreeSnapshot_ParentEdge >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "bosdyn.api.FrameTreeSnapshot.ChildToParentEdgeMapEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_child_to_parent_edge_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_child_to_parent_edge_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::bosdyn::api::FrameTreeSnapshot_ParentEdge >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::bosdyn::api::FrameTreeSnapshot_ParentEdge >::const_iterator
          it = this->_internal_child_to_parent_edge_map().begin();
          it != this->_internal_child_to_parent_edge_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::bosdyn::api::FrameTreeSnapshot_ParentEdge >::const_iterator
          it = this->_internal_child_to_parent_edge_map().begin();
          it != this->_internal_child_to_parent_edge_map().end(); ++it) {
        target = FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.FrameTreeSnapshot)
  return target;
}

size_t FrameTreeSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.FrameTreeSnapshot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .bosdyn.api.FrameTreeSnapshot.ParentEdge> child_to_parent_edge_map = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_child_to_parent_edge_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::bosdyn::api::FrameTreeSnapshot_ParentEdge >::const_iterator
      it = this->_internal_child_to_parent_edge_map().begin();
      it != this->_internal_child_to_parent_edge_map().end(); ++it) {
    total_size += FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrameTreeSnapshot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.FrameTreeSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameTreeSnapshot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FrameTreeSnapshot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.FrameTreeSnapshot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.FrameTreeSnapshot)
    MergeFrom(*source);
  }
}

void FrameTreeSnapshot::MergeFrom(const FrameTreeSnapshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.FrameTreeSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  child_to_parent_edge_map_.MergeFrom(from.child_to_parent_edge_map_);
}

void FrameTreeSnapshot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.FrameTreeSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameTreeSnapshot::CopyFrom(const FrameTreeSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.FrameTreeSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameTreeSnapshot::IsInitialized() const {
  return true;
}

void FrameTreeSnapshot::InternalSwap(FrameTreeSnapshot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  child_to_parent_edge_map_.Swap(&other->child_to_parent_edge_map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameTreeSnapshot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Box2::InitAsDefaultInstance() {
  ::bosdyn::api::_Box2_default_instance_._instance.get_mutable()->size_ = const_cast< ::bosdyn::api::Vec2*>(
      ::bosdyn::api::Vec2::internal_default_instance());
}
class Box2::_Internal {
 public:
  static const ::bosdyn::api::Vec2& size(const Box2* msg);
};

const ::bosdyn::api::Vec2&
Box2::_Internal::size(const Box2* msg) {
  return *msg->size_;
}
Box2::Box2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.Box2)
}
Box2::Box2(const Box2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_size()) {
    size_ = new ::bosdyn::api::Vec2(*from.size_);
  } else {
    size_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.Box2)
}

void Box2::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Box2_bosdyn_2fapi_2fgeometry_2eproto.base);
  size_ = nullptr;
}

Box2::~Box2() {
  // @@protoc_insertion_point(destructor:bosdyn.api.Box2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Box2::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete size_;
}

void Box2::ArenaDtor(void* object) {
  Box2* _this = reinterpret_cast< Box2* >(object);
  (void)_this;
}
void Box2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Box2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Box2& Box2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Box2_bosdyn_2fapi_2fgeometry_2eproto.base);
  return *internal_default_instance();
}


void Box2::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.Box2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Box2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.Vec2 size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Box2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.Box2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.Vec2 size = 1;
  if (this->has_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::size(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.Box2)
  return target;
}

size_t Box2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.Box2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.Vec2 size = 1;
  if (this->has_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *size_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Box2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.Box2)
  GOOGLE_DCHECK_NE(&from, this);
  const Box2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Box2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.Box2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.Box2)
    MergeFrom(*source);
  }
}

void Box2::MergeFrom(const Box2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.Box2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_size()) {
    _internal_mutable_size()->::bosdyn::api::Vec2::MergeFrom(from._internal_size());
  }
}

void Box2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.Box2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Box2::CopyFrom(const Box2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.Box2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Box2::IsInitialized() const {
  return true;
}

void Box2::InternalSwap(Box2* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(size_, other->size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Box2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Box2WithFrame::InitAsDefaultInstance() {
  ::bosdyn::api::_Box2WithFrame_default_instance_._instance.get_mutable()->box_ = const_cast< ::bosdyn::api::Box2*>(
      ::bosdyn::api::Box2::internal_default_instance());
  ::bosdyn::api::_Box2WithFrame_default_instance_._instance.get_mutable()->frame_name_tform_box_ = const_cast< ::bosdyn::api::SE3Pose*>(
      ::bosdyn::api::SE3Pose::internal_default_instance());
}
class Box2WithFrame::_Internal {
 public:
  static const ::bosdyn::api::Box2& box(const Box2WithFrame* msg);
  static const ::bosdyn::api::SE3Pose& frame_name_tform_box(const Box2WithFrame* msg);
};

const ::bosdyn::api::Box2&
Box2WithFrame::_Internal::box(const Box2WithFrame* msg) {
  return *msg->box_;
}
const ::bosdyn::api::SE3Pose&
Box2WithFrame::_Internal::frame_name_tform_box(const Box2WithFrame* msg) {
  return *msg->frame_name_tform_box_;
}
Box2WithFrame::Box2WithFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.Box2WithFrame)
}
Box2WithFrame::Box2WithFrame(const Box2WithFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  frame_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_frame_name().empty()) {
    frame_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_frame_name(),
      GetArena());
  }
  if (from._internal_has_box()) {
    box_ = new ::bosdyn::api::Box2(*from.box_);
  } else {
    box_ = nullptr;
  }
  if (from._internal_has_frame_name_tform_box()) {
    frame_name_tform_box_ = new ::bosdyn::api::SE3Pose(*from.frame_name_tform_box_);
  } else {
    frame_name_tform_box_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.Box2WithFrame)
}

void Box2WithFrame::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Box2WithFrame_bosdyn_2fapi_2fgeometry_2eproto.base);
  frame_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&box_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_name_tform_box_) -
      reinterpret_cast<char*>(&box_)) + sizeof(frame_name_tform_box_));
}

Box2WithFrame::~Box2WithFrame() {
  // @@protoc_insertion_point(destructor:bosdyn.api.Box2WithFrame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Box2WithFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  frame_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete box_;
  if (this != internal_default_instance()) delete frame_name_tform_box_;
}

void Box2WithFrame::ArenaDtor(void* object) {
  Box2WithFrame* _this = reinterpret_cast< Box2WithFrame* >(object);
  (void)_this;
}
void Box2WithFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Box2WithFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Box2WithFrame& Box2WithFrame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Box2WithFrame_bosdyn_2fapi_2fgeometry_2eproto.base);
  return *internal_default_instance();
}


void Box2WithFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.Box2WithFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frame_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && box_ != nullptr) {
    delete box_;
  }
  box_ = nullptr;
  if (GetArena() == nullptr && frame_name_tform_box_ != nullptr) {
    delete frame_name_tform_box_;
  }
  frame_name_tform_box_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Box2WithFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.Box2 box = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_box(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string frame_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_frame_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.Box2WithFrame.frame_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.SE3Pose frame_name_tform_box = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_frame_name_tform_box(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Box2WithFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.Box2WithFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.Box2 box = 1;
  if (this->has_box()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::box(this), target, stream);
  }

  // string frame_name = 2;
  if (this->frame_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_frame_name().data(), static_cast<int>(this->_internal_frame_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.Box2WithFrame.frame_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_frame_name(), target);
  }

  // .bosdyn.api.SE3Pose frame_name_tform_box = 3;
  if (this->has_frame_name_tform_box()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::frame_name_tform_box(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.Box2WithFrame)
  return target;
}

size_t Box2WithFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.Box2WithFrame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string frame_name = 2;
  if (this->frame_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_frame_name());
  }

  // .bosdyn.api.Box2 box = 1;
  if (this->has_box()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *box_);
  }

  // .bosdyn.api.SE3Pose frame_name_tform_box = 3;
  if (this->has_frame_name_tform_box()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *frame_name_tform_box_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Box2WithFrame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.Box2WithFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const Box2WithFrame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Box2WithFrame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.Box2WithFrame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.Box2WithFrame)
    MergeFrom(*source);
  }
}

void Box2WithFrame::MergeFrom(const Box2WithFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.Box2WithFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.frame_name().size() > 0) {
    _internal_set_frame_name(from._internal_frame_name());
  }
  if (from.has_box()) {
    _internal_mutable_box()->::bosdyn::api::Box2::MergeFrom(from._internal_box());
  }
  if (from.has_frame_name_tform_box()) {
    _internal_mutable_frame_name_tform_box()->::bosdyn::api::SE3Pose::MergeFrom(from._internal_frame_name_tform_box());
  }
}

void Box2WithFrame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.Box2WithFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Box2WithFrame::CopyFrom(const Box2WithFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.Box2WithFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Box2WithFrame::IsInitialized() const {
  return true;
}

void Box2WithFrame::InternalSwap(Box2WithFrame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  frame_name_.Swap(&other->frame_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Box2WithFrame, frame_name_tform_box_)
      + sizeof(Box2WithFrame::frame_name_tform_box_)
      - PROTOBUF_FIELD_OFFSET(Box2WithFrame, box_)>(
          reinterpret_cast<char*>(&box_),
          reinterpret_cast<char*>(&other->box_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Box2WithFrame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Box3::InitAsDefaultInstance() {
  ::bosdyn::api::_Box3_default_instance_._instance.get_mutable()->size_ = const_cast< ::bosdyn::api::Vec3*>(
      ::bosdyn::api::Vec3::internal_default_instance());
}
class Box3::_Internal {
 public:
  static const ::bosdyn::api::Vec3& size(const Box3* msg);
};

const ::bosdyn::api::Vec3&
Box3::_Internal::size(const Box3* msg) {
  return *msg->size_;
}
Box3::Box3(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.Box3)
}
Box3::Box3(const Box3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_size()) {
    size_ = new ::bosdyn::api::Vec3(*from.size_);
  } else {
    size_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.Box3)
}

void Box3::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Box3_bosdyn_2fapi_2fgeometry_2eproto.base);
  size_ = nullptr;
}

Box3::~Box3() {
  // @@protoc_insertion_point(destructor:bosdyn.api.Box3)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Box3::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete size_;
}

void Box3::ArenaDtor(void* object) {
  Box3* _this = reinterpret_cast< Box3* >(object);
  (void)_this;
}
void Box3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Box3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Box3& Box3::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Box3_bosdyn_2fapi_2fgeometry_2eproto.base);
  return *internal_default_instance();
}


void Box3::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.Box3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Box3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.Vec3 size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Box3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.Box3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.Vec3 size = 1;
  if (this->has_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::size(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.Box3)
  return target;
}

size_t Box3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.Box3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.Vec3 size = 1;
  if (this->has_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *size_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Box3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.Box3)
  GOOGLE_DCHECK_NE(&from, this);
  const Box3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Box3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.Box3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.Box3)
    MergeFrom(*source);
  }
}

void Box3::MergeFrom(const Box3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.Box3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_size()) {
    _internal_mutable_size()->::bosdyn::api::Vec3::MergeFrom(from._internal_size());
  }
}

void Box3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.Box3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Box3::CopyFrom(const Box3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.Box3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Box3::IsInitialized() const {
  return true;
}

void Box3::InternalSwap(Box3* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(size_, other->size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Box3::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Box3WithFrame::InitAsDefaultInstance() {
  ::bosdyn::api::_Box3WithFrame_default_instance_._instance.get_mutable()->box_ = const_cast< ::bosdyn::api::Box3*>(
      ::bosdyn::api::Box3::internal_default_instance());
  ::bosdyn::api::_Box3WithFrame_default_instance_._instance.get_mutable()->frame_name_tform_box_ = const_cast< ::bosdyn::api::SE3Pose*>(
      ::bosdyn::api::SE3Pose::internal_default_instance());
}
class Box3WithFrame::_Internal {
 public:
  static const ::bosdyn::api::Box3& box(const Box3WithFrame* msg);
  static const ::bosdyn::api::SE3Pose& frame_name_tform_box(const Box3WithFrame* msg);
};

const ::bosdyn::api::Box3&
Box3WithFrame::_Internal::box(const Box3WithFrame* msg) {
  return *msg->box_;
}
const ::bosdyn::api::SE3Pose&
Box3WithFrame::_Internal::frame_name_tform_box(const Box3WithFrame* msg) {
  return *msg->frame_name_tform_box_;
}
Box3WithFrame::Box3WithFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.Box3WithFrame)
}
Box3WithFrame::Box3WithFrame(const Box3WithFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  frame_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_frame_name().empty()) {
    frame_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_frame_name(),
      GetArena());
  }
  if (from._internal_has_box()) {
    box_ = new ::bosdyn::api::Box3(*from.box_);
  } else {
    box_ = nullptr;
  }
  if (from._internal_has_frame_name_tform_box()) {
    frame_name_tform_box_ = new ::bosdyn::api::SE3Pose(*from.frame_name_tform_box_);
  } else {
    frame_name_tform_box_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.Box3WithFrame)
}

void Box3WithFrame::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Box3WithFrame_bosdyn_2fapi_2fgeometry_2eproto.base);
  frame_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&box_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_name_tform_box_) -
      reinterpret_cast<char*>(&box_)) + sizeof(frame_name_tform_box_));
}

Box3WithFrame::~Box3WithFrame() {
  // @@protoc_insertion_point(destructor:bosdyn.api.Box3WithFrame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Box3WithFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  frame_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete box_;
  if (this != internal_default_instance()) delete frame_name_tform_box_;
}

void Box3WithFrame::ArenaDtor(void* object) {
  Box3WithFrame* _this = reinterpret_cast< Box3WithFrame* >(object);
  (void)_this;
}
void Box3WithFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Box3WithFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Box3WithFrame& Box3WithFrame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Box3WithFrame_bosdyn_2fapi_2fgeometry_2eproto.base);
  return *internal_default_instance();
}


void Box3WithFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.Box3WithFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frame_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && box_ != nullptr) {
    delete box_;
  }
  box_ = nullptr;
  if (GetArena() == nullptr && frame_name_tform_box_ != nullptr) {
    delete frame_name_tform_box_;
  }
  frame_name_tform_box_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Box3WithFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.Box3 box = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_box(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string frame_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_frame_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.Box3WithFrame.frame_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.SE3Pose frame_name_tform_box = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_frame_name_tform_box(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Box3WithFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.Box3WithFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.Box3 box = 1;
  if (this->has_box()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::box(this), target, stream);
  }

  // string frame_name = 2;
  if (this->frame_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_frame_name().data(), static_cast<int>(this->_internal_frame_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.Box3WithFrame.frame_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_frame_name(), target);
  }

  // .bosdyn.api.SE3Pose frame_name_tform_box = 3;
  if (this->has_frame_name_tform_box()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::frame_name_tform_box(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.Box3WithFrame)
  return target;
}

size_t Box3WithFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.Box3WithFrame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string frame_name = 2;
  if (this->frame_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_frame_name());
  }

  // .bosdyn.api.Box3 box = 1;
  if (this->has_box()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *box_);
  }

  // .bosdyn.api.SE3Pose frame_name_tform_box = 3;
  if (this->has_frame_name_tform_box()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *frame_name_tform_box_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Box3WithFrame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.Box3WithFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const Box3WithFrame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Box3WithFrame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.Box3WithFrame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.Box3WithFrame)
    MergeFrom(*source);
  }
}

void Box3WithFrame::MergeFrom(const Box3WithFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.Box3WithFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.frame_name().size() > 0) {
    _internal_set_frame_name(from._internal_frame_name());
  }
  if (from.has_box()) {
    _internal_mutable_box()->::bosdyn::api::Box3::MergeFrom(from._internal_box());
  }
  if (from.has_frame_name_tform_box()) {
    _internal_mutable_frame_name_tform_box()->::bosdyn::api::SE3Pose::MergeFrom(from._internal_frame_name_tform_box());
  }
}

void Box3WithFrame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.Box3WithFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Box3WithFrame::CopyFrom(const Box3WithFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.Box3WithFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Box3WithFrame::IsInitialized() const {
  return true;
}

void Box3WithFrame::InternalSwap(Box3WithFrame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  frame_name_.Swap(&other->frame_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Box3WithFrame, frame_name_tform_box_)
      + sizeof(Box3WithFrame::frame_name_tform_box_)
      - PROTOBUF_FIELD_OFFSET(Box3WithFrame, box_)>(
          reinterpret_cast<char*>(&box_),
          reinterpret_cast<char*>(&other->box_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Box3WithFrame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SE3Covariance::InitAsDefaultInstance() {
}
class SE3Covariance::_Internal {
 public:
};

SE3Covariance::SE3Covariance(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.SE3Covariance)
}
SE3Covariance::SE3Covariance(const SE3Covariance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&yaw_variance_, &from.yaw_variance_,
    static_cast<size_t>(reinterpret_cast<char*>(&cov_zz_) -
    reinterpret_cast<char*>(&yaw_variance_)) + sizeof(cov_zz_));
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.SE3Covariance)
}

void SE3Covariance::SharedCtor() {
  ::memset(&yaw_variance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cov_zz_) -
      reinterpret_cast<char*>(&yaw_variance_)) + sizeof(cov_zz_));
}

SE3Covariance::~SE3Covariance() {
  // @@protoc_insertion_point(destructor:bosdyn.api.SE3Covariance)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SE3Covariance::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SE3Covariance::ArenaDtor(void* object) {
  SE3Covariance* _this = reinterpret_cast< SE3Covariance* >(object);
  (void)_this;
}
void SE3Covariance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SE3Covariance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SE3Covariance& SE3Covariance::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SE3Covariance_bosdyn_2fapi_2fgeometry_2eproto.base);
  return *internal_default_instance();
}


void SE3Covariance::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.SE3Covariance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&yaw_variance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cov_zz_) -
      reinterpret_cast<char*>(&yaw_variance_)) + sizeof(cov_zz_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SE3Covariance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double yaw_variance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          yaw_variance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double cov_xx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          cov_xx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double cov_xy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          cov_xy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double cov_xz = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          cov_xz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double cov_yx = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          cov_yx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double cov_yy = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          cov_yy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double cov_yz = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          cov_yz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double cov_zx = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          cov_zx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double cov_zy = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          cov_zy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double cov_zz = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          cov_zz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SE3Covariance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.SE3Covariance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double yaw_variance = 2;
  if (!(this->yaw_variance() <= 0 && this->yaw_variance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_yaw_variance(), target);
  }

  // double cov_xx = 3;
  if (!(this->cov_xx() <= 0 && this->cov_xx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_cov_xx(), target);
  }

  // double cov_xy = 4;
  if (!(this->cov_xy() <= 0 && this->cov_xy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_cov_xy(), target);
  }

  // double cov_xz = 5;
  if (!(this->cov_xz() <= 0 && this->cov_xz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_cov_xz(), target);
  }

  // double cov_yx = 6;
  if (!(this->cov_yx() <= 0 && this->cov_yx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_cov_yx(), target);
  }

  // double cov_yy = 7;
  if (!(this->cov_yy() <= 0 && this->cov_yy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_cov_yy(), target);
  }

  // double cov_yz = 8;
  if (!(this->cov_yz() <= 0 && this->cov_yz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_cov_yz(), target);
  }

  // double cov_zx = 9;
  if (!(this->cov_zx() <= 0 && this->cov_zx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_cov_zx(), target);
  }

  // double cov_zy = 10;
  if (!(this->cov_zy() <= 0 && this->cov_zy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_cov_zy(), target);
  }

  // double cov_zz = 11;
  if (!(this->cov_zz() <= 0 && this->cov_zz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_cov_zz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.SE3Covariance)
  return target;
}

size_t SE3Covariance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.SE3Covariance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double yaw_variance = 2;
  if (!(this->yaw_variance() <= 0 && this->yaw_variance() >= 0)) {
    total_size += 1 + 8;
  }

  // double cov_xx = 3;
  if (!(this->cov_xx() <= 0 && this->cov_xx() >= 0)) {
    total_size += 1 + 8;
  }

  // double cov_xy = 4;
  if (!(this->cov_xy() <= 0 && this->cov_xy() >= 0)) {
    total_size += 1 + 8;
  }

  // double cov_xz = 5;
  if (!(this->cov_xz() <= 0 && this->cov_xz() >= 0)) {
    total_size += 1 + 8;
  }

  // double cov_yx = 6;
  if (!(this->cov_yx() <= 0 && this->cov_yx() >= 0)) {
    total_size += 1 + 8;
  }

  // double cov_yy = 7;
  if (!(this->cov_yy() <= 0 && this->cov_yy() >= 0)) {
    total_size += 1 + 8;
  }

  // double cov_yz = 8;
  if (!(this->cov_yz() <= 0 && this->cov_yz() >= 0)) {
    total_size += 1 + 8;
  }

  // double cov_zx = 9;
  if (!(this->cov_zx() <= 0 && this->cov_zx() >= 0)) {
    total_size += 1 + 8;
  }

  // double cov_zy = 10;
  if (!(this->cov_zy() <= 0 && this->cov_zy() >= 0)) {
    total_size += 1 + 8;
  }

  // double cov_zz = 11;
  if (!(this->cov_zz() <= 0 && this->cov_zz() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SE3Covariance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.SE3Covariance)
  GOOGLE_DCHECK_NE(&from, this);
  const SE3Covariance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SE3Covariance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.SE3Covariance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.SE3Covariance)
    MergeFrom(*source);
  }
}

void SE3Covariance::MergeFrom(const SE3Covariance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.SE3Covariance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.yaw_variance() <= 0 && from.yaw_variance() >= 0)) {
    _internal_set_yaw_variance(from._internal_yaw_variance());
  }
  if (!(from.cov_xx() <= 0 && from.cov_xx() >= 0)) {
    _internal_set_cov_xx(from._internal_cov_xx());
  }
  if (!(from.cov_xy() <= 0 && from.cov_xy() >= 0)) {
    _internal_set_cov_xy(from._internal_cov_xy());
  }
  if (!(from.cov_xz() <= 0 && from.cov_xz() >= 0)) {
    _internal_set_cov_xz(from._internal_cov_xz());
  }
  if (!(from.cov_yx() <= 0 && from.cov_yx() >= 0)) {
    _internal_set_cov_yx(from._internal_cov_yx());
  }
  if (!(from.cov_yy() <= 0 && from.cov_yy() >= 0)) {
    _internal_set_cov_yy(from._internal_cov_yy());
  }
  if (!(from.cov_yz() <= 0 && from.cov_yz() >= 0)) {
    _internal_set_cov_yz(from._internal_cov_yz());
  }
  if (!(from.cov_zx() <= 0 && from.cov_zx() >= 0)) {
    _internal_set_cov_zx(from._internal_cov_zx());
  }
  if (!(from.cov_zy() <= 0 && from.cov_zy() >= 0)) {
    _internal_set_cov_zy(from._internal_cov_zy());
  }
  if (!(from.cov_zz() <= 0 && from.cov_zz() >= 0)) {
    _internal_set_cov_zz(from._internal_cov_zz());
  }
}

void SE3Covariance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.SE3Covariance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SE3Covariance::CopyFrom(const SE3Covariance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.SE3Covariance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SE3Covariance::IsInitialized() const {
  return true;
}

void SE3Covariance::InternalSwap(SE3Covariance* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SE3Covariance, cov_zz_)
      + sizeof(SE3Covariance::cov_zz_)
      - PROTOBUF_FIELD_OFFSET(SE3Covariance, yaw_variance_)>(
          reinterpret_cast<char*>(&yaw_variance_),
          reinterpret_cast<char*>(&other->yaw_variance_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SE3Covariance::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EulerZXYRate::InitAsDefaultInstance() {
}
class EulerZXYRate::_Internal {
 public:
};

EulerZXYRate::EulerZXYRate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.EulerZXYRate)
}
EulerZXYRate::EulerZXYRate(const EulerZXYRate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&yaw_, &from.yaw_,
    static_cast<size_t>(reinterpret_cast<char*>(&pitch_) -
    reinterpret_cast<char*>(&yaw_)) + sizeof(pitch_));
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.EulerZXYRate)
}

void EulerZXYRate::SharedCtor() {
  ::memset(&yaw_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pitch_) -
      reinterpret_cast<char*>(&yaw_)) + sizeof(pitch_));
}

EulerZXYRate::~EulerZXYRate() {
  // @@protoc_insertion_point(destructor:bosdyn.api.EulerZXYRate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EulerZXYRate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EulerZXYRate::ArenaDtor(void* object) {
  EulerZXYRate* _this = reinterpret_cast< EulerZXYRate* >(object);
  (void)_this;
}
void EulerZXYRate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EulerZXYRate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EulerZXYRate& EulerZXYRate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EulerZXYRate_bosdyn_2fapi_2fgeometry_2eproto.base);
  return *internal_default_instance();
}


void EulerZXYRate::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.EulerZXYRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&yaw_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pitch_) -
      reinterpret_cast<char*>(&yaw_)) + sizeof(pitch_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EulerZXYRate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double yaw = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double roll = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pitch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EulerZXYRate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.EulerZXYRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double yaw = 1;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_yaw(), target);
  }

  // double roll = 2;
  if (!(this->roll() <= 0 && this->roll() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_roll(), target);
  }

  // double pitch = 3;
  if (!(this->pitch() <= 0 && this->pitch() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_pitch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.EulerZXYRate)
  return target;
}

size_t EulerZXYRate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.EulerZXYRate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double yaw = 1;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    total_size += 1 + 8;
  }

  // double roll = 2;
  if (!(this->roll() <= 0 && this->roll() >= 0)) {
    total_size += 1 + 8;
  }

  // double pitch = 3;
  if (!(this->pitch() <= 0 && this->pitch() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EulerZXYRate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.EulerZXYRate)
  GOOGLE_DCHECK_NE(&from, this);
  const EulerZXYRate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EulerZXYRate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.EulerZXYRate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.EulerZXYRate)
    MergeFrom(*source);
  }
}

void EulerZXYRate::MergeFrom(const EulerZXYRate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.EulerZXYRate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.yaw() <= 0 && from.yaw() >= 0)) {
    _internal_set_yaw(from._internal_yaw());
  }
  if (!(from.roll() <= 0 && from.roll() >= 0)) {
    _internal_set_roll(from._internal_roll());
  }
  if (!(from.pitch() <= 0 && from.pitch() >= 0)) {
    _internal_set_pitch(from._internal_pitch());
  }
}

void EulerZXYRate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.EulerZXYRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EulerZXYRate::CopyFrom(const EulerZXYRate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.EulerZXYRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EulerZXYRate::IsInitialized() const {
  return true;
}

void EulerZXYRate::InternalSwap(EulerZXYRate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EulerZXYRate, pitch_)
      + sizeof(EulerZXYRate::pitch_)
      - PROTOBUF_FIELD_OFFSET(EulerZXYRate, yaw_)>(
          reinterpret_cast<char*>(&yaw_),
          reinterpret_cast<char*>(&other->yaw_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EulerZXYRate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PolyLine::InitAsDefaultInstance() {
}
class PolyLine::_Internal {
 public:
};

PolyLine::PolyLine(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.PolyLine)
}
PolyLine::PolyLine(const PolyLine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      points_(from.points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.PolyLine)
}

void PolyLine::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PolyLine_bosdyn_2fapi_2fgeometry_2eproto.base);
}

PolyLine::~PolyLine() {
  // @@protoc_insertion_point(destructor:bosdyn.api.PolyLine)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PolyLine::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PolyLine::ArenaDtor(void* object) {
  PolyLine* _this = reinterpret_cast< PolyLine* >(object);
  (void)_this;
}
void PolyLine::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PolyLine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PolyLine& PolyLine::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PolyLine_bosdyn_2fapi_2fgeometry_2eproto.base);
  return *internal_default_instance();
}


void PolyLine::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.PolyLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PolyLine::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bosdyn.api.Vec2 points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PolyLine::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.PolyLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bosdyn.api.Vec2 points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_points(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.PolyLine)
  return target;
}

size_t PolyLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.PolyLine)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bosdyn.api.Vec2 points = 1;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PolyLine::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.PolyLine)
  GOOGLE_DCHECK_NE(&from, this);
  const PolyLine* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PolyLine>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.PolyLine)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.PolyLine)
    MergeFrom(*source);
  }
}

void PolyLine::MergeFrom(const PolyLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.PolyLine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
}

void PolyLine::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.PolyLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PolyLine::CopyFrom(const PolyLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.PolyLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolyLine::IsInitialized() const {
  return true;
}

void PolyLine::InternalSwap(PolyLine* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PolyLine::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Polygon::InitAsDefaultInstance() {
}
class Polygon::_Internal {
 public:
};

Polygon::Polygon(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vertexes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.Polygon)
}
Polygon::Polygon(const Polygon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vertexes_(from.vertexes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.Polygon)
}

void Polygon::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Polygon_bosdyn_2fapi_2fgeometry_2eproto.base);
}

Polygon::~Polygon() {
  // @@protoc_insertion_point(destructor:bosdyn.api.Polygon)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Polygon::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Polygon::ArenaDtor(void* object) {
  Polygon* _this = reinterpret_cast< Polygon* >(object);
  (void)_this;
}
void Polygon::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Polygon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Polygon& Polygon::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Polygon_bosdyn_2fapi_2fgeometry_2eproto.base);
  return *internal_default_instance();
}


void Polygon::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.Polygon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vertexes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Polygon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .bosdyn.api.Vec2 vertexes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vertexes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Polygon::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.Polygon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .bosdyn.api.Vec2 vertexes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vertexes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_vertexes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.Polygon)
  return target;
}

size_t Polygon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.Polygon)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .bosdyn.api.Vec2 vertexes = 1;
  total_size += 1UL * this->_internal_vertexes_size();
  for (const auto& msg : this->vertexes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Polygon::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.Polygon)
  GOOGLE_DCHECK_NE(&from, this);
  const Polygon* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Polygon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.Polygon)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.Polygon)
    MergeFrom(*source);
  }
}

void Polygon::MergeFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.Polygon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vertexes_.MergeFrom(from.vertexes_);
}

void Polygon::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Polygon::CopyFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Polygon::IsInitialized() const {
  return true;
}

void Polygon::InternalSwap(Polygon* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vertexes_.InternalSwap(&other->vertexes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Polygon::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Circle::InitAsDefaultInstance() {
  ::bosdyn::api::_Circle_default_instance_._instance.get_mutable()->center_pt_ = const_cast< ::bosdyn::api::Vec2*>(
      ::bosdyn::api::Vec2::internal_default_instance());
}
class Circle::_Internal {
 public:
  static const ::bosdyn::api::Vec2& center_pt(const Circle* msg);
};

const ::bosdyn::api::Vec2&
Circle::_Internal::center_pt(const Circle* msg) {
  return *msg->center_pt_;
}
Circle::Circle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.Circle)
}
Circle::Circle(const Circle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_center_pt()) {
    center_pt_ = new ::bosdyn::api::Vec2(*from.center_pt_);
  } else {
    center_pt_ = nullptr;
  }
  radius_ = from.radius_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.Circle)
}

void Circle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Circle_bosdyn_2fapi_2fgeometry_2eproto.base);
  ::memset(&center_pt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radius_) -
      reinterpret_cast<char*>(&center_pt_)) + sizeof(radius_));
}

Circle::~Circle() {
  // @@protoc_insertion_point(destructor:bosdyn.api.Circle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Circle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete center_pt_;
}

void Circle::ArenaDtor(void* object) {
  Circle* _this = reinterpret_cast< Circle* >(object);
  (void)_this;
}
void Circle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Circle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Circle& Circle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Circle_bosdyn_2fapi_2fgeometry_2eproto.base);
  return *internal_default_instance();
}


void Circle::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.Circle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && center_pt_ != nullptr) {
    delete center_pt_;
  }
  center_pt_ = nullptr;
  radius_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Circle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.Vec2 center_pt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_center_pt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double radius = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Circle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.Circle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.Vec2 center_pt = 1;
  if (this->has_center_pt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::center_pt(this), target, stream);
  }

  // double radius = 2;
  if (!(this->radius() <= 0 && this->radius() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_radius(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.Circle)
  return target;
}

size_t Circle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.Circle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.Vec2 center_pt = 1;
  if (this->has_center_pt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *center_pt_);
  }

  // double radius = 2;
  if (!(this->radius() <= 0 && this->radius() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Circle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.Circle)
  GOOGLE_DCHECK_NE(&from, this);
  const Circle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Circle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.Circle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.Circle)
    MergeFrom(*source);
  }
}

void Circle::MergeFrom(const Circle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.Circle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_center_pt()) {
    _internal_mutable_center_pt()->::bosdyn::api::Vec2::MergeFrom(from._internal_center_pt());
  }
  if (!(from.radius() <= 0 && from.radius() >= 0)) {
    _internal_set_radius(from._internal_radius());
  }
}

void Circle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.Circle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Circle::CopyFrom(const Circle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.Circle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Circle::IsInitialized() const {
  return true;
}

void Circle::InternalSwap(Circle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Circle, radius_)
      + sizeof(Circle::radius_)
      - PROTOBUF_FIELD_OFFSET(Circle, center_pt_)>(
          reinterpret_cast<char*>(&center_pt_),
          reinterpret_cast<char*>(&other->center_pt_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Circle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Area::InitAsDefaultInstance() {
  ::bosdyn::api::_Area_default_instance_.polygon_ = const_cast< ::bosdyn::api::Polygon*>(
      ::bosdyn::api::Polygon::internal_default_instance());
  ::bosdyn::api::_Area_default_instance_.circle_ = const_cast< ::bosdyn::api::Circle*>(
      ::bosdyn::api::Circle::internal_default_instance());
}
class Area::_Internal {
 public:
  static const ::bosdyn::api::Polygon& polygon(const Area* msg);
  static const ::bosdyn::api::Circle& circle(const Area* msg);
};

const ::bosdyn::api::Polygon&
Area::_Internal::polygon(const Area* msg) {
  return *msg->geometry_.polygon_;
}
const ::bosdyn::api::Circle&
Area::_Internal::circle(const Area* msg) {
  return *msg->geometry_.circle_;
}
void Area::set_allocated_polygon(::bosdyn::api::Polygon* polygon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_geometry();
  if (polygon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(polygon);
    if (message_arena != submessage_arena) {
      polygon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, polygon, submessage_arena);
    }
    set_has_polygon();
    geometry_.polygon_ = polygon;
  }
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.Area.polygon)
}
void Area::set_allocated_circle(::bosdyn::api::Circle* circle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_geometry();
  if (circle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(circle);
    if (message_arena != submessage_arena) {
      circle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, circle, submessage_arena);
    }
    set_has_circle();
    geometry_.circle_ = circle;
  }
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.Area.circle)
}
Area::Area(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.Area)
}
Area::Area(const Area& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_geometry();
  switch (from.geometry_case()) {
    case kPolygon: {
      _internal_mutable_polygon()->::bosdyn::api::Polygon::MergeFrom(from._internal_polygon());
      break;
    }
    case kCircle: {
      _internal_mutable_circle()->::bosdyn::api::Circle::MergeFrom(from._internal_circle());
      break;
    }
    case GEOMETRY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.Area)
}

void Area::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Area_bosdyn_2fapi_2fgeometry_2eproto.base);
  clear_has_geometry();
}

Area::~Area() {
  // @@protoc_insertion_point(destructor:bosdyn.api.Area)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Area::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_geometry()) {
    clear_geometry();
  }
}

void Area::ArenaDtor(void* object) {
  Area* _this = reinterpret_cast< Area* >(object);
  (void)_this;
}
void Area::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Area::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Area& Area::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Area_bosdyn_2fapi_2fgeometry_2eproto.base);
  return *internal_default_instance();
}


void Area::clear_geometry() {
// @@protoc_insertion_point(one_of_clear_start:bosdyn.api.Area)
  switch (geometry_case()) {
    case kPolygon: {
      if (GetArena() == nullptr) {
        delete geometry_.polygon_;
      }
      break;
    }
    case kCircle: {
      if (GetArena() == nullptr) {
        delete geometry_.circle_;
      }
      break;
    }
    case GEOMETRY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = GEOMETRY_NOT_SET;
}


void Area::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.Area)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_geometry();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Area::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.Polygon polygon = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_polygon(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.Circle circle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_circle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Area::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.Area)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.Polygon polygon = 1;
  if (_internal_has_polygon()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::polygon(this), target, stream);
  }

  // .bosdyn.api.Circle circle = 2;
  if (_internal_has_circle()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::circle(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.Area)
  return target;
}

size_t Area::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.Area)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (geometry_case()) {
    // .bosdyn.api.Polygon polygon = 1;
    case kPolygon: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *geometry_.polygon_);
      break;
    }
    // .bosdyn.api.Circle circle = 2;
    case kCircle: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *geometry_.circle_);
      break;
    }
    case GEOMETRY_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Area::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.Area)
  GOOGLE_DCHECK_NE(&from, this);
  const Area* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Area>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.Area)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.Area)
    MergeFrom(*source);
  }
}

void Area::MergeFrom(const Area& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.Area)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.geometry_case()) {
    case kPolygon: {
      _internal_mutable_polygon()->::bosdyn::api::Polygon::MergeFrom(from._internal_polygon());
      break;
    }
    case kCircle: {
      _internal_mutable_circle()->::bosdyn::api::Circle::MergeFrom(from._internal_circle());
      break;
    }
    case GEOMETRY_NOT_SET: {
      break;
    }
  }
}

void Area::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.Area)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Area::CopyFrom(const Area& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.Area)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Area::IsInitialized() const {
  return true;
}

void Area::InternalSwap(Area* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(geometry_, other->geometry_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Area::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Volume::InitAsDefaultInstance() {
  ::bosdyn::api::_Volume_default_instance_.box_ = const_cast< ::bosdyn::api::Vec3*>(
      ::bosdyn::api::Vec3::internal_default_instance());
}
class Volume::_Internal {
 public:
  static const ::bosdyn::api::Vec3& box(const Volume* msg);
};

const ::bosdyn::api::Vec3&
Volume::_Internal::box(const Volume* msg) {
  return *msg->geometry_.box_;
}
void Volume::set_allocated_box(::bosdyn::api::Vec3* box) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_geometry();
  if (box) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(box);
    if (message_arena != submessage_arena) {
      box = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, box, submessage_arena);
    }
    set_has_box();
    geometry_.box_ = box;
  }
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.Volume.box)
}
Volume::Volume(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.Volume)
}
Volume::Volume(const Volume& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_geometry();
  switch (from.geometry_case()) {
    case kBox: {
      _internal_mutable_box()->::bosdyn::api::Vec3::MergeFrom(from._internal_box());
      break;
    }
    case GEOMETRY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.Volume)
}

void Volume::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Volume_bosdyn_2fapi_2fgeometry_2eproto.base);
  clear_has_geometry();
}

Volume::~Volume() {
  // @@protoc_insertion_point(destructor:bosdyn.api.Volume)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Volume::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_geometry()) {
    clear_geometry();
  }
}

void Volume::ArenaDtor(void* object) {
  Volume* _this = reinterpret_cast< Volume* >(object);
  (void)_this;
}
void Volume::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Volume::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Volume& Volume::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Volume_bosdyn_2fapi_2fgeometry_2eproto.base);
  return *internal_default_instance();
}


void Volume::clear_geometry() {
// @@protoc_insertion_point(one_of_clear_start:bosdyn.api.Volume)
  switch (geometry_case()) {
    case kBox: {
      if (GetArena() == nullptr) {
        delete geometry_.box_;
      }
      break;
    }
    case GEOMETRY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = GEOMETRY_NOT_SET;
}


void Volume::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.Volume)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_geometry();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Volume::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.Vec3 box = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_box(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Volume::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.Volume)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.Vec3 box = 1;
  if (_internal_has_box()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::box(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.Volume)
  return target;
}

size_t Volume::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.Volume)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (geometry_case()) {
    // .bosdyn.api.Vec3 box = 1;
    case kBox: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *geometry_.box_);
      break;
    }
    case GEOMETRY_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Volume::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.Volume)
  GOOGLE_DCHECK_NE(&from, this);
  const Volume* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Volume>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.Volume)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.Volume)
    MergeFrom(*source);
  }
}

void Volume::MergeFrom(const Volume& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.Volume)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.geometry_case()) {
    case kBox: {
      _internal_mutable_box()->::bosdyn::api::Vec3::MergeFrom(from._internal_box());
      break;
    }
    case GEOMETRY_NOT_SET: {
      break;
    }
  }
}

void Volume::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.Volume)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Volume::CopyFrom(const Volume& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.Volume)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Volume::IsInitialized() const {
  return true;
}

void Volume::InternalSwap(Volume* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(geometry_, other->geometry_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Volume::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Vec2Value::InitAsDefaultInstance() {
  ::bosdyn::api::_Vec2Value_default_instance_._instance.get_mutable()->x_ = const_cast< PROTOBUF_NAMESPACE_ID::DoubleValue*>(
      PROTOBUF_NAMESPACE_ID::DoubleValue::internal_default_instance());
  ::bosdyn::api::_Vec2Value_default_instance_._instance.get_mutable()->y_ = const_cast< PROTOBUF_NAMESPACE_ID::DoubleValue*>(
      PROTOBUF_NAMESPACE_ID::DoubleValue::internal_default_instance());
}
class Vec2Value::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::DoubleValue& x(const Vec2Value* msg);
  static const PROTOBUF_NAMESPACE_ID::DoubleValue& y(const Vec2Value* msg);
};

const PROTOBUF_NAMESPACE_ID::DoubleValue&
Vec2Value::_Internal::x(const Vec2Value* msg) {
  return *msg->x_;
}
const PROTOBUF_NAMESPACE_ID::DoubleValue&
Vec2Value::_Internal::y(const Vec2Value* msg) {
  return *msg->y_;
}
void Vec2Value::clear_x() {
  if (GetArena() == nullptr && x_ != nullptr) {
    delete x_;
  }
  x_ = nullptr;
}
void Vec2Value::clear_y() {
  if (GetArena() == nullptr && y_ != nullptr) {
    delete y_;
  }
  y_ = nullptr;
}
Vec2Value::Vec2Value(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.Vec2Value)
}
Vec2Value::Vec2Value(const Vec2Value& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_x()) {
    x_ = new PROTOBUF_NAMESPACE_ID::DoubleValue(*from.x_);
  } else {
    x_ = nullptr;
  }
  if (from._internal_has_y()) {
    y_ = new PROTOBUF_NAMESPACE_ID::DoubleValue(*from.y_);
  } else {
    y_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.Vec2Value)
}

void Vec2Value::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Vec2Value_bosdyn_2fapi_2fgeometry_2eproto.base);
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Vec2Value::~Vec2Value() {
  // @@protoc_insertion_point(destructor:bosdyn.api.Vec2Value)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vec2Value::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete x_;
  if (this != internal_default_instance()) delete y_;
}

void Vec2Value::ArenaDtor(void* object) {
  Vec2Value* _this = reinterpret_cast< Vec2Value* >(object);
  (void)_this;
}
void Vec2Value::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vec2Value::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vec2Value& Vec2Value::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vec2Value_bosdyn_2fapi_2fgeometry_2eproto.base);
  return *internal_default_instance();
}


void Vec2Value::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.Vec2Value)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && x_ != nullptr) {
    delete x_;
  }
  x_ = nullptr;
  if (GetArena() == nullptr && y_ != nullptr) {
    delete y_;
  }
  y_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vec2Value::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.DoubleValue x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_x(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_y(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vec2Value::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.Vec2Value)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.DoubleValue x = 1;
  if (this->has_x()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::x(this), target, stream);
  }

  // .google.protobuf.DoubleValue y = 2;
  if (this->has_y()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::y(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.Vec2Value)
  return target;
}

size_t Vec2Value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.Vec2Value)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.DoubleValue x = 1;
  if (this->has_x()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *x_);
  }

  // .google.protobuf.DoubleValue y = 2;
  if (this->has_y()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *y_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vec2Value::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.Vec2Value)
  GOOGLE_DCHECK_NE(&from, this);
  const Vec2Value* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vec2Value>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.Vec2Value)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.Vec2Value)
    MergeFrom(*source);
  }
}

void Vec2Value::MergeFrom(const Vec2Value& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.Vec2Value)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_x()) {
    _internal_mutable_x()->PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from._internal_x());
  }
  if (from.has_y()) {
    _internal_mutable_y()->PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from._internal_y());
  }
}

void Vec2Value::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.Vec2Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vec2Value::CopyFrom(const Vec2Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.Vec2Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec2Value::IsInitialized() const {
  return true;
}

void Vec2Value::InternalSwap(Vec2Value* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vec2Value, y_)
      + sizeof(Vec2Value::y_)
      - PROTOBUF_FIELD_OFFSET(Vec2Value, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vec2Value::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Vec3Value::InitAsDefaultInstance() {
  ::bosdyn::api::_Vec3Value_default_instance_._instance.get_mutable()->x_ = const_cast< PROTOBUF_NAMESPACE_ID::DoubleValue*>(
      PROTOBUF_NAMESPACE_ID::DoubleValue::internal_default_instance());
  ::bosdyn::api::_Vec3Value_default_instance_._instance.get_mutable()->y_ = const_cast< PROTOBUF_NAMESPACE_ID::DoubleValue*>(
      PROTOBUF_NAMESPACE_ID::DoubleValue::internal_default_instance());
  ::bosdyn::api::_Vec3Value_default_instance_._instance.get_mutable()->z_ = const_cast< PROTOBUF_NAMESPACE_ID::DoubleValue*>(
      PROTOBUF_NAMESPACE_ID::DoubleValue::internal_default_instance());
}
class Vec3Value::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::DoubleValue& x(const Vec3Value* msg);
  static const PROTOBUF_NAMESPACE_ID::DoubleValue& y(const Vec3Value* msg);
  static const PROTOBUF_NAMESPACE_ID::DoubleValue& z(const Vec3Value* msg);
};

const PROTOBUF_NAMESPACE_ID::DoubleValue&
Vec3Value::_Internal::x(const Vec3Value* msg) {
  return *msg->x_;
}
const PROTOBUF_NAMESPACE_ID::DoubleValue&
Vec3Value::_Internal::y(const Vec3Value* msg) {
  return *msg->y_;
}
const PROTOBUF_NAMESPACE_ID::DoubleValue&
Vec3Value::_Internal::z(const Vec3Value* msg) {
  return *msg->z_;
}
void Vec3Value::clear_x() {
  if (GetArena() == nullptr && x_ != nullptr) {
    delete x_;
  }
  x_ = nullptr;
}
void Vec3Value::clear_y() {
  if (GetArena() == nullptr && y_ != nullptr) {
    delete y_;
  }
  y_ = nullptr;
}
void Vec3Value::clear_z() {
  if (GetArena() == nullptr && z_ != nullptr) {
    delete z_;
  }
  z_ = nullptr;
}
Vec3Value::Vec3Value(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.Vec3Value)
}
Vec3Value::Vec3Value(const Vec3Value& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_x()) {
    x_ = new PROTOBUF_NAMESPACE_ID::DoubleValue(*from.x_);
  } else {
    x_ = nullptr;
  }
  if (from._internal_has_y()) {
    y_ = new PROTOBUF_NAMESPACE_ID::DoubleValue(*from.y_);
  } else {
    y_ = nullptr;
  }
  if (from._internal_has_z()) {
    z_ = new PROTOBUF_NAMESPACE_ID::DoubleValue(*from.z_);
  } else {
    z_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.Vec3Value)
}

void Vec3Value::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Vec3Value_bosdyn_2fapi_2fgeometry_2eproto.base);
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Vec3Value::~Vec3Value() {
  // @@protoc_insertion_point(destructor:bosdyn.api.Vec3Value)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vec3Value::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete x_;
  if (this != internal_default_instance()) delete y_;
  if (this != internal_default_instance()) delete z_;
}

void Vec3Value::ArenaDtor(void* object) {
  Vec3Value* _this = reinterpret_cast< Vec3Value* >(object);
  (void)_this;
}
void Vec3Value::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vec3Value::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vec3Value& Vec3Value::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vec3Value_bosdyn_2fapi_2fgeometry_2eproto.base);
  return *internal_default_instance();
}


void Vec3Value::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.Vec3Value)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && x_ != nullptr) {
    delete x_;
  }
  x_ = nullptr;
  if (GetArena() == nullptr && y_ != nullptr) {
    delete y_;
  }
  y_ = nullptr;
  if (GetArena() == nullptr && z_ != nullptr) {
    delete z_;
  }
  z_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vec3Value::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.DoubleValue x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_x(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_y(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_z(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vec3Value::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.Vec3Value)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.DoubleValue x = 1;
  if (this->has_x()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::x(this), target, stream);
  }

  // .google.protobuf.DoubleValue y = 2;
  if (this->has_y()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::y(this), target, stream);
  }

  // .google.protobuf.DoubleValue z = 3;
  if (this->has_z()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::z(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.Vec3Value)
  return target;
}

size_t Vec3Value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.Vec3Value)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.DoubleValue x = 1;
  if (this->has_x()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *x_);
  }

  // .google.protobuf.DoubleValue y = 2;
  if (this->has_y()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *y_);
  }

  // .google.protobuf.DoubleValue z = 3;
  if (this->has_z()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *z_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vec3Value::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.Vec3Value)
  GOOGLE_DCHECK_NE(&from, this);
  const Vec3Value* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vec3Value>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.Vec3Value)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.Vec3Value)
    MergeFrom(*source);
  }
}

void Vec3Value::MergeFrom(const Vec3Value& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.Vec3Value)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_x()) {
    _internal_mutable_x()->PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from._internal_x());
  }
  if (from.has_y()) {
    _internal_mutable_y()->PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from._internal_y());
  }
  if (from.has_z()) {
    _internal_mutable_z()->PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from._internal_z());
  }
}

void Vec3Value::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.Vec3Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vec3Value::CopyFrom(const Vec3Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.Vec3Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec3Value::IsInitialized() const {
  return true;
}

void Vec3Value::InternalSwap(Vec3Value* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vec3Value, z_)
      + sizeof(Vec3Value::z_)
      - PROTOBUF_FIELD_OFFSET(Vec3Value, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vec3Value::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bosdyn::api::Vec2* Arena::CreateMaybeMessage< ::bosdyn::api::Vec2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::Vec2 >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::Vec3* Arena::CreateMaybeMessage< ::bosdyn::api::Vec3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::Vec3 >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::CylindricalCoordinate* Arena::CreateMaybeMessage< ::bosdyn::api::CylindricalCoordinate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::CylindricalCoordinate >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::Quaternion* Arena::CreateMaybeMessage< ::bosdyn::api::Quaternion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::Quaternion >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::Plane* Arena::CreateMaybeMessage< ::bosdyn::api::Plane >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::Plane >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::SE2Pose* Arena::CreateMaybeMessage< ::bosdyn::api::SE2Pose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::SE2Pose >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::SE2Velocity* Arena::CreateMaybeMessage< ::bosdyn::api::SE2Velocity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::SE2Velocity >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::SE2VelocityLimit* Arena::CreateMaybeMessage< ::bosdyn::api::SE2VelocityLimit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::SE2VelocityLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::SE3Pose* Arena::CreateMaybeMessage< ::bosdyn::api::SE3Pose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::SE3Pose >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::SE3Velocity* Arena::CreateMaybeMessage< ::bosdyn::api::SE3Velocity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::SE3Velocity >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::Wrench* Arena::CreateMaybeMessage< ::bosdyn::api::Wrench >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::Wrench >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::FrameTreeSnapshot_ParentEdge* Arena::CreateMaybeMessage< ::bosdyn::api::FrameTreeSnapshot_ParentEdge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::FrameTreeSnapshot_ParentEdge >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::bosdyn::api::FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::FrameTreeSnapshot_ChildToParentEdgeMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::FrameTreeSnapshot* Arena::CreateMaybeMessage< ::bosdyn::api::FrameTreeSnapshot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::FrameTreeSnapshot >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::Box2* Arena::CreateMaybeMessage< ::bosdyn::api::Box2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::Box2 >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::Box2WithFrame* Arena::CreateMaybeMessage< ::bosdyn::api::Box2WithFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::Box2WithFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::Box3* Arena::CreateMaybeMessage< ::bosdyn::api::Box3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::Box3 >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::Box3WithFrame* Arena::CreateMaybeMessage< ::bosdyn::api::Box3WithFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::Box3WithFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::SE3Covariance* Arena::CreateMaybeMessage< ::bosdyn::api::SE3Covariance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::SE3Covariance >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::EulerZXYRate* Arena::CreateMaybeMessage< ::bosdyn::api::EulerZXYRate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::EulerZXYRate >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::PolyLine* Arena::CreateMaybeMessage< ::bosdyn::api::PolyLine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::PolyLine >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::Polygon* Arena::CreateMaybeMessage< ::bosdyn::api::Polygon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::Polygon >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::Circle* Arena::CreateMaybeMessage< ::bosdyn::api::Circle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::Circle >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::Area* Arena::CreateMaybeMessage< ::bosdyn::api::Area >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::Area >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::Volume* Arena::CreateMaybeMessage< ::bosdyn::api::Volume >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::Volume >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::Vec2Value* Arena::CreateMaybeMessage< ::bosdyn::api::Vec2Value >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::Vec2Value >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::Vec3Value* Arena::CreateMaybeMessage< ::bosdyn::api::Vec3Value >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::Vec3Value >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
