// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bosdyn/api/estop_service.proto

#include "bosdyn/api/estop_service.pb.h"
#include "bosdyn/api/estop_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace bosdyn {
namespace api {

static const char* EstopService_method_names[] = {
  "/bosdyn.api.EstopService/RegisterEstopEndpoint",
  "/bosdyn.api.EstopService/DeregisterEstopEndpoint",
  "/bosdyn.api.EstopService/EstopCheckIn",
  "/bosdyn.api.EstopService/GetEstopConfig",
  "/bosdyn.api.EstopService/SetEstopConfig",
  "/bosdyn.api.EstopService/GetEstopSystemStatus",
};

std::unique_ptr< EstopService::Stub> EstopService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< EstopService::Stub> stub(new EstopService::Stub(channel));
  return stub;
}

EstopService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_RegisterEstopEndpoint_(EstopService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeregisterEstopEndpoint_(EstopService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EstopCheckIn_(EstopService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetEstopConfig_(EstopService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetEstopConfig_(EstopService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetEstopSystemStatus_(EstopService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status EstopService::Stub::RegisterEstopEndpoint(::grpc::ClientContext* context, const ::bosdyn::api::RegisterEstopEndpointRequest& request, ::bosdyn::api::RegisterEstopEndpointResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RegisterEstopEndpoint_, context, request, response);
}

void EstopService::Stub::experimental_async::RegisterEstopEndpoint(::grpc::ClientContext* context, const ::bosdyn::api::RegisterEstopEndpointRequest* request, ::bosdyn::api::RegisterEstopEndpointResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RegisterEstopEndpoint_, context, request, response, std::move(f));
}

void EstopService::Stub::experimental_async::RegisterEstopEndpoint(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::RegisterEstopEndpointResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RegisterEstopEndpoint_, context, request, response, std::move(f));
}

void EstopService::Stub::experimental_async::RegisterEstopEndpoint(::grpc::ClientContext* context, const ::bosdyn::api::RegisterEstopEndpointRequest* request, ::bosdyn::api::RegisterEstopEndpointResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RegisterEstopEndpoint_, context, request, response, reactor);
}

void EstopService::Stub::experimental_async::RegisterEstopEndpoint(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::RegisterEstopEndpointResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RegisterEstopEndpoint_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::RegisterEstopEndpointResponse>* EstopService::Stub::AsyncRegisterEstopEndpointRaw(::grpc::ClientContext* context, const ::bosdyn::api::RegisterEstopEndpointRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::RegisterEstopEndpointResponse>::Create(channel_.get(), cq, rpcmethod_RegisterEstopEndpoint_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::RegisterEstopEndpointResponse>* EstopService::Stub::PrepareAsyncRegisterEstopEndpointRaw(::grpc::ClientContext* context, const ::bosdyn::api::RegisterEstopEndpointRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::RegisterEstopEndpointResponse>::Create(channel_.get(), cq, rpcmethod_RegisterEstopEndpoint_, context, request, false);
}

::grpc::Status EstopService::Stub::DeregisterEstopEndpoint(::grpc::ClientContext* context, const ::bosdyn::api::DeregisterEstopEndpointRequest& request, ::bosdyn::api::DeregisterEstopEndpointResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeregisterEstopEndpoint_, context, request, response);
}

void EstopService::Stub::experimental_async::DeregisterEstopEndpoint(::grpc::ClientContext* context, const ::bosdyn::api::DeregisterEstopEndpointRequest* request, ::bosdyn::api::DeregisterEstopEndpointResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeregisterEstopEndpoint_, context, request, response, std::move(f));
}

void EstopService::Stub::experimental_async::DeregisterEstopEndpoint(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::DeregisterEstopEndpointResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeregisterEstopEndpoint_, context, request, response, std::move(f));
}

void EstopService::Stub::experimental_async::DeregisterEstopEndpoint(::grpc::ClientContext* context, const ::bosdyn::api::DeregisterEstopEndpointRequest* request, ::bosdyn::api::DeregisterEstopEndpointResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeregisterEstopEndpoint_, context, request, response, reactor);
}

void EstopService::Stub::experimental_async::DeregisterEstopEndpoint(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::DeregisterEstopEndpointResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeregisterEstopEndpoint_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::DeregisterEstopEndpointResponse>* EstopService::Stub::AsyncDeregisterEstopEndpointRaw(::grpc::ClientContext* context, const ::bosdyn::api::DeregisterEstopEndpointRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::DeregisterEstopEndpointResponse>::Create(channel_.get(), cq, rpcmethod_DeregisterEstopEndpoint_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::DeregisterEstopEndpointResponse>* EstopService::Stub::PrepareAsyncDeregisterEstopEndpointRaw(::grpc::ClientContext* context, const ::bosdyn::api::DeregisterEstopEndpointRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::DeregisterEstopEndpointResponse>::Create(channel_.get(), cq, rpcmethod_DeregisterEstopEndpoint_, context, request, false);
}

::grpc::Status EstopService::Stub::EstopCheckIn(::grpc::ClientContext* context, const ::bosdyn::api::EstopCheckInRequest& request, ::bosdyn::api::EstopCheckInResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_EstopCheckIn_, context, request, response);
}

void EstopService::Stub::experimental_async::EstopCheckIn(::grpc::ClientContext* context, const ::bosdyn::api::EstopCheckInRequest* request, ::bosdyn::api::EstopCheckInResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_EstopCheckIn_, context, request, response, std::move(f));
}

void EstopService::Stub::experimental_async::EstopCheckIn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::EstopCheckInResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_EstopCheckIn_, context, request, response, std::move(f));
}

void EstopService::Stub::experimental_async::EstopCheckIn(::grpc::ClientContext* context, const ::bosdyn::api::EstopCheckInRequest* request, ::bosdyn::api::EstopCheckInResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_EstopCheckIn_, context, request, response, reactor);
}

void EstopService::Stub::experimental_async::EstopCheckIn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::EstopCheckInResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_EstopCheckIn_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::EstopCheckInResponse>* EstopService::Stub::AsyncEstopCheckInRaw(::grpc::ClientContext* context, const ::bosdyn::api::EstopCheckInRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::EstopCheckInResponse>::Create(channel_.get(), cq, rpcmethod_EstopCheckIn_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::EstopCheckInResponse>* EstopService::Stub::PrepareAsyncEstopCheckInRaw(::grpc::ClientContext* context, const ::bosdyn::api::EstopCheckInRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::EstopCheckInResponse>::Create(channel_.get(), cq, rpcmethod_EstopCheckIn_, context, request, false);
}

::grpc::Status EstopService::Stub::GetEstopConfig(::grpc::ClientContext* context, const ::bosdyn::api::GetEstopConfigRequest& request, ::bosdyn::api::GetEstopConfigResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetEstopConfig_, context, request, response);
}

void EstopService::Stub::experimental_async::GetEstopConfig(::grpc::ClientContext* context, const ::bosdyn::api::GetEstopConfigRequest* request, ::bosdyn::api::GetEstopConfigResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetEstopConfig_, context, request, response, std::move(f));
}

void EstopService::Stub::experimental_async::GetEstopConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::GetEstopConfigResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetEstopConfig_, context, request, response, std::move(f));
}

void EstopService::Stub::experimental_async::GetEstopConfig(::grpc::ClientContext* context, const ::bosdyn::api::GetEstopConfigRequest* request, ::bosdyn::api::GetEstopConfigResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetEstopConfig_, context, request, response, reactor);
}

void EstopService::Stub::experimental_async::GetEstopConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::GetEstopConfigResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetEstopConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::GetEstopConfigResponse>* EstopService::Stub::AsyncGetEstopConfigRaw(::grpc::ClientContext* context, const ::bosdyn::api::GetEstopConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::GetEstopConfigResponse>::Create(channel_.get(), cq, rpcmethod_GetEstopConfig_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::GetEstopConfigResponse>* EstopService::Stub::PrepareAsyncGetEstopConfigRaw(::grpc::ClientContext* context, const ::bosdyn::api::GetEstopConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::GetEstopConfigResponse>::Create(channel_.get(), cq, rpcmethod_GetEstopConfig_, context, request, false);
}

::grpc::Status EstopService::Stub::SetEstopConfig(::grpc::ClientContext* context, const ::bosdyn::api::SetEstopConfigRequest& request, ::bosdyn::api::SetEstopConfigResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetEstopConfig_, context, request, response);
}

void EstopService::Stub::experimental_async::SetEstopConfig(::grpc::ClientContext* context, const ::bosdyn::api::SetEstopConfigRequest* request, ::bosdyn::api::SetEstopConfigResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetEstopConfig_, context, request, response, std::move(f));
}

void EstopService::Stub::experimental_async::SetEstopConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::SetEstopConfigResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetEstopConfig_, context, request, response, std::move(f));
}

void EstopService::Stub::experimental_async::SetEstopConfig(::grpc::ClientContext* context, const ::bosdyn::api::SetEstopConfigRequest* request, ::bosdyn::api::SetEstopConfigResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetEstopConfig_, context, request, response, reactor);
}

void EstopService::Stub::experimental_async::SetEstopConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::SetEstopConfigResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetEstopConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::SetEstopConfigResponse>* EstopService::Stub::AsyncSetEstopConfigRaw(::grpc::ClientContext* context, const ::bosdyn::api::SetEstopConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::SetEstopConfigResponse>::Create(channel_.get(), cq, rpcmethod_SetEstopConfig_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::SetEstopConfigResponse>* EstopService::Stub::PrepareAsyncSetEstopConfigRaw(::grpc::ClientContext* context, const ::bosdyn::api::SetEstopConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::SetEstopConfigResponse>::Create(channel_.get(), cq, rpcmethod_SetEstopConfig_, context, request, false);
}

::grpc::Status EstopService::Stub::GetEstopSystemStatus(::grpc::ClientContext* context, const ::bosdyn::api::GetEstopSystemStatusRequest& request, ::bosdyn::api::GetEstopSystemStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetEstopSystemStatus_, context, request, response);
}

void EstopService::Stub::experimental_async::GetEstopSystemStatus(::grpc::ClientContext* context, const ::bosdyn::api::GetEstopSystemStatusRequest* request, ::bosdyn::api::GetEstopSystemStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetEstopSystemStatus_, context, request, response, std::move(f));
}

void EstopService::Stub::experimental_async::GetEstopSystemStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::GetEstopSystemStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetEstopSystemStatus_, context, request, response, std::move(f));
}

void EstopService::Stub::experimental_async::GetEstopSystemStatus(::grpc::ClientContext* context, const ::bosdyn::api::GetEstopSystemStatusRequest* request, ::bosdyn::api::GetEstopSystemStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetEstopSystemStatus_, context, request, response, reactor);
}

void EstopService::Stub::experimental_async::GetEstopSystemStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::GetEstopSystemStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetEstopSystemStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::GetEstopSystemStatusResponse>* EstopService::Stub::AsyncGetEstopSystemStatusRaw(::grpc::ClientContext* context, const ::bosdyn::api::GetEstopSystemStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::GetEstopSystemStatusResponse>::Create(channel_.get(), cq, rpcmethod_GetEstopSystemStatus_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::GetEstopSystemStatusResponse>* EstopService::Stub::PrepareAsyncGetEstopSystemStatusRaw(::grpc::ClientContext* context, const ::bosdyn::api::GetEstopSystemStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::GetEstopSystemStatusResponse>::Create(channel_.get(), cq, rpcmethod_GetEstopSystemStatus_, context, request, false);
}

EstopService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EstopService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EstopService::Service, ::bosdyn::api::RegisterEstopEndpointRequest, ::bosdyn::api::RegisterEstopEndpointResponse>(
          [](EstopService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::RegisterEstopEndpointRequest* req,
             ::bosdyn::api::RegisterEstopEndpointResponse* resp) {
               return service->RegisterEstopEndpoint(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EstopService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EstopService::Service, ::bosdyn::api::DeregisterEstopEndpointRequest, ::bosdyn::api::DeregisterEstopEndpointResponse>(
          [](EstopService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::DeregisterEstopEndpointRequest* req,
             ::bosdyn::api::DeregisterEstopEndpointResponse* resp) {
               return service->DeregisterEstopEndpoint(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EstopService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EstopService::Service, ::bosdyn::api::EstopCheckInRequest, ::bosdyn::api::EstopCheckInResponse>(
          [](EstopService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::EstopCheckInRequest* req,
             ::bosdyn::api::EstopCheckInResponse* resp) {
               return service->EstopCheckIn(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EstopService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EstopService::Service, ::bosdyn::api::GetEstopConfigRequest, ::bosdyn::api::GetEstopConfigResponse>(
          [](EstopService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::GetEstopConfigRequest* req,
             ::bosdyn::api::GetEstopConfigResponse* resp) {
               return service->GetEstopConfig(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EstopService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EstopService::Service, ::bosdyn::api::SetEstopConfigRequest, ::bosdyn::api::SetEstopConfigResponse>(
          [](EstopService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::SetEstopConfigRequest* req,
             ::bosdyn::api::SetEstopConfigResponse* resp) {
               return service->SetEstopConfig(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EstopService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EstopService::Service, ::bosdyn::api::GetEstopSystemStatusRequest, ::bosdyn::api::GetEstopSystemStatusResponse>(
          [](EstopService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::GetEstopSystemStatusRequest* req,
             ::bosdyn::api::GetEstopSystemStatusResponse* resp) {
               return service->GetEstopSystemStatus(ctx, req, resp);
             }, this)));
}

EstopService::Service::~Service() {
}

::grpc::Status EstopService::Service::RegisterEstopEndpoint(::grpc::ServerContext* context, const ::bosdyn::api::RegisterEstopEndpointRequest* request, ::bosdyn::api::RegisterEstopEndpointResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EstopService::Service::DeregisterEstopEndpoint(::grpc::ServerContext* context, const ::bosdyn::api::DeregisterEstopEndpointRequest* request, ::bosdyn::api::DeregisterEstopEndpointResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EstopService::Service::EstopCheckIn(::grpc::ServerContext* context, const ::bosdyn::api::EstopCheckInRequest* request, ::bosdyn::api::EstopCheckInResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EstopService::Service::GetEstopConfig(::grpc::ServerContext* context, const ::bosdyn::api::GetEstopConfigRequest* request, ::bosdyn::api::GetEstopConfigResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EstopService::Service::SetEstopConfig(::grpc::ServerContext* context, const ::bosdyn::api::SetEstopConfigRequest* request, ::bosdyn::api::SetEstopConfigResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EstopService::Service::GetEstopSystemStatus(::grpc::ServerContext* context, const ::bosdyn::api::GetEstopSystemStatusRequest* request, ::bosdyn::api::GetEstopSystemStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace bosdyn
}  // namespace api

