// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/world_object.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fworld_5fobject_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fworld_5fobject_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "bosdyn/api/geometry.pb.h"
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/any.pb.h>
#include "bosdyn/api/header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fworld_5fobject_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bosdyn_2fapi_2fworld_5fobject_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[18]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fworld_5fobject_2eproto;
namespace bosdyn {
namespace api {
class AprilTagProperties;
class AprilTagPropertiesDefaultTypeInternal;
extern AprilTagPropertiesDefaultTypeInternal _AprilTagProperties_default_instance_;
class DrawableArrow;
class DrawableArrowDefaultTypeInternal;
extern DrawableArrowDefaultTypeInternal _DrawableArrow_default_instance_;
class DrawableBox;
class DrawableBoxDefaultTypeInternal;
extern DrawableBoxDefaultTypeInternal _DrawableBox_default_instance_;
class DrawableCapsule;
class DrawableCapsuleDefaultTypeInternal;
extern DrawableCapsuleDefaultTypeInternal _DrawableCapsule_default_instance_;
class DrawableCylinder;
class DrawableCylinderDefaultTypeInternal;
extern DrawableCylinderDefaultTypeInternal _DrawableCylinder_default_instance_;
class DrawableFrame;
class DrawableFrameDefaultTypeInternal;
extern DrawableFrameDefaultTypeInternal _DrawableFrame_default_instance_;
class DrawableLineStrip;
class DrawableLineStripDefaultTypeInternal;
extern DrawableLineStripDefaultTypeInternal _DrawableLineStrip_default_instance_;
class DrawablePoints;
class DrawablePointsDefaultTypeInternal;
extern DrawablePointsDefaultTypeInternal _DrawablePoints_default_instance_;
class DrawableProperties;
class DrawablePropertiesDefaultTypeInternal;
extern DrawablePropertiesDefaultTypeInternal _DrawableProperties_default_instance_;
class DrawableProperties_Color;
class DrawableProperties_ColorDefaultTypeInternal;
extern DrawableProperties_ColorDefaultTypeInternal _DrawableProperties_Color_default_instance_;
class DrawableSphere;
class DrawableSphereDefaultTypeInternal;
extern DrawableSphereDefaultTypeInternal _DrawableSphere_default_instance_;
class ImageProperties;
class ImagePropertiesDefaultTypeInternal;
extern ImagePropertiesDefaultTypeInternal _ImageProperties_default_instance_;
class ListWorldObjectRequest;
class ListWorldObjectRequestDefaultTypeInternal;
extern ListWorldObjectRequestDefaultTypeInternal _ListWorldObjectRequest_default_instance_;
class ListWorldObjectResponse;
class ListWorldObjectResponseDefaultTypeInternal;
extern ListWorldObjectResponseDefaultTypeInternal _ListWorldObjectResponse_default_instance_;
class MutateWorldObjectRequest;
class MutateWorldObjectRequestDefaultTypeInternal;
extern MutateWorldObjectRequestDefaultTypeInternal _MutateWorldObjectRequest_default_instance_;
class MutateWorldObjectRequest_Mutation;
class MutateWorldObjectRequest_MutationDefaultTypeInternal;
extern MutateWorldObjectRequest_MutationDefaultTypeInternal _MutateWorldObjectRequest_Mutation_default_instance_;
class MutateWorldObjectResponse;
class MutateWorldObjectResponseDefaultTypeInternal;
extern MutateWorldObjectResponseDefaultTypeInternal _MutateWorldObjectResponse_default_instance_;
class WorldObject;
class WorldObjectDefaultTypeInternal;
extern WorldObjectDefaultTypeInternal _WorldObject_default_instance_;
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> ::bosdyn::api::AprilTagProperties* Arena::CreateMaybeMessage<::bosdyn::api::AprilTagProperties>(Arena*);
template<> ::bosdyn::api::DrawableArrow* Arena::CreateMaybeMessage<::bosdyn::api::DrawableArrow>(Arena*);
template<> ::bosdyn::api::DrawableBox* Arena::CreateMaybeMessage<::bosdyn::api::DrawableBox>(Arena*);
template<> ::bosdyn::api::DrawableCapsule* Arena::CreateMaybeMessage<::bosdyn::api::DrawableCapsule>(Arena*);
template<> ::bosdyn::api::DrawableCylinder* Arena::CreateMaybeMessage<::bosdyn::api::DrawableCylinder>(Arena*);
template<> ::bosdyn::api::DrawableFrame* Arena::CreateMaybeMessage<::bosdyn::api::DrawableFrame>(Arena*);
template<> ::bosdyn::api::DrawableLineStrip* Arena::CreateMaybeMessage<::bosdyn::api::DrawableLineStrip>(Arena*);
template<> ::bosdyn::api::DrawablePoints* Arena::CreateMaybeMessage<::bosdyn::api::DrawablePoints>(Arena*);
template<> ::bosdyn::api::DrawableProperties* Arena::CreateMaybeMessage<::bosdyn::api::DrawableProperties>(Arena*);
template<> ::bosdyn::api::DrawableProperties_Color* Arena::CreateMaybeMessage<::bosdyn::api::DrawableProperties_Color>(Arena*);
template<> ::bosdyn::api::DrawableSphere* Arena::CreateMaybeMessage<::bosdyn::api::DrawableSphere>(Arena*);
template<> ::bosdyn::api::ImageProperties* Arena::CreateMaybeMessage<::bosdyn::api::ImageProperties>(Arena*);
template<> ::bosdyn::api::ListWorldObjectRequest* Arena::CreateMaybeMessage<::bosdyn::api::ListWorldObjectRequest>(Arena*);
template<> ::bosdyn::api::ListWorldObjectResponse* Arena::CreateMaybeMessage<::bosdyn::api::ListWorldObjectResponse>(Arena*);
template<> ::bosdyn::api::MutateWorldObjectRequest* Arena::CreateMaybeMessage<::bosdyn::api::MutateWorldObjectRequest>(Arena*);
template<> ::bosdyn::api::MutateWorldObjectRequest_Mutation* Arena::CreateMaybeMessage<::bosdyn::api::MutateWorldObjectRequest_Mutation>(Arena*);
template<> ::bosdyn::api::MutateWorldObjectResponse* Arena::CreateMaybeMessage<::bosdyn::api::MutateWorldObjectResponse>(Arena*);
template<> ::bosdyn::api::WorldObject* Arena::CreateMaybeMessage<::bosdyn::api::WorldObject>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bosdyn {
namespace api {

enum MutateWorldObjectRequest_Action : int {
  MutateWorldObjectRequest_Action_ACTION_UNKNOWN = 0,
  MutateWorldObjectRequest_Action_ACTION_ADD = 1,
  MutateWorldObjectRequest_Action_ACTION_CHANGE = 2,
  MutateWorldObjectRequest_Action_ACTION_DELETE = 3,
  MutateWorldObjectRequest_Action_MutateWorldObjectRequest_Action_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MutateWorldObjectRequest_Action_MutateWorldObjectRequest_Action_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MutateWorldObjectRequest_Action_IsValid(int value);
constexpr MutateWorldObjectRequest_Action MutateWorldObjectRequest_Action_Action_MIN = MutateWorldObjectRequest_Action_ACTION_UNKNOWN;
constexpr MutateWorldObjectRequest_Action MutateWorldObjectRequest_Action_Action_MAX = MutateWorldObjectRequest_Action_ACTION_DELETE;
constexpr int MutateWorldObjectRequest_Action_Action_ARRAYSIZE = MutateWorldObjectRequest_Action_Action_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MutateWorldObjectRequest_Action_descriptor();
template<typename T>
inline const std::string& MutateWorldObjectRequest_Action_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MutateWorldObjectRequest_Action>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MutateWorldObjectRequest_Action_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MutateWorldObjectRequest_Action_descriptor(), enum_t_value);
}
inline bool MutateWorldObjectRequest_Action_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MutateWorldObjectRequest_Action* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MutateWorldObjectRequest_Action>(
    MutateWorldObjectRequest_Action_descriptor(), name, value);
}
enum MutateWorldObjectResponse_Status : int {
  MutateWorldObjectResponse_Status_STATUS_UNKNOWN = 0,
  MutateWorldObjectResponse_Status_STATUS_OK = 1,
  MutateWorldObjectResponse_Status_STATUS_INVALID_MUTATION_ID = 2,
  MutateWorldObjectResponse_Status_STATUS_NO_PERMISSION = 3,
  MutateWorldObjectResponse_Status_MutateWorldObjectResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MutateWorldObjectResponse_Status_MutateWorldObjectResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MutateWorldObjectResponse_Status_IsValid(int value);
constexpr MutateWorldObjectResponse_Status MutateWorldObjectResponse_Status_Status_MIN = MutateWorldObjectResponse_Status_STATUS_UNKNOWN;
constexpr MutateWorldObjectResponse_Status MutateWorldObjectResponse_Status_Status_MAX = MutateWorldObjectResponse_Status_STATUS_NO_PERMISSION;
constexpr int MutateWorldObjectResponse_Status_Status_ARRAYSIZE = MutateWorldObjectResponse_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MutateWorldObjectResponse_Status_descriptor();
template<typename T>
inline const std::string& MutateWorldObjectResponse_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MutateWorldObjectResponse_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MutateWorldObjectResponse_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MutateWorldObjectResponse_Status_descriptor(), enum_t_value);
}
inline bool MutateWorldObjectResponse_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MutateWorldObjectResponse_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MutateWorldObjectResponse_Status>(
    MutateWorldObjectResponse_Status_descriptor(), name, value);
}
enum WorldObjectType : int {
  WORLD_OBJECT_UNKNOWN = 0,
  WORLD_OBJECT_DRAWABLE = 1,
  WORLD_OBJECT_APRILTAG = 2,
  WORLD_OBJECT_IMAGE_COORDINATES = 5,
  WorldObjectType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  WorldObjectType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool WorldObjectType_IsValid(int value);
constexpr WorldObjectType WorldObjectType_MIN = WORLD_OBJECT_UNKNOWN;
constexpr WorldObjectType WorldObjectType_MAX = WORLD_OBJECT_IMAGE_COORDINATES;
constexpr int WorldObjectType_ARRAYSIZE = WorldObjectType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WorldObjectType_descriptor();
template<typename T>
inline const std::string& WorldObjectType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WorldObjectType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WorldObjectType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WorldObjectType_descriptor(), enum_t_value);
}
inline bool WorldObjectType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WorldObjectType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WorldObjectType>(
    WorldObjectType_descriptor(), name, value);
}
// ===================================================================

class WorldObject PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.WorldObject) */ {
 public:
  inline WorldObject() : WorldObject(nullptr) {}
  virtual ~WorldObject();

  WorldObject(const WorldObject& from);
  WorldObject(WorldObject&& from) noexcept
    : WorldObject() {
    *this = ::std::move(from);
  }

  inline WorldObject& operator=(const WorldObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorldObject& operator=(WorldObject&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorldObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorldObject* internal_default_instance() {
    return reinterpret_cast<const WorldObject*>(
               &_WorldObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WorldObject& a, WorldObject& b) {
    a.Swap(&b);
  }
  inline void Swap(WorldObject* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorldObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorldObject* New() const final {
    return CreateMaybeMessage<WorldObject>(nullptr);
  }

  WorldObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorldObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorldObject& from);
  void MergeFrom(const WorldObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorldObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.WorldObject";
  }
  protected:
  explicit WorldObject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fworld_5fobject_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fworld_5fobject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDrawablePropertiesFieldNumber = 5,
    kNameFieldNumber = 2,
    kApriltagPropertiesFieldNumber = 6,
    kImagePropertiesFieldNumber = 9,
    kAcquisitionTimeFieldNumber = 30,
    kTransformsSnapshotFieldNumber = 31,
    kAdditionalPropertiesFieldNumber = 100,
    kIdFieldNumber = 1,
  };
  // repeated .bosdyn.api.DrawableProperties drawable_properties = 5;
  int drawable_properties_size() const;
  private:
  int _internal_drawable_properties_size() const;
  public:
  void clear_drawable_properties();
  ::bosdyn::api::DrawableProperties* mutable_drawable_properties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::DrawableProperties >*
      mutable_drawable_properties();
  private:
  const ::bosdyn::api::DrawableProperties& _internal_drawable_properties(int index) const;
  ::bosdyn::api::DrawableProperties* _internal_add_drawable_properties();
  public:
  const ::bosdyn::api::DrawableProperties& drawable_properties(int index) const;
  ::bosdyn::api::DrawableProperties* add_drawable_properties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::DrawableProperties >&
      drawable_properties() const;

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .bosdyn.api.AprilTagProperties apriltag_properties = 6;
  bool has_apriltag_properties() const;
  private:
  bool _internal_has_apriltag_properties() const;
  public:
  void clear_apriltag_properties();
  const ::bosdyn::api::AprilTagProperties& apriltag_properties() const;
  ::bosdyn::api::AprilTagProperties* release_apriltag_properties();
  ::bosdyn::api::AprilTagProperties* mutable_apriltag_properties();
  void set_allocated_apriltag_properties(::bosdyn::api::AprilTagProperties* apriltag_properties);
  private:
  const ::bosdyn::api::AprilTagProperties& _internal_apriltag_properties() const;
  ::bosdyn::api::AprilTagProperties* _internal_mutable_apriltag_properties();
  public:
  void unsafe_arena_set_allocated_apriltag_properties(
      ::bosdyn::api::AprilTagProperties* apriltag_properties);
  ::bosdyn::api::AprilTagProperties* unsafe_arena_release_apriltag_properties();

  // .bosdyn.api.ImageProperties image_properties = 9;
  bool has_image_properties() const;
  private:
  bool _internal_has_image_properties() const;
  public:
  void clear_image_properties();
  const ::bosdyn::api::ImageProperties& image_properties() const;
  ::bosdyn::api::ImageProperties* release_image_properties();
  ::bosdyn::api::ImageProperties* mutable_image_properties();
  void set_allocated_image_properties(::bosdyn::api::ImageProperties* image_properties);
  private:
  const ::bosdyn::api::ImageProperties& _internal_image_properties() const;
  ::bosdyn::api::ImageProperties* _internal_mutable_image_properties();
  public:
  void unsafe_arena_set_allocated_image_properties(
      ::bosdyn::api::ImageProperties* image_properties);
  ::bosdyn::api::ImageProperties* unsafe_arena_release_image_properties();

  // .google.protobuf.Timestamp acquisition_time = 30;
  bool has_acquisition_time() const;
  private:
  bool _internal_has_acquisition_time() const;
  public:
  void clear_acquisition_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& acquisition_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_acquisition_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_acquisition_time();
  void set_allocated_acquisition_time(PROTOBUF_NAMESPACE_ID::Timestamp* acquisition_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_acquisition_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_acquisition_time();
  public:
  void unsafe_arena_set_allocated_acquisition_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* acquisition_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_acquisition_time();

  // .bosdyn.api.FrameTreeSnapshot transforms_snapshot = 31;
  bool has_transforms_snapshot() const;
  private:
  bool _internal_has_transforms_snapshot() const;
  public:
  void clear_transforms_snapshot();
  const ::bosdyn::api::FrameTreeSnapshot& transforms_snapshot() const;
  ::bosdyn::api::FrameTreeSnapshot* release_transforms_snapshot();
  ::bosdyn::api::FrameTreeSnapshot* mutable_transforms_snapshot();
  void set_allocated_transforms_snapshot(::bosdyn::api::FrameTreeSnapshot* transforms_snapshot);
  private:
  const ::bosdyn::api::FrameTreeSnapshot& _internal_transforms_snapshot() const;
  ::bosdyn::api::FrameTreeSnapshot* _internal_mutable_transforms_snapshot();
  public:
  void unsafe_arena_set_allocated_transforms_snapshot(
      ::bosdyn::api::FrameTreeSnapshot* transforms_snapshot);
  ::bosdyn::api::FrameTreeSnapshot* unsafe_arena_release_transforms_snapshot();

  // .google.protobuf.Any additional_properties = 100;
  bool has_additional_properties() const;
  private:
  bool _internal_has_additional_properties() const;
  public:
  void clear_additional_properties();
  const PROTOBUF_NAMESPACE_ID::Any& additional_properties() const;
  PROTOBUF_NAMESPACE_ID::Any* release_additional_properties();
  PROTOBUF_NAMESPACE_ID::Any* mutable_additional_properties();
  void set_allocated_additional_properties(PROTOBUF_NAMESPACE_ID::Any* additional_properties);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_additional_properties() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_additional_properties();
  public:
  void unsafe_arena_set_allocated_additional_properties(
      PROTOBUF_NAMESPACE_ID::Any* additional_properties);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_additional_properties();

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.WorldObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::DrawableProperties > drawable_properties_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::bosdyn::api::AprilTagProperties* apriltag_properties_;
  ::bosdyn::api::ImageProperties* image_properties_;
  PROTOBUF_NAMESPACE_ID::Timestamp* acquisition_time_;
  ::bosdyn::api::FrameTreeSnapshot* transforms_snapshot_;
  PROTOBUF_NAMESPACE_ID::Any* additional_properties_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fworld_5fobject_2eproto;
};
// -------------------------------------------------------------------

class ListWorldObjectRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.ListWorldObjectRequest) */ {
 public:
  inline ListWorldObjectRequest() : ListWorldObjectRequest(nullptr) {}
  virtual ~ListWorldObjectRequest();

  ListWorldObjectRequest(const ListWorldObjectRequest& from);
  ListWorldObjectRequest(ListWorldObjectRequest&& from) noexcept
    : ListWorldObjectRequest() {
    *this = ::std::move(from);
  }

  inline ListWorldObjectRequest& operator=(const ListWorldObjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListWorldObjectRequest& operator=(ListWorldObjectRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListWorldObjectRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListWorldObjectRequest* internal_default_instance() {
    return reinterpret_cast<const ListWorldObjectRequest*>(
               &_ListWorldObjectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ListWorldObjectRequest& a, ListWorldObjectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListWorldObjectRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListWorldObjectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListWorldObjectRequest* New() const final {
    return CreateMaybeMessage<ListWorldObjectRequest>(nullptr);
  }

  ListWorldObjectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListWorldObjectRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListWorldObjectRequest& from);
  void MergeFrom(const ListWorldObjectRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListWorldObjectRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.ListWorldObjectRequest";
  }
  protected:
  explicit ListWorldObjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fworld_5fobject_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fworld_5fobject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectTypeFieldNumber = 2,
    kHeaderFieldNumber = 1,
    kTimestampFilterFieldNumber = 3,
  };
  // repeated .bosdyn.api.WorldObjectType object_type = 2;
  int object_type_size() const;
  private:
  int _internal_object_type_size() const;
  public:
  void clear_object_type();
  private:
  ::bosdyn::api::WorldObjectType _internal_object_type(int index) const;
  void _internal_add_object_type(::bosdyn::api::WorldObjectType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_object_type();
  public:
  ::bosdyn::api::WorldObjectType object_type(int index) const;
  void set_object_type(int index, ::bosdyn::api::WorldObjectType value);
  void add_object_type(::bosdyn::api::WorldObjectType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& object_type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_object_type();

  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // .google.protobuf.Timestamp timestamp_filter = 3;
  bool has_timestamp_filter() const;
  private:
  bool _internal_has_timestamp_filter() const;
  public:
  void clear_timestamp_filter();
  const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp_filter() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp_filter();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp_filter();
  void set_allocated_timestamp_filter(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_filter);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp_filter() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp_filter();
  public:
  void unsafe_arena_set_allocated_timestamp_filter(
      PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_filter);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp_filter();

  // @@protoc_insertion_point(class_scope:bosdyn.api.ListWorldObjectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> object_type_;
  mutable std::atomic<int> _object_type_cached_byte_size_;
  ::bosdyn::api::RequestHeader* header_;
  PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_filter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fworld_5fobject_2eproto;
};
// -------------------------------------------------------------------

class ListWorldObjectResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.ListWorldObjectResponse) */ {
 public:
  inline ListWorldObjectResponse() : ListWorldObjectResponse(nullptr) {}
  virtual ~ListWorldObjectResponse();

  ListWorldObjectResponse(const ListWorldObjectResponse& from);
  ListWorldObjectResponse(ListWorldObjectResponse&& from) noexcept
    : ListWorldObjectResponse() {
    *this = ::std::move(from);
  }

  inline ListWorldObjectResponse& operator=(const ListWorldObjectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListWorldObjectResponse& operator=(ListWorldObjectResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListWorldObjectResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListWorldObjectResponse* internal_default_instance() {
    return reinterpret_cast<const ListWorldObjectResponse*>(
               &_ListWorldObjectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ListWorldObjectResponse& a, ListWorldObjectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListWorldObjectResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListWorldObjectResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListWorldObjectResponse* New() const final {
    return CreateMaybeMessage<ListWorldObjectResponse>(nullptr);
  }

  ListWorldObjectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListWorldObjectResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListWorldObjectResponse& from);
  void MergeFrom(const ListWorldObjectResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListWorldObjectResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.ListWorldObjectResponse";
  }
  protected:
  explicit ListWorldObjectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fworld_5fobject_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fworld_5fobject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldObjectsFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .bosdyn.api.WorldObject world_objects = 2;
  int world_objects_size() const;
  private:
  int _internal_world_objects_size() const;
  public:
  void clear_world_objects();
  ::bosdyn::api::WorldObject* mutable_world_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::WorldObject >*
      mutable_world_objects();
  private:
  const ::bosdyn::api::WorldObject& _internal_world_objects(int index) const;
  ::bosdyn::api::WorldObject* _internal_add_world_objects();
  public:
  const ::bosdyn::api::WorldObject& world_objects(int index) const;
  ::bosdyn::api::WorldObject* add_world_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::WorldObject >&
      world_objects() const;

  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:bosdyn.api.ListWorldObjectResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::WorldObject > world_objects_;
  ::bosdyn::api::ResponseHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fworld_5fobject_2eproto;
};
// -------------------------------------------------------------------

class MutateWorldObjectRequest_Mutation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.MutateWorldObjectRequest.Mutation) */ {
 public:
  inline MutateWorldObjectRequest_Mutation() : MutateWorldObjectRequest_Mutation(nullptr) {}
  virtual ~MutateWorldObjectRequest_Mutation();

  MutateWorldObjectRequest_Mutation(const MutateWorldObjectRequest_Mutation& from);
  MutateWorldObjectRequest_Mutation(MutateWorldObjectRequest_Mutation&& from) noexcept
    : MutateWorldObjectRequest_Mutation() {
    *this = ::std::move(from);
  }

  inline MutateWorldObjectRequest_Mutation& operator=(const MutateWorldObjectRequest_Mutation& from) {
    CopyFrom(from);
    return *this;
  }
  inline MutateWorldObjectRequest_Mutation& operator=(MutateWorldObjectRequest_Mutation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MutateWorldObjectRequest_Mutation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MutateWorldObjectRequest_Mutation* internal_default_instance() {
    return reinterpret_cast<const MutateWorldObjectRequest_Mutation*>(
               &_MutateWorldObjectRequest_Mutation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MutateWorldObjectRequest_Mutation& a, MutateWorldObjectRequest_Mutation& b) {
    a.Swap(&b);
  }
  inline void Swap(MutateWorldObjectRequest_Mutation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MutateWorldObjectRequest_Mutation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MutateWorldObjectRequest_Mutation* New() const final {
    return CreateMaybeMessage<MutateWorldObjectRequest_Mutation>(nullptr);
  }

  MutateWorldObjectRequest_Mutation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MutateWorldObjectRequest_Mutation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MutateWorldObjectRequest_Mutation& from);
  void MergeFrom(const MutateWorldObjectRequest_Mutation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MutateWorldObjectRequest_Mutation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.MutateWorldObjectRequest.Mutation";
  }
  protected:
  explicit MutateWorldObjectRequest_Mutation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fworld_5fobject_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fworld_5fobject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectFieldNumber = 2,
    kActionFieldNumber = 1,
  };
  // .bosdyn.api.WorldObject object = 2;
  bool has_object() const;
  private:
  bool _internal_has_object() const;
  public:
  void clear_object();
  const ::bosdyn::api::WorldObject& object() const;
  ::bosdyn::api::WorldObject* release_object();
  ::bosdyn::api::WorldObject* mutable_object();
  void set_allocated_object(::bosdyn::api::WorldObject* object);
  private:
  const ::bosdyn::api::WorldObject& _internal_object() const;
  ::bosdyn::api::WorldObject* _internal_mutable_object();
  public:
  void unsafe_arena_set_allocated_object(
      ::bosdyn::api::WorldObject* object);
  ::bosdyn::api::WorldObject* unsafe_arena_release_object();

  // .bosdyn.api.MutateWorldObjectRequest.Action action = 1;
  void clear_action();
  ::bosdyn::api::MutateWorldObjectRequest_Action action() const;
  void set_action(::bosdyn::api::MutateWorldObjectRequest_Action value);
  private:
  ::bosdyn::api::MutateWorldObjectRequest_Action _internal_action() const;
  void _internal_set_action(::bosdyn::api::MutateWorldObjectRequest_Action value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.MutateWorldObjectRequest.Mutation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::WorldObject* object_;
  int action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fworld_5fobject_2eproto;
};
// -------------------------------------------------------------------

class MutateWorldObjectRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.MutateWorldObjectRequest) */ {
 public:
  inline MutateWorldObjectRequest() : MutateWorldObjectRequest(nullptr) {}
  virtual ~MutateWorldObjectRequest();

  MutateWorldObjectRequest(const MutateWorldObjectRequest& from);
  MutateWorldObjectRequest(MutateWorldObjectRequest&& from) noexcept
    : MutateWorldObjectRequest() {
    *this = ::std::move(from);
  }

  inline MutateWorldObjectRequest& operator=(const MutateWorldObjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MutateWorldObjectRequest& operator=(MutateWorldObjectRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MutateWorldObjectRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MutateWorldObjectRequest* internal_default_instance() {
    return reinterpret_cast<const MutateWorldObjectRequest*>(
               &_MutateWorldObjectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MutateWorldObjectRequest& a, MutateWorldObjectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MutateWorldObjectRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MutateWorldObjectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MutateWorldObjectRequest* New() const final {
    return CreateMaybeMessage<MutateWorldObjectRequest>(nullptr);
  }

  MutateWorldObjectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MutateWorldObjectRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MutateWorldObjectRequest& from);
  void MergeFrom(const MutateWorldObjectRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MutateWorldObjectRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.MutateWorldObjectRequest";
  }
  protected:
  explicit MutateWorldObjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fworld_5fobject_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fworld_5fobject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MutateWorldObjectRequest_Mutation Mutation;

  typedef MutateWorldObjectRequest_Action Action;
  static constexpr Action ACTION_UNKNOWN =
    MutateWorldObjectRequest_Action_ACTION_UNKNOWN;
  static constexpr Action ACTION_ADD =
    MutateWorldObjectRequest_Action_ACTION_ADD;
  static constexpr Action ACTION_CHANGE =
    MutateWorldObjectRequest_Action_ACTION_CHANGE;
  static constexpr Action ACTION_DELETE =
    MutateWorldObjectRequest_Action_ACTION_DELETE;
  static inline bool Action_IsValid(int value) {
    return MutateWorldObjectRequest_Action_IsValid(value);
  }
  static constexpr Action Action_MIN =
    MutateWorldObjectRequest_Action_Action_MIN;
  static constexpr Action Action_MAX =
    MutateWorldObjectRequest_Action_Action_MAX;
  static constexpr int Action_ARRAYSIZE =
    MutateWorldObjectRequest_Action_Action_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Action_descriptor() {
    return MutateWorldObjectRequest_Action_descriptor();
  }
  template<typename T>
  static inline const std::string& Action_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Action>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Action_Name.");
    return MutateWorldObjectRequest_Action_Name(enum_t_value);
  }
  static inline bool Action_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Action* value) {
    return MutateWorldObjectRequest_Action_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kMutationFieldNumber = 2,
  };
  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // .bosdyn.api.MutateWorldObjectRequest.Mutation mutation = 2;
  bool has_mutation() const;
  private:
  bool _internal_has_mutation() const;
  public:
  void clear_mutation();
  const ::bosdyn::api::MutateWorldObjectRequest_Mutation& mutation() const;
  ::bosdyn::api::MutateWorldObjectRequest_Mutation* release_mutation();
  ::bosdyn::api::MutateWorldObjectRequest_Mutation* mutable_mutation();
  void set_allocated_mutation(::bosdyn::api::MutateWorldObjectRequest_Mutation* mutation);
  private:
  const ::bosdyn::api::MutateWorldObjectRequest_Mutation& _internal_mutation() const;
  ::bosdyn::api::MutateWorldObjectRequest_Mutation* _internal_mutable_mutation();
  public:
  void unsafe_arena_set_allocated_mutation(
      ::bosdyn::api::MutateWorldObjectRequest_Mutation* mutation);
  ::bosdyn::api::MutateWorldObjectRequest_Mutation* unsafe_arena_release_mutation();

  // @@protoc_insertion_point(class_scope:bosdyn.api.MutateWorldObjectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::RequestHeader* header_;
  ::bosdyn::api::MutateWorldObjectRequest_Mutation* mutation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fworld_5fobject_2eproto;
};
// -------------------------------------------------------------------

class MutateWorldObjectResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.MutateWorldObjectResponse) */ {
 public:
  inline MutateWorldObjectResponse() : MutateWorldObjectResponse(nullptr) {}
  virtual ~MutateWorldObjectResponse();

  MutateWorldObjectResponse(const MutateWorldObjectResponse& from);
  MutateWorldObjectResponse(MutateWorldObjectResponse&& from) noexcept
    : MutateWorldObjectResponse() {
    *this = ::std::move(from);
  }

  inline MutateWorldObjectResponse& operator=(const MutateWorldObjectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MutateWorldObjectResponse& operator=(MutateWorldObjectResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MutateWorldObjectResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MutateWorldObjectResponse* internal_default_instance() {
    return reinterpret_cast<const MutateWorldObjectResponse*>(
               &_MutateWorldObjectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MutateWorldObjectResponse& a, MutateWorldObjectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MutateWorldObjectResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MutateWorldObjectResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MutateWorldObjectResponse* New() const final {
    return CreateMaybeMessage<MutateWorldObjectResponse>(nullptr);
  }

  MutateWorldObjectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MutateWorldObjectResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MutateWorldObjectResponse& from);
  void MergeFrom(const MutateWorldObjectResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MutateWorldObjectResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.MutateWorldObjectResponse";
  }
  protected:
  explicit MutateWorldObjectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fworld_5fobject_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fworld_5fobject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MutateWorldObjectResponse_Status Status;
  static constexpr Status STATUS_UNKNOWN =
    MutateWorldObjectResponse_Status_STATUS_UNKNOWN;
  static constexpr Status STATUS_OK =
    MutateWorldObjectResponse_Status_STATUS_OK;
  static constexpr Status STATUS_INVALID_MUTATION_ID =
    MutateWorldObjectResponse_Status_STATUS_INVALID_MUTATION_ID;
  static constexpr Status STATUS_NO_PERMISSION =
    MutateWorldObjectResponse_Status_STATUS_NO_PERMISSION;
  static inline bool Status_IsValid(int value) {
    return MutateWorldObjectResponse_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    MutateWorldObjectResponse_Status_Status_MIN;
  static constexpr Status Status_MAX =
    MutateWorldObjectResponse_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    MutateWorldObjectResponse_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return MutateWorldObjectResponse_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return MutateWorldObjectResponse_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return MutateWorldObjectResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kStatusFieldNumber = 2,
    kMutatedObjectIdFieldNumber = 4,
  };
  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // .bosdyn.api.MutateWorldObjectResponse.Status status = 2;
  void clear_status();
  ::bosdyn::api::MutateWorldObjectResponse_Status status() const;
  void set_status(::bosdyn::api::MutateWorldObjectResponse_Status value);
  private:
  ::bosdyn::api::MutateWorldObjectResponse_Status _internal_status() const;
  void _internal_set_status(::bosdyn::api::MutateWorldObjectResponse_Status value);
  public:

  // int32 mutated_object_id = 4;
  void clear_mutated_object_id();
  ::PROTOBUF_NAMESPACE_ID::int32 mutated_object_id() const;
  void set_mutated_object_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mutated_object_id() const;
  void _internal_set_mutated_object_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.MutateWorldObjectResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::ResponseHeader* header_;
  int status_;
  ::PROTOBUF_NAMESPACE_ID::int32 mutated_object_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fworld_5fobject_2eproto;
};
// -------------------------------------------------------------------

class ImageProperties PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.ImageProperties) */ {
 public:
  inline ImageProperties() : ImageProperties(nullptr) {}
  virtual ~ImageProperties();

  ImageProperties(const ImageProperties& from);
  ImageProperties(ImageProperties&& from) noexcept
    : ImageProperties() {
    *this = ::std::move(from);
  }

  inline ImageProperties& operator=(const ImageProperties& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageProperties& operator=(ImageProperties&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImageProperties& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageProperties* internal_default_instance() {
    return reinterpret_cast<const ImageProperties*>(
               &_ImageProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ImageProperties& a, ImageProperties& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageProperties* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageProperties* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageProperties* New() const final {
    return CreateMaybeMessage<ImageProperties>(nullptr);
  }

  ImageProperties* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageProperties>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImageProperties& from);
  void MergeFrom(const ImageProperties& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageProperties* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.ImageProperties";
  }
  protected:
  explicit ImageProperties(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fworld_5fobject_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fworld_5fobject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraSourceFieldNumber = 1,
    kFrameNameImageCoordinatesFieldNumber = 3,
    kCoordinatesFieldNumber = 2,
  };
  // string camera_source = 1;
  void clear_camera_source();
  const std::string& camera_source() const;
  void set_camera_source(const std::string& value);
  void set_camera_source(std::string&& value);
  void set_camera_source(const char* value);
  void set_camera_source(const char* value, size_t size);
  std::string* mutable_camera_source();
  std::string* release_camera_source();
  void set_allocated_camera_source(std::string* camera_source);
  private:
  const std::string& _internal_camera_source() const;
  void _internal_set_camera_source(const std::string& value);
  std::string* _internal_mutable_camera_source();
  public:

  // string frame_name_image_coordinates = 3;
  void clear_frame_name_image_coordinates();
  const std::string& frame_name_image_coordinates() const;
  void set_frame_name_image_coordinates(const std::string& value);
  void set_frame_name_image_coordinates(std::string&& value);
  void set_frame_name_image_coordinates(const char* value);
  void set_frame_name_image_coordinates(const char* value, size_t size);
  std::string* mutable_frame_name_image_coordinates();
  std::string* release_frame_name_image_coordinates();
  void set_allocated_frame_name_image_coordinates(std::string* frame_name_image_coordinates);
  private:
  const std::string& _internal_frame_name_image_coordinates() const;
  void _internal_set_frame_name_image_coordinates(const std::string& value);
  std::string* _internal_mutable_frame_name_image_coordinates();
  public:

  // .bosdyn.api.Polygon coordinates = 2;
  bool has_coordinates() const;
  private:
  bool _internal_has_coordinates() const;
  public:
  void clear_coordinates();
  const ::bosdyn::api::Polygon& coordinates() const;
  ::bosdyn::api::Polygon* release_coordinates();
  ::bosdyn::api::Polygon* mutable_coordinates();
  void set_allocated_coordinates(::bosdyn::api::Polygon* coordinates);
  private:
  const ::bosdyn::api::Polygon& _internal_coordinates() const;
  ::bosdyn::api::Polygon* _internal_mutable_coordinates();
  public:
  void unsafe_arena_set_allocated_coordinates(
      ::bosdyn::api::Polygon* coordinates);
  ::bosdyn::api::Polygon* unsafe_arena_release_coordinates();

  // @@protoc_insertion_point(class_scope:bosdyn.api.ImageProperties)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camera_source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame_name_image_coordinates_;
  ::bosdyn::api::Polygon* coordinates_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fworld_5fobject_2eproto;
};
// -------------------------------------------------------------------

class AprilTagProperties PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.AprilTagProperties) */ {
 public:
  inline AprilTagProperties() : AprilTagProperties(nullptr) {}
  virtual ~AprilTagProperties();

  AprilTagProperties(const AprilTagProperties& from);
  AprilTagProperties(AprilTagProperties&& from) noexcept
    : AprilTagProperties() {
    *this = ::std::move(from);
  }

  inline AprilTagProperties& operator=(const AprilTagProperties& from) {
    CopyFrom(from);
    return *this;
  }
  inline AprilTagProperties& operator=(AprilTagProperties&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AprilTagProperties& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AprilTagProperties* internal_default_instance() {
    return reinterpret_cast<const AprilTagProperties*>(
               &_AprilTagProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AprilTagProperties& a, AprilTagProperties& b) {
    a.Swap(&b);
  }
  inline void Swap(AprilTagProperties* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AprilTagProperties* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AprilTagProperties* New() const final {
    return CreateMaybeMessage<AprilTagProperties>(nullptr);
  }

  AprilTagProperties* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AprilTagProperties>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AprilTagProperties& from);
  void MergeFrom(const AprilTagProperties& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AprilTagProperties* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.AprilTagProperties";
  }
  protected:
  explicit AprilTagProperties(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fworld_5fobject_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fworld_5fobject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameNameFiducialFieldNumber = 3,
    kFrameNameFiducialFilteredFieldNumber = 4,
    kDimensionsFieldNumber = 2,
    kTagIdFieldNumber = 1,
  };
  // string frame_name_fiducial = 3;
  void clear_frame_name_fiducial();
  const std::string& frame_name_fiducial() const;
  void set_frame_name_fiducial(const std::string& value);
  void set_frame_name_fiducial(std::string&& value);
  void set_frame_name_fiducial(const char* value);
  void set_frame_name_fiducial(const char* value, size_t size);
  std::string* mutable_frame_name_fiducial();
  std::string* release_frame_name_fiducial();
  void set_allocated_frame_name_fiducial(std::string* frame_name_fiducial);
  private:
  const std::string& _internal_frame_name_fiducial() const;
  void _internal_set_frame_name_fiducial(const std::string& value);
  std::string* _internal_mutable_frame_name_fiducial();
  public:

  // string frame_name_fiducial_filtered = 4;
  void clear_frame_name_fiducial_filtered();
  const std::string& frame_name_fiducial_filtered() const;
  void set_frame_name_fiducial_filtered(const std::string& value);
  void set_frame_name_fiducial_filtered(std::string&& value);
  void set_frame_name_fiducial_filtered(const char* value);
  void set_frame_name_fiducial_filtered(const char* value, size_t size);
  std::string* mutable_frame_name_fiducial_filtered();
  std::string* release_frame_name_fiducial_filtered();
  void set_allocated_frame_name_fiducial_filtered(std::string* frame_name_fiducial_filtered);
  private:
  const std::string& _internal_frame_name_fiducial_filtered() const;
  void _internal_set_frame_name_fiducial_filtered(const std::string& value);
  std::string* _internal_mutable_frame_name_fiducial_filtered();
  public:

  // .bosdyn.api.Vec2 dimensions = 2;
  bool has_dimensions() const;
  private:
  bool _internal_has_dimensions() const;
  public:
  void clear_dimensions();
  const ::bosdyn::api::Vec2& dimensions() const;
  ::bosdyn::api::Vec2* release_dimensions();
  ::bosdyn::api::Vec2* mutable_dimensions();
  void set_allocated_dimensions(::bosdyn::api::Vec2* dimensions);
  private:
  const ::bosdyn::api::Vec2& _internal_dimensions() const;
  ::bosdyn::api::Vec2* _internal_mutable_dimensions();
  public:
  void unsafe_arena_set_allocated_dimensions(
      ::bosdyn::api::Vec2* dimensions);
  ::bosdyn::api::Vec2* unsafe_arena_release_dimensions();

  // int32 tag_id = 1;
  void clear_tag_id();
  ::PROTOBUF_NAMESPACE_ID::int32 tag_id() const;
  void set_tag_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tag_id() const;
  void _internal_set_tag_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.AprilTagProperties)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame_name_fiducial_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame_name_fiducial_filtered_;
  ::bosdyn::api::Vec2* dimensions_;
  ::PROTOBUF_NAMESPACE_ID::int32 tag_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fworld_5fobject_2eproto;
};
// -------------------------------------------------------------------

class DrawableProperties_Color PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.DrawableProperties.Color) */ {
 public:
  inline DrawableProperties_Color() : DrawableProperties_Color(nullptr) {}
  virtual ~DrawableProperties_Color();

  DrawableProperties_Color(const DrawableProperties_Color& from);
  DrawableProperties_Color(DrawableProperties_Color&& from) noexcept
    : DrawableProperties_Color() {
    *this = ::std::move(from);
  }

  inline DrawableProperties_Color& operator=(const DrawableProperties_Color& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrawableProperties_Color& operator=(DrawableProperties_Color&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DrawableProperties_Color& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DrawableProperties_Color* internal_default_instance() {
    return reinterpret_cast<const DrawableProperties_Color*>(
               &_DrawableProperties_Color_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DrawableProperties_Color& a, DrawableProperties_Color& b) {
    a.Swap(&b);
  }
  inline void Swap(DrawableProperties_Color* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrawableProperties_Color* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DrawableProperties_Color* New() const final {
    return CreateMaybeMessage<DrawableProperties_Color>(nullptr);
  }

  DrawableProperties_Color* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DrawableProperties_Color>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DrawableProperties_Color& from);
  void MergeFrom(const DrawableProperties_Color& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrawableProperties_Color* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.DrawableProperties.Color";
  }
  protected:
  explicit DrawableProperties_Color(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fworld_5fobject_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fworld_5fobject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRFieldNumber = 1,
    kGFieldNumber = 2,
    kAFieldNumber = 4,
    kBFieldNumber = 3,
  };
  // int32 r = 1;
  void clear_r();
  ::PROTOBUF_NAMESPACE_ID::int32 r() const;
  void set_r(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_r() const;
  void _internal_set_r(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 g = 2;
  void clear_g();
  ::PROTOBUF_NAMESPACE_ID::int32 g() const;
  void set_g(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_g() const;
  void _internal_set_g(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double a = 4;
  void clear_a();
  double a() const;
  void set_a(double value);
  private:
  double _internal_a() const;
  void _internal_set_a(double value);
  public:

  // int32 b = 3;
  void clear_b();
  ::PROTOBUF_NAMESPACE_ID::int32 b() const;
  void set_b(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_b() const;
  void _internal_set_b(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.DrawableProperties.Color)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 r_;
  ::PROTOBUF_NAMESPACE_ID::int32 g_;
  double a_;
  ::PROTOBUF_NAMESPACE_ID::int32 b_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fworld_5fobject_2eproto;
};
// -------------------------------------------------------------------

class DrawableProperties PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.DrawableProperties) */ {
 public:
  inline DrawableProperties() : DrawableProperties(nullptr) {}
  virtual ~DrawableProperties();

  DrawableProperties(const DrawableProperties& from);
  DrawableProperties(DrawableProperties&& from) noexcept
    : DrawableProperties() {
    *this = ::std::move(from);
  }

  inline DrawableProperties& operator=(const DrawableProperties& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrawableProperties& operator=(DrawableProperties&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DrawableProperties& default_instance();

  enum DrawableCase {
    kFrame = 4,
    kSphere = 5,
    kBox = 6,
    kArrow = 7,
    kCapsule = 8,
    kCylinder = 9,
    kLinestrip = 10,
    kPoints = 11,
    DRAWABLE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DrawableProperties* internal_default_instance() {
    return reinterpret_cast<const DrawableProperties*>(
               &_DrawableProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DrawableProperties& a, DrawableProperties& b) {
    a.Swap(&b);
  }
  inline void Swap(DrawableProperties* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrawableProperties* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DrawableProperties* New() const final {
    return CreateMaybeMessage<DrawableProperties>(nullptr);
  }

  DrawableProperties* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DrawableProperties>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DrawableProperties& from);
  void MergeFrom(const DrawableProperties& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrawableProperties* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.DrawableProperties";
  }
  protected:
  explicit DrawableProperties(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fworld_5fobject_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fworld_5fobject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef DrawableProperties_Color Color;

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 2,
    kFrameNameDrawableFieldNumber = 12,
    kColorFieldNumber = 1,
    kWireframeFieldNumber = 3,
    kFrameFieldNumber = 4,
    kSphereFieldNumber = 5,
    kBoxFieldNumber = 6,
    kArrowFieldNumber = 7,
    kCapsuleFieldNumber = 8,
    kCylinderFieldNumber = 9,
    kLinestripFieldNumber = 10,
    kPointsFieldNumber = 11,
  };
  // string label = 2;
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // string frame_name_drawable = 12;
  void clear_frame_name_drawable();
  const std::string& frame_name_drawable() const;
  void set_frame_name_drawable(const std::string& value);
  void set_frame_name_drawable(std::string&& value);
  void set_frame_name_drawable(const char* value);
  void set_frame_name_drawable(const char* value, size_t size);
  std::string* mutable_frame_name_drawable();
  std::string* release_frame_name_drawable();
  void set_allocated_frame_name_drawable(std::string* frame_name_drawable);
  private:
  const std::string& _internal_frame_name_drawable() const;
  void _internal_set_frame_name_drawable(const std::string& value);
  std::string* _internal_mutable_frame_name_drawable();
  public:

  // .bosdyn.api.DrawableProperties.Color color = 1;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::bosdyn::api::DrawableProperties_Color& color() const;
  ::bosdyn::api::DrawableProperties_Color* release_color();
  ::bosdyn::api::DrawableProperties_Color* mutable_color();
  void set_allocated_color(::bosdyn::api::DrawableProperties_Color* color);
  private:
  const ::bosdyn::api::DrawableProperties_Color& _internal_color() const;
  ::bosdyn::api::DrawableProperties_Color* _internal_mutable_color();
  public:
  void unsafe_arena_set_allocated_color(
      ::bosdyn::api::DrawableProperties_Color* color);
  ::bosdyn::api::DrawableProperties_Color* unsafe_arena_release_color();

  // bool wireframe = 3;
  void clear_wireframe();
  bool wireframe() const;
  void set_wireframe(bool value);
  private:
  bool _internal_wireframe() const;
  void _internal_set_wireframe(bool value);
  public:

  // .bosdyn.api.DrawableFrame frame = 4;
  bool has_frame() const;
  private:
  bool _internal_has_frame() const;
  public:
  void clear_frame();
  const ::bosdyn::api::DrawableFrame& frame() const;
  ::bosdyn::api::DrawableFrame* release_frame();
  ::bosdyn::api::DrawableFrame* mutable_frame();
  void set_allocated_frame(::bosdyn::api::DrawableFrame* frame);
  private:
  const ::bosdyn::api::DrawableFrame& _internal_frame() const;
  ::bosdyn::api::DrawableFrame* _internal_mutable_frame();
  public:
  void unsafe_arena_set_allocated_frame(
      ::bosdyn::api::DrawableFrame* frame);
  ::bosdyn::api::DrawableFrame* unsafe_arena_release_frame();

  // .bosdyn.api.DrawableSphere sphere = 5;
  bool has_sphere() const;
  private:
  bool _internal_has_sphere() const;
  public:
  void clear_sphere();
  const ::bosdyn::api::DrawableSphere& sphere() const;
  ::bosdyn::api::DrawableSphere* release_sphere();
  ::bosdyn::api::DrawableSphere* mutable_sphere();
  void set_allocated_sphere(::bosdyn::api::DrawableSphere* sphere);
  private:
  const ::bosdyn::api::DrawableSphere& _internal_sphere() const;
  ::bosdyn::api::DrawableSphere* _internal_mutable_sphere();
  public:
  void unsafe_arena_set_allocated_sphere(
      ::bosdyn::api::DrawableSphere* sphere);
  ::bosdyn::api::DrawableSphere* unsafe_arena_release_sphere();

  // .bosdyn.api.DrawableBox box = 6;
  bool has_box() const;
  private:
  bool _internal_has_box() const;
  public:
  void clear_box();
  const ::bosdyn::api::DrawableBox& box() const;
  ::bosdyn::api::DrawableBox* release_box();
  ::bosdyn::api::DrawableBox* mutable_box();
  void set_allocated_box(::bosdyn::api::DrawableBox* box);
  private:
  const ::bosdyn::api::DrawableBox& _internal_box() const;
  ::bosdyn::api::DrawableBox* _internal_mutable_box();
  public:
  void unsafe_arena_set_allocated_box(
      ::bosdyn::api::DrawableBox* box);
  ::bosdyn::api::DrawableBox* unsafe_arena_release_box();

  // .bosdyn.api.DrawableArrow arrow = 7;
  bool has_arrow() const;
  private:
  bool _internal_has_arrow() const;
  public:
  void clear_arrow();
  const ::bosdyn::api::DrawableArrow& arrow() const;
  ::bosdyn::api::DrawableArrow* release_arrow();
  ::bosdyn::api::DrawableArrow* mutable_arrow();
  void set_allocated_arrow(::bosdyn::api::DrawableArrow* arrow);
  private:
  const ::bosdyn::api::DrawableArrow& _internal_arrow() const;
  ::bosdyn::api::DrawableArrow* _internal_mutable_arrow();
  public:
  void unsafe_arena_set_allocated_arrow(
      ::bosdyn::api::DrawableArrow* arrow);
  ::bosdyn::api::DrawableArrow* unsafe_arena_release_arrow();

  // .bosdyn.api.DrawableCapsule capsule = 8;
  bool has_capsule() const;
  private:
  bool _internal_has_capsule() const;
  public:
  void clear_capsule();
  const ::bosdyn::api::DrawableCapsule& capsule() const;
  ::bosdyn::api::DrawableCapsule* release_capsule();
  ::bosdyn::api::DrawableCapsule* mutable_capsule();
  void set_allocated_capsule(::bosdyn::api::DrawableCapsule* capsule);
  private:
  const ::bosdyn::api::DrawableCapsule& _internal_capsule() const;
  ::bosdyn::api::DrawableCapsule* _internal_mutable_capsule();
  public:
  void unsafe_arena_set_allocated_capsule(
      ::bosdyn::api::DrawableCapsule* capsule);
  ::bosdyn::api::DrawableCapsule* unsafe_arena_release_capsule();

  // .bosdyn.api.DrawableCylinder cylinder = 9;
  bool has_cylinder() const;
  private:
  bool _internal_has_cylinder() const;
  public:
  void clear_cylinder();
  const ::bosdyn::api::DrawableCylinder& cylinder() const;
  ::bosdyn::api::DrawableCylinder* release_cylinder();
  ::bosdyn::api::DrawableCylinder* mutable_cylinder();
  void set_allocated_cylinder(::bosdyn::api::DrawableCylinder* cylinder);
  private:
  const ::bosdyn::api::DrawableCylinder& _internal_cylinder() const;
  ::bosdyn::api::DrawableCylinder* _internal_mutable_cylinder();
  public:
  void unsafe_arena_set_allocated_cylinder(
      ::bosdyn::api::DrawableCylinder* cylinder);
  ::bosdyn::api::DrawableCylinder* unsafe_arena_release_cylinder();

  // .bosdyn.api.DrawableLineStrip linestrip = 10;
  bool has_linestrip() const;
  private:
  bool _internal_has_linestrip() const;
  public:
  void clear_linestrip();
  const ::bosdyn::api::DrawableLineStrip& linestrip() const;
  ::bosdyn::api::DrawableLineStrip* release_linestrip();
  ::bosdyn::api::DrawableLineStrip* mutable_linestrip();
  void set_allocated_linestrip(::bosdyn::api::DrawableLineStrip* linestrip);
  private:
  const ::bosdyn::api::DrawableLineStrip& _internal_linestrip() const;
  ::bosdyn::api::DrawableLineStrip* _internal_mutable_linestrip();
  public:
  void unsafe_arena_set_allocated_linestrip(
      ::bosdyn::api::DrawableLineStrip* linestrip);
  ::bosdyn::api::DrawableLineStrip* unsafe_arena_release_linestrip();

  // .bosdyn.api.DrawablePoints points = 11;
  bool has_points() const;
  private:
  bool _internal_has_points() const;
  public:
  void clear_points();
  const ::bosdyn::api::DrawablePoints& points() const;
  ::bosdyn::api::DrawablePoints* release_points();
  ::bosdyn::api::DrawablePoints* mutable_points();
  void set_allocated_points(::bosdyn::api::DrawablePoints* points);
  private:
  const ::bosdyn::api::DrawablePoints& _internal_points() const;
  ::bosdyn::api::DrawablePoints* _internal_mutable_points();
  public:
  void unsafe_arena_set_allocated_points(
      ::bosdyn::api::DrawablePoints* points);
  ::bosdyn::api::DrawablePoints* unsafe_arena_release_points();

  void clear_drawable();
  DrawableCase drawable_case() const;
  // @@protoc_insertion_point(class_scope:bosdyn.api.DrawableProperties)
 private:
  class _Internal;
  void set_has_frame();
  void set_has_sphere();
  void set_has_box();
  void set_has_arrow();
  void set_has_capsule();
  void set_has_cylinder();
  void set_has_linestrip();
  void set_has_points();

  inline bool has_drawable() const;
  inline void clear_has_drawable();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame_name_drawable_;
  ::bosdyn::api::DrawableProperties_Color* color_;
  bool wireframe_;
  union DrawableUnion {
    DrawableUnion() {}
    ::bosdyn::api::DrawableFrame* frame_;
    ::bosdyn::api::DrawableSphere* sphere_;
    ::bosdyn::api::DrawableBox* box_;
    ::bosdyn::api::DrawableArrow* arrow_;
    ::bosdyn::api::DrawableCapsule* capsule_;
    ::bosdyn::api::DrawableCylinder* cylinder_;
    ::bosdyn::api::DrawableLineStrip* linestrip_;
    ::bosdyn::api::DrawablePoints* points_;
  } drawable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_bosdyn_2fapi_2fworld_5fobject_2eproto;
};
// -------------------------------------------------------------------

class DrawableFrame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.DrawableFrame) */ {
 public:
  inline DrawableFrame() : DrawableFrame(nullptr) {}
  virtual ~DrawableFrame();

  DrawableFrame(const DrawableFrame& from);
  DrawableFrame(DrawableFrame&& from) noexcept
    : DrawableFrame() {
    *this = ::std::move(from);
  }

  inline DrawableFrame& operator=(const DrawableFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrawableFrame& operator=(DrawableFrame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DrawableFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DrawableFrame* internal_default_instance() {
    return reinterpret_cast<const DrawableFrame*>(
               &_DrawableFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DrawableFrame& a, DrawableFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(DrawableFrame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrawableFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DrawableFrame* New() const final {
    return CreateMaybeMessage<DrawableFrame>(nullptr);
  }

  DrawableFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DrawableFrame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DrawableFrame& from);
  void MergeFrom(const DrawableFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrawableFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.DrawableFrame";
  }
  protected:
  explicit DrawableFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fworld_5fobject_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fworld_5fobject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrowLengthFieldNumber = 1,
    kArrowRadiusFieldNumber = 2,
  };
  // double arrow_length = 1;
  void clear_arrow_length();
  double arrow_length() const;
  void set_arrow_length(double value);
  private:
  double _internal_arrow_length() const;
  void _internal_set_arrow_length(double value);
  public:

  // double arrow_radius = 2;
  void clear_arrow_radius();
  double arrow_radius() const;
  void set_arrow_radius(double value);
  private:
  double _internal_arrow_radius() const;
  void _internal_set_arrow_radius(double value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.DrawableFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double arrow_length_;
  double arrow_radius_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fworld_5fobject_2eproto;
};
// -------------------------------------------------------------------

class DrawableSphere PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.DrawableSphere) */ {
 public:
  inline DrawableSphere() : DrawableSphere(nullptr) {}
  virtual ~DrawableSphere();

  DrawableSphere(const DrawableSphere& from);
  DrawableSphere(DrawableSphere&& from) noexcept
    : DrawableSphere() {
    *this = ::std::move(from);
  }

  inline DrawableSphere& operator=(const DrawableSphere& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrawableSphere& operator=(DrawableSphere&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DrawableSphere& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DrawableSphere* internal_default_instance() {
    return reinterpret_cast<const DrawableSphere*>(
               &_DrawableSphere_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(DrawableSphere& a, DrawableSphere& b) {
    a.Swap(&b);
  }
  inline void Swap(DrawableSphere* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrawableSphere* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DrawableSphere* New() const final {
    return CreateMaybeMessage<DrawableSphere>(nullptr);
  }

  DrawableSphere* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DrawableSphere>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DrawableSphere& from);
  void MergeFrom(const DrawableSphere& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrawableSphere* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.DrawableSphere";
  }
  protected:
  explicit DrawableSphere(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fworld_5fobject_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fworld_5fobject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRadiusFieldNumber = 1,
  };
  // double radius = 1;
  void clear_radius();
  double radius() const;
  void set_radius(double value);
  private:
  double _internal_radius() const;
  void _internal_set_radius(double value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.DrawableSphere)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double radius_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fworld_5fobject_2eproto;
};
// -------------------------------------------------------------------

class DrawableBox PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.DrawableBox) */ {
 public:
  inline DrawableBox() : DrawableBox(nullptr) {}
  virtual ~DrawableBox();

  DrawableBox(const DrawableBox& from);
  DrawableBox(DrawableBox&& from) noexcept
    : DrawableBox() {
    *this = ::std::move(from);
  }

  inline DrawableBox& operator=(const DrawableBox& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrawableBox& operator=(DrawableBox&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DrawableBox& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DrawableBox* internal_default_instance() {
    return reinterpret_cast<const DrawableBox*>(
               &_DrawableBox_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(DrawableBox& a, DrawableBox& b) {
    a.Swap(&b);
  }
  inline void Swap(DrawableBox* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrawableBox* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DrawableBox* New() const final {
    return CreateMaybeMessage<DrawableBox>(nullptr);
  }

  DrawableBox* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DrawableBox>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DrawableBox& from);
  void MergeFrom(const DrawableBox& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrawableBox* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.DrawableBox";
  }
  protected:
  explicit DrawableBox(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fworld_5fobject_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fworld_5fobject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizeFieldNumber = 1,
  };
  // .bosdyn.api.Vec3 size = 1;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const ::bosdyn::api::Vec3& size() const;
  ::bosdyn::api::Vec3* release_size();
  ::bosdyn::api::Vec3* mutable_size();
  void set_allocated_size(::bosdyn::api::Vec3* size);
  private:
  const ::bosdyn::api::Vec3& _internal_size() const;
  ::bosdyn::api::Vec3* _internal_mutable_size();
  public:
  void unsafe_arena_set_allocated_size(
      ::bosdyn::api::Vec3* size);
  ::bosdyn::api::Vec3* unsafe_arena_release_size();

  // @@protoc_insertion_point(class_scope:bosdyn.api.DrawableBox)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::Vec3* size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fworld_5fobject_2eproto;
};
// -------------------------------------------------------------------

class DrawableArrow PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.DrawableArrow) */ {
 public:
  inline DrawableArrow() : DrawableArrow(nullptr) {}
  virtual ~DrawableArrow();

  DrawableArrow(const DrawableArrow& from);
  DrawableArrow(DrawableArrow&& from) noexcept
    : DrawableArrow() {
    *this = ::std::move(from);
  }

  inline DrawableArrow& operator=(const DrawableArrow& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrawableArrow& operator=(DrawableArrow&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DrawableArrow& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DrawableArrow* internal_default_instance() {
    return reinterpret_cast<const DrawableArrow*>(
               &_DrawableArrow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(DrawableArrow& a, DrawableArrow& b) {
    a.Swap(&b);
  }
  inline void Swap(DrawableArrow* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrawableArrow* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DrawableArrow* New() const final {
    return CreateMaybeMessage<DrawableArrow>(nullptr);
  }

  DrawableArrow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DrawableArrow>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DrawableArrow& from);
  void MergeFrom(const DrawableArrow& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrawableArrow* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.DrawableArrow";
  }
  protected:
  explicit DrawableArrow(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fworld_5fobject_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fworld_5fobject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDirectionFieldNumber = 1,
    kRadiusFieldNumber = 2,
  };
  // .bosdyn.api.Vec3 direction = 1;
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  const ::bosdyn::api::Vec3& direction() const;
  ::bosdyn::api::Vec3* release_direction();
  ::bosdyn::api::Vec3* mutable_direction();
  void set_allocated_direction(::bosdyn::api::Vec3* direction);
  private:
  const ::bosdyn::api::Vec3& _internal_direction() const;
  ::bosdyn::api::Vec3* _internal_mutable_direction();
  public:
  void unsafe_arena_set_allocated_direction(
      ::bosdyn::api::Vec3* direction);
  ::bosdyn::api::Vec3* unsafe_arena_release_direction();

  // double radius = 2;
  void clear_radius();
  double radius() const;
  void set_radius(double value);
  private:
  double _internal_radius() const;
  void _internal_set_radius(double value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.DrawableArrow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::Vec3* direction_;
  double radius_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fworld_5fobject_2eproto;
};
// -------------------------------------------------------------------

class DrawableCapsule PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.DrawableCapsule) */ {
 public:
  inline DrawableCapsule() : DrawableCapsule(nullptr) {}
  virtual ~DrawableCapsule();

  DrawableCapsule(const DrawableCapsule& from);
  DrawableCapsule(DrawableCapsule&& from) noexcept
    : DrawableCapsule() {
    *this = ::std::move(from);
  }

  inline DrawableCapsule& operator=(const DrawableCapsule& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrawableCapsule& operator=(DrawableCapsule&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DrawableCapsule& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DrawableCapsule* internal_default_instance() {
    return reinterpret_cast<const DrawableCapsule*>(
               &_DrawableCapsule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(DrawableCapsule& a, DrawableCapsule& b) {
    a.Swap(&b);
  }
  inline void Swap(DrawableCapsule* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrawableCapsule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DrawableCapsule* New() const final {
    return CreateMaybeMessage<DrawableCapsule>(nullptr);
  }

  DrawableCapsule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DrawableCapsule>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DrawableCapsule& from);
  void MergeFrom(const DrawableCapsule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrawableCapsule* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.DrawableCapsule";
  }
  protected:
  explicit DrawableCapsule(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fworld_5fobject_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fworld_5fobject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDirectionFieldNumber = 1,
    kRadiusFieldNumber = 2,
  };
  // .bosdyn.api.Vec3 direction = 1;
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  const ::bosdyn::api::Vec3& direction() const;
  ::bosdyn::api::Vec3* release_direction();
  ::bosdyn::api::Vec3* mutable_direction();
  void set_allocated_direction(::bosdyn::api::Vec3* direction);
  private:
  const ::bosdyn::api::Vec3& _internal_direction() const;
  ::bosdyn::api::Vec3* _internal_mutable_direction();
  public:
  void unsafe_arena_set_allocated_direction(
      ::bosdyn::api::Vec3* direction);
  ::bosdyn::api::Vec3* unsafe_arena_release_direction();

  // double radius = 2;
  void clear_radius();
  double radius() const;
  void set_radius(double value);
  private:
  double _internal_radius() const;
  void _internal_set_radius(double value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.DrawableCapsule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::Vec3* direction_;
  double radius_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fworld_5fobject_2eproto;
};
// -------------------------------------------------------------------

class DrawableCylinder PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.DrawableCylinder) */ {
 public:
  inline DrawableCylinder() : DrawableCylinder(nullptr) {}
  virtual ~DrawableCylinder();

  DrawableCylinder(const DrawableCylinder& from);
  DrawableCylinder(DrawableCylinder&& from) noexcept
    : DrawableCylinder() {
    *this = ::std::move(from);
  }

  inline DrawableCylinder& operator=(const DrawableCylinder& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrawableCylinder& operator=(DrawableCylinder&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DrawableCylinder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DrawableCylinder* internal_default_instance() {
    return reinterpret_cast<const DrawableCylinder*>(
               &_DrawableCylinder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(DrawableCylinder& a, DrawableCylinder& b) {
    a.Swap(&b);
  }
  inline void Swap(DrawableCylinder* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrawableCylinder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DrawableCylinder* New() const final {
    return CreateMaybeMessage<DrawableCylinder>(nullptr);
  }

  DrawableCylinder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DrawableCylinder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DrawableCylinder& from);
  void MergeFrom(const DrawableCylinder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrawableCylinder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.DrawableCylinder";
  }
  protected:
  explicit DrawableCylinder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fworld_5fobject_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fworld_5fobject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDirectionFieldNumber = 1,
    kRadiusFieldNumber = 2,
  };
  // .bosdyn.api.Vec3 direction = 1;
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  const ::bosdyn::api::Vec3& direction() const;
  ::bosdyn::api::Vec3* release_direction();
  ::bosdyn::api::Vec3* mutable_direction();
  void set_allocated_direction(::bosdyn::api::Vec3* direction);
  private:
  const ::bosdyn::api::Vec3& _internal_direction() const;
  ::bosdyn::api::Vec3* _internal_mutable_direction();
  public:
  void unsafe_arena_set_allocated_direction(
      ::bosdyn::api::Vec3* direction);
  ::bosdyn::api::Vec3* unsafe_arena_release_direction();

  // double radius = 2;
  void clear_radius();
  double radius() const;
  void set_radius(double value);
  private:
  double _internal_radius() const;
  void _internal_set_radius(double value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.DrawableCylinder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::Vec3* direction_;
  double radius_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fworld_5fobject_2eproto;
};
// -------------------------------------------------------------------

class DrawableLineStrip PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.DrawableLineStrip) */ {
 public:
  inline DrawableLineStrip() : DrawableLineStrip(nullptr) {}
  virtual ~DrawableLineStrip();

  DrawableLineStrip(const DrawableLineStrip& from);
  DrawableLineStrip(DrawableLineStrip&& from) noexcept
    : DrawableLineStrip() {
    *this = ::std::move(from);
  }

  inline DrawableLineStrip& operator=(const DrawableLineStrip& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrawableLineStrip& operator=(DrawableLineStrip&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DrawableLineStrip& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DrawableLineStrip* internal_default_instance() {
    return reinterpret_cast<const DrawableLineStrip*>(
               &_DrawableLineStrip_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(DrawableLineStrip& a, DrawableLineStrip& b) {
    a.Swap(&b);
  }
  inline void Swap(DrawableLineStrip* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrawableLineStrip* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DrawableLineStrip* New() const final {
    return CreateMaybeMessage<DrawableLineStrip>(nullptr);
  }

  DrawableLineStrip* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DrawableLineStrip>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DrawableLineStrip& from);
  void MergeFrom(const DrawableLineStrip& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrawableLineStrip* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.DrawableLineStrip";
  }
  protected:
  explicit DrawableLineStrip(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fworld_5fobject_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fworld_5fobject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
  };
  // .bosdyn.api.Vec3 points = 1;
  bool has_points() const;
  private:
  bool _internal_has_points() const;
  public:
  void clear_points();
  const ::bosdyn::api::Vec3& points() const;
  ::bosdyn::api::Vec3* release_points();
  ::bosdyn::api::Vec3* mutable_points();
  void set_allocated_points(::bosdyn::api::Vec3* points);
  private:
  const ::bosdyn::api::Vec3& _internal_points() const;
  ::bosdyn::api::Vec3* _internal_mutable_points();
  public:
  void unsafe_arena_set_allocated_points(
      ::bosdyn::api::Vec3* points);
  ::bosdyn::api::Vec3* unsafe_arena_release_points();

  // @@protoc_insertion_point(class_scope:bosdyn.api.DrawableLineStrip)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::Vec3* points_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fworld_5fobject_2eproto;
};
// -------------------------------------------------------------------

class DrawablePoints PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.DrawablePoints) */ {
 public:
  inline DrawablePoints() : DrawablePoints(nullptr) {}
  virtual ~DrawablePoints();

  DrawablePoints(const DrawablePoints& from);
  DrawablePoints(DrawablePoints&& from) noexcept
    : DrawablePoints() {
    *this = ::std::move(from);
  }

  inline DrawablePoints& operator=(const DrawablePoints& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrawablePoints& operator=(DrawablePoints&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DrawablePoints& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DrawablePoints* internal_default_instance() {
    return reinterpret_cast<const DrawablePoints*>(
               &_DrawablePoints_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(DrawablePoints& a, DrawablePoints& b) {
    a.Swap(&b);
  }
  inline void Swap(DrawablePoints* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrawablePoints* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DrawablePoints* New() const final {
    return CreateMaybeMessage<DrawablePoints>(nullptr);
  }

  DrawablePoints* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DrawablePoints>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DrawablePoints& from);
  void MergeFrom(const DrawablePoints& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrawablePoints* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.DrawablePoints";
  }
  protected:
  explicit DrawablePoints(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fworld_5fobject_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fworld_5fobject_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 1,
  };
  // repeated .bosdyn.api.Vec3 points = 1;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::bosdyn::api::Vec3* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::Vec3 >*
      mutable_points();
  private:
  const ::bosdyn::api::Vec3& _internal_points(int index) const;
  ::bosdyn::api::Vec3* _internal_add_points();
  public:
  const ::bosdyn::api::Vec3& points(int index) const;
  ::bosdyn::api::Vec3* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::Vec3 >&
      points() const;

  // @@protoc_insertion_point(class_scope:bosdyn.api.DrawablePoints)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::Vec3 > points_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fworld_5fobject_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WorldObject

// int32 id = 1;
inline void WorldObject::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorldObject::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WorldObject::id() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.WorldObject.id)
  return _internal_id();
}
inline void WorldObject::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void WorldObject::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.WorldObject.id)
}

// string name = 2;
inline void WorldObject::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& WorldObject::name() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.WorldObject.name)
  return _internal_name();
}
inline void WorldObject::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.WorldObject.name)
}
inline std::string* WorldObject::mutable_name() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.WorldObject.name)
  return _internal_mutable_name();
}
inline const std::string& WorldObject::_internal_name() const {
  return name_.Get();
}
inline void WorldObject::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WorldObject::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.WorldObject.name)
}
inline void WorldObject::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.WorldObject.name)
}
inline void WorldObject::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.WorldObject.name)
}
inline std::string* WorldObject::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WorldObject::release_name() {
  // @@protoc_insertion_point(field_release:bosdyn.api.WorldObject.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WorldObject::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.WorldObject.name)
}

// .google.protobuf.Timestamp acquisition_time = 30;
inline bool WorldObject::_internal_has_acquisition_time() const {
  return this != internal_default_instance() && acquisition_time_ != nullptr;
}
inline bool WorldObject::has_acquisition_time() const {
  return _internal_has_acquisition_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& WorldObject::_internal_acquisition_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = acquisition_time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& WorldObject::acquisition_time() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.WorldObject.acquisition_time)
  return _internal_acquisition_time();
}
inline void WorldObject::unsafe_arena_set_allocated_acquisition_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* acquisition_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acquisition_time_);
  }
  acquisition_time_ = acquisition_time;
  if (acquisition_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.WorldObject.acquisition_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* WorldObject::release_acquisition_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = acquisition_time_;
  acquisition_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* WorldObject::unsafe_arena_release_acquisition_time() {
  // @@protoc_insertion_point(field_release:bosdyn.api.WorldObject.acquisition_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = acquisition_time_;
  acquisition_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* WorldObject::_internal_mutable_acquisition_time() {
  
  if (acquisition_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    acquisition_time_ = p;
  }
  return acquisition_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* WorldObject::mutable_acquisition_time() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.WorldObject.acquisition_time)
  return _internal_mutable_acquisition_time();
}
inline void WorldObject::set_allocated_acquisition_time(PROTOBUF_NAMESPACE_ID::Timestamp* acquisition_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(acquisition_time_);
  }
  if (acquisition_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acquisition_time)->GetArena();
    if (message_arena != submessage_arena) {
      acquisition_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acquisition_time, submessage_arena);
    }
    
  } else {
    
  }
  acquisition_time_ = acquisition_time;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.WorldObject.acquisition_time)
}

// .bosdyn.api.FrameTreeSnapshot transforms_snapshot = 31;
inline bool WorldObject::_internal_has_transforms_snapshot() const {
  return this != internal_default_instance() && transforms_snapshot_ != nullptr;
}
inline bool WorldObject::has_transforms_snapshot() const {
  return _internal_has_transforms_snapshot();
}
inline const ::bosdyn::api::FrameTreeSnapshot& WorldObject::_internal_transforms_snapshot() const {
  const ::bosdyn::api::FrameTreeSnapshot* p = transforms_snapshot_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::FrameTreeSnapshot*>(
      &::bosdyn::api::_FrameTreeSnapshot_default_instance_);
}
inline const ::bosdyn::api::FrameTreeSnapshot& WorldObject::transforms_snapshot() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.WorldObject.transforms_snapshot)
  return _internal_transforms_snapshot();
}
inline void WorldObject::unsafe_arena_set_allocated_transforms_snapshot(
    ::bosdyn::api::FrameTreeSnapshot* transforms_snapshot) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transforms_snapshot_);
  }
  transforms_snapshot_ = transforms_snapshot;
  if (transforms_snapshot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.WorldObject.transforms_snapshot)
}
inline ::bosdyn::api::FrameTreeSnapshot* WorldObject::release_transforms_snapshot() {
  
  ::bosdyn::api::FrameTreeSnapshot* temp = transforms_snapshot_;
  transforms_snapshot_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::FrameTreeSnapshot* WorldObject::unsafe_arena_release_transforms_snapshot() {
  // @@protoc_insertion_point(field_release:bosdyn.api.WorldObject.transforms_snapshot)
  
  ::bosdyn::api::FrameTreeSnapshot* temp = transforms_snapshot_;
  transforms_snapshot_ = nullptr;
  return temp;
}
inline ::bosdyn::api::FrameTreeSnapshot* WorldObject::_internal_mutable_transforms_snapshot() {
  
  if (transforms_snapshot_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::FrameTreeSnapshot>(GetArena());
    transforms_snapshot_ = p;
  }
  return transforms_snapshot_;
}
inline ::bosdyn::api::FrameTreeSnapshot* WorldObject::mutable_transforms_snapshot() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.WorldObject.transforms_snapshot)
  return _internal_mutable_transforms_snapshot();
}
inline void WorldObject::set_allocated_transforms_snapshot(::bosdyn::api::FrameTreeSnapshot* transforms_snapshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transforms_snapshot_);
  }
  if (transforms_snapshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transforms_snapshot)->GetArena();
    if (message_arena != submessage_arena) {
      transforms_snapshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transforms_snapshot, submessage_arena);
    }
    
  } else {
    
  }
  transforms_snapshot_ = transforms_snapshot;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.WorldObject.transforms_snapshot)
}

// repeated .bosdyn.api.DrawableProperties drawable_properties = 5;
inline int WorldObject::_internal_drawable_properties_size() const {
  return drawable_properties_.size();
}
inline int WorldObject::drawable_properties_size() const {
  return _internal_drawable_properties_size();
}
inline void WorldObject::clear_drawable_properties() {
  drawable_properties_.Clear();
}
inline ::bosdyn::api::DrawableProperties* WorldObject::mutable_drawable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.WorldObject.drawable_properties)
  return drawable_properties_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::DrawableProperties >*
WorldObject::mutable_drawable_properties() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.WorldObject.drawable_properties)
  return &drawable_properties_;
}
inline const ::bosdyn::api::DrawableProperties& WorldObject::_internal_drawable_properties(int index) const {
  return drawable_properties_.Get(index);
}
inline const ::bosdyn::api::DrawableProperties& WorldObject::drawable_properties(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.WorldObject.drawable_properties)
  return _internal_drawable_properties(index);
}
inline ::bosdyn::api::DrawableProperties* WorldObject::_internal_add_drawable_properties() {
  return drawable_properties_.Add();
}
inline ::bosdyn::api::DrawableProperties* WorldObject::add_drawable_properties() {
  // @@protoc_insertion_point(field_add:bosdyn.api.WorldObject.drawable_properties)
  return _internal_add_drawable_properties();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::DrawableProperties >&
WorldObject::drawable_properties() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.WorldObject.drawable_properties)
  return drawable_properties_;
}

// .bosdyn.api.AprilTagProperties apriltag_properties = 6;
inline bool WorldObject::_internal_has_apriltag_properties() const {
  return this != internal_default_instance() && apriltag_properties_ != nullptr;
}
inline bool WorldObject::has_apriltag_properties() const {
  return _internal_has_apriltag_properties();
}
inline void WorldObject::clear_apriltag_properties() {
  if (GetArena() == nullptr && apriltag_properties_ != nullptr) {
    delete apriltag_properties_;
  }
  apriltag_properties_ = nullptr;
}
inline const ::bosdyn::api::AprilTagProperties& WorldObject::_internal_apriltag_properties() const {
  const ::bosdyn::api::AprilTagProperties* p = apriltag_properties_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::AprilTagProperties*>(
      &::bosdyn::api::_AprilTagProperties_default_instance_);
}
inline const ::bosdyn::api::AprilTagProperties& WorldObject::apriltag_properties() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.WorldObject.apriltag_properties)
  return _internal_apriltag_properties();
}
inline void WorldObject::unsafe_arena_set_allocated_apriltag_properties(
    ::bosdyn::api::AprilTagProperties* apriltag_properties) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(apriltag_properties_);
  }
  apriltag_properties_ = apriltag_properties;
  if (apriltag_properties) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.WorldObject.apriltag_properties)
}
inline ::bosdyn::api::AprilTagProperties* WorldObject::release_apriltag_properties() {
  
  ::bosdyn::api::AprilTagProperties* temp = apriltag_properties_;
  apriltag_properties_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::AprilTagProperties* WorldObject::unsafe_arena_release_apriltag_properties() {
  // @@protoc_insertion_point(field_release:bosdyn.api.WorldObject.apriltag_properties)
  
  ::bosdyn::api::AprilTagProperties* temp = apriltag_properties_;
  apriltag_properties_ = nullptr;
  return temp;
}
inline ::bosdyn::api::AprilTagProperties* WorldObject::_internal_mutable_apriltag_properties() {
  
  if (apriltag_properties_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::AprilTagProperties>(GetArena());
    apriltag_properties_ = p;
  }
  return apriltag_properties_;
}
inline ::bosdyn::api::AprilTagProperties* WorldObject::mutable_apriltag_properties() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.WorldObject.apriltag_properties)
  return _internal_mutable_apriltag_properties();
}
inline void WorldObject::set_allocated_apriltag_properties(::bosdyn::api::AprilTagProperties* apriltag_properties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete apriltag_properties_;
  }
  if (apriltag_properties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(apriltag_properties);
    if (message_arena != submessage_arena) {
      apriltag_properties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, apriltag_properties, submessage_arena);
    }
    
  } else {
    
  }
  apriltag_properties_ = apriltag_properties;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.WorldObject.apriltag_properties)
}

// .bosdyn.api.ImageProperties image_properties = 9;
inline bool WorldObject::_internal_has_image_properties() const {
  return this != internal_default_instance() && image_properties_ != nullptr;
}
inline bool WorldObject::has_image_properties() const {
  return _internal_has_image_properties();
}
inline void WorldObject::clear_image_properties() {
  if (GetArena() == nullptr && image_properties_ != nullptr) {
    delete image_properties_;
  }
  image_properties_ = nullptr;
}
inline const ::bosdyn::api::ImageProperties& WorldObject::_internal_image_properties() const {
  const ::bosdyn::api::ImageProperties* p = image_properties_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::ImageProperties*>(
      &::bosdyn::api::_ImageProperties_default_instance_);
}
inline const ::bosdyn::api::ImageProperties& WorldObject::image_properties() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.WorldObject.image_properties)
  return _internal_image_properties();
}
inline void WorldObject::unsafe_arena_set_allocated_image_properties(
    ::bosdyn::api::ImageProperties* image_properties) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_properties_);
  }
  image_properties_ = image_properties;
  if (image_properties) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.WorldObject.image_properties)
}
inline ::bosdyn::api::ImageProperties* WorldObject::release_image_properties() {
  
  ::bosdyn::api::ImageProperties* temp = image_properties_;
  image_properties_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::ImageProperties* WorldObject::unsafe_arena_release_image_properties() {
  // @@protoc_insertion_point(field_release:bosdyn.api.WorldObject.image_properties)
  
  ::bosdyn::api::ImageProperties* temp = image_properties_;
  image_properties_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ImageProperties* WorldObject::_internal_mutable_image_properties() {
  
  if (image_properties_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ImageProperties>(GetArena());
    image_properties_ = p;
  }
  return image_properties_;
}
inline ::bosdyn::api::ImageProperties* WorldObject::mutable_image_properties() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.WorldObject.image_properties)
  return _internal_mutable_image_properties();
}
inline void WorldObject::set_allocated_image_properties(::bosdyn::api::ImageProperties* image_properties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete image_properties_;
  }
  if (image_properties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(image_properties);
    if (message_arena != submessage_arena) {
      image_properties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image_properties, submessage_arena);
    }
    
  } else {
    
  }
  image_properties_ = image_properties;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.WorldObject.image_properties)
}

// .google.protobuf.Any additional_properties = 100;
inline bool WorldObject::_internal_has_additional_properties() const {
  return this != internal_default_instance() && additional_properties_ != nullptr;
}
inline bool WorldObject::has_additional_properties() const {
  return _internal_has_additional_properties();
}
inline const PROTOBUF_NAMESPACE_ID::Any& WorldObject::_internal_additional_properties() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = additional_properties_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& WorldObject::additional_properties() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.WorldObject.additional_properties)
  return _internal_additional_properties();
}
inline void WorldObject::unsafe_arena_set_allocated_additional_properties(
    PROTOBUF_NAMESPACE_ID::Any* additional_properties) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(additional_properties_);
  }
  additional_properties_ = additional_properties;
  if (additional_properties) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.WorldObject.additional_properties)
}
inline PROTOBUF_NAMESPACE_ID::Any* WorldObject::release_additional_properties() {
  
  PROTOBUF_NAMESPACE_ID::Any* temp = additional_properties_;
  additional_properties_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* WorldObject::unsafe_arena_release_additional_properties() {
  // @@protoc_insertion_point(field_release:bosdyn.api.WorldObject.additional_properties)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = additional_properties_;
  additional_properties_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* WorldObject::_internal_mutable_additional_properties() {
  
  if (additional_properties_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArena());
    additional_properties_ = p;
  }
  return additional_properties_;
}
inline PROTOBUF_NAMESPACE_ID::Any* WorldObject::mutable_additional_properties() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.WorldObject.additional_properties)
  return _internal_mutable_additional_properties();
}
inline void WorldObject::set_allocated_additional_properties(PROTOBUF_NAMESPACE_ID::Any* additional_properties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(additional_properties_);
  }
  if (additional_properties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(additional_properties)->GetArena();
    if (message_arena != submessage_arena) {
      additional_properties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, additional_properties, submessage_arena);
    }
    
  } else {
    
  }
  additional_properties_ = additional_properties;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.WorldObject.additional_properties)
}

// -------------------------------------------------------------------

// ListWorldObjectRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool ListWorldObjectRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool ListWorldObjectRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& ListWorldObjectRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::RequestHeader*>(
      &::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& ListWorldObjectRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ListWorldObjectRequest.header)
  return _internal_header();
}
inline void ListWorldObjectRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ListWorldObjectRequest.header)
}
inline ::bosdyn::api::RequestHeader* ListWorldObjectRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::RequestHeader* ListWorldObjectRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ListWorldObjectRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* ListWorldObjectRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::RequestHeader* ListWorldObjectRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ListWorldObjectRequest.header)
  return _internal_mutable_header();
}
inline void ListWorldObjectRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ListWorldObjectRequest.header)
}

// repeated .bosdyn.api.WorldObjectType object_type = 2;
inline int ListWorldObjectRequest::_internal_object_type_size() const {
  return object_type_.size();
}
inline int ListWorldObjectRequest::object_type_size() const {
  return _internal_object_type_size();
}
inline void ListWorldObjectRequest::clear_object_type() {
  object_type_.Clear();
}
inline ::bosdyn::api::WorldObjectType ListWorldObjectRequest::_internal_object_type(int index) const {
  return static_cast< ::bosdyn::api::WorldObjectType >(object_type_.Get(index));
}
inline ::bosdyn::api::WorldObjectType ListWorldObjectRequest::object_type(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ListWorldObjectRequest.object_type)
  return _internal_object_type(index);
}
inline void ListWorldObjectRequest::set_object_type(int index, ::bosdyn::api::WorldObjectType value) {
  object_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:bosdyn.api.ListWorldObjectRequest.object_type)
}
inline void ListWorldObjectRequest::_internal_add_object_type(::bosdyn::api::WorldObjectType value) {
  object_type_.Add(value);
}
inline void ListWorldObjectRequest::add_object_type(::bosdyn::api::WorldObjectType value) {
  // @@protoc_insertion_point(field_add:bosdyn.api.ListWorldObjectRequest.object_type)
  _internal_add_object_type(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
ListWorldObjectRequest::object_type() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.ListWorldObjectRequest.object_type)
  return object_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ListWorldObjectRequest::_internal_mutable_object_type() {
  return &object_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ListWorldObjectRequest::mutable_object_type() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.ListWorldObjectRequest.object_type)
  return _internal_mutable_object_type();
}

// .google.protobuf.Timestamp timestamp_filter = 3;
inline bool ListWorldObjectRequest::_internal_has_timestamp_filter() const {
  return this != internal_default_instance() && timestamp_filter_ != nullptr;
}
inline bool ListWorldObjectRequest::has_timestamp_filter() const {
  return _internal_has_timestamp_filter();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ListWorldObjectRequest::_internal_timestamp_filter() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_filter_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ListWorldObjectRequest::timestamp_filter() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ListWorldObjectRequest.timestamp_filter)
  return _internal_timestamp_filter();
}
inline void ListWorldObjectRequest::unsafe_arena_set_allocated_timestamp_filter(
    PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_filter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_filter_);
  }
  timestamp_filter_ = timestamp_filter;
  if (timestamp_filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ListWorldObjectRequest.timestamp_filter)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ListWorldObjectRequest::release_timestamp_filter() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_filter_;
  timestamp_filter_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ListWorldObjectRequest::unsafe_arena_release_timestamp_filter() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ListWorldObjectRequest.timestamp_filter)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_filter_;
  timestamp_filter_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ListWorldObjectRequest::_internal_mutable_timestamp_filter() {
  
  if (timestamp_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    timestamp_filter_ = p;
  }
  return timestamp_filter_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ListWorldObjectRequest::mutable_timestamp_filter() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ListWorldObjectRequest.timestamp_filter)
  return _internal_mutable_timestamp_filter();
}
inline void ListWorldObjectRequest::set_allocated_timestamp_filter(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_filter_);
  }
  if (timestamp_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_filter)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp_filter, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_filter_ = timestamp_filter;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ListWorldObjectRequest.timestamp_filter)
}

// -------------------------------------------------------------------

// ListWorldObjectResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool ListWorldObjectResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool ListWorldObjectResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& ListWorldObjectResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::ResponseHeader*>(
      &::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& ListWorldObjectResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ListWorldObjectResponse.header)
  return _internal_header();
}
inline void ListWorldObjectResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ListWorldObjectResponse.header)
}
inline ::bosdyn::api::ResponseHeader* ListWorldObjectResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::ResponseHeader* ListWorldObjectResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ListWorldObjectResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* ListWorldObjectResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::ResponseHeader* ListWorldObjectResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ListWorldObjectResponse.header)
  return _internal_mutable_header();
}
inline void ListWorldObjectResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ListWorldObjectResponse.header)
}

// repeated .bosdyn.api.WorldObject world_objects = 2;
inline int ListWorldObjectResponse::_internal_world_objects_size() const {
  return world_objects_.size();
}
inline int ListWorldObjectResponse::world_objects_size() const {
  return _internal_world_objects_size();
}
inline void ListWorldObjectResponse::clear_world_objects() {
  world_objects_.Clear();
}
inline ::bosdyn::api::WorldObject* ListWorldObjectResponse::mutable_world_objects(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ListWorldObjectResponse.world_objects)
  return world_objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::WorldObject >*
ListWorldObjectResponse::mutable_world_objects() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.ListWorldObjectResponse.world_objects)
  return &world_objects_;
}
inline const ::bosdyn::api::WorldObject& ListWorldObjectResponse::_internal_world_objects(int index) const {
  return world_objects_.Get(index);
}
inline const ::bosdyn::api::WorldObject& ListWorldObjectResponse::world_objects(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ListWorldObjectResponse.world_objects)
  return _internal_world_objects(index);
}
inline ::bosdyn::api::WorldObject* ListWorldObjectResponse::_internal_add_world_objects() {
  return world_objects_.Add();
}
inline ::bosdyn::api::WorldObject* ListWorldObjectResponse::add_world_objects() {
  // @@protoc_insertion_point(field_add:bosdyn.api.ListWorldObjectResponse.world_objects)
  return _internal_add_world_objects();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::WorldObject >&
ListWorldObjectResponse::world_objects() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.ListWorldObjectResponse.world_objects)
  return world_objects_;
}

// -------------------------------------------------------------------

// MutateWorldObjectRequest_Mutation

// .bosdyn.api.MutateWorldObjectRequest.Action action = 1;
inline void MutateWorldObjectRequest_Mutation::clear_action() {
  action_ = 0;
}
inline ::bosdyn::api::MutateWorldObjectRequest_Action MutateWorldObjectRequest_Mutation::_internal_action() const {
  return static_cast< ::bosdyn::api::MutateWorldObjectRequest_Action >(action_);
}
inline ::bosdyn::api::MutateWorldObjectRequest_Action MutateWorldObjectRequest_Mutation::action() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.MutateWorldObjectRequest.Mutation.action)
  return _internal_action();
}
inline void MutateWorldObjectRequest_Mutation::_internal_set_action(::bosdyn::api::MutateWorldObjectRequest_Action value) {
  
  action_ = value;
}
inline void MutateWorldObjectRequest_Mutation::set_action(::bosdyn::api::MutateWorldObjectRequest_Action value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.MutateWorldObjectRequest.Mutation.action)
}

// .bosdyn.api.WorldObject object = 2;
inline bool MutateWorldObjectRequest_Mutation::_internal_has_object() const {
  return this != internal_default_instance() && object_ != nullptr;
}
inline bool MutateWorldObjectRequest_Mutation::has_object() const {
  return _internal_has_object();
}
inline void MutateWorldObjectRequest_Mutation::clear_object() {
  if (GetArena() == nullptr && object_ != nullptr) {
    delete object_;
  }
  object_ = nullptr;
}
inline const ::bosdyn::api::WorldObject& MutateWorldObjectRequest_Mutation::_internal_object() const {
  const ::bosdyn::api::WorldObject* p = object_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::WorldObject*>(
      &::bosdyn::api::_WorldObject_default_instance_);
}
inline const ::bosdyn::api::WorldObject& MutateWorldObjectRequest_Mutation::object() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.MutateWorldObjectRequest.Mutation.object)
  return _internal_object();
}
inline void MutateWorldObjectRequest_Mutation::unsafe_arena_set_allocated_object(
    ::bosdyn::api::WorldObject* object) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_);
  }
  object_ = object;
  if (object) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.MutateWorldObjectRequest.Mutation.object)
}
inline ::bosdyn::api::WorldObject* MutateWorldObjectRequest_Mutation::release_object() {
  
  ::bosdyn::api::WorldObject* temp = object_;
  object_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::WorldObject* MutateWorldObjectRequest_Mutation::unsafe_arena_release_object() {
  // @@protoc_insertion_point(field_release:bosdyn.api.MutateWorldObjectRequest.Mutation.object)
  
  ::bosdyn::api::WorldObject* temp = object_;
  object_ = nullptr;
  return temp;
}
inline ::bosdyn::api::WorldObject* MutateWorldObjectRequest_Mutation::_internal_mutable_object() {
  
  if (object_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::WorldObject>(GetArena());
    object_ = p;
  }
  return object_;
}
inline ::bosdyn::api::WorldObject* MutateWorldObjectRequest_Mutation::mutable_object() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.MutateWorldObjectRequest.Mutation.object)
  return _internal_mutable_object();
}
inline void MutateWorldObjectRequest_Mutation::set_allocated_object(::bosdyn::api::WorldObject* object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete object_;
  }
  if (object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(object);
    if (message_arena != submessage_arena) {
      object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object, submessage_arena);
    }
    
  } else {
    
  }
  object_ = object;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.MutateWorldObjectRequest.Mutation.object)
}

// -------------------------------------------------------------------

// MutateWorldObjectRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool MutateWorldObjectRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool MutateWorldObjectRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& MutateWorldObjectRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::RequestHeader*>(
      &::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& MutateWorldObjectRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.MutateWorldObjectRequest.header)
  return _internal_header();
}
inline void MutateWorldObjectRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.MutateWorldObjectRequest.header)
}
inline ::bosdyn::api::RequestHeader* MutateWorldObjectRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::RequestHeader* MutateWorldObjectRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.MutateWorldObjectRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* MutateWorldObjectRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::RequestHeader* MutateWorldObjectRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.MutateWorldObjectRequest.header)
  return _internal_mutable_header();
}
inline void MutateWorldObjectRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.MutateWorldObjectRequest.header)
}

// .bosdyn.api.MutateWorldObjectRequest.Mutation mutation = 2;
inline bool MutateWorldObjectRequest::_internal_has_mutation() const {
  return this != internal_default_instance() && mutation_ != nullptr;
}
inline bool MutateWorldObjectRequest::has_mutation() const {
  return _internal_has_mutation();
}
inline void MutateWorldObjectRequest::clear_mutation() {
  if (GetArena() == nullptr && mutation_ != nullptr) {
    delete mutation_;
  }
  mutation_ = nullptr;
}
inline const ::bosdyn::api::MutateWorldObjectRequest_Mutation& MutateWorldObjectRequest::_internal_mutation() const {
  const ::bosdyn::api::MutateWorldObjectRequest_Mutation* p = mutation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::MutateWorldObjectRequest_Mutation*>(
      &::bosdyn::api::_MutateWorldObjectRequest_Mutation_default_instance_);
}
inline const ::bosdyn::api::MutateWorldObjectRequest_Mutation& MutateWorldObjectRequest::mutation() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.MutateWorldObjectRequest.mutation)
  return _internal_mutation();
}
inline void MutateWorldObjectRequest::unsafe_arena_set_allocated_mutation(
    ::bosdyn::api::MutateWorldObjectRequest_Mutation* mutation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mutation_);
  }
  mutation_ = mutation;
  if (mutation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.MutateWorldObjectRequest.mutation)
}
inline ::bosdyn::api::MutateWorldObjectRequest_Mutation* MutateWorldObjectRequest::release_mutation() {
  
  ::bosdyn::api::MutateWorldObjectRequest_Mutation* temp = mutation_;
  mutation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::MutateWorldObjectRequest_Mutation* MutateWorldObjectRequest::unsafe_arena_release_mutation() {
  // @@protoc_insertion_point(field_release:bosdyn.api.MutateWorldObjectRequest.mutation)
  
  ::bosdyn::api::MutateWorldObjectRequest_Mutation* temp = mutation_;
  mutation_ = nullptr;
  return temp;
}
inline ::bosdyn::api::MutateWorldObjectRequest_Mutation* MutateWorldObjectRequest::_internal_mutable_mutation() {
  
  if (mutation_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::MutateWorldObjectRequest_Mutation>(GetArena());
    mutation_ = p;
  }
  return mutation_;
}
inline ::bosdyn::api::MutateWorldObjectRequest_Mutation* MutateWorldObjectRequest::mutable_mutation() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.MutateWorldObjectRequest.mutation)
  return _internal_mutable_mutation();
}
inline void MutateWorldObjectRequest::set_allocated_mutation(::bosdyn::api::MutateWorldObjectRequest_Mutation* mutation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mutation_;
  }
  if (mutation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mutation);
    if (message_arena != submessage_arena) {
      mutation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mutation, submessage_arena);
    }
    
  } else {
    
  }
  mutation_ = mutation;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.MutateWorldObjectRequest.mutation)
}

// -------------------------------------------------------------------

// MutateWorldObjectResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool MutateWorldObjectResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool MutateWorldObjectResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& MutateWorldObjectResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::ResponseHeader*>(
      &::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& MutateWorldObjectResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.MutateWorldObjectResponse.header)
  return _internal_header();
}
inline void MutateWorldObjectResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.MutateWorldObjectResponse.header)
}
inline ::bosdyn::api::ResponseHeader* MutateWorldObjectResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::ResponseHeader* MutateWorldObjectResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.MutateWorldObjectResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* MutateWorldObjectResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::ResponseHeader* MutateWorldObjectResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.MutateWorldObjectResponse.header)
  return _internal_mutable_header();
}
inline void MutateWorldObjectResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.MutateWorldObjectResponse.header)
}

// .bosdyn.api.MutateWorldObjectResponse.Status status = 2;
inline void MutateWorldObjectResponse::clear_status() {
  status_ = 0;
}
inline ::bosdyn::api::MutateWorldObjectResponse_Status MutateWorldObjectResponse::_internal_status() const {
  return static_cast< ::bosdyn::api::MutateWorldObjectResponse_Status >(status_);
}
inline ::bosdyn::api::MutateWorldObjectResponse_Status MutateWorldObjectResponse::status() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.MutateWorldObjectResponse.status)
  return _internal_status();
}
inline void MutateWorldObjectResponse::_internal_set_status(::bosdyn::api::MutateWorldObjectResponse_Status value) {
  
  status_ = value;
}
inline void MutateWorldObjectResponse::set_status(::bosdyn::api::MutateWorldObjectResponse_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.MutateWorldObjectResponse.status)
}

// int32 mutated_object_id = 4;
inline void MutateWorldObjectResponse::clear_mutated_object_id() {
  mutated_object_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MutateWorldObjectResponse::_internal_mutated_object_id() const {
  return mutated_object_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MutateWorldObjectResponse::mutated_object_id() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.MutateWorldObjectResponse.mutated_object_id)
  return _internal_mutated_object_id();
}
inline void MutateWorldObjectResponse::_internal_set_mutated_object_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mutated_object_id_ = value;
}
inline void MutateWorldObjectResponse::set_mutated_object_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mutated_object_id(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.MutateWorldObjectResponse.mutated_object_id)
}

// -------------------------------------------------------------------

// ImageProperties

// string camera_source = 1;
inline void ImageProperties::clear_camera_source() {
  camera_source_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ImageProperties::camera_source() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ImageProperties.camera_source)
  return _internal_camera_source();
}
inline void ImageProperties::set_camera_source(const std::string& value) {
  _internal_set_camera_source(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.ImageProperties.camera_source)
}
inline std::string* ImageProperties::mutable_camera_source() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ImageProperties.camera_source)
  return _internal_mutable_camera_source();
}
inline const std::string& ImageProperties::_internal_camera_source() const {
  return camera_source_.Get();
}
inline void ImageProperties::_internal_set_camera_source(const std::string& value) {
  
  camera_source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ImageProperties::set_camera_source(std::string&& value) {
  
  camera_source_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.ImageProperties.camera_source)
}
inline void ImageProperties::set_camera_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  camera_source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.ImageProperties.camera_source)
}
inline void ImageProperties::set_camera_source(const char* value,
    size_t size) {
  
  camera_source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.ImageProperties.camera_source)
}
inline std::string* ImageProperties::_internal_mutable_camera_source() {
  
  return camera_source_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ImageProperties::release_camera_source() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ImageProperties.camera_source)
  return camera_source_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImageProperties::set_allocated_camera_source(std::string* camera_source) {
  if (camera_source != nullptr) {
    
  } else {
    
  }
  camera_source_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), camera_source,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ImageProperties.camera_source)
}

// .bosdyn.api.Polygon coordinates = 2;
inline bool ImageProperties::_internal_has_coordinates() const {
  return this != internal_default_instance() && coordinates_ != nullptr;
}
inline bool ImageProperties::has_coordinates() const {
  return _internal_has_coordinates();
}
inline const ::bosdyn::api::Polygon& ImageProperties::_internal_coordinates() const {
  const ::bosdyn::api::Polygon* p = coordinates_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::Polygon*>(
      &::bosdyn::api::_Polygon_default_instance_);
}
inline const ::bosdyn::api::Polygon& ImageProperties::coordinates() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ImageProperties.coordinates)
  return _internal_coordinates();
}
inline void ImageProperties::unsafe_arena_set_allocated_coordinates(
    ::bosdyn::api::Polygon* coordinates) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coordinates_);
  }
  coordinates_ = coordinates;
  if (coordinates) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.ImageProperties.coordinates)
}
inline ::bosdyn::api::Polygon* ImageProperties::release_coordinates() {
  
  ::bosdyn::api::Polygon* temp = coordinates_;
  coordinates_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::Polygon* ImageProperties::unsafe_arena_release_coordinates() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ImageProperties.coordinates)
  
  ::bosdyn::api::Polygon* temp = coordinates_;
  coordinates_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Polygon* ImageProperties::_internal_mutable_coordinates() {
  
  if (coordinates_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Polygon>(GetArena());
    coordinates_ = p;
  }
  return coordinates_;
}
inline ::bosdyn::api::Polygon* ImageProperties::mutable_coordinates() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ImageProperties.coordinates)
  return _internal_mutable_coordinates();
}
inline void ImageProperties::set_allocated_coordinates(::bosdyn::api::Polygon* coordinates) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(coordinates_);
  }
  if (coordinates) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coordinates)->GetArena();
    if (message_arena != submessage_arena) {
      coordinates = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coordinates, submessage_arena);
    }
    
  } else {
    
  }
  coordinates_ = coordinates;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ImageProperties.coordinates)
}

// string frame_name_image_coordinates = 3;
inline void ImageProperties::clear_frame_name_image_coordinates() {
  frame_name_image_coordinates_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ImageProperties::frame_name_image_coordinates() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.ImageProperties.frame_name_image_coordinates)
  return _internal_frame_name_image_coordinates();
}
inline void ImageProperties::set_frame_name_image_coordinates(const std::string& value) {
  _internal_set_frame_name_image_coordinates(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.ImageProperties.frame_name_image_coordinates)
}
inline std::string* ImageProperties::mutable_frame_name_image_coordinates() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.ImageProperties.frame_name_image_coordinates)
  return _internal_mutable_frame_name_image_coordinates();
}
inline const std::string& ImageProperties::_internal_frame_name_image_coordinates() const {
  return frame_name_image_coordinates_.Get();
}
inline void ImageProperties::_internal_set_frame_name_image_coordinates(const std::string& value) {
  
  frame_name_image_coordinates_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ImageProperties::set_frame_name_image_coordinates(std::string&& value) {
  
  frame_name_image_coordinates_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.ImageProperties.frame_name_image_coordinates)
}
inline void ImageProperties::set_frame_name_image_coordinates(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  frame_name_image_coordinates_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.ImageProperties.frame_name_image_coordinates)
}
inline void ImageProperties::set_frame_name_image_coordinates(const char* value,
    size_t size) {
  
  frame_name_image_coordinates_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.ImageProperties.frame_name_image_coordinates)
}
inline std::string* ImageProperties::_internal_mutable_frame_name_image_coordinates() {
  
  return frame_name_image_coordinates_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ImageProperties::release_frame_name_image_coordinates() {
  // @@protoc_insertion_point(field_release:bosdyn.api.ImageProperties.frame_name_image_coordinates)
  return frame_name_image_coordinates_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ImageProperties::set_allocated_frame_name_image_coordinates(std::string* frame_name_image_coordinates) {
  if (frame_name_image_coordinates != nullptr) {
    
  } else {
    
  }
  frame_name_image_coordinates_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), frame_name_image_coordinates,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.ImageProperties.frame_name_image_coordinates)
}

// -------------------------------------------------------------------

// AprilTagProperties

// int32 tag_id = 1;
inline void AprilTagProperties::clear_tag_id() {
  tag_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AprilTagProperties::_internal_tag_id() const {
  return tag_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AprilTagProperties::tag_id() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.AprilTagProperties.tag_id)
  return _internal_tag_id();
}
inline void AprilTagProperties::_internal_set_tag_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tag_id_ = value;
}
inline void AprilTagProperties::set_tag_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tag_id(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.AprilTagProperties.tag_id)
}

// .bosdyn.api.Vec2 dimensions = 2;
inline bool AprilTagProperties::_internal_has_dimensions() const {
  return this != internal_default_instance() && dimensions_ != nullptr;
}
inline bool AprilTagProperties::has_dimensions() const {
  return _internal_has_dimensions();
}
inline const ::bosdyn::api::Vec2& AprilTagProperties::_internal_dimensions() const {
  const ::bosdyn::api::Vec2* p = dimensions_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::Vec2*>(
      &::bosdyn::api::_Vec2_default_instance_);
}
inline const ::bosdyn::api::Vec2& AprilTagProperties::dimensions() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.AprilTagProperties.dimensions)
  return _internal_dimensions();
}
inline void AprilTagProperties::unsafe_arena_set_allocated_dimensions(
    ::bosdyn::api::Vec2* dimensions) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dimensions_);
  }
  dimensions_ = dimensions;
  if (dimensions) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.AprilTagProperties.dimensions)
}
inline ::bosdyn::api::Vec2* AprilTagProperties::release_dimensions() {
  
  ::bosdyn::api::Vec2* temp = dimensions_;
  dimensions_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::Vec2* AprilTagProperties::unsafe_arena_release_dimensions() {
  // @@protoc_insertion_point(field_release:bosdyn.api.AprilTagProperties.dimensions)
  
  ::bosdyn::api::Vec2* temp = dimensions_;
  dimensions_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Vec2* AprilTagProperties::_internal_mutable_dimensions() {
  
  if (dimensions_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Vec2>(GetArena());
    dimensions_ = p;
  }
  return dimensions_;
}
inline ::bosdyn::api::Vec2* AprilTagProperties::mutable_dimensions() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.AprilTagProperties.dimensions)
  return _internal_mutable_dimensions();
}
inline void AprilTagProperties::set_allocated_dimensions(::bosdyn::api::Vec2* dimensions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dimensions_);
  }
  if (dimensions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dimensions)->GetArena();
    if (message_arena != submessage_arena) {
      dimensions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dimensions, submessage_arena);
    }
    
  } else {
    
  }
  dimensions_ = dimensions;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.AprilTagProperties.dimensions)
}

// string frame_name_fiducial = 3;
inline void AprilTagProperties::clear_frame_name_fiducial() {
  frame_name_fiducial_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AprilTagProperties::frame_name_fiducial() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.AprilTagProperties.frame_name_fiducial)
  return _internal_frame_name_fiducial();
}
inline void AprilTagProperties::set_frame_name_fiducial(const std::string& value) {
  _internal_set_frame_name_fiducial(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.AprilTagProperties.frame_name_fiducial)
}
inline std::string* AprilTagProperties::mutable_frame_name_fiducial() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.AprilTagProperties.frame_name_fiducial)
  return _internal_mutable_frame_name_fiducial();
}
inline const std::string& AprilTagProperties::_internal_frame_name_fiducial() const {
  return frame_name_fiducial_.Get();
}
inline void AprilTagProperties::_internal_set_frame_name_fiducial(const std::string& value) {
  
  frame_name_fiducial_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AprilTagProperties::set_frame_name_fiducial(std::string&& value) {
  
  frame_name_fiducial_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.AprilTagProperties.frame_name_fiducial)
}
inline void AprilTagProperties::set_frame_name_fiducial(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  frame_name_fiducial_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.AprilTagProperties.frame_name_fiducial)
}
inline void AprilTagProperties::set_frame_name_fiducial(const char* value,
    size_t size) {
  
  frame_name_fiducial_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.AprilTagProperties.frame_name_fiducial)
}
inline std::string* AprilTagProperties::_internal_mutable_frame_name_fiducial() {
  
  return frame_name_fiducial_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AprilTagProperties::release_frame_name_fiducial() {
  // @@protoc_insertion_point(field_release:bosdyn.api.AprilTagProperties.frame_name_fiducial)
  return frame_name_fiducial_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AprilTagProperties::set_allocated_frame_name_fiducial(std::string* frame_name_fiducial) {
  if (frame_name_fiducial != nullptr) {
    
  } else {
    
  }
  frame_name_fiducial_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), frame_name_fiducial,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.AprilTagProperties.frame_name_fiducial)
}

// string frame_name_fiducial_filtered = 4;
inline void AprilTagProperties::clear_frame_name_fiducial_filtered() {
  frame_name_fiducial_filtered_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AprilTagProperties::frame_name_fiducial_filtered() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.AprilTagProperties.frame_name_fiducial_filtered)
  return _internal_frame_name_fiducial_filtered();
}
inline void AprilTagProperties::set_frame_name_fiducial_filtered(const std::string& value) {
  _internal_set_frame_name_fiducial_filtered(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.AprilTagProperties.frame_name_fiducial_filtered)
}
inline std::string* AprilTagProperties::mutable_frame_name_fiducial_filtered() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.AprilTagProperties.frame_name_fiducial_filtered)
  return _internal_mutable_frame_name_fiducial_filtered();
}
inline const std::string& AprilTagProperties::_internal_frame_name_fiducial_filtered() const {
  return frame_name_fiducial_filtered_.Get();
}
inline void AprilTagProperties::_internal_set_frame_name_fiducial_filtered(const std::string& value) {
  
  frame_name_fiducial_filtered_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AprilTagProperties::set_frame_name_fiducial_filtered(std::string&& value) {
  
  frame_name_fiducial_filtered_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.AprilTagProperties.frame_name_fiducial_filtered)
}
inline void AprilTagProperties::set_frame_name_fiducial_filtered(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  frame_name_fiducial_filtered_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.AprilTagProperties.frame_name_fiducial_filtered)
}
inline void AprilTagProperties::set_frame_name_fiducial_filtered(const char* value,
    size_t size) {
  
  frame_name_fiducial_filtered_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.AprilTagProperties.frame_name_fiducial_filtered)
}
inline std::string* AprilTagProperties::_internal_mutable_frame_name_fiducial_filtered() {
  
  return frame_name_fiducial_filtered_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AprilTagProperties::release_frame_name_fiducial_filtered() {
  // @@protoc_insertion_point(field_release:bosdyn.api.AprilTagProperties.frame_name_fiducial_filtered)
  return frame_name_fiducial_filtered_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AprilTagProperties::set_allocated_frame_name_fiducial_filtered(std::string* frame_name_fiducial_filtered) {
  if (frame_name_fiducial_filtered != nullptr) {
    
  } else {
    
  }
  frame_name_fiducial_filtered_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), frame_name_fiducial_filtered,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.AprilTagProperties.frame_name_fiducial_filtered)
}

// -------------------------------------------------------------------

// DrawableProperties_Color

// int32 r = 1;
inline void DrawableProperties_Color::clear_r() {
  r_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DrawableProperties_Color::_internal_r() const {
  return r_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DrawableProperties_Color::r() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.DrawableProperties.Color.r)
  return _internal_r();
}
inline void DrawableProperties_Color::_internal_set_r(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  r_ = value;
}
inline void DrawableProperties_Color::set_r(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_r(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.DrawableProperties.Color.r)
}

// int32 g = 2;
inline void DrawableProperties_Color::clear_g() {
  g_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DrawableProperties_Color::_internal_g() const {
  return g_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DrawableProperties_Color::g() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.DrawableProperties.Color.g)
  return _internal_g();
}
inline void DrawableProperties_Color::_internal_set_g(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  g_ = value;
}
inline void DrawableProperties_Color::set_g(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_g(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.DrawableProperties.Color.g)
}

// int32 b = 3;
inline void DrawableProperties_Color::clear_b() {
  b_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DrawableProperties_Color::_internal_b() const {
  return b_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DrawableProperties_Color::b() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.DrawableProperties.Color.b)
  return _internal_b();
}
inline void DrawableProperties_Color::_internal_set_b(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  b_ = value;
}
inline void DrawableProperties_Color::set_b(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.DrawableProperties.Color.b)
}

// double a = 4;
inline void DrawableProperties_Color::clear_a() {
  a_ = 0;
}
inline double DrawableProperties_Color::_internal_a() const {
  return a_;
}
inline double DrawableProperties_Color::a() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.DrawableProperties.Color.a)
  return _internal_a();
}
inline void DrawableProperties_Color::_internal_set_a(double value) {
  
  a_ = value;
}
inline void DrawableProperties_Color::set_a(double value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.DrawableProperties.Color.a)
}

// -------------------------------------------------------------------

// DrawableProperties

// .bosdyn.api.DrawableProperties.Color color = 1;
inline bool DrawableProperties::_internal_has_color() const {
  return this != internal_default_instance() && color_ != nullptr;
}
inline bool DrawableProperties::has_color() const {
  return _internal_has_color();
}
inline void DrawableProperties::clear_color() {
  if (GetArena() == nullptr && color_ != nullptr) {
    delete color_;
  }
  color_ = nullptr;
}
inline const ::bosdyn::api::DrawableProperties_Color& DrawableProperties::_internal_color() const {
  const ::bosdyn::api::DrawableProperties_Color* p = color_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::DrawableProperties_Color*>(
      &::bosdyn::api::_DrawableProperties_Color_default_instance_);
}
inline const ::bosdyn::api::DrawableProperties_Color& DrawableProperties::color() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.DrawableProperties.color)
  return _internal_color();
}
inline void DrawableProperties::unsafe_arena_set_allocated_color(
    ::bosdyn::api::DrawableProperties_Color* color) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_);
  }
  color_ = color;
  if (color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.DrawableProperties.color)
}
inline ::bosdyn::api::DrawableProperties_Color* DrawableProperties::release_color() {
  
  ::bosdyn::api::DrawableProperties_Color* temp = color_;
  color_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::DrawableProperties_Color* DrawableProperties::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_release:bosdyn.api.DrawableProperties.color)
  
  ::bosdyn::api::DrawableProperties_Color* temp = color_;
  color_ = nullptr;
  return temp;
}
inline ::bosdyn::api::DrawableProperties_Color* DrawableProperties::_internal_mutable_color() {
  
  if (color_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::DrawableProperties_Color>(GetArena());
    color_ = p;
  }
  return color_;
}
inline ::bosdyn::api::DrawableProperties_Color* DrawableProperties::mutable_color() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.DrawableProperties.color)
  return _internal_mutable_color();
}
inline void DrawableProperties::set_allocated_color(::bosdyn::api::DrawableProperties_Color* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete color_;
  }
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(color);
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    
  } else {
    
  }
  color_ = color;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.DrawableProperties.color)
}

// string label = 2;
inline void DrawableProperties::clear_label() {
  label_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DrawableProperties::label() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.DrawableProperties.label)
  return _internal_label();
}
inline void DrawableProperties::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.DrawableProperties.label)
}
inline std::string* DrawableProperties::mutable_label() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.DrawableProperties.label)
  return _internal_mutable_label();
}
inline const std::string& DrawableProperties::_internal_label() const {
  return label_.Get();
}
inline void DrawableProperties::_internal_set_label(const std::string& value) {
  
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DrawableProperties::set_label(std::string&& value) {
  
  label_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.DrawableProperties.label)
}
inline void DrawableProperties::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.DrawableProperties.label)
}
inline void DrawableProperties::set_label(const char* value,
    size_t size) {
  
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.DrawableProperties.label)
}
inline std::string* DrawableProperties::_internal_mutable_label() {
  
  return label_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DrawableProperties::release_label() {
  // @@protoc_insertion_point(field_release:bosdyn.api.DrawableProperties.label)
  return label_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DrawableProperties::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.DrawableProperties.label)
}

// bool wireframe = 3;
inline void DrawableProperties::clear_wireframe() {
  wireframe_ = false;
}
inline bool DrawableProperties::_internal_wireframe() const {
  return wireframe_;
}
inline bool DrawableProperties::wireframe() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.DrawableProperties.wireframe)
  return _internal_wireframe();
}
inline void DrawableProperties::_internal_set_wireframe(bool value) {
  
  wireframe_ = value;
}
inline void DrawableProperties::set_wireframe(bool value) {
  _internal_set_wireframe(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.DrawableProperties.wireframe)
}

// .bosdyn.api.DrawableFrame frame = 4;
inline bool DrawableProperties::_internal_has_frame() const {
  return drawable_case() == kFrame;
}
inline bool DrawableProperties::has_frame() const {
  return _internal_has_frame();
}
inline void DrawableProperties::set_has_frame() {
  _oneof_case_[0] = kFrame;
}
inline void DrawableProperties::clear_frame() {
  if (_internal_has_frame()) {
    if (GetArena() == nullptr) {
      delete drawable_.frame_;
    }
    clear_has_drawable();
  }
}
inline ::bosdyn::api::DrawableFrame* DrawableProperties::release_frame() {
  // @@protoc_insertion_point(field_release:bosdyn.api.DrawableProperties.frame)
  if (_internal_has_frame()) {
    clear_has_drawable();
      ::bosdyn::api::DrawableFrame* temp = drawable_.frame_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    drawable_.frame_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::DrawableFrame& DrawableProperties::_internal_frame() const {
  return _internal_has_frame()
      ? *drawable_.frame_
      : *reinterpret_cast< ::bosdyn::api::DrawableFrame*>(&::bosdyn::api::_DrawableFrame_default_instance_);
}
inline const ::bosdyn::api::DrawableFrame& DrawableProperties::frame() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.DrawableProperties.frame)
  return _internal_frame();
}
inline ::bosdyn::api::DrawableFrame* DrawableProperties::unsafe_arena_release_frame() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.DrawableProperties.frame)
  if (_internal_has_frame()) {
    clear_has_drawable();
    ::bosdyn::api::DrawableFrame* temp = drawable_.frame_;
    drawable_.frame_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DrawableProperties::unsafe_arena_set_allocated_frame(::bosdyn::api::DrawableFrame* frame) {
  clear_drawable();
  if (frame) {
    set_has_frame();
    drawable_.frame_ = frame;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.DrawableProperties.frame)
}
inline ::bosdyn::api::DrawableFrame* DrawableProperties::_internal_mutable_frame() {
  if (!_internal_has_frame()) {
    clear_drawable();
    set_has_frame();
    drawable_.frame_ = CreateMaybeMessage< ::bosdyn::api::DrawableFrame >(GetArena());
  }
  return drawable_.frame_;
}
inline ::bosdyn::api::DrawableFrame* DrawableProperties::mutable_frame() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.DrawableProperties.frame)
  return _internal_mutable_frame();
}

// .bosdyn.api.DrawableSphere sphere = 5;
inline bool DrawableProperties::_internal_has_sphere() const {
  return drawable_case() == kSphere;
}
inline bool DrawableProperties::has_sphere() const {
  return _internal_has_sphere();
}
inline void DrawableProperties::set_has_sphere() {
  _oneof_case_[0] = kSphere;
}
inline void DrawableProperties::clear_sphere() {
  if (_internal_has_sphere()) {
    if (GetArena() == nullptr) {
      delete drawable_.sphere_;
    }
    clear_has_drawable();
  }
}
inline ::bosdyn::api::DrawableSphere* DrawableProperties::release_sphere() {
  // @@protoc_insertion_point(field_release:bosdyn.api.DrawableProperties.sphere)
  if (_internal_has_sphere()) {
    clear_has_drawable();
      ::bosdyn::api::DrawableSphere* temp = drawable_.sphere_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    drawable_.sphere_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::DrawableSphere& DrawableProperties::_internal_sphere() const {
  return _internal_has_sphere()
      ? *drawable_.sphere_
      : *reinterpret_cast< ::bosdyn::api::DrawableSphere*>(&::bosdyn::api::_DrawableSphere_default_instance_);
}
inline const ::bosdyn::api::DrawableSphere& DrawableProperties::sphere() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.DrawableProperties.sphere)
  return _internal_sphere();
}
inline ::bosdyn::api::DrawableSphere* DrawableProperties::unsafe_arena_release_sphere() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.DrawableProperties.sphere)
  if (_internal_has_sphere()) {
    clear_has_drawable();
    ::bosdyn::api::DrawableSphere* temp = drawable_.sphere_;
    drawable_.sphere_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DrawableProperties::unsafe_arena_set_allocated_sphere(::bosdyn::api::DrawableSphere* sphere) {
  clear_drawable();
  if (sphere) {
    set_has_sphere();
    drawable_.sphere_ = sphere;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.DrawableProperties.sphere)
}
inline ::bosdyn::api::DrawableSphere* DrawableProperties::_internal_mutable_sphere() {
  if (!_internal_has_sphere()) {
    clear_drawable();
    set_has_sphere();
    drawable_.sphere_ = CreateMaybeMessage< ::bosdyn::api::DrawableSphere >(GetArena());
  }
  return drawable_.sphere_;
}
inline ::bosdyn::api::DrawableSphere* DrawableProperties::mutable_sphere() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.DrawableProperties.sphere)
  return _internal_mutable_sphere();
}

// .bosdyn.api.DrawableBox box = 6;
inline bool DrawableProperties::_internal_has_box() const {
  return drawable_case() == kBox;
}
inline bool DrawableProperties::has_box() const {
  return _internal_has_box();
}
inline void DrawableProperties::set_has_box() {
  _oneof_case_[0] = kBox;
}
inline void DrawableProperties::clear_box() {
  if (_internal_has_box()) {
    if (GetArena() == nullptr) {
      delete drawable_.box_;
    }
    clear_has_drawable();
  }
}
inline ::bosdyn::api::DrawableBox* DrawableProperties::release_box() {
  // @@protoc_insertion_point(field_release:bosdyn.api.DrawableProperties.box)
  if (_internal_has_box()) {
    clear_has_drawable();
      ::bosdyn::api::DrawableBox* temp = drawable_.box_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    drawable_.box_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::DrawableBox& DrawableProperties::_internal_box() const {
  return _internal_has_box()
      ? *drawable_.box_
      : *reinterpret_cast< ::bosdyn::api::DrawableBox*>(&::bosdyn::api::_DrawableBox_default_instance_);
}
inline const ::bosdyn::api::DrawableBox& DrawableProperties::box() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.DrawableProperties.box)
  return _internal_box();
}
inline ::bosdyn::api::DrawableBox* DrawableProperties::unsafe_arena_release_box() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.DrawableProperties.box)
  if (_internal_has_box()) {
    clear_has_drawable();
    ::bosdyn::api::DrawableBox* temp = drawable_.box_;
    drawable_.box_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DrawableProperties::unsafe_arena_set_allocated_box(::bosdyn::api::DrawableBox* box) {
  clear_drawable();
  if (box) {
    set_has_box();
    drawable_.box_ = box;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.DrawableProperties.box)
}
inline ::bosdyn::api::DrawableBox* DrawableProperties::_internal_mutable_box() {
  if (!_internal_has_box()) {
    clear_drawable();
    set_has_box();
    drawable_.box_ = CreateMaybeMessage< ::bosdyn::api::DrawableBox >(GetArena());
  }
  return drawable_.box_;
}
inline ::bosdyn::api::DrawableBox* DrawableProperties::mutable_box() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.DrawableProperties.box)
  return _internal_mutable_box();
}

// .bosdyn.api.DrawableArrow arrow = 7;
inline bool DrawableProperties::_internal_has_arrow() const {
  return drawable_case() == kArrow;
}
inline bool DrawableProperties::has_arrow() const {
  return _internal_has_arrow();
}
inline void DrawableProperties::set_has_arrow() {
  _oneof_case_[0] = kArrow;
}
inline void DrawableProperties::clear_arrow() {
  if (_internal_has_arrow()) {
    if (GetArena() == nullptr) {
      delete drawable_.arrow_;
    }
    clear_has_drawable();
  }
}
inline ::bosdyn::api::DrawableArrow* DrawableProperties::release_arrow() {
  // @@protoc_insertion_point(field_release:bosdyn.api.DrawableProperties.arrow)
  if (_internal_has_arrow()) {
    clear_has_drawable();
      ::bosdyn::api::DrawableArrow* temp = drawable_.arrow_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    drawable_.arrow_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::DrawableArrow& DrawableProperties::_internal_arrow() const {
  return _internal_has_arrow()
      ? *drawable_.arrow_
      : *reinterpret_cast< ::bosdyn::api::DrawableArrow*>(&::bosdyn::api::_DrawableArrow_default_instance_);
}
inline const ::bosdyn::api::DrawableArrow& DrawableProperties::arrow() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.DrawableProperties.arrow)
  return _internal_arrow();
}
inline ::bosdyn::api::DrawableArrow* DrawableProperties::unsafe_arena_release_arrow() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.DrawableProperties.arrow)
  if (_internal_has_arrow()) {
    clear_has_drawable();
    ::bosdyn::api::DrawableArrow* temp = drawable_.arrow_;
    drawable_.arrow_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DrawableProperties::unsafe_arena_set_allocated_arrow(::bosdyn::api::DrawableArrow* arrow) {
  clear_drawable();
  if (arrow) {
    set_has_arrow();
    drawable_.arrow_ = arrow;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.DrawableProperties.arrow)
}
inline ::bosdyn::api::DrawableArrow* DrawableProperties::_internal_mutable_arrow() {
  if (!_internal_has_arrow()) {
    clear_drawable();
    set_has_arrow();
    drawable_.arrow_ = CreateMaybeMessage< ::bosdyn::api::DrawableArrow >(GetArena());
  }
  return drawable_.arrow_;
}
inline ::bosdyn::api::DrawableArrow* DrawableProperties::mutable_arrow() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.DrawableProperties.arrow)
  return _internal_mutable_arrow();
}

// .bosdyn.api.DrawableCapsule capsule = 8;
inline bool DrawableProperties::_internal_has_capsule() const {
  return drawable_case() == kCapsule;
}
inline bool DrawableProperties::has_capsule() const {
  return _internal_has_capsule();
}
inline void DrawableProperties::set_has_capsule() {
  _oneof_case_[0] = kCapsule;
}
inline void DrawableProperties::clear_capsule() {
  if (_internal_has_capsule()) {
    if (GetArena() == nullptr) {
      delete drawable_.capsule_;
    }
    clear_has_drawable();
  }
}
inline ::bosdyn::api::DrawableCapsule* DrawableProperties::release_capsule() {
  // @@protoc_insertion_point(field_release:bosdyn.api.DrawableProperties.capsule)
  if (_internal_has_capsule()) {
    clear_has_drawable();
      ::bosdyn::api::DrawableCapsule* temp = drawable_.capsule_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    drawable_.capsule_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::DrawableCapsule& DrawableProperties::_internal_capsule() const {
  return _internal_has_capsule()
      ? *drawable_.capsule_
      : *reinterpret_cast< ::bosdyn::api::DrawableCapsule*>(&::bosdyn::api::_DrawableCapsule_default_instance_);
}
inline const ::bosdyn::api::DrawableCapsule& DrawableProperties::capsule() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.DrawableProperties.capsule)
  return _internal_capsule();
}
inline ::bosdyn::api::DrawableCapsule* DrawableProperties::unsafe_arena_release_capsule() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.DrawableProperties.capsule)
  if (_internal_has_capsule()) {
    clear_has_drawable();
    ::bosdyn::api::DrawableCapsule* temp = drawable_.capsule_;
    drawable_.capsule_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DrawableProperties::unsafe_arena_set_allocated_capsule(::bosdyn::api::DrawableCapsule* capsule) {
  clear_drawable();
  if (capsule) {
    set_has_capsule();
    drawable_.capsule_ = capsule;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.DrawableProperties.capsule)
}
inline ::bosdyn::api::DrawableCapsule* DrawableProperties::_internal_mutable_capsule() {
  if (!_internal_has_capsule()) {
    clear_drawable();
    set_has_capsule();
    drawable_.capsule_ = CreateMaybeMessage< ::bosdyn::api::DrawableCapsule >(GetArena());
  }
  return drawable_.capsule_;
}
inline ::bosdyn::api::DrawableCapsule* DrawableProperties::mutable_capsule() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.DrawableProperties.capsule)
  return _internal_mutable_capsule();
}

// .bosdyn.api.DrawableCylinder cylinder = 9;
inline bool DrawableProperties::_internal_has_cylinder() const {
  return drawable_case() == kCylinder;
}
inline bool DrawableProperties::has_cylinder() const {
  return _internal_has_cylinder();
}
inline void DrawableProperties::set_has_cylinder() {
  _oneof_case_[0] = kCylinder;
}
inline void DrawableProperties::clear_cylinder() {
  if (_internal_has_cylinder()) {
    if (GetArena() == nullptr) {
      delete drawable_.cylinder_;
    }
    clear_has_drawable();
  }
}
inline ::bosdyn::api::DrawableCylinder* DrawableProperties::release_cylinder() {
  // @@protoc_insertion_point(field_release:bosdyn.api.DrawableProperties.cylinder)
  if (_internal_has_cylinder()) {
    clear_has_drawable();
      ::bosdyn::api::DrawableCylinder* temp = drawable_.cylinder_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    drawable_.cylinder_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::DrawableCylinder& DrawableProperties::_internal_cylinder() const {
  return _internal_has_cylinder()
      ? *drawable_.cylinder_
      : *reinterpret_cast< ::bosdyn::api::DrawableCylinder*>(&::bosdyn::api::_DrawableCylinder_default_instance_);
}
inline const ::bosdyn::api::DrawableCylinder& DrawableProperties::cylinder() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.DrawableProperties.cylinder)
  return _internal_cylinder();
}
inline ::bosdyn::api::DrawableCylinder* DrawableProperties::unsafe_arena_release_cylinder() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.DrawableProperties.cylinder)
  if (_internal_has_cylinder()) {
    clear_has_drawable();
    ::bosdyn::api::DrawableCylinder* temp = drawable_.cylinder_;
    drawable_.cylinder_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DrawableProperties::unsafe_arena_set_allocated_cylinder(::bosdyn::api::DrawableCylinder* cylinder) {
  clear_drawable();
  if (cylinder) {
    set_has_cylinder();
    drawable_.cylinder_ = cylinder;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.DrawableProperties.cylinder)
}
inline ::bosdyn::api::DrawableCylinder* DrawableProperties::_internal_mutable_cylinder() {
  if (!_internal_has_cylinder()) {
    clear_drawable();
    set_has_cylinder();
    drawable_.cylinder_ = CreateMaybeMessage< ::bosdyn::api::DrawableCylinder >(GetArena());
  }
  return drawable_.cylinder_;
}
inline ::bosdyn::api::DrawableCylinder* DrawableProperties::mutable_cylinder() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.DrawableProperties.cylinder)
  return _internal_mutable_cylinder();
}

// .bosdyn.api.DrawableLineStrip linestrip = 10;
inline bool DrawableProperties::_internal_has_linestrip() const {
  return drawable_case() == kLinestrip;
}
inline bool DrawableProperties::has_linestrip() const {
  return _internal_has_linestrip();
}
inline void DrawableProperties::set_has_linestrip() {
  _oneof_case_[0] = kLinestrip;
}
inline void DrawableProperties::clear_linestrip() {
  if (_internal_has_linestrip()) {
    if (GetArena() == nullptr) {
      delete drawable_.linestrip_;
    }
    clear_has_drawable();
  }
}
inline ::bosdyn::api::DrawableLineStrip* DrawableProperties::release_linestrip() {
  // @@protoc_insertion_point(field_release:bosdyn.api.DrawableProperties.linestrip)
  if (_internal_has_linestrip()) {
    clear_has_drawable();
      ::bosdyn::api::DrawableLineStrip* temp = drawable_.linestrip_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    drawable_.linestrip_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::DrawableLineStrip& DrawableProperties::_internal_linestrip() const {
  return _internal_has_linestrip()
      ? *drawable_.linestrip_
      : *reinterpret_cast< ::bosdyn::api::DrawableLineStrip*>(&::bosdyn::api::_DrawableLineStrip_default_instance_);
}
inline const ::bosdyn::api::DrawableLineStrip& DrawableProperties::linestrip() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.DrawableProperties.linestrip)
  return _internal_linestrip();
}
inline ::bosdyn::api::DrawableLineStrip* DrawableProperties::unsafe_arena_release_linestrip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.DrawableProperties.linestrip)
  if (_internal_has_linestrip()) {
    clear_has_drawable();
    ::bosdyn::api::DrawableLineStrip* temp = drawable_.linestrip_;
    drawable_.linestrip_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DrawableProperties::unsafe_arena_set_allocated_linestrip(::bosdyn::api::DrawableLineStrip* linestrip) {
  clear_drawable();
  if (linestrip) {
    set_has_linestrip();
    drawable_.linestrip_ = linestrip;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.DrawableProperties.linestrip)
}
inline ::bosdyn::api::DrawableLineStrip* DrawableProperties::_internal_mutable_linestrip() {
  if (!_internal_has_linestrip()) {
    clear_drawable();
    set_has_linestrip();
    drawable_.linestrip_ = CreateMaybeMessage< ::bosdyn::api::DrawableLineStrip >(GetArena());
  }
  return drawable_.linestrip_;
}
inline ::bosdyn::api::DrawableLineStrip* DrawableProperties::mutable_linestrip() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.DrawableProperties.linestrip)
  return _internal_mutable_linestrip();
}

// .bosdyn.api.DrawablePoints points = 11;
inline bool DrawableProperties::_internal_has_points() const {
  return drawable_case() == kPoints;
}
inline bool DrawableProperties::has_points() const {
  return _internal_has_points();
}
inline void DrawableProperties::set_has_points() {
  _oneof_case_[0] = kPoints;
}
inline void DrawableProperties::clear_points() {
  if (_internal_has_points()) {
    if (GetArena() == nullptr) {
      delete drawable_.points_;
    }
    clear_has_drawable();
  }
}
inline ::bosdyn::api::DrawablePoints* DrawableProperties::release_points() {
  // @@protoc_insertion_point(field_release:bosdyn.api.DrawableProperties.points)
  if (_internal_has_points()) {
    clear_has_drawable();
      ::bosdyn::api::DrawablePoints* temp = drawable_.points_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    drawable_.points_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::DrawablePoints& DrawableProperties::_internal_points() const {
  return _internal_has_points()
      ? *drawable_.points_
      : *reinterpret_cast< ::bosdyn::api::DrawablePoints*>(&::bosdyn::api::_DrawablePoints_default_instance_);
}
inline const ::bosdyn::api::DrawablePoints& DrawableProperties::points() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.DrawableProperties.points)
  return _internal_points();
}
inline ::bosdyn::api::DrawablePoints* DrawableProperties::unsafe_arena_release_points() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.DrawableProperties.points)
  if (_internal_has_points()) {
    clear_has_drawable();
    ::bosdyn::api::DrawablePoints* temp = drawable_.points_;
    drawable_.points_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DrawableProperties::unsafe_arena_set_allocated_points(::bosdyn::api::DrawablePoints* points) {
  clear_drawable();
  if (points) {
    set_has_points();
    drawable_.points_ = points;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.DrawableProperties.points)
}
inline ::bosdyn::api::DrawablePoints* DrawableProperties::_internal_mutable_points() {
  if (!_internal_has_points()) {
    clear_drawable();
    set_has_points();
    drawable_.points_ = CreateMaybeMessage< ::bosdyn::api::DrawablePoints >(GetArena());
  }
  return drawable_.points_;
}
inline ::bosdyn::api::DrawablePoints* DrawableProperties::mutable_points() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.DrawableProperties.points)
  return _internal_mutable_points();
}

// string frame_name_drawable = 12;
inline void DrawableProperties::clear_frame_name_drawable() {
  frame_name_drawable_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DrawableProperties::frame_name_drawable() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.DrawableProperties.frame_name_drawable)
  return _internal_frame_name_drawable();
}
inline void DrawableProperties::set_frame_name_drawable(const std::string& value) {
  _internal_set_frame_name_drawable(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.DrawableProperties.frame_name_drawable)
}
inline std::string* DrawableProperties::mutable_frame_name_drawable() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.DrawableProperties.frame_name_drawable)
  return _internal_mutable_frame_name_drawable();
}
inline const std::string& DrawableProperties::_internal_frame_name_drawable() const {
  return frame_name_drawable_.Get();
}
inline void DrawableProperties::_internal_set_frame_name_drawable(const std::string& value) {
  
  frame_name_drawable_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DrawableProperties::set_frame_name_drawable(std::string&& value) {
  
  frame_name_drawable_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.DrawableProperties.frame_name_drawable)
}
inline void DrawableProperties::set_frame_name_drawable(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  frame_name_drawable_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.DrawableProperties.frame_name_drawable)
}
inline void DrawableProperties::set_frame_name_drawable(const char* value,
    size_t size) {
  
  frame_name_drawable_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.DrawableProperties.frame_name_drawable)
}
inline std::string* DrawableProperties::_internal_mutable_frame_name_drawable() {
  
  return frame_name_drawable_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DrawableProperties::release_frame_name_drawable() {
  // @@protoc_insertion_point(field_release:bosdyn.api.DrawableProperties.frame_name_drawable)
  return frame_name_drawable_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DrawableProperties::set_allocated_frame_name_drawable(std::string* frame_name_drawable) {
  if (frame_name_drawable != nullptr) {
    
  } else {
    
  }
  frame_name_drawable_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), frame_name_drawable,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.DrawableProperties.frame_name_drawable)
}

inline bool DrawableProperties::has_drawable() const {
  return drawable_case() != DRAWABLE_NOT_SET;
}
inline void DrawableProperties::clear_has_drawable() {
  _oneof_case_[0] = DRAWABLE_NOT_SET;
}
inline DrawableProperties::DrawableCase DrawableProperties::drawable_case() const {
  return DrawableProperties::DrawableCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// DrawableFrame

// double arrow_length = 1;
inline void DrawableFrame::clear_arrow_length() {
  arrow_length_ = 0;
}
inline double DrawableFrame::_internal_arrow_length() const {
  return arrow_length_;
}
inline double DrawableFrame::arrow_length() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.DrawableFrame.arrow_length)
  return _internal_arrow_length();
}
inline void DrawableFrame::_internal_set_arrow_length(double value) {
  
  arrow_length_ = value;
}
inline void DrawableFrame::set_arrow_length(double value) {
  _internal_set_arrow_length(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.DrawableFrame.arrow_length)
}

// double arrow_radius = 2;
inline void DrawableFrame::clear_arrow_radius() {
  arrow_radius_ = 0;
}
inline double DrawableFrame::_internal_arrow_radius() const {
  return arrow_radius_;
}
inline double DrawableFrame::arrow_radius() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.DrawableFrame.arrow_radius)
  return _internal_arrow_radius();
}
inline void DrawableFrame::_internal_set_arrow_radius(double value) {
  
  arrow_radius_ = value;
}
inline void DrawableFrame::set_arrow_radius(double value) {
  _internal_set_arrow_radius(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.DrawableFrame.arrow_radius)
}

// -------------------------------------------------------------------

// DrawableSphere

// double radius = 1;
inline void DrawableSphere::clear_radius() {
  radius_ = 0;
}
inline double DrawableSphere::_internal_radius() const {
  return radius_;
}
inline double DrawableSphere::radius() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.DrawableSphere.radius)
  return _internal_radius();
}
inline void DrawableSphere::_internal_set_radius(double value) {
  
  radius_ = value;
}
inline void DrawableSphere::set_radius(double value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.DrawableSphere.radius)
}

// -------------------------------------------------------------------

// DrawableBox

// .bosdyn.api.Vec3 size = 1;
inline bool DrawableBox::_internal_has_size() const {
  return this != internal_default_instance() && size_ != nullptr;
}
inline bool DrawableBox::has_size() const {
  return _internal_has_size();
}
inline const ::bosdyn::api::Vec3& DrawableBox::_internal_size() const {
  const ::bosdyn::api::Vec3* p = size_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::Vec3*>(
      &::bosdyn::api::_Vec3_default_instance_);
}
inline const ::bosdyn::api::Vec3& DrawableBox::size() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.DrawableBox.size)
  return _internal_size();
}
inline void DrawableBox::unsafe_arena_set_allocated_size(
    ::bosdyn::api::Vec3* size) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size_);
  }
  size_ = size;
  if (size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.DrawableBox.size)
}
inline ::bosdyn::api::Vec3* DrawableBox::release_size() {
  
  ::bosdyn::api::Vec3* temp = size_;
  size_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::Vec3* DrawableBox::unsafe_arena_release_size() {
  // @@protoc_insertion_point(field_release:bosdyn.api.DrawableBox.size)
  
  ::bosdyn::api::Vec3* temp = size_;
  size_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Vec3* DrawableBox::_internal_mutable_size() {
  
  if (size_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Vec3>(GetArena());
    size_ = p;
  }
  return size_;
}
inline ::bosdyn::api::Vec3* DrawableBox::mutable_size() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.DrawableBox.size)
  return _internal_mutable_size();
}
inline void DrawableBox::set_allocated_size(::bosdyn::api::Vec3* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(size_);
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size)->GetArena();
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    
  } else {
    
  }
  size_ = size;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.DrawableBox.size)
}

// -------------------------------------------------------------------

// DrawableArrow

// .bosdyn.api.Vec3 direction = 1;
inline bool DrawableArrow::_internal_has_direction() const {
  return this != internal_default_instance() && direction_ != nullptr;
}
inline bool DrawableArrow::has_direction() const {
  return _internal_has_direction();
}
inline const ::bosdyn::api::Vec3& DrawableArrow::_internal_direction() const {
  const ::bosdyn::api::Vec3* p = direction_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::Vec3*>(
      &::bosdyn::api::_Vec3_default_instance_);
}
inline const ::bosdyn::api::Vec3& DrawableArrow::direction() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.DrawableArrow.direction)
  return _internal_direction();
}
inline void DrawableArrow::unsafe_arena_set_allocated_direction(
    ::bosdyn::api::Vec3* direction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(direction_);
  }
  direction_ = direction;
  if (direction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.DrawableArrow.direction)
}
inline ::bosdyn::api::Vec3* DrawableArrow::release_direction() {
  
  ::bosdyn::api::Vec3* temp = direction_;
  direction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::Vec3* DrawableArrow::unsafe_arena_release_direction() {
  // @@protoc_insertion_point(field_release:bosdyn.api.DrawableArrow.direction)
  
  ::bosdyn::api::Vec3* temp = direction_;
  direction_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Vec3* DrawableArrow::_internal_mutable_direction() {
  
  if (direction_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Vec3>(GetArena());
    direction_ = p;
  }
  return direction_;
}
inline ::bosdyn::api::Vec3* DrawableArrow::mutable_direction() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.DrawableArrow.direction)
  return _internal_mutable_direction();
}
inline void DrawableArrow::set_allocated_direction(::bosdyn::api::Vec3* direction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(direction_);
  }
  if (direction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(direction)->GetArena();
    if (message_arena != submessage_arena) {
      direction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, direction, submessage_arena);
    }
    
  } else {
    
  }
  direction_ = direction;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.DrawableArrow.direction)
}

// double radius = 2;
inline void DrawableArrow::clear_radius() {
  radius_ = 0;
}
inline double DrawableArrow::_internal_radius() const {
  return radius_;
}
inline double DrawableArrow::radius() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.DrawableArrow.radius)
  return _internal_radius();
}
inline void DrawableArrow::_internal_set_radius(double value) {
  
  radius_ = value;
}
inline void DrawableArrow::set_radius(double value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.DrawableArrow.radius)
}

// -------------------------------------------------------------------

// DrawableCapsule

// .bosdyn.api.Vec3 direction = 1;
inline bool DrawableCapsule::_internal_has_direction() const {
  return this != internal_default_instance() && direction_ != nullptr;
}
inline bool DrawableCapsule::has_direction() const {
  return _internal_has_direction();
}
inline const ::bosdyn::api::Vec3& DrawableCapsule::_internal_direction() const {
  const ::bosdyn::api::Vec3* p = direction_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::Vec3*>(
      &::bosdyn::api::_Vec3_default_instance_);
}
inline const ::bosdyn::api::Vec3& DrawableCapsule::direction() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.DrawableCapsule.direction)
  return _internal_direction();
}
inline void DrawableCapsule::unsafe_arena_set_allocated_direction(
    ::bosdyn::api::Vec3* direction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(direction_);
  }
  direction_ = direction;
  if (direction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.DrawableCapsule.direction)
}
inline ::bosdyn::api::Vec3* DrawableCapsule::release_direction() {
  
  ::bosdyn::api::Vec3* temp = direction_;
  direction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::Vec3* DrawableCapsule::unsafe_arena_release_direction() {
  // @@protoc_insertion_point(field_release:bosdyn.api.DrawableCapsule.direction)
  
  ::bosdyn::api::Vec3* temp = direction_;
  direction_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Vec3* DrawableCapsule::_internal_mutable_direction() {
  
  if (direction_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Vec3>(GetArena());
    direction_ = p;
  }
  return direction_;
}
inline ::bosdyn::api::Vec3* DrawableCapsule::mutable_direction() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.DrawableCapsule.direction)
  return _internal_mutable_direction();
}
inline void DrawableCapsule::set_allocated_direction(::bosdyn::api::Vec3* direction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(direction_);
  }
  if (direction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(direction)->GetArena();
    if (message_arena != submessage_arena) {
      direction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, direction, submessage_arena);
    }
    
  } else {
    
  }
  direction_ = direction;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.DrawableCapsule.direction)
}

// double radius = 2;
inline void DrawableCapsule::clear_radius() {
  radius_ = 0;
}
inline double DrawableCapsule::_internal_radius() const {
  return radius_;
}
inline double DrawableCapsule::radius() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.DrawableCapsule.radius)
  return _internal_radius();
}
inline void DrawableCapsule::_internal_set_radius(double value) {
  
  radius_ = value;
}
inline void DrawableCapsule::set_radius(double value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.DrawableCapsule.radius)
}

// -------------------------------------------------------------------

// DrawableCylinder

// .bosdyn.api.Vec3 direction = 1;
inline bool DrawableCylinder::_internal_has_direction() const {
  return this != internal_default_instance() && direction_ != nullptr;
}
inline bool DrawableCylinder::has_direction() const {
  return _internal_has_direction();
}
inline const ::bosdyn::api::Vec3& DrawableCylinder::_internal_direction() const {
  const ::bosdyn::api::Vec3* p = direction_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::Vec3*>(
      &::bosdyn::api::_Vec3_default_instance_);
}
inline const ::bosdyn::api::Vec3& DrawableCylinder::direction() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.DrawableCylinder.direction)
  return _internal_direction();
}
inline void DrawableCylinder::unsafe_arena_set_allocated_direction(
    ::bosdyn::api::Vec3* direction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(direction_);
  }
  direction_ = direction;
  if (direction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.DrawableCylinder.direction)
}
inline ::bosdyn::api::Vec3* DrawableCylinder::release_direction() {
  
  ::bosdyn::api::Vec3* temp = direction_;
  direction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::Vec3* DrawableCylinder::unsafe_arena_release_direction() {
  // @@protoc_insertion_point(field_release:bosdyn.api.DrawableCylinder.direction)
  
  ::bosdyn::api::Vec3* temp = direction_;
  direction_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Vec3* DrawableCylinder::_internal_mutable_direction() {
  
  if (direction_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Vec3>(GetArena());
    direction_ = p;
  }
  return direction_;
}
inline ::bosdyn::api::Vec3* DrawableCylinder::mutable_direction() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.DrawableCylinder.direction)
  return _internal_mutable_direction();
}
inline void DrawableCylinder::set_allocated_direction(::bosdyn::api::Vec3* direction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(direction_);
  }
  if (direction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(direction)->GetArena();
    if (message_arena != submessage_arena) {
      direction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, direction, submessage_arena);
    }
    
  } else {
    
  }
  direction_ = direction;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.DrawableCylinder.direction)
}

// double radius = 2;
inline void DrawableCylinder::clear_radius() {
  radius_ = 0;
}
inline double DrawableCylinder::_internal_radius() const {
  return radius_;
}
inline double DrawableCylinder::radius() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.DrawableCylinder.radius)
  return _internal_radius();
}
inline void DrawableCylinder::_internal_set_radius(double value) {
  
  radius_ = value;
}
inline void DrawableCylinder::set_radius(double value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.DrawableCylinder.radius)
}

// -------------------------------------------------------------------

// DrawableLineStrip

// .bosdyn.api.Vec3 points = 1;
inline bool DrawableLineStrip::_internal_has_points() const {
  return this != internal_default_instance() && points_ != nullptr;
}
inline bool DrawableLineStrip::has_points() const {
  return _internal_has_points();
}
inline const ::bosdyn::api::Vec3& DrawableLineStrip::_internal_points() const {
  const ::bosdyn::api::Vec3* p = points_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::Vec3*>(
      &::bosdyn::api::_Vec3_default_instance_);
}
inline const ::bosdyn::api::Vec3& DrawableLineStrip::points() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.DrawableLineStrip.points)
  return _internal_points();
}
inline void DrawableLineStrip::unsafe_arena_set_allocated_points(
    ::bosdyn::api::Vec3* points) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(points_);
  }
  points_ = points;
  if (points) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.DrawableLineStrip.points)
}
inline ::bosdyn::api::Vec3* DrawableLineStrip::release_points() {
  
  ::bosdyn::api::Vec3* temp = points_;
  points_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::Vec3* DrawableLineStrip::unsafe_arena_release_points() {
  // @@protoc_insertion_point(field_release:bosdyn.api.DrawableLineStrip.points)
  
  ::bosdyn::api::Vec3* temp = points_;
  points_ = nullptr;
  return temp;
}
inline ::bosdyn::api::Vec3* DrawableLineStrip::_internal_mutable_points() {
  
  if (points_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::Vec3>(GetArena());
    points_ = p;
  }
  return points_;
}
inline ::bosdyn::api::Vec3* DrawableLineStrip::mutable_points() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.DrawableLineStrip.points)
  return _internal_mutable_points();
}
inline void DrawableLineStrip::set_allocated_points(::bosdyn::api::Vec3* points) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(points_);
  }
  if (points) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(points)->GetArena();
    if (message_arena != submessage_arena) {
      points = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, points, submessage_arena);
    }
    
  } else {
    
  }
  points_ = points;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.DrawableLineStrip.points)
}

// -------------------------------------------------------------------

// DrawablePoints

// repeated .bosdyn.api.Vec3 points = 1;
inline int DrawablePoints::_internal_points_size() const {
  return points_.size();
}
inline int DrawablePoints::points_size() const {
  return _internal_points_size();
}
inline ::bosdyn::api::Vec3* DrawablePoints::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.DrawablePoints.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::Vec3 >*
DrawablePoints::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:bosdyn.api.DrawablePoints.points)
  return &points_;
}
inline const ::bosdyn::api::Vec3& DrawablePoints::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::bosdyn::api::Vec3& DrawablePoints::points(int index) const {
  // @@protoc_insertion_point(field_get:bosdyn.api.DrawablePoints.points)
  return _internal_points(index);
}
inline ::bosdyn::api::Vec3* DrawablePoints::_internal_add_points() {
  return points_.Add();
}
inline ::bosdyn::api::Vec3* DrawablePoints::add_points() {
  // @@protoc_insertion_point(field_add:bosdyn.api.DrawablePoints.points)
  return _internal_add_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bosdyn::api::Vec3 >&
DrawablePoints::points() const {
  // @@protoc_insertion_point(field_list:bosdyn.api.DrawablePoints.points)
  return points_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace bosdyn

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bosdyn::api::MutateWorldObjectRequest_Action> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::MutateWorldObjectRequest_Action>() {
  return ::bosdyn::api::MutateWorldObjectRequest_Action_descriptor();
}
template <> struct is_proto_enum< ::bosdyn::api::MutateWorldObjectResponse_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::MutateWorldObjectResponse_Status>() {
  return ::bosdyn::api::MutateWorldObjectResponse_Status_descriptor();
}
template <> struct is_proto_enum< ::bosdyn::api::WorldObjectType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::WorldObjectType>() {
  return ::bosdyn::api::WorldObjectType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fworld_5fobject_2eproto
