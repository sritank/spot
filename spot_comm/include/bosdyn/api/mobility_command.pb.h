// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/mobility_command.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fmobility_5fcommand_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fmobility_5fcommand_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "bosdyn/api/basic_command.pb.h"
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fmobility_5fcommand_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bosdyn_2fapi_2fmobility_5fcommand_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fmobility_5fcommand_2eproto;
namespace bosdyn {
namespace api {
class MobilityCommand;
class MobilityCommandDefaultTypeInternal;
extern MobilityCommandDefaultTypeInternal _MobilityCommand_default_instance_;
class MobilityCommand_Feedback;
class MobilityCommand_FeedbackDefaultTypeInternal;
extern MobilityCommand_FeedbackDefaultTypeInternal _MobilityCommand_Feedback_default_instance_;
class MobilityCommand_Request;
class MobilityCommand_RequestDefaultTypeInternal;
extern MobilityCommand_RequestDefaultTypeInternal _MobilityCommand_Request_default_instance_;
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> ::bosdyn::api::MobilityCommand* Arena::CreateMaybeMessage<::bosdyn::api::MobilityCommand>(Arena*);
template<> ::bosdyn::api::MobilityCommand_Feedback* Arena::CreateMaybeMessage<::bosdyn::api::MobilityCommand_Feedback>(Arena*);
template<> ::bosdyn::api::MobilityCommand_Request* Arena::CreateMaybeMessage<::bosdyn::api::MobilityCommand_Request>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bosdyn {
namespace api {

// ===================================================================

class MobilityCommand_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.MobilityCommand.Request) */ {
 public:
  inline MobilityCommand_Request() : MobilityCommand_Request(nullptr) {}
  virtual ~MobilityCommand_Request();

  MobilityCommand_Request(const MobilityCommand_Request& from);
  MobilityCommand_Request(MobilityCommand_Request&& from) noexcept
    : MobilityCommand_Request() {
    *this = ::std::move(from);
  }

  inline MobilityCommand_Request& operator=(const MobilityCommand_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline MobilityCommand_Request& operator=(MobilityCommand_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MobilityCommand_Request& default_instance();

  enum CommandCase {
    kSe2TrajectoryRequest = 1,
    kSe2VelocityRequest = 2,
    kSitRequest = 3,
    kStandRequest = 4,
    COMMAND_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MobilityCommand_Request* internal_default_instance() {
    return reinterpret_cast<const MobilityCommand_Request*>(
               &_MobilityCommand_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MobilityCommand_Request& a, MobilityCommand_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(MobilityCommand_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MobilityCommand_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MobilityCommand_Request* New() const final {
    return CreateMaybeMessage<MobilityCommand_Request>(nullptr);
  }

  MobilityCommand_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MobilityCommand_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MobilityCommand_Request& from);
  void MergeFrom(const MobilityCommand_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MobilityCommand_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.MobilityCommand.Request";
  }
  protected:
  explicit MobilityCommand_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fmobility_5fcommand_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fmobility_5fcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 100,
    kSe2TrajectoryRequestFieldNumber = 1,
    kSe2VelocityRequestFieldNumber = 2,
    kSitRequestFieldNumber = 3,
    kStandRequestFieldNumber = 4,
  };
  // .google.protobuf.Any params = 100;
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const PROTOBUF_NAMESPACE_ID::Any& params() const;
  PROTOBUF_NAMESPACE_ID::Any* release_params();
  PROTOBUF_NAMESPACE_ID::Any* mutable_params();
  void set_allocated_params(PROTOBUF_NAMESPACE_ID::Any* params);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_params() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      PROTOBUF_NAMESPACE_ID::Any* params);
  PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_params();

  // .bosdyn.api.SE2TrajectoryCommand.Request se2_trajectory_request = 1;
  bool has_se2_trajectory_request() const;
  private:
  bool _internal_has_se2_trajectory_request() const;
  public:
  void clear_se2_trajectory_request();
  const ::bosdyn::api::SE2TrajectoryCommand_Request& se2_trajectory_request() const;
  ::bosdyn::api::SE2TrajectoryCommand_Request* release_se2_trajectory_request();
  ::bosdyn::api::SE2TrajectoryCommand_Request* mutable_se2_trajectory_request();
  void set_allocated_se2_trajectory_request(::bosdyn::api::SE2TrajectoryCommand_Request* se2_trajectory_request);
  private:
  const ::bosdyn::api::SE2TrajectoryCommand_Request& _internal_se2_trajectory_request() const;
  ::bosdyn::api::SE2TrajectoryCommand_Request* _internal_mutable_se2_trajectory_request();
  public:
  void unsafe_arena_set_allocated_se2_trajectory_request(
      ::bosdyn::api::SE2TrajectoryCommand_Request* se2_trajectory_request);
  ::bosdyn::api::SE2TrajectoryCommand_Request* unsafe_arena_release_se2_trajectory_request();

  // .bosdyn.api.SE2VelocityCommand.Request se2_velocity_request = 2;
  bool has_se2_velocity_request() const;
  private:
  bool _internal_has_se2_velocity_request() const;
  public:
  void clear_se2_velocity_request();
  const ::bosdyn::api::SE2VelocityCommand_Request& se2_velocity_request() const;
  ::bosdyn::api::SE2VelocityCommand_Request* release_se2_velocity_request();
  ::bosdyn::api::SE2VelocityCommand_Request* mutable_se2_velocity_request();
  void set_allocated_se2_velocity_request(::bosdyn::api::SE2VelocityCommand_Request* se2_velocity_request);
  private:
  const ::bosdyn::api::SE2VelocityCommand_Request& _internal_se2_velocity_request() const;
  ::bosdyn::api::SE2VelocityCommand_Request* _internal_mutable_se2_velocity_request();
  public:
  void unsafe_arena_set_allocated_se2_velocity_request(
      ::bosdyn::api::SE2VelocityCommand_Request* se2_velocity_request);
  ::bosdyn::api::SE2VelocityCommand_Request* unsafe_arena_release_se2_velocity_request();

  // .bosdyn.api.SitCommand.Request sit_request = 3;
  bool has_sit_request() const;
  private:
  bool _internal_has_sit_request() const;
  public:
  void clear_sit_request();
  const ::bosdyn::api::SitCommand_Request& sit_request() const;
  ::bosdyn::api::SitCommand_Request* release_sit_request();
  ::bosdyn::api::SitCommand_Request* mutable_sit_request();
  void set_allocated_sit_request(::bosdyn::api::SitCommand_Request* sit_request);
  private:
  const ::bosdyn::api::SitCommand_Request& _internal_sit_request() const;
  ::bosdyn::api::SitCommand_Request* _internal_mutable_sit_request();
  public:
  void unsafe_arena_set_allocated_sit_request(
      ::bosdyn::api::SitCommand_Request* sit_request);
  ::bosdyn::api::SitCommand_Request* unsafe_arena_release_sit_request();

  // .bosdyn.api.StandCommand.Request stand_request = 4;
  bool has_stand_request() const;
  private:
  bool _internal_has_stand_request() const;
  public:
  void clear_stand_request();
  const ::bosdyn::api::StandCommand_Request& stand_request() const;
  ::bosdyn::api::StandCommand_Request* release_stand_request();
  ::bosdyn::api::StandCommand_Request* mutable_stand_request();
  void set_allocated_stand_request(::bosdyn::api::StandCommand_Request* stand_request);
  private:
  const ::bosdyn::api::StandCommand_Request& _internal_stand_request() const;
  ::bosdyn::api::StandCommand_Request* _internal_mutable_stand_request();
  public:
  void unsafe_arena_set_allocated_stand_request(
      ::bosdyn::api::StandCommand_Request* stand_request);
  ::bosdyn::api::StandCommand_Request* unsafe_arena_release_stand_request();

  void clear_command();
  CommandCase command_case() const;
  // @@protoc_insertion_point(class_scope:bosdyn.api.MobilityCommand.Request)
 private:
  class _Internal;
  void set_has_se2_trajectory_request();
  void set_has_se2_velocity_request();
  void set_has_sit_request();
  void set_has_stand_request();

  inline bool has_command() const;
  inline void clear_has_command();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Any* params_;
  union CommandUnion {
    CommandUnion() {}
    ::bosdyn::api::SE2TrajectoryCommand_Request* se2_trajectory_request_;
    ::bosdyn::api::SE2VelocityCommand_Request* se2_velocity_request_;
    ::bosdyn::api::SitCommand_Request* sit_request_;
    ::bosdyn::api::StandCommand_Request* stand_request_;
  } command_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_bosdyn_2fapi_2fmobility_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class MobilityCommand_Feedback PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.MobilityCommand.Feedback) */ {
 public:
  inline MobilityCommand_Feedback() : MobilityCommand_Feedback(nullptr) {}
  virtual ~MobilityCommand_Feedback();

  MobilityCommand_Feedback(const MobilityCommand_Feedback& from);
  MobilityCommand_Feedback(MobilityCommand_Feedback&& from) noexcept
    : MobilityCommand_Feedback() {
    *this = ::std::move(from);
  }

  inline MobilityCommand_Feedback& operator=(const MobilityCommand_Feedback& from) {
    CopyFrom(from);
    return *this;
  }
  inline MobilityCommand_Feedback& operator=(MobilityCommand_Feedback&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MobilityCommand_Feedback& default_instance();

  enum FeedbackCase {
    kSe2TrajectoryFeedback = 1,
    kSe2VelocityFeedback = 2,
    kSitFeedback = 3,
    kStandFeedback = 4,
    FEEDBACK_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MobilityCommand_Feedback* internal_default_instance() {
    return reinterpret_cast<const MobilityCommand_Feedback*>(
               &_MobilityCommand_Feedback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MobilityCommand_Feedback& a, MobilityCommand_Feedback& b) {
    a.Swap(&b);
  }
  inline void Swap(MobilityCommand_Feedback* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MobilityCommand_Feedback* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MobilityCommand_Feedback* New() const final {
    return CreateMaybeMessage<MobilityCommand_Feedback>(nullptr);
  }

  MobilityCommand_Feedback* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MobilityCommand_Feedback>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MobilityCommand_Feedback& from);
  void MergeFrom(const MobilityCommand_Feedback& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MobilityCommand_Feedback* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.MobilityCommand.Feedback";
  }
  protected:
  explicit MobilityCommand_Feedback(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fmobility_5fcommand_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fmobility_5fcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSe2TrajectoryFeedbackFieldNumber = 1,
    kSe2VelocityFeedbackFieldNumber = 2,
    kSitFeedbackFieldNumber = 3,
    kStandFeedbackFieldNumber = 4,
  };
  // .bosdyn.api.SE2TrajectoryCommand.Feedback se2_trajectory_feedback = 1;
  bool has_se2_trajectory_feedback() const;
  private:
  bool _internal_has_se2_trajectory_feedback() const;
  public:
  void clear_se2_trajectory_feedback();
  const ::bosdyn::api::SE2TrajectoryCommand_Feedback& se2_trajectory_feedback() const;
  ::bosdyn::api::SE2TrajectoryCommand_Feedback* release_se2_trajectory_feedback();
  ::bosdyn::api::SE2TrajectoryCommand_Feedback* mutable_se2_trajectory_feedback();
  void set_allocated_se2_trajectory_feedback(::bosdyn::api::SE2TrajectoryCommand_Feedback* se2_trajectory_feedback);
  private:
  const ::bosdyn::api::SE2TrajectoryCommand_Feedback& _internal_se2_trajectory_feedback() const;
  ::bosdyn::api::SE2TrajectoryCommand_Feedback* _internal_mutable_se2_trajectory_feedback();
  public:
  void unsafe_arena_set_allocated_se2_trajectory_feedback(
      ::bosdyn::api::SE2TrajectoryCommand_Feedback* se2_trajectory_feedback);
  ::bosdyn::api::SE2TrajectoryCommand_Feedback* unsafe_arena_release_se2_trajectory_feedback();

  // .bosdyn.api.SE2VelocityCommand.Feedback se2_velocity_feedback = 2;
  bool has_se2_velocity_feedback() const;
  private:
  bool _internal_has_se2_velocity_feedback() const;
  public:
  void clear_se2_velocity_feedback();
  const ::bosdyn::api::SE2VelocityCommand_Feedback& se2_velocity_feedback() const;
  ::bosdyn::api::SE2VelocityCommand_Feedback* release_se2_velocity_feedback();
  ::bosdyn::api::SE2VelocityCommand_Feedback* mutable_se2_velocity_feedback();
  void set_allocated_se2_velocity_feedback(::bosdyn::api::SE2VelocityCommand_Feedback* se2_velocity_feedback);
  private:
  const ::bosdyn::api::SE2VelocityCommand_Feedback& _internal_se2_velocity_feedback() const;
  ::bosdyn::api::SE2VelocityCommand_Feedback* _internal_mutable_se2_velocity_feedback();
  public:
  void unsafe_arena_set_allocated_se2_velocity_feedback(
      ::bosdyn::api::SE2VelocityCommand_Feedback* se2_velocity_feedback);
  ::bosdyn::api::SE2VelocityCommand_Feedback* unsafe_arena_release_se2_velocity_feedback();

  // .bosdyn.api.SitCommand.Feedback sit_feedback = 3;
  bool has_sit_feedback() const;
  private:
  bool _internal_has_sit_feedback() const;
  public:
  void clear_sit_feedback();
  const ::bosdyn::api::SitCommand_Feedback& sit_feedback() const;
  ::bosdyn::api::SitCommand_Feedback* release_sit_feedback();
  ::bosdyn::api::SitCommand_Feedback* mutable_sit_feedback();
  void set_allocated_sit_feedback(::bosdyn::api::SitCommand_Feedback* sit_feedback);
  private:
  const ::bosdyn::api::SitCommand_Feedback& _internal_sit_feedback() const;
  ::bosdyn::api::SitCommand_Feedback* _internal_mutable_sit_feedback();
  public:
  void unsafe_arena_set_allocated_sit_feedback(
      ::bosdyn::api::SitCommand_Feedback* sit_feedback);
  ::bosdyn::api::SitCommand_Feedback* unsafe_arena_release_sit_feedback();

  // .bosdyn.api.StandCommand.Feedback stand_feedback = 4;
  bool has_stand_feedback() const;
  private:
  bool _internal_has_stand_feedback() const;
  public:
  void clear_stand_feedback();
  const ::bosdyn::api::StandCommand_Feedback& stand_feedback() const;
  ::bosdyn::api::StandCommand_Feedback* release_stand_feedback();
  ::bosdyn::api::StandCommand_Feedback* mutable_stand_feedback();
  void set_allocated_stand_feedback(::bosdyn::api::StandCommand_Feedback* stand_feedback);
  private:
  const ::bosdyn::api::StandCommand_Feedback& _internal_stand_feedback() const;
  ::bosdyn::api::StandCommand_Feedback* _internal_mutable_stand_feedback();
  public:
  void unsafe_arena_set_allocated_stand_feedback(
      ::bosdyn::api::StandCommand_Feedback* stand_feedback);
  ::bosdyn::api::StandCommand_Feedback* unsafe_arena_release_stand_feedback();

  void clear_feedback();
  FeedbackCase feedback_case() const;
  // @@protoc_insertion_point(class_scope:bosdyn.api.MobilityCommand.Feedback)
 private:
  class _Internal;
  void set_has_se2_trajectory_feedback();
  void set_has_se2_velocity_feedback();
  void set_has_sit_feedback();
  void set_has_stand_feedback();

  inline bool has_feedback() const;
  inline void clear_has_feedback();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union FeedbackUnion {
    FeedbackUnion() {}
    ::bosdyn::api::SE2TrajectoryCommand_Feedback* se2_trajectory_feedback_;
    ::bosdyn::api::SE2VelocityCommand_Feedback* se2_velocity_feedback_;
    ::bosdyn::api::SitCommand_Feedback* sit_feedback_;
    ::bosdyn::api::StandCommand_Feedback* stand_feedback_;
  } feedback_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_bosdyn_2fapi_2fmobility_5fcommand_2eproto;
};
// -------------------------------------------------------------------

class MobilityCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.MobilityCommand) */ {
 public:
  inline MobilityCommand() : MobilityCommand(nullptr) {}
  virtual ~MobilityCommand();

  MobilityCommand(const MobilityCommand& from);
  MobilityCommand(MobilityCommand&& from) noexcept
    : MobilityCommand() {
    *this = ::std::move(from);
  }

  inline MobilityCommand& operator=(const MobilityCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline MobilityCommand& operator=(MobilityCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MobilityCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MobilityCommand* internal_default_instance() {
    return reinterpret_cast<const MobilityCommand*>(
               &_MobilityCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MobilityCommand& a, MobilityCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(MobilityCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MobilityCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MobilityCommand* New() const final {
    return CreateMaybeMessage<MobilityCommand>(nullptr);
  }

  MobilityCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MobilityCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MobilityCommand& from);
  void MergeFrom(const MobilityCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MobilityCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.MobilityCommand";
  }
  protected:
  explicit MobilityCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2fmobility_5fcommand_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2fmobility_5fcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MobilityCommand_Request Request;
  typedef MobilityCommand_Feedback Feedback;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bosdyn.api.MobilityCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2fmobility_5fcommand_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MobilityCommand_Request

// .bosdyn.api.SE2TrajectoryCommand.Request se2_trajectory_request = 1;
inline bool MobilityCommand_Request::_internal_has_se2_trajectory_request() const {
  return command_case() == kSe2TrajectoryRequest;
}
inline bool MobilityCommand_Request::has_se2_trajectory_request() const {
  return _internal_has_se2_trajectory_request();
}
inline void MobilityCommand_Request::set_has_se2_trajectory_request() {
  _oneof_case_[0] = kSe2TrajectoryRequest;
}
inline ::bosdyn::api::SE2TrajectoryCommand_Request* MobilityCommand_Request::release_se2_trajectory_request() {
  // @@protoc_insertion_point(field_release:bosdyn.api.MobilityCommand.Request.se2_trajectory_request)
  if (_internal_has_se2_trajectory_request()) {
    clear_has_command();
      ::bosdyn::api::SE2TrajectoryCommand_Request* temp = command_.se2_trajectory_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.se2_trajectory_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::SE2TrajectoryCommand_Request& MobilityCommand_Request::_internal_se2_trajectory_request() const {
  return _internal_has_se2_trajectory_request()
      ? *command_.se2_trajectory_request_
      : *reinterpret_cast< ::bosdyn::api::SE2TrajectoryCommand_Request*>(&::bosdyn::api::_SE2TrajectoryCommand_Request_default_instance_);
}
inline const ::bosdyn::api::SE2TrajectoryCommand_Request& MobilityCommand_Request::se2_trajectory_request() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.MobilityCommand.Request.se2_trajectory_request)
  return _internal_se2_trajectory_request();
}
inline ::bosdyn::api::SE2TrajectoryCommand_Request* MobilityCommand_Request::unsafe_arena_release_se2_trajectory_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.MobilityCommand.Request.se2_trajectory_request)
  if (_internal_has_se2_trajectory_request()) {
    clear_has_command();
    ::bosdyn::api::SE2TrajectoryCommand_Request* temp = command_.se2_trajectory_request_;
    command_.se2_trajectory_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MobilityCommand_Request::unsafe_arena_set_allocated_se2_trajectory_request(::bosdyn::api::SE2TrajectoryCommand_Request* se2_trajectory_request) {
  clear_command();
  if (se2_trajectory_request) {
    set_has_se2_trajectory_request();
    command_.se2_trajectory_request_ = se2_trajectory_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.MobilityCommand.Request.se2_trajectory_request)
}
inline ::bosdyn::api::SE2TrajectoryCommand_Request* MobilityCommand_Request::_internal_mutable_se2_trajectory_request() {
  if (!_internal_has_se2_trajectory_request()) {
    clear_command();
    set_has_se2_trajectory_request();
    command_.se2_trajectory_request_ = CreateMaybeMessage< ::bosdyn::api::SE2TrajectoryCommand_Request >(GetArena());
  }
  return command_.se2_trajectory_request_;
}
inline ::bosdyn::api::SE2TrajectoryCommand_Request* MobilityCommand_Request::mutable_se2_trajectory_request() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.MobilityCommand.Request.se2_trajectory_request)
  return _internal_mutable_se2_trajectory_request();
}

// .bosdyn.api.SE2VelocityCommand.Request se2_velocity_request = 2;
inline bool MobilityCommand_Request::_internal_has_se2_velocity_request() const {
  return command_case() == kSe2VelocityRequest;
}
inline bool MobilityCommand_Request::has_se2_velocity_request() const {
  return _internal_has_se2_velocity_request();
}
inline void MobilityCommand_Request::set_has_se2_velocity_request() {
  _oneof_case_[0] = kSe2VelocityRequest;
}
inline ::bosdyn::api::SE2VelocityCommand_Request* MobilityCommand_Request::release_se2_velocity_request() {
  // @@protoc_insertion_point(field_release:bosdyn.api.MobilityCommand.Request.se2_velocity_request)
  if (_internal_has_se2_velocity_request()) {
    clear_has_command();
      ::bosdyn::api::SE2VelocityCommand_Request* temp = command_.se2_velocity_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.se2_velocity_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::SE2VelocityCommand_Request& MobilityCommand_Request::_internal_se2_velocity_request() const {
  return _internal_has_se2_velocity_request()
      ? *command_.se2_velocity_request_
      : *reinterpret_cast< ::bosdyn::api::SE2VelocityCommand_Request*>(&::bosdyn::api::_SE2VelocityCommand_Request_default_instance_);
}
inline const ::bosdyn::api::SE2VelocityCommand_Request& MobilityCommand_Request::se2_velocity_request() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.MobilityCommand.Request.se2_velocity_request)
  return _internal_se2_velocity_request();
}
inline ::bosdyn::api::SE2VelocityCommand_Request* MobilityCommand_Request::unsafe_arena_release_se2_velocity_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.MobilityCommand.Request.se2_velocity_request)
  if (_internal_has_se2_velocity_request()) {
    clear_has_command();
    ::bosdyn::api::SE2VelocityCommand_Request* temp = command_.se2_velocity_request_;
    command_.se2_velocity_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MobilityCommand_Request::unsafe_arena_set_allocated_se2_velocity_request(::bosdyn::api::SE2VelocityCommand_Request* se2_velocity_request) {
  clear_command();
  if (se2_velocity_request) {
    set_has_se2_velocity_request();
    command_.se2_velocity_request_ = se2_velocity_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.MobilityCommand.Request.se2_velocity_request)
}
inline ::bosdyn::api::SE2VelocityCommand_Request* MobilityCommand_Request::_internal_mutable_se2_velocity_request() {
  if (!_internal_has_se2_velocity_request()) {
    clear_command();
    set_has_se2_velocity_request();
    command_.se2_velocity_request_ = CreateMaybeMessage< ::bosdyn::api::SE2VelocityCommand_Request >(GetArena());
  }
  return command_.se2_velocity_request_;
}
inline ::bosdyn::api::SE2VelocityCommand_Request* MobilityCommand_Request::mutable_se2_velocity_request() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.MobilityCommand.Request.se2_velocity_request)
  return _internal_mutable_se2_velocity_request();
}

// .bosdyn.api.SitCommand.Request sit_request = 3;
inline bool MobilityCommand_Request::_internal_has_sit_request() const {
  return command_case() == kSitRequest;
}
inline bool MobilityCommand_Request::has_sit_request() const {
  return _internal_has_sit_request();
}
inline void MobilityCommand_Request::set_has_sit_request() {
  _oneof_case_[0] = kSitRequest;
}
inline ::bosdyn::api::SitCommand_Request* MobilityCommand_Request::release_sit_request() {
  // @@protoc_insertion_point(field_release:bosdyn.api.MobilityCommand.Request.sit_request)
  if (_internal_has_sit_request()) {
    clear_has_command();
      ::bosdyn::api::SitCommand_Request* temp = command_.sit_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.sit_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::SitCommand_Request& MobilityCommand_Request::_internal_sit_request() const {
  return _internal_has_sit_request()
      ? *command_.sit_request_
      : *reinterpret_cast< ::bosdyn::api::SitCommand_Request*>(&::bosdyn::api::_SitCommand_Request_default_instance_);
}
inline const ::bosdyn::api::SitCommand_Request& MobilityCommand_Request::sit_request() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.MobilityCommand.Request.sit_request)
  return _internal_sit_request();
}
inline ::bosdyn::api::SitCommand_Request* MobilityCommand_Request::unsafe_arena_release_sit_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.MobilityCommand.Request.sit_request)
  if (_internal_has_sit_request()) {
    clear_has_command();
    ::bosdyn::api::SitCommand_Request* temp = command_.sit_request_;
    command_.sit_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MobilityCommand_Request::unsafe_arena_set_allocated_sit_request(::bosdyn::api::SitCommand_Request* sit_request) {
  clear_command();
  if (sit_request) {
    set_has_sit_request();
    command_.sit_request_ = sit_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.MobilityCommand.Request.sit_request)
}
inline ::bosdyn::api::SitCommand_Request* MobilityCommand_Request::_internal_mutable_sit_request() {
  if (!_internal_has_sit_request()) {
    clear_command();
    set_has_sit_request();
    command_.sit_request_ = CreateMaybeMessage< ::bosdyn::api::SitCommand_Request >(GetArena());
  }
  return command_.sit_request_;
}
inline ::bosdyn::api::SitCommand_Request* MobilityCommand_Request::mutable_sit_request() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.MobilityCommand.Request.sit_request)
  return _internal_mutable_sit_request();
}

// .bosdyn.api.StandCommand.Request stand_request = 4;
inline bool MobilityCommand_Request::_internal_has_stand_request() const {
  return command_case() == kStandRequest;
}
inline bool MobilityCommand_Request::has_stand_request() const {
  return _internal_has_stand_request();
}
inline void MobilityCommand_Request::set_has_stand_request() {
  _oneof_case_[0] = kStandRequest;
}
inline ::bosdyn::api::StandCommand_Request* MobilityCommand_Request::release_stand_request() {
  // @@protoc_insertion_point(field_release:bosdyn.api.MobilityCommand.Request.stand_request)
  if (_internal_has_stand_request()) {
    clear_has_command();
      ::bosdyn::api::StandCommand_Request* temp = command_.stand_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.stand_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::StandCommand_Request& MobilityCommand_Request::_internal_stand_request() const {
  return _internal_has_stand_request()
      ? *command_.stand_request_
      : *reinterpret_cast< ::bosdyn::api::StandCommand_Request*>(&::bosdyn::api::_StandCommand_Request_default_instance_);
}
inline const ::bosdyn::api::StandCommand_Request& MobilityCommand_Request::stand_request() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.MobilityCommand.Request.stand_request)
  return _internal_stand_request();
}
inline ::bosdyn::api::StandCommand_Request* MobilityCommand_Request::unsafe_arena_release_stand_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.MobilityCommand.Request.stand_request)
  if (_internal_has_stand_request()) {
    clear_has_command();
    ::bosdyn::api::StandCommand_Request* temp = command_.stand_request_;
    command_.stand_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MobilityCommand_Request::unsafe_arena_set_allocated_stand_request(::bosdyn::api::StandCommand_Request* stand_request) {
  clear_command();
  if (stand_request) {
    set_has_stand_request();
    command_.stand_request_ = stand_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.MobilityCommand.Request.stand_request)
}
inline ::bosdyn::api::StandCommand_Request* MobilityCommand_Request::_internal_mutable_stand_request() {
  if (!_internal_has_stand_request()) {
    clear_command();
    set_has_stand_request();
    command_.stand_request_ = CreateMaybeMessage< ::bosdyn::api::StandCommand_Request >(GetArena());
  }
  return command_.stand_request_;
}
inline ::bosdyn::api::StandCommand_Request* MobilityCommand_Request::mutable_stand_request() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.MobilityCommand.Request.stand_request)
  return _internal_mutable_stand_request();
}

// .google.protobuf.Any params = 100;
inline bool MobilityCommand_Request::_internal_has_params() const {
  return this != internal_default_instance() && params_ != nullptr;
}
inline bool MobilityCommand_Request::has_params() const {
  return _internal_has_params();
}
inline const PROTOBUF_NAMESPACE_ID::Any& MobilityCommand_Request::_internal_params() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = params_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& MobilityCommand_Request::params() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.MobilityCommand.Request.params)
  return _internal_params();
}
inline void MobilityCommand_Request::unsafe_arena_set_allocated_params(
    PROTOBUF_NAMESPACE_ID::Any* params) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(params_);
  }
  params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.MobilityCommand.Request.params)
}
inline PROTOBUF_NAMESPACE_ID::Any* MobilityCommand_Request::release_params() {
  
  PROTOBUF_NAMESPACE_ID::Any* temp = params_;
  params_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* MobilityCommand_Request::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:bosdyn.api.MobilityCommand.Request.params)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = params_;
  params_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* MobilityCommand_Request::_internal_mutable_params() {
  
  if (params_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArena());
    params_ = p;
  }
  return params_;
}
inline PROTOBUF_NAMESPACE_ID::Any* MobilityCommand_Request::mutable_params() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.MobilityCommand.Request.params)
  return _internal_mutable_params();
}
inline void MobilityCommand_Request::set_allocated_params(PROTOBUF_NAMESPACE_ID::Any* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(params_);
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(params)->GetArena();
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  params_ = params;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.MobilityCommand.Request.params)
}

inline bool MobilityCommand_Request::has_command() const {
  return command_case() != COMMAND_NOT_SET;
}
inline void MobilityCommand_Request::clear_has_command() {
  _oneof_case_[0] = COMMAND_NOT_SET;
}
inline MobilityCommand_Request::CommandCase MobilityCommand_Request::command_case() const {
  return MobilityCommand_Request::CommandCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// MobilityCommand_Feedback

// .bosdyn.api.SE2TrajectoryCommand.Feedback se2_trajectory_feedback = 1;
inline bool MobilityCommand_Feedback::_internal_has_se2_trajectory_feedback() const {
  return feedback_case() == kSe2TrajectoryFeedback;
}
inline bool MobilityCommand_Feedback::has_se2_trajectory_feedback() const {
  return _internal_has_se2_trajectory_feedback();
}
inline void MobilityCommand_Feedback::set_has_se2_trajectory_feedback() {
  _oneof_case_[0] = kSe2TrajectoryFeedback;
}
inline ::bosdyn::api::SE2TrajectoryCommand_Feedback* MobilityCommand_Feedback::release_se2_trajectory_feedback() {
  // @@protoc_insertion_point(field_release:bosdyn.api.MobilityCommand.Feedback.se2_trajectory_feedback)
  if (_internal_has_se2_trajectory_feedback()) {
    clear_has_feedback();
      ::bosdyn::api::SE2TrajectoryCommand_Feedback* temp = feedback_.se2_trajectory_feedback_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    feedback_.se2_trajectory_feedback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::SE2TrajectoryCommand_Feedback& MobilityCommand_Feedback::_internal_se2_trajectory_feedback() const {
  return _internal_has_se2_trajectory_feedback()
      ? *feedback_.se2_trajectory_feedback_
      : *reinterpret_cast< ::bosdyn::api::SE2TrajectoryCommand_Feedback*>(&::bosdyn::api::_SE2TrajectoryCommand_Feedback_default_instance_);
}
inline const ::bosdyn::api::SE2TrajectoryCommand_Feedback& MobilityCommand_Feedback::se2_trajectory_feedback() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.MobilityCommand.Feedback.se2_trajectory_feedback)
  return _internal_se2_trajectory_feedback();
}
inline ::bosdyn::api::SE2TrajectoryCommand_Feedback* MobilityCommand_Feedback::unsafe_arena_release_se2_trajectory_feedback() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.MobilityCommand.Feedback.se2_trajectory_feedback)
  if (_internal_has_se2_trajectory_feedback()) {
    clear_has_feedback();
    ::bosdyn::api::SE2TrajectoryCommand_Feedback* temp = feedback_.se2_trajectory_feedback_;
    feedback_.se2_trajectory_feedback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MobilityCommand_Feedback::unsafe_arena_set_allocated_se2_trajectory_feedback(::bosdyn::api::SE2TrajectoryCommand_Feedback* se2_trajectory_feedback) {
  clear_feedback();
  if (se2_trajectory_feedback) {
    set_has_se2_trajectory_feedback();
    feedback_.se2_trajectory_feedback_ = se2_trajectory_feedback;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.MobilityCommand.Feedback.se2_trajectory_feedback)
}
inline ::bosdyn::api::SE2TrajectoryCommand_Feedback* MobilityCommand_Feedback::_internal_mutable_se2_trajectory_feedback() {
  if (!_internal_has_se2_trajectory_feedback()) {
    clear_feedback();
    set_has_se2_trajectory_feedback();
    feedback_.se2_trajectory_feedback_ = CreateMaybeMessage< ::bosdyn::api::SE2TrajectoryCommand_Feedback >(GetArena());
  }
  return feedback_.se2_trajectory_feedback_;
}
inline ::bosdyn::api::SE2TrajectoryCommand_Feedback* MobilityCommand_Feedback::mutable_se2_trajectory_feedback() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.MobilityCommand.Feedback.se2_trajectory_feedback)
  return _internal_mutable_se2_trajectory_feedback();
}

// .bosdyn.api.SE2VelocityCommand.Feedback se2_velocity_feedback = 2;
inline bool MobilityCommand_Feedback::_internal_has_se2_velocity_feedback() const {
  return feedback_case() == kSe2VelocityFeedback;
}
inline bool MobilityCommand_Feedback::has_se2_velocity_feedback() const {
  return _internal_has_se2_velocity_feedback();
}
inline void MobilityCommand_Feedback::set_has_se2_velocity_feedback() {
  _oneof_case_[0] = kSe2VelocityFeedback;
}
inline ::bosdyn::api::SE2VelocityCommand_Feedback* MobilityCommand_Feedback::release_se2_velocity_feedback() {
  // @@protoc_insertion_point(field_release:bosdyn.api.MobilityCommand.Feedback.se2_velocity_feedback)
  if (_internal_has_se2_velocity_feedback()) {
    clear_has_feedback();
      ::bosdyn::api::SE2VelocityCommand_Feedback* temp = feedback_.se2_velocity_feedback_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    feedback_.se2_velocity_feedback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::SE2VelocityCommand_Feedback& MobilityCommand_Feedback::_internal_se2_velocity_feedback() const {
  return _internal_has_se2_velocity_feedback()
      ? *feedback_.se2_velocity_feedback_
      : *reinterpret_cast< ::bosdyn::api::SE2VelocityCommand_Feedback*>(&::bosdyn::api::_SE2VelocityCommand_Feedback_default_instance_);
}
inline const ::bosdyn::api::SE2VelocityCommand_Feedback& MobilityCommand_Feedback::se2_velocity_feedback() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.MobilityCommand.Feedback.se2_velocity_feedback)
  return _internal_se2_velocity_feedback();
}
inline ::bosdyn::api::SE2VelocityCommand_Feedback* MobilityCommand_Feedback::unsafe_arena_release_se2_velocity_feedback() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.MobilityCommand.Feedback.se2_velocity_feedback)
  if (_internal_has_se2_velocity_feedback()) {
    clear_has_feedback();
    ::bosdyn::api::SE2VelocityCommand_Feedback* temp = feedback_.se2_velocity_feedback_;
    feedback_.se2_velocity_feedback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MobilityCommand_Feedback::unsafe_arena_set_allocated_se2_velocity_feedback(::bosdyn::api::SE2VelocityCommand_Feedback* se2_velocity_feedback) {
  clear_feedback();
  if (se2_velocity_feedback) {
    set_has_se2_velocity_feedback();
    feedback_.se2_velocity_feedback_ = se2_velocity_feedback;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.MobilityCommand.Feedback.se2_velocity_feedback)
}
inline ::bosdyn::api::SE2VelocityCommand_Feedback* MobilityCommand_Feedback::_internal_mutable_se2_velocity_feedback() {
  if (!_internal_has_se2_velocity_feedback()) {
    clear_feedback();
    set_has_se2_velocity_feedback();
    feedback_.se2_velocity_feedback_ = CreateMaybeMessage< ::bosdyn::api::SE2VelocityCommand_Feedback >(GetArena());
  }
  return feedback_.se2_velocity_feedback_;
}
inline ::bosdyn::api::SE2VelocityCommand_Feedback* MobilityCommand_Feedback::mutable_se2_velocity_feedback() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.MobilityCommand.Feedback.se2_velocity_feedback)
  return _internal_mutable_se2_velocity_feedback();
}

// .bosdyn.api.SitCommand.Feedback sit_feedback = 3;
inline bool MobilityCommand_Feedback::_internal_has_sit_feedback() const {
  return feedback_case() == kSitFeedback;
}
inline bool MobilityCommand_Feedback::has_sit_feedback() const {
  return _internal_has_sit_feedback();
}
inline void MobilityCommand_Feedback::set_has_sit_feedback() {
  _oneof_case_[0] = kSitFeedback;
}
inline ::bosdyn::api::SitCommand_Feedback* MobilityCommand_Feedback::release_sit_feedback() {
  // @@protoc_insertion_point(field_release:bosdyn.api.MobilityCommand.Feedback.sit_feedback)
  if (_internal_has_sit_feedback()) {
    clear_has_feedback();
      ::bosdyn::api::SitCommand_Feedback* temp = feedback_.sit_feedback_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    feedback_.sit_feedback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::SitCommand_Feedback& MobilityCommand_Feedback::_internal_sit_feedback() const {
  return _internal_has_sit_feedback()
      ? *feedback_.sit_feedback_
      : *reinterpret_cast< ::bosdyn::api::SitCommand_Feedback*>(&::bosdyn::api::_SitCommand_Feedback_default_instance_);
}
inline const ::bosdyn::api::SitCommand_Feedback& MobilityCommand_Feedback::sit_feedback() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.MobilityCommand.Feedback.sit_feedback)
  return _internal_sit_feedback();
}
inline ::bosdyn::api::SitCommand_Feedback* MobilityCommand_Feedback::unsafe_arena_release_sit_feedback() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.MobilityCommand.Feedback.sit_feedback)
  if (_internal_has_sit_feedback()) {
    clear_has_feedback();
    ::bosdyn::api::SitCommand_Feedback* temp = feedback_.sit_feedback_;
    feedback_.sit_feedback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MobilityCommand_Feedback::unsafe_arena_set_allocated_sit_feedback(::bosdyn::api::SitCommand_Feedback* sit_feedback) {
  clear_feedback();
  if (sit_feedback) {
    set_has_sit_feedback();
    feedback_.sit_feedback_ = sit_feedback;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.MobilityCommand.Feedback.sit_feedback)
}
inline ::bosdyn::api::SitCommand_Feedback* MobilityCommand_Feedback::_internal_mutable_sit_feedback() {
  if (!_internal_has_sit_feedback()) {
    clear_feedback();
    set_has_sit_feedback();
    feedback_.sit_feedback_ = CreateMaybeMessage< ::bosdyn::api::SitCommand_Feedback >(GetArena());
  }
  return feedback_.sit_feedback_;
}
inline ::bosdyn::api::SitCommand_Feedback* MobilityCommand_Feedback::mutable_sit_feedback() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.MobilityCommand.Feedback.sit_feedback)
  return _internal_mutable_sit_feedback();
}

// .bosdyn.api.StandCommand.Feedback stand_feedback = 4;
inline bool MobilityCommand_Feedback::_internal_has_stand_feedback() const {
  return feedback_case() == kStandFeedback;
}
inline bool MobilityCommand_Feedback::has_stand_feedback() const {
  return _internal_has_stand_feedback();
}
inline void MobilityCommand_Feedback::set_has_stand_feedback() {
  _oneof_case_[0] = kStandFeedback;
}
inline ::bosdyn::api::StandCommand_Feedback* MobilityCommand_Feedback::release_stand_feedback() {
  // @@protoc_insertion_point(field_release:bosdyn.api.MobilityCommand.Feedback.stand_feedback)
  if (_internal_has_stand_feedback()) {
    clear_has_feedback();
      ::bosdyn::api::StandCommand_Feedback* temp = feedback_.stand_feedback_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    feedback_.stand_feedback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::bosdyn::api::StandCommand_Feedback& MobilityCommand_Feedback::_internal_stand_feedback() const {
  return _internal_has_stand_feedback()
      ? *feedback_.stand_feedback_
      : *reinterpret_cast< ::bosdyn::api::StandCommand_Feedback*>(&::bosdyn::api::_StandCommand_Feedback_default_instance_);
}
inline const ::bosdyn::api::StandCommand_Feedback& MobilityCommand_Feedback::stand_feedback() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.MobilityCommand.Feedback.stand_feedback)
  return _internal_stand_feedback();
}
inline ::bosdyn::api::StandCommand_Feedback* MobilityCommand_Feedback::unsafe_arena_release_stand_feedback() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bosdyn.api.MobilityCommand.Feedback.stand_feedback)
  if (_internal_has_stand_feedback()) {
    clear_has_feedback();
    ::bosdyn::api::StandCommand_Feedback* temp = feedback_.stand_feedback_;
    feedback_.stand_feedback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MobilityCommand_Feedback::unsafe_arena_set_allocated_stand_feedback(::bosdyn::api::StandCommand_Feedback* stand_feedback) {
  clear_feedback();
  if (stand_feedback) {
    set_has_stand_feedback();
    feedback_.stand_feedback_ = stand_feedback;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.MobilityCommand.Feedback.stand_feedback)
}
inline ::bosdyn::api::StandCommand_Feedback* MobilityCommand_Feedback::_internal_mutable_stand_feedback() {
  if (!_internal_has_stand_feedback()) {
    clear_feedback();
    set_has_stand_feedback();
    feedback_.stand_feedback_ = CreateMaybeMessage< ::bosdyn::api::StandCommand_Feedback >(GetArena());
  }
  return feedback_.stand_feedback_;
}
inline ::bosdyn::api::StandCommand_Feedback* MobilityCommand_Feedback::mutable_stand_feedback() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.MobilityCommand.Feedback.stand_feedback)
  return _internal_mutable_stand_feedback();
}

inline bool MobilityCommand_Feedback::has_feedback() const {
  return feedback_case() != FEEDBACK_NOT_SET;
}
inline void MobilityCommand_Feedback::clear_has_feedback() {
  _oneof_case_[0] = FEEDBACK_NOT_SET;
}
inline MobilityCommand_Feedback::FeedbackCase MobilityCommand_Feedback::feedback_case() const {
  return MobilityCommand_Feedback::FeedbackCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// MobilityCommand

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace bosdyn

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2fmobility_5fcommand_2eproto
