// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/robot_command.proto

#include "bosdyn/api/robot_command.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2ffull_5fbody_5fcommand_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_FullBodyCommand_Feedback_bosdyn_2fapi_2ffull_5fbody_5fcommand_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2ffull_5fbody_5fcommand_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_FullBodyCommand_Request_bosdyn_2fapi_2ffull_5fbody_5fcommand_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2flease_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Lease_bosdyn_2fapi_2flease_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2flease_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LeaseUseResult_bosdyn_2fapi_2flease_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fmobility_5fcommand_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_MobilityCommand_Feedback_bosdyn_2fapi_2fmobility_5fcommand_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fmobility_5fcommand_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_MobilityCommand_Request_bosdyn_2fapi_2fmobility_5fcommand_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2frobot_5fcommand_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RobotCommand_bosdyn_2fapi_2frobot_5fcommand_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2frobot_5fcommand_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RobotCommandFeedback_bosdyn_2fapi_2frobot_5fcommand_2eproto;
namespace bosdyn {
namespace api {
class RobotCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RobotCommand> _instance;
} _RobotCommand_default_instance_;
class RobotCommandFeedbackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RobotCommandFeedback> _instance;
} _RobotCommandFeedback_default_instance_;
class RobotCommandRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RobotCommandRequest> _instance;
} _RobotCommandRequest_default_instance_;
class RobotCommandResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RobotCommandResponse> _instance;
} _RobotCommandResponse_default_instance_;
class RobotCommandFeedbackRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RobotCommandFeedbackRequest> _instance;
} _RobotCommandFeedbackRequest_default_instance_;
class RobotCommandFeedbackResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RobotCommandFeedbackResponse> _instance;
} _RobotCommandFeedbackResponse_default_instance_;
class ClearBehaviorFaultRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClearBehaviorFaultRequest> _instance;
} _ClearBehaviorFaultRequest_default_instance_;
class ClearBehaviorFaultResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClearBehaviorFaultResponse> _instance;
} _ClearBehaviorFaultResponse_default_instance_;
}  // namespace api
}  // namespace bosdyn
static void InitDefaultsscc_info_ClearBehaviorFaultRequest_bosdyn_2fapi_2frobot_5fcommand_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_ClearBehaviorFaultRequest_default_instance_;
    new (ptr) ::bosdyn::api::ClearBehaviorFaultRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::ClearBehaviorFaultRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ClearBehaviorFaultRequest_bosdyn_2fapi_2frobot_5fcommand_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ClearBehaviorFaultRequest_bosdyn_2fapi_2frobot_5fcommand_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_Lease_bosdyn_2fapi_2flease_2eproto.base,}};

static void InitDefaultsscc_info_ClearBehaviorFaultResponse_bosdyn_2fapi_2frobot_5fcommand_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_ClearBehaviorFaultResponse_default_instance_;
    new (ptr) ::bosdyn::api::ClearBehaviorFaultResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::ClearBehaviorFaultResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ClearBehaviorFaultResponse_bosdyn_2fapi_2frobot_5fcommand_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ClearBehaviorFaultResponse_bosdyn_2fapi_2frobot_5fcommand_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_LeaseUseResult_bosdyn_2fapi_2flease_2eproto.base,}};

static void InitDefaultsscc_info_RobotCommand_bosdyn_2fapi_2frobot_5fcommand_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_RobotCommand_default_instance_;
    new (ptr) ::bosdyn::api::RobotCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::RobotCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RobotCommand_bosdyn_2fapi_2frobot_5fcommand_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RobotCommand_bosdyn_2fapi_2frobot_5fcommand_2eproto}, {
      &scc_info_FullBodyCommand_Request_bosdyn_2fapi_2ffull_5fbody_5fcommand_2eproto.base,
      &scc_info_MobilityCommand_Request_bosdyn_2fapi_2fmobility_5fcommand_2eproto.base,}};

static void InitDefaultsscc_info_RobotCommandFeedback_bosdyn_2fapi_2frobot_5fcommand_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_RobotCommandFeedback_default_instance_;
    new (ptr) ::bosdyn::api::RobotCommandFeedback();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::RobotCommandFeedback::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RobotCommandFeedback_bosdyn_2fapi_2frobot_5fcommand_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RobotCommandFeedback_bosdyn_2fapi_2frobot_5fcommand_2eproto}, {
      &scc_info_FullBodyCommand_Feedback_bosdyn_2fapi_2ffull_5fbody_5fcommand_2eproto.base,
      &scc_info_MobilityCommand_Feedback_bosdyn_2fapi_2fmobility_5fcommand_2eproto.base,}};

static void InitDefaultsscc_info_RobotCommandFeedbackRequest_bosdyn_2fapi_2frobot_5fcommand_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_RobotCommandFeedbackRequest_default_instance_;
    new (ptr) ::bosdyn::api::RobotCommandFeedbackRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::RobotCommandFeedbackRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RobotCommandFeedbackRequest_bosdyn_2fapi_2frobot_5fcommand_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RobotCommandFeedbackRequest_bosdyn_2fapi_2frobot_5fcommand_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_RobotCommandFeedbackResponse_bosdyn_2fapi_2frobot_5fcommand_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_RobotCommandFeedbackResponse_default_instance_;
    new (ptr) ::bosdyn::api::RobotCommandFeedbackResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::RobotCommandFeedbackResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RobotCommandFeedbackResponse_bosdyn_2fapi_2frobot_5fcommand_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RobotCommandFeedbackResponse_bosdyn_2fapi_2frobot_5fcommand_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_RobotCommandFeedback_bosdyn_2fapi_2frobot_5fcommand_2eproto.base,}};

static void InitDefaultsscc_info_RobotCommandRequest_bosdyn_2fapi_2frobot_5fcommand_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_RobotCommandRequest_default_instance_;
    new (ptr) ::bosdyn::api::RobotCommandRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::RobotCommandRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RobotCommandRequest_bosdyn_2fapi_2frobot_5fcommand_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_RobotCommandRequest_bosdyn_2fapi_2frobot_5fcommand_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_Lease_bosdyn_2fapi_2flease_2eproto.base,
      &scc_info_RobotCommand_bosdyn_2fapi_2frobot_5fcommand_2eproto.base,}};

static void InitDefaultsscc_info_RobotCommandResponse_bosdyn_2fapi_2frobot_5fcommand_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_RobotCommandResponse_default_instance_;
    new (ptr) ::bosdyn::api::RobotCommandResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::RobotCommandResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RobotCommandResponse_bosdyn_2fapi_2frobot_5fcommand_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RobotCommandResponse_bosdyn_2fapi_2frobot_5fcommand_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_LeaseUseResult_bosdyn_2fapi_2flease_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bosdyn_2fapi_2frobot_5fcommand_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_bosdyn_2fapi_2frobot_5fcommand_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bosdyn_2fapi_2frobot_5fcommand_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bosdyn_2fapi_2frobot_5fcommand_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotCommand, full_body_command_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotCommand, mobility_command_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotCommandFeedback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotCommandFeedback, full_body_feedback_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotCommandFeedback, mobility_feedback_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotCommandRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotCommandRequest, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotCommandRequest, lease_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotCommandRequest, command_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotCommandRequest, clock_identifier_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotCommandResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotCommandResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotCommandResponse, lease_use_result_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotCommandResponse, status_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotCommandResponse, message_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotCommandResponse, robot_command_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotCommandFeedbackRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotCommandFeedbackRequest, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotCommandFeedbackRequest, robot_command_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotCommandFeedbackResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotCommandFeedbackResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotCommandFeedbackResponse, status_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotCommandFeedbackResponse, message_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::RobotCommandFeedbackResponse, feedback_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::ClearBehaviorFaultRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::ClearBehaviorFaultRequest, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::ClearBehaviorFaultRequest, lease_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::ClearBehaviorFaultRequest, behavior_fault_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::ClearBehaviorFaultResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::ClearBehaviorFaultResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::ClearBehaviorFaultResponse, lease_use_result_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::ClearBehaviorFaultResponse, status_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::bosdyn::api::RobotCommand)},
  { 7, -1, sizeof(::bosdyn::api::RobotCommandFeedback)},
  { 14, -1, sizeof(::bosdyn::api::RobotCommandRequest)},
  { 23, -1, sizeof(::bosdyn::api::RobotCommandResponse)},
  { 33, -1, sizeof(::bosdyn::api::RobotCommandFeedbackRequest)},
  { 40, -1, sizeof(::bosdyn::api::RobotCommandFeedbackResponse)},
  { 49, -1, sizeof(::bosdyn::api::ClearBehaviorFaultRequest)},
  { 57, -1, sizeof(::bosdyn::api::ClearBehaviorFaultResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_RobotCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_RobotCommandFeedback_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_RobotCommandRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_RobotCommandResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_RobotCommandFeedbackRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_RobotCommandFeedbackResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_ClearBehaviorFaultRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_ClearBehaviorFaultResponse_default_instance_),
};

const char descriptor_table_protodef_bosdyn_2fapi_2frobot_5fcommand_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036bosdyn/api/robot_command.proto\022\nbosdyn"
  ".api\032\027bosdyn/api/header.proto\032\026bosdyn/ap"
  "i/lease.proto\032\"bosdyn/api/full_body_comm"
  "and.proto\032!bosdyn/api/mobility_command.p"
  "roto\"\215\001\n\014RobotCommand\022>\n\021full_body_comma"
  "nd\030\001 \001(\0132#.bosdyn.api.FullBodyCommand.Re"
  "quest\022=\n\020mobility_command\030\002 \001(\0132#.bosdyn"
  ".api.MobilityCommand.Request\"\231\001\n\024RobotCo"
  "mmandFeedback\022@\n\022full_body_feedback\030\002 \001("
  "\0132$.bosdyn.api.FullBodyCommand.Feedback\022"
  "\?\n\021mobility_feedback\030\001 \001(\0132$.bosdyn.api."
  "MobilityCommand.Feedback\"\247\001\n\023RobotComman"
  "dRequest\022)\n\006header\030\001 \001(\0132\031.bosdyn.api.Re"
  "questHeader\022 \n\005lease\030\002 \001(\0132\021.bosdyn.api."
  "Lease\022)\n\007command\030\003 \001(\0132\030.bosdyn.api.Robo"
  "tCommand\022\030\n\020clock_identifier\030\004 \001(\t\"\322\003\n\024R"
  "obotCommandResponse\022*\n\006header\030\001 \001(\0132\032.bo"
  "sdyn.api.ResponseHeader\0224\n\020lease_use_res"
  "ult\030\002 \001(\0132\032.bosdyn.api.LeaseUseResult\0227\n"
  "\006status\030\003 \001(\0162\'.bosdyn.api.RobotCommandR"
  "esponse.Status\022\017\n\007message\030\004 \001(\t\022\030\n\020robot"
  "_command_id\030\005 \001(\r\"\363\001\n\006Status\022\022\n\016STATUS_U"
  "NKNOWN\020\000\022\r\n\tSTATUS_OK\020\001\022\032\n\026STATUS_INVALI"
  "D_REQUEST\020\002\022\026\n\022STATUS_UNSUPPORTED\020\003\022\026\n\022S"
  "TATUS_NO_TIMESYNC\020\004\022\022\n\016STATUS_EXPIRED\020\005\022"
  "\026\n\022STATUS_TOO_DISTANT\020\006\022\031\n\025STATUS_NOT_PO"
  "WERED_ON\020\007\022\031\n\025STATUS_BEHAVIOR_FAULT\020\t\022\030\n"
  "\024STATUS_UNKNOWN_FRAME\020\010\"b\n\033RobotCommandF"
  "eedbackRequest\022)\n\006header\030\001 \001(\0132\031.bosdyn."
  "api.RequestHeader\022\030\n\020robot_command_id\030\002 "
  "\001(\r\"\334\002\n\034RobotCommandFeedbackResponse\022*\n\006"
  "header\030\001 \001(\0132\032.bosdyn.api.ResponseHeader"
  "\022\?\n\006status\030\002 \001(\0162/.bosdyn.api.RobotComma"
  "ndFeedbackResponse.Status\022\017\n\007message\030\003 \001"
  "(\t\0222\n\010feedback\030\004 \001(\0132 .bosdyn.api.RobotC"
  "ommandFeedback\"\211\001\n\006Status\022\022\n\016STATUS_UNKN"
  "OWN\020\000\022\025\n\021STATUS_PROCESSING\020\001\022\035\n\031STATUS_C"
  "OMMAND_OVERRIDDEN\020\002\022\034\n\030STATUS_COMMAND_TI"
  "MED_OUT\020\003\022\027\n\023STATUS_ROBOT_FROZEN\020\004\"\203\001\n\031C"
  "learBehaviorFaultRequest\022)\n\006header\030\001 \001(\013"
  "2\031.bosdyn.api.RequestHeader\022 \n\005lease\030\002 \001"
  "(\0132\021.bosdyn.api.Lease\022\031\n\021behavior_fault_"
  "id\030\003 \001(\r\"\207\002\n\032ClearBehaviorFaultResponse\022"
  "*\n\006header\030\001 \001(\0132\032.bosdyn.api.ResponseHea"
  "der\0224\n\020lease_use_result\030\002 \001(\0132\032.bosdyn.a"
  "pi.LeaseUseResult\022=\n\006status\030\003 \001(\0162-.bosd"
  "yn.api.ClearBehaviorFaultResponse.Status"
  "\"H\n\006Status\022\022\n\016STATUS_UNKNOWN\020\000\022\022\n\016STATUS"
  "_CLEARED\020\001\022\026\n\022STATUS_NOT_CLEARED\020\002B\023B\021Ro"
  "botCommandProtob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bosdyn_2fapi_2frobot_5fcommand_2eproto_deps[4] = {
  &::descriptor_table_bosdyn_2fapi_2ffull_5fbody_5fcommand_2eproto,
  &::descriptor_table_bosdyn_2fapi_2fheader_2eproto,
  &::descriptor_table_bosdyn_2fapi_2flease_2eproto,
  &::descriptor_table_bosdyn_2fapi_2fmobility_5fcommand_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bosdyn_2fapi_2frobot_5fcommand_2eproto_sccs[8] = {
  &scc_info_ClearBehaviorFaultRequest_bosdyn_2fapi_2frobot_5fcommand_2eproto.base,
  &scc_info_ClearBehaviorFaultResponse_bosdyn_2fapi_2frobot_5fcommand_2eproto.base,
  &scc_info_RobotCommand_bosdyn_2fapi_2frobot_5fcommand_2eproto.base,
  &scc_info_RobotCommandFeedback_bosdyn_2fapi_2frobot_5fcommand_2eproto.base,
  &scc_info_RobotCommandFeedbackRequest_bosdyn_2fapi_2frobot_5fcommand_2eproto.base,
  &scc_info_RobotCommandFeedbackResponse_bosdyn_2fapi_2frobot_5fcommand_2eproto.base,
  &scc_info_RobotCommandRequest_bosdyn_2fapi_2frobot_5fcommand_2eproto.base,
  &scc_info_RobotCommandResponse_bosdyn_2fapi_2frobot_5fcommand_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bosdyn_2fapi_2frobot_5fcommand_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2frobot_5fcommand_2eproto = {
  false, false, descriptor_table_protodef_bosdyn_2fapi_2frobot_5fcommand_2eproto, "bosdyn/api/robot_command.proto", 1983,
  &descriptor_table_bosdyn_2fapi_2frobot_5fcommand_2eproto_once, descriptor_table_bosdyn_2fapi_2frobot_5fcommand_2eproto_sccs, descriptor_table_bosdyn_2fapi_2frobot_5fcommand_2eproto_deps, 8, 4,
  schemas, file_default_instances, TableStruct_bosdyn_2fapi_2frobot_5fcommand_2eproto::offsets,
  file_level_metadata_bosdyn_2fapi_2frobot_5fcommand_2eproto, 8, file_level_enum_descriptors_bosdyn_2fapi_2frobot_5fcommand_2eproto, file_level_service_descriptors_bosdyn_2fapi_2frobot_5fcommand_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bosdyn_2fapi_2frobot_5fcommand_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bosdyn_2fapi_2frobot_5fcommand_2eproto)), true);
namespace bosdyn {
namespace api {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RobotCommandResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2frobot_5fcommand_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2frobot_5fcommand_2eproto[0];
}
bool RobotCommandResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RobotCommandResponse_Status RobotCommandResponse::STATUS_UNKNOWN;
constexpr RobotCommandResponse_Status RobotCommandResponse::STATUS_OK;
constexpr RobotCommandResponse_Status RobotCommandResponse::STATUS_INVALID_REQUEST;
constexpr RobotCommandResponse_Status RobotCommandResponse::STATUS_UNSUPPORTED;
constexpr RobotCommandResponse_Status RobotCommandResponse::STATUS_NO_TIMESYNC;
constexpr RobotCommandResponse_Status RobotCommandResponse::STATUS_EXPIRED;
constexpr RobotCommandResponse_Status RobotCommandResponse::STATUS_TOO_DISTANT;
constexpr RobotCommandResponse_Status RobotCommandResponse::STATUS_NOT_POWERED_ON;
constexpr RobotCommandResponse_Status RobotCommandResponse::STATUS_BEHAVIOR_FAULT;
constexpr RobotCommandResponse_Status RobotCommandResponse::STATUS_UNKNOWN_FRAME;
constexpr RobotCommandResponse_Status RobotCommandResponse::Status_MIN;
constexpr RobotCommandResponse_Status RobotCommandResponse::Status_MAX;
constexpr int RobotCommandResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RobotCommandFeedbackResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2frobot_5fcommand_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2frobot_5fcommand_2eproto[1];
}
bool RobotCommandFeedbackResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RobotCommandFeedbackResponse_Status RobotCommandFeedbackResponse::STATUS_UNKNOWN;
constexpr RobotCommandFeedbackResponse_Status RobotCommandFeedbackResponse::STATUS_PROCESSING;
constexpr RobotCommandFeedbackResponse_Status RobotCommandFeedbackResponse::STATUS_COMMAND_OVERRIDDEN;
constexpr RobotCommandFeedbackResponse_Status RobotCommandFeedbackResponse::STATUS_COMMAND_TIMED_OUT;
constexpr RobotCommandFeedbackResponse_Status RobotCommandFeedbackResponse::STATUS_ROBOT_FROZEN;
constexpr RobotCommandFeedbackResponse_Status RobotCommandFeedbackResponse::Status_MIN;
constexpr RobotCommandFeedbackResponse_Status RobotCommandFeedbackResponse::Status_MAX;
constexpr int RobotCommandFeedbackResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClearBehaviorFaultResponse_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2frobot_5fcommand_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2frobot_5fcommand_2eproto[2];
}
bool ClearBehaviorFaultResponse_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ClearBehaviorFaultResponse_Status ClearBehaviorFaultResponse::STATUS_UNKNOWN;
constexpr ClearBehaviorFaultResponse_Status ClearBehaviorFaultResponse::STATUS_CLEARED;
constexpr ClearBehaviorFaultResponse_Status ClearBehaviorFaultResponse::STATUS_NOT_CLEARED;
constexpr ClearBehaviorFaultResponse_Status ClearBehaviorFaultResponse::Status_MIN;
constexpr ClearBehaviorFaultResponse_Status ClearBehaviorFaultResponse::Status_MAX;
constexpr int ClearBehaviorFaultResponse::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void RobotCommand::InitAsDefaultInstance() {
  ::bosdyn::api::_RobotCommand_default_instance_._instance.get_mutable()->full_body_command_ = const_cast< ::bosdyn::api::FullBodyCommand_Request*>(
      ::bosdyn::api::FullBodyCommand_Request::internal_default_instance());
  ::bosdyn::api::_RobotCommand_default_instance_._instance.get_mutable()->mobility_command_ = const_cast< ::bosdyn::api::MobilityCommand_Request*>(
      ::bosdyn::api::MobilityCommand_Request::internal_default_instance());
}
class RobotCommand::_Internal {
 public:
  static const ::bosdyn::api::FullBodyCommand_Request& full_body_command(const RobotCommand* msg);
  static const ::bosdyn::api::MobilityCommand_Request& mobility_command(const RobotCommand* msg);
};

const ::bosdyn::api::FullBodyCommand_Request&
RobotCommand::_Internal::full_body_command(const RobotCommand* msg) {
  return *msg->full_body_command_;
}
const ::bosdyn::api::MobilityCommand_Request&
RobotCommand::_Internal::mobility_command(const RobotCommand* msg) {
  return *msg->mobility_command_;
}
void RobotCommand::clear_full_body_command() {
  if (GetArena() == nullptr && full_body_command_ != nullptr) {
    delete full_body_command_;
  }
  full_body_command_ = nullptr;
}
void RobotCommand::clear_mobility_command() {
  if (GetArena() == nullptr && mobility_command_ != nullptr) {
    delete mobility_command_;
  }
  mobility_command_ = nullptr;
}
RobotCommand::RobotCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.RobotCommand)
}
RobotCommand::RobotCommand(const RobotCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_full_body_command()) {
    full_body_command_ = new ::bosdyn::api::FullBodyCommand_Request(*from.full_body_command_);
  } else {
    full_body_command_ = nullptr;
  }
  if (from._internal_has_mobility_command()) {
    mobility_command_ = new ::bosdyn::api::MobilityCommand_Request(*from.mobility_command_);
  } else {
    mobility_command_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.RobotCommand)
}

void RobotCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RobotCommand_bosdyn_2fapi_2frobot_5fcommand_2eproto.base);
  ::memset(&full_body_command_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mobility_command_) -
      reinterpret_cast<char*>(&full_body_command_)) + sizeof(mobility_command_));
}

RobotCommand::~RobotCommand() {
  // @@protoc_insertion_point(destructor:bosdyn.api.RobotCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RobotCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete full_body_command_;
  if (this != internal_default_instance()) delete mobility_command_;
}

void RobotCommand::ArenaDtor(void* object) {
  RobotCommand* _this = reinterpret_cast< RobotCommand* >(object);
  (void)_this;
}
void RobotCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RobotCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RobotCommand& RobotCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RobotCommand_bosdyn_2fapi_2frobot_5fcommand_2eproto.base);
  return *internal_default_instance();
}


void RobotCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.RobotCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && full_body_command_ != nullptr) {
    delete full_body_command_;
  }
  full_body_command_ = nullptr;
  if (GetArena() == nullptr && mobility_command_ != nullptr) {
    delete mobility_command_;
  }
  mobility_command_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.FullBodyCommand.Request full_body_command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_full_body_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.MobilityCommand.Request mobility_command = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mobility_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RobotCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.RobotCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.FullBodyCommand.Request full_body_command = 1;
  if (this->has_full_body_command()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::full_body_command(this), target, stream);
  }

  // .bosdyn.api.MobilityCommand.Request mobility_command = 2;
  if (this->has_mobility_command()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::mobility_command(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.RobotCommand)
  return target;
}

size_t RobotCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.RobotCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.FullBodyCommand.Request full_body_command = 1;
  if (this->has_full_body_command()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *full_body_command_);
  }

  // .bosdyn.api.MobilityCommand.Request mobility_command = 2;
  if (this->has_mobility_command()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mobility_command_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.RobotCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RobotCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.RobotCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.RobotCommand)
    MergeFrom(*source);
  }
}

void RobotCommand::MergeFrom(const RobotCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.RobotCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_full_body_command()) {
    _internal_mutable_full_body_command()->::bosdyn::api::FullBodyCommand_Request::MergeFrom(from._internal_full_body_command());
  }
  if (from.has_mobility_command()) {
    _internal_mutable_mobility_command()->::bosdyn::api::MobilityCommand_Request::MergeFrom(from._internal_mobility_command());
  }
}

void RobotCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.RobotCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotCommand::CopyFrom(const RobotCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.RobotCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotCommand::IsInitialized() const {
  return true;
}

void RobotCommand::InternalSwap(RobotCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RobotCommand, mobility_command_)
      + sizeof(RobotCommand::mobility_command_)
      - PROTOBUF_FIELD_OFFSET(RobotCommand, full_body_command_)>(
          reinterpret_cast<char*>(&full_body_command_),
          reinterpret_cast<char*>(&other->full_body_command_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RobotCommandFeedback::InitAsDefaultInstance() {
  ::bosdyn::api::_RobotCommandFeedback_default_instance_._instance.get_mutable()->full_body_feedback_ = const_cast< ::bosdyn::api::FullBodyCommand_Feedback*>(
      ::bosdyn::api::FullBodyCommand_Feedback::internal_default_instance());
  ::bosdyn::api::_RobotCommandFeedback_default_instance_._instance.get_mutable()->mobility_feedback_ = const_cast< ::bosdyn::api::MobilityCommand_Feedback*>(
      ::bosdyn::api::MobilityCommand_Feedback::internal_default_instance());
}
class RobotCommandFeedback::_Internal {
 public:
  static const ::bosdyn::api::FullBodyCommand_Feedback& full_body_feedback(const RobotCommandFeedback* msg);
  static const ::bosdyn::api::MobilityCommand_Feedback& mobility_feedback(const RobotCommandFeedback* msg);
};

const ::bosdyn::api::FullBodyCommand_Feedback&
RobotCommandFeedback::_Internal::full_body_feedback(const RobotCommandFeedback* msg) {
  return *msg->full_body_feedback_;
}
const ::bosdyn::api::MobilityCommand_Feedback&
RobotCommandFeedback::_Internal::mobility_feedback(const RobotCommandFeedback* msg) {
  return *msg->mobility_feedback_;
}
void RobotCommandFeedback::clear_full_body_feedback() {
  if (GetArena() == nullptr && full_body_feedback_ != nullptr) {
    delete full_body_feedback_;
  }
  full_body_feedback_ = nullptr;
}
void RobotCommandFeedback::clear_mobility_feedback() {
  if (GetArena() == nullptr && mobility_feedback_ != nullptr) {
    delete mobility_feedback_;
  }
  mobility_feedback_ = nullptr;
}
RobotCommandFeedback::RobotCommandFeedback(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.RobotCommandFeedback)
}
RobotCommandFeedback::RobotCommandFeedback(const RobotCommandFeedback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mobility_feedback()) {
    mobility_feedback_ = new ::bosdyn::api::MobilityCommand_Feedback(*from.mobility_feedback_);
  } else {
    mobility_feedback_ = nullptr;
  }
  if (from._internal_has_full_body_feedback()) {
    full_body_feedback_ = new ::bosdyn::api::FullBodyCommand_Feedback(*from.full_body_feedback_);
  } else {
    full_body_feedback_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.RobotCommandFeedback)
}

void RobotCommandFeedback::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RobotCommandFeedback_bosdyn_2fapi_2frobot_5fcommand_2eproto.base);
  ::memset(&mobility_feedback_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&full_body_feedback_) -
      reinterpret_cast<char*>(&mobility_feedback_)) + sizeof(full_body_feedback_));
}

RobotCommandFeedback::~RobotCommandFeedback() {
  // @@protoc_insertion_point(destructor:bosdyn.api.RobotCommandFeedback)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RobotCommandFeedback::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete mobility_feedback_;
  if (this != internal_default_instance()) delete full_body_feedback_;
}

void RobotCommandFeedback::ArenaDtor(void* object) {
  RobotCommandFeedback* _this = reinterpret_cast< RobotCommandFeedback* >(object);
  (void)_this;
}
void RobotCommandFeedback::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RobotCommandFeedback::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RobotCommandFeedback& RobotCommandFeedback::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RobotCommandFeedback_bosdyn_2fapi_2frobot_5fcommand_2eproto.base);
  return *internal_default_instance();
}


void RobotCommandFeedback::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.RobotCommandFeedback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && mobility_feedback_ != nullptr) {
    delete mobility_feedback_;
  }
  mobility_feedback_ = nullptr;
  if (GetArena() == nullptr && full_body_feedback_ != nullptr) {
    delete full_body_feedback_;
  }
  full_body_feedback_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotCommandFeedback::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.MobilityCommand.Feedback mobility_feedback = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mobility_feedback(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.FullBodyCommand.Feedback full_body_feedback = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_full_body_feedback(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RobotCommandFeedback::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.RobotCommandFeedback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.MobilityCommand.Feedback mobility_feedback = 1;
  if (this->has_mobility_feedback()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::mobility_feedback(this), target, stream);
  }

  // .bosdyn.api.FullBodyCommand.Feedback full_body_feedback = 2;
  if (this->has_full_body_feedback()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::full_body_feedback(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.RobotCommandFeedback)
  return target;
}

size_t RobotCommandFeedback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.RobotCommandFeedback)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.MobilityCommand.Feedback mobility_feedback = 1;
  if (this->has_mobility_feedback()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mobility_feedback_);
  }

  // .bosdyn.api.FullBodyCommand.Feedback full_body_feedback = 2;
  if (this->has_full_body_feedback()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *full_body_feedback_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotCommandFeedback::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.RobotCommandFeedback)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotCommandFeedback* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RobotCommandFeedback>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.RobotCommandFeedback)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.RobotCommandFeedback)
    MergeFrom(*source);
  }
}

void RobotCommandFeedback::MergeFrom(const RobotCommandFeedback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.RobotCommandFeedback)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_mobility_feedback()) {
    _internal_mutable_mobility_feedback()->::bosdyn::api::MobilityCommand_Feedback::MergeFrom(from._internal_mobility_feedback());
  }
  if (from.has_full_body_feedback()) {
    _internal_mutable_full_body_feedback()->::bosdyn::api::FullBodyCommand_Feedback::MergeFrom(from._internal_full_body_feedback());
  }
}

void RobotCommandFeedback::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.RobotCommandFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotCommandFeedback::CopyFrom(const RobotCommandFeedback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.RobotCommandFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotCommandFeedback::IsInitialized() const {
  return true;
}

void RobotCommandFeedback::InternalSwap(RobotCommandFeedback* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RobotCommandFeedback, full_body_feedback_)
      + sizeof(RobotCommandFeedback::full_body_feedback_)
      - PROTOBUF_FIELD_OFFSET(RobotCommandFeedback, mobility_feedback_)>(
          reinterpret_cast<char*>(&mobility_feedback_),
          reinterpret_cast<char*>(&other->mobility_feedback_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotCommandFeedback::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RobotCommandRequest::InitAsDefaultInstance() {
  ::bosdyn::api::_RobotCommandRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
  ::bosdyn::api::_RobotCommandRequest_default_instance_._instance.get_mutable()->lease_ = const_cast< ::bosdyn::api::Lease*>(
      ::bosdyn::api::Lease::internal_default_instance());
  ::bosdyn::api::_RobotCommandRequest_default_instance_._instance.get_mutable()->command_ = const_cast< ::bosdyn::api::RobotCommand*>(
      ::bosdyn::api::RobotCommand::internal_default_instance());
}
class RobotCommandRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const RobotCommandRequest* msg);
  static const ::bosdyn::api::Lease& lease(const RobotCommandRequest* msg);
  static const ::bosdyn::api::RobotCommand& command(const RobotCommandRequest* msg);
};

const ::bosdyn::api::RequestHeader&
RobotCommandRequest::_Internal::header(const RobotCommandRequest* msg) {
  return *msg->header_;
}
const ::bosdyn::api::Lease&
RobotCommandRequest::_Internal::lease(const RobotCommandRequest* msg) {
  return *msg->lease_;
}
const ::bosdyn::api::RobotCommand&
RobotCommandRequest::_Internal::command(const RobotCommandRequest* msg) {
  return *msg->command_;
}
void RobotCommandRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void RobotCommandRequest::clear_lease() {
  if (GetArena() == nullptr && lease_ != nullptr) {
    delete lease_;
  }
  lease_ = nullptr;
}
RobotCommandRequest::RobotCommandRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.RobotCommandRequest)
}
RobotCommandRequest::RobotCommandRequest(const RobotCommandRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clock_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clock_identifier().empty()) {
    clock_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_clock_identifier(),
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_lease()) {
    lease_ = new ::bosdyn::api::Lease(*from.lease_);
  } else {
    lease_ = nullptr;
  }
  if (from._internal_has_command()) {
    command_ = new ::bosdyn::api::RobotCommand(*from.command_);
  } else {
    command_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.RobotCommandRequest)
}

void RobotCommandRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RobotCommandRequest_bosdyn_2fapi_2frobot_5fcommand_2eproto.base);
  clock_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&command_) -
      reinterpret_cast<char*>(&header_)) + sizeof(command_));
}

RobotCommandRequest::~RobotCommandRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.RobotCommandRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RobotCommandRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  clock_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete lease_;
  if (this != internal_default_instance()) delete command_;
}

void RobotCommandRequest::ArenaDtor(void* object) {
  RobotCommandRequest* _this = reinterpret_cast< RobotCommandRequest* >(object);
  (void)_this;
}
void RobotCommandRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RobotCommandRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RobotCommandRequest& RobotCommandRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RobotCommandRequest_bosdyn_2fapi_2frobot_5fcommand_2eproto.base);
  return *internal_default_instance();
}


void RobotCommandRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.RobotCommandRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clock_identifier_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && lease_ != nullptr) {
    delete lease_;
  }
  lease_ = nullptr;
  if (GetArena() == nullptr && command_ != nullptr) {
    delete command_;
  }
  command_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotCommandRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.Lease lease = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lease(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.RobotCommand command = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string clock_identifier = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_clock_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.RobotCommandRequest.clock_identifier"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RobotCommandRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.RobotCommandRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.Lease lease = 2;
  if (this->has_lease()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::lease(this), target, stream);
  }

  // .bosdyn.api.RobotCommand command = 3;
  if (this->has_command()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::command(this), target, stream);
  }

  // string clock_identifier = 4;
  if (this->clock_identifier().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clock_identifier().data(), static_cast<int>(this->_internal_clock_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.RobotCommandRequest.clock_identifier");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_clock_identifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.RobotCommandRequest)
  return target;
}

size_t RobotCommandRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.RobotCommandRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string clock_identifier = 4;
  if (this->clock_identifier().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clock_identifier());
  }

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.Lease lease = 2;
  if (this->has_lease()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lease_);
  }

  // .bosdyn.api.RobotCommand command = 3;
  if (this->has_command()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *command_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotCommandRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.RobotCommandRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotCommandRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RobotCommandRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.RobotCommandRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.RobotCommandRequest)
    MergeFrom(*source);
  }
}

void RobotCommandRequest::MergeFrom(const RobotCommandRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.RobotCommandRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.clock_identifier().size() > 0) {
    _internal_set_clock_identifier(from._internal_clock_identifier());
  }
  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
  if (from.has_lease()) {
    _internal_mutable_lease()->::bosdyn::api::Lease::MergeFrom(from._internal_lease());
  }
  if (from.has_command()) {
    _internal_mutable_command()->::bosdyn::api::RobotCommand::MergeFrom(from._internal_command());
  }
}

void RobotCommandRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.RobotCommandRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotCommandRequest::CopyFrom(const RobotCommandRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.RobotCommandRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotCommandRequest::IsInitialized() const {
  return true;
}

void RobotCommandRequest::InternalSwap(RobotCommandRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  clock_identifier_.Swap(&other->clock_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RobotCommandRequest, command_)
      + sizeof(RobotCommandRequest::command_)
      - PROTOBUF_FIELD_OFFSET(RobotCommandRequest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotCommandRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RobotCommandResponse::InitAsDefaultInstance() {
  ::bosdyn::api::_RobotCommandResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
  ::bosdyn::api::_RobotCommandResponse_default_instance_._instance.get_mutable()->lease_use_result_ = const_cast< ::bosdyn::api::LeaseUseResult*>(
      ::bosdyn::api::LeaseUseResult::internal_default_instance());
}
class RobotCommandResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const RobotCommandResponse* msg);
  static const ::bosdyn::api::LeaseUseResult& lease_use_result(const RobotCommandResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
RobotCommandResponse::_Internal::header(const RobotCommandResponse* msg) {
  return *msg->header_;
}
const ::bosdyn::api::LeaseUseResult&
RobotCommandResponse::_Internal::lease_use_result(const RobotCommandResponse* msg) {
  return *msg->lease_use_result_;
}
void RobotCommandResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void RobotCommandResponse::clear_lease_use_result() {
  if (GetArena() == nullptr && lease_use_result_ != nullptr) {
    delete lease_use_result_;
  }
  lease_use_result_ = nullptr;
}
RobotCommandResponse::RobotCommandResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.RobotCommandResponse)
}
RobotCommandResponse::RobotCommandResponse(const RobotCommandResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_lease_use_result()) {
    lease_use_result_ = new ::bosdyn::api::LeaseUseResult(*from.lease_use_result_);
  } else {
    lease_use_result_ = nullptr;
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&robot_command_id_) -
    reinterpret_cast<char*>(&status_)) + sizeof(robot_command_id_));
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.RobotCommandResponse)
}

void RobotCommandResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RobotCommandResponse_bosdyn_2fapi_2frobot_5fcommand_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&robot_command_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(robot_command_id_));
}

RobotCommandResponse::~RobotCommandResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.RobotCommandResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RobotCommandResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete lease_use_result_;
}

void RobotCommandResponse::ArenaDtor(void* object) {
  RobotCommandResponse* _this = reinterpret_cast< RobotCommandResponse* >(object);
  (void)_this;
}
void RobotCommandResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RobotCommandResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RobotCommandResponse& RobotCommandResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RobotCommandResponse_bosdyn_2fapi_2frobot_5fcommand_2eproto.base);
  return *internal_default_instance();
}


void RobotCommandResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.RobotCommandResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && lease_use_result_ != nullptr) {
    delete lease_use_result_;
  }
  lease_use_result_ = nullptr;
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&robot_command_id_) -
      reinterpret_cast<char*>(&status_)) + sizeof(robot_command_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotCommandResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.LeaseUseResult lease_use_result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lease_use_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.RobotCommandResponse.Status status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::bosdyn::api::RobotCommandResponse_Status>(val));
        } else goto handle_unusual;
        continue;
      // string message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.RobotCommandResponse.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 robot_command_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          robot_command_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RobotCommandResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.RobotCommandResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.LeaseUseResult lease_use_result = 2;
  if (this->has_lease_use_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::lease_use_result(this), target, stream);
  }

  // .bosdyn.api.RobotCommandResponse.Status status = 3;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_status(), target);
  }

  // string message = 4;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.RobotCommandResponse.message");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_message(), target);
  }

  // uint32 robot_command_id = 5;
  if (this->robot_command_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_robot_command_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.RobotCommandResponse)
  return target;
}

size_t RobotCommandResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.RobotCommandResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 4;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.LeaseUseResult lease_use_result = 2;
  if (this->has_lease_use_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lease_use_result_);
  }

  // .bosdyn.api.RobotCommandResponse.Status status = 3;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // uint32 robot_command_id = 5;
  if (this->robot_command_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_robot_command_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotCommandResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.RobotCommandResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotCommandResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RobotCommandResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.RobotCommandResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.RobotCommandResponse)
    MergeFrom(*source);
  }
}

void RobotCommandResponse::MergeFrom(const RobotCommandResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.RobotCommandResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.has_lease_use_result()) {
    _internal_mutable_lease_use_result()->::bosdyn::api::LeaseUseResult::MergeFrom(from._internal_lease_use_result());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.robot_command_id() != 0) {
    _internal_set_robot_command_id(from._internal_robot_command_id());
  }
}

void RobotCommandResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.RobotCommandResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotCommandResponse::CopyFrom(const RobotCommandResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.RobotCommandResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotCommandResponse::IsInitialized() const {
  return true;
}

void RobotCommandResponse::InternalSwap(RobotCommandResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RobotCommandResponse, robot_command_id_)
      + sizeof(RobotCommandResponse::robot_command_id_)
      - PROTOBUF_FIELD_OFFSET(RobotCommandResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotCommandResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RobotCommandFeedbackRequest::InitAsDefaultInstance() {
  ::bosdyn::api::_RobotCommandFeedbackRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
}
class RobotCommandFeedbackRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const RobotCommandFeedbackRequest* msg);
};

const ::bosdyn::api::RequestHeader&
RobotCommandFeedbackRequest::_Internal::header(const RobotCommandFeedbackRequest* msg) {
  return *msg->header_;
}
void RobotCommandFeedbackRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
RobotCommandFeedbackRequest::RobotCommandFeedbackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.RobotCommandFeedbackRequest)
}
RobotCommandFeedbackRequest::RobotCommandFeedbackRequest(const RobotCommandFeedbackRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  robot_command_id_ = from.robot_command_id_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.RobotCommandFeedbackRequest)
}

void RobotCommandFeedbackRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RobotCommandFeedbackRequest_bosdyn_2fapi_2frobot_5fcommand_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&robot_command_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(robot_command_id_));
}

RobotCommandFeedbackRequest::~RobotCommandFeedbackRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.RobotCommandFeedbackRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RobotCommandFeedbackRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void RobotCommandFeedbackRequest::ArenaDtor(void* object) {
  RobotCommandFeedbackRequest* _this = reinterpret_cast< RobotCommandFeedbackRequest* >(object);
  (void)_this;
}
void RobotCommandFeedbackRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RobotCommandFeedbackRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RobotCommandFeedbackRequest& RobotCommandFeedbackRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RobotCommandFeedbackRequest_bosdyn_2fapi_2frobot_5fcommand_2eproto.base);
  return *internal_default_instance();
}


void RobotCommandFeedbackRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.RobotCommandFeedbackRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  robot_command_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotCommandFeedbackRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 robot_command_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          robot_command_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RobotCommandFeedbackRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.RobotCommandFeedbackRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // uint32 robot_command_id = 2;
  if (this->robot_command_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_robot_command_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.RobotCommandFeedbackRequest)
  return target;
}

size_t RobotCommandFeedbackRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.RobotCommandFeedbackRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // uint32 robot_command_id = 2;
  if (this->robot_command_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_robot_command_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotCommandFeedbackRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.RobotCommandFeedbackRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotCommandFeedbackRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RobotCommandFeedbackRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.RobotCommandFeedbackRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.RobotCommandFeedbackRequest)
    MergeFrom(*source);
  }
}

void RobotCommandFeedbackRequest::MergeFrom(const RobotCommandFeedbackRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.RobotCommandFeedbackRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
  if (from.robot_command_id() != 0) {
    _internal_set_robot_command_id(from._internal_robot_command_id());
  }
}

void RobotCommandFeedbackRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.RobotCommandFeedbackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotCommandFeedbackRequest::CopyFrom(const RobotCommandFeedbackRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.RobotCommandFeedbackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotCommandFeedbackRequest::IsInitialized() const {
  return true;
}

void RobotCommandFeedbackRequest::InternalSwap(RobotCommandFeedbackRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RobotCommandFeedbackRequest, robot_command_id_)
      + sizeof(RobotCommandFeedbackRequest::robot_command_id_)
      - PROTOBUF_FIELD_OFFSET(RobotCommandFeedbackRequest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotCommandFeedbackRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RobotCommandFeedbackResponse::InitAsDefaultInstance() {
  ::bosdyn::api::_RobotCommandFeedbackResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
  ::bosdyn::api::_RobotCommandFeedbackResponse_default_instance_._instance.get_mutable()->feedback_ = const_cast< ::bosdyn::api::RobotCommandFeedback*>(
      ::bosdyn::api::RobotCommandFeedback::internal_default_instance());
}
class RobotCommandFeedbackResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const RobotCommandFeedbackResponse* msg);
  static const ::bosdyn::api::RobotCommandFeedback& feedback(const RobotCommandFeedbackResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
RobotCommandFeedbackResponse::_Internal::header(const RobotCommandFeedbackResponse* msg) {
  return *msg->header_;
}
const ::bosdyn::api::RobotCommandFeedback&
RobotCommandFeedbackResponse::_Internal::feedback(const RobotCommandFeedbackResponse* msg) {
  return *msg->feedback_;
}
void RobotCommandFeedbackResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
RobotCommandFeedbackResponse::RobotCommandFeedbackResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.RobotCommandFeedbackResponse)
}
RobotCommandFeedbackResponse::RobotCommandFeedbackResponse(const RobotCommandFeedbackResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_feedback()) {
    feedback_ = new ::bosdyn::api::RobotCommandFeedback(*from.feedback_);
  } else {
    feedback_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.RobotCommandFeedbackResponse)
}

void RobotCommandFeedbackResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RobotCommandFeedbackResponse_bosdyn_2fapi_2frobot_5fcommand_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&header_)) + sizeof(status_));
}

RobotCommandFeedbackResponse::~RobotCommandFeedbackResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.RobotCommandFeedbackResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RobotCommandFeedbackResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete feedback_;
}

void RobotCommandFeedbackResponse::ArenaDtor(void* object) {
  RobotCommandFeedbackResponse* _this = reinterpret_cast< RobotCommandFeedbackResponse* >(object);
  (void)_this;
}
void RobotCommandFeedbackResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RobotCommandFeedbackResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RobotCommandFeedbackResponse& RobotCommandFeedbackResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RobotCommandFeedbackResponse_bosdyn_2fapi_2frobot_5fcommand_2eproto.base);
  return *internal_default_instance();
}


void RobotCommandFeedbackResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.RobotCommandFeedbackResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && feedback_ != nullptr) {
    delete feedback_;
  }
  feedback_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotCommandFeedbackResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.RobotCommandFeedbackResponse.Status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::bosdyn::api::RobotCommandFeedbackResponse_Status>(val));
        } else goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.RobotCommandFeedbackResponse.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.RobotCommandFeedback feedback = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_feedback(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RobotCommandFeedbackResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.RobotCommandFeedbackResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.RobotCommandFeedbackResponse.Status status = 2;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // string message = 3;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.RobotCommandFeedbackResponse.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  // .bosdyn.api.RobotCommandFeedback feedback = 4;
  if (this->has_feedback()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::feedback(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.RobotCommandFeedbackResponse)
  return target;
}

size_t RobotCommandFeedbackResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.RobotCommandFeedbackResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 3;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.RobotCommandFeedback feedback = 4;
  if (this->has_feedback()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *feedback_);
  }

  // .bosdyn.api.RobotCommandFeedbackResponse.Status status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotCommandFeedbackResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.RobotCommandFeedbackResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotCommandFeedbackResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RobotCommandFeedbackResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.RobotCommandFeedbackResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.RobotCommandFeedbackResponse)
    MergeFrom(*source);
  }
}

void RobotCommandFeedbackResponse::MergeFrom(const RobotCommandFeedbackResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.RobotCommandFeedbackResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.has_feedback()) {
    _internal_mutable_feedback()->::bosdyn::api::RobotCommandFeedback::MergeFrom(from._internal_feedback());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void RobotCommandFeedbackResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.RobotCommandFeedbackResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotCommandFeedbackResponse::CopyFrom(const RobotCommandFeedbackResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.RobotCommandFeedbackResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotCommandFeedbackResponse::IsInitialized() const {
  return true;
}

void RobotCommandFeedbackResponse::InternalSwap(RobotCommandFeedbackResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RobotCommandFeedbackResponse, status_)
      + sizeof(RobotCommandFeedbackResponse::status_)
      - PROTOBUF_FIELD_OFFSET(RobotCommandFeedbackResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotCommandFeedbackResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClearBehaviorFaultRequest::InitAsDefaultInstance() {
  ::bosdyn::api::_ClearBehaviorFaultRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
  ::bosdyn::api::_ClearBehaviorFaultRequest_default_instance_._instance.get_mutable()->lease_ = const_cast< ::bosdyn::api::Lease*>(
      ::bosdyn::api::Lease::internal_default_instance());
}
class ClearBehaviorFaultRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const ClearBehaviorFaultRequest* msg);
  static const ::bosdyn::api::Lease& lease(const ClearBehaviorFaultRequest* msg);
};

const ::bosdyn::api::RequestHeader&
ClearBehaviorFaultRequest::_Internal::header(const ClearBehaviorFaultRequest* msg) {
  return *msg->header_;
}
const ::bosdyn::api::Lease&
ClearBehaviorFaultRequest::_Internal::lease(const ClearBehaviorFaultRequest* msg) {
  return *msg->lease_;
}
void ClearBehaviorFaultRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void ClearBehaviorFaultRequest::clear_lease() {
  if (GetArena() == nullptr && lease_ != nullptr) {
    delete lease_;
  }
  lease_ = nullptr;
}
ClearBehaviorFaultRequest::ClearBehaviorFaultRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.ClearBehaviorFaultRequest)
}
ClearBehaviorFaultRequest::ClearBehaviorFaultRequest(const ClearBehaviorFaultRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_lease()) {
    lease_ = new ::bosdyn::api::Lease(*from.lease_);
  } else {
    lease_ = nullptr;
  }
  behavior_fault_id_ = from.behavior_fault_id_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.ClearBehaviorFaultRequest)
}

void ClearBehaviorFaultRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClearBehaviorFaultRequest_bosdyn_2fapi_2frobot_5fcommand_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&behavior_fault_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(behavior_fault_id_));
}

ClearBehaviorFaultRequest::~ClearBehaviorFaultRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.ClearBehaviorFaultRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClearBehaviorFaultRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete lease_;
}

void ClearBehaviorFaultRequest::ArenaDtor(void* object) {
  ClearBehaviorFaultRequest* _this = reinterpret_cast< ClearBehaviorFaultRequest* >(object);
  (void)_this;
}
void ClearBehaviorFaultRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClearBehaviorFaultRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClearBehaviorFaultRequest& ClearBehaviorFaultRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClearBehaviorFaultRequest_bosdyn_2fapi_2frobot_5fcommand_2eproto.base);
  return *internal_default_instance();
}


void ClearBehaviorFaultRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.ClearBehaviorFaultRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && lease_ != nullptr) {
    delete lease_;
  }
  lease_ = nullptr;
  behavior_fault_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClearBehaviorFaultRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.Lease lease = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lease(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 behavior_fault_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          behavior_fault_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClearBehaviorFaultRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.ClearBehaviorFaultRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.Lease lease = 2;
  if (this->has_lease()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::lease(this), target, stream);
  }

  // uint32 behavior_fault_id = 3;
  if (this->behavior_fault_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_behavior_fault_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.ClearBehaviorFaultRequest)
  return target;
}

size_t ClearBehaviorFaultRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.ClearBehaviorFaultRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.Lease lease = 2;
  if (this->has_lease()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lease_);
  }

  // uint32 behavior_fault_id = 3;
  if (this->behavior_fault_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_behavior_fault_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClearBehaviorFaultRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.ClearBehaviorFaultRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ClearBehaviorFaultRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClearBehaviorFaultRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.ClearBehaviorFaultRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.ClearBehaviorFaultRequest)
    MergeFrom(*source);
  }
}

void ClearBehaviorFaultRequest::MergeFrom(const ClearBehaviorFaultRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.ClearBehaviorFaultRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
  if (from.has_lease()) {
    _internal_mutable_lease()->::bosdyn::api::Lease::MergeFrom(from._internal_lease());
  }
  if (from.behavior_fault_id() != 0) {
    _internal_set_behavior_fault_id(from._internal_behavior_fault_id());
  }
}

void ClearBehaviorFaultRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.ClearBehaviorFaultRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClearBehaviorFaultRequest::CopyFrom(const ClearBehaviorFaultRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.ClearBehaviorFaultRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearBehaviorFaultRequest::IsInitialized() const {
  return true;
}

void ClearBehaviorFaultRequest::InternalSwap(ClearBehaviorFaultRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClearBehaviorFaultRequest, behavior_fault_id_)
      + sizeof(ClearBehaviorFaultRequest::behavior_fault_id_)
      - PROTOBUF_FIELD_OFFSET(ClearBehaviorFaultRequest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClearBehaviorFaultRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClearBehaviorFaultResponse::InitAsDefaultInstance() {
  ::bosdyn::api::_ClearBehaviorFaultResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
  ::bosdyn::api::_ClearBehaviorFaultResponse_default_instance_._instance.get_mutable()->lease_use_result_ = const_cast< ::bosdyn::api::LeaseUseResult*>(
      ::bosdyn::api::LeaseUseResult::internal_default_instance());
}
class ClearBehaviorFaultResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const ClearBehaviorFaultResponse* msg);
  static const ::bosdyn::api::LeaseUseResult& lease_use_result(const ClearBehaviorFaultResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
ClearBehaviorFaultResponse::_Internal::header(const ClearBehaviorFaultResponse* msg) {
  return *msg->header_;
}
const ::bosdyn::api::LeaseUseResult&
ClearBehaviorFaultResponse::_Internal::lease_use_result(const ClearBehaviorFaultResponse* msg) {
  return *msg->lease_use_result_;
}
void ClearBehaviorFaultResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void ClearBehaviorFaultResponse::clear_lease_use_result() {
  if (GetArena() == nullptr && lease_use_result_ != nullptr) {
    delete lease_use_result_;
  }
  lease_use_result_ = nullptr;
}
ClearBehaviorFaultResponse::ClearBehaviorFaultResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.ClearBehaviorFaultResponse)
}
ClearBehaviorFaultResponse::ClearBehaviorFaultResponse(const ClearBehaviorFaultResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_lease_use_result()) {
    lease_use_result_ = new ::bosdyn::api::LeaseUseResult(*from.lease_use_result_);
  } else {
    lease_use_result_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.ClearBehaviorFaultResponse)
}

void ClearBehaviorFaultResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClearBehaviorFaultResponse_bosdyn_2fapi_2frobot_5fcommand_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&header_)) + sizeof(status_));
}

ClearBehaviorFaultResponse::~ClearBehaviorFaultResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.ClearBehaviorFaultResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClearBehaviorFaultResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete lease_use_result_;
}

void ClearBehaviorFaultResponse::ArenaDtor(void* object) {
  ClearBehaviorFaultResponse* _this = reinterpret_cast< ClearBehaviorFaultResponse* >(object);
  (void)_this;
}
void ClearBehaviorFaultResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClearBehaviorFaultResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClearBehaviorFaultResponse& ClearBehaviorFaultResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClearBehaviorFaultResponse_bosdyn_2fapi_2frobot_5fcommand_2eproto.base);
  return *internal_default_instance();
}


void ClearBehaviorFaultResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.ClearBehaviorFaultResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && lease_use_result_ != nullptr) {
    delete lease_use_result_;
  }
  lease_use_result_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClearBehaviorFaultResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.LeaseUseResult lease_use_result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lease_use_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.ClearBehaviorFaultResponse.Status status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::bosdyn::api::ClearBehaviorFaultResponse_Status>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClearBehaviorFaultResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.ClearBehaviorFaultResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.LeaseUseResult lease_use_result = 2;
  if (this->has_lease_use_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::lease_use_result(this), target, stream);
  }

  // .bosdyn.api.ClearBehaviorFaultResponse.Status status = 3;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.ClearBehaviorFaultResponse)
  return target;
}

size_t ClearBehaviorFaultResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.ClearBehaviorFaultResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.LeaseUseResult lease_use_result = 2;
  if (this->has_lease_use_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lease_use_result_);
  }

  // .bosdyn.api.ClearBehaviorFaultResponse.Status status = 3;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClearBehaviorFaultResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.ClearBehaviorFaultResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ClearBehaviorFaultResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClearBehaviorFaultResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.ClearBehaviorFaultResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.ClearBehaviorFaultResponse)
    MergeFrom(*source);
  }
}

void ClearBehaviorFaultResponse::MergeFrom(const ClearBehaviorFaultResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.ClearBehaviorFaultResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.has_lease_use_result()) {
    _internal_mutable_lease_use_result()->::bosdyn::api::LeaseUseResult::MergeFrom(from._internal_lease_use_result());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void ClearBehaviorFaultResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.ClearBehaviorFaultResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClearBehaviorFaultResponse::CopyFrom(const ClearBehaviorFaultResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.ClearBehaviorFaultResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearBehaviorFaultResponse::IsInitialized() const {
  return true;
}

void ClearBehaviorFaultResponse::InternalSwap(ClearBehaviorFaultResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClearBehaviorFaultResponse, status_)
      + sizeof(ClearBehaviorFaultResponse::status_)
      - PROTOBUF_FIELD_OFFSET(ClearBehaviorFaultResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClearBehaviorFaultResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bosdyn::api::RobotCommand* Arena::CreateMaybeMessage< ::bosdyn::api::RobotCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::RobotCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::RobotCommandFeedback* Arena::CreateMaybeMessage< ::bosdyn::api::RobotCommandFeedback >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::RobotCommandFeedback >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::RobotCommandRequest* Arena::CreateMaybeMessage< ::bosdyn::api::RobotCommandRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::RobotCommandRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::RobotCommandResponse* Arena::CreateMaybeMessage< ::bosdyn::api::RobotCommandResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::RobotCommandResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::RobotCommandFeedbackRequest* Arena::CreateMaybeMessage< ::bosdyn::api::RobotCommandFeedbackRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::RobotCommandFeedbackRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::RobotCommandFeedbackResponse* Arena::CreateMaybeMessage< ::bosdyn::api::RobotCommandFeedbackResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::RobotCommandFeedbackResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::ClearBehaviorFaultRequest* Arena::CreateMaybeMessage< ::bosdyn::api::ClearBehaviorFaultRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::ClearBehaviorFaultRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::ClearBehaviorFaultResponse* Arena::CreateMaybeMessage< ::bosdyn::api::ClearBehaviorFaultResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::ClearBehaviorFaultResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
