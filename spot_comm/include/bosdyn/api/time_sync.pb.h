// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/time_sync.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2ftime_5fsync_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2ftime_5fsync_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/duration.pb.h>
#include "bosdyn/api/header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2ftime_5fsync_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bosdyn_2fapi_2ftime_5fsync_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2ftime_5fsync_2eproto;
namespace bosdyn {
namespace api {
class TimeSyncEstimate;
class TimeSyncEstimateDefaultTypeInternal;
extern TimeSyncEstimateDefaultTypeInternal _TimeSyncEstimate_default_instance_;
class TimeSyncRoundTrip;
class TimeSyncRoundTripDefaultTypeInternal;
extern TimeSyncRoundTripDefaultTypeInternal _TimeSyncRoundTrip_default_instance_;
class TimeSyncState;
class TimeSyncStateDefaultTypeInternal;
extern TimeSyncStateDefaultTypeInternal _TimeSyncState_default_instance_;
class TimeSyncUpdateRequest;
class TimeSyncUpdateRequestDefaultTypeInternal;
extern TimeSyncUpdateRequestDefaultTypeInternal _TimeSyncUpdateRequest_default_instance_;
class TimeSyncUpdateResponse;
class TimeSyncUpdateResponseDefaultTypeInternal;
extern TimeSyncUpdateResponseDefaultTypeInternal _TimeSyncUpdateResponse_default_instance_;
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> ::bosdyn::api::TimeSyncEstimate* Arena::CreateMaybeMessage<::bosdyn::api::TimeSyncEstimate>(Arena*);
template<> ::bosdyn::api::TimeSyncRoundTrip* Arena::CreateMaybeMessage<::bosdyn::api::TimeSyncRoundTrip>(Arena*);
template<> ::bosdyn::api::TimeSyncState* Arena::CreateMaybeMessage<::bosdyn::api::TimeSyncState>(Arena*);
template<> ::bosdyn::api::TimeSyncUpdateRequest* Arena::CreateMaybeMessage<::bosdyn::api::TimeSyncUpdateRequest>(Arena*);
template<> ::bosdyn::api::TimeSyncUpdateResponse* Arena::CreateMaybeMessage<::bosdyn::api::TimeSyncUpdateResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bosdyn {
namespace api {

enum TimeSyncState_Status : int {
  TimeSyncState_Status_STATUS_UNKNOWN = 0,
  TimeSyncState_Status_STATUS_OK = 1,
  TimeSyncState_Status_STATUS_MORE_SAMPLES_NEEDED = 2,
  TimeSyncState_Status_STATUS_SERVICE_NOT_READY = 3,
  TimeSyncState_Status_TimeSyncState_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TimeSyncState_Status_TimeSyncState_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TimeSyncState_Status_IsValid(int value);
constexpr TimeSyncState_Status TimeSyncState_Status_Status_MIN = TimeSyncState_Status_STATUS_UNKNOWN;
constexpr TimeSyncState_Status TimeSyncState_Status_Status_MAX = TimeSyncState_Status_STATUS_SERVICE_NOT_READY;
constexpr int TimeSyncState_Status_Status_ARRAYSIZE = TimeSyncState_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TimeSyncState_Status_descriptor();
template<typename T>
inline const std::string& TimeSyncState_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TimeSyncState_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TimeSyncState_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TimeSyncState_Status_descriptor(), enum_t_value);
}
inline bool TimeSyncState_Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TimeSyncState_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TimeSyncState_Status>(
    TimeSyncState_Status_descriptor(), name, value);
}
// ===================================================================

class TimeSyncRoundTrip PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.TimeSyncRoundTrip) */ {
 public:
  inline TimeSyncRoundTrip() : TimeSyncRoundTrip(nullptr) {}
  virtual ~TimeSyncRoundTrip();

  TimeSyncRoundTrip(const TimeSyncRoundTrip& from);
  TimeSyncRoundTrip(TimeSyncRoundTrip&& from) noexcept
    : TimeSyncRoundTrip() {
    *this = ::std::move(from);
  }

  inline TimeSyncRoundTrip& operator=(const TimeSyncRoundTrip& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeSyncRoundTrip& operator=(TimeSyncRoundTrip&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimeSyncRoundTrip& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimeSyncRoundTrip* internal_default_instance() {
    return reinterpret_cast<const TimeSyncRoundTrip*>(
               &_TimeSyncRoundTrip_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TimeSyncRoundTrip& a, TimeSyncRoundTrip& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeSyncRoundTrip* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeSyncRoundTrip* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimeSyncRoundTrip* New() const final {
    return CreateMaybeMessage<TimeSyncRoundTrip>(nullptr);
  }

  TimeSyncRoundTrip* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimeSyncRoundTrip>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimeSyncRoundTrip& from);
  void MergeFrom(const TimeSyncRoundTrip& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeSyncRoundTrip* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.TimeSyncRoundTrip";
  }
  protected:
  explicit TimeSyncRoundTrip(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2ftime_5fsync_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2ftime_5fsync_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientTxFieldNumber = 1,
    kServerRxFieldNumber = 2,
    kServerTxFieldNumber = 3,
    kClientRxFieldNumber = 4,
  };
  // .google.protobuf.Timestamp client_tx = 1;
  bool has_client_tx() const;
  private:
  bool _internal_has_client_tx() const;
  public:
  void clear_client_tx();
  const PROTOBUF_NAMESPACE_ID::Timestamp& client_tx() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_client_tx();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_client_tx();
  void set_allocated_client_tx(PROTOBUF_NAMESPACE_ID::Timestamp* client_tx);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_client_tx() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_client_tx();
  public:
  void unsafe_arena_set_allocated_client_tx(
      PROTOBUF_NAMESPACE_ID::Timestamp* client_tx);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_client_tx();

  // .google.protobuf.Timestamp server_rx = 2;
  bool has_server_rx() const;
  private:
  bool _internal_has_server_rx() const;
  public:
  void clear_server_rx();
  const PROTOBUF_NAMESPACE_ID::Timestamp& server_rx() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_server_rx();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_server_rx();
  void set_allocated_server_rx(PROTOBUF_NAMESPACE_ID::Timestamp* server_rx);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_server_rx() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_server_rx();
  public:
  void unsafe_arena_set_allocated_server_rx(
      PROTOBUF_NAMESPACE_ID::Timestamp* server_rx);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_server_rx();

  // .google.protobuf.Timestamp server_tx = 3;
  bool has_server_tx() const;
  private:
  bool _internal_has_server_tx() const;
  public:
  void clear_server_tx();
  const PROTOBUF_NAMESPACE_ID::Timestamp& server_tx() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_server_tx();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_server_tx();
  void set_allocated_server_tx(PROTOBUF_NAMESPACE_ID::Timestamp* server_tx);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_server_tx() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_server_tx();
  public:
  void unsafe_arena_set_allocated_server_tx(
      PROTOBUF_NAMESPACE_ID::Timestamp* server_tx);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_server_tx();

  // .google.protobuf.Timestamp client_rx = 4;
  bool has_client_rx() const;
  private:
  bool _internal_has_client_rx() const;
  public:
  void clear_client_rx();
  const PROTOBUF_NAMESPACE_ID::Timestamp& client_rx() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_client_rx();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_client_rx();
  void set_allocated_client_rx(PROTOBUF_NAMESPACE_ID::Timestamp* client_rx);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_client_rx() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_client_rx();
  public:
  void unsafe_arena_set_allocated_client_rx(
      PROTOBUF_NAMESPACE_ID::Timestamp* client_rx);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_client_rx();

  // @@protoc_insertion_point(class_scope:bosdyn.api.TimeSyncRoundTrip)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Timestamp* client_tx_;
  PROTOBUF_NAMESPACE_ID::Timestamp* server_rx_;
  PROTOBUF_NAMESPACE_ID::Timestamp* server_tx_;
  PROTOBUF_NAMESPACE_ID::Timestamp* client_rx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2ftime_5fsync_2eproto;
};
// -------------------------------------------------------------------

class TimeSyncEstimate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.TimeSyncEstimate) */ {
 public:
  inline TimeSyncEstimate() : TimeSyncEstimate(nullptr) {}
  virtual ~TimeSyncEstimate();

  TimeSyncEstimate(const TimeSyncEstimate& from);
  TimeSyncEstimate(TimeSyncEstimate&& from) noexcept
    : TimeSyncEstimate() {
    *this = ::std::move(from);
  }

  inline TimeSyncEstimate& operator=(const TimeSyncEstimate& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeSyncEstimate& operator=(TimeSyncEstimate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimeSyncEstimate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimeSyncEstimate* internal_default_instance() {
    return reinterpret_cast<const TimeSyncEstimate*>(
               &_TimeSyncEstimate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TimeSyncEstimate& a, TimeSyncEstimate& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeSyncEstimate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeSyncEstimate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimeSyncEstimate* New() const final {
    return CreateMaybeMessage<TimeSyncEstimate>(nullptr);
  }

  TimeSyncEstimate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimeSyncEstimate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimeSyncEstimate& from);
  void MergeFrom(const TimeSyncEstimate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeSyncEstimate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.TimeSyncEstimate";
  }
  protected:
  explicit TimeSyncEstimate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2ftime_5fsync_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2ftime_5fsync_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoundTripTimeFieldNumber = 1,
    kClockSkewFieldNumber = 2,
  };
  // .google.protobuf.Duration round_trip_time = 1;
  bool has_round_trip_time() const;
  private:
  bool _internal_has_round_trip_time() const;
  public:
  void clear_round_trip_time();
  const PROTOBUF_NAMESPACE_ID::Duration& round_trip_time() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_round_trip_time();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_round_trip_time();
  void set_allocated_round_trip_time(PROTOBUF_NAMESPACE_ID::Duration* round_trip_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_round_trip_time() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_round_trip_time();
  public:
  void unsafe_arena_set_allocated_round_trip_time(
      PROTOBUF_NAMESPACE_ID::Duration* round_trip_time);
  PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_round_trip_time();

  // .google.protobuf.Duration clock_skew = 2;
  bool has_clock_skew() const;
  private:
  bool _internal_has_clock_skew() const;
  public:
  void clear_clock_skew();
  const PROTOBUF_NAMESPACE_ID::Duration& clock_skew() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_clock_skew();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_clock_skew();
  void set_allocated_clock_skew(PROTOBUF_NAMESPACE_ID::Duration* clock_skew);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_clock_skew() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_clock_skew();
  public:
  void unsafe_arena_set_allocated_clock_skew(
      PROTOBUF_NAMESPACE_ID::Duration* clock_skew);
  PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_clock_skew();

  // @@protoc_insertion_point(class_scope:bosdyn.api.TimeSyncEstimate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Duration* round_trip_time_;
  PROTOBUF_NAMESPACE_ID::Duration* clock_skew_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2ftime_5fsync_2eproto;
};
// -------------------------------------------------------------------

class TimeSyncState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.TimeSyncState) */ {
 public:
  inline TimeSyncState() : TimeSyncState(nullptr) {}
  virtual ~TimeSyncState();

  TimeSyncState(const TimeSyncState& from);
  TimeSyncState(TimeSyncState&& from) noexcept
    : TimeSyncState() {
    *this = ::std::move(from);
  }

  inline TimeSyncState& operator=(const TimeSyncState& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeSyncState& operator=(TimeSyncState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimeSyncState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimeSyncState* internal_default_instance() {
    return reinterpret_cast<const TimeSyncState*>(
               &_TimeSyncState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TimeSyncState& a, TimeSyncState& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeSyncState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeSyncState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimeSyncState* New() const final {
    return CreateMaybeMessage<TimeSyncState>(nullptr);
  }

  TimeSyncState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimeSyncState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimeSyncState& from);
  void MergeFrom(const TimeSyncState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeSyncState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.TimeSyncState";
  }
  protected:
  explicit TimeSyncState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2ftime_5fsync_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2ftime_5fsync_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TimeSyncState_Status Status;
  static constexpr Status STATUS_UNKNOWN =
    TimeSyncState_Status_STATUS_UNKNOWN;
  static constexpr Status STATUS_OK =
    TimeSyncState_Status_STATUS_OK;
  static constexpr Status STATUS_MORE_SAMPLES_NEEDED =
    TimeSyncState_Status_STATUS_MORE_SAMPLES_NEEDED;
  static constexpr Status STATUS_SERVICE_NOT_READY =
    TimeSyncState_Status_STATUS_SERVICE_NOT_READY;
  static inline bool Status_IsValid(int value) {
    return TimeSyncState_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    TimeSyncState_Status_Status_MIN;
  static constexpr Status Status_MAX =
    TimeSyncState_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    TimeSyncState_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return TimeSyncState_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return TimeSyncState_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Status* value) {
    return TimeSyncState_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBestEstimateFieldNumber = 1,
    kMeasurementTimeFieldNumber = 3,
    kStatusFieldNumber = 2,
  };
  // .bosdyn.api.TimeSyncEstimate best_estimate = 1;
  bool has_best_estimate() const;
  private:
  bool _internal_has_best_estimate() const;
  public:
  void clear_best_estimate();
  const ::bosdyn::api::TimeSyncEstimate& best_estimate() const;
  ::bosdyn::api::TimeSyncEstimate* release_best_estimate();
  ::bosdyn::api::TimeSyncEstimate* mutable_best_estimate();
  void set_allocated_best_estimate(::bosdyn::api::TimeSyncEstimate* best_estimate);
  private:
  const ::bosdyn::api::TimeSyncEstimate& _internal_best_estimate() const;
  ::bosdyn::api::TimeSyncEstimate* _internal_mutable_best_estimate();
  public:
  void unsafe_arena_set_allocated_best_estimate(
      ::bosdyn::api::TimeSyncEstimate* best_estimate);
  ::bosdyn::api::TimeSyncEstimate* unsafe_arena_release_best_estimate();

  // .google.protobuf.Timestamp measurement_time = 3;
  bool has_measurement_time() const;
  private:
  bool _internal_has_measurement_time() const;
  public:
  void clear_measurement_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& measurement_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_measurement_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_measurement_time();
  void set_allocated_measurement_time(PROTOBUF_NAMESPACE_ID::Timestamp* measurement_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_measurement_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_measurement_time();
  public:
  void unsafe_arena_set_allocated_measurement_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* measurement_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_measurement_time();

  // .bosdyn.api.TimeSyncState.Status status = 2;
  void clear_status();
  ::bosdyn::api::TimeSyncState_Status status() const;
  void set_status(::bosdyn::api::TimeSyncState_Status value);
  private:
  ::bosdyn::api::TimeSyncState_Status _internal_status() const;
  void _internal_set_status(::bosdyn::api::TimeSyncState_Status value);
  public:

  // @@protoc_insertion_point(class_scope:bosdyn.api.TimeSyncState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bosdyn::api::TimeSyncEstimate* best_estimate_;
  PROTOBUF_NAMESPACE_ID::Timestamp* measurement_time_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2ftime_5fsync_2eproto;
};
// -------------------------------------------------------------------

class TimeSyncUpdateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.TimeSyncUpdateRequest) */ {
 public:
  inline TimeSyncUpdateRequest() : TimeSyncUpdateRequest(nullptr) {}
  virtual ~TimeSyncUpdateRequest();

  TimeSyncUpdateRequest(const TimeSyncUpdateRequest& from);
  TimeSyncUpdateRequest(TimeSyncUpdateRequest&& from) noexcept
    : TimeSyncUpdateRequest() {
    *this = ::std::move(from);
  }

  inline TimeSyncUpdateRequest& operator=(const TimeSyncUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeSyncUpdateRequest& operator=(TimeSyncUpdateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimeSyncUpdateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimeSyncUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const TimeSyncUpdateRequest*>(
               &_TimeSyncUpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TimeSyncUpdateRequest& a, TimeSyncUpdateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeSyncUpdateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeSyncUpdateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimeSyncUpdateRequest* New() const final {
    return CreateMaybeMessage<TimeSyncUpdateRequest>(nullptr);
  }

  TimeSyncUpdateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimeSyncUpdateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimeSyncUpdateRequest& from);
  void MergeFrom(const TimeSyncUpdateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeSyncUpdateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.TimeSyncUpdateRequest";
  }
  protected:
  explicit TimeSyncUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2ftime_5fsync_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2ftime_5fsync_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClockIdentifierFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kPreviousRoundTripFieldNumber = 2,
  };
  // string clock_identifier = 3;
  void clear_clock_identifier();
  const std::string& clock_identifier() const;
  void set_clock_identifier(const std::string& value);
  void set_clock_identifier(std::string&& value);
  void set_clock_identifier(const char* value);
  void set_clock_identifier(const char* value, size_t size);
  std::string* mutable_clock_identifier();
  std::string* release_clock_identifier();
  void set_allocated_clock_identifier(std::string* clock_identifier);
  private:
  const std::string& _internal_clock_identifier() const;
  void _internal_set_clock_identifier(const std::string& value);
  std::string* _internal_mutable_clock_identifier();
  public:

  // .bosdyn.api.RequestHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::RequestHeader& header() const;
  ::bosdyn::api::RequestHeader* release_header();
  ::bosdyn::api::RequestHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::RequestHeader* header);
  private:
  const ::bosdyn::api::RequestHeader& _internal_header() const;
  ::bosdyn::api::RequestHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::RequestHeader* header);
  ::bosdyn::api::RequestHeader* unsafe_arena_release_header();

  // .bosdyn.api.TimeSyncRoundTrip previous_round_trip = 2;
  bool has_previous_round_trip() const;
  private:
  bool _internal_has_previous_round_trip() const;
  public:
  void clear_previous_round_trip();
  const ::bosdyn::api::TimeSyncRoundTrip& previous_round_trip() const;
  ::bosdyn::api::TimeSyncRoundTrip* release_previous_round_trip();
  ::bosdyn::api::TimeSyncRoundTrip* mutable_previous_round_trip();
  void set_allocated_previous_round_trip(::bosdyn::api::TimeSyncRoundTrip* previous_round_trip);
  private:
  const ::bosdyn::api::TimeSyncRoundTrip& _internal_previous_round_trip() const;
  ::bosdyn::api::TimeSyncRoundTrip* _internal_mutable_previous_round_trip();
  public:
  void unsafe_arena_set_allocated_previous_round_trip(
      ::bosdyn::api::TimeSyncRoundTrip* previous_round_trip);
  ::bosdyn::api::TimeSyncRoundTrip* unsafe_arena_release_previous_round_trip();

  // @@protoc_insertion_point(class_scope:bosdyn.api.TimeSyncUpdateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clock_identifier_;
  ::bosdyn::api::RequestHeader* header_;
  ::bosdyn::api::TimeSyncRoundTrip* previous_round_trip_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2ftime_5fsync_2eproto;
};
// -------------------------------------------------------------------

class TimeSyncUpdateResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bosdyn.api.TimeSyncUpdateResponse) */ {
 public:
  inline TimeSyncUpdateResponse() : TimeSyncUpdateResponse(nullptr) {}
  virtual ~TimeSyncUpdateResponse();

  TimeSyncUpdateResponse(const TimeSyncUpdateResponse& from);
  TimeSyncUpdateResponse(TimeSyncUpdateResponse&& from) noexcept
    : TimeSyncUpdateResponse() {
    *this = ::std::move(from);
  }

  inline TimeSyncUpdateResponse& operator=(const TimeSyncUpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeSyncUpdateResponse& operator=(TimeSyncUpdateResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimeSyncUpdateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimeSyncUpdateResponse* internal_default_instance() {
    return reinterpret_cast<const TimeSyncUpdateResponse*>(
               &_TimeSyncUpdateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TimeSyncUpdateResponse& a, TimeSyncUpdateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeSyncUpdateResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeSyncUpdateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimeSyncUpdateResponse* New() const final {
    return CreateMaybeMessage<TimeSyncUpdateResponse>(nullptr);
  }

  TimeSyncUpdateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimeSyncUpdateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimeSyncUpdateResponse& from);
  void MergeFrom(const TimeSyncUpdateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeSyncUpdateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bosdyn.api.TimeSyncUpdateResponse";
  }
  protected:
  explicit TimeSyncUpdateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bosdyn_2fapi_2ftime_5fsync_2eproto);
    return ::descriptor_table_bosdyn_2fapi_2ftime_5fsync_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClockIdentifierFieldNumber = 4,
    kHeaderFieldNumber = 1,
    kPreviousEstimateFieldNumber = 2,
    kStateFieldNumber = 3,
  };
  // string clock_identifier = 4;
  void clear_clock_identifier();
  const std::string& clock_identifier() const;
  void set_clock_identifier(const std::string& value);
  void set_clock_identifier(std::string&& value);
  void set_clock_identifier(const char* value);
  void set_clock_identifier(const char* value, size_t size);
  std::string* mutable_clock_identifier();
  std::string* release_clock_identifier();
  void set_allocated_clock_identifier(std::string* clock_identifier);
  private:
  const std::string& _internal_clock_identifier() const;
  void _internal_set_clock_identifier(const std::string& value);
  std::string* _internal_mutable_clock_identifier();
  public:

  // .bosdyn.api.ResponseHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::bosdyn::api::ResponseHeader& header() const;
  ::bosdyn::api::ResponseHeader* release_header();
  ::bosdyn::api::ResponseHeader* mutable_header();
  void set_allocated_header(::bosdyn::api::ResponseHeader* header);
  private:
  const ::bosdyn::api::ResponseHeader& _internal_header() const;
  ::bosdyn::api::ResponseHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::bosdyn::api::ResponseHeader* header);
  ::bosdyn::api::ResponseHeader* unsafe_arena_release_header();

  // .bosdyn.api.TimeSyncEstimate previous_estimate = 2;
  bool has_previous_estimate() const;
  private:
  bool _internal_has_previous_estimate() const;
  public:
  void clear_previous_estimate();
  const ::bosdyn::api::TimeSyncEstimate& previous_estimate() const;
  ::bosdyn::api::TimeSyncEstimate* release_previous_estimate();
  ::bosdyn::api::TimeSyncEstimate* mutable_previous_estimate();
  void set_allocated_previous_estimate(::bosdyn::api::TimeSyncEstimate* previous_estimate);
  private:
  const ::bosdyn::api::TimeSyncEstimate& _internal_previous_estimate() const;
  ::bosdyn::api::TimeSyncEstimate* _internal_mutable_previous_estimate();
  public:
  void unsafe_arena_set_allocated_previous_estimate(
      ::bosdyn::api::TimeSyncEstimate* previous_estimate);
  ::bosdyn::api::TimeSyncEstimate* unsafe_arena_release_previous_estimate();

  // .bosdyn.api.TimeSyncState state = 3;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::bosdyn::api::TimeSyncState& state() const;
  ::bosdyn::api::TimeSyncState* release_state();
  ::bosdyn::api::TimeSyncState* mutable_state();
  void set_allocated_state(::bosdyn::api::TimeSyncState* state);
  private:
  const ::bosdyn::api::TimeSyncState& _internal_state() const;
  ::bosdyn::api::TimeSyncState* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::bosdyn::api::TimeSyncState* state);
  ::bosdyn::api::TimeSyncState* unsafe_arena_release_state();

  // @@protoc_insertion_point(class_scope:bosdyn.api.TimeSyncUpdateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clock_identifier_;
  ::bosdyn::api::ResponseHeader* header_;
  ::bosdyn::api::TimeSyncEstimate* previous_estimate_;
  ::bosdyn::api::TimeSyncState* state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bosdyn_2fapi_2ftime_5fsync_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TimeSyncRoundTrip

// .google.protobuf.Timestamp client_tx = 1;
inline bool TimeSyncRoundTrip::_internal_has_client_tx() const {
  return this != internal_default_instance() && client_tx_ != nullptr;
}
inline bool TimeSyncRoundTrip::has_client_tx() const {
  return _internal_has_client_tx();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TimeSyncRoundTrip::_internal_client_tx() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = client_tx_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TimeSyncRoundTrip::client_tx() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.TimeSyncRoundTrip.client_tx)
  return _internal_client_tx();
}
inline void TimeSyncRoundTrip::unsafe_arena_set_allocated_client_tx(
    PROTOBUF_NAMESPACE_ID::Timestamp* client_tx) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_tx_);
  }
  client_tx_ = client_tx;
  if (client_tx) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.TimeSyncRoundTrip.client_tx)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimeSyncRoundTrip::release_client_tx() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = client_tx_;
  client_tx_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimeSyncRoundTrip::unsafe_arena_release_client_tx() {
  // @@protoc_insertion_point(field_release:bosdyn.api.TimeSyncRoundTrip.client_tx)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = client_tx_;
  client_tx_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimeSyncRoundTrip::_internal_mutable_client_tx() {
  
  if (client_tx_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    client_tx_ = p;
  }
  return client_tx_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimeSyncRoundTrip::mutable_client_tx() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.TimeSyncRoundTrip.client_tx)
  return _internal_mutable_client_tx();
}
inline void TimeSyncRoundTrip::set_allocated_client_tx(PROTOBUF_NAMESPACE_ID::Timestamp* client_tx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_tx_);
  }
  if (client_tx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_tx)->GetArena();
    if (message_arena != submessage_arena) {
      client_tx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_tx, submessage_arena);
    }
    
  } else {
    
  }
  client_tx_ = client_tx;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.TimeSyncRoundTrip.client_tx)
}

// .google.protobuf.Timestamp server_rx = 2;
inline bool TimeSyncRoundTrip::_internal_has_server_rx() const {
  return this != internal_default_instance() && server_rx_ != nullptr;
}
inline bool TimeSyncRoundTrip::has_server_rx() const {
  return _internal_has_server_rx();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TimeSyncRoundTrip::_internal_server_rx() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = server_rx_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TimeSyncRoundTrip::server_rx() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.TimeSyncRoundTrip.server_rx)
  return _internal_server_rx();
}
inline void TimeSyncRoundTrip::unsafe_arena_set_allocated_server_rx(
    PROTOBUF_NAMESPACE_ID::Timestamp* server_rx) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_rx_);
  }
  server_rx_ = server_rx;
  if (server_rx) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.TimeSyncRoundTrip.server_rx)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimeSyncRoundTrip::release_server_rx() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = server_rx_;
  server_rx_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimeSyncRoundTrip::unsafe_arena_release_server_rx() {
  // @@protoc_insertion_point(field_release:bosdyn.api.TimeSyncRoundTrip.server_rx)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = server_rx_;
  server_rx_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimeSyncRoundTrip::_internal_mutable_server_rx() {
  
  if (server_rx_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    server_rx_ = p;
  }
  return server_rx_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimeSyncRoundTrip::mutable_server_rx() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.TimeSyncRoundTrip.server_rx)
  return _internal_mutable_server_rx();
}
inline void TimeSyncRoundTrip::set_allocated_server_rx(PROTOBUF_NAMESPACE_ID::Timestamp* server_rx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_rx_);
  }
  if (server_rx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_rx)->GetArena();
    if (message_arena != submessage_arena) {
      server_rx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server_rx, submessage_arena);
    }
    
  } else {
    
  }
  server_rx_ = server_rx;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.TimeSyncRoundTrip.server_rx)
}

// .google.protobuf.Timestamp server_tx = 3;
inline bool TimeSyncRoundTrip::_internal_has_server_tx() const {
  return this != internal_default_instance() && server_tx_ != nullptr;
}
inline bool TimeSyncRoundTrip::has_server_tx() const {
  return _internal_has_server_tx();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TimeSyncRoundTrip::_internal_server_tx() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = server_tx_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TimeSyncRoundTrip::server_tx() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.TimeSyncRoundTrip.server_tx)
  return _internal_server_tx();
}
inline void TimeSyncRoundTrip::unsafe_arena_set_allocated_server_tx(
    PROTOBUF_NAMESPACE_ID::Timestamp* server_tx) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_tx_);
  }
  server_tx_ = server_tx;
  if (server_tx) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.TimeSyncRoundTrip.server_tx)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimeSyncRoundTrip::release_server_tx() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = server_tx_;
  server_tx_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimeSyncRoundTrip::unsafe_arena_release_server_tx() {
  // @@protoc_insertion_point(field_release:bosdyn.api.TimeSyncRoundTrip.server_tx)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = server_tx_;
  server_tx_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimeSyncRoundTrip::_internal_mutable_server_tx() {
  
  if (server_tx_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    server_tx_ = p;
  }
  return server_tx_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimeSyncRoundTrip::mutable_server_tx() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.TimeSyncRoundTrip.server_tx)
  return _internal_mutable_server_tx();
}
inline void TimeSyncRoundTrip::set_allocated_server_tx(PROTOBUF_NAMESPACE_ID::Timestamp* server_tx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_tx_);
  }
  if (server_tx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_tx)->GetArena();
    if (message_arena != submessage_arena) {
      server_tx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server_tx, submessage_arena);
    }
    
  } else {
    
  }
  server_tx_ = server_tx;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.TimeSyncRoundTrip.server_tx)
}

// .google.protobuf.Timestamp client_rx = 4;
inline bool TimeSyncRoundTrip::_internal_has_client_rx() const {
  return this != internal_default_instance() && client_rx_ != nullptr;
}
inline bool TimeSyncRoundTrip::has_client_rx() const {
  return _internal_has_client_rx();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TimeSyncRoundTrip::_internal_client_rx() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = client_rx_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TimeSyncRoundTrip::client_rx() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.TimeSyncRoundTrip.client_rx)
  return _internal_client_rx();
}
inline void TimeSyncRoundTrip::unsafe_arena_set_allocated_client_rx(
    PROTOBUF_NAMESPACE_ID::Timestamp* client_rx) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_rx_);
  }
  client_rx_ = client_rx;
  if (client_rx) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.TimeSyncRoundTrip.client_rx)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimeSyncRoundTrip::release_client_rx() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = client_rx_;
  client_rx_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimeSyncRoundTrip::unsafe_arena_release_client_rx() {
  // @@protoc_insertion_point(field_release:bosdyn.api.TimeSyncRoundTrip.client_rx)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = client_rx_;
  client_rx_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimeSyncRoundTrip::_internal_mutable_client_rx() {
  
  if (client_rx_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    client_rx_ = p;
  }
  return client_rx_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimeSyncRoundTrip::mutable_client_rx() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.TimeSyncRoundTrip.client_rx)
  return _internal_mutable_client_rx();
}
inline void TimeSyncRoundTrip::set_allocated_client_rx(PROTOBUF_NAMESPACE_ID::Timestamp* client_rx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_rx_);
  }
  if (client_rx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_rx)->GetArena();
    if (message_arena != submessage_arena) {
      client_rx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_rx, submessage_arena);
    }
    
  } else {
    
  }
  client_rx_ = client_rx;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.TimeSyncRoundTrip.client_rx)
}

// -------------------------------------------------------------------

// TimeSyncEstimate

// .google.protobuf.Duration round_trip_time = 1;
inline bool TimeSyncEstimate::_internal_has_round_trip_time() const {
  return this != internal_default_instance() && round_trip_time_ != nullptr;
}
inline bool TimeSyncEstimate::has_round_trip_time() const {
  return _internal_has_round_trip_time();
}
inline const PROTOBUF_NAMESPACE_ID::Duration& TimeSyncEstimate::_internal_round_trip_time() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = round_trip_time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration*>(
      &PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& TimeSyncEstimate::round_trip_time() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.TimeSyncEstimate.round_trip_time)
  return _internal_round_trip_time();
}
inline void TimeSyncEstimate::unsafe_arena_set_allocated_round_trip_time(
    PROTOBUF_NAMESPACE_ID::Duration* round_trip_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(round_trip_time_);
  }
  round_trip_time_ = round_trip_time;
  if (round_trip_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.TimeSyncEstimate.round_trip_time)
}
inline PROTOBUF_NAMESPACE_ID::Duration* TimeSyncEstimate::release_round_trip_time() {
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = round_trip_time_;
  round_trip_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* TimeSyncEstimate::unsafe_arena_release_round_trip_time() {
  // @@protoc_insertion_point(field_release:bosdyn.api.TimeSyncEstimate.round_trip_time)
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = round_trip_time_;
  round_trip_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* TimeSyncEstimate::_internal_mutable_round_trip_time() {
  
  if (round_trip_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArena());
    round_trip_time_ = p;
  }
  return round_trip_time_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* TimeSyncEstimate::mutable_round_trip_time() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.TimeSyncEstimate.round_trip_time)
  return _internal_mutable_round_trip_time();
}
inline void TimeSyncEstimate::set_allocated_round_trip_time(PROTOBUF_NAMESPACE_ID::Duration* round_trip_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(round_trip_time_);
  }
  if (round_trip_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(round_trip_time)->GetArena();
    if (message_arena != submessage_arena) {
      round_trip_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, round_trip_time, submessage_arena);
    }
    
  } else {
    
  }
  round_trip_time_ = round_trip_time;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.TimeSyncEstimate.round_trip_time)
}

// .google.protobuf.Duration clock_skew = 2;
inline bool TimeSyncEstimate::_internal_has_clock_skew() const {
  return this != internal_default_instance() && clock_skew_ != nullptr;
}
inline bool TimeSyncEstimate::has_clock_skew() const {
  return _internal_has_clock_skew();
}
inline const PROTOBUF_NAMESPACE_ID::Duration& TimeSyncEstimate::_internal_clock_skew() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = clock_skew_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration*>(
      &PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& TimeSyncEstimate::clock_skew() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.TimeSyncEstimate.clock_skew)
  return _internal_clock_skew();
}
inline void TimeSyncEstimate::unsafe_arena_set_allocated_clock_skew(
    PROTOBUF_NAMESPACE_ID::Duration* clock_skew) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(clock_skew_);
  }
  clock_skew_ = clock_skew;
  if (clock_skew) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.TimeSyncEstimate.clock_skew)
}
inline PROTOBUF_NAMESPACE_ID::Duration* TimeSyncEstimate::release_clock_skew() {
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = clock_skew_;
  clock_skew_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* TimeSyncEstimate::unsafe_arena_release_clock_skew() {
  // @@protoc_insertion_point(field_release:bosdyn.api.TimeSyncEstimate.clock_skew)
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = clock_skew_;
  clock_skew_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* TimeSyncEstimate::_internal_mutable_clock_skew() {
  
  if (clock_skew_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArena());
    clock_skew_ = p;
  }
  return clock_skew_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* TimeSyncEstimate::mutable_clock_skew() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.TimeSyncEstimate.clock_skew)
  return _internal_mutable_clock_skew();
}
inline void TimeSyncEstimate::set_allocated_clock_skew(PROTOBUF_NAMESPACE_ID::Duration* clock_skew) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(clock_skew_);
  }
  if (clock_skew) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(clock_skew)->GetArena();
    if (message_arena != submessage_arena) {
      clock_skew = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clock_skew, submessage_arena);
    }
    
  } else {
    
  }
  clock_skew_ = clock_skew;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.TimeSyncEstimate.clock_skew)
}

// -------------------------------------------------------------------

// TimeSyncState

// .bosdyn.api.TimeSyncEstimate best_estimate = 1;
inline bool TimeSyncState::_internal_has_best_estimate() const {
  return this != internal_default_instance() && best_estimate_ != nullptr;
}
inline bool TimeSyncState::has_best_estimate() const {
  return _internal_has_best_estimate();
}
inline void TimeSyncState::clear_best_estimate() {
  if (GetArena() == nullptr && best_estimate_ != nullptr) {
    delete best_estimate_;
  }
  best_estimate_ = nullptr;
}
inline const ::bosdyn::api::TimeSyncEstimate& TimeSyncState::_internal_best_estimate() const {
  const ::bosdyn::api::TimeSyncEstimate* p = best_estimate_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::TimeSyncEstimate*>(
      &::bosdyn::api::_TimeSyncEstimate_default_instance_);
}
inline const ::bosdyn::api::TimeSyncEstimate& TimeSyncState::best_estimate() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.TimeSyncState.best_estimate)
  return _internal_best_estimate();
}
inline void TimeSyncState::unsafe_arena_set_allocated_best_estimate(
    ::bosdyn::api::TimeSyncEstimate* best_estimate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(best_estimate_);
  }
  best_estimate_ = best_estimate;
  if (best_estimate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.TimeSyncState.best_estimate)
}
inline ::bosdyn::api::TimeSyncEstimate* TimeSyncState::release_best_estimate() {
  
  ::bosdyn::api::TimeSyncEstimate* temp = best_estimate_;
  best_estimate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::TimeSyncEstimate* TimeSyncState::unsafe_arena_release_best_estimate() {
  // @@protoc_insertion_point(field_release:bosdyn.api.TimeSyncState.best_estimate)
  
  ::bosdyn::api::TimeSyncEstimate* temp = best_estimate_;
  best_estimate_ = nullptr;
  return temp;
}
inline ::bosdyn::api::TimeSyncEstimate* TimeSyncState::_internal_mutable_best_estimate() {
  
  if (best_estimate_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::TimeSyncEstimate>(GetArena());
    best_estimate_ = p;
  }
  return best_estimate_;
}
inline ::bosdyn::api::TimeSyncEstimate* TimeSyncState::mutable_best_estimate() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.TimeSyncState.best_estimate)
  return _internal_mutable_best_estimate();
}
inline void TimeSyncState::set_allocated_best_estimate(::bosdyn::api::TimeSyncEstimate* best_estimate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete best_estimate_;
  }
  if (best_estimate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(best_estimate);
    if (message_arena != submessage_arena) {
      best_estimate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, best_estimate, submessage_arena);
    }
    
  } else {
    
  }
  best_estimate_ = best_estimate;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.TimeSyncState.best_estimate)
}

// .bosdyn.api.TimeSyncState.Status status = 2;
inline void TimeSyncState::clear_status() {
  status_ = 0;
}
inline ::bosdyn::api::TimeSyncState_Status TimeSyncState::_internal_status() const {
  return static_cast< ::bosdyn::api::TimeSyncState_Status >(status_);
}
inline ::bosdyn::api::TimeSyncState_Status TimeSyncState::status() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.TimeSyncState.status)
  return _internal_status();
}
inline void TimeSyncState::_internal_set_status(::bosdyn::api::TimeSyncState_Status value) {
  
  status_ = value;
}
inline void TimeSyncState::set_status(::bosdyn::api::TimeSyncState_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.TimeSyncState.status)
}

// .google.protobuf.Timestamp measurement_time = 3;
inline bool TimeSyncState::_internal_has_measurement_time() const {
  return this != internal_default_instance() && measurement_time_ != nullptr;
}
inline bool TimeSyncState::has_measurement_time() const {
  return _internal_has_measurement_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TimeSyncState::_internal_measurement_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = measurement_time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TimeSyncState::measurement_time() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.TimeSyncState.measurement_time)
  return _internal_measurement_time();
}
inline void TimeSyncState::unsafe_arena_set_allocated_measurement_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* measurement_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(measurement_time_);
  }
  measurement_time_ = measurement_time;
  if (measurement_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.TimeSyncState.measurement_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimeSyncState::release_measurement_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = measurement_time_;
  measurement_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimeSyncState::unsafe_arena_release_measurement_time() {
  // @@protoc_insertion_point(field_release:bosdyn.api.TimeSyncState.measurement_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = measurement_time_;
  measurement_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimeSyncState::_internal_mutable_measurement_time() {
  
  if (measurement_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    measurement_time_ = p;
  }
  return measurement_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TimeSyncState::mutable_measurement_time() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.TimeSyncState.measurement_time)
  return _internal_mutable_measurement_time();
}
inline void TimeSyncState::set_allocated_measurement_time(PROTOBUF_NAMESPACE_ID::Timestamp* measurement_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(measurement_time_);
  }
  if (measurement_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(measurement_time)->GetArena();
    if (message_arena != submessage_arena) {
      measurement_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, measurement_time, submessage_arena);
    }
    
  } else {
    
  }
  measurement_time_ = measurement_time;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.TimeSyncState.measurement_time)
}

// -------------------------------------------------------------------

// TimeSyncUpdateRequest

// .bosdyn.api.RequestHeader header = 1;
inline bool TimeSyncUpdateRequest::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool TimeSyncUpdateRequest::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::RequestHeader& TimeSyncUpdateRequest::_internal_header() const {
  const ::bosdyn::api::RequestHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::RequestHeader*>(
      &::bosdyn::api::_RequestHeader_default_instance_);
}
inline const ::bosdyn::api::RequestHeader& TimeSyncUpdateRequest::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.TimeSyncUpdateRequest.header)
  return _internal_header();
}
inline void TimeSyncUpdateRequest::unsafe_arena_set_allocated_header(
    ::bosdyn::api::RequestHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.TimeSyncUpdateRequest.header)
}
inline ::bosdyn::api::RequestHeader* TimeSyncUpdateRequest::release_header() {
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::RequestHeader* TimeSyncUpdateRequest::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.TimeSyncUpdateRequest.header)
  
  ::bosdyn::api::RequestHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::RequestHeader* TimeSyncUpdateRequest::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::RequestHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::RequestHeader* TimeSyncUpdateRequest::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.TimeSyncUpdateRequest.header)
  return _internal_mutable_header();
}
inline void TimeSyncUpdateRequest::set_allocated_header(::bosdyn::api::RequestHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.TimeSyncUpdateRequest.header)
}

// .bosdyn.api.TimeSyncRoundTrip previous_round_trip = 2;
inline bool TimeSyncUpdateRequest::_internal_has_previous_round_trip() const {
  return this != internal_default_instance() && previous_round_trip_ != nullptr;
}
inline bool TimeSyncUpdateRequest::has_previous_round_trip() const {
  return _internal_has_previous_round_trip();
}
inline void TimeSyncUpdateRequest::clear_previous_round_trip() {
  if (GetArena() == nullptr && previous_round_trip_ != nullptr) {
    delete previous_round_trip_;
  }
  previous_round_trip_ = nullptr;
}
inline const ::bosdyn::api::TimeSyncRoundTrip& TimeSyncUpdateRequest::_internal_previous_round_trip() const {
  const ::bosdyn::api::TimeSyncRoundTrip* p = previous_round_trip_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::TimeSyncRoundTrip*>(
      &::bosdyn::api::_TimeSyncRoundTrip_default_instance_);
}
inline const ::bosdyn::api::TimeSyncRoundTrip& TimeSyncUpdateRequest::previous_round_trip() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.TimeSyncUpdateRequest.previous_round_trip)
  return _internal_previous_round_trip();
}
inline void TimeSyncUpdateRequest::unsafe_arena_set_allocated_previous_round_trip(
    ::bosdyn::api::TimeSyncRoundTrip* previous_round_trip) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(previous_round_trip_);
  }
  previous_round_trip_ = previous_round_trip;
  if (previous_round_trip) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.TimeSyncUpdateRequest.previous_round_trip)
}
inline ::bosdyn::api::TimeSyncRoundTrip* TimeSyncUpdateRequest::release_previous_round_trip() {
  
  ::bosdyn::api::TimeSyncRoundTrip* temp = previous_round_trip_;
  previous_round_trip_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::TimeSyncRoundTrip* TimeSyncUpdateRequest::unsafe_arena_release_previous_round_trip() {
  // @@protoc_insertion_point(field_release:bosdyn.api.TimeSyncUpdateRequest.previous_round_trip)
  
  ::bosdyn::api::TimeSyncRoundTrip* temp = previous_round_trip_;
  previous_round_trip_ = nullptr;
  return temp;
}
inline ::bosdyn::api::TimeSyncRoundTrip* TimeSyncUpdateRequest::_internal_mutable_previous_round_trip() {
  
  if (previous_round_trip_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::TimeSyncRoundTrip>(GetArena());
    previous_round_trip_ = p;
  }
  return previous_round_trip_;
}
inline ::bosdyn::api::TimeSyncRoundTrip* TimeSyncUpdateRequest::mutable_previous_round_trip() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.TimeSyncUpdateRequest.previous_round_trip)
  return _internal_mutable_previous_round_trip();
}
inline void TimeSyncUpdateRequest::set_allocated_previous_round_trip(::bosdyn::api::TimeSyncRoundTrip* previous_round_trip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete previous_round_trip_;
  }
  if (previous_round_trip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(previous_round_trip);
    if (message_arena != submessage_arena) {
      previous_round_trip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, previous_round_trip, submessage_arena);
    }
    
  } else {
    
  }
  previous_round_trip_ = previous_round_trip;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.TimeSyncUpdateRequest.previous_round_trip)
}

// string clock_identifier = 3;
inline void TimeSyncUpdateRequest::clear_clock_identifier() {
  clock_identifier_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TimeSyncUpdateRequest::clock_identifier() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.TimeSyncUpdateRequest.clock_identifier)
  return _internal_clock_identifier();
}
inline void TimeSyncUpdateRequest::set_clock_identifier(const std::string& value) {
  _internal_set_clock_identifier(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.TimeSyncUpdateRequest.clock_identifier)
}
inline std::string* TimeSyncUpdateRequest::mutable_clock_identifier() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.TimeSyncUpdateRequest.clock_identifier)
  return _internal_mutable_clock_identifier();
}
inline const std::string& TimeSyncUpdateRequest::_internal_clock_identifier() const {
  return clock_identifier_.Get();
}
inline void TimeSyncUpdateRequest::_internal_set_clock_identifier(const std::string& value) {
  
  clock_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TimeSyncUpdateRequest::set_clock_identifier(std::string&& value) {
  
  clock_identifier_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.TimeSyncUpdateRequest.clock_identifier)
}
inline void TimeSyncUpdateRequest::set_clock_identifier(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  clock_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.TimeSyncUpdateRequest.clock_identifier)
}
inline void TimeSyncUpdateRequest::set_clock_identifier(const char* value,
    size_t size) {
  
  clock_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.TimeSyncUpdateRequest.clock_identifier)
}
inline std::string* TimeSyncUpdateRequest::_internal_mutable_clock_identifier() {
  
  return clock_identifier_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TimeSyncUpdateRequest::release_clock_identifier() {
  // @@protoc_insertion_point(field_release:bosdyn.api.TimeSyncUpdateRequest.clock_identifier)
  return clock_identifier_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TimeSyncUpdateRequest::set_allocated_clock_identifier(std::string* clock_identifier) {
  if (clock_identifier != nullptr) {
    
  } else {
    
  }
  clock_identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clock_identifier,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.TimeSyncUpdateRequest.clock_identifier)
}

// -------------------------------------------------------------------

// TimeSyncUpdateResponse

// .bosdyn.api.ResponseHeader header = 1;
inline bool TimeSyncUpdateResponse::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool TimeSyncUpdateResponse::has_header() const {
  return _internal_has_header();
}
inline const ::bosdyn::api::ResponseHeader& TimeSyncUpdateResponse::_internal_header() const {
  const ::bosdyn::api::ResponseHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::ResponseHeader*>(
      &::bosdyn::api::_ResponseHeader_default_instance_);
}
inline const ::bosdyn::api::ResponseHeader& TimeSyncUpdateResponse::header() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.TimeSyncUpdateResponse.header)
  return _internal_header();
}
inline void TimeSyncUpdateResponse::unsafe_arena_set_allocated_header(
    ::bosdyn::api::ResponseHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.TimeSyncUpdateResponse.header)
}
inline ::bosdyn::api::ResponseHeader* TimeSyncUpdateResponse::release_header() {
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::ResponseHeader* TimeSyncUpdateResponse::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:bosdyn.api.TimeSyncUpdateResponse.header)
  
  ::bosdyn::api::ResponseHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::bosdyn::api::ResponseHeader* TimeSyncUpdateResponse::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::ResponseHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::bosdyn::api::ResponseHeader* TimeSyncUpdateResponse::mutable_header() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.TimeSyncUpdateResponse.header)
  return _internal_mutable_header();
}
inline void TimeSyncUpdateResponse::set_allocated_header(::bosdyn::api::ResponseHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.TimeSyncUpdateResponse.header)
}

// .bosdyn.api.TimeSyncEstimate previous_estimate = 2;
inline bool TimeSyncUpdateResponse::_internal_has_previous_estimate() const {
  return this != internal_default_instance() && previous_estimate_ != nullptr;
}
inline bool TimeSyncUpdateResponse::has_previous_estimate() const {
  return _internal_has_previous_estimate();
}
inline void TimeSyncUpdateResponse::clear_previous_estimate() {
  if (GetArena() == nullptr && previous_estimate_ != nullptr) {
    delete previous_estimate_;
  }
  previous_estimate_ = nullptr;
}
inline const ::bosdyn::api::TimeSyncEstimate& TimeSyncUpdateResponse::_internal_previous_estimate() const {
  const ::bosdyn::api::TimeSyncEstimate* p = previous_estimate_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::TimeSyncEstimate*>(
      &::bosdyn::api::_TimeSyncEstimate_default_instance_);
}
inline const ::bosdyn::api::TimeSyncEstimate& TimeSyncUpdateResponse::previous_estimate() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.TimeSyncUpdateResponse.previous_estimate)
  return _internal_previous_estimate();
}
inline void TimeSyncUpdateResponse::unsafe_arena_set_allocated_previous_estimate(
    ::bosdyn::api::TimeSyncEstimate* previous_estimate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(previous_estimate_);
  }
  previous_estimate_ = previous_estimate;
  if (previous_estimate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.TimeSyncUpdateResponse.previous_estimate)
}
inline ::bosdyn::api::TimeSyncEstimate* TimeSyncUpdateResponse::release_previous_estimate() {
  
  ::bosdyn::api::TimeSyncEstimate* temp = previous_estimate_;
  previous_estimate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::TimeSyncEstimate* TimeSyncUpdateResponse::unsafe_arena_release_previous_estimate() {
  // @@protoc_insertion_point(field_release:bosdyn.api.TimeSyncUpdateResponse.previous_estimate)
  
  ::bosdyn::api::TimeSyncEstimate* temp = previous_estimate_;
  previous_estimate_ = nullptr;
  return temp;
}
inline ::bosdyn::api::TimeSyncEstimate* TimeSyncUpdateResponse::_internal_mutable_previous_estimate() {
  
  if (previous_estimate_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::TimeSyncEstimate>(GetArena());
    previous_estimate_ = p;
  }
  return previous_estimate_;
}
inline ::bosdyn::api::TimeSyncEstimate* TimeSyncUpdateResponse::mutable_previous_estimate() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.TimeSyncUpdateResponse.previous_estimate)
  return _internal_mutable_previous_estimate();
}
inline void TimeSyncUpdateResponse::set_allocated_previous_estimate(::bosdyn::api::TimeSyncEstimate* previous_estimate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete previous_estimate_;
  }
  if (previous_estimate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(previous_estimate);
    if (message_arena != submessage_arena) {
      previous_estimate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, previous_estimate, submessage_arena);
    }
    
  } else {
    
  }
  previous_estimate_ = previous_estimate;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.TimeSyncUpdateResponse.previous_estimate)
}

// .bosdyn.api.TimeSyncState state = 3;
inline bool TimeSyncUpdateResponse::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool TimeSyncUpdateResponse::has_state() const {
  return _internal_has_state();
}
inline void TimeSyncUpdateResponse::clear_state() {
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
inline const ::bosdyn::api::TimeSyncState& TimeSyncUpdateResponse::_internal_state() const {
  const ::bosdyn::api::TimeSyncState* p = state_;
  return p != nullptr ? *p : *reinterpret_cast<const ::bosdyn::api::TimeSyncState*>(
      &::bosdyn::api::_TimeSyncState_default_instance_);
}
inline const ::bosdyn::api::TimeSyncState& TimeSyncUpdateResponse::state() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.TimeSyncUpdateResponse.state)
  return _internal_state();
}
inline void TimeSyncUpdateResponse::unsafe_arena_set_allocated_state(
    ::bosdyn::api::TimeSyncState* state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bosdyn.api.TimeSyncUpdateResponse.state)
}
inline ::bosdyn::api::TimeSyncState* TimeSyncUpdateResponse::release_state() {
  
  ::bosdyn::api::TimeSyncState* temp = state_;
  state_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bosdyn::api::TimeSyncState* TimeSyncUpdateResponse::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:bosdyn.api.TimeSyncUpdateResponse.state)
  
  ::bosdyn::api::TimeSyncState* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::bosdyn::api::TimeSyncState* TimeSyncUpdateResponse::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::bosdyn::api::TimeSyncState>(GetArena());
    state_ = p;
  }
  return state_;
}
inline ::bosdyn::api::TimeSyncState* TimeSyncUpdateResponse::mutable_state() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.TimeSyncUpdateResponse.state)
  return _internal_mutable_state();
}
inline void TimeSyncUpdateResponse::set_allocated_state(::bosdyn::api::TimeSyncState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(state);
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.TimeSyncUpdateResponse.state)
}

// string clock_identifier = 4;
inline void TimeSyncUpdateResponse::clear_clock_identifier() {
  clock_identifier_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TimeSyncUpdateResponse::clock_identifier() const {
  // @@protoc_insertion_point(field_get:bosdyn.api.TimeSyncUpdateResponse.clock_identifier)
  return _internal_clock_identifier();
}
inline void TimeSyncUpdateResponse::set_clock_identifier(const std::string& value) {
  _internal_set_clock_identifier(value);
  // @@protoc_insertion_point(field_set:bosdyn.api.TimeSyncUpdateResponse.clock_identifier)
}
inline std::string* TimeSyncUpdateResponse::mutable_clock_identifier() {
  // @@protoc_insertion_point(field_mutable:bosdyn.api.TimeSyncUpdateResponse.clock_identifier)
  return _internal_mutable_clock_identifier();
}
inline const std::string& TimeSyncUpdateResponse::_internal_clock_identifier() const {
  return clock_identifier_.Get();
}
inline void TimeSyncUpdateResponse::_internal_set_clock_identifier(const std::string& value) {
  
  clock_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TimeSyncUpdateResponse::set_clock_identifier(std::string&& value) {
  
  clock_identifier_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bosdyn.api.TimeSyncUpdateResponse.clock_identifier)
}
inline void TimeSyncUpdateResponse::set_clock_identifier(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  clock_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bosdyn.api.TimeSyncUpdateResponse.clock_identifier)
}
inline void TimeSyncUpdateResponse::set_clock_identifier(const char* value,
    size_t size) {
  
  clock_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bosdyn.api.TimeSyncUpdateResponse.clock_identifier)
}
inline std::string* TimeSyncUpdateResponse::_internal_mutable_clock_identifier() {
  
  return clock_identifier_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TimeSyncUpdateResponse::release_clock_identifier() {
  // @@protoc_insertion_point(field_release:bosdyn.api.TimeSyncUpdateResponse.clock_identifier)
  return clock_identifier_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TimeSyncUpdateResponse::set_allocated_clock_identifier(std::string* clock_identifier) {
  if (clock_identifier != nullptr) {
    
  } else {
    
  }
  clock_identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clock_identifier,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bosdyn.api.TimeSyncUpdateResponse.clock_identifier)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace bosdyn

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bosdyn::api::TimeSyncState_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bosdyn::api::TimeSyncState_Status>() {
  return ::bosdyn::api::TimeSyncState_Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bosdyn_2fapi_2ftime_5fsync_2eproto
