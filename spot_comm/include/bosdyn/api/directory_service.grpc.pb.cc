// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bosdyn/api/directory_service.proto

#include "bosdyn/api/directory_service.pb.h"
#include "bosdyn/api/directory_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace bosdyn {
namespace api {

static const char* DirectoryService_method_names[] = {
  "/bosdyn.api.DirectoryService/GetServiceEntry",
  "/bosdyn.api.DirectoryService/ListServiceEntries",
};

std::unique_ptr< DirectoryService::Stub> DirectoryService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DirectoryService::Stub> stub(new DirectoryService::Stub(channel));
  return stub;
}

DirectoryService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetServiceEntry_(DirectoryService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListServiceEntries_(DirectoryService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DirectoryService::Stub::GetServiceEntry(::grpc::ClientContext* context, const ::bosdyn::api::GetServiceEntryRequest& request, ::bosdyn::api::GetServiceEntryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetServiceEntry_, context, request, response);
}

void DirectoryService::Stub::experimental_async::GetServiceEntry(::grpc::ClientContext* context, const ::bosdyn::api::GetServiceEntryRequest* request, ::bosdyn::api::GetServiceEntryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetServiceEntry_, context, request, response, std::move(f));
}

void DirectoryService::Stub::experimental_async::GetServiceEntry(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::GetServiceEntryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetServiceEntry_, context, request, response, std::move(f));
}

void DirectoryService::Stub::experimental_async::GetServiceEntry(::grpc::ClientContext* context, const ::bosdyn::api::GetServiceEntryRequest* request, ::bosdyn::api::GetServiceEntryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetServiceEntry_, context, request, response, reactor);
}

void DirectoryService::Stub::experimental_async::GetServiceEntry(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::GetServiceEntryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetServiceEntry_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::GetServiceEntryResponse>* DirectoryService::Stub::AsyncGetServiceEntryRaw(::grpc::ClientContext* context, const ::bosdyn::api::GetServiceEntryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::GetServiceEntryResponse>::Create(channel_.get(), cq, rpcmethod_GetServiceEntry_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::GetServiceEntryResponse>* DirectoryService::Stub::PrepareAsyncGetServiceEntryRaw(::grpc::ClientContext* context, const ::bosdyn::api::GetServiceEntryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::GetServiceEntryResponse>::Create(channel_.get(), cq, rpcmethod_GetServiceEntry_, context, request, false);
}

::grpc::Status DirectoryService::Stub::ListServiceEntries(::grpc::ClientContext* context, const ::bosdyn::api::ListServiceEntriesRequest& request, ::bosdyn::api::ListServiceEntriesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListServiceEntries_, context, request, response);
}

void DirectoryService::Stub::experimental_async::ListServiceEntries(::grpc::ClientContext* context, const ::bosdyn::api::ListServiceEntriesRequest* request, ::bosdyn::api::ListServiceEntriesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListServiceEntries_, context, request, response, std::move(f));
}

void DirectoryService::Stub::experimental_async::ListServiceEntries(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::ListServiceEntriesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListServiceEntries_, context, request, response, std::move(f));
}

void DirectoryService::Stub::experimental_async::ListServiceEntries(::grpc::ClientContext* context, const ::bosdyn::api::ListServiceEntriesRequest* request, ::bosdyn::api::ListServiceEntriesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListServiceEntries_, context, request, response, reactor);
}

void DirectoryService::Stub::experimental_async::ListServiceEntries(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bosdyn::api::ListServiceEntriesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListServiceEntries_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::ListServiceEntriesResponse>* DirectoryService::Stub::AsyncListServiceEntriesRaw(::grpc::ClientContext* context, const ::bosdyn::api::ListServiceEntriesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::ListServiceEntriesResponse>::Create(channel_.get(), cq, rpcmethod_ListServiceEntries_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bosdyn::api::ListServiceEntriesResponse>* DirectoryService::Stub::PrepareAsyncListServiceEntriesRaw(::grpc::ClientContext* context, const ::bosdyn::api::ListServiceEntriesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bosdyn::api::ListServiceEntriesResponse>::Create(channel_.get(), cq, rpcmethod_ListServiceEntries_, context, request, false);
}

DirectoryService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DirectoryService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DirectoryService::Service, ::bosdyn::api::GetServiceEntryRequest, ::bosdyn::api::GetServiceEntryResponse>(
          [](DirectoryService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::GetServiceEntryRequest* req,
             ::bosdyn::api::GetServiceEntryResponse* resp) {
               return service->GetServiceEntry(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DirectoryService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DirectoryService::Service, ::bosdyn::api::ListServiceEntriesRequest, ::bosdyn::api::ListServiceEntriesResponse>(
          [](DirectoryService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bosdyn::api::ListServiceEntriesRequest* req,
             ::bosdyn::api::ListServiceEntriesResponse* resp) {
               return service->ListServiceEntries(ctx, req, resp);
             }, this)));
}

DirectoryService::Service::~Service() {
}

::grpc::Status DirectoryService::Service::GetServiceEntry(::grpc::ServerContext* context, const ::bosdyn::api::GetServiceEntryRequest* request, ::bosdyn::api::GetServiceEntryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DirectoryService::Service::ListServiceEntries(::grpc::ServerContext* context, const ::bosdyn::api::ListServiceEntriesRequest* request, ::bosdyn::api::ListServiceEntriesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace bosdyn
}  // namespace api

