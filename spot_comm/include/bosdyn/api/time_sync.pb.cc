// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/time_sync.proto

#include "bosdyn/api/time_sync.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2ftime_5fsync_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TimeSyncEstimate_bosdyn_2fapi_2ftime_5fsync_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2ftime_5fsync_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TimeSyncRoundTrip_bosdyn_2fapi_2ftime_5fsync_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2ftime_5fsync_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TimeSyncState_bosdyn_2fapi_2ftime_5fsync_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fduration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Duration_google_2fprotobuf_2fduration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace bosdyn {
namespace api {
class TimeSyncRoundTripDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimeSyncRoundTrip> _instance;
} _TimeSyncRoundTrip_default_instance_;
class TimeSyncEstimateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimeSyncEstimate> _instance;
} _TimeSyncEstimate_default_instance_;
class TimeSyncStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimeSyncState> _instance;
} _TimeSyncState_default_instance_;
class TimeSyncUpdateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimeSyncUpdateRequest> _instance;
} _TimeSyncUpdateRequest_default_instance_;
class TimeSyncUpdateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimeSyncUpdateResponse> _instance;
} _TimeSyncUpdateResponse_default_instance_;
}  // namespace api
}  // namespace bosdyn
static void InitDefaultsscc_info_TimeSyncEstimate_bosdyn_2fapi_2ftime_5fsync_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_TimeSyncEstimate_default_instance_;
    new (ptr) ::bosdyn::api::TimeSyncEstimate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::TimeSyncEstimate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TimeSyncEstimate_bosdyn_2fapi_2ftime_5fsync_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TimeSyncEstimate_bosdyn_2fapi_2ftime_5fsync_2eproto}, {
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,}};

static void InitDefaultsscc_info_TimeSyncRoundTrip_bosdyn_2fapi_2ftime_5fsync_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_TimeSyncRoundTrip_default_instance_;
    new (ptr) ::bosdyn::api::TimeSyncRoundTrip();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::TimeSyncRoundTrip::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TimeSyncRoundTrip_bosdyn_2fapi_2ftime_5fsync_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TimeSyncRoundTrip_bosdyn_2fapi_2ftime_5fsync_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_TimeSyncState_bosdyn_2fapi_2ftime_5fsync_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_TimeSyncState_default_instance_;
    new (ptr) ::bosdyn::api::TimeSyncState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::TimeSyncState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TimeSyncState_bosdyn_2fapi_2ftime_5fsync_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TimeSyncState_bosdyn_2fapi_2ftime_5fsync_2eproto}, {
      &scc_info_TimeSyncEstimate_bosdyn_2fapi_2ftime_5fsync_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_TimeSyncUpdateRequest_bosdyn_2fapi_2ftime_5fsync_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_TimeSyncUpdateRequest_default_instance_;
    new (ptr) ::bosdyn::api::TimeSyncUpdateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::TimeSyncUpdateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TimeSyncUpdateRequest_bosdyn_2fapi_2ftime_5fsync_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TimeSyncUpdateRequest_bosdyn_2fapi_2ftime_5fsync_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_TimeSyncRoundTrip_bosdyn_2fapi_2ftime_5fsync_2eproto.base,}};

static void InitDefaultsscc_info_TimeSyncUpdateResponse_bosdyn_2fapi_2ftime_5fsync_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_TimeSyncUpdateResponse_default_instance_;
    new (ptr) ::bosdyn::api::TimeSyncUpdateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::TimeSyncUpdateResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TimeSyncUpdateResponse_bosdyn_2fapi_2ftime_5fsync_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_TimeSyncUpdateResponse_bosdyn_2fapi_2ftime_5fsync_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_TimeSyncEstimate_bosdyn_2fapi_2ftime_5fsync_2eproto.base,
      &scc_info_TimeSyncState_bosdyn_2fapi_2ftime_5fsync_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bosdyn_2fapi_2ftime_5fsync_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_bosdyn_2fapi_2ftime_5fsync_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bosdyn_2fapi_2ftime_5fsync_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bosdyn_2fapi_2ftime_5fsync_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::TimeSyncRoundTrip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::TimeSyncRoundTrip, client_tx_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::TimeSyncRoundTrip, server_rx_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::TimeSyncRoundTrip, server_tx_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::TimeSyncRoundTrip, client_rx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::TimeSyncEstimate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::TimeSyncEstimate, round_trip_time_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::TimeSyncEstimate, clock_skew_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::TimeSyncState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::TimeSyncState, best_estimate_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::TimeSyncState, status_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::TimeSyncState, measurement_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::TimeSyncUpdateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::TimeSyncUpdateRequest, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::TimeSyncUpdateRequest, previous_round_trip_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::TimeSyncUpdateRequest, clock_identifier_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::TimeSyncUpdateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::TimeSyncUpdateResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::TimeSyncUpdateResponse, previous_estimate_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::TimeSyncUpdateResponse, state_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::TimeSyncUpdateResponse, clock_identifier_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::bosdyn::api::TimeSyncRoundTrip)},
  { 9, -1, sizeof(::bosdyn::api::TimeSyncEstimate)},
  { 16, -1, sizeof(::bosdyn::api::TimeSyncState)},
  { 24, -1, sizeof(::bosdyn::api::TimeSyncUpdateRequest)},
  { 32, -1, sizeof(::bosdyn::api::TimeSyncUpdateResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_TimeSyncRoundTrip_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_TimeSyncEstimate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_TimeSyncState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_TimeSyncUpdateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_TimeSyncUpdateResponse_default_instance_),
};

const char descriptor_table_protodef_bosdyn_2fapi_2ftime_5fsync_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032bosdyn/api/time_sync.proto\022\nbosdyn.api"
  "\032\037google/protobuf/timestamp.proto\032\036googl"
  "e/protobuf/duration.proto\032\027bosdyn/api/he"
  "ader.proto\"\317\001\n\021TimeSyncRoundTrip\022-\n\tclie"
  "nt_tx\030\001 \001(\0132\032.google.protobuf.Timestamp\022"
  "-\n\tserver_rx\030\002 \001(\0132\032.google.protobuf.Tim"
  "estamp\022-\n\tserver_tx\030\003 \001(\0132\032.google.proto"
  "buf.Timestamp\022-\n\tclient_rx\030\004 \001(\0132\032.googl"
  "e.protobuf.Timestamp\"u\n\020TimeSyncEstimate"
  "\0222\n\017round_trip_time\030\001 \001(\0132\031.google.proto"
  "buf.Duration\022-\n\nclock_skew\030\002 \001(\0132\031.googl"
  "e.protobuf.Duration\"\227\002\n\rTimeSyncState\0223\n"
  "\rbest_estimate\030\001 \001(\0132\034.bosdyn.api.TimeSy"
  "ncEstimate\0220\n\006status\030\002 \001(\0162 .bosdyn.api."
  "TimeSyncState.Status\0224\n\020measurement_time"
  "\030\003 \001(\0132\032.google.protobuf.Timestamp\"i\n\006St"
  "atus\022\022\n\016STATUS_UNKNOWN\020\000\022\r\n\tSTATUS_OK\020\001\022"
  "\036\n\032STATUS_MORE_SAMPLES_NEEDED\020\002\022\034\n\030STATU"
  "S_SERVICE_NOT_READY\020\003\"\230\001\n\025TimeSyncUpdate"
  "Request\022)\n\006header\030\001 \001(\0132\031.bosdyn.api.Req"
  "uestHeader\022:\n\023previous_round_trip\030\002 \001(\0132"
  "\035.bosdyn.api.TimeSyncRoundTrip\022\030\n\020clock_"
  "identifier\030\003 \001(\t\"\301\001\n\026TimeSyncUpdateRespo"
  "nse\022*\n\006header\030\001 \001(\0132\032.bosdyn.api.Respons"
  "eHeader\0227\n\021previous_estimate\030\002 \001(\0132\034.bos"
  "dyn.api.TimeSyncEstimate\022(\n\005state\030\003 \001(\0132"
  "\031.bosdyn.api.TimeSyncState\022\030\n\020clock_iden"
  "tifier\030\004 \001(\tB\017B\rTimeSyncProtob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bosdyn_2fapi_2ftime_5fsync_2eproto_deps[3] = {
  &::descriptor_table_bosdyn_2fapi_2fheader_2eproto,
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bosdyn_2fapi_2ftime_5fsync_2eproto_sccs[5] = {
  &scc_info_TimeSyncEstimate_bosdyn_2fapi_2ftime_5fsync_2eproto.base,
  &scc_info_TimeSyncRoundTrip_bosdyn_2fapi_2ftime_5fsync_2eproto.base,
  &scc_info_TimeSyncState_bosdyn_2fapi_2ftime_5fsync_2eproto.base,
  &scc_info_TimeSyncUpdateRequest_bosdyn_2fapi_2ftime_5fsync_2eproto.base,
  &scc_info_TimeSyncUpdateResponse_bosdyn_2fapi_2ftime_5fsync_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bosdyn_2fapi_2ftime_5fsync_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2ftime_5fsync_2eproto = {
  false, false, descriptor_table_protodef_bosdyn_2fapi_2ftime_5fsync_2eproto, "bosdyn/api/time_sync.proto", 1117,
  &descriptor_table_bosdyn_2fapi_2ftime_5fsync_2eproto_once, descriptor_table_bosdyn_2fapi_2ftime_5fsync_2eproto_sccs, descriptor_table_bosdyn_2fapi_2ftime_5fsync_2eproto_deps, 5, 3,
  schemas, file_default_instances, TableStruct_bosdyn_2fapi_2ftime_5fsync_2eproto::offsets,
  file_level_metadata_bosdyn_2fapi_2ftime_5fsync_2eproto, 5, file_level_enum_descriptors_bosdyn_2fapi_2ftime_5fsync_2eproto, file_level_service_descriptors_bosdyn_2fapi_2ftime_5fsync_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bosdyn_2fapi_2ftime_5fsync_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bosdyn_2fapi_2ftime_5fsync_2eproto)), true);
namespace bosdyn {
namespace api {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TimeSyncState_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2ftime_5fsync_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2ftime_5fsync_2eproto[0];
}
bool TimeSyncState_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TimeSyncState_Status TimeSyncState::STATUS_UNKNOWN;
constexpr TimeSyncState_Status TimeSyncState::STATUS_OK;
constexpr TimeSyncState_Status TimeSyncState::STATUS_MORE_SAMPLES_NEEDED;
constexpr TimeSyncState_Status TimeSyncState::STATUS_SERVICE_NOT_READY;
constexpr TimeSyncState_Status TimeSyncState::Status_MIN;
constexpr TimeSyncState_Status TimeSyncState::Status_MAX;
constexpr int TimeSyncState::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void TimeSyncRoundTrip::InitAsDefaultInstance() {
  ::bosdyn::api::_TimeSyncRoundTrip_default_instance_._instance.get_mutable()->client_tx_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::bosdyn::api::_TimeSyncRoundTrip_default_instance_._instance.get_mutable()->server_rx_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::bosdyn::api::_TimeSyncRoundTrip_default_instance_._instance.get_mutable()->server_tx_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::bosdyn::api::_TimeSyncRoundTrip_default_instance_._instance.get_mutable()->client_rx_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class TimeSyncRoundTrip::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& client_tx(const TimeSyncRoundTrip* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& server_rx(const TimeSyncRoundTrip* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& server_tx(const TimeSyncRoundTrip* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& client_rx(const TimeSyncRoundTrip* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
TimeSyncRoundTrip::_Internal::client_tx(const TimeSyncRoundTrip* msg) {
  return *msg->client_tx_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
TimeSyncRoundTrip::_Internal::server_rx(const TimeSyncRoundTrip* msg) {
  return *msg->server_rx_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
TimeSyncRoundTrip::_Internal::server_tx(const TimeSyncRoundTrip* msg) {
  return *msg->server_tx_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
TimeSyncRoundTrip::_Internal::client_rx(const TimeSyncRoundTrip* msg) {
  return *msg->client_rx_;
}
void TimeSyncRoundTrip::clear_client_tx() {
  if (GetArena() == nullptr && client_tx_ != nullptr) {
    delete client_tx_;
  }
  client_tx_ = nullptr;
}
void TimeSyncRoundTrip::clear_server_rx() {
  if (GetArena() == nullptr && server_rx_ != nullptr) {
    delete server_rx_;
  }
  server_rx_ = nullptr;
}
void TimeSyncRoundTrip::clear_server_tx() {
  if (GetArena() == nullptr && server_tx_ != nullptr) {
    delete server_tx_;
  }
  server_tx_ = nullptr;
}
void TimeSyncRoundTrip::clear_client_rx() {
  if (GetArena() == nullptr && client_rx_ != nullptr) {
    delete client_rx_;
  }
  client_rx_ = nullptr;
}
TimeSyncRoundTrip::TimeSyncRoundTrip(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.TimeSyncRoundTrip)
}
TimeSyncRoundTrip::TimeSyncRoundTrip(const TimeSyncRoundTrip& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_client_tx()) {
    client_tx_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.client_tx_);
  } else {
    client_tx_ = nullptr;
  }
  if (from._internal_has_server_rx()) {
    server_rx_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.server_rx_);
  } else {
    server_rx_ = nullptr;
  }
  if (from._internal_has_server_tx()) {
    server_tx_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.server_tx_);
  } else {
    server_tx_ = nullptr;
  }
  if (from._internal_has_client_rx()) {
    client_rx_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.client_rx_);
  } else {
    client_rx_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.TimeSyncRoundTrip)
}

void TimeSyncRoundTrip::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TimeSyncRoundTrip_bosdyn_2fapi_2ftime_5fsync_2eproto.base);
  ::memset(&client_tx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_rx_) -
      reinterpret_cast<char*>(&client_tx_)) + sizeof(client_rx_));
}

TimeSyncRoundTrip::~TimeSyncRoundTrip() {
  // @@protoc_insertion_point(destructor:bosdyn.api.TimeSyncRoundTrip)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TimeSyncRoundTrip::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete client_tx_;
  if (this != internal_default_instance()) delete server_rx_;
  if (this != internal_default_instance()) delete server_tx_;
  if (this != internal_default_instance()) delete client_rx_;
}

void TimeSyncRoundTrip::ArenaDtor(void* object) {
  TimeSyncRoundTrip* _this = reinterpret_cast< TimeSyncRoundTrip* >(object);
  (void)_this;
}
void TimeSyncRoundTrip::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimeSyncRoundTrip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimeSyncRoundTrip& TimeSyncRoundTrip::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimeSyncRoundTrip_bosdyn_2fapi_2ftime_5fsync_2eproto.base);
  return *internal_default_instance();
}


void TimeSyncRoundTrip::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.TimeSyncRoundTrip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && client_tx_ != nullptr) {
    delete client_tx_;
  }
  client_tx_ = nullptr;
  if (GetArena() == nullptr && server_rx_ != nullptr) {
    delete server_rx_;
  }
  server_rx_ = nullptr;
  if (GetArena() == nullptr && server_tx_ != nullptr) {
    delete server_tx_;
  }
  server_tx_ = nullptr;
  if (GetArena() == nullptr && client_rx_ != nullptr) {
    delete client_rx_;
  }
  client_rx_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeSyncRoundTrip::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp client_tx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_tx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp server_rx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_server_rx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp server_tx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_server_tx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp client_rx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_rx(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimeSyncRoundTrip::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.TimeSyncRoundTrip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp client_tx = 1;
  if (this->has_client_tx()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::client_tx(this), target, stream);
  }

  // .google.protobuf.Timestamp server_rx = 2;
  if (this->has_server_rx()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::server_rx(this), target, stream);
  }

  // .google.protobuf.Timestamp server_tx = 3;
  if (this->has_server_tx()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::server_tx(this), target, stream);
  }

  // .google.protobuf.Timestamp client_rx = 4;
  if (this->has_client_rx()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::client_rx(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.TimeSyncRoundTrip)
  return target;
}

size_t TimeSyncRoundTrip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.TimeSyncRoundTrip)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp client_tx = 1;
  if (this->has_client_tx()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *client_tx_);
  }

  // .google.protobuf.Timestamp server_rx = 2;
  if (this->has_server_rx()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *server_rx_);
  }

  // .google.protobuf.Timestamp server_tx = 3;
  if (this->has_server_tx()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *server_tx_);
  }

  // .google.protobuf.Timestamp client_rx = 4;
  if (this->has_client_rx()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *client_rx_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeSyncRoundTrip::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.TimeSyncRoundTrip)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeSyncRoundTrip* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimeSyncRoundTrip>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.TimeSyncRoundTrip)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.TimeSyncRoundTrip)
    MergeFrom(*source);
  }
}

void TimeSyncRoundTrip::MergeFrom(const TimeSyncRoundTrip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.TimeSyncRoundTrip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_client_tx()) {
    _internal_mutable_client_tx()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_client_tx());
  }
  if (from.has_server_rx()) {
    _internal_mutable_server_rx()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_server_rx());
  }
  if (from.has_server_tx()) {
    _internal_mutable_server_tx()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_server_tx());
  }
  if (from.has_client_rx()) {
    _internal_mutable_client_rx()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_client_rx());
  }
}

void TimeSyncRoundTrip::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.TimeSyncRoundTrip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeSyncRoundTrip::CopyFrom(const TimeSyncRoundTrip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.TimeSyncRoundTrip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeSyncRoundTrip::IsInitialized() const {
  return true;
}

void TimeSyncRoundTrip::InternalSwap(TimeSyncRoundTrip* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimeSyncRoundTrip, client_rx_)
      + sizeof(TimeSyncRoundTrip::client_rx_)
      - PROTOBUF_FIELD_OFFSET(TimeSyncRoundTrip, client_tx_)>(
          reinterpret_cast<char*>(&client_tx_),
          reinterpret_cast<char*>(&other->client_tx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeSyncRoundTrip::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TimeSyncEstimate::InitAsDefaultInstance() {
  ::bosdyn::api::_TimeSyncEstimate_default_instance_._instance.get_mutable()->round_trip_time_ = const_cast< PROTOBUF_NAMESPACE_ID::Duration*>(
      PROTOBUF_NAMESPACE_ID::Duration::internal_default_instance());
  ::bosdyn::api::_TimeSyncEstimate_default_instance_._instance.get_mutable()->clock_skew_ = const_cast< PROTOBUF_NAMESPACE_ID::Duration*>(
      PROTOBUF_NAMESPACE_ID::Duration::internal_default_instance());
}
class TimeSyncEstimate::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Duration& round_trip_time(const TimeSyncEstimate* msg);
  static const PROTOBUF_NAMESPACE_ID::Duration& clock_skew(const TimeSyncEstimate* msg);
};

const PROTOBUF_NAMESPACE_ID::Duration&
TimeSyncEstimate::_Internal::round_trip_time(const TimeSyncEstimate* msg) {
  return *msg->round_trip_time_;
}
const PROTOBUF_NAMESPACE_ID::Duration&
TimeSyncEstimate::_Internal::clock_skew(const TimeSyncEstimate* msg) {
  return *msg->clock_skew_;
}
void TimeSyncEstimate::clear_round_trip_time() {
  if (GetArena() == nullptr && round_trip_time_ != nullptr) {
    delete round_trip_time_;
  }
  round_trip_time_ = nullptr;
}
void TimeSyncEstimate::clear_clock_skew() {
  if (GetArena() == nullptr && clock_skew_ != nullptr) {
    delete clock_skew_;
  }
  clock_skew_ = nullptr;
}
TimeSyncEstimate::TimeSyncEstimate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.TimeSyncEstimate)
}
TimeSyncEstimate::TimeSyncEstimate(const TimeSyncEstimate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_round_trip_time()) {
    round_trip_time_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.round_trip_time_);
  } else {
    round_trip_time_ = nullptr;
  }
  if (from._internal_has_clock_skew()) {
    clock_skew_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.clock_skew_);
  } else {
    clock_skew_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.TimeSyncEstimate)
}

void TimeSyncEstimate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TimeSyncEstimate_bosdyn_2fapi_2ftime_5fsync_2eproto.base);
  ::memset(&round_trip_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&clock_skew_) -
      reinterpret_cast<char*>(&round_trip_time_)) + sizeof(clock_skew_));
}

TimeSyncEstimate::~TimeSyncEstimate() {
  // @@protoc_insertion_point(destructor:bosdyn.api.TimeSyncEstimate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TimeSyncEstimate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete round_trip_time_;
  if (this != internal_default_instance()) delete clock_skew_;
}

void TimeSyncEstimate::ArenaDtor(void* object) {
  TimeSyncEstimate* _this = reinterpret_cast< TimeSyncEstimate* >(object);
  (void)_this;
}
void TimeSyncEstimate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimeSyncEstimate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimeSyncEstimate& TimeSyncEstimate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimeSyncEstimate_bosdyn_2fapi_2ftime_5fsync_2eproto.base);
  return *internal_default_instance();
}


void TimeSyncEstimate::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.TimeSyncEstimate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && round_trip_time_ != nullptr) {
    delete round_trip_time_;
  }
  round_trip_time_ = nullptr;
  if (GetArena() == nullptr && clock_skew_ != nullptr) {
    delete clock_skew_;
  }
  clock_skew_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeSyncEstimate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Duration round_trip_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_round_trip_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Duration clock_skew = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_clock_skew(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimeSyncEstimate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.TimeSyncEstimate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration round_trip_time = 1;
  if (this->has_round_trip_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::round_trip_time(this), target, stream);
  }

  // .google.protobuf.Duration clock_skew = 2;
  if (this->has_clock_skew()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::clock_skew(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.TimeSyncEstimate)
  return target;
}

size_t TimeSyncEstimate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.TimeSyncEstimate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Duration round_trip_time = 1;
  if (this->has_round_trip_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *round_trip_time_);
  }

  // .google.protobuf.Duration clock_skew = 2;
  if (this->has_clock_skew()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *clock_skew_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeSyncEstimate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.TimeSyncEstimate)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeSyncEstimate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimeSyncEstimate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.TimeSyncEstimate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.TimeSyncEstimate)
    MergeFrom(*source);
  }
}

void TimeSyncEstimate::MergeFrom(const TimeSyncEstimate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.TimeSyncEstimate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_round_trip_time()) {
    _internal_mutable_round_trip_time()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_round_trip_time());
  }
  if (from.has_clock_skew()) {
    _internal_mutable_clock_skew()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_clock_skew());
  }
}

void TimeSyncEstimate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.TimeSyncEstimate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeSyncEstimate::CopyFrom(const TimeSyncEstimate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.TimeSyncEstimate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeSyncEstimate::IsInitialized() const {
  return true;
}

void TimeSyncEstimate::InternalSwap(TimeSyncEstimate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimeSyncEstimate, clock_skew_)
      + sizeof(TimeSyncEstimate::clock_skew_)
      - PROTOBUF_FIELD_OFFSET(TimeSyncEstimate, round_trip_time_)>(
          reinterpret_cast<char*>(&round_trip_time_),
          reinterpret_cast<char*>(&other->round_trip_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeSyncEstimate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TimeSyncState::InitAsDefaultInstance() {
  ::bosdyn::api::_TimeSyncState_default_instance_._instance.get_mutable()->best_estimate_ = const_cast< ::bosdyn::api::TimeSyncEstimate*>(
      ::bosdyn::api::TimeSyncEstimate::internal_default_instance());
  ::bosdyn::api::_TimeSyncState_default_instance_._instance.get_mutable()->measurement_time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class TimeSyncState::_Internal {
 public:
  static const ::bosdyn::api::TimeSyncEstimate& best_estimate(const TimeSyncState* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& measurement_time(const TimeSyncState* msg);
};

const ::bosdyn::api::TimeSyncEstimate&
TimeSyncState::_Internal::best_estimate(const TimeSyncState* msg) {
  return *msg->best_estimate_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
TimeSyncState::_Internal::measurement_time(const TimeSyncState* msg) {
  return *msg->measurement_time_;
}
void TimeSyncState::clear_measurement_time() {
  if (GetArena() == nullptr && measurement_time_ != nullptr) {
    delete measurement_time_;
  }
  measurement_time_ = nullptr;
}
TimeSyncState::TimeSyncState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.TimeSyncState)
}
TimeSyncState::TimeSyncState(const TimeSyncState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_best_estimate()) {
    best_estimate_ = new ::bosdyn::api::TimeSyncEstimate(*from.best_estimate_);
  } else {
    best_estimate_ = nullptr;
  }
  if (from._internal_has_measurement_time()) {
    measurement_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.measurement_time_);
  } else {
    measurement_time_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.TimeSyncState)
}

void TimeSyncState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TimeSyncState_bosdyn_2fapi_2ftime_5fsync_2eproto.base);
  ::memset(&best_estimate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&best_estimate_)) + sizeof(status_));
}

TimeSyncState::~TimeSyncState() {
  // @@protoc_insertion_point(destructor:bosdyn.api.TimeSyncState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TimeSyncState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete best_estimate_;
  if (this != internal_default_instance()) delete measurement_time_;
}

void TimeSyncState::ArenaDtor(void* object) {
  TimeSyncState* _this = reinterpret_cast< TimeSyncState* >(object);
  (void)_this;
}
void TimeSyncState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimeSyncState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimeSyncState& TimeSyncState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimeSyncState_bosdyn_2fapi_2ftime_5fsync_2eproto.base);
  return *internal_default_instance();
}


void TimeSyncState::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.TimeSyncState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && best_estimate_ != nullptr) {
    delete best_estimate_;
  }
  best_estimate_ = nullptr;
  if (GetArena() == nullptr && measurement_time_ != nullptr) {
    delete measurement_time_;
  }
  measurement_time_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeSyncState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.TimeSyncEstimate best_estimate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_best_estimate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.TimeSyncState.Status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::bosdyn::api::TimeSyncState_Status>(val));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp measurement_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_measurement_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimeSyncState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.TimeSyncState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.TimeSyncEstimate best_estimate = 1;
  if (this->has_best_estimate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::best_estimate(this), target, stream);
  }

  // .bosdyn.api.TimeSyncState.Status status = 2;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // .google.protobuf.Timestamp measurement_time = 3;
  if (this->has_measurement_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::measurement_time(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.TimeSyncState)
  return target;
}

size_t TimeSyncState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.TimeSyncState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.TimeSyncEstimate best_estimate = 1;
  if (this->has_best_estimate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *best_estimate_);
  }

  // .google.protobuf.Timestamp measurement_time = 3;
  if (this->has_measurement_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *measurement_time_);
  }

  // .bosdyn.api.TimeSyncState.Status status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeSyncState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.TimeSyncState)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeSyncState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimeSyncState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.TimeSyncState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.TimeSyncState)
    MergeFrom(*source);
  }
}

void TimeSyncState::MergeFrom(const TimeSyncState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.TimeSyncState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_best_estimate()) {
    _internal_mutable_best_estimate()->::bosdyn::api::TimeSyncEstimate::MergeFrom(from._internal_best_estimate());
  }
  if (from.has_measurement_time()) {
    _internal_mutable_measurement_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_measurement_time());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void TimeSyncState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.TimeSyncState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeSyncState::CopyFrom(const TimeSyncState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.TimeSyncState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeSyncState::IsInitialized() const {
  return true;
}

void TimeSyncState::InternalSwap(TimeSyncState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimeSyncState, status_)
      + sizeof(TimeSyncState::status_)
      - PROTOBUF_FIELD_OFFSET(TimeSyncState, best_estimate_)>(
          reinterpret_cast<char*>(&best_estimate_),
          reinterpret_cast<char*>(&other->best_estimate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeSyncState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TimeSyncUpdateRequest::InitAsDefaultInstance() {
  ::bosdyn::api::_TimeSyncUpdateRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
  ::bosdyn::api::_TimeSyncUpdateRequest_default_instance_._instance.get_mutable()->previous_round_trip_ = const_cast< ::bosdyn::api::TimeSyncRoundTrip*>(
      ::bosdyn::api::TimeSyncRoundTrip::internal_default_instance());
}
class TimeSyncUpdateRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const TimeSyncUpdateRequest* msg);
  static const ::bosdyn::api::TimeSyncRoundTrip& previous_round_trip(const TimeSyncUpdateRequest* msg);
};

const ::bosdyn::api::RequestHeader&
TimeSyncUpdateRequest::_Internal::header(const TimeSyncUpdateRequest* msg) {
  return *msg->header_;
}
const ::bosdyn::api::TimeSyncRoundTrip&
TimeSyncUpdateRequest::_Internal::previous_round_trip(const TimeSyncUpdateRequest* msg) {
  return *msg->previous_round_trip_;
}
void TimeSyncUpdateRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
TimeSyncUpdateRequest::TimeSyncUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.TimeSyncUpdateRequest)
}
TimeSyncUpdateRequest::TimeSyncUpdateRequest(const TimeSyncUpdateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clock_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clock_identifier().empty()) {
    clock_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_clock_identifier(),
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_previous_round_trip()) {
    previous_round_trip_ = new ::bosdyn::api::TimeSyncRoundTrip(*from.previous_round_trip_);
  } else {
    previous_round_trip_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.TimeSyncUpdateRequest)
}

void TimeSyncUpdateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TimeSyncUpdateRequest_bosdyn_2fapi_2ftime_5fsync_2eproto.base);
  clock_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&previous_round_trip_) -
      reinterpret_cast<char*>(&header_)) + sizeof(previous_round_trip_));
}

TimeSyncUpdateRequest::~TimeSyncUpdateRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.TimeSyncUpdateRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TimeSyncUpdateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  clock_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete previous_round_trip_;
}

void TimeSyncUpdateRequest::ArenaDtor(void* object) {
  TimeSyncUpdateRequest* _this = reinterpret_cast< TimeSyncUpdateRequest* >(object);
  (void)_this;
}
void TimeSyncUpdateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimeSyncUpdateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimeSyncUpdateRequest& TimeSyncUpdateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimeSyncUpdateRequest_bosdyn_2fapi_2ftime_5fsync_2eproto.base);
  return *internal_default_instance();
}


void TimeSyncUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.TimeSyncUpdateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clock_identifier_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && previous_round_trip_ != nullptr) {
    delete previous_round_trip_;
  }
  previous_round_trip_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeSyncUpdateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.TimeSyncRoundTrip previous_round_trip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_previous_round_trip(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string clock_identifier = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_clock_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.TimeSyncUpdateRequest.clock_identifier"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimeSyncUpdateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.TimeSyncUpdateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.TimeSyncRoundTrip previous_round_trip = 2;
  if (this->has_previous_round_trip()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::previous_round_trip(this), target, stream);
  }

  // string clock_identifier = 3;
  if (this->clock_identifier().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clock_identifier().data(), static_cast<int>(this->_internal_clock_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.TimeSyncUpdateRequest.clock_identifier");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_clock_identifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.TimeSyncUpdateRequest)
  return target;
}

size_t TimeSyncUpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.TimeSyncUpdateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string clock_identifier = 3;
  if (this->clock_identifier().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clock_identifier());
  }

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.TimeSyncRoundTrip previous_round_trip = 2;
  if (this->has_previous_round_trip()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *previous_round_trip_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeSyncUpdateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.TimeSyncUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeSyncUpdateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimeSyncUpdateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.TimeSyncUpdateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.TimeSyncUpdateRequest)
    MergeFrom(*source);
  }
}

void TimeSyncUpdateRequest::MergeFrom(const TimeSyncUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.TimeSyncUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.clock_identifier().size() > 0) {
    _internal_set_clock_identifier(from._internal_clock_identifier());
  }
  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
  if (from.has_previous_round_trip()) {
    _internal_mutable_previous_round_trip()->::bosdyn::api::TimeSyncRoundTrip::MergeFrom(from._internal_previous_round_trip());
  }
}

void TimeSyncUpdateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.TimeSyncUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeSyncUpdateRequest::CopyFrom(const TimeSyncUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.TimeSyncUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeSyncUpdateRequest::IsInitialized() const {
  return true;
}

void TimeSyncUpdateRequest::InternalSwap(TimeSyncUpdateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  clock_identifier_.Swap(&other->clock_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimeSyncUpdateRequest, previous_round_trip_)
      + sizeof(TimeSyncUpdateRequest::previous_round_trip_)
      - PROTOBUF_FIELD_OFFSET(TimeSyncUpdateRequest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeSyncUpdateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TimeSyncUpdateResponse::InitAsDefaultInstance() {
  ::bosdyn::api::_TimeSyncUpdateResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
  ::bosdyn::api::_TimeSyncUpdateResponse_default_instance_._instance.get_mutable()->previous_estimate_ = const_cast< ::bosdyn::api::TimeSyncEstimate*>(
      ::bosdyn::api::TimeSyncEstimate::internal_default_instance());
  ::bosdyn::api::_TimeSyncUpdateResponse_default_instance_._instance.get_mutable()->state_ = const_cast< ::bosdyn::api::TimeSyncState*>(
      ::bosdyn::api::TimeSyncState::internal_default_instance());
}
class TimeSyncUpdateResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const TimeSyncUpdateResponse* msg);
  static const ::bosdyn::api::TimeSyncEstimate& previous_estimate(const TimeSyncUpdateResponse* msg);
  static const ::bosdyn::api::TimeSyncState& state(const TimeSyncUpdateResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
TimeSyncUpdateResponse::_Internal::header(const TimeSyncUpdateResponse* msg) {
  return *msg->header_;
}
const ::bosdyn::api::TimeSyncEstimate&
TimeSyncUpdateResponse::_Internal::previous_estimate(const TimeSyncUpdateResponse* msg) {
  return *msg->previous_estimate_;
}
const ::bosdyn::api::TimeSyncState&
TimeSyncUpdateResponse::_Internal::state(const TimeSyncUpdateResponse* msg) {
  return *msg->state_;
}
void TimeSyncUpdateResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
TimeSyncUpdateResponse::TimeSyncUpdateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.TimeSyncUpdateResponse)
}
TimeSyncUpdateResponse::TimeSyncUpdateResponse(const TimeSyncUpdateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clock_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clock_identifier().empty()) {
    clock_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_clock_identifier(),
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_previous_estimate()) {
    previous_estimate_ = new ::bosdyn::api::TimeSyncEstimate(*from.previous_estimate_);
  } else {
    previous_estimate_ = nullptr;
  }
  if (from._internal_has_state()) {
    state_ = new ::bosdyn::api::TimeSyncState(*from.state_);
  } else {
    state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.TimeSyncUpdateResponse)
}

void TimeSyncUpdateResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TimeSyncUpdateResponse_bosdyn_2fapi_2ftime_5fsync_2eproto.base);
  clock_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&header_)) + sizeof(state_));
}

TimeSyncUpdateResponse::~TimeSyncUpdateResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.TimeSyncUpdateResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TimeSyncUpdateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  clock_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete previous_estimate_;
  if (this != internal_default_instance()) delete state_;
}

void TimeSyncUpdateResponse::ArenaDtor(void* object) {
  TimeSyncUpdateResponse* _this = reinterpret_cast< TimeSyncUpdateResponse* >(object);
  (void)_this;
}
void TimeSyncUpdateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimeSyncUpdateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimeSyncUpdateResponse& TimeSyncUpdateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimeSyncUpdateResponse_bosdyn_2fapi_2ftime_5fsync_2eproto.base);
  return *internal_default_instance();
}


void TimeSyncUpdateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.TimeSyncUpdateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clock_identifier_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && previous_estimate_ != nullptr) {
    delete previous_estimate_;
  }
  previous_estimate_ = nullptr;
  if (GetArena() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeSyncUpdateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.TimeSyncEstimate previous_estimate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_previous_estimate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.TimeSyncState state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string clock_identifier = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_clock_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.TimeSyncUpdateResponse.clock_identifier"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimeSyncUpdateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.TimeSyncUpdateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.TimeSyncEstimate previous_estimate = 2;
  if (this->has_previous_estimate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::previous_estimate(this), target, stream);
  }

  // .bosdyn.api.TimeSyncState state = 3;
  if (this->has_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::state(this), target, stream);
  }

  // string clock_identifier = 4;
  if (this->clock_identifier().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clock_identifier().data(), static_cast<int>(this->_internal_clock_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.TimeSyncUpdateResponse.clock_identifier");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_clock_identifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.TimeSyncUpdateResponse)
  return target;
}

size_t TimeSyncUpdateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.TimeSyncUpdateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string clock_identifier = 4;
  if (this->clock_identifier().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clock_identifier());
  }

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.TimeSyncEstimate previous_estimate = 2;
  if (this->has_previous_estimate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *previous_estimate_);
  }

  // .bosdyn.api.TimeSyncState state = 3;
  if (this->has_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *state_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeSyncUpdateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.TimeSyncUpdateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeSyncUpdateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimeSyncUpdateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.TimeSyncUpdateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.TimeSyncUpdateResponse)
    MergeFrom(*source);
  }
}

void TimeSyncUpdateResponse::MergeFrom(const TimeSyncUpdateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.TimeSyncUpdateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.clock_identifier().size() > 0) {
    _internal_set_clock_identifier(from._internal_clock_identifier());
  }
  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.has_previous_estimate()) {
    _internal_mutable_previous_estimate()->::bosdyn::api::TimeSyncEstimate::MergeFrom(from._internal_previous_estimate());
  }
  if (from.has_state()) {
    _internal_mutable_state()->::bosdyn::api::TimeSyncState::MergeFrom(from._internal_state());
  }
}

void TimeSyncUpdateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.TimeSyncUpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeSyncUpdateResponse::CopyFrom(const TimeSyncUpdateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.TimeSyncUpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeSyncUpdateResponse::IsInitialized() const {
  return true;
}

void TimeSyncUpdateResponse::InternalSwap(TimeSyncUpdateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  clock_identifier_.Swap(&other->clock_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimeSyncUpdateResponse, state_)
      + sizeof(TimeSyncUpdateResponse::state_)
      - PROTOBUF_FIELD_OFFSET(TimeSyncUpdateResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeSyncUpdateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bosdyn::api::TimeSyncRoundTrip* Arena::CreateMaybeMessage< ::bosdyn::api::TimeSyncRoundTrip >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::TimeSyncRoundTrip >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::TimeSyncEstimate* Arena::CreateMaybeMessage< ::bosdyn::api::TimeSyncEstimate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::TimeSyncEstimate >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::TimeSyncState* Arena::CreateMaybeMessage< ::bosdyn::api::TimeSyncState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::TimeSyncState >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::TimeSyncUpdateRequest* Arena::CreateMaybeMessage< ::bosdyn::api::TimeSyncUpdateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::TimeSyncUpdateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::TimeSyncUpdateResponse* Arena::CreateMaybeMessage< ::bosdyn::api::TimeSyncUpdateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::TimeSyncUpdateResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
