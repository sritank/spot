// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/power.proto

#include "bosdyn/api/power.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2flease_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Lease_bosdyn_2fapi_2flease_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2flease_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LeaseUseResult_bosdyn_2fapi_2flease_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto;
namespace bosdyn {
namespace api {
class PowerCommandRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PowerCommandRequest> _instance;
} _PowerCommandRequest_default_instance_;
class PowerCommandResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PowerCommandResponse> _instance;
} _PowerCommandResponse_default_instance_;
class PowerCommandFeedbackRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PowerCommandFeedbackRequest> _instance;
} _PowerCommandFeedbackRequest_default_instance_;
class PowerCommandFeedbackResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PowerCommandFeedbackResponse> _instance;
} _PowerCommandFeedbackResponse_default_instance_;
}  // namespace api
}  // namespace bosdyn
static void InitDefaultsscc_info_PowerCommandFeedbackRequest_bosdyn_2fapi_2fpower_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_PowerCommandFeedbackRequest_default_instance_;
    new (ptr) ::bosdyn::api::PowerCommandFeedbackRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::PowerCommandFeedbackRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PowerCommandFeedbackRequest_bosdyn_2fapi_2fpower_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PowerCommandFeedbackRequest_bosdyn_2fapi_2fpower_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_PowerCommandFeedbackResponse_bosdyn_2fapi_2fpower_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_PowerCommandFeedbackResponse_default_instance_;
    new (ptr) ::bosdyn::api::PowerCommandFeedbackResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::PowerCommandFeedbackResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PowerCommandFeedbackResponse_bosdyn_2fapi_2fpower_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PowerCommandFeedbackResponse_bosdyn_2fapi_2fpower_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_PowerCommandRequest_bosdyn_2fapi_2fpower_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_PowerCommandRequest_default_instance_;
    new (ptr) ::bosdyn::api::PowerCommandRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::PowerCommandRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PowerCommandRequest_bosdyn_2fapi_2fpower_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PowerCommandRequest_bosdyn_2fapi_2fpower_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_Lease_bosdyn_2fapi_2flease_2eproto.base,}};

static void InitDefaultsscc_info_PowerCommandResponse_bosdyn_2fapi_2fpower_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_PowerCommandResponse_default_instance_;
    new (ptr) ::bosdyn::api::PowerCommandResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::PowerCommandResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PowerCommandResponse_bosdyn_2fapi_2fpower_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PowerCommandResponse_bosdyn_2fapi_2fpower_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_LeaseUseResult_bosdyn_2fapi_2flease_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bosdyn_2fapi_2fpower_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_bosdyn_2fapi_2fpower_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bosdyn_2fapi_2fpower_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bosdyn_2fapi_2fpower_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::PowerCommandRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::PowerCommandRequest, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::PowerCommandRequest, lease_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::PowerCommandRequest, request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::PowerCommandResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::PowerCommandResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::PowerCommandResponse, lease_use_result_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::PowerCommandResponse, status_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::PowerCommandResponse, power_command_id_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::PowerCommandResponse, license_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::PowerCommandFeedbackRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::PowerCommandFeedbackRequest, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::PowerCommandFeedbackRequest, power_command_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::PowerCommandFeedbackResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::PowerCommandFeedbackResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::PowerCommandFeedbackResponse, status_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::bosdyn::api::PowerCommandRequest)},
  { 8, -1, sizeof(::bosdyn::api::PowerCommandResponse)},
  { 18, -1, sizeof(::bosdyn::api::PowerCommandFeedbackRequest)},
  { 25, -1, sizeof(::bosdyn::api::PowerCommandFeedbackResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_PowerCommandRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_PowerCommandResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_PowerCommandFeedbackRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_PowerCommandFeedbackResponse_default_instance_),
};

const char descriptor_table_protodef_bosdyn_2fapi_2fpower_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026bosdyn/api/power.proto\022\nbosdyn.api\032\027bo"
  "sdyn/api/header.proto\032\026bosdyn/api/lease."
  "proto\032\030bosdyn/api/license.proto\"\335\001\n\023Powe"
  "rCommandRequest\022)\n\006header\030\001 \001(\0132\031.bosdyn"
  ".api.RequestHeader\022 \n\005lease\030\002 \001(\0132\021.bosd"
  "yn.api.Lease\0228\n\007request\030\003 \001(\0162\'.bosdyn.a"
  "pi.PowerCommandRequest.Request\"\?\n\007Reques"
  "t\022\023\n\017REQUEST_UNKNOWN\020\000\022\017\n\013REQUEST_OFF\020\001\022"
  "\016\n\nREQUEST_ON\020\002\"\372\001\n\024PowerCommandResponse"
  "\022*\n\006header\030\001 \001(\0132\032.bosdyn.api.ResponseHe"
  "ader\0224\n\020lease_use_result\030\002 \001(\0132\032.bosdyn."
  "api.LeaseUseResult\022.\n\006status\030\003 \001(\0162\036.bos"
  "dyn.api.PowerCommandStatus\022\030\n\020power_comm"
  "and_id\030\004 \001(\r\0226\n\016license_status\030\005 \001(\0162\036.b"
  "osdyn.api.LicenseInfo.Status\"b\n\033PowerCom"
  "mandFeedbackRequest\022)\n\006header\030\001 \001(\0132\031.bo"
  "sdyn.api.RequestHeader\022\030\n\020power_command_"
  "id\030\002 \001(\r\"z\n\034PowerCommandFeedbackResponse"
  "\022*\n\006header\030\001 \001(\0132\032.bosdyn.api.ResponseHe"
  "ader\022.\n\006status\030\002 \001(\0162\036.bosdyn.api.PowerC"
  "ommandStatus*\220\002\n\022PowerCommandStatus\022\022\n\016S"
  "TATUS_UNKNOWN\020\000\022\026\n\022STATUS_IN_PROGRESS\020\001\022"
  "\022\n\016STATUS_SUCCESS\020\002\022 \n\034STATUS_SHORE_POWE"
  "R_CONNECTED\020\003\022\032\n\026STATUS_BATTERY_MISSING\020"
  "\004\022\036\n\032STATUS_COMMAND_IN_PROGRESS\020\005\022\023\n\017STA"
  "TUS_ESTOPPED\020\006\022\022\n\016STATUS_FAULTED\020\007\022\031\n\025ST"
  "ATUS_INTERNAL_ERROR\020\010\022\030\n\024STATUS_LICENSE_"
  "ERROR\020\tB\014B\nPowerProtob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bosdyn_2fapi_2fpower_2eproto_deps[3] = {
  &::descriptor_table_bosdyn_2fapi_2fheader_2eproto,
  &::descriptor_table_bosdyn_2fapi_2flease_2eproto,
  &::descriptor_table_bosdyn_2fapi_2flicense_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bosdyn_2fapi_2fpower_2eproto_sccs[4] = {
  &scc_info_PowerCommandFeedbackRequest_bosdyn_2fapi_2fpower_2eproto.base,
  &scc_info_PowerCommandFeedbackResponse_bosdyn_2fapi_2fpower_2eproto.base,
  &scc_info_PowerCommandRequest_bosdyn_2fapi_2fpower_2eproto.base,
  &scc_info_PowerCommandResponse_bosdyn_2fapi_2fpower_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bosdyn_2fapi_2fpower_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2fpower_2eproto = {
  false, false, descriptor_table_protodef_bosdyn_2fapi_2fpower_2eproto, "bosdyn/api/power.proto", 1109,
  &descriptor_table_bosdyn_2fapi_2fpower_2eproto_once, descriptor_table_bosdyn_2fapi_2fpower_2eproto_sccs, descriptor_table_bosdyn_2fapi_2fpower_2eproto_deps, 4, 3,
  schemas, file_default_instances, TableStruct_bosdyn_2fapi_2fpower_2eproto::offsets,
  file_level_metadata_bosdyn_2fapi_2fpower_2eproto, 4, file_level_enum_descriptors_bosdyn_2fapi_2fpower_2eproto, file_level_service_descriptors_bosdyn_2fapi_2fpower_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bosdyn_2fapi_2fpower_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bosdyn_2fapi_2fpower_2eproto)), true);
namespace bosdyn {
namespace api {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PowerCommandRequest_Request_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2fpower_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2fpower_2eproto[0];
}
bool PowerCommandRequest_Request_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PowerCommandRequest_Request PowerCommandRequest::REQUEST_UNKNOWN;
constexpr PowerCommandRequest_Request PowerCommandRequest::REQUEST_OFF;
constexpr PowerCommandRequest_Request PowerCommandRequest::REQUEST_ON;
constexpr PowerCommandRequest_Request PowerCommandRequest::Request_MIN;
constexpr PowerCommandRequest_Request PowerCommandRequest::Request_MAX;
constexpr int PowerCommandRequest::Request_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PowerCommandStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2fpower_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2fpower_2eproto[1];
}
bool PowerCommandStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void PowerCommandRequest::InitAsDefaultInstance() {
  ::bosdyn::api::_PowerCommandRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
  ::bosdyn::api::_PowerCommandRequest_default_instance_._instance.get_mutable()->lease_ = const_cast< ::bosdyn::api::Lease*>(
      ::bosdyn::api::Lease::internal_default_instance());
}
class PowerCommandRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const PowerCommandRequest* msg);
  static const ::bosdyn::api::Lease& lease(const PowerCommandRequest* msg);
};

const ::bosdyn::api::RequestHeader&
PowerCommandRequest::_Internal::header(const PowerCommandRequest* msg) {
  return *msg->header_;
}
const ::bosdyn::api::Lease&
PowerCommandRequest::_Internal::lease(const PowerCommandRequest* msg) {
  return *msg->lease_;
}
void PowerCommandRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void PowerCommandRequest::clear_lease() {
  if (GetArena() == nullptr && lease_ != nullptr) {
    delete lease_;
  }
  lease_ = nullptr;
}
PowerCommandRequest::PowerCommandRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.PowerCommandRequest)
}
PowerCommandRequest::PowerCommandRequest(const PowerCommandRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_lease()) {
    lease_ = new ::bosdyn::api::Lease(*from.lease_);
  } else {
    lease_ = nullptr;
  }
  request_ = from.request_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.PowerCommandRequest)
}

void PowerCommandRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PowerCommandRequest_bosdyn_2fapi_2fpower_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&request_) -
      reinterpret_cast<char*>(&header_)) + sizeof(request_));
}

PowerCommandRequest::~PowerCommandRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.PowerCommandRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PowerCommandRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete lease_;
}

void PowerCommandRequest::ArenaDtor(void* object) {
  PowerCommandRequest* _this = reinterpret_cast< PowerCommandRequest* >(object);
  (void)_this;
}
void PowerCommandRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PowerCommandRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PowerCommandRequest& PowerCommandRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PowerCommandRequest_bosdyn_2fapi_2fpower_2eproto.base);
  return *internal_default_instance();
}


void PowerCommandRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.PowerCommandRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && lease_ != nullptr) {
    delete lease_;
  }
  lease_ = nullptr;
  request_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PowerCommandRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.Lease lease = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lease(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.PowerCommandRequest.Request request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_request(static_cast<::bosdyn::api::PowerCommandRequest_Request>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PowerCommandRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.PowerCommandRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.Lease lease = 2;
  if (this->has_lease()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::lease(this), target, stream);
  }

  // .bosdyn.api.PowerCommandRequest.Request request = 3;
  if (this->request() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_request(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.PowerCommandRequest)
  return target;
}

size_t PowerCommandRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.PowerCommandRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.Lease lease = 2;
  if (this->has_lease()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lease_);
  }

  // .bosdyn.api.PowerCommandRequest.Request request = 3;
  if (this->request() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_request());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PowerCommandRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.PowerCommandRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PowerCommandRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PowerCommandRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.PowerCommandRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.PowerCommandRequest)
    MergeFrom(*source);
  }
}

void PowerCommandRequest::MergeFrom(const PowerCommandRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.PowerCommandRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
  if (from.has_lease()) {
    _internal_mutable_lease()->::bosdyn::api::Lease::MergeFrom(from._internal_lease());
  }
  if (from.request() != 0) {
    _internal_set_request(from._internal_request());
  }
}

void PowerCommandRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.PowerCommandRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PowerCommandRequest::CopyFrom(const PowerCommandRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.PowerCommandRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerCommandRequest::IsInitialized() const {
  return true;
}

void PowerCommandRequest::InternalSwap(PowerCommandRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PowerCommandRequest, request_)
      + sizeof(PowerCommandRequest::request_)
      - PROTOBUF_FIELD_OFFSET(PowerCommandRequest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PowerCommandRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PowerCommandResponse::InitAsDefaultInstance() {
  ::bosdyn::api::_PowerCommandResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
  ::bosdyn::api::_PowerCommandResponse_default_instance_._instance.get_mutable()->lease_use_result_ = const_cast< ::bosdyn::api::LeaseUseResult*>(
      ::bosdyn::api::LeaseUseResult::internal_default_instance());
}
class PowerCommandResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const PowerCommandResponse* msg);
  static const ::bosdyn::api::LeaseUseResult& lease_use_result(const PowerCommandResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
PowerCommandResponse::_Internal::header(const PowerCommandResponse* msg) {
  return *msg->header_;
}
const ::bosdyn::api::LeaseUseResult&
PowerCommandResponse::_Internal::lease_use_result(const PowerCommandResponse* msg) {
  return *msg->lease_use_result_;
}
void PowerCommandResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void PowerCommandResponse::clear_lease_use_result() {
  if (GetArena() == nullptr && lease_use_result_ != nullptr) {
    delete lease_use_result_;
  }
  lease_use_result_ = nullptr;
}
PowerCommandResponse::PowerCommandResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.PowerCommandResponse)
}
PowerCommandResponse::PowerCommandResponse(const PowerCommandResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_lease_use_result()) {
    lease_use_result_ = new ::bosdyn::api::LeaseUseResult(*from.lease_use_result_);
  } else {
    lease_use_result_ = nullptr;
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&license_status_) -
    reinterpret_cast<char*>(&status_)) + sizeof(license_status_));
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.PowerCommandResponse)
}

void PowerCommandResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PowerCommandResponse_bosdyn_2fapi_2fpower_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&license_status_) -
      reinterpret_cast<char*>(&header_)) + sizeof(license_status_));
}

PowerCommandResponse::~PowerCommandResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.PowerCommandResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PowerCommandResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete lease_use_result_;
}

void PowerCommandResponse::ArenaDtor(void* object) {
  PowerCommandResponse* _this = reinterpret_cast< PowerCommandResponse* >(object);
  (void)_this;
}
void PowerCommandResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PowerCommandResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PowerCommandResponse& PowerCommandResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PowerCommandResponse_bosdyn_2fapi_2fpower_2eproto.base);
  return *internal_default_instance();
}


void PowerCommandResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.PowerCommandResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && lease_use_result_ != nullptr) {
    delete lease_use_result_;
  }
  lease_use_result_ = nullptr;
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&license_status_) -
      reinterpret_cast<char*>(&status_)) + sizeof(license_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PowerCommandResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.LeaseUseResult lease_use_result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lease_use_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.PowerCommandStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::bosdyn::api::PowerCommandStatus>(val));
        } else goto handle_unusual;
        continue;
      // uint32 power_command_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          power_command_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.LicenseInfo.Status license_status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_license_status(static_cast<::bosdyn::api::LicenseInfo_Status>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PowerCommandResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.PowerCommandResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.LeaseUseResult lease_use_result = 2;
  if (this->has_lease_use_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::lease_use_result(this), target, stream);
  }

  // .bosdyn.api.PowerCommandStatus status = 3;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_status(), target);
  }

  // uint32 power_command_id = 4;
  if (this->power_command_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_power_command_id(), target);
  }

  // .bosdyn.api.LicenseInfo.Status license_status = 5;
  if (this->license_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_license_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.PowerCommandResponse)
  return target;
}

size_t PowerCommandResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.PowerCommandResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.LeaseUseResult lease_use_result = 2;
  if (this->has_lease_use_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lease_use_result_);
  }

  // .bosdyn.api.PowerCommandStatus status = 3;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // uint32 power_command_id = 4;
  if (this->power_command_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_power_command_id());
  }

  // .bosdyn.api.LicenseInfo.Status license_status = 5;
  if (this->license_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_license_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PowerCommandResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.PowerCommandResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PowerCommandResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PowerCommandResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.PowerCommandResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.PowerCommandResponse)
    MergeFrom(*source);
  }
}

void PowerCommandResponse::MergeFrom(const PowerCommandResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.PowerCommandResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.has_lease_use_result()) {
    _internal_mutable_lease_use_result()->::bosdyn::api::LeaseUseResult::MergeFrom(from._internal_lease_use_result());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.power_command_id() != 0) {
    _internal_set_power_command_id(from._internal_power_command_id());
  }
  if (from.license_status() != 0) {
    _internal_set_license_status(from._internal_license_status());
  }
}

void PowerCommandResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.PowerCommandResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PowerCommandResponse::CopyFrom(const PowerCommandResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.PowerCommandResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerCommandResponse::IsInitialized() const {
  return true;
}

void PowerCommandResponse::InternalSwap(PowerCommandResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PowerCommandResponse, license_status_)
      + sizeof(PowerCommandResponse::license_status_)
      - PROTOBUF_FIELD_OFFSET(PowerCommandResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PowerCommandResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PowerCommandFeedbackRequest::InitAsDefaultInstance() {
  ::bosdyn::api::_PowerCommandFeedbackRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
}
class PowerCommandFeedbackRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const PowerCommandFeedbackRequest* msg);
};

const ::bosdyn::api::RequestHeader&
PowerCommandFeedbackRequest::_Internal::header(const PowerCommandFeedbackRequest* msg) {
  return *msg->header_;
}
void PowerCommandFeedbackRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
PowerCommandFeedbackRequest::PowerCommandFeedbackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.PowerCommandFeedbackRequest)
}
PowerCommandFeedbackRequest::PowerCommandFeedbackRequest(const PowerCommandFeedbackRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  power_command_id_ = from.power_command_id_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.PowerCommandFeedbackRequest)
}

void PowerCommandFeedbackRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PowerCommandFeedbackRequest_bosdyn_2fapi_2fpower_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&power_command_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(power_command_id_));
}

PowerCommandFeedbackRequest::~PowerCommandFeedbackRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.PowerCommandFeedbackRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PowerCommandFeedbackRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void PowerCommandFeedbackRequest::ArenaDtor(void* object) {
  PowerCommandFeedbackRequest* _this = reinterpret_cast< PowerCommandFeedbackRequest* >(object);
  (void)_this;
}
void PowerCommandFeedbackRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PowerCommandFeedbackRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PowerCommandFeedbackRequest& PowerCommandFeedbackRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PowerCommandFeedbackRequest_bosdyn_2fapi_2fpower_2eproto.base);
  return *internal_default_instance();
}


void PowerCommandFeedbackRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.PowerCommandFeedbackRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  power_command_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PowerCommandFeedbackRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 power_command_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          power_command_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PowerCommandFeedbackRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.PowerCommandFeedbackRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // uint32 power_command_id = 2;
  if (this->power_command_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_power_command_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.PowerCommandFeedbackRequest)
  return target;
}

size_t PowerCommandFeedbackRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.PowerCommandFeedbackRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // uint32 power_command_id = 2;
  if (this->power_command_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_power_command_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PowerCommandFeedbackRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.PowerCommandFeedbackRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PowerCommandFeedbackRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PowerCommandFeedbackRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.PowerCommandFeedbackRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.PowerCommandFeedbackRequest)
    MergeFrom(*source);
  }
}

void PowerCommandFeedbackRequest::MergeFrom(const PowerCommandFeedbackRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.PowerCommandFeedbackRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
  if (from.power_command_id() != 0) {
    _internal_set_power_command_id(from._internal_power_command_id());
  }
}

void PowerCommandFeedbackRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.PowerCommandFeedbackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PowerCommandFeedbackRequest::CopyFrom(const PowerCommandFeedbackRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.PowerCommandFeedbackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerCommandFeedbackRequest::IsInitialized() const {
  return true;
}

void PowerCommandFeedbackRequest::InternalSwap(PowerCommandFeedbackRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PowerCommandFeedbackRequest, power_command_id_)
      + sizeof(PowerCommandFeedbackRequest::power_command_id_)
      - PROTOBUF_FIELD_OFFSET(PowerCommandFeedbackRequest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PowerCommandFeedbackRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PowerCommandFeedbackResponse::InitAsDefaultInstance() {
  ::bosdyn::api::_PowerCommandFeedbackResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
}
class PowerCommandFeedbackResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const PowerCommandFeedbackResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
PowerCommandFeedbackResponse::_Internal::header(const PowerCommandFeedbackResponse* msg) {
  return *msg->header_;
}
void PowerCommandFeedbackResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
PowerCommandFeedbackResponse::PowerCommandFeedbackResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.PowerCommandFeedbackResponse)
}
PowerCommandFeedbackResponse::PowerCommandFeedbackResponse(const PowerCommandFeedbackResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.PowerCommandFeedbackResponse)
}

void PowerCommandFeedbackResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PowerCommandFeedbackResponse_bosdyn_2fapi_2fpower_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&header_)) + sizeof(status_));
}

PowerCommandFeedbackResponse::~PowerCommandFeedbackResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.PowerCommandFeedbackResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PowerCommandFeedbackResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void PowerCommandFeedbackResponse::ArenaDtor(void* object) {
  PowerCommandFeedbackResponse* _this = reinterpret_cast< PowerCommandFeedbackResponse* >(object);
  (void)_this;
}
void PowerCommandFeedbackResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PowerCommandFeedbackResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PowerCommandFeedbackResponse& PowerCommandFeedbackResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PowerCommandFeedbackResponse_bosdyn_2fapi_2fpower_2eproto.base);
  return *internal_default_instance();
}


void PowerCommandFeedbackResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.PowerCommandFeedbackResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PowerCommandFeedbackResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.PowerCommandStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::bosdyn::api::PowerCommandStatus>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PowerCommandFeedbackResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.PowerCommandFeedbackResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.PowerCommandStatus status = 2;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.PowerCommandFeedbackResponse)
  return target;
}

size_t PowerCommandFeedbackResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.PowerCommandFeedbackResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.PowerCommandStatus status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PowerCommandFeedbackResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.PowerCommandFeedbackResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PowerCommandFeedbackResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PowerCommandFeedbackResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.PowerCommandFeedbackResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.PowerCommandFeedbackResponse)
    MergeFrom(*source);
  }
}

void PowerCommandFeedbackResponse::MergeFrom(const PowerCommandFeedbackResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.PowerCommandFeedbackResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void PowerCommandFeedbackResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.PowerCommandFeedbackResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PowerCommandFeedbackResponse::CopyFrom(const PowerCommandFeedbackResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.PowerCommandFeedbackResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerCommandFeedbackResponse::IsInitialized() const {
  return true;
}

void PowerCommandFeedbackResponse::InternalSwap(PowerCommandFeedbackResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PowerCommandFeedbackResponse, status_)
      + sizeof(PowerCommandFeedbackResponse::status_)
      - PROTOBUF_FIELD_OFFSET(PowerCommandFeedbackResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PowerCommandFeedbackResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bosdyn::api::PowerCommandRequest* Arena::CreateMaybeMessage< ::bosdyn::api::PowerCommandRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::PowerCommandRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::PowerCommandResponse* Arena::CreateMaybeMessage< ::bosdyn::api::PowerCommandResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::PowerCommandResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::PowerCommandFeedbackRequest* Arena::CreateMaybeMessage< ::bosdyn::api::PowerCommandFeedbackRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::PowerCommandFeedbackRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::PowerCommandFeedbackResponse* Arena::CreateMaybeMessage< ::bosdyn::api::PowerCommandFeedbackResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::PowerCommandFeedbackResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
