// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bosdyn/api/license.proto

#include "bosdyn/api/license.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2flicense_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LicenseInfo_bosdyn_2fapi_2flicense_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_bosdyn_2fapi_2fheader_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace bosdyn {
namespace api {
class LicenseInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LicenseInfo> _instance;
} _LicenseInfo_default_instance_;
class GetLicenseInfoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLicenseInfoRequest> _instance;
} _GetLicenseInfoRequest_default_instance_;
class GetLicenseInfoResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLicenseInfoResponse> _instance;
} _GetLicenseInfoResponse_default_instance_;
}  // namespace api
}  // namespace bosdyn
static void InitDefaultsscc_info_GetLicenseInfoRequest_bosdyn_2fapi_2flicense_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_GetLicenseInfoRequest_default_instance_;
    new (ptr) ::bosdyn::api::GetLicenseInfoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::GetLicenseInfoRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetLicenseInfoRequest_bosdyn_2fapi_2flicense_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetLicenseInfoRequest_bosdyn_2fapi_2flicense_2eproto}, {
      &scc_info_RequestHeader_bosdyn_2fapi_2fheader_2eproto.base,}};

static void InitDefaultsscc_info_GetLicenseInfoResponse_bosdyn_2fapi_2flicense_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_GetLicenseInfoResponse_default_instance_;
    new (ptr) ::bosdyn::api::GetLicenseInfoResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::GetLicenseInfoResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetLicenseInfoResponse_bosdyn_2fapi_2flicense_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetLicenseInfoResponse_bosdyn_2fapi_2flicense_2eproto}, {
      &scc_info_ResponseHeader_bosdyn_2fapi_2fheader_2eproto.base,
      &scc_info_LicenseInfo_bosdyn_2fapi_2flicense_2eproto.base,}};

static void InitDefaultsscc_info_LicenseInfo_bosdyn_2fapi_2flicense_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::bosdyn::api::_LicenseInfo_default_instance_;
    new (ptr) ::bosdyn::api::LicenseInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::bosdyn::api::LicenseInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LicenseInfo_bosdyn_2fapi_2flicense_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LicenseInfo_bosdyn_2fapi_2flicense_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_bosdyn_2fapi_2flicense_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_bosdyn_2fapi_2flicense_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_bosdyn_2fapi_2flicense_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_bosdyn_2fapi_2flicense_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::LicenseInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::LicenseInfo, status_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::LicenseInfo, id_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::LicenseInfo, robot_serial_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::LicenseInfo, not_valid_before_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::LicenseInfo, not_valid_after_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::LicenseInfo, licensed_features_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::GetLicenseInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::GetLicenseInfoRequest, header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::GetLicenseInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::GetLicenseInfoResponse, header_),
  PROTOBUF_FIELD_OFFSET(::bosdyn::api::GetLicenseInfoResponse, license_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::bosdyn::api::LicenseInfo)},
  { 11, -1, sizeof(::bosdyn::api::GetLicenseInfoRequest)},
  { 17, -1, sizeof(::bosdyn::api::GetLicenseInfoResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_LicenseInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_GetLicenseInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::bosdyn::api::_GetLicenseInfoResponse_default_instance_),
};

const char descriptor_table_protodef_bosdyn_2fapi_2flicense_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030bosdyn/api/license.proto\022\nbosdyn.api\032\027"
  "bosdyn/api/header.proto\032\037google/protobuf"
  "/timestamp.proto\"\215\003\n\013LicenseInfo\022.\n\006stat"
  "us\030\001 \001(\0162\036.bosdyn.api.LicenseInfo.Status"
  "\022\n\n\002id\030\002 \001(\t\022\024\n\014robot_serial\030\003 \001(\t\0224\n\020no"
  "t_valid_before\030\004 \001(\0132\032.google.protobuf.T"
  "imestamp\0223\n\017not_valid_after\030\005 \001(\0132\032.goog"
  "le.protobuf.Timestamp\022\031\n\021licensed_featur"
  "es\030\006 \003(\t\"\245\001\n\006Status\022\022\n\016STATUS_UNKNOWN\020\000\022"
  "\020\n\014STATUS_VALID\020\001\022\022\n\016STATUS_EXPIRED\020\002\022\030\n"
  "\024STATUS_NOT_YET_VALID\020\003\022\024\n\020STATUS_MALFOR"
  "MED\020\004\022\032\n\026STATUS_SERIAL_MISMATCH\020\005\022\025\n\021STA"
  "TUS_NO_LICENSE\020\006\"B\n\025GetLicenseInfoReques"
  "t\022)\n\006header\030\001 \001(\0132\031.bosdyn.api.RequestHe"
  "ader\"n\n\026GetLicenseInfoResponse\022*\n\006header"
  "\030\001 \001(\0132\032.bosdyn.api.ResponseHeader\022(\n\007li"
  "cense\030\002 \001(\0132\027.bosdyn.api.LicenseInfoB\016B\014"
  "LicenseProtob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_bosdyn_2fapi_2flicense_2eproto_deps[2] = {
  &::descriptor_table_bosdyn_2fapi_2fheader_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_bosdyn_2fapi_2flicense_2eproto_sccs[3] = {
  &scc_info_GetLicenseInfoRequest_bosdyn_2fapi_2flicense_2eproto.base,
  &scc_info_GetLicenseInfoResponse_bosdyn_2fapi_2flicense_2eproto.base,
  &scc_info_LicenseInfo_bosdyn_2fapi_2flicense_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_bosdyn_2fapi_2flicense_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bosdyn_2fapi_2flicense_2eproto = {
  false, false, descriptor_table_protodef_bosdyn_2fapi_2flicense_2eproto, "bosdyn/api/license.proto", 700,
  &descriptor_table_bosdyn_2fapi_2flicense_2eproto_once, descriptor_table_bosdyn_2fapi_2flicense_2eproto_sccs, descriptor_table_bosdyn_2fapi_2flicense_2eproto_deps, 3, 2,
  schemas, file_default_instances, TableStruct_bosdyn_2fapi_2flicense_2eproto::offsets,
  file_level_metadata_bosdyn_2fapi_2flicense_2eproto, 3, file_level_enum_descriptors_bosdyn_2fapi_2flicense_2eproto, file_level_service_descriptors_bosdyn_2fapi_2flicense_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_bosdyn_2fapi_2flicense_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_bosdyn_2fapi_2flicense_2eproto)), true);
namespace bosdyn {
namespace api {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LicenseInfo_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_bosdyn_2fapi_2flicense_2eproto);
  return file_level_enum_descriptors_bosdyn_2fapi_2flicense_2eproto[0];
}
bool LicenseInfo_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LicenseInfo_Status LicenseInfo::STATUS_UNKNOWN;
constexpr LicenseInfo_Status LicenseInfo::STATUS_VALID;
constexpr LicenseInfo_Status LicenseInfo::STATUS_EXPIRED;
constexpr LicenseInfo_Status LicenseInfo::STATUS_NOT_YET_VALID;
constexpr LicenseInfo_Status LicenseInfo::STATUS_MALFORMED;
constexpr LicenseInfo_Status LicenseInfo::STATUS_SERIAL_MISMATCH;
constexpr LicenseInfo_Status LicenseInfo::STATUS_NO_LICENSE;
constexpr LicenseInfo_Status LicenseInfo::Status_MIN;
constexpr LicenseInfo_Status LicenseInfo::Status_MAX;
constexpr int LicenseInfo::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void LicenseInfo::InitAsDefaultInstance() {
  ::bosdyn::api::_LicenseInfo_default_instance_._instance.get_mutable()->not_valid_before_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::bosdyn::api::_LicenseInfo_default_instance_._instance.get_mutable()->not_valid_after_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class LicenseInfo::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& not_valid_before(const LicenseInfo* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& not_valid_after(const LicenseInfo* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
LicenseInfo::_Internal::not_valid_before(const LicenseInfo* msg) {
  return *msg->not_valid_before_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
LicenseInfo::_Internal::not_valid_after(const LicenseInfo* msg) {
  return *msg->not_valid_after_;
}
void LicenseInfo::clear_not_valid_before() {
  if (GetArena() == nullptr && not_valid_before_ != nullptr) {
    delete not_valid_before_;
  }
  not_valid_before_ = nullptr;
}
void LicenseInfo::clear_not_valid_after() {
  if (GetArena() == nullptr && not_valid_after_ != nullptr) {
    delete not_valid_after_;
  }
  not_valid_after_ = nullptr;
}
LicenseInfo::LicenseInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  licensed_features_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.LicenseInfo)
}
LicenseInfo::LicenseInfo(const LicenseInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      licensed_features_(from.licensed_features_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  robot_serial_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_robot_serial().empty()) {
    robot_serial_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_robot_serial(),
      GetArena());
  }
  if (from._internal_has_not_valid_before()) {
    not_valid_before_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.not_valid_before_);
  } else {
    not_valid_before_ = nullptr;
  }
  if (from._internal_has_not_valid_after()) {
    not_valid_after_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.not_valid_after_);
  } else {
    not_valid_after_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.LicenseInfo)
}

void LicenseInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LicenseInfo_bosdyn_2fapi_2flicense_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  robot_serial_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&not_valid_before_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&not_valid_before_)) + sizeof(status_));
}

LicenseInfo::~LicenseInfo() {
  // @@protoc_insertion_point(destructor:bosdyn.api.LicenseInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LicenseInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  robot_serial_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete not_valid_before_;
  if (this != internal_default_instance()) delete not_valid_after_;
}

void LicenseInfo::ArenaDtor(void* object) {
  LicenseInfo* _this = reinterpret_cast< LicenseInfo* >(object);
  (void)_this;
}
void LicenseInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LicenseInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LicenseInfo& LicenseInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LicenseInfo_bosdyn_2fapi_2flicense_2eproto.base);
  return *internal_default_instance();
}


void LicenseInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.LicenseInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  licensed_features_.Clear();
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  robot_serial_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && not_valid_before_ != nullptr) {
    delete not_valid_before_;
  }
  not_valid_before_ = nullptr;
  if (GetArena() == nullptr && not_valid_after_ != nullptr) {
    delete not_valid_after_;
  }
  not_valid_after_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LicenseInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.LicenseInfo.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::bosdyn::api::LicenseInfo_Status>(val));
        } else goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.LicenseInfo.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string robot_serial = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_robot_serial();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.LicenseInfo.robot_serial"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp not_valid_before = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_not_valid_before(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp not_valid_after = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_not_valid_after(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string licensed_features = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_licensed_features();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "bosdyn.api.LicenseInfo.licensed_features"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LicenseInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.LicenseInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.LicenseInfo.Status status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.LicenseInfo.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // string robot_serial = 3;
  if (this->robot_serial().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_robot_serial().data(), static_cast<int>(this->_internal_robot_serial().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.LicenseInfo.robot_serial");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_robot_serial(), target);
  }

  // .google.protobuf.Timestamp not_valid_before = 4;
  if (this->has_not_valid_before()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::not_valid_before(this), target, stream);
  }

  // .google.protobuf.Timestamp not_valid_after = 5;
  if (this->has_not_valid_after()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::not_valid_after(this), target, stream);
  }

  // repeated string licensed_features = 6;
  for (int i = 0, n = this->_internal_licensed_features_size(); i < n; i++) {
    const auto& s = this->_internal_licensed_features(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bosdyn.api.LicenseInfo.licensed_features");
    target = stream->WriteString(6, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.LicenseInfo)
  return target;
}

size_t LicenseInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.LicenseInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string licensed_features = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(licensed_features_.size());
  for (int i = 0, n = licensed_features_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      licensed_features_.Get(i));
  }

  // string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string robot_serial = 3;
  if (this->robot_serial().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_robot_serial());
  }

  // .google.protobuf.Timestamp not_valid_before = 4;
  if (this->has_not_valid_before()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *not_valid_before_);
  }

  // .google.protobuf.Timestamp not_valid_after = 5;
  if (this->has_not_valid_after()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *not_valid_after_);
  }

  // .bosdyn.api.LicenseInfo.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LicenseInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.LicenseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const LicenseInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LicenseInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.LicenseInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.LicenseInfo)
    MergeFrom(*source);
  }
}

void LicenseInfo::MergeFrom(const LicenseInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.LicenseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  licensed_features_.MergeFrom(from.licensed_features_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.robot_serial().size() > 0) {
    _internal_set_robot_serial(from._internal_robot_serial());
  }
  if (from.has_not_valid_before()) {
    _internal_mutable_not_valid_before()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_not_valid_before());
  }
  if (from.has_not_valid_after()) {
    _internal_mutable_not_valid_after()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_not_valid_after());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void LicenseInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.LicenseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LicenseInfo::CopyFrom(const LicenseInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.LicenseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LicenseInfo::IsInitialized() const {
  return true;
}

void LicenseInfo::InternalSwap(LicenseInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  licensed_features_.InternalSwap(&other->licensed_features_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  robot_serial_.Swap(&other->robot_serial_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LicenseInfo, status_)
      + sizeof(LicenseInfo::status_)
      - PROTOBUF_FIELD_OFFSET(LicenseInfo, not_valid_before_)>(
          reinterpret_cast<char*>(&not_valid_before_),
          reinterpret_cast<char*>(&other->not_valid_before_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LicenseInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetLicenseInfoRequest::InitAsDefaultInstance() {
  ::bosdyn::api::_GetLicenseInfoRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::RequestHeader*>(
      ::bosdyn::api::RequestHeader::internal_default_instance());
}
class GetLicenseInfoRequest::_Internal {
 public:
  static const ::bosdyn::api::RequestHeader& header(const GetLicenseInfoRequest* msg);
};

const ::bosdyn::api::RequestHeader&
GetLicenseInfoRequest::_Internal::header(const GetLicenseInfoRequest* msg) {
  return *msg->header_;
}
void GetLicenseInfoRequest::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
GetLicenseInfoRequest::GetLicenseInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.GetLicenseInfoRequest)
}
GetLicenseInfoRequest::GetLicenseInfoRequest(const GetLicenseInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.GetLicenseInfoRequest)
}

void GetLicenseInfoRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetLicenseInfoRequest_bosdyn_2fapi_2flicense_2eproto.base);
  header_ = nullptr;
}

GetLicenseInfoRequest::~GetLicenseInfoRequest() {
  // @@protoc_insertion_point(destructor:bosdyn.api.GetLicenseInfoRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetLicenseInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void GetLicenseInfoRequest::ArenaDtor(void* object) {
  GetLicenseInfoRequest* _this = reinterpret_cast< GetLicenseInfoRequest* >(object);
  (void)_this;
}
void GetLicenseInfoRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLicenseInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLicenseInfoRequest& GetLicenseInfoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLicenseInfoRequest_bosdyn_2fapi_2flicense_2eproto.base);
  return *internal_default_instance();
}


void GetLicenseInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.GetLicenseInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLicenseInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLicenseInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.GetLicenseInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.GetLicenseInfoRequest)
  return target;
}

size_t GetLicenseInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.GetLicenseInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLicenseInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.GetLicenseInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLicenseInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLicenseInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.GetLicenseInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.GetLicenseInfoRequest)
    MergeFrom(*source);
  }
}

void GetLicenseInfoRequest::MergeFrom(const GetLicenseInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.GetLicenseInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::RequestHeader::MergeFrom(from._internal_header());
  }
}

void GetLicenseInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.GetLicenseInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLicenseInfoRequest::CopyFrom(const GetLicenseInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.GetLicenseInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLicenseInfoRequest::IsInitialized() const {
  return true;
}

void GetLicenseInfoRequest::InternalSwap(GetLicenseInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLicenseInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetLicenseInfoResponse::InitAsDefaultInstance() {
  ::bosdyn::api::_GetLicenseInfoResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::bosdyn::api::ResponseHeader*>(
      ::bosdyn::api::ResponseHeader::internal_default_instance());
  ::bosdyn::api::_GetLicenseInfoResponse_default_instance_._instance.get_mutable()->license_ = const_cast< ::bosdyn::api::LicenseInfo*>(
      ::bosdyn::api::LicenseInfo::internal_default_instance());
}
class GetLicenseInfoResponse::_Internal {
 public:
  static const ::bosdyn::api::ResponseHeader& header(const GetLicenseInfoResponse* msg);
  static const ::bosdyn::api::LicenseInfo& license(const GetLicenseInfoResponse* msg);
};

const ::bosdyn::api::ResponseHeader&
GetLicenseInfoResponse::_Internal::header(const GetLicenseInfoResponse* msg) {
  return *msg->header_;
}
const ::bosdyn::api::LicenseInfo&
GetLicenseInfoResponse::_Internal::license(const GetLicenseInfoResponse* msg) {
  return *msg->license_;
}
void GetLicenseInfoResponse::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
GetLicenseInfoResponse::GetLicenseInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bosdyn.api.GetLicenseInfoResponse)
}
GetLicenseInfoResponse::GetLicenseInfoResponse(const GetLicenseInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::bosdyn::api::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_license()) {
    license_ = new ::bosdyn::api::LicenseInfo(*from.license_);
  } else {
    license_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:bosdyn.api.GetLicenseInfoResponse)
}

void GetLicenseInfoResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetLicenseInfoResponse_bosdyn_2fapi_2flicense_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&license_) -
      reinterpret_cast<char*>(&header_)) + sizeof(license_));
}

GetLicenseInfoResponse::~GetLicenseInfoResponse() {
  // @@protoc_insertion_point(destructor:bosdyn.api.GetLicenseInfoResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetLicenseInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete license_;
}

void GetLicenseInfoResponse::ArenaDtor(void* object) {
  GetLicenseInfoResponse* _this = reinterpret_cast< GetLicenseInfoResponse* >(object);
  (void)_this;
}
void GetLicenseInfoResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLicenseInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLicenseInfoResponse& GetLicenseInfoResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLicenseInfoResponse_bosdyn_2fapi_2flicense_2eproto.base);
  return *internal_default_instance();
}


void GetLicenseInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:bosdyn.api.GetLicenseInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArena() == nullptr && license_ != nullptr) {
    delete license_;
  }
  license_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLicenseInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .bosdyn.api.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .bosdyn.api.LicenseInfo license = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_license(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLicenseInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bosdyn.api.GetLicenseInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .bosdyn.api.LicenseInfo license = 2;
  if (this->has_license()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::license(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bosdyn.api.GetLicenseInfoResponse)
  return target;
}

size_t GetLicenseInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bosdyn.api.GetLicenseInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .bosdyn.api.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .bosdyn.api.LicenseInfo license = 2;
  if (this->has_license()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *license_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLicenseInfoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bosdyn.api.GetLicenseInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLicenseInfoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLicenseInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bosdyn.api.GetLicenseInfoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bosdyn.api.GetLicenseInfoResponse)
    MergeFrom(*source);
  }
}

void GetLicenseInfoResponse::MergeFrom(const GetLicenseInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bosdyn.api.GetLicenseInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    _internal_mutable_header()->::bosdyn::api::ResponseHeader::MergeFrom(from._internal_header());
  }
  if (from.has_license()) {
    _internal_mutable_license()->::bosdyn::api::LicenseInfo::MergeFrom(from._internal_license());
  }
}

void GetLicenseInfoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bosdyn.api.GetLicenseInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLicenseInfoResponse::CopyFrom(const GetLicenseInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bosdyn.api.GetLicenseInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLicenseInfoResponse::IsInitialized() const {
  return true;
}

void GetLicenseInfoResponse::InternalSwap(GetLicenseInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetLicenseInfoResponse, license_)
      + sizeof(GetLicenseInfoResponse::license_)
      - PROTOBUF_FIELD_OFFSET(GetLicenseInfoResponse, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLicenseInfoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace api
}  // namespace bosdyn
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bosdyn::api::LicenseInfo* Arena::CreateMaybeMessage< ::bosdyn::api::LicenseInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::LicenseInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::GetLicenseInfoRequest* Arena::CreateMaybeMessage< ::bosdyn::api::GetLicenseInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::GetLicenseInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::bosdyn::api::GetLicenseInfoResponse* Arena::CreateMaybeMessage< ::bosdyn::api::GetLicenseInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bosdyn::api::GetLicenseInfoResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
